struct BINARY_DATA;
enum BUS_QUERY_ID_TYPE;
struct CO_ADDRESS_FAMILY;
struct CO_SAP;
enum DEVICE_TEXT_TYPE;
enum DL_ADDRESS_TYPE;
enum DMA_COMPLETION_STATUS;
struct DOT11_ASSOCIATION_INFO_LIST;
struct DOT11_ASSOCIATION_PARAMS;
struct DOT11_AUTH_ALGORITHM_LIST;
struct DOT11_AUTH_CIPHER_PAIR;
struct DOT11_AUTH_CIPHER_PAIR_LIST;
struct DOT11_BSSID_LIST;
struct DOT11_BYTE_ARRAY;
struct DOT11_CIPHER_ALGORITHM_LIST;
struct DOT11_CIPHER_DEFAULT_KEY_VALUE;
struct DOT11_COUNTRY_OR_REGION_STRING_LIST;
struct DOT11_DATA_RATE_MAPPING_ENTRY;
struct DOT11_ERP_PHY_ATTRIBUTES;
struct DOT11_EXTSTA_ATTRIBUTES;
struct DOT11_EXTSTA_CAPABILITY;
struct DOT11_HRDSSS_PHY_ATTRIBUTES;
struct DOT11_IBSS_PARAMS;
struct DOT11_MAC_ADDRESS_LIST;
struct DOT11_MAC_FRAME_STATISTICS;
struct DOT11_OFDM_PHY_ATTRIBUTES;
struct DOT11_PHY_ATTRIBUTES;
struct DOT11_PHY_FRAME_STATISTICS;
struct DOT11_PHY_ID_LIST;
struct DOT11_PMKID_ENTRY;
struct DOT11_PMKID_LIST;
struct DOT11_PORT_STATE_NOTIFICATION;
struct DOT11_PRIVACY_EXEMPTION;
struct DOT11_PRIVACY_EXEMPTION_LIST;
struct DOT11_QOS_PARAMS;
struct DOT11_SSID_LIST;
struct DOT11_STATISTICS;
struct DOT11_VWIFI_ATTRIBUTES;
struct FILTERDBS;
enum INDICATE_OFFLOAD_EVENT;
struct KSALLOCATOR_FRAMING;
struct KSALLOCATOR_FRAMING_EX;
struct KSATTRIBUTE;
struct KSATTRIBUTE_LIST;
struct KSAUTOMATION_TABLE_;
struct KSBUFFER_ITEM;
struct KSCOMPONENTID;
union KSDATAFORMAT;
struct KSDPC_ITEM;
struct KSEVENTDATA;
struct KSEVENT_ITEM;
struct KSEVENT_SET;
struct KSFASTMETHOD_ITEM;
struct KSFASTPROPERTY_ITEM;
struct KSIDENTIFIER;
struct KSMETHOD_ITEM;
struct KSMETHOD_SET;
struct KSMULTIPLE_ITEM;
enum KSPIN_COMMUNICATION;
enum KSPIN_DATAFLOW;
struct KSPIN_DESCRIPTOR;
struct KSPRIORITY;
struct KSPROPERTY_ITEM;
struct KSPROPERTY_MEMBERSHEADER;
struct KSPROPERTY_MEMBERSLIST;
struct KSPROPERTY_SET;
struct KSPROPERTY_VALUES;
struct KSP_PIN;
enum KSRESET;
struct KSRESOLUTION;
enum KSSTATE;
struct KSSTREAM_HEADER;
struct KSTIME;
struct KSTOPOLOGY_CONNECTION;
struct KS_COMPRESSION;
struct KS_FRAMING_ITEM;
struct KS_FRAMING_RANGE;
struct KS_FRAMING_RANGE_WEIGHTED;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct MSIX_TABLE_POINTER;
enum NDIS_CHIMNEY_OFFLOAD_TYPE;
struct NDIS_EVENT_LOG_HANDLE__;
struct NDIS_NBL_TRACKER_HANDLE__;
struct NDIS_REFCOUNT_HANDLE__;
struct NDK_VERSION;
enum NL_ADDRESS_TYPE;
enum NetDmaEventTypes;
enum OFFLOAD_STATE_TYPE;
struct PCI_MSIX_CAPABILITY;
struct PCI_MSI_CAPABILITY;
struct PNDIS_PER_PROCESSOR_SLOT__;
enum POWER_ACTION;
enum PS_CREATE_STATE;
enum ReplacesCorHdrNumericDefines;
struct SCOPE_ID;
enum SCOPE_LEVEL;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum TCP_OFFLOAD_CONNECTION_STATE;
enum TCP_OFFLOAD_EVENT_TYPE;
enum TCP_UPLOAD_REASON;
struct _ACCESS_REASONS;
struct _ACCESS_STATE;
struct _ACTIVATION_CONTEXT;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_STACK;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
struct _ASSEMBLY_STORAGE_MAP;
struct _AUX_ACCESS_DATA;
struct _CLIENT_ID;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_RESOURCE_LIST;
struct _COMPRESSED_DATA_INFO;
struct _CONTEXT;
struct _CO_ADDRESS;
struct _CO_ADDRESS_LIST;
struct _CO_CALL_MANAGER_PARAMETERS;
struct _CO_CALL_PARAMETERS;
struct _CO_MEDIA_PARAMETERS;
struct _CO_PVC;
struct _CO_SPECIFIC_PARAMETERS;
struct _CURDIR;
union _DATA;
struct _DEVICE_CAPABILITIES;
struct _DEVICE_OBJECT;
struct _DEVICE_OBJECT_POWER_EXTENSION;
enum _DEVICE_POWER_STATE;
enum _DEVICE_RELATION_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _DEVICE_WAKE_DEPTH;
struct _DEVOBJ_EXTENSION;
struct _DEVPROPKEY;
struct _DISPATCHER_HEADER;
union _DL_EI48;
union _DL_EUI48;
union _DL_OUI;
struct _DMA_ADAPTER;
struct _DMA_ADAPTER_INFO;
struct _DMA_ADAPTER_INFO_V1;
struct _DMA_OPERATIONS;
enum _DMA_SPEED;
struct _DMA_TRANSFER_INFO;
struct _DMA_TRANSFER_INFO_V1;
enum _DMA_WIDTH;
struct _DOT11_ADDITIONAL_IE;
struct _DOT11_ASSOCIATION_INFO_EX;
enum _DOT11_ASSOCIATION_STATE;
enum _DOT11_AUTH_ALGORITHM;
struct _DOT11_AVAILABLE_CHANNEL_LIST;
struct _DOT11_AVAILABLE_FREQUENCY_LIST;
enum _DOT11_CIPHER_ALGORITHM;
struct _DOT11_DISASSOCIATE_PEER_REQUEST;
enum _DOT11_DIVERSITY_SUPPORT;
struct _DOT11_EXTAP_ATTRIBUTES;
struct _DOT11_INCOMING_ASSOC_DECISION;
struct _DOT11_PEER_INFO;
struct _DOT11_PEER_INFO_LIST;
struct _DOT11_PEER_STATISTICS;
enum _DOT11_PHY_TYPE;
enum _DOT11_POWER_MODE;
struct _DOT11_RSN_REKEY_PARAMETERS;
struct _DOT11_SSID;
struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2;
enum _DOT11_TEMP_TYPE;
struct _DOT11_VWIFI_COMBINATION;
struct _DOT11_WFD_ATTRIBUTES;
struct _DRIVER_EXTENSION;
struct _DRIVER_OBJECT;
struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _ECP_LIST;
struct _EPROCESS;
struct _ERESOURCE;
struct _ETHREAD;
struct _ETH_MULTICAST_WRAPPER;
struct _ETW_BUFFER_CONTEXT;
struct _EVENT_DATA_DESCRIPTOR;
struct _EVENT_DESCRIPTOR;
struct _EVENT_FILTER_DESCRIPTOR;
struct _EVENT_HEADER;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
struct _EVENT_RECORD;
enum _EVENT_TYPE;
enum _EXCEPTION_DISPOSITION;
struct _EXCEPTION_RECORD;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _EX_PUSH_LOCK;
struct _EX_PUSH_LOCK_CACHE_AWARE;
struct _FAST_IO_DISPATCH;
struct _FAST_MUTEX;
union _FIELD_VALUE;
struct _FILE_BASIC_INFORMATION;
enum _FILE_INFORMATION_CLASS;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_OBJECT;
struct _FILE_STANDARD_INFORMATION;
struct _FILTER_PAUSE_RESTART_CONTEXT;
struct _FLS_CALLBACK_INFO;
enum _FSINFOCLASS;
struct _GDI_TEB_BATCH;
struct _GENERAL_LOOKASIDE;
struct _GENERAL_LOOKASIDE_POOL;
struct _GENERIC_MAPPING;
struct _GEN_GET_NETCARD_TIME;
struct _GEN_GET_TIME_CAPS;
struct _GROUP_AFFINITY;
struct _GUID;
union _HEADER_FIELD;
struct _IF_COUNTED_STRING_LH;
struct _IF_PHYSICAL_ADDRESS_LH;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_OPTIONAL_HEADER64;
struct _INITIAL_PRIVILEGE_SET;
struct _INTERFACE;
enum _INTERFACE_TYPE;
enum _INTERLOCKED_RESULT;
enum _IO_ALLOCATION_ACTION;
struct _IO_COMPLETION_CONTEXT;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _IO_INTERRUPT_MESSAGE_INFO;
struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY;
struct _IO_REMOVE_LOCK;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _IO_SECURITY_CONTEXT;
struct _IO_STACK_LOCATION;
struct _IO_STATUS_BLOCK;
struct _IO_TIMER;
struct _IPSEC_OFFLOAD_V2_ADD_SA;
struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO;
struct _IPSEC_OFFLOAD_V2_DELETE_SA;
enum _IPSEC_OFFLOAD_V2_OPERATION;
struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION;
struct _IPSEC_OFFLOAD_V2_UPDATE_SA;
struct _IPV4_ARP_PARAMETERS;
struct _IPV4_HEADER;
struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IPV6_FRAGMENT_HEADER;
struct _IPV6_NS_PARAMETERS;
struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _IP_OFFLOAD_STATS;
struct _IRP;
enum _IRQ_PRIORITY;
enum _JOBOBJECTINFOCLASS;
struct _KAPC;
struct _KBUGCHECK_CALLBACK_RECORD;
struct _KDESCRIPTOR;
struct _KDEVICE_QUEUE;
struct _KDEVICE_QUEUE_ENTRY;
struct _KDPC;
struct _KEVENT;
struct _KFLOATING_SAVE;
union _KGDTENTRY64;
union _KIDTENTRY64;
struct _KINTERRUPT;
enum _KINTERRUPT_MODE;
enum _KINTERRUPT_POLARITY;
struct _KMUTANT;
struct _KPCR;
struct _KPRCB;
struct _KPROCESS;
struct _KPROCESSOR_STATE;
struct _KSALLOCATOR_DISPATCH;
struct _KSCLOCK_DISPATCH;
struct _KSDEVICE;
struct _KSDEVICE_DESCRIPTOR;
struct _KSDEVICE_DISPATCH;
struct _KSEMAPHORE;
struct _KSEVENT_ENTRY;
struct _KSFILTER;
struct _KSFILTERFACTORY;
struct _KSFILTER_DESCRIPTOR;
struct _KSFILTER_DISPATCH;
struct _KSGATE;
struct _KSMAPPING;
struct _KSNODE_DESCRIPTOR;
struct _KSPECIAL_REGISTERS;
struct _KSPIN;
struct _KSPIN_DESCRIPTOR_EX;
struct _KSPIN_DISPATCH;
struct _KSPIN_LOCK_QUEUE;
struct _KSPROCESSPIN;
struct _KSPROCESSPIN_INDEXENTRY;
struct _KSSTREAM_POINTER;
struct _KSSTREAM_POINTER_OFFSET;
struct _KSYSTEM_TIME;
struct _KTHREAD;
struct _KTIMER;
struct _KTSS64;
struct _KUSER_SHARED_DATA;
union _LARGE_INTEGER;
struct _LIST_ENTRY;
struct _LOCK_STATE;
struct _LOCK_STATE_EX;
struct _LOOKASIDE_LIST_EX;
struct _LUID;
struct _LUID_AND_ATTRIBUTES;
struct _M128A;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _MAP_REGISTER_ENTRY;
struct _MCGEN_TRACE_CONTEXT;
struct _MDL;
struct _MEDIA_SPECIFIC_INFORMATION;
enum _MEMORY_CACHING_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
struct _METHOD;
enum _MM_PAGE_PRIORITY;
enum _MODE;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NBL_QUEUE;
struct _NDIS40_PROTOCOL_CHARACTERISTICS;
struct _NDIS50_MINIPORT_CHARACTERISTICS;
struct _NDIS50_PROTOCOL_CHARACTERISTICS;
struct _NDIS51_MINIPORT_CHARACTERISTICS;
enum _NDIS_802_11_WEP_STATUS;
struct _NDIS_AF_LIST;
enum _NDIS_ARP_HEADER_FIELD;
struct _NDIS_BIND_PARAMETERS;
struct _NDIS_BIND_PATHS;
struct _NDIS_CALL_MANAGER_CHARACTERISTICS;
enum _NDIS_CLASS_ID;
struct _NDIS_CLIENT_CHARACTERISTICS;
struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS;
struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS;
struct _NDIS_COMMON_OPEN_BLOCK;
struct _NDIS_COMPOSITE_BUS_INFORMATION;
struct _NDIS_CONFIGURATION_OBJECT;
struct _NDIS_CONFIGURATION_PARAMETER;
struct _NDIS_CONNECTION_INFO;
struct _NDIS_CO_AF_BLOCK;
struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS;
struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS;
struct _NDIS_CO_PARTY_BLOCK;
struct _NDIS_CO_SAP_BLOCK;
struct _NDIS_CO_VC_BLOCK;
struct _NDIS_CO_VC_PTR_BLOCK;
struct _NDIS_D0_SIGNAL_WORK_ITEM;
enum _NDIS_DATA_PATH_TYPE;
struct _NDIS_DEVICE_OBJECT_ATTRIBUTES;
enum _NDIS_DEVICE_PNP_EVENT;
enum _NDIS_DEVICE_POWER_STATE;
struct _NDIS_DMA_BLOCK;
struct _NDIS_DMA_DESCRIPTION;
struct _NDIS_DPC_TRACKER;
struct _NDIS_DPC_WORK_ITEM;
struct _NDIS_DRIVER_OPTIONAL_HANDLERS;
struct _NDIS_DRIVER_WRAPPER_HANDLE;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD;
enum _NDIS_ENCAPSULATION;
struct _NDIS_ENCAPSULATION_FORMAT;
struct _NDIS_ENTRY_HEADER;
struct _NDIS_ENUM_FILTERS;
enum _NDIS_ENVIRONMENT_TYPE;
struct _NDIS_EVENT;
struct _NDIS_EVENT_LOG;
struct _NDIS_EVENT_LOG_ENTRY;
struct _NDIS_FILTER_ATTACH_LIST;
struct _NDIS_FILTER_ATTACH_PARAMETERS;
struct _NDIS_FILTER_ATTRIBUTES;
struct _NDIS_FILTER_BLOCK;
struct _NDIS_FILTER_DRIVER_BLOCK;
struct _NDIS_FILTER_DRIVER_CHARACTERISTICS;
struct _NDIS_FILTER_INTERFACE;
struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS;
struct _NDIS_FILTER_PAUSE_PARAMETERS;
struct _NDIS_FILTER_RESTART_PARAMETERS;
enum _NDIS_FILTER_RUN_TYPE;
enum _NDIS_FILTER_STATE;
struct _NDIS_FILTER_TASK_OFFLOAD;
enum _NDIS_FILTER_TYPE;
enum _NDIS_FPNP_REFTAG;
enum _NDIS_FRAME_HEADER;
struct _NDIS_FRAME_TYPE_AND_OPEN;
struct _NDIS_FRAME_TYPE_RECORD;
struct _NDIS_GENERIC_OBJECT;
struct _NDIS_GLOBAL_TRIAGE_BLOCK;
struct _NDIS_GUID;
enum _NDIS_HALT_ACTION;
struct _NDIS_HD_SPLIT_ATTRIBUTES;
struct _NDIS_HD_SPLIT_CURRENT_CONFIG;
struct _NDIS_IF_BLOCK;
struct _NDIS_IF_COMPARTMENT_BLOCK;
struct _NDIS_IF_NETWORK_BLOCK;
struct _NDIS_IF_PROVIDER_BLOCK;
struct _NDIS_IF_PROVIDER_CHARACTERISTICS;
struct _NDIS_IF_RCV_ADDRESS;
enum _NDIS_IF_REFTAG;
struct _NDIS_IF_STACK_ENTRY;
enum _NDIS_INTERFACE_TYPE;
struct _NDIS_INTERRUPT_BLOCK;
enum _NDIS_INTERRUPT_MODERATION;
struct _NDIS_INTERRUPT_MODERATION_PARAMETERS;
enum _NDIS_INTERRUPT_TYPE;
struct _NDIS_IPSEC_OFFLOAD_V1;
struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2;
struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO;
struct _NDIS_IPSEC_PACKET_INFO;
enum _NDIS_IPV4_HEADER_FIELD;
enum _NDIS_IPV6_HEADER_FIELD;
struct _NDIS_IRP_WORK_ITEM;
struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY;
struct _NDIS_LINK_PARAMETERS;
struct _NDIS_LINK_STATE;
struct _NDIS_LOG;
enum _NDIS_LWFDRV_REFTAG;
enum _NDIS_LWF_REFTAG;
enum _NDIS_MAC_HEADER_FIELD;
enum _NDIS_MDRV_REFTAG;
enum _NDIS_MEDIUM;
union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_AOAC;
struct _NDIS_MINIPORT_BLOCK;
struct _NDIS_MINIPORT_CO_CHARACTERISTICS;
struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS;
enum _NDIS_MINIPORT_EVENT;
struct _NDIS_MINIPORT_HANDLERS;
struct _NDIS_MINIPORT_INIT_PARAMETERS;
struct _NDIS_MINIPORT_INTERRUPT;
struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS;
struct _NDIS_MINIPORT_OFFLOAD;
struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST;
struct _NDIS_MINIPORT_OFFLOAD_REG;
struct _NDIS_MINIPORT_PAUSE_PARAMETERS;
struct _NDIS_MINIPORT_PNP_CHARACTERISTICS;
struct _NDIS_MINIPORT_RESTART_PARAMETERS;
struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE;
enum _NDIS_MINIPORT_STATE;
struct _NDIS_MINIPORT_STATS;
struct _NDIS_MINIPORT_SYSPOWER_NOTIFY;
struct _NDIS_MINIPORT_TIMER;
struct _NDIS_MINIPORT_WORK_ITEM;
enum _NDIS_MPIF_REFTAG;
enum _NDIS_MP_REFTAG;
struct _NDIS_MSIX_CONFIG_PARAMETERS;
enum _NDIS_MSIX_TABLE_CONFIG;
struct _NDIS_M_DRIVER_BLOCK;
struct _NDIS_M_PERIODIC_RECEIVES;
enum _NDIS_M_PERIODIC_RECEIVE_STATE;
struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION;
struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX;
struct _NDIS_NBL_TRACKER;
struct _NDIS_NBL_TRACKER_BUCKET;
enum _NDIS_NBL_TRACKER_LIFETIME_EVENT;
enum _NDIS_NBL_TRACKER_MODE;
enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT;
enum _NDIS_NBL_TRACKER_SOURCE;
enum _NDIS_NDIS5_DRIVER_STATE;
struct _NDIS_NDK_CAPABILITIES;
struct _NDIS_NDK_PERFORMANCE_COUNTERS;
struct _NDIS_NET_BUFFER_LIST_8021Q_INFO;
struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO;
enum _NDIS_NET_BUFFER_LIST_INFO;
struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO;
struct _NDIS_NET_BUFFER_LIST_POOL;
struct _NDIS_NET_BUFFER_POOL;
enum _NDIS_NIC_ACTIVE_STATE;
struct _NDIS_NIC_SWITCH_BLOCK;
struct _NDIS_NIC_SWITCH_CAPABILITIES;
struct _NDIS_NIC_SWITCH_INFO_ARRAY;
struct _NDIS_NIC_SWITCH_PARAMETERS;
enum _NDIS_NIC_SWITCH_TYPE;
struct _NDIS_NIC_SWITCH_VF_PARAMETERS;
enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION;
struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS;
enum _NDIS_NIC_SWITCH_VPORT_STATE;
struct _NDIS_NPAGED_LOOKASIDE_LIST;
struct _NDIS_NSI_COMPARTMENT_RW;
struct _NDIS_NSI_NETWORK_RW;
enum _NDIS_NSI_REFTAG;
struct _NDIS_OBJECT_HEADER;
struct _NDIS_OFFLOAD;
struct _NDIS_OFFLOAD_CLIENT_HANDLERS;
struct _NDIS_OFFLOAD_ENCAPSULATION;
struct _NDIS_OFFLOAD_EVENT_HANDLERS;
struct _NDIS_OFFLOAD_HANDLE;
struct _NDIS_OFFLOAD_HANDLE_PRIVATE;
struct _NDIS_OID_CACHE_ENTRY;
struct _NDIS_OID_REQUEST;
struct _NDIS_OID_REQUEST_FLAGS;
struct _NDIS_OID_REQUEST_RESERVED;
struct _NDIS_OPEN_BLOCK;
struct _NDIS_OPEN_NDK_ADAPTER_PARAMETERS;
struct _NDIS_OPEN_OFFLOAD;
struct _NDIS_OPEN_PARAMETERS;
enum _NDIS_OPEN_STATE;
enum _NDIS_OPEN_UNBIND_REASON;
struct _NDIS_PACKET;
struct _NDIS_PACKET_8021Q_INFO;
struct _NDIS_PACKET_EXTENSION;
struct _NDIS_PACKET_OOB_DATA;
struct _NDIS_PACKET_PATTERN_ENTRY;
struct _NDIS_PACKET_PRIVATE;
struct _NDIS_PACKET_STACK;
struct _NDIS_PACKET_WRAPPER;
enum _NDIS_PARAMETER_TYPE;
struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES;
struct _NDIS_PCW_CONTEXT;
struct _NDIS_PCW_DATA_BLOCK;
struct _NDIS_PCW_PER_CPU_DATA_BLOCK;
struct _NDIS_PENDING_IM_INSTANCE;
enum _NDIS_PER_PACKET_INFO;
struct _NDIS_PER_PROC_PERFORMANCE_COUNTERS;
struct _NDIS_PF_BLOCK;
struct _NDIS_PHYSICAL_ADDRESS_UNIT;
enum _NDIS_PHYSICAL_MEDIUM;
struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS;
struct _NDIS_PKT_POOL;
struct _NDIS_PKT_POOL_HDR;
struct _NDIS_PM_ADMIN_CONFIG;
struct _NDIS_PM_CAPABILITIES;
struct _NDIS_PM_COUNTED_STRING;
struct _NDIS_PM_PACKET_PATTERN;
struct _NDIS_PM_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD;
enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE;
enum _NDIS_PM_WAKE_REASON_TYPE;
struct _NDIS_PM_WAKE_UP_CAPABILITIES;
enum _NDIS_PM_WOL_PACKET;
struct _NDIS_PM_WOL_PATTERN;
struct _NDIS_PNP_CAPABILITIES;
enum _NDIS_PNP_DEVICE_STATE;
struct _NDIS_POOL_HEADER;
struct _NDIS_PORT;
struct _NDIS_PORT_ARRAY;
struct _NDIS_PORT_AUTHENTICATION_PARAMETERS;
enum _NDIS_PORT_AUTHORIZATION_STATE;
struct _NDIS_PORT_BLOCK;
struct _NDIS_PORT_CHARACTERISTICS;
enum _NDIS_PORT_CONTROL_STATE;
enum _NDIS_PORT_PNP_STATE;
struct _NDIS_PORT_STATE;
enum _NDIS_PORT_TYPE;
enum _NDIS_POWER_PROFILE;
struct _NDIS_PROCESSOR_INFO;
enum _NDIS_PROCESSOR_TYPE;
enum _NDIS_PROCESSOR_VENDOR;
struct _NDIS_PROTOCOL_BLOCK;
struct _NDIS_PROTOCOL_CO_CHARACTERISTICS;
struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS;
struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST;
struct _NDIS_PROTOCOL_PAUSE_PARAMETERS;
struct _NDIS_PROTOCOL_RESTART_PARAMETERS;
struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS;
struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS;
enum _NDIS_PT_REFTAG;
struct _NDIS_QOS_CAPABILITIES;
struct _NDIS_QOS_CLASSIFICATION_ELEMENT;
struct _NDIS_QOS_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_BLOCK;
struct _NDIS_RECEIVE_FILTER_CAPABILITIES;
struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_PARAMETERS;
enum _NDIS_RECEIVE_FILTER_TEST;
enum _NDIS_RECEIVE_FILTER_TYPE;
struct _NDIS_RECEIVE_HASH_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_BLOCK;
enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE;
struct _NDIS_RECEIVE_QUEUE_PARAMETERS;
enum _NDIS_RECEIVE_QUEUE_PNP_STATE;
struct _NDIS_RECEIVE_QUEUE_STATE;
enum _NDIS_RECEIVE_QUEUE_TYPE;
struct _NDIS_RECEIVE_SCALE_CAPABILITIES;
struct _NDIS_RECEIVE_SCALE_PARAMETERS;
struct _NDIS_REFCOUNT_BLOCK;
struct _NDIS_REFCOUNT_STACK_BLOCK;
struct _NDIS_REFCOUNT_STACK_ENTRY;
struct _NDIS_REFCOUNT_TAGGED;
struct _NDIS_REFCOUNT_TAGGED_ENTRY;
struct _NDIS_REFCOUNT_WITH_STACK;
struct _NDIS_REQUEST;
enum _NDIS_REQUEST_TYPE;
struct _NDIS_REQUEST_XLATION_CONTEXT;
struct _NDIS_RESTART_ATTRIBUTES;
struct _NDIS_RESTART_GENERAL_ATTRIBUTES;
union _NDIS_RSC_NBL_INFO;
enum _NDIS_RSS_PROFILE;
struct _NDIS_RW_LOCK;
struct _NDIS_RW_LOCK_EX;
union _NDIS_RW_LOCK_REFCOUNT;
struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS;
struct _NDIS_SELECTIVE_SUSPEND;
enum _NDIS_SEND_PATH_TYPE;
struct _NDIS_SG_DMA_BLOCK;
struct _NDIS_SG_DMA_DESCRIPTION;
struct _NDIS_SHARED_MEMORY_BLOCK;
struct _NDIS_SHARED_MEMORY_PARAMETERS;
struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS;
enum _NDIS_SHARED_MEMORY_USAGE;
enum _NDIS_SHUTDOWN_ACTION;
struct _NDIS_SPIN_LOCK;
struct _NDIS_SRIOV_CAPABILITIES;
enum _NDIS_SS_BUSY_REASON;
struct _NDIS_SS_CONTROL_OPS;
struct _NDIS_SS_IDLE_FLAGS;
union _NDIS_SS_RESUME_REASON;
struct _NDIS_SS_STOP_FLAGS;
enum _NDIS_SS_STOP_REASON;
struct _NDIS_STACK_TRACE_TABLE;
struct _NDIS_STATISTICS_INFO;
struct _NDIS_STATUS_INDICATION;
struct _NDIS_STATUS_UNBIND_WORKITEM;
enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS;
struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY;
union _NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO;
struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO;
struct _NDIS_SWITCH_PORT_DESTINATION;
struct _NDIS_SYSTEM_PROCESSOR_INFO;
enum _NDIS_TASK;
struct _NDIS_TASK_IPSEC;
struct _NDIS_TASK_OFFLOAD;
struct _NDIS_TASK_OFFLOAD_HEADER;
struct _NDIS_TASK_TCP_IP_CHECKSUM;
struct _NDIS_TASK_TCP_LARGE_SEND;
struct _NDIS_TCP_CONNECTION_OFFLOAD;
struct _NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION;
struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS;
struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO;
struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD;
struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2;
struct _NDIS_TCP_OFFLOAD_CLIENT_HANDLERS;
struct _NDIS_TCP_OFFLOAD_EVENT_HANDLERS;
struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD;
struct _NDIS_TIMER;
struct _NDIS_TIMER_CHARACTERISTICS;
struct _NDIS_TIMER_ENTRY;
enum _NDIS_TMP_REF_REASON;
struct _NDIS_TRACK_MEM;
enum _NDIS_UDP_HEADER_FIELD;
struct _NDIS_VF_BLOCK;
struct _NDIS_VPORT_BLOCK;
struct _NDIS_WAN_COMPRESS_INFO;
struct _NDIS_WAN_CO_GET_COMP_INFO;
struct _NDIS_WAN_CO_GET_LINK_INFO;
struct _NDIS_WAN_CO_GET_STATS_INFO;
struct _NDIS_WAN_CO_INFO;
struct _NDIS_WAN_CO_SET_COMP_INFO;
struct _NDIS_WAN_CO_SET_LINK_INFO;
struct _NDIS_WAN_FRAGMENT;
struct _NDIS_WAN_GET_STATS;
struct _NDIS_WAN_LINE_DOWN;
struct _NDIS_WAN_LINE_UP;
struct _NDIS_WAN_PACKET;
enum _NDIS_WAN_QUALITY;
struct _NDIS_WOL_XLATION_CONTEXT;
struct _NDIS_WORK_ITEM;
enum _NDIS_WORK_ITEM_TYPE;
struct _NDIS_WRAPPER_CONFIGURATION_HANDLE;
struct _NDIS_WRAPPER_HANDLE;
struct _NDIS_WWAN_AUTH_CHALLENGE;
struct _NDIS_WWAN_DEVICE_CAPS;
struct _NDIS_WWAN_DRIVER_CAPS;
struct _NDIS_WWAN_HOME_PROVIDER;
struct _NDIS_WWAN_PIN_LIST;
struct _NDIS_WWAN_PREFERRED_PROVIDERS;
struct _NDIS_WWAN_READY_INFO;
struct _NDIS_WWAN_SERVICE_ACTIVATION;
struct _NDIS_WWAN_SET_CONTEXT_STATE;
struct _NDIS_WWAN_SET_PACKET_SERVICE;
struct _NDIS_WWAN_SET_PROVISIONED_CONTEXT;
struct _NDIS_WWAN_SET_REGISTER_STATE;
struct _NDIS_WWAN_SET_SIGNAL_INDICATION;
struct _NDIS_WWAN_SET_SMS_CONFIGURATION;
struct _NDIS_WWAN_SMS_DELETE;
struct _NDIS_WWAN_SMS_READ;
struct _NDIS_WWAN_SMS_SEND;
struct _NDIS_WWAN_VISIBLE_PROVIDERS;
enum _NDIS_XLATE_TYPE;
struct _NDK_ADAPTER;
struct _NDK_ADAPTER_DISPATCH;
struct _NDK_ADAPTER_INFO;
struct _NDK_CONNECTOR;
struct _NDK_CONNECTOR_DISPATCH;
struct _NDK_CQ;
struct _NDK_CQ_DISPATCH;
struct _NDK_EXTENSION_INTERFACE;
struct _NDK_LISTENER;
struct _NDK_LISTENER_DISPATCH;
struct _NDK_LOGICAL_ADDRESS_MAPPING;
struct _NDK_MR;
struct _NDK_MR_DISPATCH;
struct _NDK_MW;
struct _NDK_MW_DISPATCH;
struct _NDK_OBJECT_HEADER;
struct _NDK_OBJECT_HEADER_RESERVED_BLOCK;
enum _NDK_OBJECT_TYPE;
struct _NDK_PD;
struct _NDK_PD_DISPATCH;
struct _NDK_QP;
struct _NDK_QP_DISPATCH;
struct _NDK_RESULT;
struct _NDK_SGE;
struct _NDK_SHARED_ENDPOINT;
struct _NDK_SHARED_ENDPOINT_DISPATCH;
struct _NDK_SRQ;
struct _NDK_SRQ_DISPATCH;
struct _NEIGHBOR_OFFLOAD_STATE_CACHED;
struct _NEIGHBOR_OFFLOAD_STATE_CONST;
struct _NEIGHBOR_OFFLOAD_STATE_DELEGATED;
struct _NETIO_NET_BUFFER_CONTEXT;
struct _NETIO_NET_BUFFER_LIST_CONTEXT;
struct _NET_BUFFER;
struct _NET_BUFFER_DATA;
union _NET_BUFFER_DATA_LENGTH;
union _NET_BUFFER_HEADER;
struct _NET_BUFFER_LIST;
struct _NET_BUFFER_LIST_CONTEXT;
struct _NET_BUFFER_LIST_DATA;
union _NET_BUFFER_LIST_HEADER;
struct _NET_BUFFER_LIST_POOL_PARAMETERS;
struct _NET_BUFFER_POOL_PARAMETERS;
struct _NET_BUFFER_SHARED_MEMORY;
struct _NET_DEVICE_PNP_EVENT;
enum _NET_DEVICE_POWER_STATE;
enum _NET_IF_ACCESS_TYPE;
enum _NET_IF_ADMIN_STATUS;
enum _NET_IF_CONNECTION_TYPE;
enum _NET_IF_DIRECTION_TYPE;
struct _NET_IF_INFORMATION;
enum _NET_IF_MEDIA_CONNECT_STATE;
enum _NET_IF_MEDIA_DUPLEX_STATE;
enum _NET_IF_OPER_STATUS;
enum _NET_IF_RCV_ADDRESS_TYPE;
union _NET_LUID_LH;
struct _NET_PHYSICAL_LOCATION_LH;
struct _NET_PNP_EVENT;
enum _NET_PNP_EVENT_CODE;
struct _NET_PNP_EVENT_NOTIFICATION;
enum _NL_ECN_CODEPOINT;
struct _NPAGED_LOOKASIDE_LIST;
struct _NPI_MODULEID;
enum _NPI_MODULEID_TYPE;
enum _NT_PRODUCT_TYPE;
struct _NT_TIB;
struct _OBJECT_DUMP_CONTROL;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_NAME_INFORMATION;
struct _OBJECT_TYPE;
struct _OBJECT_TYPE_INITIALIZER;
enum _OB_OPEN_REASON;
struct _OFFLOAD_STATE_HEADER;
struct _OID_LIST;
struct _OWNER_ENTRY;
struct _PAGED_LOOKASIDE_LIST;
struct _PATH_OFFLOAD_STATE_CACHED;
struct _PATH_OFFLOAD_STATE_CONST;
struct _PATH_OFFLOAD_STATE_DELEGATED;
struct _PCI_CAPABILITIES_HEADER;
struct _PCI_MSI_MESSAGE_ADDRESS;
struct _PCI_MSI_MESSAGE_CONTROL;
struct _PCW_BUFFER;
union _PCW_CALLBACK_INFORMATION;
enum _PCW_CALLBACK_TYPE;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_DATA;
struct _PCW_INSTANCE;
struct _PCW_MASK_INFORMATION;
struct _PCW_REGISTRATION;
struct _PCW_REGISTRATION_INFORMATION;
struct _PEB;
struct _PEB_LDR_DATA;
struct _PENDING_STACK_EXPANSION_FALLBACK_WORK;
struct _PERFINFO_GROUPMASK;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _PERFINFO_MM_STAT;
enum _PKG_TYPE;
enum _POOL_BLOCK_TYPE;
enum _POOL_TYPE;
struct _POWER_SEQUENCE;
union _POWER_STATE;
enum _POWER_STATE_TYPE;
struct _PPL_LOOKASIDE_LIST;
struct _PPL_LOOKASIDE_LIST_ARRAY;
struct _PRIVILEGE_SET;
struct _PROCESSOR_NUMBER;
union _PROTOCOL_OFFLOAD_PARAMETERS;
enum _PS_ATTRIBUTE_NUM;
enum _PS_STD_HANDLE_STATE;
enum _PS_WAKE_REASON;
struct _QUAD;
struct _QUERY;
struct _QUERY_INFORMATION;
struct _QUEUED_CLOSE;
struct _REFERENCE;
struct _REFERENCE_EX;
union _REFERENCE_OBJECT;
enum _REG_NOTIFY_CLASS;
union _REQUEST_DATA;
union _RESULT_VALUE;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _RTL_AVL_TREE;
struct _RTL_BALANCED_NODE;
struct _RTL_BITMAP;
struct _RTL_CRITICAL_SECTION;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_QUERY_REGISTRY_TABLE;
struct _RTL_RB_TREE;
struct _RTL_SPLAY_LINKS;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _SCSI_REQUEST_BLOCK;
struct _SECTION_OBJECT_POINTERS;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _SECURITY_OPERATION_CODE;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _SET;
struct _SET_INFORMATION;
struct _SID;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SINGLE_LIST_ENTRY;
struct _SLIST_ENTRY;
union _SLIST_HEADER;
struct _STACK_INDEX;
struct _STRING;
enum _SYSTEM_POWER_STATE;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _TCP_OFFLOAD_STATE_CACHED;
struct _TCP_OFFLOAD_STATE_CONST;
struct _TCP_OFFLOAD_STATE_DELEGATED;
struct _TCP_OFFLOAD_STATS;
struct _TEB;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TP_CALLBACK_ENVIRON_V3;
struct _TP_CALLBACK_INSTANCE;
enum _TP_CALLBACK_PRIORITY;
struct _TP_CLEANUP_GROUP;
struct _TP_POOL;
enum _TRACE_INFORMATION_CLASS;
struct _TRANSPORT_HEADER_OFFSET;
struct _TXN_PARAMETER_BLOCK;
union _ULARGE_INTEGER;
struct _ULONG_REFERENCE;
struct _UNICODE_STRING;
enum _USER_ACTIVITY_PRESENCE;
struct _VAR_STRING;
struct _VPB;
struct _VPCI_INVALIDATE_BLOCK_OUTPUT;
struct _WAIT_CONTEXT_BLOCK;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
union _WHEA_ERROR_PACKET_FLAGS;
struct _WHEA_ERROR_PACKET_V2;
struct _WHEA_ERROR_RECORD;
struct _WHEA_ERROR_RECORD_HEADER;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
enum _WHEA_ERROR_SEVERITY;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_TYPE;
union _WHEA_PERSISTENCE_INFO;
union _WHEA_REVISION;
union _WHEA_TIMESTAMP;
struct _WOL_BITMAP_PATTERN;
union _WOL_PATTERN;
struct _WORK_QUEUE_ITEM;
enum _WORK_QUEUE_TYPE;
enum _WWAN_ACTIVATION_COMMAND;
struct _WWAN_AUTH_AKAP_CHALLENGE;
struct _WWAN_AUTH_AKA_CHALLENGE;
struct _WWAN_AUTH_CHALLENGE;
enum _WWAN_AUTH_METHOD;
enum _WWAN_AUTH_PROTOCOL;
struct _WWAN_AUTH_SIM_CHALLENGE;
enum _WWAN_CELLULAR_CLASS;
enum _WWAN_COMPRESSION;
enum _WWAN_CONTEXT_TYPE;
struct _WWAN_DEVICE_CAPS;
enum _WWAN_DEVICE_TYPE;
struct _WWAN_DRIVER_CAPS;
enum _WWAN_EMERGENCY_MODE;
enum _WWAN_IP_TYPE;
struct _WWAN_LIST_HEADER;
enum _WWAN_PACKET_SERVICE_ACTION;
struct _WWAN_PIN_DESC;
enum _WWAN_PIN_FORMAT;
struct _WWAN_PIN_LIST;
enum _WWAN_PIN_MODE;
struct _WWAN_PROVIDER;
struct _WWAN_READY_INFO;
enum _WWAN_READY_STATE;
enum _WWAN_REGISTER_ACTION;
struct _WWAN_SERVICE_ACTIVATION;
struct _WWAN_SET_CONTEXT;
struct _WWAN_SET_CONTEXT_STATE;
struct _WWAN_SET_REGISTER_STATE;
struct _WWAN_SET_SIGNAL_INDICATION;
struct _WWAN_SET_SMS_CONFIGURATION;
enum _WWAN_SIM_CLASS;
enum _WWAN_SMS_CDMA_ENCODING;
enum _WWAN_SMS_CDMA_LANG;
struct _WWAN_SMS_FILTER;
enum _WWAN_SMS_FLAG;
enum _WWAN_SMS_FORMAT;
struct _WWAN_SMS_READ;
struct _WWAN_SMS_SEND;
struct _WWAN_SMS_SEND_CDMA;
struct _WWAN_SMS_SEND_PDU;
enum _WWAN_STRUCT_TYPE;
enum _WWAN_VOICE_CLASS;
struct _XSAVE_FORMAT;
struct _XSTATE_CONFIGURATION;
struct _XSTATE_FEATURE;
struct _X_FILTER;
struct _flowspec;
struct in6_addr;
struct in_addr;
struct sockaddr;
struct sockaddr_in;
struct sockaddr_in6;

struct BINARY_DATA
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0008 */ void* Buffer;
}; /* size: 0x0010 */

enum BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

struct CO_ADDRESS_FAMILY
{
  /* 0x0000 */ unsigned long AddressFamily;
  /* 0x0004 */ unsigned long MajorVersion;
  /* 0x0008 */ unsigned long MinorVersion;
}; /* size: 0x000c */

struct CO_SAP
{
  /* 0x0000 */ unsigned long SapType;
  /* 0x0004 */ unsigned long SapLength;
  /* 0x0008 */ unsigned char Sap[1];
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

enum DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

enum DL_ADDRESS_TYPE
{
  DlUnicast = 0,
  DlMulticast = 1,
  DlBroadcast = 2,
};

enum DMA_COMPLETION_STATUS
{
  DmaComplete = 0,
  DmaAborted = 1,
  DmaError = 2,
  DmaCancelled = 3,
};

struct DOT11_ASSOCIATION_INFO_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x0010 */ struct _DOT11_ASSOCIATION_INFO_EX dot11AssocInfo[1];
}; /* size: 0x0158 */

struct DOT11_ASSOCIATION_PARAMS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char BSSID[6];
  /* 0x000c */ unsigned long uAssocRequestIEsOffset;
  /* 0x0010 */ unsigned long uAssocRequestIEsLength;
}; /* size: 0x0014 */

struct DOT11_AUTH_ALGORITHM_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ enum _DOT11_AUTH_ALGORITHM AlgorithmIds[1];
}; /* size: 0x0010 */

struct DOT11_AUTH_CIPHER_PAIR
{
  /* 0x0000 */ enum _DOT11_AUTH_ALGORITHM AuthAlgoId;
  /* 0x0004 */ enum _DOT11_CIPHER_ALGORITHM CipherAlgoId;
}; /* size: 0x0008 */

struct DOT11_AUTH_CIPHER_PAIR_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct DOT11_AUTH_CIPHER_PAIR AuthCipherPairs[1];
}; /* size: 0x0014 */

struct DOT11_BSSID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned char BSSIDs[6][1];
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

struct DOT11_BYTE_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfBytes;
  /* 0x0008 */ unsigned long uTotalNumOfBytes;
  /* 0x000c */ unsigned char ucBuffer[1];
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

struct DOT11_CIPHER_ALGORITHM_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ enum _DOT11_CIPHER_ALGORITHM AlgorithmIds[1];
}; /* size: 0x0010 */

struct DOT11_CIPHER_DEFAULT_KEY_VALUE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uKeyIndex;
  /* 0x0008 */ enum _DOT11_CIPHER_ALGORITHM AlgorithmId;
  /* 0x000c */ unsigned char MacAddr[6];
  /* 0x0012 */ unsigned char bDelete;
  /* 0x0013 */ unsigned char bStatic;
  /* 0x0014 */ unsigned short usKeyLength;
  /* 0x0016 */ unsigned char ucKey[1];
  /* 0x0017 */ char __PADDING__[1];
}; /* size: 0x0018 */

struct DOT11_COUNTRY_OR_REGION_STRING_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned char CountryOrRegionStrings[3][1];
  /* 0x000f */ char __PADDING__[1];
}; /* size: 0x0010 */

struct DOT11_DATA_RATE_MAPPING_ENTRY
{
  /* 0x0000 */ unsigned char ucDataRateIndex;
  /* 0x0001 */ unsigned char ucDataRateFlag;
  /* 0x0002 */ unsigned short usDataRateValue;
}; /* size: 0x0004 */

struct DOT11_ERP_PHY_ATTRIBUTES
{
  /* 0x0000 */ unsigned char bShortPreambleOptionImplemented;
  /* 0x0001 */ unsigned char bPBCCOptionImplemented;
  /* 0x0002 */ unsigned char bChannelAgilityPresent;
  /* 0x0004 */ unsigned long uHRCCAModeSupported;
  /* 0x0008 */ unsigned char bERPPBCCOptionImplemented;
  /* 0x0009 */ unsigned char bDSSSOFDMOptionImplemented;
  /* 0x000a */ unsigned char bShortSlotTimeOptionImplemented;
  /* 0x000b */ char __PADDING__[1];
}; /* size: 0x000c */

struct DOT11_EXTSTA_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uScanSSIDListSize;
  /* 0x0008 */ unsigned long uDesiredBSSIDListSize;
  /* 0x000c */ unsigned long uDesiredSSIDListSize;
  /* 0x0010 */ unsigned long uExcludedMacAddressListSize;
  /* 0x0014 */ unsigned long uPrivacyExemptionListSize;
  /* 0x0018 */ unsigned long uKeyMappingTableSize;
  /* 0x001c */ unsigned long uDefaultKeyTableSize;
  /* 0x0020 */ unsigned long uWEPKeyValueMaxLength;
  /* 0x0024 */ unsigned long uPMKIDCacheSize;
  /* 0x0028 */ unsigned long uMaxNumPerSTADefaultKeyTables;
  /* 0x002c */ unsigned char bStrictlyOrderedServiceClassImplemented;
  /* 0x002d */ unsigned char ucSupportedQoSProtocolFlags;
  /* 0x002e */ unsigned char bSafeModeImplemented;
  /* 0x0030 */ unsigned long uNumSupportedCountryOrRegionStrings;
  /* 0x0038 */ unsigned char* pSupportedCountryOrRegionStrings[3];
  /* 0x0040 */ unsigned long uInfraNumSupportedUcastAlgoPairs;
  /* 0x0048 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
  /* 0x0050 */ unsigned long uInfraNumSupportedMcastAlgoPairs;
  /* 0x0058 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
  /* 0x0060 */ unsigned long uAdhocNumSupportedUcastAlgoPairs;
  /* 0x0068 */ struct DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedUcastAlgoPairs;
  /* 0x0070 */ unsigned long uAdhocNumSupportedMcastAlgoPairs;
  /* 0x0078 */ struct DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedMcastAlgoPairs;
  /* 0x0080 */ unsigned char bAutoPowerSaveMode;
  /* 0x0084 */ unsigned long uMaxNetworkOffloadListSize;
  /* 0x0088 */ unsigned char bMFPCapable;
  /* 0x008c */ unsigned long uInfraNumSupportedMcastMgmtAlgoPairs;
  /* 0x0090 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastMgmtAlgoPairs;
}; /* size: 0x0098 */

struct DOT11_EXTSTA_CAPABILITY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uScanSSIDListSize;
  /* 0x0008 */ unsigned long uDesiredBSSIDListSize;
  /* 0x000c */ unsigned long uDesiredSSIDListSize;
  /* 0x0010 */ unsigned long uExcludedMacAddressListSize;
  /* 0x0014 */ unsigned long uPrivacyExemptionListSize;
  /* 0x0018 */ unsigned long uKeyMappingTableSize;
  /* 0x001c */ unsigned long uDefaultKeyTableSize;
  /* 0x0020 */ unsigned long uWEPKeyValueMaxLength;
  /* 0x0024 */ unsigned long uPMKIDCacheSize;
  /* 0x0028 */ unsigned long uMaxNumPerSTADefaultKeyTables;
}; /* size: 0x002c */

struct DOT11_HRDSSS_PHY_ATTRIBUTES
{
  /* 0x0000 */ unsigned char bShortPreambleOptionImplemented;
  /* 0x0001 */ unsigned char bPBCCOptionImplemented;
  /* 0x0002 */ unsigned char bChannelAgilityPresent;
  /* 0x0004 */ unsigned long uHRCCAModeSupported;
}; /* size: 0x0008 */

struct DOT11_IBSS_PARAMS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char bJoinOnly;
  /* 0x0008 */ unsigned long uIEsOffset;
  /* 0x000c */ unsigned long uIEsLength;
}; /* size: 0x0010 */

struct DOT11_MAC_ADDRESS_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned char MacAddrs[6][1];
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

struct DOT11_MAC_FRAME_STATISTICS
{
  /* 0x0000 */ unsigned __int64 ullTransmittedFrameCount;
  /* 0x0008 */ unsigned __int64 ullReceivedFrameCount;
  /* 0x0010 */ unsigned __int64 ullTransmittedFailureFrameCount;
  /* 0x0018 */ unsigned __int64 ullReceivedFailureFrameCount;
  /* 0x0020 */ unsigned __int64 ullWEPExcludedCount;
  /* 0x0028 */ unsigned __int64 ullTKIPLocalMICFailures;
  /* 0x0030 */ unsigned __int64 ullTKIPReplays;
  /* 0x0038 */ unsigned __int64 ullTKIPICVErrorCount;
  /* 0x0040 */ unsigned __int64 ullCCMPReplays;
  /* 0x0048 */ unsigned __int64 ullCCMPDecryptErrors;
  /* 0x0050 */ unsigned __int64 ullWEPUndecryptableCount;
  /* 0x0058 */ unsigned __int64 ullWEPICVErrorCount;
  /* 0x0060 */ unsigned __int64 ullDecryptSuccessCount;
  /* 0x0068 */ unsigned __int64 ullDecryptFailureCount;
}; /* size: 0x0070 */

struct DOT11_OFDM_PHY_ATTRIBUTES
{
  /* 0x0000 */ unsigned long uFrequencyBandsSupported;
}; /* size: 0x0004 */

struct DOT11_PHY_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _DOT11_PHY_TYPE PhyType;
  /* 0x0008 */ unsigned char bHardwarePhyState;
  /* 0x0009 */ unsigned char bSoftwarePhyState;
  /* 0x000a */ unsigned char bCFPollable;
  /* 0x000c */ unsigned long uMPDUMaxLength;
  /* 0x0010 */ enum _DOT11_TEMP_TYPE TempType;
  /* 0x0014 */ enum _DOT11_DIVERSITY_SUPPORT DiversitySupport;
  union
  {
    /* 0x0018 */ struct DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
    /* 0x0018 */ struct DOT11_OFDM_PHY_ATTRIBUTES OFDMAttributes;
    /* 0x0018 */ struct DOT11_ERP_PHY_ATTRIBUTES ERPAttributes;
  }; /* size: 0x000c */
  /* 0x0024 */ unsigned long uNumberSupportedPowerLevels;
  /* 0x0028 */ unsigned long TxPowerLevels[8];
  /* 0x0048 */ unsigned long uNumDataRateMappingEntries;
  /* 0x004c */ struct DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[126];
  /* 0x0244 */ struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 SupportedDataRatesValue;
  /* 0x0442 */ char __PADDING__[2];
}; /* size: 0x0444 */

struct DOT11_PHY_FRAME_STATISTICS
{
  /* 0x0000 */ unsigned __int64 ullTransmittedFrameCount;
  /* 0x0008 */ unsigned __int64 ullMulticastTransmittedFrameCount;
  /* 0x0010 */ unsigned __int64 ullFailedCount;
  /* 0x0018 */ unsigned __int64 ullRetryCount;
  /* 0x0020 */ unsigned __int64 ullMultipleRetryCount;
  /* 0x0028 */ unsigned __int64 ullMaxTXLifetimeExceededCount;
  /* 0x0030 */ unsigned __int64 ullTransmittedFragmentCount;
  /* 0x0038 */ unsigned __int64 ullRTSSuccessCount;
  /* 0x0040 */ unsigned __int64 ullRTSFailureCount;
  /* 0x0048 */ unsigned __int64 ullACKFailureCount;
  /* 0x0050 */ unsigned __int64 ullReceivedFrameCount;
  /* 0x0058 */ unsigned __int64 ullMulticastReceivedFrameCount;
  /* 0x0060 */ unsigned __int64 ullPromiscuousReceivedFrameCount;
  /* 0x0068 */ unsigned __int64 ullMaxRXLifetimeExceededCount;
  /* 0x0070 */ unsigned __int64 ullFrameDuplicateCount;
  /* 0x0078 */ unsigned __int64 ullReceivedFragmentCount;
  /* 0x0080 */ unsigned __int64 ullPromiscuousReceivedFragmentCount;
  /* 0x0088 */ unsigned __int64 ullFCSErrorCount;
}; /* size: 0x0090 */

struct DOT11_PHY_ID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned long dot11PhyId[1];
}; /* size: 0x0010 */

struct DOT11_PMKID_ENTRY
{
  /* 0x0000 */ unsigned char BSSID[6];
  /* 0x0006 */ unsigned char PMKID[16];
  /* 0x0018 */ unsigned long uFlags;
}; /* size: 0x001c */

struct DOT11_PMKID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct DOT11_PMKID_ENTRY PMKIDs[1];
}; /* size: 0x0028 */

struct DOT11_PORT_STATE_NOTIFICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char PeerMac[6];
  /* 0x000a */ unsigned char bOpen;
  /* 0x000b */ char __PADDING__[1];
}; /* size: 0x000c */

struct DOT11_PRIVACY_EXEMPTION
{
  /* 0x0000 */ unsigned short usEtherType;
  /* 0x0002 */ unsigned short usExemptionActionType;
  /* 0x0004 */ unsigned short usExemptionPacketType;
}; /* size: 0x0006 */

struct DOT11_PRIVACY_EXEMPTION_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct DOT11_PRIVACY_EXEMPTION PrivacyExemptionEntries[1];
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

struct DOT11_QOS_PARAMS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char ucEnabledQoSProtocolFlags;
  /* 0x0005 */ char __PADDING__[1];
}; /* size: 0x0006 */

struct DOT11_SSID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct _DOT11_SSID SSIDs[1];
}; /* size: 0x0030 */

struct DOT11_STATISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ unsigned __int64 ullFourWayHandshakeFailures;
  /* 0x0010 */ unsigned __int64 ullTKIPCounterMeasuresInvoked;
  /* 0x0018 */ unsigned __int64 ullReserved;
  /* 0x0020 */ struct DOT11_MAC_FRAME_STATISTICS MacUcastCounters;
  /* 0x0090 */ struct DOT11_MAC_FRAME_STATISTICS MacMcastCounters;
  /* 0x0100 */ struct DOT11_PHY_FRAME_STATISTICS PhyCounters[1];
}; /* size: 0x0190 */

struct DOT11_VWIFI_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uTotalNumOfEntries;
  /* 0x0008 */ struct _DOT11_VWIFI_COMBINATION Combinations[1];
}; /* size: 0x0018 */

struct FILTERDBS
{
  union
  {
    /* 0x0000 */ struct _X_FILTER* EthDB;
    /* 0x0000 */ struct _X_FILTER* NullDB;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _X_FILTER* TrDB;
  /* 0x0010 */ void* YYYDB;
  /* 0x0018 */ void* XXXDB;
}; /* size: 0x0020 */

enum INDICATE_OFFLOAD_EVENT
{
  NeighborReachabilityInDoubt = 1,
  NeighborReachabilityQuery = 2,
  MaxOffloadEvent = 3,
};

struct KSALLOCATOR_FRAMING
{
  union
  {
    /* 0x0000 */ unsigned long OptionsFlags;
    /* 0x0000 */ unsigned long RequirementsFlags;
  }; /* size: 0x0004 */
  /* 0x0004 */ enum _POOL_TYPE PoolType;
  /* 0x0008 */ unsigned long Frames;
  /* 0x000c */ unsigned long FrameSize;
  /* 0x0010 */ unsigned long FileAlignment;
  /* 0x0014 */ unsigned long Reserved;
}; /* size: 0x0018 */

struct KSALLOCATOR_FRAMING_EX
{
  /* 0x0000 */ unsigned long CountItems;
  /* 0x0004 */ unsigned long PinFlags;
  /* 0x0008 */ struct KS_COMPRESSION OutputCompression;
  /* 0x0014 */ unsigned long PinWeight;
  /* 0x0018 */ struct KS_FRAMING_ITEM FramingItem[1];
}; /* size: 0x0070 */

struct KSATTRIBUTE
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _GUID Attribute;
}; /* size: 0x0018 */

struct KSATTRIBUTE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0008 */ struct KSATTRIBUTE** Attributes;
}; /* size: 0x0010 */

struct KSAUTOMATION_TABLE_
{
  /* 0x0000 */ unsigned long PropertySetsCount;
  /* 0x0004 */ unsigned long PropertyItemSize;
  /* 0x0008 */ const struct KSPROPERTY_SET* PropertySets;
  /* 0x0010 */ unsigned long MethodSetsCount;
  /* 0x0014 */ unsigned long MethodItemSize;
  /* 0x0018 */ const struct KSMETHOD_SET* MethodSets;
  /* 0x0020 */ unsigned long EventSetsCount;
  /* 0x0024 */ unsigned long EventItemSize;
  /* 0x0028 */ const struct KSEVENT_SET* EventSets;
}; /* size: 0x0030 */

struct KSBUFFER_ITEM
{
  /* 0x0000 */ struct KSDPC_ITEM DpcItem;
  /* 0x0050 */ struct _LIST_ENTRY BufferList;
}; /* size: 0x0060 */

struct KSCOMPONENTID
{
  /* 0x0000 */ struct _GUID Manufacturer;
  /* 0x0010 */ struct _GUID Product;
  /* 0x0020 */ struct _GUID Component;
  /* 0x0030 */ struct _GUID Name;
  /* 0x0040 */ unsigned long Version;
  /* 0x0044 */ unsigned long Revision;
}; /* size: 0x0048 */

union KSDATAFORMAT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long FormatSize;
      /* 0x0004 */ unsigned long Flags;
      /* 0x0008 */ unsigned long SampleSize;
      /* 0x000c */ unsigned long Reserved;
      /* 0x0010 */ struct _GUID MajorFormat;
      /* 0x0020 */ struct _GUID SubFormat;
      /* 0x0030 */ struct _GUID Specifier;
    }; /* size: 0x0040 */
    /* 0x0000 */ __int64 Alignment;
  }; /* size: 0x0040 */
}; /* size: 0x0040 */

struct KSDPC_ITEM
{
  /* 0x0000 */ struct _KDPC Dpc;
  /* 0x0040 */ unsigned long ReferenceCount;
  /* 0x0048 */ unsigned __int64 AccessLock;
}; /* size: 0x0050 */

struct KSEVENTDATA
{
  /* 0x0000 */ unsigned long NotificationType;
  union
  {
    struct
    {
      /* 0x0008 */ void* Event;
      /* 0x0010 */ unsigned __int64 Reserved[2];
    } /* size: 0x0018 */ EventHandle;
    struct
    {
      /* 0x0008 */ void* Semaphore;
      /* 0x0010 */ unsigned long Reserved;
      /* 0x0014 */ long Adjustment;
    } /* size: 0x0010 */ SemaphoreHandle;
    struct
    {
      /* 0x0008 */ void* Event;
      /* 0x0010 */ long Increment;
      /* 0x0018 */ unsigned __int64 Reserved;
    } /* size: 0x0018 */ EventObject;
    struct
    {
      /* 0x0008 */ void* Semaphore;
      /* 0x0010 */ long Increment;
      /* 0x0014 */ long Adjustment;
    } /* size: 0x0010 */ SemaphoreObject;
    struct
    {
      /* 0x0008 */ struct _KDPC* Dpc;
      /* 0x0010 */ unsigned long ReferenceCount;
      /* 0x0018 */ unsigned __int64 Reserved;
    } /* size: 0x0018 */ Dpc;
    struct
    {
      /* 0x0008 */ struct _WORK_QUEUE_ITEM* WorkQueueItem;
      /* 0x0010 */ enum _WORK_QUEUE_TYPE WorkQueueType;
      /* 0x0018 */ unsigned __int64 Reserved;
    } /* size: 0x0018 */ WorkItem;
    struct
    {
      /* 0x0008 */ struct _WORK_QUEUE_ITEM* WorkQueueItem;
      /* 0x0010 */ void* KsWorkerObject;
      /* 0x0018 */ unsigned __int64 Reserved;
    } /* size: 0x0018 */ KsWorkItem;
    struct
    {
      /* 0x0008 */ void* Unused;
      /* 0x0010 */ __int64 Alignment[2];
    } /* size: 0x0018 */ Alignment;
  }; /* size: 0x0018 */
}; /* size: 0x0020 */

struct KSEVENT_ITEM
{
  /* 0x0000 */ unsigned long EventId;
  /* 0x0004 */ unsigned long DataInput;
  /* 0x0008 */ unsigned long ExtraEntryData;
  /* 0x0010 */ void* AddHandler /* function */;
  /* 0x0018 */ void* RemoveHandler /* function */;
  /* 0x0020 */ void* SupportHandler /* function */;
}; /* size: 0x0028 */

struct KSEVENT_SET
{
  /* 0x0000 */ const struct _GUID* Set;
  /* 0x0008 */ unsigned long EventsCount;
  /* 0x0010 */ const struct KSEVENT_ITEM* EventItem;
}; /* size: 0x0018 */

struct KSFASTMETHOD_ITEM
{
  /* 0x0000 */ unsigned long MethodId;
  union
  {
    /* 0x0008 */ void* MethodHandler /* function */;
    struct
    {
      /* 0x0008 */ unsigned char MethodSupported;
      /* 0x0009 */ char __PADDING__[7];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

struct KSFASTPROPERTY_ITEM
{
  /* 0x0000 */ unsigned long PropertyId;
  union
  {
    /* 0x0008 */ void* GetPropertyHandler /* function */;
    /* 0x0008 */ unsigned char GetSupported;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0010 */ void* SetPropertyHandler /* function */;
    /* 0x0010 */ unsigned char SetSupported;
  }; /* size: 0x0008 */
  /* 0x0018 */ unsigned long Reserved;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct KSIDENTIFIER
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _GUID Set;
      /* 0x0010 */ unsigned long Id;
      /* 0x0014 */ unsigned long Flags;
    }; /* size: 0x0018 */
    struct
    {
      /* 0x0000 */ __int64 Alignment;
      /* 0x0008 */ long __PADDING__[4];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
}; /* size: 0x0018 */

struct KSMETHOD_ITEM
{
  /* 0x0000 */ unsigned long MethodId;
  union
  {
    /* 0x0008 */ void* MethodHandler /* function */;
    /* 0x0008 */ unsigned char MethodSupported;
  }; /* size: 0x0008 */
  /* 0x0010 */ unsigned long MinMethod;
  /* 0x0014 */ unsigned long MinData;
  /* 0x0018 */ void* SupportHandler /* function */;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct KSMETHOD_SET
{
  /* 0x0000 */ const struct _GUID* Set;
  /* 0x0008 */ unsigned long MethodsCount;
  /* 0x0010 */ const struct KSMETHOD_ITEM* MethodItem;
  /* 0x0018 */ unsigned long FastIoCount;
  /* 0x0020 */ const struct KSFASTMETHOD_ITEM* FastIoTable;
}; /* size: 0x0028 */

struct KSMULTIPLE_ITEM
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Count;
}; /* size: 0x0008 */

enum KSPIN_COMMUNICATION
{
  KSPIN_COMMUNICATION_NONE = 0,
  KSPIN_COMMUNICATION_SINK = 1,
  KSPIN_COMMUNICATION_SOURCE = 2,
  KSPIN_COMMUNICATION_BOTH = 3,
  KSPIN_COMMUNICATION_BRIDGE = 4,
};

enum KSPIN_DATAFLOW
{
  KSPIN_DATAFLOW_IN = 1,
  KSPIN_DATAFLOW_OUT = 2,
};

struct KSPIN_DESCRIPTOR
{
  /* 0x0000 */ unsigned long InterfacesCount;
  /* 0x0008 */ const struct KSIDENTIFIER* Interfaces;
  /* 0x0010 */ unsigned long MediumsCount;
  /* 0x0018 */ const struct KSIDENTIFIER* Mediums;
  /* 0x0020 */ unsigned long DataRangesCount;
  /* 0x0028 */ union KSDATAFORMAT* const* DataRanges;
  /* 0x0030 */ enum KSPIN_DATAFLOW DataFlow;
  /* 0x0034 */ enum KSPIN_COMMUNICATION Communication;
  /* 0x0038 */ const struct _GUID* Category;
  /* 0x0040 */ const struct _GUID* Name;
  union
  {
    /* 0x0048 */ __int64 Reserved;
    /* 0x0048 */ unsigned long ConstrainedDataRangesCount;
  }; /* size: 0x0008 */
  /* 0x0050 */ union KSDATAFORMAT** ConstrainedDataRanges;
}; /* size: 0x0058 */

struct KSPRIORITY
{
  /* 0x0000 */ unsigned long PriorityClass;
  /* 0x0004 */ unsigned long PrioritySubClass;
}; /* size: 0x0008 */

struct KSPROPERTY_ITEM
{
  /* 0x0000 */ unsigned long PropertyId;
  union
  {
    /* 0x0008 */ void* GetPropertyHandler /* function */;
    /* 0x0008 */ unsigned char GetSupported;
  }; /* size: 0x0008 */
  /* 0x0010 */ unsigned long MinProperty;
  /* 0x0014 */ unsigned long MinData;
  union
  {
    /* 0x0018 */ void* SetPropertyHandler /* function */;
    /* 0x0018 */ unsigned char SetSupported;
  }; /* size: 0x0008 */
  /* 0x0020 */ const struct KSPROPERTY_VALUES* Values;
  /* 0x0028 */ unsigned long RelationsCount;
  /* 0x0030 */ const struct KSIDENTIFIER* Relations;
  /* 0x0038 */ void* SupportHandler /* function */;
  /* 0x0040 */ unsigned long SerializedSize;
  /* 0x0044 */ long __PADDING__[1];
}; /* size: 0x0048 */

struct KSPROPERTY_MEMBERSHEADER
{
  /* 0x0000 */ unsigned long MembersFlags;
  /* 0x0004 */ unsigned long MembersSize;
  /* 0x0008 */ unsigned long MembersCount;
  /* 0x000c */ unsigned long Flags;
}; /* size: 0x0010 */

struct KSPROPERTY_MEMBERSLIST
{
  /* 0x0000 */ struct KSPROPERTY_MEMBERSHEADER MembersHeader;
  /* 0x0010 */ const void* Members;
}; /* size: 0x0018 */

struct KSPROPERTY_SET
{
  /* 0x0000 */ const struct _GUID* Set;
  /* 0x0008 */ unsigned long PropertiesCount;
  /* 0x0010 */ const struct KSPROPERTY_ITEM* PropertyItem;
  /* 0x0018 */ unsigned long FastIoCount;
  /* 0x0020 */ const struct KSFASTPROPERTY_ITEM* FastIoTable;
}; /* size: 0x0028 */

struct KSPROPERTY_VALUES
{
  /* 0x0000 */ struct KSIDENTIFIER PropTypeSet;
  /* 0x0018 */ unsigned long MembersListCount;
  /* 0x0020 */ const struct KSPROPERTY_MEMBERSLIST* MembersList;
}; /* size: 0x0028 */

struct KSP_PIN
{
  /* 0x0000 */ struct KSIDENTIFIER Property;
  /* 0x0018 */ unsigned long PinId;
  /* 0x001c */ unsigned long Reserved;
}; /* size: 0x0020 */

enum KSRESET
{
  KSRESET_BEGIN = 0,
  KSRESET_END = 1,
};

struct KSRESOLUTION
{
  /* 0x0000 */ __int64 Granularity;
  /* 0x0008 */ __int64 Error;
}; /* size: 0x0010 */

enum KSSTATE
{
  KSSTATE_STOP = 0,
  KSSTATE_ACQUIRE = 1,
  KSSTATE_PAUSE = 2,
  KSSTATE_RUN = 3,
};

struct KSSTREAM_HEADER
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long TypeSpecificFlags;
  /* 0x0008 */ struct KSTIME PresentationTime;
  /* 0x0018 */ __int64 Duration;
  /* 0x0020 */ unsigned long FrameExtent;
  /* 0x0024 */ unsigned long DataUsed;
  /* 0x0028 */ void* Data;
  /* 0x0030 */ unsigned long OptionsFlags;
  /* 0x0034 */ unsigned long Reserved;
}; /* size: 0x0038 */

struct KSTIME
{
  /* 0x0000 */ __int64 Time;
  /* 0x0008 */ unsigned long Numerator;
  /* 0x000c */ unsigned long Denominator;
}; /* size: 0x0010 */

struct KSTOPOLOGY_CONNECTION
{
  /* 0x0000 */ unsigned long FromNode;
  /* 0x0004 */ unsigned long FromNodePin;
  /* 0x0008 */ unsigned long ToNode;
  /* 0x000c */ unsigned long ToNodePin;
}; /* size: 0x0010 */

struct KS_COMPRESSION
{
  /* 0x0000 */ unsigned long RatioNumerator;
  /* 0x0004 */ unsigned long RatioDenominator;
  /* 0x0008 */ unsigned long RatioConstantMargin;
}; /* size: 0x000c */

struct KS_FRAMING_ITEM
{
  /* 0x0000 */ struct _GUID MemoryType;
  /* 0x0010 */ struct _GUID BusType;
  /* 0x0020 */ unsigned long MemoryFlags;
  /* 0x0024 */ unsigned long BusFlags;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ unsigned long Frames;
  /* 0x0030 */ unsigned long FileAlignment;
  /* 0x0034 */ unsigned long MemoryTypeWeight;
  /* 0x0038 */ struct KS_FRAMING_RANGE PhysicalRange;
  /* 0x0044 */ struct KS_FRAMING_RANGE_WEIGHTED FramingRange;
}; /* size: 0x0058 */

struct KS_FRAMING_RANGE
{
  /* 0x0000 */ unsigned long MinFrameSize;
  /* 0x0004 */ unsigned long MaxFrameSize;
  /* 0x0008 */ unsigned long Stepping;
}; /* size: 0x000c */

struct KS_FRAMING_RANGE_WEIGHTED
{
  /* 0x0000 */ struct KS_FRAMING_RANGE Range;
  /* 0x000c */ unsigned long InPlaceWeight;
  /* 0x0010 */ unsigned long NotInPlaceWeight;
}; /* size: 0x0014 */

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

struct MSIX_TABLE_POINTER
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long BaseIndexRegister : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long TableOffset;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

enum NDIS_CHIMNEY_OFFLOAD_TYPE
{
  NdisTcpChimneyOffload = 1,
  NdisIpsecChimneyOffload = 2,
  NdisRdmaChimneyOffload = 3,
  NdisMaxChimneyOffload = 4,
};

struct NDIS_EVENT_LOG_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct NDIS_NBL_TRACKER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct NDIS_REFCOUNT_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct NDK_VERSION
{
  /* 0x0000 */ unsigned short Major;
  /* 0x0002 */ unsigned short Minor;
}; /* size: 0x0004 */

enum NL_ADDRESS_TYPE
{
  NlatUnspecified = 0,
  NlatUnicast = 1,
  NlatAnycast = 2,
  NlatMulticast = 3,
  NlatBroadcast = 4,
  NlatInvalid = 5,
};

enum NetDmaEventTypes
{
  NdisMIndicateRecvEvent = 0,
  NdisPIndicateRecvEvent = 1,
  NdisPIndicateRecvCompleteEvent = 2,
  NdisPReturnPacketsExEvent = 3,
  NdisMReturnPacketsExEvent = 4,
  NdisPReturnPacketEvent = 5,
  NdisMReturnPacketEvent = 6,
  NdisMReturnPacketInRecvEvent = 7,
  DmaCopyV2VEvent = 8,
  DmaChainV2VNoCopyEvent = 9,
  DmaChainV2VCopyEvent = 10,
  DmaCopyP2VEvent = 11,
  DmaChainP2VNoCopyEvent = 12,
  DmaChainP2VCopyEvent = 13,
  DmaCopyFlushEvent = 14,
  DmaCopyAppendEvent = 15,
  DmaChainCopyAppendEvent = 16,
  DmaCopyFlushAppendEvent = 17,
  DmaCopyCheckForCompletionEvent = 18,
  DmaCopyGetPhysicalAddressEvent = 19,
  DmaCopyNullXferEvent = 20,
  DmaCopyDummyEvent = 21,
  TotalEventTypes = 22,
};

enum OFFLOAD_STATE_TYPE
{
  NeighborOffloadConstState = 1,
  NeighborOffloadCachedState = 2,
  NeighborOffloadDelegatedState = 3,
  NeighborOffloadState = 4,
  Ip4OffloadConstState = 5,
  Ip4OffloadCachedState = 6,
  Ip4OffloadDelegatedState = 7,
  Ip4OffloadState = 8,
  Ip6OffloadConstState = 9,
  Ip6OffloadCachedState = 10,
  Ip6OffloadDelegatedState = 11,
  Ip6OffloadState = 12,
  TcpOffloadConstState = 13,
  TcpOffloadCachedState = 14,
  TcpOffloadDelegatedState = 15,
  TcpOffloadResourceState = 16,
  TcpOffloadState = 17,
  FilterReservedOffloadState = 254,
  MaximumOffloadState = 255,
};

struct PCI_MSIX_CAPABILITY
{
  /* 0x0000 */ struct _PCI_CAPABILITIES_HEADER Header;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned short TableSize : 11; /* bit position: 0 */
      /* 0x0002 */ unsigned short Reserved : 3; /* bit position: 11 */
      /* 0x0002 */ unsigned short FunctionMask : 1; /* bit position: 14 */
      /* 0x0002 */ unsigned short MSIXEnable : 1; /* bit position: 15 */
    }; /* bitfield */
  } /* size: 0x0002 */ MessageControl;
  /* 0x0004 */ struct MSIX_TABLE_POINTER MessageTable;
  /* 0x0008 */ struct MSIX_TABLE_POINTER PBATable;
}; /* size: 0x000c */

struct PCI_MSI_CAPABILITY
{
  /* 0x0000 */ struct _PCI_CAPABILITIES_HEADER Header;
  /* 0x0002 */ struct _PCI_MSI_MESSAGE_CONTROL MessageControl;
  union
  {
    union
    {
      /* 0x0004 */ struct _PCI_MSI_MESSAGE_ADDRESS Register;
      /* 0x0004 */ unsigned long Raw;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ MessageAddressLower;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned short MessageData;
      /* 0x000a */ unsigned short Reserved;
      /* 0x000c */ unsigned long MaskBits;
      /* 0x0010 */ unsigned long PendingBits;
    } /* size: 0x000c */ Option32Bit;
    struct
    {
      /* 0x0008 */ unsigned long MessageAddressUpper;
      /* 0x000c */ unsigned short MessageData;
      /* 0x000e */ unsigned short Reserved;
      /* 0x0010 */ unsigned long MaskBits;
      /* 0x0014 */ unsigned long PendingBits;
    } /* size: 0x0010 */ Option64Bit;
  }; /* size: 0x0010 */
}; /* size: 0x0018 */

struct PNDIS_PER_PROCESSOR_SLOT__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
};

enum PS_CREATE_STATE
{
  PsCreateInitialState = 0,
  PsCreateFailOnFileOpen = 1,
  PsCreateFailOnSectionCreate = 2,
  PsCreateFailExeFormat = 3,
  PsCreateFailMachineMismatch = 4,
  PsCreateFailExeName = 5,
  PsCreateSuccess = 6,
  PsCreateMaximumStates = 7,
};

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 5,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

struct SCOPE_ID
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Zone : 28; /* bit position: 0 */
      /* 0x0000 */ unsigned long Level : 4; /* bit position: 28 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

enum SCOPE_LEVEL
{
  ScopeLevelInterface = 1,
  ScopeLevelLink = 2,
  ScopeLevelSubnet = 3,
  ScopeLevelAdmin = 4,
  ScopeLevelSite = 5,
  ScopeLevelOrganization = 8,
  ScopeLevelGlobal = 14,
  ScopeLevelCount = 16,
};

enum SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
};

enum TCP_OFFLOAD_CONNECTION_STATE
{
  TcpConnectionClosed = 0,
  TcpConnectionListen = 1,
  TcpConnectionSynSent = 2,
  TcpConnectionSynRcvd = 3,
  TcpConnectionEstablished = 4,
  TcpConnectionFinWait1 = 5,
  TcpConnectionFinWait2 = 6,
  TcpConnectionCloseWait = 7,
  TcpConnectionClosing = 8,
  TcpConnectionLastAck = 9,
  TcpConnectionTimeWait = 10,
  TcpConnectionMaxState = 11,
};

enum TCP_OFFLOAD_EVENT_TYPE
{
  TcpIndicateSendBacklogChange = 1,
  TcpIndicateDisconnect = 2,
  TcpIndicateRetrieve = 3,
  TcpIndicateAbort = 4,
};

enum TCP_UPLOAD_REASON
{
  LowActivity = 1,
  HighDropRate = 2,
  SmallIO = 3,
  NoBufferPreposting = 4,
  NoBufferProposting = 4,
  ReceivedUrgentData = 5,
  HighFragmentation = 6,
  HighOutOfOrderPackets = 7,
  TimeoutExpiration = 8,
  InvalidState = 9,
  UploadRequested = 10,
  HardwareFailure = 11,
  MaxUploadReason = 12,
};

typedef struct _ACCESS_REASONS
{
  /* 0x0000 */ unsigned long Data[32];
} ACCESS_REASONS, *PACCESS_REASONS; /* size: 0x0080 */

typedef struct _ACCESS_STATE
{
  /* 0x0000 */ struct _LUID OperationID;
  /* 0x0008 */ unsigned char SecurityEvaluated;
  /* 0x0009 */ unsigned char GenerateAudit;
  /* 0x000a */ unsigned char GenerateOnClose;
  /* 0x000b */ unsigned char PrivilegesAllocated;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long RemainingDesiredAccess;
  /* 0x0014 */ unsigned long PreviouslyGrantedAccess;
  /* 0x0018 */ unsigned long OriginalDesiredAccess;
  /* 0x0020 */ struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  /* 0x0040 */ void* SecurityDescriptor;
  /* 0x0048 */ void* AuxData;
  union
  {
    union
    {
      /* 0x0050 */ struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      /* 0x0050 */ struct _PRIVILEGE_SET PrivilegeSet;
    }; /* size: 0x002c */
  } /* size: 0x002c */ Privileges;
  /* 0x007c */ unsigned char AuditPrivileges;
  /* 0x0080 */ struct _UNICODE_STRING ObjectName;
  /* 0x0090 */ struct _UNICODE_STRING ObjectTypeName;
} ACCESS_STATE, *PACCESS_STATE; /* size: 0x00a0 */

struct _ACTIVATION_CONTEXT;

struct _ACTIVATION_CONTEXT_DATA;

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x0008 */ struct _LIST_ENTRY FrameListCache;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long NextCookieSequenceNumber;
  /* 0x0020 */ unsigned long StackId;
  /* 0x0024 */ long __PADDING__[1];
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0028 */

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

struct _ASSEMBLY_STORAGE_MAP;

typedef struct _AUX_ACCESS_DATA
{
  /* 0x0000 */ struct _PRIVILEGE_SET* PrivilegesUsed;
  /* 0x0008 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0018 */ unsigned long AccessesToAudit;
  /* 0x001c */ unsigned long MaximumAuditMask;
  /* 0x0020 */ struct _GUID TransactionId;
  /* 0x0030 */ void* NewSecurityDescriptor;
  /* 0x0038 */ void* ExistingSecurityDescriptor;
  /* 0x0040 */ void* ParentSecurityDescriptor;
  /* 0x0048 */ void* DeRefSecurityDescriptor /* function */;
  /* 0x0050 */ void* SDLock;
  /* 0x0058 */ struct _ACCESS_REASONS AccessReasons;
  /* 0x00d8 */ unsigned char GenerateStagingEvents;
  /* 0x00d9 */ char __PADDING__[7];
} AUX_ACCESS_DATA, *PAUX_ACCESS_DATA; /* size: 0x00e0 */

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0008 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0010 */

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR; /* size: 0x0024 */

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char ShareDisposition;
  /* 0x0002 */ unsigned short Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Generic;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Port;
      struct
      {
        /* 0x0004 */ unsigned short Level;
        /* 0x0006 */ unsigned short Group;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned __int64 Affinity;
      } /* size: 0x0010 */ Interrupt;
      struct
      {
        union
        {
          struct
          {
            /* 0x0004 */ unsigned short Group;
            /* 0x0006 */ unsigned short MessageCount;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Raw;
          struct
          {
            /* 0x0004 */ unsigned short Level;
            /* 0x0006 */ unsigned short Group;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Translated;
        }; /* size: 0x0010 */
      } /* size: 0x0010 */ MessageInterrupt;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Memory;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long Port;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ Dma;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned char TransferWidth;
        /* 0x000d */ unsigned char Reserved1;
        /* 0x000e */ unsigned char Reserved2;
        /* 0x000f */ unsigned char Reserved3;
      } /* size: 0x000c */ DmaV3;
      struct
      {
        /* 0x0004 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0004 */ unsigned long Start;
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Reserved;
      } /* size: 0x000c */ BusNumber;
      struct
      {
        /* 0x0004 */ unsigned long DataSize;
        /* 0x0008 */ unsigned long Reserved1;
        /* 0x000c */ unsigned long Reserved2;
      } /* size: 0x000c */ DeviceSpecificData;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length40;
      } /* size: 0x000c */ Memory40;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length48;
      } /* size: 0x000c */ Memory48;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length64;
      } /* size: 0x000c */ Memory64;
      struct
      {
        /* 0x0004 */ unsigned char Class;
        /* 0x0005 */ unsigned char Type;
        /* 0x0006 */ unsigned char Reserved1;
        /* 0x0007 */ unsigned char Reserved2;
        /* 0x0008 */ unsigned long IdLowPart;
        /* 0x000c */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR; /* size: 0x0014 */

typedef struct _CM_PARTIAL_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST; /* size: 0x001c */

typedef struct _CM_RESOURCE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _COMPRESSED_DATA_INFO
{
  /* 0x0000 */ unsigned short CompressionFormatAndEngine;
  /* 0x0002 */ unsigned char CompressionUnitShift;
  /* 0x0003 */ unsigned char ChunkShift;
  /* 0x0004 */ unsigned char ClusterShift;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ unsigned short NumberOfChunks;
  /* 0x0008 */ unsigned long CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO; /* size: 0x000c */

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5Home;
  /* 0x0028 */ unsigned __int64 P6Home;
  /* 0x0030 */ unsigned long ContextFlags;
  /* 0x0034 */ unsigned long MxCsr;
  /* 0x0038 */ unsigned short SegCs;
  /* 0x003a */ unsigned short SegDs;
  /* 0x003c */ unsigned short SegEs;
  /* 0x003e */ unsigned short SegFs;
  /* 0x0040 */ unsigned short SegGs;
  /* 0x0042 */ unsigned short SegSs;
  /* 0x0044 */ unsigned long EFlags;
  /* 0x0048 */ unsigned __int64 Dr0;
  /* 0x0050 */ unsigned __int64 Dr1;
  /* 0x0058 */ unsigned __int64 Dr2;
  /* 0x0060 */ unsigned __int64 Dr3;
  /* 0x0068 */ unsigned __int64 Dr6;
  /* 0x0070 */ unsigned __int64 Dr7;
  /* 0x0078 */ unsigned __int64 Rax;
  /* 0x0080 */ unsigned __int64 Rcx;
  /* 0x0088 */ unsigned __int64 Rdx;
  /* 0x0090 */ unsigned __int64 Rbx;
  /* 0x0098 */ unsigned __int64 Rsp;
  /* 0x00a0 */ unsigned __int64 Rbp;
  /* 0x00a8 */ unsigned __int64 Rsi;
  /* 0x00b0 */ unsigned __int64 Rdi;
  /* 0x00b8 */ unsigned __int64 R8;
  /* 0x00c0 */ unsigned __int64 R9;
  /* 0x00c8 */ unsigned __int64 R10;
  /* 0x00d0 */ unsigned __int64 R11;
  /* 0x00d8 */ unsigned __int64 R12;
  /* 0x00e0 */ unsigned __int64 R13;
  /* 0x00e8 */ unsigned __int64 R14;
  /* 0x00f0 */ unsigned __int64 R15;
  /* 0x00f8 */ unsigned __int64 Rip;
  union
  {
    /* 0x0100 */ struct _XSAVE_FORMAT FltSave;
    struct
    {
      /* 0x0100 */ struct _M128A Header[2];
      /* 0x0120 */ struct _M128A Legacy[8];
      /* 0x01a0 */ struct _M128A Xmm0;
      /* 0x01b0 */ struct _M128A Xmm1;
      /* 0x01c0 */ struct _M128A Xmm2;
      /* 0x01d0 */ struct _M128A Xmm3;
      /* 0x01e0 */ struct _M128A Xmm4;
      /* 0x01f0 */ struct _M128A Xmm5;
      /* 0x0200 */ struct _M128A Xmm6;
      /* 0x0210 */ struct _M128A Xmm7;
      /* 0x0220 */ struct _M128A Xmm8;
      /* 0x0230 */ struct _M128A Xmm9;
      /* 0x0240 */ struct _M128A Xmm10;
      /* 0x0250 */ struct _M128A Xmm11;
      /* 0x0260 */ struct _M128A Xmm12;
      /* 0x0270 */ struct _M128A Xmm13;
      /* 0x0280 */ struct _M128A Xmm14;
      /* 0x0290 */ struct _M128A Xmm15;
    }; /* size: 0x01a0 */
  }; /* size: 0x0200 */
  /* 0x0300 */ struct _M128A VectorRegister[26];
  /* 0x04a0 */ unsigned __int64 VectorControl;
  /* 0x04a8 */ unsigned __int64 DebugControl;
  /* 0x04b0 */ unsigned __int64 LastBranchToRip;
  /* 0x04b8 */ unsigned __int64 LastBranchFromRip;
  /* 0x04c0 */ unsigned __int64 LastExceptionToRip;
  /* 0x04c8 */ unsigned __int64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT; /* size: 0x04d0 */

typedef struct _CO_ADDRESS
{
  /* 0x0000 */ unsigned long AddressSize;
  /* 0x0004 */ unsigned char Address[1];
  /* 0x0005 */ char __PADDING__[3];
} CO_ADDRESS, *PCO_ADDRESS; /* size: 0x0008 */

typedef struct _CO_ADDRESS_LIST
{
  /* 0x0000 */ unsigned long NumberOfAddressesAvailable;
  /* 0x0004 */ unsigned long NumberOfAddresses;
  /* 0x0008 */ struct _CO_ADDRESS AddressList;
} CO_ADDRESS_LIST, *PCO_ADDRESS_LIST; /* size: 0x0010 */

typedef struct _CO_CALL_MANAGER_PARAMETERS
{
  /* 0x0000 */ struct _flowspec Transmit;
  /* 0x0020 */ struct _flowspec Receive;
  /* 0x0040 */ struct _CO_SPECIFIC_PARAMETERS CallMgrSpecific;
} CO_CALL_MANAGER_PARAMETERS, *PCO_CALL_MANAGER_PARAMETERS; /* size: 0x004c */

typedef struct _CO_CALL_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0008 */ struct _CO_CALL_MANAGER_PARAMETERS* CallMgrParameters;
  /* 0x0010 */ struct _CO_MEDIA_PARAMETERS* MediaParameters;
} CO_CALL_PARAMETERS, *PCO_CALL_PARAMETERS; /* size: 0x0018 */

typedef struct _CO_MEDIA_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ReceivePriority;
  /* 0x0008 */ unsigned long ReceiveSizeHint;
  /* 0x0010 */ struct _CO_SPECIFIC_PARAMETERS MediaSpecific;
  /* 0x001c */ long __PADDING__[1];
} CO_MEDIA_PARAMETERS, *PCO_MEDIA_PARAMETERS; /* size: 0x0020 */

typedef struct _CO_PVC
{
  /* 0x0000 */ void* NdisAfHandle;
  /* 0x0008 */ struct _CO_SPECIFIC_PARAMETERS PvcParameters;
  /* 0x0014 */ long __PADDING__[1];
} CO_PVC, *PCO_PVC; /* size: 0x0018 */

typedef struct _CO_SPECIFIC_PARAMETERS
{
  /* 0x0000 */ unsigned long ParamType;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned char Parameters[1];
  /* 0x0009 */ char __PADDING__[3];
} CO_SPECIFIC_PARAMETERS, *PCO_SPECIFIC_PARAMETERS; /* size: 0x000c */

typedef struct _CURDIR
{
  /* 0x0000 */ struct _UNICODE_STRING DosPath;
  /* 0x0010 */ void* Handle;
} CURDIR, *PCURDIR; /* size: 0x0018 */

typedef union _DATA
{
  union
  {
    /* 0x0000 */ struct _QUERY_INFORMATION QUERY_INFORMATION;
    /* 0x0000 */ struct _SET_INFORMATION SET_INFORMATION;
  }; /* size: 0x0020 */
} DATA, *PDATA; /* size: 0x0020 */

typedef struct _DEVICE_CAPABILITIES
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long DeviceD1 : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long DeviceD2 : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long LockSupported : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long EjectSupported : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Removable : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long DockDevice : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long UniqueID : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long SilentInstall : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned long RawDeviceOK : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned long SurpriseRemovalOK : 1; /* bit position: 9 */
    /* 0x0004 */ unsigned long WakeFromD0 : 1; /* bit position: 10 */
    /* 0x0004 */ unsigned long WakeFromD1 : 1; /* bit position: 11 */
    /* 0x0004 */ unsigned long WakeFromD2 : 1; /* bit position: 12 */
    /* 0x0004 */ unsigned long WakeFromD3 : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned long HardwareDisabled : 1; /* bit position: 14 */
    /* 0x0004 */ unsigned long NonDynamic : 1; /* bit position: 15 */
    /* 0x0004 */ unsigned long WarmEjectSupported : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long NoDisplayInUI : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long Reserved1 : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long Reserved : 13; /* bit position: 19 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long Address;
  /* 0x000c */ unsigned long UINumber;
  /* 0x0010 */ enum _DEVICE_POWER_STATE DeviceState[7];
  /* 0x002c */ enum _SYSTEM_POWER_STATE SystemWake;
  /* 0x0030 */ enum _DEVICE_POWER_STATE DeviceWake;
  /* 0x0034 */ unsigned long D1Latency;
  /* 0x0038 */ unsigned long D2Latency;
  /* 0x003c */ unsigned long D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES; /* size: 0x0040 */

typedef struct _DEVICE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0010 */ struct _DEVICE_OBJECT* NextDevice;
  /* 0x0018 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0020 */ struct _IRP* CurrentIrp;
  /* 0x0028 */ struct _IO_TIMER* Timer;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ unsigned long Characteristics;
  /* 0x0038 */ struct _VPB* Vpb;
  /* 0x0040 */ void* DeviceExtension;
  /* 0x0048 */ unsigned long DeviceType;
  /* 0x004c */ char StackSize;
  union
  {
    union
    {
      /* 0x0050 */ struct _LIST_ENTRY ListEntry;
      /* 0x0050 */ struct _WAIT_CONTEXT_BLOCK Wcb;
    }; /* size: 0x0048 */
  } /* size: 0x0048 */ Queue;
  /* 0x0098 */ unsigned long AlignmentRequirement;
  /* 0x00a0 */ struct _KDEVICE_QUEUE DeviceQueue;
  /* 0x00c8 */ struct _KDPC Dpc;
  /* 0x0108 */ unsigned long ActiveThreadCount;
  /* 0x0110 */ void* SecurityDescriptor;
  /* 0x0118 */ struct _KEVENT DeviceLock;
  /* 0x0130 */ unsigned short SectorSize;
  /* 0x0132 */ unsigned short Spare1;
  /* 0x0138 */ struct _DEVOBJ_EXTENSION* DeviceObjectExtension;
  /* 0x0140 */ void* Reserved;
  /* 0x0148 */ long __PADDING__[2];
} DEVICE_OBJECT, *PDEVICE_OBJECT; /* size: 0x0150 */

struct _DEVICE_OBJECT_POWER_EXTENSION;

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
} DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
} DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef struct _DEVOBJ_EXTENSION
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ unsigned long PowerFlags;
  /* 0x0018 */ struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;
  /* 0x0020 */ unsigned long ExtensionFlags;
  /* 0x0028 */ void* DeviceNode;
  /* 0x0030 */ struct _DEVICE_OBJECT* AttachedTo;
  /* 0x0038 */ long StartIoCount;
  /* 0x003c */ long StartIoKey;
  /* 0x0040 */ unsigned long StartIoFlags;
  /* 0x0048 */ struct _VPB* Vpb;
  /* 0x0050 */ struct _LIST_ENTRY DependentList;
  /* 0x0060 */ struct _LIST_ENTRY ProviderList;
} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION; /* size: 0x0070 */

typedef struct _DEVPROPKEY
{
  /* 0x0000 */ struct _GUID fmtid;
  /* 0x0010 */ unsigned long pid;
} DEVPROPKEY, *PDEVPROPKEY; /* size: 0x0014 */

typedef struct _DISPATCHER_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char Type;
      union
      {
        /* 0x0001 */ unsigned char TimerControlFlags;
        struct /* bitfield */
        {
          /* 0x0001 */ unsigned char Absolute : 1; /* bit position: 0 */
          /* 0x0001 */ unsigned char Wake : 1; /* bit position: 1 */
          /* 0x0001 */ unsigned char EncodedTolerableDelay : 6; /* bit position: 2 */
        }; /* bitfield */
        /* 0x0001 */ unsigned char Abandoned;
        struct
        {
          /* 0x0001 */ unsigned char Signalling;
          union
          {
            /* 0x0002 */ unsigned char ThreadControlFlags;
            struct /* bitfield */
            {
              /* 0x0002 */ unsigned char CycleProfiling : 1; /* bit position: 0 */
              /* 0x0002 */ unsigned char CounterProfiling : 1; /* bit position: 1 */
              /* 0x0002 */ unsigned char GroupScheduling : 1; /* bit position: 2 */
              /* 0x0002 */ unsigned char AffinitySet : 1; /* bit position: 3 */
              /* 0x0002 */ unsigned char Reserved : 4; /* bit position: 4 */
            }; /* bitfield */
            /* 0x0002 */ unsigned char Hand;
            struct
            {
              /* 0x0002 */ unsigned char Size;
              union
              {
                /* 0x0003 */ unsigned char TimerMiscFlags;
                struct /* bitfield */
                {
                  /* 0x0003 */ unsigned char Index : 6; /* bit position: 0 */
                  /* 0x0003 */ unsigned char Inserted : 1; /* bit position: 6 */
                  /* 0x0003 */ volatile unsigned char Expired : 1; /* bit position: 7 */
                }; /* bitfield */
                /* 0x0003 */ unsigned char DebugActive;
                struct /* bitfield */
                {
                  /* 0x0003 */ unsigned char ActiveDR7 : 1; /* bit position: 0 */
                  /* 0x0003 */ unsigned char Instrumented : 1; /* bit position: 1 */
                  /* 0x0003 */ unsigned char Reserved2 : 4; /* bit position: 2 */
                  /* 0x0003 */ unsigned char UmsScheduled : 1; /* bit position: 6 */
                  /* 0x0003 */ unsigned char UmsPrimary : 1; /* bit position: 7 */
                }; /* bitfield */
                /* 0x0003 */ unsigned char DpcActive;
              }; /* size: 0x0001 */
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    /* 0x0000 */ volatile long Lock;
    /* 0x0000 */ long LockNV;
  }; /* size: 0x0004 */
  /* 0x0004 */ long SignalState;
  /* 0x0008 */ struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; /* size: 0x0018 */

typedef union _DL_EI48
{
  /* 0x0000 */ unsigned char Byte[3];
} DL_EI48, *PDL_EI48; /* size: 0x0003 */

typedef union _DL_EUI48
{
  union
  {
    /* 0x0000 */ unsigned char Byte[6];
    struct
    {
      /* 0x0000 */ union _DL_OUI Oui;
      /* 0x0003 */ union _DL_EI48 Ei48;
    }; /* size: 0x0006 */
  }; /* size: 0x0006 */
} DL_EUI48, *PDL_EUI48; /* size: 0x0006 */

typedef union _DL_OUI
{
  union
  {
    /* 0x0000 */ unsigned char Byte[3];
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Group : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Local : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0003 */
} DL_OUI, *PDL_OUI; /* size: 0x0003 */

typedef struct _DMA_ADAPTER
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Size;
  /* 0x0008 */ struct _DMA_OPERATIONS* DmaOperations;
} DMA_ADAPTER, *PDMA_ADAPTER; /* size: 0x0010 */

typedef struct _DMA_ADAPTER_INFO
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _DMA_ADAPTER_INFO_V1 V1;
} DMA_ADAPTER_INFO, *PDMA_ADAPTER_INFO; /* size: 0x0018 */

typedef struct _DMA_ADAPTER_INFO_V1
{
  /* 0x0000 */ unsigned long ReadDmaCounterAvailable;
  /* 0x0004 */ unsigned long ScatterGatherLimit;
  /* 0x0008 */ unsigned long DmaAddressWidth;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long MinimumTransferUnit;
} DMA_ADAPTER_INFO_V1, *PDMA_ADAPTER_INFO_V1; /* size: 0x0014 */

typedef struct _DMA_OPERATIONS
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0008 */ void* PutDmaAdapter /* function */;
  /* 0x0010 */ void* AllocateCommonBuffer /* function */;
  /* 0x0018 */ void* FreeCommonBuffer /* function */;
  /* 0x0020 */ void* AllocateAdapterChannel /* function */;
  /* 0x0028 */ void* FlushAdapterBuffers /* function */;
  /* 0x0030 */ void* FreeAdapterChannel /* function */;
  /* 0x0038 */ void* FreeMapRegisters /* function */;
  /* 0x0040 */ void* MapTransfer /* function */;
  /* 0x0048 */ void* GetDmaAlignment /* function */;
  /* 0x0050 */ void* ReadDmaCounter /* function */;
  /* 0x0058 */ void* GetScatterGatherList /* function */;
  /* 0x0060 */ void* PutScatterGatherList /* function */;
  /* 0x0068 */ void* CalculateScatterGatherList /* function */;
  /* 0x0070 */ void* BuildScatterGatherList /* function */;
  /* 0x0078 */ void* BuildMdlFromScatterGatherList /* function */;
  /* 0x0080 */ void* GetDmaAdapterInfo /* function */;
  /* 0x0088 */ void* GetDmaTransferInfo /* function */;
  /* 0x0090 */ void* InitializeDmaTransferContext /* function */;
  /* 0x0098 */ void* AllocateCommonBufferEx /* function */;
  /* 0x00a0 */ void* AllocateAdapterChannelEx /* function */;
  /* 0x00a8 */ void* ConfigureAdapterChannel /* function */;
  /* 0x00b0 */ void* CancelAdapterChannel /* function */;
  /* 0x00b8 */ void* MapTransferEx /* function */;
  /* 0x00c0 */ void* GetScatterGatherListEx /* function */;
  /* 0x00c8 */ void* BuildScatterGatherListEx /* function */;
  /* 0x00d0 */ void* FlushAdapterBuffersEx /* function */;
  /* 0x00d8 */ void* FreeAdapterObject /* function */;
  /* 0x00e0 */ void* CancelMappedTransfer /* function */;
} DMA_OPERATIONS, *PDMA_OPERATIONS; /* size: 0x00e8 */

typedef enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
} DMA_SPEED, *PDMA_SPEED;

typedef struct _DMA_TRANSFER_INFO
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _DMA_TRANSFER_INFO_V1 V1;
} DMA_TRANSFER_INFO, *PDMA_TRANSFER_INFO; /* size: 0x0010 */

typedef struct _DMA_TRANSFER_INFO_V1
{
  /* 0x0000 */ unsigned long MapRegisterCount;
  /* 0x0004 */ unsigned long ScatterGatherElementCount;
  /* 0x0008 */ unsigned long ScatterGatherListSize;
} DMA_TRANSFER_INFO_V1, *PDMA_TRANSFER_INFO_V1; /* size: 0x000c */

typedef enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
} DMA_WIDTH, *PDMA_WIDTH;

typedef struct _DOT11_ADDITIONAL_IE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uBeaconIEsOffset;
  /* 0x0008 */ unsigned long uBeaconIEsLength;
  /* 0x000c */ unsigned long uResponseIEsOffset;
  /* 0x0010 */ unsigned long uResponseIEsLength;
} DOT11_ADDITIONAL_IE, *PDOT11_ADDITIONAL_IE; /* size: 0x0014 */

typedef struct _DOT11_ASSOCIATION_INFO_EX
{
  /* 0x0000 */ unsigned char PeerMacAddress[6];
  /* 0x0006 */ unsigned char BSSID[6];
  /* 0x000c */ unsigned short usCapabilityInformation;
  /* 0x000e */ unsigned short usListenInterval;
  /* 0x0010 */ unsigned char ucPeerSupportedRates[255];
  /* 0x0110 */ unsigned short usAssociationID;
  /* 0x0114 */ enum _DOT11_ASSOCIATION_STATE dot11AssociationState;
  /* 0x0118 */ enum _DOT11_POWER_MODE dot11PowerMode;
  /* 0x0120 */ union _LARGE_INTEGER liAssociationUpTime;
  /* 0x0128 */ unsigned __int64 ullNumOfTxPacketSuccesses;
  /* 0x0130 */ unsigned __int64 ullNumOfTxPacketFailures;
  /* 0x0138 */ unsigned __int64 ullNumOfRxPacketSuccesses;
  /* 0x0140 */ unsigned __int64 ullNumOfRxPacketFailures;
} DOT11_ASSOCIATION_INFO_EX, *PDOT11_ASSOCIATION_INFO_EX; /* size: 0x0148 */

typedef enum _DOT11_ASSOCIATION_STATE
{
  dot11_assoc_state_zero = 0,
  dot11_assoc_state_unauth_unassoc = 1,
  dot11_assoc_state_auth_unassoc = 2,
  dot11_assoc_state_auth_assoc = 3,
} DOT11_ASSOCIATION_STATE, *PDOT11_ASSOCIATION_STATE;

typedef enum _DOT11_AUTH_ALGORITHM
{
  DOT11_AUTH_ALGO_80211_OPEN = 1,
  DOT11_AUTH_ALGO_80211_SHARED_KEY = 2,
  DOT11_AUTH_ALGO_WPA = 3,
  DOT11_AUTH_ALGO_WPA_PSK = 4,
  DOT11_AUTH_ALGO_WPA_NONE = 5,
  DOT11_AUTH_ALGO_RSNA = 6,
  DOT11_AUTH_ALGO_RSNA_PSK = 7,
  DOT11_AUTH_ALGO_IHV_START = -2147483648,
  DOT11_AUTH_ALGO_IHV_END = -1,
} DOT11_AUTH_ALGORITHM, *PDOT11_AUTH_ALGORITHM;

typedef struct _DOT11_AVAILABLE_CHANNEL_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned long uChannelNumber[1];
} DOT11_AVAILABLE_CHANNEL_LIST, *PDOT11_AVAILABLE_CHANNEL_LIST; /* size: 0x0010 */

typedef struct _DOT11_AVAILABLE_FREQUENCY_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned long uFrequencyValue[1];
} DOT11_AVAILABLE_FREQUENCY_LIST, *PDOT11_AVAILABLE_FREQUENCY_LIST; /* size: 0x0010 */

typedef enum _DOT11_CIPHER_ALGORITHM
{
  DOT11_CIPHER_ALGO_NONE = 0,
  DOT11_CIPHER_ALGO_WEP40 = 1,
  DOT11_CIPHER_ALGO_TKIP = 2,
  DOT11_CIPHER_ALGO_CCMP = 4,
  DOT11_CIPHER_ALGO_WEP104 = 5,
  DOT11_CIPHER_ALGO_BIP = 6,
  DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256,
  DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256,
  DOT11_CIPHER_ALGO_WEP = 257,
  DOT11_CIPHER_ALGO_IHV_START = -2147483648,
  DOT11_CIPHER_ALGO_IHV_END = -1,
} DOT11_CIPHER_ALGORITHM, *PDOT11_CIPHER_ALGORITHM;

typedef struct _DOT11_DISASSOCIATE_PEER_REQUEST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char PeerMacAddr[6];
  /* 0x000a */ unsigned short usReason;
} DOT11_DISASSOCIATE_PEER_REQUEST, *PDOT11_DISASSOCIATE_PEER_REQUEST; /* size: 0x000c */

typedef enum _DOT11_DIVERSITY_SUPPORT
{
  dot11_diversity_support_unknown = 0,
  dot11_diversity_support_fixedlist = 1,
  dot11_diversity_support_notsupported = 2,
  dot11_diversity_support_dynamic = 3,
} DOT11_DIVERSITY_SUPPORT, *PDOT11_DIVERSITY_SUPPORT;

typedef struct _DOT11_EXTAP_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uScanSSIDListSize;
  /* 0x0008 */ unsigned long uDesiredSSIDListSize;
  /* 0x000c */ unsigned long uPrivacyExemptionListSize;
  /* 0x0010 */ unsigned long uAssociationTableSize;
  /* 0x0014 */ unsigned long uDefaultKeyTableSize;
  /* 0x0018 */ unsigned long uWEPKeyValueMaxLength;
  /* 0x001c */ unsigned char bStrictlyOrderedServiceClassImplemented;
  /* 0x0020 */ unsigned long uNumSupportedCountryOrRegionStrings;
  /* 0x0028 */ unsigned char* pSupportedCountryOrRegionStrings[3];
  /* 0x0030 */ unsigned long uInfraNumSupportedUcastAlgoPairs;
  /* 0x0038 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
  /* 0x0040 */ unsigned long uInfraNumSupportedMcastAlgoPairs;
  /* 0x0048 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
} DOT11_EXTAP_ATTRIBUTES, *PDOT11_EXTAP_ATTRIBUTES; /* size: 0x0050 */

typedef struct _DOT11_INCOMING_ASSOC_DECISION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char PeerMacAddr[6];
  /* 0x000a */ unsigned char bAccept;
  /* 0x000c */ unsigned short usReasonCode;
  /* 0x0010 */ unsigned long uAssocResponseIEsOffset;
  /* 0x0014 */ unsigned long uAssocResponseIEsLength;
} DOT11_INCOMING_ASSOC_DECISION, *PDOT11_INCOMING_ASSOC_DECISION; /* size: 0x0018 */

typedef struct _DOT11_PEER_INFO
{
  /* 0x0000 */ unsigned char MacAddress[6];
  /* 0x0006 */ unsigned short usCapabilityInformation;
  /* 0x0008 */ enum _DOT11_AUTH_ALGORITHM AuthAlgo;
  /* 0x000c */ enum _DOT11_CIPHER_ALGORITHM UnicastCipherAlgo;
  /* 0x0010 */ enum _DOT11_CIPHER_ALGORITHM MulticastCipherAlgo;
  /* 0x0014 */ unsigned char bWpsEnabled;
  /* 0x0016 */ unsigned short usListenInterval;
  /* 0x0018 */ unsigned char ucSupportedRates[255];
  /* 0x0118 */ unsigned short usAssociationID;
  /* 0x011c */ enum _DOT11_ASSOCIATION_STATE AssociationState;
  /* 0x0120 */ enum _DOT11_POWER_MODE PowerMode;
  /* 0x0128 */ union _LARGE_INTEGER liAssociationUpTime;
  /* 0x0130 */ struct _DOT11_PEER_STATISTICS Statistics;
} DOT11_PEER_INFO, *PDOT11_PEER_INFO; /* size: 0x0160 */

typedef struct _DOT11_PEER_INFO_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x0010 */ struct _DOT11_PEER_INFO PeerInfo[1];
} DOT11_PEER_INFO_LIST, *PDOT11_PEER_INFO_LIST; /* size: 0x0170 */

typedef struct _DOT11_PEER_STATISTICS
{
  /* 0x0000 */ unsigned __int64 ullDecryptSuccessCount;
  /* 0x0008 */ unsigned __int64 ullDecryptFailureCount;
  /* 0x0010 */ unsigned __int64 ullTxPacketSuccessCount;
  /* 0x0018 */ unsigned __int64 ullTxPacketFailureCount;
  /* 0x0020 */ unsigned __int64 ullRxPacketSuccessCount;
  /* 0x0028 */ unsigned __int64 ullRxPacketFailureCount;
} DOT11_PEER_STATISTICS, *PDOT11_PEER_STATISTICS; /* size: 0x0030 */

typedef enum _DOT11_PHY_TYPE
{
  dot11_phy_type_unknown = 0,
  dot11_phy_type_any = 0,
  dot11_phy_type_fhss = 1,
  dot11_phy_type_dsss = 2,
  dot11_phy_type_irbaseband = 3,
  dot11_phy_type_ofdm = 4,
  dot11_phy_type_hrdsss = 5,
  dot11_phy_type_erp = 6,
  dot11_phy_type_ht = 7,
  dot11_phy_type_IHV_start = -2147483648,
  dot11_phy_type_IHV_end = -1,
} DOT11_PHY_TYPE, *PDOT11_PHY_TYPE;

typedef enum _DOT11_POWER_MODE
{
  dot11_power_mode_unknown = 0,
  dot11_power_mode_active = 1,
  dot11_power_mode_powersave = 2,
} DOT11_POWER_MODE, *PDOT11_POWER_MODE;

typedef struct _DOT11_RSN_REKEY_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char KCK[16];
  /* 0x0014 */ unsigned char KEK[16];
  /* 0x0028 */ unsigned __int64 KeyReplayCounter;
} DOT11_RSN_REKEY_PARAMETERS, *PDOT11_RSN_REKEY_PARAMETERS; /* size: 0x0030 */

typedef struct _DOT11_SSID
{
  /* 0x0000 */ unsigned long uSSIDLength;
  /* 0x0004 */ unsigned char ucSSID[32];
} DOT11_SSID, *PDOT11_SSID; /* size: 0x0024 */

typedef struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2
{
  /* 0x0000 */ unsigned char ucSupportedTxDataRatesValue[255];
  /* 0x00ff */ unsigned char ucSupportedRxDataRatesValue[255];
} DOT11_SUPPORTED_DATA_RATES_VALUE_V2, *PDOT11_SUPPORTED_DATA_RATES_VALUE_V2; /* size: 0x01fe */

typedef enum _DOT11_TEMP_TYPE
{
  dot11_temp_type_unknown = 0,
  dot11_temp_type_1 = 1,
  dot11_temp_type_2 = 2,
} DOT11_TEMP_TYPE, *PDOT11_TEMP_TYPE;

typedef struct _DOT11_VWIFI_COMBINATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumInfrastructure;
  /* 0x0008 */ unsigned long uNumAdhoc;
  /* 0x000c */ unsigned long uNumSoftAP;
} DOT11_VWIFI_COMBINATION, *PDOT11_VWIFI_COMBINATION; /* size: 0x0010 */

typedef struct _DOT11_WFD_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumConcurrentGORole;
  /* 0x0008 */ unsigned long uNumConcurrentClientRole;
  /* 0x000c */ unsigned long WPSVersionsSupported;
  /* 0x0010 */ unsigned char bServiceDiscoverySupported;
  /* 0x0011 */ unsigned char bClientDiscoverabilitySupported;
  /* 0x0012 */ unsigned char bInfrastructureManagementSupported;
  /* 0x0014 */ unsigned long uMaxSecondaryDeviceTypeListSize;
  /* 0x0018 */ unsigned char DeviceAddress[6];
  /* 0x0020 */ unsigned long uInterfaceAddressListCount;
  /* 0x0028 */ unsigned char* pInterfaceAddressList[6];
  /* 0x0030 */ unsigned long uNumSupportedCountryOrRegionStrings;
  /* 0x0038 */ unsigned char* pSupportedCountryOrRegionStrings[3];
  /* 0x0040 */ unsigned long uDiscoveryFilterListSize;
  /* 0x0044 */ unsigned long uGORoleClientTableSize;
} DOT11_WFD_ATTRIBUTES, *PDOT11_WFD_ATTRIBUTES; /* size: 0x0048 */

typedef struct _DRIVER_EXTENSION
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0008 */ void* AddDevice /* function */;
  /* 0x0010 */ unsigned long Count;
  /* 0x0018 */ struct _UNICODE_STRING ServiceKeyName;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION; /* size: 0x0028 */

typedef struct _DRIVER_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0018 */ void* DriverStart;
  /* 0x0020 */ unsigned long DriverSize;
  /* 0x0028 */ void* DriverSection;
  /* 0x0030 */ struct _DRIVER_EXTENSION* DriverExtension;
  /* 0x0038 */ struct _UNICODE_STRING DriverName;
  /* 0x0048 */ struct _UNICODE_STRING* HardwareDatabase;
  /* 0x0050 */ struct _FAST_IO_DISPATCH* FastIoDispatch;
  /* 0x0058 */ void* DriverInit /* function */;
  /* 0x0060 */ void* DriverStartIo /* function */;
  /* 0x0068 */ void* DriverUnload /* function */;
  /* 0x0070 */ void* MajorFunction[28] /* function */;
} DRIVER_OBJECT, *PDRIVER_OBJECT; /* size: 0x0150 */

typedef struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
} EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS, *PEAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS; /* size: 0x0004 */

struct _ECP_LIST;

struct _EPROCESS;

typedef struct _ERESOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY SystemResourcesList;
  /* 0x0010 */ struct _OWNER_ENTRY* OwnerTable;
  /* 0x0018 */ short ActiveCount;
  union
  {
    /* 0x001a */ unsigned short Flag;
    struct
    {
      /* 0x001a */ unsigned char ReservedLowFlags;
      /* 0x001b */ unsigned char WaiterPriority;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0020 */ struct _KSEMAPHORE* SharedWaiters;
  /* 0x0028 */ struct _KEVENT* ExclusiveWaiters;
  /* 0x0030 */ struct _OWNER_ENTRY OwnerEntry;
  /* 0x0040 */ unsigned long ActiveEntries;
  /* 0x0044 */ unsigned long ContentionCount;
  /* 0x0048 */ unsigned long NumberOfSharedWaiters;
  /* 0x004c */ unsigned long NumberOfExclusiveWaiters;
  /* 0x0050 */ void* Reserved2;
  union
  {
    /* 0x0058 */ void* Address;
    /* 0x0058 */ unsigned __int64 CreatorBackTraceIndex;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned __int64 SpinLock;
} ERESOURCE, *PERESOURCE; /* size: 0x0068 */

struct _ETHREAD;

typedef struct _ETH_MULTICAST_WRAPPER
{
  /* 0x0000 */ unsigned long RefCount;
  /* 0x0004 */ unsigned char MCastAddress[6];
  /* 0x000a */ char __PADDING__[2];
} ETH_MULTICAST_WRAPPER, *PETH_MULTICAST_WRAPPER; /* size: 0x000c */

typedef struct _ETW_BUFFER_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char ProcessorNumber;
      /* 0x0001 */ unsigned char Alignment;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short ProcessorIndex;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short LoggerId;
} ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT; /* size: 0x0004 */

typedef struct _EVENT_DATA_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Reserved;
} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Channel;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Opcode;
  /* 0x0006 */ unsigned short Task;
  /* 0x0008 */ unsigned __int64 Keyword;
} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_FILTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Type;
} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR; /* size: 0x0010 */

typedef struct _EVENT_HEADER
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short HeaderType;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short EventProperty;
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _GUID ProviderId;
  /* 0x0028 */ struct _EVENT_DESCRIPTOR EventDescriptor;
  union
  {
    struct
    {
      /* 0x0038 */ unsigned long KernelTime;
      /* 0x003c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0038 */ unsigned __int64 ProcessorTime;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _GUID ActivityId;
} EVENT_HEADER, *PEVENT_HEADER; /* size: 0x0050 */

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  /* 0x0000 */ unsigned short Reserved1;
  /* 0x0002 */ unsigned short ExtType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned short Linkage : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned short Reserved2 : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0006 */ unsigned short DataSize;
  /* 0x0008 */ unsigned __int64 DataPtr;
} EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM; /* size: 0x0010 */

typedef struct _EVENT_RECORD
{
  /* 0x0000 */ struct _EVENT_HEADER EventHeader;
  /* 0x0050 */ struct _ETW_BUFFER_CONTEXT BufferContext;
  /* 0x0054 */ unsigned short ExtendedDataCount;
  /* 0x0056 */ unsigned short UserDataLength;
  /* 0x0058 */ struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
  /* 0x0060 */ void* UserData;
  /* 0x0068 */ void* UserContext;
} EVENT_RECORD, *PEVENT_RECORD; /* size: 0x0070 */

typedef enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0010 */ void* ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0098 */

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0008 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0010 */

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Shared : 60; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0008 */
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; /* size: 0x0008 */

typedef struct _EX_PUSH_LOCK_CACHE_AWARE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK* Locks[32];
} EX_PUSH_LOCK_CACHE_AWARE, *PEX_PUSH_LOCK_CACHE_AWARE; /* size: 0x0100 */

typedef struct _FAST_IO_DISPATCH
{
  /* 0x0000 */ unsigned long SizeOfFastIoDispatch;
  /* 0x0008 */ void* FastIoCheckIfPossible /* function */;
  /* 0x0010 */ void* FastIoRead /* function */;
  /* 0x0018 */ void* FastIoWrite /* function */;
  /* 0x0020 */ void* FastIoQueryBasicInfo /* function */;
  /* 0x0028 */ void* FastIoQueryStandardInfo /* function */;
  /* 0x0030 */ void* FastIoLock /* function */;
  /* 0x0038 */ void* FastIoUnlockSingle /* function */;
  /* 0x0040 */ void* FastIoUnlockAll /* function */;
  /* 0x0048 */ void* FastIoUnlockAllByKey /* function */;
  /* 0x0050 */ void* FastIoDeviceControl /* function */;
  /* 0x0058 */ void* AcquireFileForNtCreateSection /* function */;
  /* 0x0060 */ void* ReleaseFileForNtCreateSection /* function */;
  /* 0x0068 */ void* FastIoDetachDevice /* function */;
  /* 0x0070 */ void* FastIoQueryNetworkOpenInfo /* function */;
  /* 0x0078 */ void* AcquireForModWrite /* function */;
  /* 0x0080 */ void* MdlRead /* function */;
  /* 0x0088 */ void* MdlReadComplete /* function */;
  /* 0x0090 */ void* PrepareMdlWrite /* function */;
  /* 0x0098 */ void* MdlWriteComplete /* function */;
  /* 0x00a0 */ void* FastIoReadCompressed /* function */;
  /* 0x00a8 */ void* FastIoWriteCompressed /* function */;
  /* 0x00b0 */ void* MdlReadCompleteCompressed /* function */;
  /* 0x00b8 */ void* MdlWriteCompleteCompressed /* function */;
  /* 0x00c0 */ void* FastIoQueryOpen /* function */;
  /* 0x00c8 */ void* ReleaseForModWrite /* function */;
  /* 0x00d0 */ void* AcquireForCcFlush /* function */;
  /* 0x00d8 */ void* ReleaseForCcFlush /* function */;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH; /* size: 0x00e0 */

typedef struct _FAST_MUTEX
{
  /* 0x0000 */ long Count;
  /* 0x0008 */ void* Owner;
  /* 0x0010 */ unsigned long Contention;
  /* 0x0018 */ struct _KEVENT Event;
  /* 0x0030 */ unsigned long OldIrql;
  /* 0x0034 */ long __PADDING__[1];
} FAST_MUTEX, *PFAST_MUTEX; /* size: 0x0038 */

typedef union _FIELD_VALUE
{
  union
  {
    /* 0x0000 */ unsigned char FieldByteValue;
    /* 0x0000 */ unsigned short FieldShortValue;
    /* 0x0000 */ unsigned long FieldLongValue;
    /* 0x0000 */ unsigned __int64 FieldLong64Value;
    /* 0x0000 */ unsigned char FieldByteArrayValue[16];
  }; /* size: 0x0010 */
} FIELD_VALUE, *PFIELD_VALUE; /* size: 0x0010 */

typedef struct _FILE_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ unsigned long FileAttributes;
  /* 0x0024 */ long __PADDING__[1];
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION; /* size: 0x0028 */

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileAttributeCacheInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileMaximumInformation = 61,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ unsigned long FileAttributes;
  /* 0x0034 */ long __PADDING__[1];
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION; /* size: 0x0038 */

typedef struct _FILE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _VPB* Vpb;
  /* 0x0018 */ void* FsContext;
  /* 0x0020 */ void* FsContext2;
  /* 0x0028 */ struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;
  /* 0x0030 */ void* PrivateCacheMap;
  /* 0x0038 */ long FinalStatus;
  /* 0x0040 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0048 */ unsigned char LockOperation;
  /* 0x0049 */ unsigned char DeletePending;
  /* 0x004a */ unsigned char ReadAccess;
  /* 0x004b */ unsigned char WriteAccess;
  /* 0x004c */ unsigned char DeleteAccess;
  /* 0x004d */ unsigned char SharedRead;
  /* 0x004e */ unsigned char SharedWrite;
  /* 0x004f */ unsigned char SharedDelete;
  /* 0x0050 */ unsigned long Flags;
  /* 0x0058 */ struct _UNICODE_STRING FileName;
  /* 0x0068 */ union _LARGE_INTEGER CurrentByteOffset;
  /* 0x0070 */ unsigned long Waiters;
  /* 0x0074 */ unsigned long Busy;
  /* 0x0078 */ void* LastLock;
  /* 0x0080 */ struct _KEVENT Lock;
  /* 0x0098 */ struct _KEVENT Event;
  /* 0x00b0 */ struct _IO_COMPLETION_CONTEXT* CompletionContext;
  /* 0x00b8 */ unsigned __int64 IrpListLock;
  /* 0x00c0 */ struct _LIST_ENTRY IrpList;
  /* 0x00d0 */ void* FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT; /* size: 0x00d8 */

typedef struct _FILE_STANDARD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0010 */ unsigned long NumberOfLinks;
  /* 0x0014 */ unsigned char DeletePending;
  /* 0x0015 */ unsigned char Directory;
  /* 0x0016 */ char __PADDING__[2];
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION; /* size: 0x0018 */

typedef struct _FILTER_PAUSE_RESTART_CONTEXT
{
  /* 0x0000 */ struct _NDIS_FILTER_BLOCK* Filter;
  /* 0x0008 */ int Status;
  /* 0x0010 */ struct _KEVENT Event;
} FILTER_PAUSE_RESTART_CONTEXT, *PFILTER_PAUSE_RESTART_CONTEXT; /* size: 0x0028 */

struct _FLS_CALLBACK_INFO;

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMaximumInformation = 13,
} FSINFOCLASS, *PFSINFOCLASS;

typedef struct _GDI_TEB_BATCH
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e8 */

typedef struct _GENERAL_LOOKASIDE
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  union
  {
    /* 0x0018 */ unsigned long AllocateMisses;
    /* 0x0018 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long TotalFrees;
  union
  {
    /* 0x0020 */ unsigned long FreeMisses;
    /* 0x0020 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x0024 */ enum _POOL_TYPE Type;
  /* 0x0028 */ unsigned long Tag;
  /* 0x002c */ unsigned long Size;
  union
  {
    /* 0x0030 */ void* AllocateEx /* function */;
    /* 0x0030 */ void* Allocate /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0038 */ void* FreeEx /* function */;
    /* 0x0038 */ void* Free /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _LIST_ENTRY ListEntry;
  /* 0x0050 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x0054 */ unsigned long LastAllocateMisses;
    /* 0x0054 */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0058 */ unsigned long Future[2];
  /* 0x0060 */ long __PADDING__[8];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE; /* size: 0x0080 */

typedef struct _GENERAL_LOOKASIDE_POOL
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned short Depth;
  /* 0x0012 */ unsigned short MaximumDepth;
  /* 0x0014 */ unsigned long TotalAllocates;
  union
  {
    /* 0x0018 */ unsigned long AllocateMisses;
    /* 0x0018 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned long TotalFrees;
  union
  {
    /* 0x0020 */ unsigned long FreeMisses;
    /* 0x0020 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x0024 */ enum _POOL_TYPE Type;
  /* 0x0028 */ unsigned long Tag;
  /* 0x002c */ unsigned long Size;
  union
  {
    /* 0x0030 */ void* AllocateEx /* function */;
    /* 0x0030 */ void* Allocate /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0038 */ void* FreeEx /* function */;
    /* 0x0038 */ void* Free /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _LIST_ENTRY ListEntry;
  /* 0x0050 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x0054 */ unsigned long LastAllocateMisses;
    /* 0x0054 */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0058 */ unsigned long Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL; /* size: 0x0060 */

typedef struct _GENERIC_MAPPING
{
  /* 0x0000 */ unsigned long GenericRead;
  /* 0x0004 */ unsigned long GenericWrite;
  /* 0x0008 */ unsigned long GenericExecute;
  /* 0x000c */ unsigned long GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING; /* size: 0x0010 */

typedef struct _GEN_GET_NETCARD_TIME
{
  /* 0x0000 */ unsigned __int64 ReadTime;
} GEN_GET_NETCARD_TIME, *PGEN_GET_NETCARD_TIME; /* size: 0x0008 */

typedef struct _GEN_GET_TIME_CAPS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ClockPrecision;
} GEN_GET_TIME_CAPS, *PGEN_GET_TIME_CAPS; /* size: 0x0008 */

typedef struct _GROUP_AFFINITY
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned short Group;
  /* 0x000a */ unsigned short Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; /* size: 0x0010 */

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

typedef union _HEADER_FIELD
{
  union
  {
    /* 0x0000 */ enum _NDIS_MAC_HEADER_FIELD MacHeaderField;
    /* 0x0000 */ enum _NDIS_ARP_HEADER_FIELD ArpHeaderField;
    /* 0x0000 */ enum _NDIS_IPV4_HEADER_FIELD IPv4HeaderField;
    /* 0x0000 */ enum _NDIS_IPV6_HEADER_FIELD IPv6HeaderField;
    /* 0x0000 */ enum _NDIS_UDP_HEADER_FIELD UdpHeaderField;
  }; /* size: 0x0004 */
} HEADER_FIELD, *PHEADER_FIELD; /* size: 0x0004 */

typedef struct _IF_COUNTED_STRING_LH
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ wchar_t String[257];
} IF_COUNTED_STRING_LH, *PIF_COUNTED_STRING_LH; /* size: 0x0204 */

typedef struct _IF_PHYSICAL_ADDRESS_LH
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned char Address[32];
} IF_PHYSICAL_ADDRESS_LH, *PIF_PHYSICAL_ADDRESS_LH; /* size: 0x0022 */

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef struct _IMAGE_NT_HEADERS64
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64; /* size: 0x0108 */

typedef struct _IMAGE_OPTIONAL_HEADER64
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned __int64 ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned __int64 SizeOfStackReserve;
  /* 0x0050 */ unsigned __int64 SizeOfStackCommit;
  /* 0x0058 */ unsigned __int64 SizeOfHeapReserve;
  /* 0x0060 */ unsigned __int64 SizeOfHeapCommit;
  /* 0x0068 */ unsigned long LoaderFlags;
  /* 0x006c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0070 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64; /* size: 0x00f0 */

typedef struct _INITIAL_PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET; /* size: 0x002c */

typedef struct _INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ void* InterfaceReference /* function */;
  /* 0x0018 */ void* InterfaceDereference /* function */;
} INTERFACE, *PINTERFACE; /* size: 0x0020 */

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef enum _INTERLOCKED_RESULT
{
  ResultNegative = 1,
  ResultZero = 0,
  ResultPositive = 2,
} INTERLOCKED_RESULT, *PINTERLOCKED_RESULT;

typedef enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef struct _IO_COMPLETION_CONTEXT
{
  /* 0x0000 */ void* Port;
  /* 0x0008 */ void* Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT; /* size: 0x0010 */

typedef struct _IO_DRIVER_CREATE_CONTEXT
{
  /* 0x0000 */ short Size;
  /* 0x0008 */ struct _ECP_LIST* ExtraCreateParameter;
  /* 0x0010 */ void* DeviceObjectHint;
  /* 0x0018 */ struct _TXN_PARAMETER_BLOCK* TxnParameters;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT; /* size: 0x0020 */

typedef struct _IO_INTERRUPT_MESSAGE_INFO
{
  /* 0x0000 */ unsigned char UnifiedIrql;
  /* 0x0004 */ unsigned long MessageCount;
  /* 0x0008 */ struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY MessageInfo[1];
} IO_INTERRUPT_MESSAGE_INFO, *PIO_INTERRUPT_MESSAGE_INFO; /* size: 0x0038 */

typedef struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY
{
  /* 0x0000 */ union _LARGE_INTEGER MessageAddress;
  /* 0x0008 */ unsigned __int64 TargetProcessorSet;
  /* 0x0010 */ struct _KINTERRUPT* InterruptObject;
  /* 0x0018 */ unsigned long MessageData;
  /* 0x001c */ unsigned long Vector;
  /* 0x0020 */ unsigned char Irql;
  /* 0x0024 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0028 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x002c */ long __PADDING__[1];
} IO_INTERRUPT_MESSAGE_INFO_ENTRY, *PIO_INTERRUPT_MESSAGE_INFO_ENTRY; /* size: 0x0030 */

typedef struct _IO_REMOVE_LOCK
{
  /* 0x0000 */ struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK; /* size: 0x0020 */

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  /* 0x0000 */ unsigned char Removed;
  /* 0x0001 */ unsigned char Reserved[3];
  /* 0x0004 */ long IoCount;
  /* 0x0008 */ struct _KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK; /* size: 0x0020 */

typedef struct _IO_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Option;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char ShareDisposition;
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short Spare2;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Port;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory;
      struct
      {
        /* 0x0008 */ unsigned long MinimumVector;
        /* 0x000c */ unsigned long MaximumVector;
        /* 0x0010 */ unsigned short AffinityPolicy;
        /* 0x0012 */ unsigned short Group;
        /* 0x0014 */ enum _IRQ_PRIORITY PriorityPolicy;
        /* 0x0018 */ unsigned __int64 TargetedProcessors;
      } /* size: 0x0018 */ Interrupt;
      struct
      {
        /* 0x0008 */ unsigned long MinimumChannel;
        /* 0x000c */ unsigned long MaximumChannel;
      } /* size: 0x0008 */ Dma;
      struct
      {
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved;
        /* 0x0010 */ unsigned long Channel;
        /* 0x0014 */ unsigned long TransferWidth;
      } /* size: 0x0010 */ DmaV3;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Generic;
      struct
      {
        /* 0x0008 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long MinBusNumber;
        /* 0x0010 */ unsigned long MaxBusNumber;
        /* 0x0014 */ unsigned long Reserved;
      } /* size: 0x0010 */ BusNumber;
      struct
      {
        /* 0x0008 */ unsigned long Priority;
        /* 0x000c */ unsigned long Reserved1;
        /* 0x0010 */ unsigned long Reserved2;
      } /* size: 0x000c */ ConfigData;
      struct
      {
        /* 0x0008 */ unsigned long Length40;
        /* 0x000c */ unsigned long Alignment40;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory40;
      struct
      {
        /* 0x0008 */ unsigned long Length48;
        /* 0x000c */ unsigned long Alignment48;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory48;
      struct
      {
        /* 0x0008 */ unsigned long Length64;
        /* 0x000c */ unsigned long Alignment64;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory64;
      struct
      {
        /* 0x0008 */ unsigned char Class;
        /* 0x0009 */ unsigned char Type;
        /* 0x000a */ unsigned char Reserved1;
        /* 0x000b */ unsigned char Reserved2;
        /* 0x000c */ unsigned long IdLowPart;
        /* 0x0010 */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _IO_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  /* 0x0000 */ unsigned long ListSize;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long SlotNumber;
  /* 0x0010 */ unsigned long Reserved[3];
  /* 0x001c */ unsigned long AlternativeLists;
  /* 0x0020 */ struct _IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST; /* size: 0x0048 */

typedef struct _IO_SECURITY_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0008 */ struct _ACCESS_STATE* AccessState;
  /* 0x0010 */ unsigned long DesiredAccess;
  /* 0x0014 */ unsigned long FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT; /* size: 0x0018 */

typedef struct _IO_STACK_LOCATION
{
  /* 0x0000 */ unsigned char MajorFunction;
  /* 0x0001 */ unsigned char MinorFunction;
  /* 0x0002 */ unsigned char Flags;
  /* 0x0003 */ unsigned char Control;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x0018 */ unsigned short FileAttributes;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0020 */ unsigned long EaLength;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ Create;
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x0018 */ unsigned short Reserved;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0020 */ struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0020 */ CreatePipe;
      struct
      {
        /* 0x0008 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0010 */ unsigned long Options;
        /* 0x0018 */ unsigned short Reserved;
        /* 0x001a */ unsigned short ShareAccess;
        /* 0x0020 */ struct _MAILSLOT_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0020 */ CreateMailslot;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0010 */ unsigned long Key;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ Read;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0010 */ unsigned long Key;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ Write;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0010 */ struct _UNICODE_STRING* FileName;
        /* 0x0018 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0020 */ unsigned long FileIndex;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ QueryDirectory;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0010 */ unsigned long CompletionFilter;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ NotifyDirectory;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0010 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryFile;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0010 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0018 */ struct _FILE_OBJECT* FileObject;
        union
        {
          struct
          {
            /* 0x0020 */ unsigned char ReplaceIfExists;
            /* 0x0021 */ unsigned char AdvanceOnly;
          }; /* size: 0x0002 */
          /* 0x0020 */ unsigned long ClusterCount;
          /* 0x0020 */ void* DeleteHandle;
        }; /* size: 0x0008 */
      } /* size: 0x0020 */ SetFile;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x0010 */ enum _FSINFOCLASS FsInformationClass;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryVolume;
      struct
      {
        /* 0x0008 */ unsigned long OutputBufferLength;
        /* 0x0010 */ unsigned long InputBufferLength;
        /* 0x0018 */ unsigned long FsControlCode;
        /* 0x0020 */ void* Type3InputBuffer;
      } /* size: 0x0020 */ FileSystemControl;
      struct
      {
        /* 0x0008 */ union _LARGE_INTEGER* Length;
        /* 0x0010 */ unsigned long Key;
        /* 0x0018 */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0018 */ LockControl;
      struct
      {
        /* 0x0008 */ unsigned long OutputBufferLength;
        /* 0x0010 */ unsigned long InputBufferLength;
        /* 0x0018 */ unsigned long IoControlCode;
        /* 0x0020 */ void* Type3InputBuffer;
      } /* size: 0x0020 */ DeviceIoControl;
      struct
      {
        /* 0x0008 */ unsigned long SecurityInformation;
        /* 0x0010 */ unsigned long Length;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QuerySecurity;
      struct
      {
        /* 0x0008 */ unsigned long SecurityInformation;
        /* 0x0010 */ void* SecurityDescriptor;
      } /* size: 0x0010 */ SetSecurity;
      struct
      {
        /* 0x0008 */ struct _VPB* Vpb;
        /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0010 */ MountVolume;
      struct
      {
        /* 0x0008 */ struct _VPB* Vpb;
        /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0010 */ VerifyVolume;
      struct
      {
        /* 0x0008 */ struct _SCSI_REQUEST_BLOCK* Srb;
      } /* size: 0x0008 */ Scsi;
      struct
      {
        /* 0x0008 */ enum _DEVICE_RELATION_TYPE Type;
      } /* size: 0x0004 */ QueryDeviceRelations;
      struct
      {
        /* 0x0008 */ const struct _GUID* InterfaceType;
        /* 0x0010 */ unsigned short Size;
        /* 0x0012 */ unsigned short Version;
        /* 0x0018 */ struct _INTERFACE* Interface;
        /* 0x0020 */ void* InterfaceSpecificData;
      } /* size: 0x0020 */ QueryInterface;
      struct
      {
        /* 0x0008 */ struct _DEVICE_CAPABILITIES* Capabilities;
      } /* size: 0x0008 */ DeviceCapabilities;
      struct
      {
        /* 0x0008 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;
      } /* size: 0x0008 */ FilterResourceRequirements;
      struct
      {
        /* 0x0008 */ unsigned long WhichSpace;
        /* 0x0010 */ void* Buffer;
        /* 0x0018 */ unsigned long Offset;
        /* 0x0020 */ unsigned long Length;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ ReadWriteConfig;
      struct
      {
        /* 0x0008 */ unsigned char Lock;
      } /* size: 0x0001 */ SetLock;
      struct
      {
        /* 0x0008 */ enum BUS_QUERY_ID_TYPE IdType;
      } /* size: 0x0004 */ QueryId;
      struct
      {
        /* 0x0008 */ enum DEVICE_TEXT_TYPE DeviceTextType;
        /* 0x0010 */ unsigned long LocaleId;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ QueryDeviceText;
      struct
      {
        /* 0x0008 */ unsigned char InPath;
        /* 0x0009 */ unsigned char Reserved[3];
        /* 0x0010 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
        /* 0x0014 */ long __PADDING__[1];
      } /* size: 0x0010 */ UsageNotification;
      struct
      {
        /* 0x0008 */ enum _SYSTEM_POWER_STATE PowerState;
      } /* size: 0x0004 */ WaitWake;
      struct
      {
        /* 0x0008 */ struct _POWER_SEQUENCE* PowerSequence;
      } /* size: 0x0008 */ PowerSequence;
      struct
      {
        union
        {
          /* 0x0008 */ unsigned long SystemContext;
          /* 0x0008 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
        }; /* size: 0x0004 */
        /* 0x0010 */ enum _POWER_STATE_TYPE Type;
        /* 0x0018 */ union _POWER_STATE State;
        /* 0x0020 */ enum POWER_ACTION ShutdownType;
        /* 0x0024 */ long __PADDING__[1];
      } /* size: 0x0020 */ Power;
      struct
      {
        /* 0x0008 */ struct _CM_RESOURCE_LIST* AllocatedResources;
        /* 0x0010 */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
      } /* size: 0x0010 */ StartDevice;
      struct
      {
        /* 0x0008 */ unsigned __int64 ProviderId;
        /* 0x0010 */ void* DataPath;
        /* 0x0018 */ unsigned long BufferSize;
        /* 0x0020 */ void* Buffer;
      } /* size: 0x0020 */ WMI;
      struct
      {
        /* 0x0008 */ void* Argument1;
        /* 0x0010 */ void* Argument2;
        /* 0x0018 */ void* Argument3;
        /* 0x0020 */ void* Argument4;
      } /* size: 0x0020 */ Others;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ Parameters;
  /* 0x0028 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0030 */ struct _FILE_OBJECT* FileObject;
  /* 0x0038 */ void* CompletionRoutine /* function */;
  /* 0x0040 */ void* Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION; /* size: 0x0048 */

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    /* 0x0000 */ long Status;
    /* 0x0000 */ void* Pointer;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; /* size: 0x0010 */

struct _IO_TIMER;

typedef struct _IPSEC_OFFLOAD_V2_ADD_SA
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _IPSEC_OFFLOAD_V2_ADD_SA* Next;
  /* 0x0010 */ unsigned long NumExtHdrs;
  /* 0x0014 */ unsigned long Flags;
  union
  {
    struct
    {
      /* 0x0018 */ unsigned long SrcAddr;
      /* 0x001c */ unsigned long DestAddr;
    } /* size: 0x0008 */ IPv4Endpoints;
    struct
    {
      /* 0x0018 */ unsigned char SrcAddr[16];
      /* 0x0028 */ unsigned char DestAddr[16];
    } /* size: 0x0020 */ IPv6Endpoints;
  }; /* size: 0x0020 */
  /* 0x0038 */ void* OffloadHandle;
  /* 0x0040 */ unsigned long UdpEspEncapsulation;
  /* 0x0044 */ struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION SecAssoc[2];
  /* 0x00a4 */ unsigned long KeyLength;
  /* 0x00a8 */ unsigned char KeyData[1];
  /* 0x00a9 */ char __PADDING__[7];
} IPSEC_OFFLOAD_V2_ADD_SA, *PIPSEC_OFFLOAD_V2_ADD_SA; /* size: 0x00b0 */

typedef struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO
{
  /* 0x0000 */ unsigned long Identifier;
  /* 0x0004 */ unsigned long KeyLength;
  /* 0x0008 */ unsigned long KeyOffsetBytes;
  /* 0x000c */ unsigned long AdditionalInfo;
} IPSEC_OFFLOAD_V2_ALGORITHM_INFO, *PIPSEC_OFFLOAD_V2_ALGORITHM_INFO; /* size: 0x0010 */

typedef struct _IPSEC_OFFLOAD_V2_DELETE_SA
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _IPSEC_OFFLOAD_V2_DELETE_SA* Next;
  /* 0x0010 */ void* OffloadHandle;
} IPSEC_OFFLOAD_V2_DELETE_SA, *PIPSEC_OFFLOAD_V2_DELETE_SA; /* size: 0x0018 */

typedef enum _IPSEC_OFFLOAD_V2_OPERATION
{
  IPsecOffloadV2Ah = 1,
  IPsecOffloadV2Esp = 2,
  IPsecOffloadV2Max = 3,
} IPSEC_OFFLOAD_V2_OPERATION, *PIPSEC_OFFLOAD_V2_OPERATION;

typedef struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
  /* 0x0008 */ unsigned long Spi;
  /* 0x000c */ struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO AuthenticationAlgorithm;
  /* 0x001c */ struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO EncryptionAlgorithm;
  /* 0x002c */ unsigned long SequenceNumberHighOrder;
} IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION, *PIPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION; /* size: 0x0030 */

typedef struct _IPSEC_OFFLOAD_V2_UPDATE_SA
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* OffloadHandle;
  /* 0x0010 */ enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
  /* 0x0014 */ unsigned long Spi;
  /* 0x0018 */ unsigned long SequenceNumberHighOrder;
  /* 0x001c */ long __PADDING__[1];
} IPSEC_OFFLOAD_V2_UPDATE_SA, *PIPSEC_OFFLOAD_V2_UPDATE_SA; /* size: 0x0020 */

typedef struct _IPV4_ARP_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char RemoteIPv4Address[4];
  /* 0x0008 */ unsigned char HostIPv4Address[4];
  /* 0x000c */ unsigned char MacAddress[6];
  /* 0x0012 */ char __PADDING__[2];
} IPV4_ARP_PARAMETERS, *PIPV4_ARP_PARAMETERS; /* size: 0x0014 */

typedef struct _IPV4_HEADER
{
  union
  {
    /* 0x0000 */ unsigned char VersionAndHeaderLength;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char HeaderLength : 4; /* bit position: 0 */
      /* 0x0000 */ unsigned char Version : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  union
  {
    /* 0x0001 */ unsigned char TypeOfServiceAndEcnField;
    struct /* bitfield */
    {
      /* 0x0001 */ unsigned char EcnField : 2; /* bit position: 0 */
      /* 0x0001 */ unsigned char TypeOfService : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0002 */ unsigned short TotalLength;
  /* 0x0004 */ unsigned short Identification;
  union
  {
    /* 0x0006 */ unsigned short FlagsAndOffset;
    struct /* bitfield */
    {
      /* 0x0006 */ unsigned short DontUse1 : 5; /* bit position: 0 */
      /* 0x0006 */ unsigned short MoreFragments : 1; /* bit position: 5 */
      /* 0x0006 */ unsigned short DontFragment : 1; /* bit position: 6 */
      /* 0x0006 */ unsigned short Reserved : 1; /* bit position: 7 */
      /* 0x0006 */ unsigned short DontUse2 : 8; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0008 */ unsigned char TimeToLive;
  /* 0x0009 */ unsigned char Protocol;
  /* 0x000a */ unsigned short HeaderChecksum;
  /* 0x000c */ struct in_addr SourceAddress;
  /* 0x0010 */ struct in_addr DestinationAddress;
} IPV4_HEADER, *PIPV4_HEADER; /* size: 0x0014 */

typedef struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char IPv4SourceAddress[4];
  /* 0x0008 */ unsigned char IPv4DestAddress[4];
  /* 0x000c */ unsigned short TCPSourcePortNumber;
  /* 0x000e */ unsigned short TCPDestPortNumber;
} IPV4_TCP_SYN_WOL_PACKET_PARAMETERS, *PIPV4_TCP_SYN_WOL_PACKET_PARAMETERS; /* size: 0x0010 */

typedef struct _IPV6_FRAGMENT_HEADER
{
  /* 0x0000 */ unsigned char NextHeader;
  /* 0x0001 */ unsigned char Reserved;
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned short DontUse1 : 8; /* bit position: 0 */
      /* 0x0002 */ unsigned short MoreFragments : 1; /* bit position: 8 */
      /* 0x0002 */ unsigned short ReservedBits : 2; /* bit position: 9 */
      /* 0x0002 */ unsigned short DontUse2 : 5; /* bit position: 11 */
    }; /* bitfield */
    /* 0x0002 */ unsigned short OffsetAndFlags;
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned int Id;
} IPV6_FRAGMENT_HEADER, *PIPV6_FRAGMENT_HEADER; /* size: 0x0008 */

typedef struct _IPV6_NS_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char RemoteIPv6Address[16];
  /* 0x0014 */ unsigned char SolicitedNodeIPv6Address[16];
  /* 0x0024 */ unsigned char MacAddress[6];
  /* 0x002a */ unsigned char TargetIPv6Addresses[16][2];
  /* 0x004a */ char __PADDING__[2];
} IPV6_NS_PARAMETERS, *PIPV6_NS_PARAMETERS; /* size: 0x004c */

typedef struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char IPv6SourceAddress[16];
  /* 0x0014 */ unsigned char IPv6DestAddress[16];
  /* 0x0024 */ unsigned short TCPSourcePortNumber;
  /* 0x0026 */ unsigned short TCPDestPortNumber;
} IPV6_TCP_SYN_WOL_PACKET_PARAMETERS, *PIPV6_TCP_SYN_WOL_PACKET_PARAMETERS; /* size: 0x0028 */

typedef struct _IP_OFFLOAD_STATS
{
  /* 0x0000 */ unsigned __int64 InReceives;
  /* 0x0008 */ unsigned __int64 InOctets;
  /* 0x0010 */ unsigned __int64 InDelivers;
  /* 0x0018 */ unsigned __int64 OutRequests;
  /* 0x0020 */ unsigned __int64 OutOctets;
  /* 0x0028 */ unsigned long InHeaderErrors;
  /* 0x002c */ unsigned long InTruncatedPackets;
  /* 0x0030 */ unsigned long InDiscards;
  /* 0x0034 */ unsigned long OutDiscards;
  /* 0x0038 */ unsigned long OutNoRoutes;
  /* 0x003c */ long __PADDING__[1];
} IP_OFFLOAD_STATS, *PIP_OFFLOAD_STATS; /* size: 0x0040 */

typedef struct _IRP
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short AllocationProcessorNumber;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ struct _MDL* MdlAddress;
  /* 0x0010 */ unsigned long Flags;
  union
  {
    union
    {
      /* 0x0018 */ struct _IRP* MasterIrp;
      /* 0x0018 */ long IrpCount;
      /* 0x0018 */ void* SystemBuffer;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ AssociatedIrp;
  /* 0x0020 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0030 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0040 */ char RequestorMode;
  /* 0x0041 */ unsigned char PendingReturned;
  /* 0x0042 */ char StackCount;
  /* 0x0043 */ char CurrentLocation;
  /* 0x0044 */ unsigned char Cancel;
  /* 0x0045 */ unsigned char CancelIrql;
  /* 0x0046 */ char ApcEnvironment;
  /* 0x0047 */ unsigned char AllocationFlags;
  /* 0x0048 */ struct _IO_STATUS_BLOCK* UserIosb;
  /* 0x0050 */ struct _KEVENT* UserEvent;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0058 */ void* UserApcRoutine /* function */;
          /* 0x0058 */ void* IssuingProcess;
        }; /* size: 0x0008 */
        /* 0x0060 */ void* UserApcContext;
      } /* size: 0x0010 */ AsynchronousParameters;
      /* 0x0058 */ union _LARGE_INTEGER AllocationSize;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Overlay;
  /* 0x0068 */ void* CancelRoutine /* function */;
  /* 0x0070 */ void* UserBuffer;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0078 */ struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
          /* 0x0078 */ void* DriverContext[4];
        }; /* size: 0x0020 */
        /* 0x0098 */ struct _ETHREAD* Thread;
        /* 0x00a0 */ char* AuxiliaryBuffer;
        /* 0x00a8 */ struct _LIST_ENTRY ListEntry;
        union
        {
          /* 0x00b8 */ struct _IO_STACK_LOCATION* CurrentStackLocation;
          /* 0x00b8 */ unsigned long PacketType;
        }; /* size: 0x0008 */
        /* 0x00c0 */ struct _FILE_OBJECT* OriginalFileObject;
        /* 0x00c8 */ void* IrpExtension;
      } /* size: 0x0058 */ Overlay;
      /* 0x0078 */ struct _KAPC Apc;
      /* 0x0078 */ void* CompletionKey;
    }; /* size: 0x0058 */
  } /* size: 0x0058 */ Tail;
} IRP, *PIRP; /* size: 0x00d0 */

typedef enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
} IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectWakeInformation = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectClearEvent = 25,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  JobObjectReserved8Information = 25,
  MaxJobObjectInfoClass = 26,
} JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef struct _KAPC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char SpareByte0;
  /* 0x0002 */ unsigned char Size;
  /* 0x0003 */ unsigned char SpareByte1;
  /* 0x0004 */ unsigned long SpareLong0;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x0010 */ struct _LIST_ENTRY ApcListEntry;
  union
  {
    struct
    {
      /* 0x0020 */ void* KernelRoutine /* function */;
      /* 0x0028 */ void* RundownRoutine /* function */;
      /* 0x0030 */ void* NormalRoutine /* function */;
    }; /* size: 0x0018 */
    /* 0x0020 */ void* Reserved[3];
  }; /* size: 0x0018 */
  /* 0x0038 */ void* NormalContext;
  /* 0x0040 */ void* SystemArgument1;
  /* 0x0048 */ void* SystemArgument2;
  /* 0x0050 */ char ApcStateIndex;
  /* 0x0051 */ char ApcMode;
  /* 0x0052 */ unsigned char Inserted;
  /* 0x0053 */ char __PADDING__[5];
} KAPC, *PKAPC; /* size: 0x0058 */

typedef struct _KBUGCHECK_CALLBACK_RECORD
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ void* CallbackRoutine /* function */;
  /* 0x0018 */ void* Buffer;
  /* 0x0020 */ unsigned long Length;
  /* 0x0028 */ unsigned char* Component;
  /* 0x0030 */ unsigned __int64 Checksum;
  /* 0x0038 */ unsigned char State;
  /* 0x0039 */ char __PADDING__[7];
} KBUGCHECK_CALLBACK_RECORD, *PKBUGCHECK_CALLBACK_RECORD; /* size: 0x0040 */

typedef struct _KDESCRIPTOR
{
  /* 0x0000 */ unsigned short Pad[3];
  /* 0x0006 */ unsigned short Limit;
  /* 0x0008 */ void* Base;
} KDESCRIPTOR, *PKDESCRIPTOR; /* size: 0x0010 */

typedef struct _KDEVICE_QUEUE
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0008 */ struct _LIST_ENTRY DeviceListHead;
  /* 0x0018 */ unsigned __int64 Lock;
  union
  {
    /* 0x0020 */ unsigned char Busy;
    struct /* bitfield */
    {
      /* 0x0020 */ __int64 Reserved : 8; /* bit position: 0 */
      /* 0x0020 */ __int64 Hint : 56; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} KDEVICE_QUEUE, *PKDEVICE_QUEUE; /* size: 0x0028 */

typedef struct _KDEVICE_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceListEntry;
  /* 0x0010 */ unsigned long SortKey;
  /* 0x0014 */ unsigned char Inserted;
  /* 0x0015 */ char __PADDING__[3];
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY; /* size: 0x0018 */

typedef struct _KDPC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Importance;
  /* 0x0002 */ volatile unsigned short Number;
  /* 0x0008 */ struct _LIST_ENTRY DpcListEntry;
  /* 0x0018 */ void* DeferredRoutine /* function */;
  /* 0x0020 */ void* DeferredContext;
  /* 0x0028 */ void* SystemArgument1;
  /* 0x0030 */ void* SystemArgument2;
  /* 0x0038 */ void* DpcData;
} KDPC, *PKDPC; /* size: 0x0040 */

typedef struct _KEVENT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; /* size: 0x0018 */

typedef struct _KFLOATING_SAVE
{
  /* 0x0000 */ unsigned long Dummy;
} KFLOATING_SAVE, *PKFLOATING_SAVE; /* size: 0x0004 */

typedef union _KGDTENTRY64
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short LimitLow;
      /* 0x0002 */ unsigned short BaseLow;
      union
      {
        struct
        {
          /* 0x0004 */ unsigned char BaseMiddle;
          /* 0x0005 */ unsigned char Flags1;
          /* 0x0006 */ unsigned char Flags2;
          /* 0x0007 */ unsigned char BaseHigh;
        } /* size: 0x0004 */ Bytes;
        struct
        {
          struct
          {
            struct /* bitfield */
            {
              /* 0x0004 */ unsigned long BaseMiddle : 8; /* bit position: 0 */
              /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
              /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
              /* 0x0004 */ unsigned long Present : 1; /* bit position: 15 */
              /* 0x0004 */ unsigned long LimitHigh : 4; /* bit position: 16 */
              /* 0x0004 */ unsigned long System : 1; /* bit position: 20 */
              /* 0x0004 */ unsigned long LongMode : 1; /* bit position: 21 */
              /* 0x0004 */ unsigned long DefaultBig : 1; /* bit position: 22 */
              /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
              /* 0x0004 */ unsigned long BaseHigh : 8; /* bit position: 24 */
            }; /* bitfield */
          } /* size: 0x0004 */ Bits;
          /* 0x0008 */ unsigned long BaseUpper;
          /* 0x000c */ unsigned long MustBeZero;
        }; /* size: 0x000c */
      }; /* size: 0x000c */
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0000 */ __int64 DataLow;
      /* 0x0008 */ __int64 DataHigh;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} KGDTENTRY64, *PKGDTENTRY64; /* size: 0x0010 */

typedef union _KIDTENTRY64
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short OffsetLow;
      /* 0x0002 */ unsigned short Selector;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned short IstIndex : 3; /* bit position: 0 */
        /* 0x0004 */ unsigned short Reserved0 : 5; /* bit position: 3 */
        /* 0x0004 */ unsigned short Type : 5; /* bit position: 8 */
        /* 0x0004 */ unsigned short Dpl : 2; /* bit position: 13 */
        /* 0x0004 */ unsigned short Present : 1; /* bit position: 15 */
      }; /* bitfield */
      /* 0x0006 */ unsigned short OffsetMiddle;
      /* 0x0008 */ unsigned long OffsetHigh;
      /* 0x000c */ unsigned long Reserved1;
    }; /* size: 0x0010 */
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0010 */
} KIDTENTRY64, *PKIDTENTRY64; /* size: 0x0010 */

struct _KINTERRUPT;

typedef enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
} KINTERRUPT_MODE, *PKINTERRUPT_MODE;

typedef enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef struct _KMUTANT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ struct _LIST_ENTRY MutantListEntry;
  /* 0x0028 */ struct _KTHREAD* OwnerThread;
  /* 0x0030 */ unsigned char Abandoned;
  /* 0x0031 */ unsigned char ApcDisable;
  /* 0x0032 */ char __PADDING__[6];
} KMUTANT, *PKMUTANT; /* size: 0x0038 */

typedef struct _KPCR
{
  union
  {
    /* 0x0000 */ struct _NT_TIB NtTib;
    struct
    {
      /* 0x0000 */ union _KGDTENTRY64* GdtBase;
      /* 0x0008 */ struct _KTSS64* TssBase;
      /* 0x0010 */ unsigned __int64 UserRsp;
      /* 0x0018 */ struct _KPCR* Self;
      /* 0x0020 */ struct _KPRCB* CurrentPrcb;
      /* 0x0028 */ struct _KSPIN_LOCK_QUEUE* LockArray;
      /* 0x0030 */ void* Used_Self;
    }; /* size: 0x0038 */
  }; /* size: 0x0038 */
  /* 0x0038 */ union _KIDTENTRY64* IdtBase;
  /* 0x0040 */ unsigned __int64 Unused[2];
  /* 0x0050 */ unsigned char Irql;
  /* 0x0051 */ unsigned char SecondLevelCacheAssociativity;
  /* 0x0052 */ unsigned char ObsoleteNumber;
  /* 0x0053 */ unsigned char Fill0;
  /* 0x0054 */ unsigned long Unused0[3];
  /* 0x0060 */ unsigned short MajorVersion;
  /* 0x0062 */ unsigned short MinorVersion;
  /* 0x0064 */ unsigned long StallScaleFactor;
  /* 0x0068 */ void* Unused1[3];
  /* 0x0080 */ unsigned long KernelReserved[15];
  /* 0x00bc */ unsigned long SecondLevelCacheSize;
  /* 0x00c0 */ unsigned long HalReserved[16];
  /* 0x0100 */ unsigned long Unused2;
  /* 0x0108 */ void* KdVersionBlock;
  /* 0x0110 */ void* Unused3;
  /* 0x0118 */ unsigned long PcrAlign1[24];
  /* 0x0180 */ struct _KPRCB Prcb;
} KPCR, *PKPCR; /* size: 0x07f0 */

typedef struct _KPRCB
{
  /* 0x0000 */ unsigned long MxCsr;
  /* 0x0004 */ unsigned char LegacyNumber;
  /* 0x0005 */ unsigned char ReservedMustBeZero;
  /* 0x0006 */ unsigned char InterruptRequest;
  /* 0x0007 */ unsigned char IdleHalt;
  /* 0x0008 */ struct _KTHREAD* CurrentThread;
  /* 0x0010 */ struct _KTHREAD* NextThread;
  /* 0x0018 */ struct _KTHREAD* IdleThread;
  /* 0x0020 */ unsigned char NestingLevel;
  /* 0x0021 */ unsigned char ClockOwner;
  /* 0x0022 */ unsigned char PendingTick;
  /* 0x0023 */ unsigned char PrcbPad00[1];
  /* 0x0024 */ unsigned long Number;
  /* 0x0028 */ unsigned __int64 RspBase;
  /* 0x0030 */ unsigned __int64 PrcbLock;
  /* 0x0038 */ unsigned __int64 PrcbPad01;
  /* 0x0040 */ struct _KPROCESSOR_STATE ProcessorState;
  /* 0x05f0 */ char CpuType;
  /* 0x05f1 */ char CpuID;
  union
  {
    /* 0x05f2 */ unsigned short CpuStep;
    struct
    {
      /* 0x05f2 */ unsigned char CpuStepping;
      /* 0x05f3 */ unsigned char CpuModel;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x05f4 */ unsigned long MHz;
  /* 0x05f8 */ unsigned __int64 HalReserved[8];
  /* 0x0638 */ unsigned short MinorVersion;
  /* 0x063a */ unsigned short MajorVersion;
  /* 0x063c */ unsigned char BuildType;
  /* 0x063d */ unsigned char CpuVendor;
  /* 0x063e */ unsigned char CoresPerPhysicalProcessor;
  /* 0x063f */ unsigned char LogicalProcessorsPerCore;
  /* 0x0640 */ unsigned long ApicMask;
  /* 0x0644 */ unsigned long CFlushSize;
  /* 0x0648 */ void* AcpiReserved;
  /* 0x0650 */ unsigned long InitialApicId;
  /* 0x0654 */ unsigned long Stride;
  /* 0x0658 */ unsigned short Group;
  /* 0x0660 */ unsigned __int64 GroupSetMember;
  /* 0x0668 */ unsigned char GroupIndex;
  /* 0x0669 */ char __PADDING__[7];
} KPRCB, *PKPRCB; /* size: 0x0670 */

struct _KPROCESS;

typedef struct _KPROCESSOR_STATE
{
  /* 0x0000 */ struct _KSPECIAL_REGISTERS SpecialRegisters;
  /* 0x00e0 */ struct _CONTEXT ContextFrame;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE; /* size: 0x05b0 */

typedef struct _KSALLOCATOR_DISPATCH
{
  /* 0x0000 */ void* InitializeAllocator /* function */;
  /* 0x0008 */ void* DeleteAllocator /* function */;
  /* 0x0010 */ void* Allocate /* function */;
  /* 0x0018 */ void* Free /* function */;
} KSALLOCATOR_DISPATCH, *PKSALLOCATOR_DISPATCH; /* size: 0x0020 */

typedef struct _KSCLOCK_DISPATCH
{
  /* 0x0000 */ void* SetTimer /* function */;
  /* 0x0008 */ void* CancelTimer /* function */;
  /* 0x0010 */ void* CorrelatedTime /* function */;
  /* 0x0018 */ void* Resolution /* function */;
} KSCLOCK_DISPATCH, *PKSCLOCK_DISPATCH; /* size: 0x0020 */

typedef struct _KSDEVICE
{
  /* 0x0000 */ const struct _KSDEVICE_DESCRIPTOR* Descriptor;
  /* 0x0008 */ void* Bag;
  /* 0x0010 */ void* Context;
  /* 0x0018 */ struct _DEVICE_OBJECT* FunctionalDeviceObject;
  /* 0x0020 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0028 */ struct _DEVICE_OBJECT* NextDeviceObject;
  /* 0x0030 */ unsigned char Started;
  /* 0x0034 */ enum _SYSTEM_POWER_STATE SystemPowerState;
  /* 0x0038 */ enum _DEVICE_POWER_STATE DevicePowerState;
  /* 0x003c */ long __PADDING__[1];
} KSDEVICE, *PKSDEVICE; /* size: 0x0040 */

typedef struct _KSDEVICE_DESCRIPTOR
{
  /* 0x0000 */ const struct _KSDEVICE_DISPATCH* Dispatch;
  /* 0x0008 */ unsigned long FilterDescriptorsCount;
  /* 0x0010 */ const struct _KSFILTER_DESCRIPTOR* const* FilterDescriptors;
  /* 0x0018 */ unsigned long Version;
  /* 0x001c */ unsigned long Flags;
} KSDEVICE_DESCRIPTOR, *PKSDEVICE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _KSDEVICE_DISPATCH
{
  /* 0x0000 */ void* Add /* function */;
  /* 0x0008 */ void* Start /* function */;
  /* 0x0010 */ void* PostStart /* function */;
  /* 0x0018 */ void* QueryStop /* function */;
  /* 0x0020 */ void* CancelStop /* function */;
  /* 0x0028 */ void* Stop /* function */;
  /* 0x0030 */ void* QueryRemove /* function */;
  /* 0x0038 */ void* CancelRemove /* function */;
  /* 0x0040 */ void* Remove /* function */;
  /* 0x0048 */ void* QueryCapabilities /* function */;
  /* 0x0050 */ void* SurpriseRemoval /* function */;
  /* 0x0058 */ void* QueryPower /* function */;
  /* 0x0060 */ void* SetPower /* function */;
  /* 0x0068 */ void* QueryInterface /* function */;
} KSDEVICE_DISPATCH, *PKSDEVICE_DISPATCH; /* size: 0x0070 */

typedef struct _KSEMAPHORE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ long Limit;
  /* 0x001c */ long __PADDING__[1];
} KSEMAPHORE, *PKSEMAPHORE; /* size: 0x0020 */

typedef struct _KSEVENT_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ void* Object;
  union
  {
    /* 0x0018 */ struct KSDPC_ITEM* DpcItem;
    /* 0x0018 */ struct KSBUFFER_ITEM* BufferItem;
  }; /* size: 0x0008 */
  /* 0x0020 */ struct KSEVENTDATA* EventData;
  /* 0x0028 */ unsigned long NotificationType;
  /* 0x0030 */ const struct KSEVENT_SET* EventSet;
  /* 0x0038 */ const struct KSEVENT_ITEM* EventItem;
  /* 0x0040 */ struct _FILE_OBJECT* FileObject;
  /* 0x0048 */ unsigned long SemaphoreAdjustment;
  /* 0x004c */ unsigned long Reserved;
  /* 0x0050 */ unsigned long Flags;
  /* 0x0054 */ long __PADDING__[1];
} KSEVENT_ENTRY, *PKSEVENT_ENTRY; /* size: 0x0058 */

typedef struct _KSFILTER
{
  /* 0x0000 */ const struct _KSFILTER_DESCRIPTOR* Descriptor;
  /* 0x0008 */ void* Bag;
  /* 0x0010 */ void* Context;
} KSFILTER, *PKSFILTER; /* size: 0x0018 */

typedef struct _KSFILTERFACTORY
{
  /* 0x0000 */ const struct _KSFILTER_DESCRIPTOR* FilterDescriptor;
  /* 0x0008 */ void* Bag;
  /* 0x0010 */ void* Context;
} KSFILTERFACTORY, *PKSFILTERFACTORY; /* size: 0x0018 */

typedef struct _KSFILTER_DESCRIPTOR
{
  /* 0x0000 */ const struct _KSFILTER_DISPATCH* Dispatch;
  /* 0x0008 */ const struct KSAUTOMATION_TABLE_* AutomationTable;
  /* 0x0010 */ unsigned long Version;
  /* 0x0014 */ unsigned long Flags;
  /* 0x0018 */ const struct _GUID* ReferenceGuid;
  /* 0x0020 */ unsigned long PinDescriptorsCount;
  /* 0x0024 */ unsigned long PinDescriptorSize;
  /* 0x0028 */ const struct _KSPIN_DESCRIPTOR_EX* PinDescriptors;
  /* 0x0030 */ unsigned long CategoriesCount;
  /* 0x0038 */ const struct _GUID* Categories;
  /* 0x0040 */ unsigned long NodeDescriptorsCount;
  /* 0x0044 */ unsigned long NodeDescriptorSize;
  /* 0x0048 */ const struct _KSNODE_DESCRIPTOR* NodeDescriptors;
  /* 0x0050 */ unsigned long ConnectionsCount;
  /* 0x0058 */ const struct KSTOPOLOGY_CONNECTION* Connections;
  /* 0x0060 */ const struct KSCOMPONENTID* ComponentId;
} KSFILTER_DESCRIPTOR, *PKSFILTER_DESCRIPTOR; /* size: 0x0068 */

typedef struct _KSFILTER_DISPATCH
{
  /* 0x0000 */ void* Create /* function */;
  /* 0x0008 */ void* Close /* function */;
  /* 0x0010 */ void* Process /* function */;
  /* 0x0018 */ void* Reset /* function */;
} KSFILTER_DISPATCH, *PKSFILTER_DISPATCH; /* size: 0x0020 */

typedef struct _KSGATE
{
  /* 0x0000 */ long Count;
  /* 0x0008 */ struct _KSGATE* NextGate;
} KSGATE, *PKSGATE; /* size: 0x0010 */

typedef struct _KSMAPPING
{
  /* 0x0000 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0008 */ unsigned long ByteCount;
  /* 0x000c */ unsigned long Alignment;
} KSMAPPING, *PKSMAPPING; /* size: 0x0010 */

typedef struct _KSNODE_DESCRIPTOR
{
  /* 0x0000 */ const struct KSAUTOMATION_TABLE_* AutomationTable;
  /* 0x0008 */ const struct _GUID* Type;
  /* 0x0010 */ const struct _GUID* Name;
} KSNODE_DESCRIPTOR, *PKSNODE_DESCRIPTOR; /* size: 0x0018 */

typedef struct _KSPECIAL_REGISTERS
{
  /* 0x0000 */ unsigned __int64 Cr0;
  /* 0x0008 */ unsigned __int64 Cr2;
  /* 0x0010 */ unsigned __int64 Cr3;
  /* 0x0018 */ unsigned __int64 Cr4;
  /* 0x0020 */ unsigned __int64 KernelDr0;
  /* 0x0028 */ unsigned __int64 KernelDr1;
  /* 0x0030 */ unsigned __int64 KernelDr2;
  /* 0x0038 */ unsigned __int64 KernelDr3;
  /* 0x0040 */ unsigned __int64 KernelDr6;
  /* 0x0048 */ unsigned __int64 KernelDr7;
  /* 0x0050 */ struct _KDESCRIPTOR Gdtr;
  /* 0x0060 */ struct _KDESCRIPTOR Idtr;
  /* 0x0070 */ unsigned short Tr;
  /* 0x0072 */ unsigned short Ldtr;
  /* 0x0074 */ unsigned long MxCsr;
  /* 0x0078 */ unsigned __int64 DebugControl;
  /* 0x0080 */ unsigned __int64 LastBranchToRip;
  /* 0x0088 */ unsigned __int64 LastBranchFromRip;
  /* 0x0090 */ unsigned __int64 LastExceptionToRip;
  /* 0x0098 */ unsigned __int64 LastExceptionFromRip;
  /* 0x00a0 */ unsigned __int64 Cr8;
  /* 0x00a8 */ unsigned __int64 MsrGsBase;
  /* 0x00b0 */ unsigned __int64 MsrGsSwap;
  /* 0x00b8 */ unsigned __int64 MsrStar;
  /* 0x00c0 */ unsigned __int64 MsrLStar;
  /* 0x00c8 */ unsigned __int64 MsrCStar;
  /* 0x00d0 */ unsigned __int64 MsrSyscallMask;
  /* 0x00d8 */ unsigned __int64 Xcr0;
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS; /* size: 0x00e0 */

typedef struct _KSPIN
{
  /* 0x0000 */ const struct _KSPIN_DESCRIPTOR_EX* Descriptor;
  /* 0x0008 */ void* Bag;
  /* 0x0010 */ void* Context;
  /* 0x0018 */ unsigned long Id;
  /* 0x001c */ enum KSPIN_COMMUNICATION Communication;
  /* 0x0020 */ unsigned char ConnectionIsExternal;
  /* 0x0028 */ struct KSIDENTIFIER ConnectionInterface;
  /* 0x0040 */ struct KSIDENTIFIER ConnectionMedium;
  /* 0x0058 */ struct KSPRIORITY ConnectionPriority;
  /* 0x0060 */ union KSDATAFORMAT* ConnectionFormat;
  /* 0x0068 */ struct KSMULTIPLE_ITEM* AttributeList;
  /* 0x0070 */ unsigned long StreamHeaderSize;
  /* 0x0074 */ enum KSPIN_DATAFLOW DataFlow;
  /* 0x0078 */ enum KSSTATE DeviceState;
  /* 0x007c */ enum KSRESET ResetState;
  /* 0x0080 */ enum KSSTATE ClientState;
  /* 0x0084 */ long __PADDING__[1];
} KSPIN, *PKSPIN; /* size: 0x0088 */

typedef struct _KSPIN_DESCRIPTOR_EX
{
  /* 0x0000 */ const struct _KSPIN_DISPATCH* Dispatch;
  /* 0x0008 */ const struct KSAUTOMATION_TABLE_* AutomationTable;
  /* 0x0010 */ struct KSPIN_DESCRIPTOR PinDescriptor;
  /* 0x0068 */ unsigned long Flags;
  /* 0x006c */ unsigned long InstancesPossible;
  /* 0x0070 */ unsigned long InstancesNecessary;
  /* 0x0078 */ const struct KSALLOCATOR_FRAMING_EX* AllocatorFraming;
  /* 0x0080 */ void* IntersectHandler /* function */;
} KSPIN_DESCRIPTOR_EX, *PKSPIN_DESCRIPTOR_EX; /* size: 0x0088 */

typedef struct _KSPIN_DISPATCH
{
  /* 0x0000 */ void* Create /* function */;
  /* 0x0008 */ void* Close /* function */;
  /* 0x0010 */ void* Process /* function */;
  /* 0x0018 */ void* Reset /* function */;
  /* 0x0020 */ void* SetDataFormat /* function */;
  /* 0x0028 */ void* SetDeviceState /* function */;
  /* 0x0030 */ void* Connect /* function */;
  /* 0x0038 */ void* Disconnect /* function */;
  /* 0x0040 */ const struct _KSCLOCK_DISPATCH* Clock;
  /* 0x0048 */ const struct _KSALLOCATOR_DISPATCH* Allocator;
} KSPIN_DISPATCH, *PKSPIN_DISPATCH; /* size: 0x0050 */

typedef struct _KSPIN_LOCK_QUEUE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE* volatile Next;
  /* 0x0008 */ unsigned __int64* volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE; /* size: 0x0010 */

typedef struct _KSPROCESSPIN
{
  /* 0x0000 */ struct _KSPIN* Pin;
  /* 0x0008 */ struct _KSSTREAM_POINTER* StreamPointer;
  /* 0x0010 */ struct _KSPROCESSPIN* InPlaceCounterpart;
  /* 0x0018 */ struct _KSPROCESSPIN* DelegateBranch;
  /* 0x0020 */ struct _KSPROCESSPIN* CopySource;
  /* 0x0028 */ void* Data;
  /* 0x0030 */ unsigned long BytesAvailable;
  /* 0x0034 */ unsigned long BytesUsed;
  /* 0x0038 */ unsigned long Flags;
  /* 0x003c */ unsigned char Terminate;
  /* 0x003d */ char __PADDING__[3];
} KSPROCESSPIN, *PKSPROCESSPIN; /* size: 0x0040 */

typedef struct _KSPROCESSPIN_INDEXENTRY
{
  /* 0x0000 */ struct _KSPROCESSPIN** Pins;
  /* 0x0008 */ unsigned long Count;
  /* 0x000c */ long __PADDING__[1];
} KSPROCESSPIN_INDEXENTRY, *PKSPROCESSPIN_INDEXENTRY; /* size: 0x0010 */

typedef struct _KSSTREAM_POINTER
{
  /* 0x0000 */ void* Context;
  /* 0x0008 */ struct _KSPIN* Pin;
  /* 0x0010 */ struct KSSTREAM_HEADER* StreamHeader;
  /* 0x0018 */ struct _KSSTREAM_POINTER_OFFSET* Offset;
  /* 0x0020 */ struct _KSSTREAM_POINTER_OFFSET OffsetIn;
  /* 0x0030 */ struct _KSSTREAM_POINTER_OFFSET OffsetOut;
} KSSTREAM_POINTER, *PKSSTREAM_POINTER; /* size: 0x0040 */

typedef struct _KSSTREAM_POINTER_OFFSET
{
  union
  {
    /* 0x0000 */ unsigned char* Data;
    /* 0x0000 */ struct _KSMAPPING* Mappings;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned long Count;
  /* 0x000c */ unsigned long Remaining;
} KSSTREAM_POINTER_OFFSET, *PKSSTREAM_POINTER_OFFSET; /* size: 0x0010 */

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

struct _KTHREAD;

typedef struct _KTIMER
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0018 */ union _ULARGE_INTEGER DueTime;
  /* 0x0020 */ struct _LIST_ENTRY TimerListEntry;
  /* 0x0030 */ struct _KDPC* Dpc;
  /* 0x0038 */ unsigned long Processor;
  /* 0x003c */ unsigned long Period;
} KTIMER, *PKTIMER; /* size: 0x0040 */

typedef struct _KTSS64
{
  /* 0x0000 */ unsigned long Reserved0;
  /* 0x0004 */ unsigned __int64 Rsp0;
  /* 0x000c */ unsigned __int64 Rsp1;
  /* 0x0014 */ unsigned __int64 Rsp2;
  /* 0x001c */ unsigned __int64 Ist[8];
  /* 0x005c */ unsigned __int64 Reserved1;
  /* 0x0064 */ unsigned short Reserved2;
  /* 0x0066 */ unsigned short IoMapBase;
} KTSS64, *PKTSS64; /* size: 0x0068 */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long AitSamplingValue;
  /* 0x024c */ unsigned long AppCompatFlag;
  /* 0x0250 */ unsigned __int64 RNGSeedVersion;
  /* 0x0258 */ unsigned long GlobalValidationRunlevel;
  /* 0x025c */ volatile long TimeZoneBiasStamp;
  /* 0x0260 */ unsigned long Reserved2;
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ unsigned char Reserved0[1];
  /* 0x026a */ unsigned short NativeProcessorArchitecture;
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ unsigned long AltArchitecturePad[1];
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  union
  {
    /* 0x02d5 */ unsigned char MitigationPolicies;
    struct /* bitfield */
    {
      /* 0x02d5 */ unsigned char NXSupportPolicy : 2; /* bit position: 0 */
      /* 0x02d5 */ unsigned char SEHValidationPolicy : 2; /* bit position: 2 */
      /* 0x02d5 */ unsigned char CurDirDevicesSkippedForDlls : 2; /* bit position: 4 */
      /* 0x02d5 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x02d6 */ unsigned char Reserved6[2];
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ unsigned char Reserved12[3];
  union
  {
    /* 0x02f0 */ unsigned long SharedDataFlags;
    struct /* bitfield */
    {
      /* 0x02f0 */ unsigned long DbgErrorPortPresent : 1; /* bit position: 0 */
      /* 0x02f0 */ unsigned long DbgElevationEnabled : 1; /* bit position: 1 */
      /* 0x02f0 */ unsigned long DbgVirtEnabled : 1; /* bit position: 2 */
      /* 0x02f0 */ unsigned long DbgInstallerDetectEnabled : 1; /* bit position: 3 */
      /* 0x02f0 */ unsigned long DbgLkgEnabled : 1; /* bit position: 4 */
      /* 0x02f0 */ unsigned long DbgDynProcessorEnabled : 1; /* bit position: 5 */
      /* 0x02f0 */ unsigned long DbgConsoleBrokerEnabled : 1; /* bit position: 6 */
      /* 0x02f0 */ unsigned long DbgSecureBootEnabled : 1; /* bit position: 7 */
      /* 0x02f0 */ unsigned long SpareBits : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02f4 */ unsigned long DataFlagsPad[1];
  /* 0x02f8 */ unsigned __int64 TestRetInstruction;
  /* 0x0300 */ __int64 QpcFrequency;
  /* 0x0308 */ unsigned __int64 SystemCallPad[3];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
    /* 0x0320 */ unsigned long ReservedTickCountOverlay[3];
  }; /* size: 0x000c */
  /* 0x032c */ unsigned long TickCountPad[1];
  /* 0x0330 */ unsigned long Cookie;
  /* 0x0334 */ unsigned long CookiePad[1];
  /* 0x0338 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0340 */ volatile unsigned __int64 TimeUpdateSequence;
  /* 0x0348 */ unsigned __int64 BaselineSystemTimeQpc;
  /* 0x0350 */ unsigned __int64 BaselineInterruptTimeQpc;
  /* 0x0358 */ unsigned __int64 QpcSystemTimeIncrement;
  /* 0x0360 */ unsigned __int64 QpcInterruptTimeIncrement;
  /* 0x0368 */ unsigned long QpcSystemTimeIncrement32;
  /* 0x036c */ unsigned long QpcInterruptTimeIncrement32;
  /* 0x0370 */ unsigned char QpcSystemTimeIncrementShift;
  /* 0x0371 */ unsigned char QpcInterruptTimeIncrementShift;
  /* 0x0372 */ unsigned char Reserved8[14];
  /* 0x0380 */ unsigned short UserModeGlobalLogger[16];
  /* 0x03a0 */ unsigned long ImageFileExecutionOptions;
  /* 0x03a4 */ unsigned long LangGenerationCount;
  /* 0x03a8 */ unsigned __int64 Reserved4;
  /* 0x03b0 */ volatile unsigned __int64 InterruptTimeBias;
  /* 0x03b8 */ volatile unsigned __int64 TscQpcBias;
  /* 0x03c0 */ volatile unsigned long ActiveProcessorCount;
  /* 0x03c4 */ volatile unsigned char ActiveGroupCount;
  /* 0x03c5 */ unsigned char Reserved9;
  union
  {
    /* 0x03c6 */ unsigned short TscQpcData;
    struct
    {
      /* 0x03c6 */ volatile unsigned char TscQpcEnabled;
      /* 0x03c7 */ unsigned char TscQpcShift;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x03c8 */ union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  /* 0x03d0 */ union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  /* 0x03d8 */ struct _XSTATE_CONFIGURATION XState;
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x05f0 */

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0008 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0010 */

typedef struct _LOCK_STATE
{
  /* 0x0000 */ unsigned short LockState;
  /* 0x0002 */ unsigned char OldIrql;
  /* 0x0003 */ char __PADDING__[1];
} LOCK_STATE, *PLOCK_STATE; /* size: 0x0004 */

typedef struct _LOCK_STATE_EX
{
  /* 0x0000 */ unsigned char OldIrql;
  /* 0x0001 */ unsigned char LockState;
  /* 0x0002 */ unsigned char Flags;
} LOCK_STATE_EX, *PLOCK_STATE_EX; /* size: 0x0003 */

typedef struct _LOOKASIDE_LIST_EX
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX; /* size: 0x0060 */

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _M128A
{
  /* 0x0000 */ unsigned __int64 Low;
  /* 0x0008 */ __int64 High;
} M128A, *PM128A; /* size: 0x0010 */

typedef struct _MAILSLOT_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long MailslotQuota;
  /* 0x0004 */ unsigned long MaximumMessageSize;
  /* 0x0008 */ union _LARGE_INTEGER ReadTimeout;
  /* 0x0010 */ unsigned char TimeoutSpecified;
  /* 0x0011 */ char __PADDING__[7];
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS; /* size: 0x0018 */

typedef struct _MAP_REGISTER_ENTRY
{
  /* 0x0000 */ void* MapRegister;
  /* 0x0008 */ unsigned char WriteToDevice;
  /* 0x0009 */ char __PADDING__[7];
} MAP_REGISTER_ENTRY, *PMAP_REGISTER_ENTRY; /* size: 0x0010 */

typedef struct _MCGEN_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 RegistrationHandle;
  /* 0x0008 */ unsigned __int64 Logger;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long IsEnabled;
  /* 0x0028 */ unsigned char Level;
  /* 0x0029 */ unsigned char Reserve;
  /* 0x002a */ unsigned short EnableBitsCount;
  /* 0x0030 */ unsigned long* EnableBitMask;
  /* 0x0038 */ const unsigned __int64* EnableKeyWords;
  /* 0x0040 */ const unsigned char* EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT; /* size: 0x0048 */

typedef struct _MDL
{
  /* 0x0000 */ struct _MDL* Next;
  /* 0x0008 */ short Size;
  /* 0x000a */ short MdlFlags;
  /* 0x000c */ unsigned short AllocationProcessorNumber;
  /* 0x000e */ unsigned short Reserved;
  /* 0x0010 */ struct _EPROCESS* Process;
  /* 0x0018 */ void* MappedSystemVa;
  /* 0x0020 */ void* StartVa;
  /* 0x0028 */ unsigned long ByteCount;
  /* 0x002c */ unsigned long ByteOffset;
} MDL, *PMDL; /* size: 0x0030 */

typedef struct _MEDIA_SPECIFIC_INFORMATION
{
  /* 0x0000 */ unsigned int NextEntryOffset;
  /* 0x0004 */ enum _NDIS_CLASS_ID ClassId;
  /* 0x0008 */ unsigned int Size;
  /* 0x000c */ unsigned char ClassInformation[1];
  /* 0x000d */ char __PADDING__[3];
} MEDIA_SPECIFIC_INFORMATION, *PMEDIA_SPECIFIC_INFORMATION; /* size: 0x0010 */

typedef enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
} MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
} MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef struct _METHOD
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0008 */ void* InformationBuffer;
  /* 0x0010 */ unsigned long InputBufferLength;
  /* 0x0014 */ unsigned long OutputBufferLength;
  /* 0x0018 */ unsigned long MethodId;
  /* 0x001c */ unsigned int BytesWritten;
  /* 0x0020 */ unsigned int BytesRead;
  /* 0x0024 */ unsigned int BytesNeeded;
} METHOD, *PMETHOD; /* size: 0x0028 */

typedef enum _MM_PAGE_PRIORITY
{
  LowPagePriority = 0,
  NormalPagePriority = 16,
  HighPagePriority = 32,
} MM_PAGE_PRIORITY, *PMM_PAGE_PRIORITY;

typedef enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
} MODE, *PMODE;

typedef struct _NAMED_PIPE_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long NamedPipeType;
  /* 0x0004 */ unsigned long ReadMode;
  /* 0x0008 */ unsigned long CompletionMode;
  /* 0x000c */ unsigned long MaximumInstances;
  /* 0x0010 */ unsigned long InboundQuota;
  /* 0x0014 */ unsigned long OutboundQuota;
  /* 0x0018 */ union _LARGE_INTEGER DefaultTimeout;
  /* 0x0020 */ unsigned char TimeoutSpecified;
  /* 0x0021 */ char __PADDING__[7];
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS; /* size: 0x0028 */

typedef struct _NBL_QUEUE
{
  /* 0x0000 */ struct _NET_BUFFER_LIST* First;
  /* 0x0008 */ struct _NET_BUFFER_LIST** Last;
} NBL_QUEUE, *PNBL_QUEUE; /* size: 0x0010 */

typedef struct _NDIS40_PROTOCOL_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorNdisVersion;
  /* 0x0001 */ unsigned char MinorNdisVersion;
  /* 0x0002 */ unsigned short Filler;
  union
  {
    /* 0x0004 */ unsigned int Reserved;
    /* 0x0004 */ unsigned int Flags;
  }; /* size: 0x0004 */
  /* 0x0008 */ void* OpenAdapterCompleteHandler /* function */;
  /* 0x0010 */ void* CloseAdapterCompleteHandler /* function */;
  union
  {
    /* 0x0018 */ void* SendCompleteHandler /* function */;
    /* 0x0018 */ void* WanSendCompleteHandler /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0020 */ void* TransferDataCompleteHandler /* function */;
    /* 0x0020 */ void* WanTransferDataCompleteHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* ResetCompleteHandler /* function */;
  /* 0x0030 */ void* RequestCompleteHandler /* function */;
  union
  {
    /* 0x0038 */ void* ReceiveHandler /* function */;
    /* 0x0038 */ void* WanReceiveHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ void* ReceiveCompleteHandler /* function */;
  /* 0x0048 */ void* StatusHandler /* function */;
  /* 0x0050 */ void* StatusCompleteHandler /* function */;
  /* 0x0058 */ struct _UNICODE_STRING Name;
  /* 0x0068 */ void* ReceivePacketHandler /* function */;
  /* 0x0070 */ void* BindAdapterHandler /* function */;
  /* 0x0078 */ void* UnbindAdapterHandler /* function */;
  /* 0x0080 */ void* PnPEventHandler /* function */;
  /* 0x0088 */ void* UnloadHandler /* function */;
} NDIS40_PROTOCOL_CHARACTERISTICS, *PNDIS40_PROTOCOL_CHARACTERISTICS; /* size: 0x0090 */

typedef struct _NDIS50_MINIPORT_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorNdisVersion;
  /* 0x0001 */ unsigned char MinorNdisVersion;
  /* 0x0002 */ unsigned short Filler;
  /* 0x0004 */ unsigned int Reserved;
  /* 0x0008 */ void* CheckForHangHandler /* function */;
  /* 0x0010 */ void* DisableInterruptHandler /* function */;
  /* 0x0018 */ void* EnableInterruptHandler /* function */;
  /* 0x0020 */ void* HaltHandler /* function */;
  /* 0x0028 */ void* HandleInterruptHandler /* function */;
  /* 0x0030 */ void* InitializeHandler /* function */;
  /* 0x0038 */ void* ISRHandler /* function */;
  /* 0x0040 */ void* QueryInformationHandler /* function */;
  /* 0x0048 */ void* ReconfigureHandler /* function */;
  /* 0x0050 */ void* ResetHandler /* function */;
  union
  {
    /* 0x0058 */ void* SendHandler /* function */;
    /* 0x0058 */ void* WanSendHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0060 */ void* SetInformationHandler /* function */;
  union
  {
    /* 0x0068 */ void* TransferDataHandler /* function */;
    /* 0x0068 */ void* WanTransferDataHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0070 */ void* ReturnPacketHandler /* function */;
  /* 0x0078 */ void* SendPacketsHandler /* function */;
  /* 0x0080 */ void* AllocateCompleteHandler /* function */;
  /* 0x0088 */ void* CoCreateVcHandler /* function */;
  /* 0x0090 */ void* CoDeleteVcHandler /* function */;
  /* 0x0098 */ void* CoActivateVcHandler /* function */;
  /* 0x00a0 */ void* CoDeactivateVcHandler /* function */;
  /* 0x00a8 */ void* CoSendPacketsHandler /* function */;
  /* 0x00b0 */ void* CoRequestHandler /* function */;
} NDIS50_MINIPORT_CHARACTERISTICS, *PNDIS50_MINIPORT_CHARACTERISTICS; /* size: 0x00b8 */

typedef struct _NDIS50_PROTOCOL_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorNdisVersion;
  /* 0x0001 */ unsigned char MinorNdisVersion;
  /* 0x0002 */ unsigned short Filler;
  union
  {
    /* 0x0004 */ unsigned int Reserved;
    /* 0x0004 */ unsigned int Flags;
  }; /* size: 0x0004 */
  /* 0x0008 */ void* OpenAdapterCompleteHandler /* function */;
  /* 0x0010 */ void* CloseAdapterCompleteHandler /* function */;
  union
  {
    /* 0x0018 */ void* SendCompleteHandler /* function */;
    /* 0x0018 */ void* WanSendCompleteHandler /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0020 */ void* TransferDataCompleteHandler /* function */;
    /* 0x0020 */ void* WanTransferDataCompleteHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* ResetCompleteHandler /* function */;
  /* 0x0030 */ void* RequestCompleteHandler /* function */;
  union
  {
    /* 0x0038 */ void* ReceiveHandler /* function */;
    /* 0x0038 */ void* WanReceiveHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0040 */ void* ReceiveCompleteHandler /* function */;
  /* 0x0048 */ void* StatusHandler /* function */;
  /* 0x0050 */ void* StatusCompleteHandler /* function */;
  /* 0x0058 */ struct _UNICODE_STRING Name;
  /* 0x0068 */ void* ReceivePacketHandler /* function */;
  /* 0x0070 */ void* BindAdapterHandler /* function */;
  /* 0x0078 */ void* UnbindAdapterHandler /* function */;
  /* 0x0080 */ void* PnPEventHandler /* function */;
  /* 0x0088 */ void* UnloadHandler /* function */;
  /* 0x0090 */ void* ReservedHandlers[4];
  /* 0x00b0 */ void* CoSendCompleteHandler /* function */;
  /* 0x00b8 */ void* CoStatusHandler /* function */;
  /* 0x00c0 */ void* CoReceivePacketHandler /* function */;
  /* 0x00c8 */ void* CoAfRegisterNotifyHandler /* function */;
} NDIS50_PROTOCOL_CHARACTERISTICS, *PNDIS50_PROTOCOL_CHARACTERISTICS; /* size: 0x00d0 */

typedef struct _NDIS51_MINIPORT_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorNdisVersion;
  /* 0x0001 */ unsigned char MinorNdisVersion;
  /* 0x0002 */ unsigned short Filler;
  /* 0x0004 */ unsigned int Reserved;
  /* 0x0008 */ void* CheckForHangHandler /* function */;
  /* 0x0010 */ void* DisableInterruptHandler /* function */;
  /* 0x0018 */ void* EnableInterruptHandler /* function */;
  /* 0x0020 */ void* HaltHandler /* function */;
  /* 0x0028 */ void* HandleInterruptHandler /* function */;
  /* 0x0030 */ void* InitializeHandler /* function */;
  /* 0x0038 */ void* ISRHandler /* function */;
  /* 0x0040 */ void* QueryInformationHandler /* function */;
  /* 0x0048 */ void* ReconfigureHandler /* function */;
  /* 0x0050 */ void* ResetHandler /* function */;
  union
  {
    /* 0x0058 */ void* SendHandler /* function */;
    /* 0x0058 */ void* WanSendHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0060 */ void* SetInformationHandler /* function */;
  union
  {
    /* 0x0068 */ void* TransferDataHandler /* function */;
    /* 0x0068 */ void* WanTransferDataHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0070 */ void* ReturnPacketHandler /* function */;
  /* 0x0078 */ void* SendPacketsHandler /* function */;
  /* 0x0080 */ void* AllocateCompleteHandler /* function */;
  /* 0x0088 */ void* CoCreateVcHandler /* function */;
  /* 0x0090 */ void* CoDeleteVcHandler /* function */;
  /* 0x0098 */ void* CoActivateVcHandler /* function */;
  /* 0x00a0 */ void* CoDeactivateVcHandler /* function */;
  /* 0x00a8 */ void* CoSendPacketsHandler /* function */;
  /* 0x00b0 */ void* CoRequestHandler /* function */;
  /* 0x00b8 */ void* CancelSendPacketsHandler /* function */;
  /* 0x00c0 */ void* PnPEventNotifyHandler /* function */;
  /* 0x00c8 */ void* AdapterShutdownHandler /* function */;
  /* 0x00d0 */ void* Reserved1;
  /* 0x00d8 */ void* Reserved2;
  /* 0x00e0 */ void* Reserved3;
  /* 0x00e8 */ void* Reserved4;
} NDIS51_MINIPORT_CHARACTERISTICS, *PNDIS51_MINIPORT_CHARACTERISTICS; /* size: 0x00f0 */

typedef enum _NDIS_802_11_WEP_STATUS
{
  Ndis802_11WEPEnabled = 0,
  Ndis802_11Encryption1Enabled = 0,
  Ndis802_11WEPDisabled = 1,
  Ndis802_11EncryptionDisabled = 1,
  Ndis802_11WEPKeyAbsent = 2,
  Ndis802_11Encryption1KeyAbsent = 2,
  Ndis802_11WEPNotSupported = 3,
  Ndis802_11EncryptionNotSupported = 3,
  Ndis802_11Encryption2Enabled = 4,
  Ndis802_11Encryption2KeyAbsent = 5,
  Ndis802_11Encryption3Enabled = 6,
  Ndis802_11Encryption3KeyAbsent = 7,
} NDIS_802_11_WEP_STATUS, *PNDIS_802_11_WEP_STATUS;

typedef struct _NDIS_AF_LIST
{
  /* 0x0000 */ struct _NDIS_AF_LIST* NextAf;
  /* 0x0008 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0010 */ struct CO_ADDRESS_FAMILY AddressFamily;
  /* 0x0020 */ struct _NDIS_CALL_MANAGER_CHARACTERISTICS CmChars;
  /* 0x00a8 */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
  /* 0x0138 */ unsigned long NdisMajorVersion;
  /* 0x013c */ long __PADDING__[1];
} NDIS_AF_LIST, *PNDIS_AF_LIST; /* size: 0x0140 */

typedef enum _NDIS_ARP_HEADER_FIELD
{
  NdisARPHeaderFieldUndefined = 0,
  NdisARPHeaderFieldOperation = 1,
  NdisARPHeaderFieldSPA = 2,
  NdisARPHeaderFieldTPA = 3,
  NdisARPHeaderFieldMaximum = 4,
} NDIS_ARP_HEADER_FIELD, *PNDIS_ARP_HEADER_FIELD;

typedef struct _NDIS_BIND_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _UNICODE_STRING* ProtocolSection;
  /* 0x0010 */ struct _UNICODE_STRING* AdapterName;
  /* 0x0018 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0020 */ enum _NDIS_MEDIUM MediaType;
  /* 0x0024 */ unsigned long MtuSize;
  /* 0x0028 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x0030 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0038 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x0040 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0048 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x004c */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0050 */ unsigned long LookaheadSize;
  /* 0x0058 */ struct _NDIS_PNP_CAPABILITIES* PowerManagementCapabilities;
  /* 0x0060 */ unsigned long SupportedPacketFilters;
  /* 0x0064 */ unsigned long MaxMulticastListSize;
  /* 0x0068 */ unsigned short MacAddressLength;
  /* 0x006a */ unsigned char CurrentMacAddress[32];
  /* 0x008c */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
  /* 0x0090 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES* RcvScaleCapabilities;
  /* 0x0098 */ union _NET_LUID_LH BoundIfNetluid;
  /* 0x00a0 */ unsigned long BoundIfIndex;
  /* 0x00a8 */ union _NET_LUID_LH LowestIfNetluid;
  /* 0x00b0 */ unsigned long LowestIfIndex;
  /* 0x00b4 */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x00b8 */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x00bc */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x00c0 */ unsigned short IfType;
  /* 0x00c2 */ unsigned char IfConnectorPresent;
  /* 0x00c8 */ struct _NDIS_PORT* ActivePorts;
  /* 0x00d0 */ unsigned long DataBackFillSize;
  /* 0x00d4 */ unsigned long ContextBackFillSize;
  /* 0x00d8 */ unsigned long MacOptions;
  /* 0x00dc */ unsigned int CompartmentId;
  /* 0x00e0 */ struct _NDIS_OFFLOAD* DefaultOffloadConfiguration;
  /* 0x00e8 */ struct _NDIS_TCP_CONNECTION_OFFLOAD* TcpConnectionOffloadCapabilities;
  /* 0x00f0 */ struct _UNICODE_STRING* BoundAdapterName;
  /* 0x00f8 */ struct _NDIS_HD_SPLIT_CURRENT_CONFIG* HDSplitCurrentConfig;
  /* 0x0100 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterCapabilities;
  /* 0x0108 */ struct _NDIS_PM_CAPABILITIES* PowerManagementCapabilitiesEx;
  /* 0x0110 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchCapabilities;
  /* 0x0118 */ unsigned char NDKEnabled;
  /* 0x0120 */ struct _NDIS_NDK_CAPABILITIES* NDKCapabilities;
  /* 0x0128 */ struct _NDIS_SRIOV_CAPABILITIES* SriovCapabilities;
  /* 0x0130 */ struct _NDIS_NIC_SWITCH_INFO_ARRAY* NicSwitchArray;
} NDIS_BIND_PARAMETERS, *PNDIS_BIND_PARAMETERS; /* size: 0x0138 */

typedef struct _NDIS_BIND_PATHS
{
  /* 0x0000 */ unsigned int Number;
  /* 0x0008 */ struct _UNICODE_STRING Paths[1];
} NDIS_BIND_PATHS, *PNDIS_BIND_PATHS; /* size: 0x0018 */

typedef struct _NDIS_CALL_MANAGER_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorVersion;
  /* 0x0001 */ unsigned char MinorVersion;
  /* 0x0002 */ unsigned short Filler;
  /* 0x0004 */ unsigned int Reserved;
  /* 0x0008 */ void* CmCreateVcHandler /* function */;
  /* 0x0010 */ void* CmDeleteVcHandler /* function */;
  /* 0x0018 */ void* CmOpenAfHandler /* function */;
  /* 0x0020 */ void* CmCloseAfHandler /* function */;
  /* 0x0028 */ void* CmRegisterSapHandler /* function */;
  /* 0x0030 */ void* CmDeregisterSapHandler /* function */;
  /* 0x0038 */ void* CmMakeCallHandler /* function */;
  /* 0x0040 */ void* CmCloseCallHandler /* function */;
  /* 0x0048 */ void* CmIncomingCallCompleteHandler /* function */;
  /* 0x0050 */ void* CmAddPartyHandler /* function */;
  /* 0x0058 */ void* CmDropPartyHandler /* function */;
  /* 0x0060 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x0068 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x0070 */ void* CmModifyCallQoSHandler /* function */;
  /* 0x0078 */ void* CmRequestHandler /* function */;
  /* 0x0080 */ void* CmRequestCompleteHandler /* function */;
} NDIS_CALL_MANAGER_CHARACTERISTICS, *PNDIS_CALL_MANAGER_CHARACTERISTICS; /* size: 0x0088 */

typedef enum _NDIS_CLASS_ID
{
  NdisClass802_3Priority = 0,
  NdisClassWirelessWanMbxMailbox = 1,
  NdisClassIrdaPacketInfo = 2,
  NdisClassAtmAALInfo = 3,
} NDIS_CLASS_ID, *PNDIS_CLASS_ID;

typedef struct _NDIS_CLIENT_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorVersion;
  /* 0x0001 */ unsigned char MinorVersion;
  /* 0x0002 */ unsigned short Filler;
  /* 0x0004 */ unsigned int Reserved;
  /* 0x0008 */ void* ClCreateVcHandler /* function */;
  /* 0x0010 */ void* ClDeleteVcHandler /* function */;
  /* 0x0018 */ void* ClRequestHandler /* function */;
  /* 0x0020 */ void* ClRequestCompleteHandler /* function */;
  /* 0x0028 */ void* ClOpenAfCompleteHandler /* function */;
  /* 0x0030 */ void* ClCloseAfCompleteHandler /* function */;
  /* 0x0038 */ void* ClRegisterSapCompleteHandler /* function */;
  /* 0x0040 */ void* ClDeregisterSapCompleteHandler /* function */;
  /* 0x0048 */ void* ClMakeCallCompleteHandler /* function */;
  /* 0x0050 */ void* ClModifyCallQoSCompleteHandler /* function */;
  /* 0x0058 */ void* ClCloseCallCompleteHandler /* function */;
  /* 0x0060 */ void* ClAddPartyCompleteHandler /* function */;
  /* 0x0068 */ void* ClDropPartyCompleteHandler /* function */;
  /* 0x0070 */ void* ClIncomingCallHandler /* function */;
  /* 0x0078 */ void* ClIncomingCallQoSChangeHandler /* function */;
  /* 0x0080 */ void* ClIncomingCloseCallHandler /* function */;
  /* 0x0088 */ void* ClIncomingDropPartyHandler /* function */;
  /* 0x0090 */ void* ClCallConnectedHandler /* function */;
} NDIS_CLIENT_CHARACTERISTICS, *PNDIS_CLIENT_CHARACTERISTICS; /* size: 0x0098 */

typedef struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* InitiateOffloadCompleteHandler /* function */;
  /* 0x0010 */ void* TerminateOffloadCompleteHandler /* function */;
  /* 0x0018 */ void* UpdateOffloadCompleteHandler /* function */;
  /* 0x0020 */ void* InvalidateOffloadCompleteHandler /* function */;
  /* 0x0028 */ void* QueryOffloadCompleteHandler /* function */;
  /* 0x0030 */ void* IndicateOffloadEventHandler /* function */;
} NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS, *PNDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS; /* size: 0x0038 */

typedef struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum NDIS_CHIMNEY_OFFLOAD_TYPE OffloadType;
  /* 0x0010 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0018 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x0020 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0028 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x0030 */ void* TcpOffloadEventHandler /* function */;
  /* 0x0038 */ void* TcpOffloadReceiveIndicateHandler /* function */;
} NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS, *PNDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS; /* size: 0x0040 */

typedef struct _NDIS_COMMON_OPEN_BLOCK
{
  union
  {
    /* 0x0000 */ void* MacHandle;
    /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  }; /* size: 0x0008 */
  /* 0x0008 */ void* BindingHandle;
  /* 0x0010 */ struct _NDIS_MINIPORT_BLOCK* MiniportHandle;
  /* 0x0018 */ struct _NDIS_PROTOCOL_BLOCK* ProtocolHandle;
  /* 0x0020 */ void* ProtocolBindingContext;
  /* 0x0028 */ void* NextSendHandler /* function */;
  /* 0x0030 */ void* NextSendContext;
  /* 0x0038 */ void* MiniportAdapterContext;
  /* 0x0040 */ unsigned char Reserved1;
  /* 0x0041 */ unsigned char CallingFromNdis6Protocol;
  /* 0x0042 */ unsigned char Reserved3;
  /* 0x0043 */ unsigned char Reserved4;
  /* 0x0048 */ void* NextReturnNetBufferListsHandler /* function */;
  /* 0x0050 */ unsigned __int64 Reserved5;
  /* 0x0058 */ void* NextReturnNetBufferListsContext;
  union
  {
    /* 0x0060 */ void* SendHandler /* function */;
    /* 0x0060 */ void* WanSendHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0068 */ void* TransferDataHandler /* function */;
  /* 0x0070 */ void* SendCompleteHandler /* function */;
  /* 0x0078 */ void* TransferDataCompleteHandler /* function */;
  /* 0x0080 */ void* ReceiveHandler /* function */;
  /* 0x0088 */ void* ReceiveCompleteHandler /* function */;
  /* 0x0090 */ void* WanReceiveHandler /* function */;
  /* 0x0098 */ void* RequestCompleteHandler /* function */;
  /* 0x00a0 */ void* ReceivePacketHandler /* function */;
  /* 0x00a8 */ void* SendPacketsHandler /* function */;
  /* 0x00b0 */ void* ResetHandler /* function */;
  /* 0x00b8 */ void* RequestHandler /* function */;
  /* 0x00c0 */ void* OidRequestHandler /* function */;
  /* 0x00c8 */ void* ResetCompleteHandler /* function */;
  union
  {
    /* 0x00d0 */ void* StatusHandler /* function */;
    /* 0x00d0 */ void* StatusHandlerEx /* function */;
  }; /* size: 0x0008 */
  /* 0x00d8 */ void* StatusCompleteHandler /* function */;
  /* 0x00e0 */ volatile unsigned long OpenFlags;
  /* 0x00e4 */ long References;
  /* 0x00e8 */ unsigned __int64 SpinLock;
  /* 0x00f0 */ void* FilterHandle;
  /* 0x00f8 */ unsigned int FrameTypeArraySize;
  /* 0x00fc */ unsigned short FrameTypeArray[4];
  /* 0x0104 */ unsigned long ProtocolOptions;
  /* 0x0108 */ unsigned long CurrentLookahead;
  /* 0x0110 */ void* WSendHandler /* function */;
  /* 0x0118 */ void* WTransferDataHandler /* function */;
  /* 0x0120 */ void* WSendPacketsHandler /* function */;
  /* 0x0128 */ void* CancelSendPacketsHandler /* function */;
  /* 0x0130 */ unsigned long WakeUpEnable;
  /* 0x0134 */ struct _NDIS_PM_PARAMETERS PMCurrentParameters;
  /* 0x0148 */ struct _KEVENT* CloseCompleteEvent;
  /* 0x0150 */ struct _QUEUED_CLOSE QC;
  /* 0x0178 */ long AfReferences;
  /* 0x0180 */ struct _NDIS_OPEN_BLOCK* NextGlobalOpen;
  /* 0x0188 */ struct _NDIS_OPEN_BLOCK* MiniportNextOpen;
  /* 0x0190 */ struct _NDIS_OPEN_BLOCK* ProtocolNextOpen;
  /* 0x0198 */ struct _UNICODE_STRING* BindDeviceName;
  /* 0x01a0 */ struct _UNICODE_STRING* RootDeviceName;
  /* 0x01a8 */ struct _NDIS_OPEN_BLOCK* FilterNextOpen;
  /* 0x01b0 */ unsigned int PacketFilters;
  /* 0x01b4 */ unsigned int OldPacketFilters;
  /* 0x01b8 */ unsigned int MaxMulticastAddresses;
  /* 0x01c0 */ struct _ETH_MULTICAST_WRAPPER* MCastAddressBuf;
  /* 0x01c8 */ unsigned int NumAddresses;
  /* 0x01d0 */ struct _ETH_MULTICAST_WRAPPER* OldMCastAddressBuf;
  /* 0x01d8 */ unsigned int OldNumAddresses;
  /* 0x01e0 */ unsigned char* RssParametersBuffer;
  /* 0x01e8 */ struct _NDIS_RECEIVE_SCALE_PARAMETERS* NdisRSSParameters;
  /* 0x01f0 */ struct _SINGLE_LIST_ENTRY PatternList;
  /* 0x01f8 */ struct _SINGLE_LIST_ENTRY WOLPatternList;
  /* 0x0200 */ struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
  /* 0x0208 */ void* ProtSendNetBufferListsComplete /* function */;
  /* 0x0210 */ void* SendCompleteNdisPacketContext;
  /* 0x0218 */ void* SendCompleteNetBufferListsContext;
  /* 0x0220 */ void* ReceiveNetBufferLists /* function */;
  /* 0x0228 */ void* ReceiveNetBufferListsContext;
  /* 0x0230 */ void* SavedSendPacketsHandler /* function */;
  /* 0x0238 */ void* SavedCancelSendPacketsHandler /* function */;
  /* 0x0240 */ void* SavedSendHandler /* function */;
  /* 0x0248 */ void* InitiateOffloadCompleteHandler /* function */;
  /* 0x0250 */ void* TerminateOffloadCompleteHandler /* function */;
  /* 0x0258 */ void* UpdateOffloadCompleteHandler /* function */;
  /* 0x0260 */ void* InvalidateOffloadCompleteHandler /* function */;
  /* 0x0268 */ void* QueryOffloadCompleteHandler /* function */;
  /* 0x0270 */ void* IndicateOffloadEventHandler /* function */;
  /* 0x0278 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0280 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x0288 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0290 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x0298 */ void* TcpOffloadEventHandler /* function */;
  /* 0x02a0 */ void* TcpOffloadReceiveIndicateHandler /* function */;
  /* 0x02a8 */ struct NDIS_NBL_TRACKER_HANDLE__* NblTracker;
  /* 0x02b0 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
  /* 0x02b8 */ unsigned __int64 RefCountLock;
  /* 0x02c0 */ unsigned long ProtocolMajorVersion;
  /* 0x02c8 */ void** IfBlock;
  /* 0x02d0 */ struct _NDIS_SPIN_LOCK PnPStateLock;
  /* 0x02e0 */ enum _NDIS_NDIS5_DRIVER_STATE PnPState;
  /* 0x02e4 */ int OutstandingSends;
  /* 0x02e8 */ struct _NDIS_EVENT PauseEvent;
  /* 0x0300 */ void* Ndis5WanSendHandler /* function */;
  /* 0x0308 */ void* ProtSendCompleteHandler /* function */;
  /* 0x0310 */ void* OidRequestCompleteHandler /* function */;
  /* 0x0318 */ long NumOfPauseRestartRequests;
  /* 0x031c */ enum _NDIS_OPEN_STATE State;
  /* 0x0320 */ struct _NDIS_OPEN_OFFLOAD* Offload;
  /* 0x0328 */ struct _NDIS_STATUS_UNBIND_WORKITEM* StatusUnbindWorkItem;
  /* 0x0330 */ unsigned __int64 DpcStartCycle;
  /* 0x0338 */ struct PNDIS_PER_PROCESSOR_SLOT__* ReceivedAPacketSlot;
  /* 0x0340 */ void* DirectOidRequestHandler /* function */;
  /* 0x0348 */ struct _LIST_ENTRY ReceiveQueueList;
  /* 0x0358 */ unsigned long NumReceiveQueues;
  /* 0x0360 */ struct _LIST_ENTRY SharedMemoryBlockList;
  /* 0x0370 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0378 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x0380 */ void* AllocateSharedMemoryContext;
  /* 0x0388 */ struct _NDIS_COMPOSITE_BUS_INFORMATION* CompositeBus;
  /* 0x0390 */ unsigned long NumAllocatedVFs;
  /* 0x0398 */ struct _LIST_ENTRY VFList;
  /* 0x03a8 */ unsigned long NumActiveVPorts;
  /* 0x03b0 */ struct _LIST_ENTRY VPortList;
  /* 0x03c0 */ enum _NDIS_OPEN_UNBIND_REASON UnbindReason;
  /* 0x03c4 */ unsigned long AoAcReferences;
} NDIS_COMMON_OPEN_BLOCK, *PNDIS_COMMON_OPEN_BLOCK; /* size: 0x03c8 */

typedef struct _NDIS_COMPOSITE_BUS_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceId;
  /* 0x0010 */ unsigned long NumberOfInternalBindings;
  /* 0x0018 */ struct _UNICODE_STRING SymbolicLinkName[32];
  /* 0x0218 */ struct _UNICODE_STRING InstanceId[32];
  /* 0x0418 */ struct _UNICODE_STRING HardwareIds;
  /* 0x0428 */ struct _UNICODE_STRING CompatibleIds;
} NDIS_COMPOSITE_BUS_INFORMATION, *PNDIS_COMPOSITE_BUS_INFORMATION; /* size: 0x0438 */

typedef struct _NDIS_CONFIGURATION_OBJECT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* NdisHandle;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} NDIS_CONFIGURATION_OBJECT, *PNDIS_CONFIGURATION_OBJECT; /* size: 0x0018 */

typedef struct _NDIS_CONFIGURATION_PARAMETER
{
  /* 0x0000 */ enum _NDIS_PARAMETER_TYPE ParameterType;
  union
  {
    union
    {
      /* 0x0008 */ unsigned long IntegerData;
      /* 0x0008 */ struct _UNICODE_STRING StringData;
      /* 0x0008 */ struct BINARY_DATA BinaryData;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ ParameterData;
} NDIS_CONFIGURATION_PARAMETER, *PNDIS_CONFIGURATION_PARAMETER; /* size: 0x0018 */

typedef struct _NDIS_CONNECTION_INFO
{
  /* 0x0000 */ unsigned char MacAddress[6];
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long SourceIPv4Address;
      /* 0x000c */ unsigned long DestinationIPv4Address;
      /* 0x0010 */ unsigned char Protocol;
      /* 0x0011 */ char __PADDING__[3];
    } /* size: 0x000c */ IPv4Info;
    struct
    {
      /* 0x0008 */ unsigned char SourceIPv6Address[16];
      /* 0x0018 */ unsigned char DestinationIPv6Address[16];
      /* 0x0028 */ unsigned char Protocol;
    } /* size: 0x0021 */ IPv6Info;
  }; /* size: 0x0021 */
  union
  {
    struct
    {
      /* 0x002c */ unsigned short SourceTcpPort;
      /* 0x002e */ unsigned short DestinationTcpPort;
    } /* size: 0x0004 */ TcpPortInfo;
    struct
    {
      /* 0x002c */ unsigned short SourceUdpPort;
      /* 0x002e */ unsigned short DestinationUdpPort;
    } /* size: 0x0004 */ UdpPortInfo;
  }; /* size: 0x0004 */
} NDIS_CONNECTION_INFO, *PNDIS_CONNECTION_INFO; /* size: 0x0030 */

typedef struct _NDIS_CO_AF_BLOCK
{
  /* 0x0000 */ struct _NDIS_CO_AF_BLOCK* NextAf;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long References;
  /* 0x0010 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0018 */ struct _NDIS_CALL_MANAGER_CHARACTERISTICS* CallMgrEntries;
  /* 0x0020 */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS* CallMgrChars;
  /* 0x0028 */ struct _NDIS_OPEN_BLOCK* CallMgrOpen;
  /* 0x0030 */ void* CallMgrContext;
  /* 0x0038 */ struct _NDIS_CLIENT_CHARACTERISTICS ClientEntries;
  /* 0x00d0 */ struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS ClientChars;
  /* 0x0170 */ struct _NDIS_OPEN_BLOCK* ClientOpen;
  /* 0x0178 */ void* ClientContext;
  /* 0x0180 */ unsigned __int64 Lock;
  /* 0x0188 */ unsigned long CmMajorNdisVersion;
  /* 0x018c */ unsigned long ClMajorNdisVersion;
  /* 0x0190 */ struct _NDIS_REQUEST* Ndis5CmRequest;
  /* 0x0198 */ struct _NDIS_REQUEST Request;
  /* 0x0248 */ struct _NDIS_REQUEST* CloseAfNdisRequest;
  /* 0x0250 */ unsigned char CloseAfRequested;
  /* 0x0251 */ char __PADDING__[7];
} NDIS_CO_AF_BLOCK, *PNDIS_CO_AF_BLOCK; /* size: 0x0258 */

typedef struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* CmCreateVcHandler /* function */;
  /* 0x0010 */ void* CmDeleteVcHandler /* function */;
  /* 0x0018 */ void* CmOpenAfHandler /* function */;
  /* 0x0020 */ void* CmCloseAfHandler /* function */;
  /* 0x0028 */ void* CmRegisterSapHandler /* function */;
  /* 0x0030 */ void* CmDeregisterSapHandler /* function */;
  /* 0x0038 */ void* CmMakeCallHandler /* function */;
  /* 0x0040 */ void* CmCloseCallHandler /* function */;
  /* 0x0048 */ void* CmIncomingCallCompleteHandler /* function */;
  /* 0x0050 */ void* CmAddPartyHandler /* function */;
  /* 0x0058 */ void* CmDropPartyHandler /* function */;
  /* 0x0060 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x0068 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x0070 */ void* CmModifyCallQoSHandler /* function */;
  /* 0x0078 */ void* CmOidRequestHandler /* function */;
  /* 0x0080 */ void* CmOidRequestCompleteHandler /* function */;
  /* 0x0088 */ void* CmNotifyCloseAfCompleteHandler /* function */;
} NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS, *PNDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS; /* size: 0x0090 */

typedef struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* ClCreateVcHandler /* function */;
  /* 0x0010 */ void* ClDeleteVcHandler /* function */;
  /* 0x0018 */ void* ClOidRequestHandler /* function */;
  /* 0x0020 */ void* ClOidRequestCompleteHandler /* function */;
  /* 0x0028 */ void* ClOpenAfCompleteHandlerEx /* function */;
  /* 0x0030 */ void* ClCloseAfCompleteHandler /* function */;
  /* 0x0038 */ void* ClRegisterSapCompleteHandler /* function */;
  /* 0x0040 */ void* ClDeregisterSapCompleteHandler /* function */;
  /* 0x0048 */ void* ClMakeCallCompleteHandler /* function */;
  /* 0x0050 */ void* ClModifyCallQoSCompleteHandler /* function */;
  /* 0x0058 */ void* ClCloseCallCompleteHandler /* function */;
  /* 0x0060 */ void* ClAddPartyCompleteHandler /* function */;
  /* 0x0068 */ void* ClDropPartyCompleteHandler /* function */;
  /* 0x0070 */ void* ClIncomingCallHandler /* function */;
  /* 0x0078 */ void* ClIncomingCallQoSChangeHandler /* function */;
  /* 0x0080 */ void* ClIncomingCloseCallHandler /* function */;
  /* 0x0088 */ void* ClIncomingDropPartyHandler /* function */;
  /* 0x0090 */ void* ClCallConnectedHandler /* function */;
  /* 0x0098 */ void* ClNotifyCloseAfHandler /* function */;
} NDIS_CO_CLIENT_OPTIONAL_HANDLERS, *PNDIS_CO_CLIENT_OPTIONAL_HANDLERS; /* size: 0x00a0 */

typedef struct _NDIS_CO_PARTY_BLOCK
{
  /* 0x0000 */ struct _NDIS_CO_VC_PTR_BLOCK* VcPtr;
  /* 0x0008 */ void* CallMgrContext;
  /* 0x0010 */ void* ClientContext;
  /* 0x0018 */ void* ClIncomingDropPartyHandler /* function */;
  /* 0x0020 */ void* ClDropPartyCompleteHandler /* function */;
} NDIS_CO_PARTY_BLOCK, *PNDIS_CO_PARTY_BLOCK; /* size: 0x0028 */

typedef struct _NDIS_CO_SAP_BLOCK
{
  /* 0x0000 */ void* CallMgrContext;
  /* 0x0008 */ void* ClientContext;
  /* 0x0010 */ struct _NDIS_CO_AF_BLOCK* AfBlock;
  /* 0x0018 */ struct CO_SAP* Sap;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long References;
  /* 0x0028 */ unsigned __int64 Lock;
} NDIS_CO_SAP_BLOCK, *PNDIS_CO_SAP_BLOCK; /* size: 0x0030 */

typedef struct _NDIS_CO_VC_BLOCK
{
  /* 0x0000 */ unsigned long References;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned __int64 Lock;
  /* 0x0010 */ struct _NDIS_OPEN_BLOCK* ClientOpen;
  /* 0x0018 */ void* ClientContext;
  /* 0x0020 */ struct _NDIS_CO_VC_PTR_BLOCK* pProxyVcPtr;
  /* 0x0028 */ struct _NDIS_CO_VC_PTR_BLOCK* pClientVcPtr;
  /* 0x0030 */ void* CoSendCompleteHandler /* function */;
  /* 0x0038 */ void* CoReceivePacketHandler /* function */;
  /* 0x0040 */ void* CoSendNetBufferListsCompleteHandler /* function */;
  /* 0x0048 */ void* CoReceiveNetBufferListsHandler /* function */;
  /* 0x0050 */ struct _NDIS_OPEN_BLOCK* CallMgrOpen;
  /* 0x0058 */ void* CallMgrContext;
  /* 0x0060 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x0068 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x0070 */ void* CmModifyCallQoSHandler /* function */;
  /* 0x0078 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0080 */ void* MiniportContext;
  /* 0x0088 */ unsigned __int64 VcId;
} NDIS_CO_VC_BLOCK, *PNDIS_CO_VC_BLOCK; /* size: 0x0090 */

typedef struct _NDIS_CO_VC_PTR_BLOCK
{
  /* 0x0000 */ long References;
  /* 0x0004 */ unsigned long CallFlags;
  /* 0x0008 */ unsigned long* pVcFlags;
  /* 0x0010 */ unsigned __int64 Lock;
  /* 0x0018 */ void* ClientContext;
  /* 0x0020 */ struct _LIST_ENTRY ClientLink;
  /* 0x0030 */ struct _LIST_ENTRY VcLink;
  /* 0x0040 */ struct _NDIS_CO_AF_BLOCK* AfBlock;
  /* 0x0048 */ struct _NDIS_CO_VC_BLOCK* VcBlock;
  /* 0x0050 */ struct _NDIS_OPEN_BLOCK* ClientOpen;
  /* 0x0058 */ long OwnsVcBlock;
  /* 0x0060 */ void* CoDeleteVcHandler /* function */;
  /* 0x0068 */ void* DeleteVcContext;
  /* 0x0070 */ void* ClModifyCallQoSCompleteHandler /* function */;
  /* 0x0078 */ void* ClIncomingCallQoSChangeHandler /* function */;
  /* 0x0080 */ void* ClCallConnectedHandler /* function */;
  /* 0x0088 */ struct _NDIS_OPEN_BLOCK* CallMgrOpen;
  /* 0x0090 */ void* CallMgrContext;
  /* 0x0098 */ struct _LIST_ENTRY CallMgrLink;
  /* 0x00a8 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x00b0 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x00b8 */ void* CmModifyCallQoSHandler /* function */;
  /* 0x00c0 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x00c8 */ void* MiniportContext;
  /* 0x00d0 */ void* WCoSendPacketsHandler /* function */;
  /* 0x00d8 */ void* WCoDeleteVcHandler /* function */;
  /* 0x00e0 */ void* WCoActivateVcHandler /* function */;
  /* 0x00e8 */ void* WCoDeactivateVcHandler /* function */;
  /* 0x00f0 */ void* WCoSendNetBufferListsHandler /* function */;
  /* 0x00f8 */ void* CoSendNetBufferListsHandler /* function */;
  /* 0x0100 */ void* CoSendNetBufferListsCompleteHandler /* function */;
  /* 0x0108 */ void* CoSendPacketHandler /* function */;
  /* 0x0110 */ void* CoSendPacketCompleteHandler /* function */;
  /* 0x0118 */ void* CoIndicateReceivePacketHandler /* function */;
  /* 0x0120 */ void* CoIndicateReceiveNetBufferListsHandler /* function */;
  /* 0x0128 */ struct _UNICODE_STRING VcInstanceName;
  /* 0x0138 */ union _LARGE_INTEGER VcIndex;
  /* 0x0140 */ struct _LIST_ENTRY WmiLink;
  /* 0x0150 */ unsigned char CallMiniportDeleteVc;
  /* 0x0151 */ char __PADDING__[7];
} NDIS_CO_VC_PTR_BLOCK, *PNDIS_CO_VC_PTR_BLOCK; /* size: 0x0158 */

typedef struct _NDIS_D0_SIGNAL_WORK_ITEM
{
  /* 0x0000 */ struct _NDIS_WORK_ITEM WorkItem;
  /* 0x0050 */ long CompletionStatus;
  /* 0x0054 */ unsigned char Scheduled;
  /* 0x0055 */ char __PADDING__[3];
} NDIS_D0_SIGNAL_WORK_ITEM, *PNDIS_D0_SIGNAL_WORK_ITEM; /* size: 0x0058 */

typedef enum _NDIS_DATA_PATH_TYPE
{
  NdisSendPath = 0,
  NdisSendCompletePath = 1,
  NdisReceivePath = 2,
  NdisReceiveCompletePath = 3,
  NdisDataPathCount = 4,
} NDIS_DATA_PATH_TYPE, *PNDIS_DATA_PATH_TYPE;

typedef struct _NDIS_DEVICE_OBJECT_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _UNICODE_STRING* DeviceName;
  /* 0x0010 */ struct _UNICODE_STRING* SymbolicName;
  /* 0x0018 */ void** MajorFunctions /* function */;
  /* 0x0020 */ unsigned long ExtensionSize;
  /* 0x0028 */ const struct _UNICODE_STRING* DefaultSDDLString;
  /* 0x0030 */ const struct _GUID* DeviceClassGuid;
} NDIS_DEVICE_OBJECT_ATTRIBUTES, *PNDIS_DEVICE_OBJECT_ATTRIBUTES; /* size: 0x0038 */

typedef enum _NDIS_DEVICE_PNP_EVENT
{
  NdisDevicePnPEventQueryRemoved = 0,
  NdisDevicePnPEventRemoved = 1,
  NdisDevicePnPEventSurpriseRemoved = 2,
  NdisDevicePnPEventQueryStopped = 3,
  NdisDevicePnPEventStopped = 4,
  NdisDevicePnPEventPowerProfileChanged = 5,
  NdisDevicePnPEventFilterListChanged = 6,
  NdisDevicePnPEventMaximum = 7,
} NDIS_DEVICE_PNP_EVENT, *PNDIS_DEVICE_PNP_EVENT;

typedef enum _NDIS_DEVICE_POWER_STATE
{
  NdisDeviceStateUnspecified = 0,
  NdisDeviceStateD0 = 1,
  NdisDeviceStateD1 = 2,
  NdisDeviceStateD2 = 3,
  NdisDeviceStateD3 = 4,
  NdisDeviceStateMaximum = 5,
} NDIS_DEVICE_POWER_STATE, *PNDIS_DEVICE_POWER_STATE;

typedef struct _NDIS_DMA_BLOCK
{
  /* 0x0000 */ void* MapRegisterBase;
  /* 0x0008 */ struct _KEVENT AllocationEvent;
  /* 0x0020 */ void* SystemAdapterObject;
  /* 0x0028 */ void* Miniport;
  /* 0x0030 */ unsigned char InProgress;
  /* 0x0031 */ char __PADDING__[7];
} NDIS_DMA_BLOCK, *PNDIS_DMA_BLOCK; /* size: 0x0038 */

typedef struct _NDIS_DMA_DESCRIPTION
{
  /* 0x0000 */ unsigned char DemandMode;
  /* 0x0001 */ unsigned char AutoInitialize;
  /* 0x0002 */ unsigned char DmaChannelSpecified;
  /* 0x0004 */ enum _DMA_WIDTH DmaWidth;
  /* 0x0008 */ enum _DMA_SPEED DmaSpeed;
  /* 0x000c */ unsigned long DmaPort;
  /* 0x0010 */ unsigned long DmaChannel;
} NDIS_DMA_DESCRIPTION, *PNDIS_DMA_DESCRIPTION; /* size: 0x0014 */

typedef struct _NDIS_DPC_TRACKER
{
  /* 0x0000 */ unsigned __int64 TotalCycleInRcvTranslation;
  /* 0x0008 */ unsigned __int64 TotalCycleInReturnTranslation;
  /* 0x0010 */ unsigned __int64 TotalCycleInReturn;
  /* 0x0018 */ unsigned __int64 TotalCycleInMiniportReturn;
  /* 0x0020 */ unsigned __int64 TotalCycleSendComplete;
  /* 0x0028 */ unsigned __int64 TotalCycleInNdis;
  /* 0x0030 */ unsigned long TotalNumInRcvTranslation;
  /* 0x0034 */ unsigned long TotalNumInReturnTranslation;
  /* 0x0038 */ unsigned long TotalNumInReturn;
  /* 0x003c */ unsigned long TotalNumInMiniportReturn;
  /* 0x0040 */ unsigned long TotalNumSendComplete;
  /* 0x0044 */ unsigned long TotalNumInNdis;
  /* 0x0048 */ unsigned __int64 DpcStartCycle;
  /* 0x0050 */ unsigned __int64 DpcStopCycle;
  /* 0x0058 */ unsigned __int64 RcvTranslationTrace[256];
  /* 0x0858 */ unsigned __int64 ReturnTranslationTrace[256];
  /* 0x1058 */ unsigned __int64 ReturnTrace[256];
  /* 0x1858 */ unsigned __int64 NdisTrace[256];
  /* 0x2058 */ unsigned __int64 SendCompleteTrace[256];
  /* 0x2858 */ unsigned __int64 MiniportReturnTrace[256];
  /* 0x3058 */ unsigned __int64 ProtocolRcvTrace[256];
  /* 0x3858 */ unsigned __int64 MiniportTransferTrace[256];
  /* 0x4058 */ unsigned char RcvTranslationTraceIndex;
  /* 0x4059 */ unsigned char ReturnTranslationTraceIndex;
  /* 0x405a */ unsigned char NdisTraceIndex;
  /* 0x405b */ unsigned char ReturnTraceIndex;
  /* 0x405c */ unsigned char SendCompleteTraceIndex;
  /* 0x405d */ unsigned char MiniportReturnTraceIndex;
  /* 0x405e */ unsigned char ProtocolRcvTraceIndex;
  /* 0x405f */ unsigned char MiniportTransferTraceIndex;
} NDIS_DPC_TRACKER, *PNDIS_DPC_TRACKER; /* size: 0x4060 */

typedef struct _NDIS_DPC_WORK_ITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0020 */ struct _KDPC* Dpc;
  /* 0x0028 */ void* InterruptContext;
  /* 0x0030 */ void* SystemArgument1;
  /* 0x0038 */ void* SystemArgument2;
  /* 0x0040 */ unsigned long TargetCpu;
  /* 0x0044 */ unsigned long Flags;
  /* 0x0048 */ unsigned __int64 Lock;
} NDIS_DPC_WORK_ITEM, *PNDIS_DPC_WORK_ITEM; /* size: 0x0050 */

typedef struct _NDIS_DRIVER_OPTIONAL_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
} NDIS_DRIVER_OPTIONAL_HANDLERS, *PNDIS_DRIVER_OPTIONAL_HANDLERS; /* size: 0x0004 */

typedef struct _NDIS_DRIVER_WRAPPER_HANDLE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* NdisWrapperHandle;
} NDIS_DRIVER_WRAPPER_HANDLE, *PNDIS_DRIVER_WRAPPER_HANDLE; /* size: 0x0010 */

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long TransmitChecksumOffloadSupported : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReceiveChecksumOffloadSupported : 4; /* bit position: 4 */
    /* 0x0000 */ unsigned long LsoV2Supported : 4; /* bit position: 8 */
    /* 0x0000 */ unsigned long RssSupported : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned long VmqSupported : 4; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long MaxHeaderSizeSupported;
} NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD, *PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD; /* size: 0x0008 */

typedef enum _NDIS_ENCAPSULATION
{
  UNSPECIFIED_Encapsulation = 0,
  NULL_Encapsulation = 1,
  IEEE_802_3_Encapsulation = 2,
  IEEE_802_5_Encapsulation = 3,
  LLC_SNAP_ROUTED_Encapsulation = 4,
  LLC_SNAP_BRIDGED_Encapsulation = 5,
} NDIS_ENCAPSULATION, *PNDIS_ENCAPSULATION;

typedef struct _NDIS_ENCAPSULATION_FORMAT
{
  /* 0x0000 */ enum _NDIS_ENCAPSULATION Encapsulation;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long FixedHeaderSize : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0004 */ Flags;
  /* 0x0008 */ unsigned long EncapsulationHeaderSize;
} NDIS_ENCAPSULATION_FORMAT, *PNDIS_ENCAPSULATION_FORMAT; /* size: 0x000c */

typedef struct _NDIS_ENTRY_HEADER
{
  /* 0x0000 */ struct _NDIS_POOL_HEADER* PoolHeader;
  /* 0x0008 */ struct _LIST_ENTRY Linkage;
  /* 0x0018 */ unsigned long LookasideProcIndex;
  /* 0x001c */ long __PADDING__[1];
} NDIS_ENTRY_HEADER, *PNDIS_ENTRY_HEADER; /* size: 0x0020 */

typedef struct _NDIS_ENUM_FILTERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long NumberOfFilters;
  /* 0x000c */ unsigned long OffsetFirstFilter;
  /* 0x0010 */ struct _NDIS_FILTER_INTERFACE Filter[1];
} NDIS_ENUM_FILTERS, *PNDIS_ENUM_FILTERS; /* size: 0x0050 */

typedef enum _NDIS_ENVIRONMENT_TYPE
{
  NdisEnvironmentWindows = 0,
  NdisEnvironmentWindowsNt = 1,
} NDIS_ENVIRONMENT_TYPE, *PNDIS_ENVIRONMENT_TYPE;

typedef struct _NDIS_EVENT
{
  /* 0x0000 */ struct _KEVENT Event;
} NDIS_EVENT, *PNDIS_EVENT; /* size: 0x0018 */

typedef struct _NDIS_EVENT_LOG
{
  /* 0x0000 */ unsigned __int64 LastEventTime;
  /* 0x0008 */ unsigned long LastUsedEntry;
  /* 0x000c */ unsigned long NumEntries;
  /* 0x0010 */ unsigned __int64 Lock;
  /* 0x0018 */ unsigned short Flags;
  /* 0x001a */ unsigned short EntrySize;
  /* 0x001c */ long __PADDING__[1];
} NDIS_EVENT_LOG, *PNDIS_EVENT_LOG; /* size: 0x0020 */

typedef struct _NDIS_EVENT_LOG_ENTRY
{
  /* 0x0000 */ unsigned short EventId;
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned short Timestamp : 15; /* bit position: 0 */
      /* 0x0002 */ unsigned short TimestampScale : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0002 */ unsigned short TimestampValue;
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned long StackTrace;
  /* 0x0008 */ void* Context;
} NDIS_EVENT_LOG_ENTRY, *PNDIS_EVENT_LOG_ENTRY; /* size: 0x0010 */

typedef struct _NDIS_FILTER_ATTACH_LIST
{
  /* 0x0000 */ struct _UNICODE_STRING* FilterInstanceName;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long __PADDING__[1];
} NDIS_FILTER_ATTACH_LIST, *PNDIS_FILTER_ATTACH_LIST; /* size: 0x0010 */

typedef struct _NDIS_FILTER_ATTACH_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long IfIndex;
  /* 0x0008 */ union _NET_LUID_LH NetLuid;
  /* 0x0010 */ struct _UNICODE_STRING* FilterModuleGuidName;
  /* 0x0018 */ unsigned long BaseMiniportIfIndex;
  /* 0x0020 */ struct _UNICODE_STRING* BaseMiniportInstanceName;
  /* 0x0028 */ struct _UNICODE_STRING* BaseMiniportName;
  /* 0x0030 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0034 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0038 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0040 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0048 */ enum _NDIS_MEDIUM MiniportMediaType;
  /* 0x004c */ enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
  /* 0x0050 */ void* MiniportMediaSpecificAttributes;
  /* 0x0058 */ struct _NDIS_OFFLOAD* DefaultOffloadConfiguration;
  /* 0x0060 */ unsigned short MacAddressLength;
  /* 0x0062 */ unsigned char CurrentMacAddress[32];
  /* 0x0088 */ union _NET_LUID_LH BaseMiniportNetLuid;
  /* 0x0090 */ unsigned long LowerIfIndex;
  /* 0x0098 */ union _NET_LUID_LH LowerIfNetLuid;
  /* 0x00a0 */ unsigned long Flags;
  /* 0x00a8 */ struct _NDIS_HD_SPLIT_CURRENT_CONFIG* HDSplitCurrentConfig;
  /* 0x00b0 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterCapabilities;
  /* 0x00b8 */ struct _DEVICE_OBJECT* MiniportPhysicalDeviceObject;
  /* 0x00c0 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchCapabilities;
  /* 0x00c8 */ unsigned char BaseMiniportIfConnectorPresent;
  /* 0x00d0 */ struct _NDIS_SRIOV_CAPABILITIES* SriovCapabilities;
  /* 0x00d8 */ struct _NDIS_NIC_SWITCH_INFO_ARRAY* NicSwitchArray;
} NDIS_FILTER_ATTACH_PARAMETERS, *PNDIS_FILTER_ATTACH_PARAMETERS; /* size: 0x00e0 */

typedef struct _NDIS_FILTER_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
} NDIS_FILTER_ATTRIBUTES, *PNDIS_FILTER_ATTRIBUTES; /* size: 0x0008 */

typedef struct _NDIS_FILTER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_FILTER_BLOCK* NextFilter;
  /* 0x0010 */ struct _NDIS_FILTER_DRIVER_BLOCK* FilterDriver;
  /* 0x0018 */ void* FilterModuleContext;
  /* 0x0020 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0028 */ struct _UNICODE_STRING* FilterInstanceName;
  /* 0x0030 */ struct _UNICODE_STRING* FilterFriendlyName;
  /* 0x0038 */ unsigned long Flags;
  /* 0x003c */ unsigned long StackFlags;
  /* 0x0040 */ enum _NDIS_FILTER_STATE State;
  /* 0x0048 */ struct _REFERENCE_EX Ref;
  /* 0x0060 */ int FakeStatus;
  /* 0x0068 */ struct _NDIS_FILTER_BLOCK* NextGlobalFilter;
  /* 0x0070 */ struct _NDIS_FILTER_BLOCK* LowerFilter;
  /* 0x0078 */ struct _NDIS_FILTER_BLOCK* HigherFilter;
  /* 0x0080 */ struct _FILTER_PAUSE_RESTART_CONTEXT* AsyncOpContext;
  /* 0x0088 */ long NumOfPauseRestartRequests;
  /* 0x0090 */ unsigned __int64 Lock;
  /* 0x0098 */ void* LockThread;
  /* 0x00a0 */ unsigned long LockDbg;
  /* 0x00a8 */ struct _LIST_ENTRY OidRequestList;
  /* 0x00b8 */ struct _NDIS_OID_REQUEST* PendingOidRequest;
  struct
  {
    /* 0x00c0 */ struct _WORK_QUEUE_ITEM WorkItem;
    /* 0x00e0 */ unsigned char WorkItemQueued;
    /* 0x00e8 */ struct _PENDING_STACK_EXPANSION_FALLBACK_WORK PendingWork;
  } /* size: 0x0060 */ StackExpansionFallback;
  /* 0x0120 */ volatile unsigned char StatusIndicationsQueued;
  /* 0x0124 */ volatile long DroppedReceiveNbls;
  /* 0x0128 */ volatile long DroppedSendNbls;
  /* 0x012c */ unsigned long DroppedStatusIndications;
  /* 0x0130 */ unsigned long DroppedUncloneableStatusIndications;
  /* 0x0138 */ struct _REFERENCE_EX PnPRef;
  /* 0x0150 */ enum _NDIS_MEDIUM MediaType;
  /* 0x0154 */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediaType;
  /* 0x0158 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x015c */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0160 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0168 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0170 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x0174 */ unsigned long AutoNegotiationFlags;
  /* 0x0178 */ unsigned char XState;
  /* 0x0179 */ unsigned char Reserved1;
  /* 0x017a */ unsigned char Reserved2;
  /* 0x017b */ unsigned char Reserved3;
  /* 0x017c */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectStateIndicateUp;
  /* 0x0180 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexStateIndicateUp;
  /* 0x0188 */ unsigned __int64 XmitLinkSpeedIndicateUp;
  /* 0x0190 */ unsigned __int64 RcvLinkSpeedIndicateUp;
  /* 0x0198 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctionsIndicateUp;
  /* 0x019c */ unsigned long AutoNegotiationFlagsIndicateUp;
  /* 0x01a0 */ void* NextRequestHandle;
  /* 0x01a8 */ struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY* IterativeDataPathTracker[4];
  /* 0x01b0 */ void* NextSendNetBufferListsHandler /* function */;
  /* 0x01b8 */ void* NextSendNetBufferListsContext;
  /* 0x01c0 */ struct NDIS_NBL_TRACKER_HANDLE__* NextSendNetBufferListsTracker;
  /* 0x01c8 */ struct _NDIS_OBJECT_HEADER* NextSendNetBufferListsObject;
  /* 0x01d0 */ void* NextSendNetBufferListsCompleteHandler /* function */;
  /* 0x01d8 */ void* NextSendNetBufferListsCompleteContext;
  /* 0x01e0 */ struct NDIS_NBL_TRACKER_HANDLE__* NextSendNetBufferListsCompleteTracker;
  /* 0x01e8 */ struct _NDIS_OBJECT_HEADER* NextSendNetBufferListsCompleteObject;
  /* 0x01f0 */ void* NextIndicateReceiveNetBufferListsHandler /* function */;
  /* 0x01f8 */ void* NextIndicateReceiveNetBufferListsContext;
  /* 0x0200 */ struct NDIS_NBL_TRACKER_HANDLE__* NextIndicateReceiveNetBufferListsTracker;
  /* 0x0208 */ struct _NDIS_OBJECT_HEADER* NextIndicateReceiveNetBufferListsObject;
  /* 0x0210 */ void* NextReturnNetBufferListsHandler /* function */;
  /* 0x0218 */ void* NextReturnNetBufferListsContext;
  /* 0x0220 */ struct NDIS_NBL_TRACKER_HANDLE__* NextReturnNetBufferListsTracker;
  /* 0x0228 */ struct _NDIS_OBJECT_HEADER* NextReturnNetBufferListsObject;
  /* 0x0230 */ void* NextCancelSendNetBufferListsHandler /* function */;
  /* 0x0238 */ void* NextCancelSendNetBufferListsContext;
  /* 0x0240 */ struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS Characteristics;
  /* 0x0270 */ void* FilterSendNetBufferListsHandler /* function */;
  /* 0x0278 */ void* FilterIndicateReceiveNetBufferListsHandler /* function */;
  /* 0x0280 */ void* FilterCancelSendNetBufferListsHandler /* function */;
  /* 0x0288 */ void* InitiateOffloadCompleteHandler /* function */;
  /* 0x0290 */ void* TerminateOffloadCompleteHandler /* function */;
  /* 0x0298 */ void* UpdateOffloadCompleteHandler /* function */;
  /* 0x02a0 */ void* InvalidateOffloadCompleteHandler /* function */;
  /* 0x02a8 */ void* QueryOffloadCompleteHandler /* function */;
  /* 0x02b0 */ void* IndicateOffloadEventHandler /* function */;
  /* 0x02b8 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x02c0 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x02c8 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x02d0 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x02d8 */ void* TcpOffloadEventHandler /* function */;
  /* 0x02e0 */ void* TcpOffloadReceiveIndicateHandler /* function */;
  /* 0x02e8 */ void* InitiateOffloadHandler /* function */;
  /* 0x02f0 */ void* TerminateOffloadHandler /* function */;
  /* 0x02f8 */ void* UpdateOffloadHandler /* function */;
  /* 0x0300 */ void* InvalidateOffloadHandler /* function */;
  /* 0x0308 */ void* QueryOffloadHandler /* function */;
  /* 0x0310 */ void* TcpOffloadReceiveReturnHandler /* function */;
  /* 0x0318 */ struct NDIS_NBL_TRACKER_HANDLE__* NblTracker;
  /* 0x0320 */ struct _NDIS_FILTER_TASK_OFFLOAD* Offload;
  /* 0x0328 */ struct _GUID InterfaceGuid;
  /* 0x0338 */ unsigned long IfIndex;
  /* 0x0340 */ struct _NDIS_IF_BLOCK* IfBlock;
  /* 0x0348 */ void* NextDirectRequestHandle;
  /* 0x0350 */ unsigned long DirectOidRequestCount;
  /* 0x0358 */ struct _SINGLE_LIST_ENTRY WOLPatternList;
  /* 0x0360 */ struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
  /* 0x0368 */ struct _NDIS_PM_PARAMETERS PMCurrentParameters;
  /* 0x037c */ long __PADDING__[1];
} NDIS_FILTER_BLOCK, *PNDIS_FILTER_BLOCK; /* size: 0x0380 */

typedef struct _NDIS_FILTER_DRIVER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_FILTER_DRIVER_BLOCK* NextFilterDriver;
  /* 0x0010 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0018 */ struct _NDIS_FILTER_BLOCK* FilterQueue;
  /* 0x0020 */ void* FilterDriverContext;
  /* 0x0028 */ unsigned __int64 Lock;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0038 */ struct _LIST_ENTRY DeviceList;
  /* 0x0048 */ struct _REFERENCE_EX Ref;
  /* 0x0060 */ struct _NDIS_FILTER_DRIVER_CHARACTERISTICS DefaultFilterCharacteristics;
  /* 0x0140 */ void* InitiateOffloadCompleteHandler /* function */;
  /* 0x0148 */ void* TerminateOffloadCompleteHandler /* function */;
  /* 0x0150 */ void* UpdateOffloadCompleteHandler /* function */;
  /* 0x0158 */ void* InvalidateOffloadCompleteHandler /* function */;
  /* 0x0160 */ void* QueryOffloadCompleteHandler /* function */;
  /* 0x0168 */ void* IndicateOffloadEventHandler /* function */;
  /* 0x0170 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0178 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x0180 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0188 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x0190 */ void* TcpOffloadEventHandler /* function */;
  /* 0x0198 */ void* TcpOffloadReceiveIndicateHandler /* function */;
  /* 0x01a0 */ void* InitiateOffloadHandler /* function */;
  /* 0x01a8 */ void* TerminateOffloadHandler /* function */;
  /* 0x01b0 */ void* UpdateOffloadHandler /* function */;
  /* 0x01b8 */ void* InvalidateOffloadHandler /* function */;
  /* 0x01c0 */ void* QueryOffloadHandler /* function */;
  /* 0x01c8 */ void* TcpOffloadReceiveReturnHandler /* function */;
  /* 0x01d0 */ enum _NDIS_FILTER_TYPE FilterType;
  /* 0x01d4 */ enum _NDIS_FILTER_RUN_TYPE FilterRunType;
  /* 0x01d8 */ struct _UNICODE_STRING FilterClass;
  /* 0x01e8 */ struct _UNICODE_STRING ImageName;
} NDIS_FILTER_DRIVER_BLOCK, *PNDIS_FILTER_DRIVER_BLOCK; /* size: 0x01f8 */

typedef struct _NDIS_FILTER_DRIVER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char MajorNdisVersion;
  /* 0x0005 */ unsigned char MinorNdisVersion;
  /* 0x0006 */ unsigned char MajorDriverVersion;
  /* 0x0007 */ unsigned char MinorDriverVersion;
  /* 0x0008 */ unsigned long Flags;
  /* 0x0010 */ struct _UNICODE_STRING FriendlyName;
  /* 0x0020 */ struct _UNICODE_STRING UniqueName;
  /* 0x0030 */ struct _UNICODE_STRING ServiceName;
  /* 0x0040 */ void* SetOptionsHandler /* function */;
  /* 0x0048 */ void* SetFilterModuleOptionsHandler /* function */;
  /* 0x0050 */ void* AttachHandler /* function */;
  /* 0x0058 */ void* DetachHandler /* function */;
  /* 0x0060 */ void* RestartHandler /* function */;
  /* 0x0068 */ void* PauseHandler /* function */;
  /* 0x0070 */ void* SendNetBufferListsHandler /* function */;
  /* 0x0078 */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0080 */ void* CancelSendNetBufferListsHandler /* function */;
  /* 0x0088 */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x0090 */ void* ReturnNetBufferListsHandler /* function */;
  /* 0x0098 */ void* OidRequestHandler /* function */;
  /* 0x00a0 */ void* OidRequestCompleteHandler /* function */;
  /* 0x00a8 */ void* CancelOidRequestHandler /* function */;
  /* 0x00b0 */ void* DevicePnPEventNotifyHandler /* function */;
  /* 0x00b8 */ void* NetPnPEventHandler /* function */;
  /* 0x00c0 */ void* StatusHandler /* function */;
  /* 0x00c8 */ void* DirectOidRequestHandler /* function */;
  /* 0x00d0 */ void* DirectOidRequestCompleteHandler /* function */;
  /* 0x00d8 */ void* CancelDirectOidRequestHandler /* function */;
} NDIS_FILTER_DRIVER_CHARACTERISTICS, *PNDIS_FILTER_DRIVER_CHARACTERISTICS; /* size: 0x00e0 */

typedef struct _NDIS_FILTER_INTERFACE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long FilterType;
  /* 0x000c */ unsigned long FilterRunType;
  /* 0x0010 */ unsigned long IfIndex;
  /* 0x0018 */ union _NET_LUID_LH NetLuid;
  /* 0x0020 */ struct _UNICODE_STRING FilterClass;
  /* 0x0030 */ struct _UNICODE_STRING FilterInstanceName;
} NDIS_FILTER_INTERFACE, *PNDIS_FILTER_INTERFACE; /* size: 0x0040 */

typedef struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* SendNetBufferListsHandler /* function */;
  /* 0x0010 */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0018 */ void* CancelSendNetBufferListsHandler /* function */;
  /* 0x0020 */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x0028 */ void* ReturnNetBufferListsHandler /* function */;
} NDIS_FILTER_PARTIAL_CHARACTERISTICS, *PNDIS_FILTER_PARTIAL_CHARACTERISTICS; /* size: 0x0030 */

typedef struct _NDIS_FILTER_PAUSE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long PauseReason;
} NDIS_FILTER_PAUSE_PARAMETERS, *PNDIS_FILTER_PAUSE_PARAMETERS; /* size: 0x000c */

typedef struct _NDIS_FILTER_RESTART_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_MEDIUM MiniportMediaType;
  /* 0x0008 */ enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
  /* 0x0010 */ struct _NDIS_RESTART_ATTRIBUTES* RestartAttributes;
  /* 0x0018 */ unsigned long LowerIfIndex;
  /* 0x0020 */ union _NET_LUID_LH LowerIfNetLuid;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ long __PADDING__[1];
} NDIS_FILTER_RESTART_PARAMETERS, *PNDIS_FILTER_RESTART_PARAMETERS; /* size: 0x0030 */

typedef enum _NDIS_FILTER_RUN_TYPE
{
  NdisFilterRunTypeMandatory = 1,
  NdisFilterRunTypeOptional = 2,
} NDIS_FILTER_RUN_TYPE, *PNDIS_FILTER_RUN_TYPE;

typedef enum _NDIS_FILTER_STATE
{
  NdisFilterDetached = 0,
  NdisFilterAttaching = 1,
  NdisFilterPaused = 2,
  NdisFilterRestarting = 3,
  NdisFilterRunning = 4,
  NdisFilterPausing = 5,
  NdisFilterDetaching = 6,
} NDIS_FILTER_STATE, *PNDIS_FILTER_STATE;

typedef struct _NDIS_FILTER_TASK_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OFFLOAD OffloadCaps;
} NDIS_FILTER_TASK_OFFLOAD, *PNDIS_FILTER_TASK_OFFLOAD; /* size: 0x009c */

typedef enum _NDIS_FILTER_TYPE
{
  NdisFilterTypeMonitoring = 1,
  NdisFilterTypeModifying = 2,
} NDIS_FILTER_TYPE, *PNDIS_FILTER_TYPE;

typedef enum _NDIS_FPNP_REFTAG
{
  FPNPREF_FCANCELOID = 0,
  FPNPREF_PCANCELOID = 1,
  FPNPREF_PCANCELDOID = 2,
  FPNPREF_FCANCELDOID = 3,
  FPNPREF_DOCANCELDOID = 4,
  FPNPREF_DPNPNOTIFYF = 5,
  FPNPREF_DPNPNOTIFYM = 6,
  FPNPREF_DPNPNOTIFYT = 7,
  FPNPREF_FSTATUS = 8,
  FPNPREF_MSTATS = 9,
  FPNPREF_NPNPEVENT = 10,
  FPNPREF_IFTOP = 11,
  FPNPREF_OIDQUEUED = 12,
  FPNPREF_FSYNCOID = 13,
  FPNPREF_PSYNCOID = 14,
  FPNPREF_OIDPENDING = 15,
  FPNPREF_DOIDPENDING = 16,
  FPNPREF_OIDSEARCH = 17,
  FPNPREF_DOIDSEARCH = 18,
  FPNPREF_COMPLETEOID = 19,
  FPNPREF_DOIDCOMPLETE = 20,
  FPNPREF_PREDETACH = 21,
  FPNPREF_NUMBER_OF_TAGS = 22,
} NDIS_FPNP_REFTAG, *PNDIS_FPNP_REFTAG;

typedef enum _NDIS_FRAME_HEADER
{
  NdisFrameHeaderUndefined = 0,
  NdisFrameHeaderMac = 1,
  NdisFrameHeaderArp = 2,
  NdisFrameHeaderIPv4 = 3,
  NdisFrameHeaderIPv6 = 4,
  NdisFrameHeaderUdp = 5,
  NdisFrameHeaderMaximum = 6,
} NDIS_FRAME_HEADER, *PNDIS_FRAME_HEADER;

typedef struct _NDIS_FRAME_TYPE_AND_OPEN
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0008 */ struct _NDIS_OPEN_BLOCK* Open;
} NDIS_FRAME_TYPE_AND_OPEN, *PNDIS_FRAME_TYPE_AND_OPEN; /* size: 0x0010 */

typedef struct _NDIS_FRAME_TYPE_RECORD
{
  /* 0x0000 */ unsigned int NumEntries;
  /* 0x0008 */ struct _NDIS_FRAME_TYPE_AND_OPEN Entry[16];
} NDIS_FRAME_TYPE_RECORD, *PNDIS_FRAME_TYPE_RECORD; /* size: 0x0108 */

typedef struct _NDIS_GENERIC_OBJECT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* Caller;
  /* 0x0010 */ void* CallersCaller;
  /* 0x0018 */ struct _DRIVER_OBJECT* DriverObject;
} NDIS_GENERIC_OBJECT, *PNDIS_GENERIC_OBJECT; /* size: 0x0020 */

typedef struct _NDIS_GLOBAL_TRIAGE_BLOCK
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned short Revision;
  /* 0x0006 */ unsigned short Size;
  /* 0x0008 */ unsigned short MiniportBlockSize;
  /* 0x000a */ unsigned short MiniportAdapterContextOffset;
  /* 0x000c */ unsigned short AdapterInstanceNameOffset;
  /* 0x000e */ unsigned short MiniportLowestFilterOffset;
  /* 0x0010 */ unsigned short MiniportOpenQueueOffset;
  /* 0x0012 */ unsigned short MiniportDriverHandleOffset;
  /* 0x0014 */ unsigned short MiniportPendingOidOffset;
  /* 0x0016 */ unsigned short MiniportSymbolicLinkOffset;
  /* 0x0018 */ unsigned short MDriverBlockSize;
  /* 0x001a */ unsigned short MiniportServiceNameOffset;
  /* 0x001c */ unsigned short MiniportImageNameOffset;
  /* 0x001e */ unsigned short FilterBlockSize;
  /* 0x0020 */ unsigned short FilterDriverOffset;
  /* 0x0022 */ unsigned short FilterModuleContextOffset;
  /* 0x0024 */ unsigned short FilterHigherFilterOffset;
  /* 0x0026 */ unsigned short FilterFriendlyNameOffset;
  /* 0x0028 */ unsigned short FilterPendingOidOffset;
  /* 0x002a */ unsigned short FilterMiniportOffset;
  /* 0x002c */ unsigned short FilterDriverBlockSize;
  /* 0x002e */ unsigned short FilterDriverFriendlyNameOffset;
  /* 0x0030 */ unsigned short FilterServiceNameOffset;
  /* 0x0032 */ unsigned short FilterImageNameOffset;
  /* 0x0034 */ unsigned short OpenBlockSize;
  /* 0x0036 */ unsigned short ProtocolHandleOffset;
  /* 0x0038 */ unsigned short ProtocolBindingContextOffset;
  /* 0x003a */ unsigned short MiniportNextOpenOffset;
  /* 0x003c */ unsigned short OpenMiniportOffset;
  /* 0x003e */ unsigned short ProtocolBlockSize;
  /* 0x0040 */ unsigned short ProtocolNameOffset;
  /* 0x0042 */ unsigned short ProtocolImageNameOffset;
  /* 0x0044 */ unsigned short NBLPoolListOffset;
  /* 0x0046 */ unsigned short AllocatedListOffset;
  /* 0x0048 */ unsigned short OwnerHandleOffset;
  /* 0x004a */ unsigned short LookasideListOffset;
  /* 0x004c */ unsigned short EntryLinkageOffset;
  /* 0x004e */ unsigned short EntryHeaderSize;
  /* 0x0050 */ unsigned short LookasideListSize;
  /* 0x0052 */ unsigned short SListHeadOffset;
  /* 0x0054 */ unsigned short BackupSListHeadOffset;
  /* 0x0056 */ unsigned short NblSize;
  /* 0x0058 */ unsigned short NblCurrentOwnerOffset;
  /* 0x005a */ unsigned short SourceHandleOffset;
  /* 0x005c */ unsigned short NdisOidRequestSize;
  /* 0x005e */ unsigned short NdisTrackNblOwner;
  /* 0x0060 */ unsigned short MaxNumberOfProcessors;
  /* 0x0068 */ unsigned __int64 GlobalNetBufferListPoolList;
  /* 0x0070 */ unsigned __int64 BugcheckMiniport;
  /* 0x0078 */ unsigned __int64 PendingNBL[32];
  /* 0x0178 */ unsigned short PendingNBLCount[32];
  /* 0x01b8 */ unsigned short NblTrackerContextOffset;
  /* 0x01ba */ char __PADDING__[6];
} NDIS_GLOBAL_TRIAGE_BLOCK, *PNDIS_GLOBAL_TRIAGE_BLOCK; /* size: 0x01c0 */

typedef struct _NDIS_GUID
{
  /* 0x0000 */ struct _GUID Guid;
  union
  {
    /* 0x0010 */ unsigned long Oid;
    /* 0x0010 */ int Status;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long Size;
  /* 0x0018 */ unsigned long Flags;
} NDIS_GUID, *PNDIS_GUID; /* size: 0x001c */

typedef enum _NDIS_HALT_ACTION
{
  NdisHaltDeviceDisabled = 0,
  NdisHaltDeviceInstanceDeInitialized = 1,
  NdisHaltDevicePoweredDown = 2,
  NdisHaltDeviceSurpriseRemoved = 3,
  NdisHaltDeviceFailed = 4,
  NdisHaltDeviceInitializationFailed = 5,
  NdisHaltDeviceStopped = 6,
} NDIS_HALT_ACTION, *PNDIS_HALT_ACTION;

typedef struct _NDIS_HD_SPLIT_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long HardwareCapabilities;
  /* 0x0008 */ unsigned long CurrentCapabilities;
  /* 0x000c */ unsigned long HDSplitFlags;
  /* 0x0010 */ unsigned long BackfillSize;
  /* 0x0014 */ unsigned long MaxHeaderSize;
} NDIS_HD_SPLIT_ATTRIBUTES, *PNDIS_HD_SPLIT_ATTRIBUTES; /* size: 0x0018 */

typedef struct _NDIS_HD_SPLIT_CURRENT_CONFIG
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long HardwareCapabilities;
  /* 0x0008 */ unsigned long CurrentCapabilities;
  /* 0x000c */ unsigned long HDSplitFlags;
  /* 0x0010 */ unsigned long HDSplitCombineFlags;
  /* 0x0014 */ unsigned long BackfillSize;
  /* 0x0018 */ unsigned long MaxHeaderSize;
} NDIS_HD_SPLIT_CURRENT_CONFIG, *PNDIS_HD_SPLIT_CURRENT_CONFIG; /* size: 0x001c */

typedef struct _NDIS_IF_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _LIST_ENTRY Link;
  /* 0x0018 */ struct _LIST_ENTRY ProviderLink;
  /* 0x0028 */ struct _LIST_ENTRY NetworkLink;
  /* 0x0038 */ struct _NDIS_IF_RCV_ADDRESS* ifRcvAddressTable;
  /* 0x0040 */ unsigned long ifRcvAddressCount;
  /* 0x0044 */ unsigned long ifMaxRcvAddressCount;
  /* 0x0048 */ unsigned long LowerLayerIfCount;
  /* 0x004c */ unsigned long HigherLayerIfCount;
  /* 0x0050 */ long Ref;
  /* 0x0058 */ union _NET_LUID_LH NetLuid;
  /* 0x0060 */ void* ProviderIfContext;
  /* 0x0068 */ struct _NDIS_IF_PROVIDER_BLOCK* ProviderHandle;
  /* 0x0070 */ unsigned long Flags;
  /* 0x0074 */ struct _NET_PHYSICAL_LOCATION_LH PhysicalLocation;
  /* 0x0080 */ unsigned long WanTunnelType;
  /* 0x0084 */ unsigned long PortNumber;
  /* 0x0088 */ unsigned __int64 ifLastChange;
  /* 0x0090 */ unsigned __int64 ifCounterDiscontinuityTime;
  union
  {
    /* 0x0098 */ unsigned char RosInfo;
    /* 0x0098 */ unsigned long ifIndex;
  }; /* size: 0x0004 */
  /* 0x009c */ struct _IF_COUNTED_STRING_LH ifDescr;
  /* 0x02a0 */ unsigned short ifType;
  /* 0x02a4 */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x02a8 */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x02ac */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x02b0 */ struct _GUID InterfaceGuid;
  /* 0x02c0 */ unsigned char ifConnectorPresent;
  /* 0x02c4 */ unsigned long ifFlags;
  /* 0x02c8 */ enum _NDIS_MEDIUM MediaType;
  /* 0x02cc */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
  union
  {
    /* 0x02d0 */ unsigned char RodInfo;
    /* 0x02d0 */ unsigned int CompartmentId;
  }; /* size: 0x0004 */
  /* 0x02d4 */ struct _GUID NetworkGuid;
  /* 0x02e4 */ struct _IF_COUNTED_STRING_LH ifAlias;
  /* 0x04e8 */ enum _NET_IF_OPER_STATUS ifOperStatus;
  /* 0x04ec */ unsigned long ifOperStatusFlags;
  /* 0x04f0 */ unsigned long ifMtu;
  /* 0x04f4 */ struct _IF_PHYSICAL_ADDRESS_LH ifPhysAddress;
  /* 0x0516 */ struct _IF_PHYSICAL_ADDRESS_LH PermanentPhysAddress;
  /* 0x0538 */ enum _NET_IF_ADMIN_STATUS ifAdminStatus;
  /* 0x0540 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0548 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0550 */ unsigned char ifPromiscuousMode;
  /* 0x0551 */ unsigned char ifDeviceWakeUpEnable;
  /* 0x0554 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0558 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0560 */ struct _NDIS_IF_NETWORK_BLOCK* Network;
  /* 0x0568 */ struct _NDIS_IF_COMPARTMENT_BLOCK* Compartment;
  /* 0x0570 */ struct _KEVENT* AsyncEvent;
  /* 0x0578 */ unsigned char bNdisIsProvider;
  /* 0x0579 */ unsigned char IsNdisFilter;
  /* 0x057a */ unsigned char MiniportAvailable;
  /* 0x057c */ unsigned long MiniportLinkReference;
  union
  {
    /* 0x0580 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
    /* 0x0580 */ struct _NDIS_FILTER_BLOCK* Filter;
  }; /* size: 0x0008 */
  /* 0x0588 */ unsigned long SupportedStatistics;
  /* 0x0590 */ struct _IF_COUNTED_STRING_LH* ifL2NetworkInfo;
  /* 0x0598 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
  /* 0x05a0 */ struct NDIS_REFCOUNT_HANDLE__* MpRefCountTracker;
} NDIS_IF_BLOCK, *PNDIS_IF_BLOCK; /* size: 0x05a8 */

typedef struct _NDIS_IF_COMPARTMENT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ unsigned int CompartmentId;
  /* 0x0018 */ struct _LIST_ENTRY NetworkLink;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ long Ref;
  /* 0x0030 */ struct _NDIS_IF_NETWORK_BLOCK* LoopbackNetwork;
  /* 0x0038 */ struct _NDIS_NSI_COMPARTMENT_RW LoopbackInfo;
  /* 0x0488 */ struct _NDIS_IF_BLOCK* LoopbackIf;
  /* 0x0490 */ struct _KEVENT* AsyncEvent;
} NDIS_IF_COMPARTMENT_BLOCK, *PNDIS_IF_COMPARTMENT_BLOCK; /* size: 0x0498 */

typedef struct _NDIS_IF_NETWORK_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ struct _LIST_ENTRY CompartmentLink;
  /* 0x0020 */ struct _GUID NetworkGuid;
  /* 0x0030 */ struct _NDIS_IF_COMPARTMENT_BLOCK* Compartment;
  /* 0x0038 */ struct _LIST_ENTRY InterfaceLink;
  /* 0x0048 */ unsigned long Flags;
  /* 0x004c */ long Ref;
  /* 0x0050 */ struct _NDIS_NSI_NETWORK_RW NetworkInfo;
  /* 0x0260 */ struct _KEVENT* AsyncEvent;
} NDIS_IF_NETWORK_BLOCK, *PNDIS_IF_NETWORK_BLOCK; /* size: 0x0268 */

typedef struct _NDIS_IF_PROVIDER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _LIST_ENTRY Link;
  /* 0x0018 */ struct _LIST_ENTRY IfList;
  /* 0x0028 */ void* IfProviderContext;
  /* 0x0030 */ struct _NDIS_IF_PROVIDER_CHARACTERISTICS ProviderCharacteristics;
} NDIS_IF_PROVIDER_BLOCK, *PNDIS_IF_PROVIDER_BLOCK; /* size: 0x0058 */

typedef struct _NDIS_IF_PROVIDER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* QueryObjectHandler /* function */;
  /* 0x0010 */ void* SetObjectHandler /* function */;
  /* 0x0018 */ void* Reserved1;
  /* 0x0020 */ void* Reserved2;
} NDIS_IF_PROVIDER_CHARACTERISTICS, *PNDIS_IF_PROVIDER_CHARACTERISTICS; /* size: 0x0028 */

typedef struct _NDIS_IF_RCV_ADDRESS
{
  union
  {
    /* 0x0000 */ unsigned char RodInfo;
    /* 0x0000 */ enum _NET_IF_RCV_ADDRESS_TYPE ifRcvAddressType;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short ifRcvAddressLength;
  /* 0x0008 */ unsigned char ifRcvAddress[32];
} NDIS_IF_RCV_ADDRESS, *PNDIS_IF_RCV_ADDRESS; /* size: 0x0028 */

typedef enum _NDIS_IF_REFTAG
{
  IFREF_REGISTER = 0,
  IFREF_GETII = 1,
  IFREF_TOPGETII = 2,
  IFREF_GETALL = 3,
  IFREF_TOPGETALL = 4,
  IFREF_SET = 5,
  IFREF_ENUMALL = 6,
  IFREF_TOPENUMALL = 7,
  IFREF_GETRCVADDR = 8,
  IFREF_GETALLRCVADDR = 9,
  IFREF_ASYNCCHANGE = 10,
  IFREF_CHALIAS = 11,
  IFREF_MINIPORT = 12,
  IFREF_SETDESCR = 13,
  IFREF_CHII = 14,
  IFREF_NUMBER_OF_TAGS = 15,
} NDIS_IF_REFTAG, *PNDIS_IF_REFTAG;

typedef struct _NDIS_IF_STACK_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ unsigned long HigherLayerIfIndex;
  /* 0x0014 */ unsigned long LowerLayerIfIndex;
  /* 0x0018 */ struct _NDIS_IF_BLOCK* HigherLayerIf;
  /* 0x0020 */ struct _NDIS_IF_BLOCK* LowerLayerIf;
} NDIS_IF_STACK_ENTRY, *PNDIS_IF_STACK_ENTRY; /* size: 0x0028 */

typedef enum _NDIS_INTERFACE_TYPE
{
  NdisInterfaceInternal = 0,
  NdisInterfaceIsa = 1,
  NdisInterfaceEisa = 2,
  NdisInterfaceMca = 3,
  NdisInterfaceTurboChannel = 4,
  NdisInterfacePci = 5,
  NdisInterfacePcMcia = 8,
  NdisInterfaceCBus = 9,
  NdisInterfaceMPIBus = 10,
  NdisInterfaceMPSABus = 11,
  NdisInterfaceProcessorInternal = 12,
  NdisInterfaceInternalPowerBus = 13,
  NdisInterfacePNPISABus = 14,
  NdisInterfacePNPBus = 15,
  NdisInterfaceUSB = 16,
  NdisInterfaceIrda = 17,
  NdisInterface1394 = 18,
  NdisMaximumInterfaceType = 19,
} NDIS_INTERFACE_TYPE, *PNDIS_INTERFACE_TYPE;

typedef struct _NDIS_INTERRUPT_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ volatile unsigned char IsDeregistered;
  /* 0x0008 */ void* MiniportInterruptContext;
  /* 0x0010 */ void* MiniportIsr /* function */;
  /* 0x0018 */ void* MiniportDpc /* function */;
  /* 0x0020 */ struct _KDPC InterruptDpc;
  /* 0x0060 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0068 */ volatile long DpcCount;
  /* 0x0070 */ struct _KDPC* Dpc;
  union
  {
    /* 0x0078 */ void* Generic;
    /* 0x0078 */ struct _KINTERRUPT* InterruptObject;
    /* 0x0078 */ struct _IO_INTERRUPT_MESSAGE_INFO* MessageInfoTable;
  }; /* size: 0x0008 */
  /* 0x0080 */ struct _KEVENT DpcsCompletedEvent;
  /* 0x0098 */ unsigned char SharedInterrupt;
  /* 0x0099 */ unsigned char IsrRequested;
  /* 0x00a0 */ struct _NDIS_INTERRUPT_BLOCK* NextInterrupt;
  /* 0x00a8 */ enum _KINTERRUPT_MODE InterruptMode;
  /* 0x00b0 */ void* MiniportMessageIsr /* function */;
  /* 0x00b8 */ void* MiniportMessageInterruptDpc /* function */;
  /* 0x00c0 */ unsigned char MsiSupported;
  /* 0x00c1 */ unsigned char MessageUsed;
  /* 0x00c8 */ unsigned __int64 MessagesSyncLock;
  /* 0x00d0 */ struct _IO_INTERRUPT_MESSAGE_INFO* NdisMessageInfoTable;
  /* 0x00d8 */ struct _NDIS_DPC_WORK_ITEM* DpcWorkItems;
  /* 0x00e0 */ struct _KDPC* MsgDpc;
} NDIS_INTERRUPT_BLOCK, *PNDIS_INTERRUPT_BLOCK; /* size: 0x00e8 */

typedef enum _NDIS_INTERRUPT_MODERATION
{
  NdisInterruptModerationUnknown = 0,
  NdisInterruptModerationNotSupported = 1,
  NdisInterruptModerationEnabled = 2,
  NdisInterruptModerationDisabled = 3,
} NDIS_INTERRUPT_MODERATION, *PNDIS_INTERRUPT_MODERATION;

typedef struct _NDIS_INTERRUPT_MODERATION_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_INTERRUPT_MODERATION InterruptModeration;
} NDIS_INTERRUPT_MODERATION_PARAMETERS, *PNDIS_INTERRUPT_MODERATION_PARAMETERS; /* size: 0x000c */

typedef enum _NDIS_INTERRUPT_TYPE
{
  NDIS_CONNECT_LINE_BASED = 1,
  NDIS_CONNECT_MESSAGE_BASED = 2,
} NDIS_INTERRUPT_TYPE, *PNDIS_INTERRUPT_TYPE;

typedef struct _NDIS_IPSEC_OFFLOAD_V1
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    /* 0x0004 */ unsigned long AhEspCombined;
    /* 0x0008 */ unsigned long TransportTunnelCombined;
    /* 0x000c */ unsigned long IPv4Options;
    /* 0x0010 */ unsigned long Flags;
  } /* size: 0x0014 */ Supported;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long Md5 : 2; /* bit position: 0 */
      /* 0x0014 */ unsigned long Sha_1 : 2; /* bit position: 2 */
      /* 0x0014 */ unsigned long Transport : 2; /* bit position: 4 */
      /* 0x0014 */ unsigned long Tunnel : 2; /* bit position: 6 */
      /* 0x0014 */ unsigned long Send : 2; /* bit position: 8 */
      /* 0x0014 */ unsigned long Receive : 2; /* bit position: 10 */
    }; /* bitfield */
  } /* size: 0x0004 */ IPv4AH;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0018 */ unsigned long Des : 2; /* bit position: 0 */
      /* 0x0018 */ unsigned long Reserved : 2; /* bit position: 2 */
      /* 0x0018 */ unsigned long TripleDes : 2; /* bit position: 4 */
      /* 0x0018 */ unsigned long NullEsp : 2; /* bit position: 6 */
      /* 0x0018 */ unsigned long Transport : 2; /* bit position: 8 */
      /* 0x0018 */ unsigned long Tunnel : 2; /* bit position: 10 */
      /* 0x0018 */ unsigned long Send : 2; /* bit position: 12 */
      /* 0x0018 */ unsigned long Receive : 2; /* bit position: 14 */
    }; /* bitfield */
  } /* size: 0x0004 */ IPv4ESP;
} NDIS_IPSEC_OFFLOAD_V1, *PNDIS_IPSEC_OFFLOAD_V1; /* size: 0x001c */

typedef struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ void* OffloadHandle;
    } /* size: 0x0008 */ Transmit;
    struct
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned short SaDeleteReq : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned short CryptoDone : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned short NextCryptoDone : 1; /* bit position: 2 */
          /* 0x0000 */ unsigned short Pad : 13; /* bit position: 3 */
        }; /* bitfield */
        /* 0x0002 */ unsigned short CryptoStatus;
      } /* size: 0x0004 */ Receive;
      /* 0x0004 */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO; /* size: 0x0008 */

typedef struct _NDIS_IPSEC_OFFLOAD_V2
{
  /* 0x0000 */ unsigned long Encapsulation;
  /* 0x0004 */ unsigned char IPv6Supported;
  /* 0x0005 */ unsigned char IPv4Options;
  /* 0x0006 */ unsigned char IPv6NonIPsecExtensionHeaders;
  /* 0x0007 */ unsigned char Ah;
  /* 0x0008 */ unsigned char Esp;
  /* 0x0009 */ unsigned char AhEspCombined;
  /* 0x000a */ unsigned char Transport;
  /* 0x000b */ unsigned char Tunnel;
  /* 0x000c */ unsigned char TransportTunnelCombined;
  /* 0x000d */ unsigned char LsoSupported;
  /* 0x000e */ unsigned char ExtendedSequenceNumbers;
  /* 0x0010 */ unsigned long UdpEsp;
  /* 0x0014 */ unsigned long AuthenticationAlgorithms;
  /* 0x0018 */ unsigned long EncryptionAlgorithms;
  /* 0x001c */ unsigned long SaOffloadCapacity;
} NDIS_IPSEC_OFFLOAD_V2, *PNDIS_IPSEC_OFFLOAD_V2; /* size: 0x0020 */

typedef struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NextHeader : 8; /* bit position: 0 */
        /* 0x0000 */ unsigned long PadLength : 8; /* bit position: 8 */
        /* 0x0000 */ unsigned long AhHeaderOffset : 8; /* bit position: 16 */
        /* 0x0000 */ unsigned long EspHeaderOffset : 8; /* bit position: 24 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NextHeader : 8; /* bit position: 0 */
        /* 0x0000 */ unsigned long PadLength : 8; /* bit position: 8 */
        /* 0x0000 */ unsigned long HeaderInfoSet : 1; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ Receive;
  }; /* size: 0x0004 */
} NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO; /* size: 0x0004 */

typedef struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ void* OffloadHandle;
    } /* size: 0x0008 */ Transmit;
    struct
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long SaDeleteReq : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned long CryptoDone : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned long NextCryptoDone : 1; /* bit position: 2 */
          /* 0x0000 */ unsigned long Reserved : 13; /* bit position: 3 */
          /* 0x0000 */ unsigned long CryptoStatus : 16; /* bit position: 16 */
        }; /* bitfield */
      } /* size: 0x0004 */ Receive;
      /* 0x0004 */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO; /* size: 0x0008 */

typedef struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO
{
  struct
  {
    /* 0x0000 */ void* TunnelHandle;
  } /* size: 0x0008 */ Transmit;
} NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO; /* size: 0x0008 */

typedef struct _NDIS_IPSEC_PACKET_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ void* OffloadHandle;
      /* 0x0008 */ void* NextOffloadHandle;
    } /* size: 0x0010 */ Transmit;
    struct
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long SA_DELETE_REQ : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned long CRYPTO_DONE : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned long NEXT_CRYPTO_DONE : 1; /* bit position: 2 */
        }; /* bitfield */
        /* 0x0004 */ unsigned long CryptoStatus;
      } /* size: 0x0008 */ Receive;
      /* 0x0008 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} NDIS_IPSEC_PACKET_INFO, *PNDIS_IPSEC_PACKET_INFO; /* size: 0x0010 */

typedef enum _NDIS_IPV4_HEADER_FIELD
{
  NdisIPv4HeaderFieldUndefined = 0,
  NdisIPv4HeaderFieldProtocol = 1,
  NdisIPv4HeaderFieldMaximum = 2,
} NDIS_IPV4_HEADER_FIELD, *PNDIS_IPV4_HEADER_FIELD;

typedef enum _NDIS_IPV6_HEADER_FIELD
{
  NdisIPv6HeaderFieldUndefined = 0,
  NdisIPv6HeaderFieldProtocol = 1,
  NdisIPv6HeaderFieldMaximum = 2,
} NDIS_IPV6_HEADER_FIELD, *PNDIS_IPV6_HEADER_FIELD;

typedef struct _NDIS_IRP_WORK_ITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM Item;
  /* 0x0020 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0028 */ struct _IRP* Irp;
} NDIS_IRP_WORK_ITEM, *PNDIS_IRP_WORK_ITEM; /* size: 0x0030 */

typedef struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY
{
  /* 0x0000 */ struct _NET_BUFFER_LIST* FirstNbl;
  /* 0x0008 */ struct _NET_BUFFER_LIST* LastNbl;
  /* 0x0010 */ unsigned long NumNbls;
  /* 0x0014 */ unsigned char IterationInProgress;
  struct /* bitfield */
  {
    /* 0x0015 */ unsigned char SameFlags : 1; /* bit position: 0 */
    /* 0x0015 */ unsigned char SamePort : 1; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long Port;
} NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY, *PNDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY; /* size: 0x0020 */

typedef struct _NDIS_LINK_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0008 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0010 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0018 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x001c */ unsigned long AutoNegotiationFlags;
} NDIS_LINK_PARAMETERS, *PNDIS_LINK_PARAMETERS; /* size: 0x0020 */

typedef struct _NDIS_LINK_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0008 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0010 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0018 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0020 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x0024 */ unsigned long AutoNegotiationFlags;
} NDIS_LINK_STATE, *PNDIS_LINK_STATE; /* size: 0x0028 */

typedef struct _NDIS_LOG
{
  /* 0x0000 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0008 */ unsigned __int64 LogLock;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0018 */ unsigned int TotalSize;
  /* 0x001c */ unsigned int CurrentSize;
  /* 0x0020 */ unsigned int InPtr;
  /* 0x0024 */ unsigned int OutPtr;
  /* 0x0028 */ unsigned char LogBuf[1];
  /* 0x0029 */ char __PADDING__[7];
} NDIS_LOG, *PNDIS_LOG; /* size: 0x0030 */

typedef enum _NDIS_LWFDRV_REFTAG
{
  LWFDRV_CHECKMINI = 0,
  LWFDRV_ATTACHING = 1,
  LWFDRV_ATTACHONE = 2,
  LWFDRV_CHECKALL = 3,
  LWFDRV_NOTIFYPNP = 4,
  LWFDRV_IOWORKITEM = 5,
  LWFDRV_IOWORKITEMC = 6,
  LWFDRV_SQM = 7,
  LWFDRV_FILTERMODULE = 8,
  LWFDRV_NUMBER_OF_TAGS = 9,
} NDIS_LWFDRV_REFTAG, *PNDIS_LWFDRV_REFTAG;

typedef enum _NDIS_LWF_REFTAG
{
  LWFREF_DETACHING = 0,
  LWFREF_DETACHMON = 1,
  LWFREF_RESTARTING = 2,
  LWFREF_WORKITEM = 3,
  LWFREF_NUMBER_OF_TAGS = 4,
} NDIS_LWF_REFTAG, *PNDIS_LWF_REFTAG;

typedef enum _NDIS_MAC_HEADER_FIELD
{
  NdisMacHeaderFieldUndefined = 0,
  NdisMacHeaderFieldDestinationAddress = 1,
  NdisMacHeaderFieldSourceAddress = 2,
  NdisMacHeaderFieldProtocol = 3,
  NdisMacHeaderFieldVlanId = 4,
  NdisMacHeaderFieldPriority = 5,
  NdisMacHeaderFieldPacketType = 6,
  NdisMacHeaderFieldMaximum = 7,
} NDIS_MAC_HEADER_FIELD, *PNDIS_MAC_HEADER_FIELD;

typedef enum _NDIS_MDRV_REFTAG
{
  MDRVREF_IMDEINIT = 0,
  MDRVREF_REMOVINGMP = 1,
  MDRVREF_CHECKLWF = 2,
  MDRVREF_MINIPORT = 3,
  MDRVREF_REGISTERED = 4,
  MDRVREF_IOWORKITEM = 5,
  MDRVREF_IOWORKITEMC = 6,
  MDRVREF_NOTIFYMINI = 7,
  MDRVREF_MPREFH = 8,
  MDRVREF_MPREFN = 9,
  MDRVREF_MPREFT = 10,
  MDRVREF_CHECKPT = 11,
  MDRVREF_TIMEROBJDPC = 12,
  MDRVREF_TIMERDPCX = 13,
  MDRVREF_NUMBER_OF_TAGS = 14,
} NDIS_MDRV_REFTAG, *PNDIS_MDRV_REFTAG;

typedef enum _NDIS_MEDIUM
{
  NdisMedium802_3 = 0,
  NdisMedium802_5 = 1,
  NdisMediumFddi = 2,
  NdisMediumWan = 3,
  NdisMediumLocalTalk = 4,
  NdisMediumDix = 5,
  NdisMediumArcnetRaw = 6,
  NdisMediumArcnet878_2 = 7,
  NdisMediumAtm = 8,
  NdisMediumWirelessWan = 9,
  NdisMediumIrda = 10,
  NdisMediumBpc = 11,
  NdisMediumCoWan = 12,
  NdisMedium1394 = 13,
  NdisMediumInfiniBand = 14,
  NdisMediumTunnel = 15,
  NdisMediumNative802_11 = 16,
  NdisMediumLoopback = 17,
  NdisMediumWiMAX = 18,
  NdisMediumIP = 19,
  NdisMediumMax = 20,
} NDIS_MEDIUM, *PNDIS_MEDIUM;

typedef union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES
{
  union
  {
    /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES AddDeviceRegistrationAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES RegistrationAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES GeneralAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES OffloadAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES Native_802_11_Attributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES HardwareAssistAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES NDKAttributes;
  }; /* size: 0x00e0 */
} NDIS_MINIPORT_ADAPTER_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_ATTRIBUTES; /* size: 0x00e0 */

typedef struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_MEDIUM MediaType;
  /* 0x000c */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
  /* 0x0010 */ unsigned long MtuSize;
  /* 0x0018 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x0020 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0028 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x0030 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0038 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x003c */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0040 */ unsigned long LookaheadSize;
  /* 0x0048 */ struct _NDIS_PNP_CAPABILITIES* PowerManagementCapabilities;
  /* 0x0050 */ unsigned long MacOptions;
  /* 0x0054 */ unsigned long SupportedPacketFilters;
  /* 0x0058 */ unsigned long MaxMulticastListSize;
  /* 0x005c */ unsigned short MacAddressLength;
  /* 0x005e */ unsigned char PermanentMacAddress[32];
  /* 0x007e */ unsigned char CurrentMacAddress[32];
  /* 0x00a0 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES* RecvScaleCapabilities;
  /* 0x00a8 */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x00ac */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x00b0 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x00b4 */ unsigned short IfType;
  /* 0x00b6 */ unsigned char IfConnectorPresent;
  /* 0x00b8 */ unsigned long SupportedStatistics;
  /* 0x00bc */ unsigned long SupportedPauseFunctions;
  /* 0x00c0 */ unsigned long DataBackFillSize;
  /* 0x00c4 */ unsigned long ContextBackFillSize;
  /* 0x00c8 */ unsigned long* SupportedOidList;
  /* 0x00d0 */ unsigned long SupportedOidListLength;
  /* 0x00d4 */ unsigned long AutoNegotiationFlags;
  /* 0x00d8 */ struct _NDIS_PM_CAPABILITIES* PowerManagementCapabilitiesEx;
} NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES; /* size: 0x00e0 */

typedef struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_HD_SPLIT_ATTRIBUTES* HDSplitAttributes;
  /* 0x0010 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* HardwareReceiveFilterCapabilities;
  /* 0x0018 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* CurrentReceiveFilterCapabilities;
  /* 0x0020 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* HardwareNicSwitchCapabilities;
  /* 0x0028 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* CurrentNicSwitchCapabilities;
  /* 0x0030 */ struct _NDIS_SRIOV_CAPABILITIES* HardwareSriovCapabilities;
  /* 0x0038 */ struct _NDIS_SRIOV_CAPABILITIES* CurrentSriovCapabilities;
  /* 0x0040 */ struct _NDIS_QOS_CAPABILITIES* HardwareQosCapabilities;
  /* 0x0048 */ struct _NDIS_QOS_CAPABILITIES* CurrentQosCapabilities;
} NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES; /* size: 0x0050 */

typedef struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long OpModeCapability;
  /* 0x0008 */ unsigned long NumOfTXBuffers;
  /* 0x000c */ unsigned long NumOfRXBuffers;
  /* 0x0010 */ unsigned char MultiDomainCapabilityImplemented;
  /* 0x0014 */ unsigned long NumSupportedPhys;
  /* 0x0018 */ struct DOT11_PHY_ATTRIBUTES* SupportedPhyAttributes;
  /* 0x0020 */ struct DOT11_EXTSTA_ATTRIBUTES* ExtSTAAttributes;
  /* 0x0028 */ struct DOT11_VWIFI_ATTRIBUTES* VWiFiAttributes;
  /* 0x0030 */ struct _DOT11_EXTAP_ATTRIBUTES* ExtAPAttributes;
  /* 0x0038 */ struct _DOT11_WFD_ATTRIBUTES* WFDAttributes;
} NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES; /* size: 0x0040 */

typedef struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char Enabled;
  /* 0x0008 */ struct _NDIS_NDK_CAPABILITIES* NdkCapabilities;
} NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES; /* size: 0x0010 */

typedef struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_OFFLOAD* DefaultOffloadConfiguration;
  /* 0x0010 */ struct _NDIS_OFFLOAD* HardwareOffloadCapabilities;
  /* 0x0018 */ struct _NDIS_TCP_CONNECTION_OFFLOAD* DefaultTcpConnectionOffloadConfiguration;
  /* 0x0020 */ struct _NDIS_TCP_CONNECTION_OFFLOAD* TcpConnectionOffloadHardwareCapabilities;
} NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES; /* size: 0x0028 */

typedef struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* MiniportAdapterContext;
  /* 0x0010 */ unsigned long AttributeFlags;
  /* 0x0014 */ unsigned int CheckForHangTimeInSeconds;
  /* 0x0018 */ enum _NDIS_INTERFACE_TYPE InterfaceType;
  /* 0x001c */ long __PADDING__[1];
} NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES; /* size: 0x0020 */

typedef struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* MiniportAddDeviceContext;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES, *PNDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES; /* size: 0x0018 */

typedef struct _NDIS_MINIPORT_AOAC
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ struct _LIST_ENTRY HandleList;
  /* 0x0018 */ long HandleListCount;
  /* 0x0020 */ struct _LIST_ENTRY PendingIrpList;
  /* 0x0030 */ long PendingIrpListCount;
  /* 0x0034 */ long ActiveRef;
  /* 0x0038 */ long PendingPnPOpCount;
  /* 0x003c */ enum _NDIS_TMP_REF_REASON TempRefReason;
  /* 0x0040 */ struct _NDIS_TIMER TempRefTimer;
  /* 0x00c0 */ struct _NDIS_WORK_ITEM TempRefWorkItem;
  /* 0x0110 */ unsigned char TempDerefInProgress;
  /* 0x0114 */ unsigned long DerefTimeoutMilliseconds;
  /* 0x0118 */ unsigned char WakeWorkItemScheduled;
  /* 0x0120 */ struct _NDIS_WORK_ITEM WakeWorkItem;
  /* 0x0170 */ enum _NDIS_NIC_ACTIVE_STATE ActiveState;
  /* 0x0174 */ struct _NDIS_SS_STOP_FLAGS StopFlags;
  /* 0x0178 */ unsigned char SSIdleConfirmed;
  /* 0x0179 */ unsigned char SSIdleConfirmInProgress;
  /* 0x0180 */ struct _KEVENT PowerSuspendCompleteEvent;
  /* 0x0198 */ struct _KEVENT NicQuietCheckCompleteEvent;
  /* 0x01b0 */ unsigned __int64 StartTime;
  /* 0x01b8 */ unsigned short LastUnexpectedFailureLine[2];
  /* 0x01bc */ unsigned char TakeStartToRefTime;
  /* 0x01c0 */ union _LARGE_INTEGER LastWakeTime;
  /* 0x01c8 */ unsigned char TakeWakeToRefTime;
  /* 0x01c9 */ char __PADDING__[7];
} NDIS_MINIPORT_AOAC, *PNDIS_MINIPORT_AOAC; /* size: 0x01d0 */

typedef struct _NDIS_MINIPORT_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_MINIPORT_BLOCK* NextMiniport;
  /* 0x0010 */ struct _NDIS_MINIPORT_BLOCK* BaseMiniport;
  /* 0x0018 */ void* MiniportAdapterContext;
  union
  {
    /* 0x0020 */ struct _UNICODE_STRING Reserved4;
    struct
    {
      /* 0x0020 */ unsigned char MajorNdisVersion;
      /* 0x0021 */ unsigned char MinorNdisVersion;
      /* 0x0028 */ struct _NDIS_PCW_DATA_BLOCK* PcwDataBlock;
    }; /* size: 0x000a */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0030 */ volatile long PcwDatapathEventMask;
    /* 0x0030 */ void* Reserved28;
  }; /* size: 0x0008 */
  /* 0x0038 */ void* OpenQueue;
  /* 0x0040 */ struct _REFERENCE ShortRef;
  union
  {
    /* 0x0050 */ volatile long PcwDatapathCycleMask;
    /* 0x0050 */ void* Reserved29;
  }; /* size: 0x0008 */
  /* 0x0058 */ unsigned char LinkStateIndicationFlags;
  /* 0x0059 */ unsigned char LockAcquired;
  /* 0x005a */ unsigned char PmodeOpens;
  /* 0x005b */ unsigned char LoopbackOpens;
  /* 0x0060 */ unsigned __int64 Lock;
  /* 0x0068 */ void* Reserved25;
  /* 0x0070 */ struct _NDIS_MINIPORT_INTERRUPT* Interrupt;
  /* 0x0078 */ unsigned long Flags;
  /* 0x007c */ unsigned long PnPFlags;
  /* 0x0080 */ struct _LIST_ENTRY PacketList;
  /* 0x0090 */ struct _NDIS_PACKET* FirstPendingPacket;
  /* 0x0098 */ struct _NDIS_PACKET* ReturnPacketsQueue;
  /* 0x00a0 */ unsigned long RequestBuffer;
  /* 0x00a8 */ void* Reserved26;
  /* 0x00b0 */ struct _NDIS_MINIPORT_BLOCK* PrimaryMiniport;
  /* 0x00b8 */ void* NextCancelSendNetBufferListsHandler /* function */;
  /* 0x00c0 */ void* OidContext;
  /* 0x00c8 */ unsigned long SupportedOidListLength;
  /* 0x00d0 */ struct _CM_RESOURCE_LIST* Resources;
  /* 0x00d8 */ struct _NDIS_TIMER WakeUpDpcTimer;
  union
  {
    /* 0x0158 */ struct _UNICODE_STRING Reserved20;
    struct
    {
      /* 0x0158 */ enum _NET_IF_MEDIA_CONNECT_STATE MiniportMediaConnectState;
      /* 0x015c */ enum _NET_IF_MEDIA_DUPLEX_STATE MiniportMediaDuplexState;
    }; /* size: 0x0008 */
  }; /* size: 0x0010 */
  /* 0x0168 */ struct _UNICODE_STRING SymbolicLinkName;
  /* 0x0178 */ unsigned long CheckForHangSeconds;
  /* 0x017c */ unsigned short CFHangTicks;
  /* 0x017e */ unsigned short CFHangCurrentTick;
  /* 0x0180 */ int ResetStatus;
  /* 0x0188 */ void* ResetOpen;
  union
  {
    /* 0x0190 */ struct _X_FILTER* EthDB;
    /* 0x0190 */ struct _X_FILTER* NullDB;
  }; /* size: 0x0008 */
  /* 0x0198 */ struct _X_FILTER* TrDB;
  /* 0x01a0 */ void* YYYDB;
  /* 0x01a8 */ void* XXXDB;
  /* 0x01b0 */ void* PacketIndicateHandler /* function */;
  /* 0x01b8 */ void* SendCompleteHandler /* function */;
  /* 0x01c0 */ void* SendResourcesHandler /* function */;
  /* 0x01c8 */ void* ResetCompleteHandler /* function */;
  /* 0x01d0 */ enum _NDIS_MEDIUM MediaType;
  /* 0x01d4 */ unsigned long AutoNegotiationFlags;
  /* 0x01d8 */ enum _NDIS_INTERFACE_TYPE Reserved5;
  /* 0x01dc */ enum _NDIS_INTERFACE_TYPE AdapterType;
  union
  {
    /* 0x01e0 */ struct _DEVICE_OBJECT* Reserved6;
    /* 0x01e0 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  }; /* size: 0x0008 */
  union
  {
    /* 0x01e8 */ struct _DEVICE_OBJECT* Reserved7;
    /* 0x01e8 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  }; /* size: 0x0008 */
  /* 0x01f0 */ unsigned long* SupportedOidList;
  /* 0x01f8 */ struct _NDIS_SG_DMA_BLOCK* MiniportSGDmaBlock;
  /* 0x0200 */ struct _NDIS_AF_LIST* CallMgrAfList;
  /* 0x0208 */ void* MiniportThread;
  /* 0x0210 */ void* SetInfoBuf;
  /* 0x0218 */ unsigned short SetInfoBufLen;
  /* 0x021a */ unsigned short MaxSendPackets;
  /* 0x021c */ int FakeStatus;
  union
  {
    /* 0x0220 */ void* Reserved24;
    /* 0x0220 */ void* GlobalTriageBlock;
  }; /* size: 0x0008 */
  /* 0x0228 */ struct _NDIS_RECEIVE_SCALE_PARAMETERS* CombinedNdisRSSParameters;
  union
  {
    /* 0x0230 */ struct _NDIS_MINIPORT_TIMER* TimerQueue;
    /* 0x0230 */ struct _NDIS_TIMER_ENTRY* TimerObjectQueue;
  }; /* size: 0x0008 */
  /* 0x0238 */ unsigned int MacOptions;
  /* 0x0240 */ struct _NDIS_REQUEST* PendingRequest;
  /* 0x0248 */ unsigned int MaximumLongAddresses;
  /* 0x024c */ unsigned int Reserved27;
  /* 0x0250 */ unsigned int MiniportCurrentLookahead;
  /* 0x0254 */ unsigned int MiniportMaximumLookahead;
  union
  {
    /* 0x0258 */ unsigned __int64 Reserved1;
    /* 0x0258 */ struct _X_FILTER* NullMediaFilter;
  }; /* size: 0x0008 */
  /* 0x0260 */ void* DisableInterruptHandler /* function */;
  /* 0x0268 */ void* EnableInterruptHandler /* function */;
  /* 0x0270 */ void* SendPacketsHandler /* function */;
  /* 0x0278 */ void* DeferredSendHandler /* function */;
  /* 0x0280 */ void* EthRxIndicateHandler /* function */;
  /* 0x0288 */ void* Reserved30;
  /* 0x0290 */ void* NextSendNetBufferListsHandler /* function */;
  /* 0x0298 */ void* EthRxCompleteHandler /* function */;
  /* 0x02a0 */ void* Reserved31;
  /* 0x02a8 */ void* SavedNextSendNetBufferListsHandler /* function */;
  /* 0x02b0 */ void* StatusHandler /* function */;
  /* 0x02b8 */ void* StatusCompleteHandler /* function */;
  /* 0x02c0 */ void* TDCompleteHandler /* function */;
  /* 0x02c8 */ void* QueryCompleteHandler /* function */;
  /* 0x02d0 */ void* SetCompleteHandler /* function */;
  /* 0x02d8 */ void* WanSendCompleteHandler /* function */;
  /* 0x02e0 */ void* WanRcvHandler /* function */;
  /* 0x02e8 */ void* WanRcvCompleteHandler /* function */;
  /* 0x02f0 */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x02f8 */ struct _KEVENT* PnPEventLockEvent;
  /* 0x0300 */ struct _NDIS_OBJECT_HEADER* MediaSpecificAttributes;
  /* 0x0308 */ struct _IRP* PendingQueryPowerIrp;
  /* 0x0310 */ struct _NDIS_INTERRUPT_BLOCK* InterruptEx;
  /* 0x0318 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0320 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0328 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x032c */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS MiniportPauseFunctions;
  /* 0x0330 */ unsigned long MiniportAutoNegotiationFlags;
  /* 0x0338 */ struct _SINGLE_LIST_ENTRY WorkQueue[7];
  /* 0x0370 */ struct _SINGLE_LIST_ENTRY SingleWorkItems[6];
  /* 0x03a0 */ unsigned char SendFlags;
  /* 0x03a1 */ unsigned char MP6SupportPM;
  /* 0x03a2 */ unsigned char XState;
  /* 0x03a8 */ struct _NDIS_LOG* Log;
  /* 0x03b0 */ struct _CM_RESOURCE_LIST* AllocatedResources;
  /* 0x03b8 */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
  /* 0x03c0 */ struct _SINGLE_LIST_ENTRY PatternList;
  /* 0x03c8 */ struct _SINGLE_LIST_ENTRY WOLPatternList;
  /* 0x03d0 */ struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
  /* 0x03d8 */ struct _NDIS_PNP_CAPABILITIES PMCapabilities61;
  /* 0x03e8 */ struct _NDIS_PM_CAPABILITIES PMHardwareCapabilities;
  /* 0x0424 */ struct _NDIS_PM_CAPABILITIES PMAdvertisedCapabilities;
  /* 0x0460 */ struct _NDIS_PM_PARAMETERS PMCurrentParameters;
  /* 0x0474 */ struct _NDIS_PM_PARAMETERS PMWmiParameters;
  /* 0x0488 */ struct _DEVICE_CAPABILITIES OriginalDeviceCaps;
  /* 0x04c8 */ struct _DEVICE_CAPABILITIES DeviceCaps;
  /* 0x0508 */ unsigned char S0WakeupSupported;
  /* 0x050c */ unsigned long WakeUpEnable;
  /* 0x0510 */ struct _IRP* pIrpWaitWake;
  /* 0x0518 */ enum _SYSTEM_POWER_STATE WaitWakeSystemState;
  /* 0x0520 */ union _LARGE_INTEGER VcIndex;
  /* 0x0528 */ unsigned __int64 VcCountLock;
  /* 0x0530 */ struct _LIST_ENTRY WmiEnabledVcs;
  /* 0x0540 */ struct _NDIS_GUID* pNdisGuidMap;
  /* 0x0548 */ struct _NDIS_GUID* pCustomGuidMap;
  /* 0x0550 */ unsigned short VcCount;
  /* 0x0552 */ unsigned short cNdisGuidMap;
  /* 0x0554 */ unsigned short cCustomGuidMap;
  /* 0x0558 */ struct _NDIS_TIMER MediaDisconnectTimer;
  /* 0x05d8 */ enum _NDIS_PNP_DEVICE_STATE PnPDeviceState;
  /* 0x05dc */ enum _NDIS_PNP_DEVICE_STATE OldPnPDeviceState;
  /* 0x05e0 */ struct _KDPC DeferredDpc;
  /* 0x0620 */ union _LARGE_INTEGER StartTicks;
  /* 0x0628 */ struct _NDIS_PACKET** IndicatedPacket;
  /* 0x0630 */ struct _KEVENT* RemoveReadyEvent;
  /* 0x0638 */ struct _KEVENT* AllOpensClosedEvent;
  /* 0x0640 */ struct _KEVENT* AllRequestsCompletedEvent;
  /* 0x0648 */ unsigned long InitTimeMs;
  /* 0x0650 */ struct _NDIS_MINIPORT_WORK_ITEM WorkItemBuffer[6];
  /* 0x06e0 */ struct _OID_LIST* OidList;
  /* 0x06e8 */ unsigned short InternalResetCount;
  /* 0x06ea */ unsigned short MiniportResetCount;
  /* 0x06ec */ unsigned short MediaSenseConnectCount;
  /* 0x06ee */ unsigned short MediaSenseDisconnectCount;
  /* 0x06f0 */ struct _NDIS_PACKET** xPackets;
  /* 0x06f8 */ unsigned long UserModeOpenReferences;
  /* 0x0700 */ void* WSendPacketsHandler /* function */;
  /* 0x0708 */ unsigned long MiniportAttributes;
  /* 0x070c */ unsigned short NumOpens;
  /* 0x070e */ unsigned short CFHangXTicks;
  /* 0x0710 */ unsigned long RequestCount;
  /* 0x0714 */ unsigned long IndicatedPacketsCount;
  /* 0x0718 */ unsigned long PhysicalMediumType;
  /* 0x071c */ enum _NDIS_MEDIUM MiniportMediaType;
  /* 0x0720 */ struct _NDIS_REQUEST* LastRequest;
  /* 0x0728 */ void* FakeMac;
  /* 0x0730 */ unsigned long LockDbg;
  /* 0x0734 */ unsigned long LockDbgX;
  /* 0x0738 */ void* LockThread;
  /* 0x0740 */ unsigned long InfoFlags;
  /* 0x0748 */ unsigned __int64 TimerQueueLock;
  /* 0x0750 */ struct _KEVENT* ResetCompletedEvent;
  /* 0x0758 */ void* SavedPacketIndicateHandler /* function */;
  /* 0x0760 */ long RegisteredInterrupts;
  /* 0x0764 */ unsigned long SetOid;
  /* 0x0768 */ struct _KEVENT CFHCompletedEvent;
  /* 0x0780 */ struct _WORK_QUEUE_ITEM CFHWorkItem;
  /* 0x07a0 */ volatile long CFHWorkItemQueued;
  /* 0x07a8 */ void* DeviceContext;
  /* 0x07b0 */ struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE* RssParametersBuffer;
  /* 0x07b8 */ unsigned char UsingMSIX;
  /* 0x07b9 */ unsigned char Miniport5InNdis6Mode;
  /* 0x07ba */ unsigned char Miniport5HasNdis6Component;
  /* 0x07bb */ unsigned char InitMode;
  /* 0x07bc */ char MediaChangeFilters;
  /* 0x07bd */ unsigned char FilterPnPLockAcquired;
  /* 0x07be */ unsigned char LWFilterAllLoaded;
  /* 0x07bf */ unsigned char CheckPacketFilters;
  /* 0x07c0 */ unsigned char ReceiveFilters;
  /* 0x07c8 */ void* FilterPnPLockThread;
  /* 0x07d0 */ unsigned long FilterPnPLockDbgX;
  /* 0x07d8 */ unsigned __int64 RecvLock;
  /* 0x07e0 */ enum _NDIS_MINIPORT_STATE RecvState;
  /* 0x07e4 */ unsigned long OutstandingReceives;
  /* 0x07e8 */ void* MiniportRecvLockThread;
  /* 0x07f0 */ unsigned long RecvLockDbg;
  /* 0x07f8 */ void* NextSendPacketsHandler /* function */;
  /* 0x0800 */ void* FinalSendPacketsHandler /* function */;
  /* 0x0808 */ struct _NDIS_FILTER_BLOCK* LowestFilter;
  /* 0x0810 */ struct _NDIS_FILTER_BLOCK* HighestFilter;
  /* 0x0818 */ void* ShutdownContext;
  /* 0x0820 */ void* ShutdownHandler /* function */;
  /* 0x0828 */ struct _KBUGCHECK_CALLBACK_RECORD BugcheckCallbackRecord;
  /* 0x0868 */ void* TopIndicateNetBufferListsHandler /* function */;
  /* 0x0870 */ void* TopIndicateLoopbackNetBufferListsHandler /* function */;
  /* 0x0878 */ void* Ndis5PacketIndicateHandler /* function */;
  /* 0x0880 */ void* MiniportReturnPacketHandler /* function */;
  /* 0x0888 */ void* MiniportReturnPacketContext;
  /* 0x0890 */ void* SynchronousReturnPacketHandler /* function */;
  /* 0x0898 */ void* SynchronousReturnPacketContext;
  /* 0x08a0 */ struct _LIST_ENTRY OidRequestList;
  /* 0x08b0 */ struct _NDIS_OID_REQUEST* PendingOidRequest;
  /* 0x08b8 */ struct _NDIS_OID_REQUEST* ProcessedOidRequest;
  /* 0x08c0 */ void* NextCoOidRequestHandle;
  /* 0x08c8 */ unsigned long Ndis6ProtocolsBound;
  /* 0x08cc */ unsigned long PmodeOpen6;
  /* 0x08d0 */ enum _NDIS_MINIPORT_STATE State;
  /* 0x08d8 */ struct _KEVENT* AsyncOpCompletionEvent;
  /* 0x08e0 */ int AsyncOpCompletionStatus;
  /* 0x08e8 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x08f0 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x08f8 */ unsigned long SupportedPacketFilters;
  /* 0x0900 */ struct _NDIS_MINIPORT_HANDLERS NoFilter;
  /* 0x09b8 */ struct _NDIS_MINIPORT_HANDLERS Next;
  /* 0x0a70 */ unsigned char ReceivePathEnabled;
  /* 0x0a71 */ unsigned char NormalTopReceive;
  /* 0x0a74 */ enum _NDIS_SEND_PATH_TYPE SendPathType;
  /* 0x0a78 */ enum _NDIS_SEND_PATH_TYPE SavedSendPathType;
  /* 0x0a7c */ unsigned char SavedReceivePathEnabled;
  /* 0x0a80 */ long NumOfPauseRestartRequests;
  /* 0x0a84 */ unsigned long FilterPnPFlags;
  /* 0x0a88 */ unsigned long SupportedStatistics;
  /* 0x0a8c */ unsigned long cDpcSendCompletes;
  /* 0x0a90 */ unsigned long cDpcRcvIndications;
  /* 0x0a94 */ unsigned long cDpcRcvIndicationCalls;
  /* 0x0a98 */ unsigned long cDpcNbSendCompletes;
  /* 0x0a9c */ unsigned long cDpcNblSendCompletes;
  /* 0x0aa0 */ unsigned long cDpcNblIndications;
  /* 0x0aa4 */ unsigned long cDpcMaxPacketsIndicated;
  /* 0x0aa8 */ unsigned long cDpcTotalDpcCount;
  /* 0x0aac */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES RecvScaleCapabilities;
  /* 0x0ac0 */ struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES* GeneralAttributes;
  /* 0x0ac8 */ struct _LIST_ENTRY PortList;
  /* 0x0ad8 */ unsigned char* AllocatedPortIndices;
  /* 0x0ae0 */ unsigned long AllocatedPortIndicesLength;
  /* 0x0ae4 */ unsigned long NumberOfPorts;
  /* 0x0ae8 */ unsigned long NumberOfActivePorts;
  /* 0x0af0 */ unsigned __int64 MiniportXmitLinkSpeed;
  /* 0x0af8 */ unsigned __int64 MiniportRcvLinkSpeed;
  /* 0x0b00 */ struct _NDIS_TIMER InitModeTimeoutTimer;
  /* 0x0b80 */ struct _NDIS_WORK_ITEM InitModeTimeoutWorkItem;
  /* 0x0bd0 */ struct _KEVENT InitModeTimeoutTimerQueuedEvent;
  /* 0x0be8 */ unsigned long NumBootProtocols;
  /* 0x0bec */ unsigned long NumMissingBootProtocols;
  /* 0x0bf0 */ struct _NDIS_PROTOCOL_BLOCK** BootProtocolsArray;
  /* 0x0bf8 */ struct _NDIS_DPC_TRACKER* DpcTrackers;
  /* 0x0c00 */ struct _NDIS_DPC_TRACKER* CurrentDpcTracker;
  /* 0x0c08 */ unsigned char DpcTrackerIndex;
  /* 0x0c09 */ unsigned char SupportedRss;
  /* 0x0c10 */ unsigned __int64 DpcWatchDogCycleCount;
  /* 0x0c18 */ unsigned long DataBackFillSize;
  /* 0x0c1c */ unsigned long ContextBackFillSize;
  /* 0x0c20 */ struct _NDIS_RESTART_GENERAL_ATTRIBUTES TopFilterRestartAttributes;
  /* 0x0c78 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES TopRecvScaleCapabilities;
  /* 0x0c8c */ long NumOfOpenPauseRestartRequests;
  /* 0x0c90 */ long MiniportStackPauseCount;
  /* 0x0c94 */ unsigned long NsiOpenReferences;
  /* 0x0c98 */ void* ProcessingOpen;
  /* 0x0ca0 */ struct _KEVENT* NsiRequestsCompletedEvent;
  /* 0x0ca8 */ enum _DEVICE_POWER_STATE QueryPowerDeviceState;
  /* 0x0cac */ unsigned char MinimumNdisMajorVersion;
  /* 0x0cad */ unsigned char MinimumNdisMinorVersion;
  /* 0x0cb0 */ struct _NDIS_MINIPORT_STATS* BottomIfStats;
  /* 0x0cb8 */ struct _NDIS_M_PERIODIC_RECEIVES PeriodicReceiveQueue;
  /* 0x0d48 */ enum _NDIS_PORT_CONTROL_STATE DefaultSendControlState;
  /* 0x0d4c */ enum _NDIS_PORT_CONTROL_STATE DefaultRcvControlState;
  /* 0x0d50 */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultSendAuthorizationState;
  /* 0x0d54 */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultRcvAuthorizationState;
  /* 0x0d58 */ enum _NDIS_PORT_CONTROL_STATE DefaultPortSendControlState;
  /* 0x0d5c */ enum _NDIS_PORT_CONTROL_STATE DefaultPortRcvControlState;
  /* 0x0d60 */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultPortSendAuthorizationState;
  /* 0x0d64 */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultPortRcvAuthorizationState;
  /* 0x0d68 */ struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES PciDeviceCustomProperties;
  /* 0x0da0 */ void* TopNdis5PacketIndicateHandler /* function */;
  /* 0x0da8 */ unsigned long* ndisSupportedOidList;
  /* 0x0db0 */ unsigned long ndisSupportedOidListLength;
  /* 0x0db4 */ unsigned long MsiIntCount;
  /* 0x0db8 */ struct _WORK_QUEUE_ITEM MiniportDpcWorkItem;
  /* 0x0dd8 */ unsigned __int64 InvalidFrames;
  /* 0x0de0 */ long PagingPathCount;
  /* 0x0de8 */ struct _LIST_ENTRY ReceiveQueueList;
  /* 0x0df8 */ unsigned char* AllocatedQueueIndices;
  /* 0x0e00 */ unsigned long AllocatedQueueIndicesLength;
  /* 0x0e04 */ unsigned long NumReceiveQueues;
  /* 0x0e08 */ struct _LIST_ENTRY ReceiveFilterList;
  /* 0x0e18 */ unsigned char* AllocatedReceiveFilterIndices;
  /* 0x0e20 */ unsigned long AllocatedReceiveFilterIndicesLength;
  /* 0x0e24 */ unsigned long NumReceiveFilters;
  /* 0x0e28 */ unsigned long EnabledReceiveFilterTypes;
  /* 0x0e2c */ unsigned long EnabledReceiveQueueTypes;
  /* 0x0e30 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterHwCapabilities;
  /* 0x0e38 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterCurrentCapabilities;
  /* 0x0e40 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* TopReceiveFilterCurrentCapabilities;
  /* 0x0e48 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchHwCapabilities;
  /* 0x0e50 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchCurrentCapabilities;
  /* 0x0e58 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* TopNicSwitchCurrentCapabilities;
  /* 0x0e60 */ struct _LIST_ENTRY SharedMemoryBlockList;
  /* 0x0e70 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0e78 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x0e80 */ void* AllocateSharedMemoryContext;
  /* 0x0e88 */ struct PCI_MSI_CAPABILITY MsiCaps;
  /* 0x0ea0 */ struct PCI_MSIX_CAPABILITY MsiXCaps;
  /* 0x0eb0 */ unsigned __int64 NumberOfIndirectionTableChanges;
  /* 0x0eb8 */ unsigned int PciDeviceSriovSupport;
  union
  {
    /* 0x0ebc */ unsigned char BeginSavedFields;
    /* 0x0ebc */ unsigned long NumUserOpens;
  }; /* size: 0x0004 */
  /* 0x0ec0 */ struct _NDIS_MINIPORT_OFFLOAD_REG OffloadRegistry;
  /* 0x0ec4 */ unsigned short MediaDisconnectTimeOut;
  /* 0x0ec6 */ unsigned short SGMapRegistersNeeded;
  /* 0x0ec8 */ unsigned long DriverVerifyFlags;
  /* 0x0ed0 */ void* SetBusData /* function */;
  /* 0x0ed8 */ void* GetBusData /* function */;
  /* 0x0ee0 */ void* BusDataContext;
  /* 0x0ee8 */ enum _NDIS_INTERFACE_TYPE BusType;
  /* 0x0eec */ unsigned long BusNumber;
  /* 0x0ef0 */ unsigned long SlotNumber;
  /* 0x0ef8 */ struct _NDIS_EVENT OpenReadyEvent;
  /* 0x0f10 */ unsigned long NumAdminOpens;
  /* 0x0f18 */ struct _NDIS_M_DRIVER_BLOCK* DriverHandle;
  /* 0x0f20 */ struct _NDIS_BIND_PATHS* BindPaths;
  /* 0x0f28 */ struct _NDIS_BIND_PATHS* LWFilterList;
  /* 0x0f30 */ unsigned long MiniportPhysicalMediumType;
  /* 0x0f38 */ struct _NDIS_FILTER_ATTACH_LIST* LWFilterAttachList;
  /* 0x0f40 */ unsigned long NumFilters;
  /* 0x0f48 */ void* SecurityDescriptor;
  /* 0x0f50 */ struct _UNICODE_STRING BaseName;
  /* 0x0f60 */ struct _UNICODE_STRING MiniportName;
  /* 0x0f70 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0f78 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0f80 */ struct _DEVICE_OBJECT* NextDeviceObject;
  /* 0x0f88 */ struct _NDIS_MINIPORT_BLOCK* NextGlobalMiniport;
  /* 0x0f90 */ struct _UNICODE_STRING* pAdapterInstanceName;
  /* 0x0f98 */ unsigned long PnPCapabilities;
  /* 0x0f9c */ enum _DEVICE_POWER_STATE CurrentDevicePowerState;
  /* 0x0fa0 */ unsigned __int64 PowerStateLock;
  /* 0x0fa8 */ enum _DEVICE_POWER_STATE DriverPowerState;
  /* 0x0fac */ enum _DEVICE_POWER_STATE PrevDriverPowerState;
  /* 0x0fb0 */ struct _NET_BUFFER_LIST* LowPowerRcvReturnNbls;
  /* 0x0fb8 */ unsigned long PendingReturnNBLCount;
  /* 0x0fc0 */ struct NDIS_NBL_TRACKER_HANDLE__* LowPowerRcvReturnNblTracker;
  /* 0x0fc8 */ struct _NDIS_PM_ADMIN_CONFIG PMAdminConfig;
  /* 0x0fd0 */ struct _KSEMAPHORE PMPatternSemaphore;
  /* 0x0ff0 */ struct _KSEMAPHORE PMOffloadSemaphore;
  /* 0x1010 */ void* BusInterface;
  /* 0x1018 */ unsigned short InstanceNumber;
  /* 0x1020 */ void* ConfigurationHandle;
  /* 0x1028 */ struct _GUID InterfaceGuid;
  /* 0x1038 */ union _NET_LUID_LH NetLuid;
  /* 0x1040 */ unsigned char IfBlockAvailable;
  /* 0x1048 */ struct _NDIS_IF_BLOCK* IfBlock;
  /* 0x1050 */ struct _KEVENT* IfBlockPointerRefZeroEvent;
  /* 0x1058 */ unsigned int IfIndex;
  /* 0x105c */ enum _NET_IF_ADMIN_STATUS AdminStatus;
  /* 0x1060 */ enum _NET_IF_OPER_STATUS OperStatus;
  /* 0x1064 */ unsigned long OperStatusFlags;
  union
  {
    /* 0x1068 */ void* SendHandler /* function */;
    /* 0x1068 */ void* WanSendHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x1070 */ struct NDIS_NBL_TRACKER_HANDLE__* NblTracker;
  /* 0x1078 */ struct _NDIS_MINIPORT_OFFLOAD* Offload;
  /* 0x1080 */ void* NDKBlock;
  /* 0x1088 */ void* AddDeviceContext;
  /* 0x1090 */ struct _IO_REMOVE_LOCK RemoveLock;
  /* 0x10b0 */ struct _UNICODE_STRING DevinterfaceNetSymbolicLinkName;
  /* 0x10c0 */ unsigned char RssEnable;
  /* 0x10c1 */ unsigned char ChimneyEnable;
  /* 0x10c4 */ unsigned long PhysicalMediumInInf;
  /* 0x10c8 */ struct _UNICODE_STRING ExportName;
  /* 0x10d8 */ struct _UNICODE_STRING FilterClass;
  /* 0x10e8 */ void* StatusProcessingThread;
  /* 0x10f0 */ unsigned long StatusProcessingDbgX;
  /* 0x10f8 */ struct _UNICODE_STRING FdoName;
  /* 0x1108 */ struct _KEVENT PowerD0CompleteEvent;
  /* 0x1120 */ long LastD0CompleteStatus;
  /* 0x1124 */ enum _NDIS_MINIPORT_EVENT LastD0Reason;
  /* 0x1128 */ unsigned long DirectOidRequestCount;
  /* 0x1130 */ struct _KEVENT* AllDirectRequestsCompletedEvent;
  /* 0x1138 */ struct _NDIS_HD_SPLIT_CURRENT_CONFIG* HDSplitCurrentConfig;
  /* 0x1140 */ void* MSIXConfigContext;
  /* 0x1148 */ void* SetMSIXTableEntry /* function */;
  /* 0x1150 */ void* MaskMSIXTableEntry /* function */;
  /* 0x1158 */ void* UnmaskMSIXTableEntry /* function */;
  /* 0x1160 */ struct _WORK_QUEUE_ITEM DevicePowerStateWorkItem;
  /* 0x1180 */ struct _WORK_QUEUE_ITEM SystemPowerStateWorkItem;
  /* 0x11a0 */ struct _NDIS_RECEIVE_QUEUE_BLOCK* DefaultReceiveQueue;
  /* 0x11a8 */ unsigned long MaxNumRssProcessors;
  /* 0x11ac */ struct _PROCESSOR_NUMBER RssBaseProcessor;
  /* 0x11b0 */ struct _PROCESSOR_NUMBER RssMaxProcessor;
  /* 0x11b4 */ enum _NDIS_RSS_PROFILE RssProfile;
  /* 0x11b8 */ unsigned short NumaNodeId;
  /* 0x11c0 */ unsigned short* NumaDistances;
  /* 0x11c8 */ struct _UNICODE_STRING* pModifiedInstanceName;
  /* 0x11d0 */ struct _WORK_QUEUE_ITEM DeleteMiniportWorkItem;
  /* 0x11f0 */ unsigned long SyncFlags;
  /* 0x11f4 */ unsigned long WSyncFlags;
  /* 0x11f8 */ unsigned long InterlockedFlags;
  /* 0x1200 */ struct _ULONG_REFERENCE Ref;
  /* 0x1210 */ struct _REFERENCE_EX BindWorkItemRef;
  /* 0x1228 */ struct _KEVENT QueuedBindingCompletedEvent;
  /* 0x1240 */ struct _NDIS_SELECTIVE_SUSPEND* SelectiveSuspend;
  /* 0x1248 */ struct _NDIS_MINIPORT_AOAC* AoAc;
  /* 0x1250 */ enum _NDIS_PM_WAKE_REASON_TYPE LastWakeReason;
  /* 0x1258 */ struct NDIS_EVENT_LOG_HANDLE__* PnpEventLog;
  /* 0x1260 */ struct NDIS_EVENT_LOG_HANDLE__* PauseEventLog;
  /* 0x1268 */ struct _NDIS_D0_SIGNAL_WORK_ITEM D0CompleteSignalWorkItem;
  /* 0x12c0 */ struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS* PhysicalPerformanceCounters;
  /* 0x12c8 */ union _LARGE_INTEGER TimeOfInitialization;
  /* 0x12d0 */ union _LARGE_INTEGER LastSystemSleepTime;
  /* 0x12d8 */ unsigned __int64 TotalSystemSleepTimeMs;
  /* 0x12e0 */ struct _NDIS_SRIOV_CAPABILITIES* SriovHwCapabilities;
  /* 0x12e8 */ struct _NDIS_SRIOV_CAPABILITIES* SriovCurrentCapabilities;
  /* 0x12f0 */ unsigned __int64 InvalidateBlockMask;
  /* 0x12f8 */ struct _IRP* InvalidateBlockIoctlPf;
  /* 0x1300 */ struct _IRP* InvalidateBlockIoctlVf;
  /* 0x1308 */ struct _VPCI_INVALIDATE_BLOCK_OUTPUT InvalidateBlockVfParams;
  /* 0x1310 */ struct _KEVENT InvalidateBlockEvent;
  /* 0x1328 */ unsigned short InvalidateVfId;
  /* 0x132a */ unsigned char InvalidateBlockCancelling;
  /* 0x1330 */ struct _NDIS_PF_BLOCK* PFBlock;
  /* 0x1338 */ unsigned long NumSwitches;
  /* 0x1340 */ struct _LIST_ENTRY NicSwitchList;
  /* 0x1350 */ unsigned long NumAllocatedVFs;
  /* 0x1358 */ struct _LIST_ENTRY VFList;
  /* 0x1368 */ unsigned long NumActiveVPorts;
  /* 0x1370 */ struct _LIST_ENTRY VPortList;
  /* 0x1380 */ unsigned char* AllocatedVPortIndices;
  /* 0x1388 */ unsigned long AllocatedVPortIndicesLength;
  /* 0x1390 */ void* SetVirtualFunctionData /* function */;
  /* 0x1398 */ void* GetVirtualFunctionData /* function */;
  /* 0x13a0 */ void* EnableVirtualization /* function */;
  /* 0x13a8 */ void* GetVirtualDeviceLocation /* function */;
  /* 0x13b0 */ void* GetVirtualFunctionProbedBars /* function */;
  /* 0x13b8 */ void* VirtInterfaceContext;
  /* 0x13c0 */ struct _UNICODE_STRING DevinterfaceVirtSymbolicLinkName;
  /* 0x13d0 */ void* VpciInterfaceDereference /* function */;
  /* 0x13d8 */ void* WriteVfConfigBlock /* function */;
  /* 0x13e0 */ void* ReadVfConfigBlock /* function */;
  /* 0x13e8 */ void* VpciInterfaceContext;
  /* 0x13f0 */ unsigned int VfSerialNumber;
  /* 0x13f4 */ struct _LUID SriovLuid;
  /* 0x1400 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
  /* 0x1408 */ struct NDIS_REFCOUNT_HANDLE__* NsiRefCountTracker;
  /* 0x1410 */ struct _NDIS_QOS_CAPABILITIES* QosHwCapabilities;
  /* 0x1418 */ struct _NDIS_QOS_CAPABILITIES* QosCurrentCapabilities;
  /* 0x1420 */ struct _NDIS_QOS_PARAMETERS* QosOperationalParameters;
  /* 0x1428 */ unsigned long QosOperationalParametersBufferSize;
  /* 0x1430 */ struct _NDIS_QOS_PARAMETERS* QosRemoteParameters;
  /* 0x1438 */ unsigned long QosRemoteParametersBufferSize;
  /* 0x1440 */ unsigned __int64 DeviceFlags;
} NDIS_MINIPORT_BLOCK, *PNDIS_MINIPORT_BLOCK; /* size: 0x1448 */

typedef struct _NDIS_MINIPORT_CO_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* CoCreateVcHandler /* function */;
  /* 0x0010 */ void* CoDeleteVcHandler /* function */;
  /* 0x0018 */ void* CoActivateVcHandler /* function */;
  /* 0x0020 */ void* CoDeactivateVcHandler /* function */;
  /* 0x0028 */ void* CoSendNetBufferListsHandler /* function */;
  /* 0x0030 */ void* CoOidRequestHandler /* function */;
} NDIS_MINIPORT_CO_CHARACTERISTICS, *PNDIS_MINIPORT_CO_CHARACTERISTICS; /* size: 0x0038 */

typedef struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char MajorNdisVersion;
  /* 0x0005 */ unsigned char MinorNdisVersion;
  /* 0x0006 */ unsigned char MajorDriverVersion;
  /* 0x0007 */ unsigned char MinorDriverVersion;
  /* 0x0008 */ unsigned long Flags;
  /* 0x0010 */ void* SetOptionsHandler /* function */;
  /* 0x0018 */ void* InitializeHandlerEx /* function */;
  /* 0x0020 */ void* HaltHandlerEx /* function */;
  /* 0x0028 */ void* UnloadHandler /* function */;
  /* 0x0030 */ void* PauseHandler /* function */;
  /* 0x0038 */ void* RestartHandler /* function */;
  /* 0x0040 */ void* OidRequestHandler /* function */;
  /* 0x0048 */ void* SendNetBufferListsHandler /* function */;
  /* 0x0050 */ void* ReturnNetBufferListsHandler /* function */;
  /* 0x0058 */ void* CancelSendHandler /* function */;
  /* 0x0060 */ void* CheckForHangHandlerEx /* function */;
  /* 0x0068 */ void* ResetHandlerEx /* function */;
  /* 0x0070 */ void* DevicePnPEventNotifyHandler /* function */;
  /* 0x0078 */ void* ShutdownHandlerEx /* function */;
  /* 0x0080 */ void* CancelOidRequestHandler /* function */;
  /* 0x0088 */ void* DirectOidRequestHandler /* function */;
  /* 0x0090 */ void* CancelDirectOidRequestHandler /* function */;
} NDIS_MINIPORT_DRIVER_CHARACTERISTICS, *PNDIS_MINIPORT_DRIVER_CHARACTERISTICS; /* size: 0x0098 */

typedef enum _NDIS_MINIPORT_EVENT
{
  NdisMEvent_Unknown = 0,
  NdisMEventDx_SystemSleep = 1,
  NdisMEventDx_NicQuiet = 2,
  NdisMEventDx_SSIdle = 3,
  NdisMEventDx_D3DTimeout = 4,
  NdisMEventD0_SystemResume = 5,
  NdisMEventD0_NicActive = 6,
  NdisMEventD0_AoAcWake = 7,
  NdisMEventD0_SSResume = 8,
  NdisMEventD0_D3DCancel = 9,
  NdisMEventD0_D3DWake = 10,
  NdisMEventD0_D3DResume = 11,
  NdisMEventD0_Complete = 12,
  NdisMEventD0_SSComplete = 13,
  NdisMEventDx_Complete = 14,
  NdisMEventDx_SSComplete = 15,
  NdisMEvent_DeviceAdded = 31,
  NdisMEvent_DeviceStart = 32,
  NdisMEvent_DeviceQueryRemove = 33,
  NdisMEvent_DeviceCancelRemove = 34,
  NdisMEvent_DeviceRemove = 35,
  NdisMEvent_DeviceSurpriseRemoval = 36,
  NdisMEvent_DeviceQueryStop = 37,
  NdisMEvent_DeviceCancelStop = 38,
  NdisMEvent_DeviceStop = 39,
  NdisMEvent_MiniportInitialized = 51,
  NdisMEvent_MiniportHalted = 52,
  NdisMEvent_MiniportPaused = 53,
  NdisMEvent_MiniportRestarted = 54,
  NdisMEvent_MiniportPmInitialized = 55,
} NDIS_MINIPORT_EVENT, *PNDIS_MINIPORT_EVENT;

typedef struct _NDIS_MINIPORT_HANDLERS
{
  /* 0x0000 */ void* RequestContext;
  /* 0x0008 */ void* CancelSendContext;
  /* 0x0010 */ void* IndicateNetBufferListsContext;
  /* 0x0018 */ struct NDIS_NBL_TRACKER_HANDLE__* IndicateNetBufferListsTracker;
  /* 0x0020 */ struct _NDIS_OBJECT_HEADER* IndicateNetBufferListsObject;
  /* 0x0028 */ void* SaveIndicateNetBufferListsContext;
  /* 0x0030 */ void* ReturnNetBufferListsContext;
  /* 0x0038 */ struct NDIS_NBL_TRACKER_HANDLE__* ReturnNetBufferListsTracker;
  /* 0x0040 */ struct _NDIS_OBJECT_HEADER* ReturnNetBufferListsObject;
  /* 0x0048 */ void* SendNetBufferListsContext;
  /* 0x0050 */ struct NDIS_NBL_TRACKER_HANDLE__* SendNetBufferListsTracker;
  /* 0x0058 */ struct _NDIS_OBJECT_HEADER* SendNetBufferListsObject;
  /* 0x0060 */ void* SendNetBufferListsCompleteContext;
  /* 0x0068 */ struct NDIS_NBL_TRACKER_HANDLE__* SendNetBufferListsCompleteTracker;
  /* 0x0070 */ struct _NDIS_OBJECT_HEADER* SendNetBufferListsCompleteObject;
  /* 0x0078 */ void* RequestHandle;
  union
  {
    /* 0x0080 */ void* CancelSendHandler /* function */;
    /* 0x0080 */ void* CancelSendPacketsHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0088 */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0090 */ void* IndicateNetBufferListsHandler /* function */;
  /* 0x0098 */ void* SaveIndicateNetBufferListsHandler /* function */;
  /* 0x00a0 */ void* ReturnNetBufferListsHandler /* function */;
  /* 0x00a8 */ void* SendNetBufferListsHandler /* function */;
  /* 0x00b0 */ void* DirectRequestHandle;
} NDIS_MINIPORT_HANDLERS, *PNDIS_MINIPORT_HANDLERS; /* size: 0x00b8 */

typedef struct _NDIS_MINIPORT_INIT_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST* AllocatedResources;
  /* 0x0010 */ void* IMDeviceInstanceContext;
  /* 0x0018 */ void* MiniportAddDeviceContext;
  /* 0x0020 */ unsigned long IfIndex;
  /* 0x0028 */ union _NET_LUID_LH NetLuid;
  /* 0x0030 */ struct _NDIS_PORT_AUTHENTICATION_PARAMETERS* DefaultPortAuthStates;
  /* 0x0038 */ struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES* PciDeviceCustomProperties;
} NDIS_MINIPORT_INIT_PARAMETERS, *PNDIS_MINIPORT_INIT_PARAMETERS; /* size: 0x0040 */

typedef struct _NDIS_MINIPORT_INTERRUPT
{
  /* 0x0000 */ struct _KINTERRUPT* InterruptObject;
  union
  {
    /* 0x0008 */ volatile unsigned char IsDeregistered;
    /* 0x0008 */ unsigned __int64 DpcCountLock;
  }; /* size: 0x0008 */
  /* 0x0010 */ void* Reserved;
  /* 0x0018 */ void* MiniportIsr /* function */;
  /* 0x0020 */ void* MiniportDpc /* function */;
  /* 0x0028 */ struct _KDPC InterruptDpc;
  /* 0x0068 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0070 */ volatile long DpcCount;
  /* 0x0078 */ struct _KEVENT DpcsCompletedEvent;
  /* 0x0090 */ unsigned char SharedInterrupt;
  /* 0x0091 */ unsigned char IsrRequested;
  /* 0x0092 */ char __PADDING__[6];
} NDIS_MINIPORT_INTERRUPT, *PNDIS_MINIPORT_INTERRUPT; /* size: 0x0098 */

typedef struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* InterruptHandler /* function */;
  /* 0x0010 */ void* InterruptDpcHandler /* function */;
  /* 0x0018 */ void* DisableInterruptHandler /* function */;
  /* 0x0020 */ void* EnableInterruptHandler /* function */;
  /* 0x0028 */ unsigned char MsiSupported;
  /* 0x0029 */ unsigned char MsiSyncWithAllMessages;
  /* 0x0030 */ void* MessageInterruptHandler /* function */;
  /* 0x0038 */ void* MessageInterruptDpcHandler /* function */;
  /* 0x0040 */ void* DisableMessageInterruptHandler /* function */;
  /* 0x0048 */ void* EnableMessageInterruptHandler /* function */;
  /* 0x0050 */ enum _NDIS_INTERRUPT_TYPE InterruptType;
  /* 0x0058 */ struct _IO_INTERRUPT_MESSAGE_INFO* MessageInfoTable;
} NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS, *PNDIS_MINIPORT_INTERRUPT_CHARACTERISTICS; /* size: 0x0060 */

typedef struct _NDIS_MINIPORT_OFFLOAD
{
  /* 0x0000 */ unsigned char SupportsOffload;
  /* 0x0001 */ unsigned char SupportsTopOffload;
  /* 0x0002 */ unsigned char SupportsTcpConnectionOffload;
  /* 0x0003 */ unsigned char SupportsTopTcpConnectionOffload;
  /* 0x0004 */ unsigned char TopConnectionOffloadPaused;
  /* 0x0005 */ unsigned char RSCDisallowed;
  /* 0x0008 */ struct _NDIS_OFFLOAD MiniportCurrentConfig;
  /* 0x00a4 */ struct _NDIS_OFFLOAD TopCapabilities;
  /* 0x0140 */ struct _NDIS_OFFLOAD MiniportInitialConfig;
  /* 0x01dc */ struct _NDIS_OFFLOAD MiniportHardwareCapabilities;
  /* 0x0278 */ struct _NDIS_OFFLOAD_ENCAPSULATION MiniportSetEncapsulation;
  /* 0x0294 */ struct _NDIS_OFFLOAD_ENCAPSULATION TopSetEncapsulation;
  /* 0x02b0 */ struct _NDIS_OFFLOAD_ENCAPSULATION TopMergedEncapsulation;
  /* 0x02cc */ struct _NDIS_OFFLOAD_ENCAPSULATION MiniportMergedEncapsulation;
  /* 0x02e8 */ struct _NDIS_TCP_CONNECTION_OFFLOAD TopTcpConnectionOffloadCapabilities;
  /* 0x02fc */ struct _NDIS_TCP_CONNECTION_OFFLOAD MiniportTcpConnectionOffloadCurrentConfig;
  /* 0x0310 */ struct _NDIS_TCP_CONNECTION_OFFLOAD MiniportHwTcpConnectionOffloadCapabilities;
  /* 0x0324 */ struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS TopTcpConnectionParameters;
  /* 0x0360 */ struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS MiniportTcpConnectionParameters;
  /* 0x039c */ unsigned char MiniportTask[144];
  /* 0x042c */ unsigned long MiniportTaskSize;
  /* 0x0430 */ unsigned char Ndis5Xsum;
  /* 0x0431 */ unsigned char Ndis5LSO;
  /* 0x0432 */ unsigned char Ndis5IPsec;
  /* 0x0438 */ void* MiniportRequestBuffer;
  /* 0x0440 */ unsigned long MiniportRequestOid;
  /* 0x0444 */ unsigned long MiniportRequestBufferLength;
} NDIS_MINIPORT_OFFLOAD, *PNDIS_MINIPORT_OFFLOAD; /* size: 0x0448 */

typedef struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST* NextBlock;
  /* 0x0010 */ struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST* DependentBlockList;
  /* 0x0018 */ int Status;
  /* 0x0020 */ void* NdisReserved[2];
  /* 0x0030 */ void** MiniportOffloadContext;
  /* 0x0038 */ void* NdisOffloadHandle;
  /* 0x0040 */ void* ProtocolReserved[2];
  /* 0x0050 */ void* MiniportReserved[2];
  /* 0x0060 */ void* ImReserved[2];
  /* 0x0070 */ void* Scratch[2];
  /* 0x0080 */ void* SourceHandle;
  /* 0x0088 */ unsigned long PortNumber;
  /* 0x0090 */ struct _NET_BUFFER_LIST* NetBufferListChain;
} NDIS_MINIPORT_OFFLOAD_BLOCK_LIST, *PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST; /* size: 0x0098 */

typedef struct _NDIS_MINIPORT_OFFLOAD_REG
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IPv4XSumTxDisabled : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long IPv4XSumRxDisabled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long TCPv4XSumTxDisabled : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long TCPv4XSumRxDisabled : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long UDPv4XSumTxDisabled : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long UDPv4XSumRxDisabled : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long TCPv6XSumTxDisabled : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long TCPv6XSumRxDisabled : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long UDPv6XSumTxDisabled : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long UDPv6XSumRxDisabled : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long LsoV1IPv4Disabled : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long LsoV2IPv4Disabled : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long LsoV2IPv6Disabled : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long IPsecAHDisabled : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned long IPsecESPDisabled : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned long TCPv4ConnectionOffloadDisabled : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned long TCPv6ConnectionOffloadDisabled : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned long ReadRegistry : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned long IPsecV2AHDisabled : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned long IPsecV2ESPDisabled : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned long IPsecV2IPv4AHDisabled : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long IPsecV2IPv4ESPDisabled : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long IPSecV2IPv6Disabled : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned long RscIPv4Disabled : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned long RscIPv6Disabled : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned long EncapsulatedPacketTaskOffloadDisabled : 1; /* bit position: 25 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_MINIPORT_OFFLOAD_REG, *PNDIS_MINIPORT_OFFLOAD_REG; /* size: 0x0004 */

typedef struct _NDIS_MINIPORT_PAUSE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long PauseReason;
} NDIS_MINIPORT_PAUSE_PARAMETERS, *PNDIS_MINIPORT_PAUSE_PARAMETERS; /* size: 0x000c */

typedef struct _NDIS_MINIPORT_PNP_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* MiniportAddDeviceHandler /* function */;
  /* 0x0010 */ void* MiniportRemoveDeviceHandler /* function */;
  /* 0x0018 */ void* MiniportFilterResourceRequirementsHandler /* function */;
  /* 0x0020 */ void* MiniportStartDeviceHandler /* function */;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ long __PADDING__[1];
} NDIS_MINIPORT_PNP_CHARACTERISTICS, *PNDIS_MINIPORT_PNP_CHARACTERISTICS; /* size: 0x0030 */

typedef struct _NDIS_MINIPORT_RESTART_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_RESTART_ATTRIBUTES* RestartAttributes;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} NDIS_MINIPORT_RESTART_PARAMETERS, *PNDIS_MINIPORT_RESTART_PARAMETERS; /* size: 0x0018 */

typedef struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE
{
  /* 0x0000 */ unsigned char Combined[912];
  /* 0x0390 */ unsigned char Oid[912];
} NDIS_MINIPORT_RSS_PARAMETERS_CACHE, *PNDIS_MINIPORT_RSS_PARAMETERS_CACHE; /* size: 0x0720 */

typedef enum _NDIS_MINIPORT_STATE
{
  NdisMiniportUndefinedState = 0,
  NdisMiniportHalted = 1,
  NdisMiniportInitializing = 2,
  NdisMiniportRestarting = 3,
  NdisMiniportRunning = 4,
  NdisMiniportPausing = 5,
  NdisMiniportPaused = 6,
} NDIS_MINIPORT_STATE, *PNDIS_MINIPORT_STATE;

typedef struct _NDIS_MINIPORT_STATS
{
  /* 0x0000 */ unsigned __int64 ifHCInOctets;
  /* 0x0008 */ unsigned __int64 ifHCInUcastOctets;
  /* 0x0010 */ unsigned __int64 ifHCInBroadcastOctets;
  /* 0x0018 */ unsigned __int64 ifHCInMulticastOctets;
  /* 0x0020 */ unsigned __int64 ifHCInUcastPkts;
  /* 0x0028 */ unsigned __int64 ifHCInMulticastPkts;
  /* 0x0030 */ unsigned __int64 ifHCInBroadcastPkts;
  /* 0x0038 */ unsigned __int64 ifHCOutOctets;
  /* 0x0040 */ unsigned __int64 ifHCOutUcastPkts;
  /* 0x0048 */ unsigned __int64 ifHCOutMulticastPkts;
  /* 0x0050 */ unsigned __int64 ifHCOutBroadcastPkts;
  /* 0x0058 */ unsigned __int64 ifHCOutUcastOctets;
  /* 0x0060 */ unsigned __int64 ifHCOutMulticastOctets;
  /* 0x0068 */ unsigned __int64 ifHCOutBroadcastOctets;
} NDIS_MINIPORT_STATS, *PNDIS_MINIPORT_STATS; /* size: 0x0070 */

typedef struct _NDIS_MINIPORT_SYSPOWER_NOTIFY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _SYSTEM_POWER_STATE TargetSystemState;
  /* 0x0008 */ enum _SYSTEM_POWER_STATE EffectiveSystemState;
} NDIS_MINIPORT_SYSPOWER_NOTIFY, *PNDIS_MINIPORT_SYSPOWER_NOTIFY; /* size: 0x000c */

typedef struct _NDIS_MINIPORT_TIMER
{
  /* 0x0000 */ struct _KTIMER Timer;
  /* 0x0040 */ struct _KDPC Dpc;
  /* 0x0080 */ void* MiniportTimerFunction /* function */;
  /* 0x0088 */ void* MiniportTimerContext;
  /* 0x0090 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0098 */ struct _NDIS_MINIPORT_TIMER* NextTimer;
} NDIS_MINIPORT_TIMER, *PNDIS_MINIPORT_TIMER; /* size: 0x00a0 */

typedef struct _NDIS_MINIPORT_WORK_ITEM
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0008 */ enum _NDIS_WORK_ITEM_TYPE WorkItemType;
  /* 0x0010 */ void* WorkItemContext;
} NDIS_MINIPORT_WORK_ITEM, *PNDIS_MINIPORT_WORK_ITEM; /* size: 0x0018 */

typedef enum _NDIS_MPIF_REFTAG
{
  MPIFREF_IMDEINIT = 0,
  MPIFREF_AOAC = 1,
  MPIFREF_QUERYOBJ = 2,
  MPIFREF_GETTOP = 3,
  MPIFREF_GETRCVADDR = 4,
  MPIFREF_GETALLRCVADDR = 5,
  MPIFREF_CHIIB = 6,
  MPIFREF_CHIIUF = 7,
  MPIFREF_ENUMRCVADDR = 8,
  MPIFREF_SETISTATE = 9,
  MPIFREF_PMINIT = 10,
  MPIFREF_DEVPOWERUPFAIL = 11,
  MPIFREF_DEVPOWERUP = 12,
  MPIFREF_POWERDOWN = 13,
  MPIFREF_POWERDOWNFAIL = 14,
  MPIFREF_SQM = 15,
  MPIFREF_WMI = 16,
  MPIFREF_INITIALSTATE = 17,
  MPIFREF_REFMPGUID = 18,
  MPIFREF_NUMBER_OF_TAGS = 19,
} NDIS_MPIF_REFTAG, *PNDIS_MPIF_REFTAG;

typedef enum _NDIS_MP_REFTAG
{
  MPREF_AOAC_NA_ACQUIRE = 0,
  MPREF_AOAC_NA_RELEASE = 1,
  MPREF_AOAC_REFTIMER = 2,
  MPREF_AOAC_CLEANUP = 3,
  MPREF_AOAC_REFWAKE = 4,
  MPREF_API_RESET = 5,
  MPREF_PM_WAITWAKE = 6,
  MPREF_PM_D3D = 7,
  MPREF_PM_DEVPOWERUP = 8,
  MPREF_PM_POWERIRP = 9,
  MPREF_PM_OID = 10,
  MPREF_PM_REJECT = 11,
  MPREF_PM_UPDATECAPS = 12,
  MPREF_PM_D0COMPLETE = 13,
  MPREF_SS_IDLETIMER = 14,
  MPREF_SS_IDLEREQ = 15,
  MPREF_PNP_IMDEINIT = 16,
  MPREF_PNP_INITMODE = 17,
  MPREF_PNP_INITIALIZED = 18,
  MPREF_PNP_CHECKBIND = 19,
  MPREF_PNP_PAUSING = 20,
  MPREF_PNP_RESTARTING = 21,
  MPREF_PNP_NOTIFYSTACK = 22,
  MPREF_PNP_STOPPING = 23,
  MPREF_PNP_REMOVING = 24,
  MPREF_PNP_BASEINIT = 25,
  MPREF_LWF_RESTART = 26,
  MPREF_LWF_CHECKBIND = 27,
  MPREF_LWF_ENUMAPI = 28,
  MPREF_LWF_PNPNOTIFY = 29,
  MPREF_LWF_ATTACHING = 30,
  MPREF_LWF_ATTACHED = 31,
  MPREF_LWF_DETACHING = 32,
  MPREF_LWF_DETACHMON = 33,
  MPREF_LWF_ASYNCBIND = 34,
  MPREF_PT_OPENING = 35,
  MPREF_PT_OPENINGX = 36,
  MPREF_PT_OPENED = 37,
  MPREF_PT_BINDNOTIFY = 38,
  MPREF_PT_UNBINDNOTIFY = 39,
  MPREF_PT_UNBINDAPI = 40,
  MPREF_PT_FINISHCLOSE = 41,
  MPREF_PT_ASYNCCLOSE = 42,
  MPREF_PT_RECONFIG = 43,
  MPREF_PT_CHECKMDRV = 44,
  MPREF_PT_LEGACYREBIND = 45,
  MPREF_SI_BASE = 46,
  MPREF_SI_NSI = 47,
  MPREF_IF_STATS = 48,
  MPREF_IF_FINDTOP = 49,
  MPREF_IF_OID = 50,
  MPREF_IF_BASE = 51,
  MPREF_IF_STACKENTRY = 52,
  MPREF_IF_DELSTACK = 53,
  MPREF_RES_ASYNCSHM = 54,
  MPREF_RES_FREESHM = 55,
  MPREF_RES_ADDCPU = 56,
  MPREF_RES_IOV = 57,
  MPREF_RES_QUEUE = 58,
  MPREF_RES_RCVFILTER = 59,
  MPREF_OID_QUEUED = 60,
  MPREF_OID_QUEUEING = 61,
  MPREF_OID_QUEUEINGD = 62,
  MPREF_OID_TOPQUEUE = 63,
  MPREF_OID_COMPLETING = 64,
  MPREF_IO_PERIODICRCV = 65,
  MPREF_IO_QUEUEDDPC = 66,
  MPREF_IO_LEGACYDPC = 67,
  MPREF_CO_REGAF = 68,
  MPREF_CO_REGAFX = 69,
  MPREF_CO_OPENAF = 70,
  MPREF_MISC_PROCESS = 71,
  MPREF_MISC_SQM = 72,
  MPREF_MISC_CFH = 73,
  MPREF_MISC_WPPRUNDOWN = 74,
  MPREF_UM_HANDLE = 75,
  MPREF_UM_IOCTL = 76,
  MPREF_PCW_ENUM = 77,
  MPREF_PCW_COLLECT = 78,
  MPREF_PCW_REF = 79,
  MPREF_PCW_ENUMNDK = 80,
  MPREF_PCW_ADDING = 81,
  MPREF_PCW_ADDED = 82,
  MPREF_WMI_CHANGE = 83,
  MPREF_WMI_QUERYALL = 84,
  MPREF_WMI_QUERYONE = 85,
  MPREF_WMI_EXEC = 86,
  MPREF_API_IOWORKITEM = 87,
  MPREF_API_PORT = 88,
  MPREF_NUMBER_OF_TAGS = 89,
} NDIS_MP_REFTAG, *PNDIS_MP_REFTAG;

typedef struct _NDIS_MSIX_CONFIG_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_MSIX_TABLE_CONFIG ConfigOperation;
  /* 0x0008 */ unsigned long TableEntry;
  /* 0x000c */ unsigned long MessageNumber;
} NDIS_MSIX_CONFIG_PARAMETERS, *PNDIS_MSIX_CONFIG_PARAMETERS; /* size: 0x0010 */

typedef enum _NDIS_MSIX_TABLE_CONFIG
{
  NdisMSIXTableConfigSetTableEntry = 0,
  NdisMSIXTableConfigMaskTableEntry = 1,
  NdisMSIXTableConfigUnmaskTableEntry = 2,
  NdisMSIXTableConfigMax = 3,
} NDIS_MSIX_TABLE_CONFIG, *PNDIS_MSIX_TABLE_CONFIG;

typedef struct _NDIS_M_DRIVER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_M_DRIVER_BLOCK* NextDriver;
  /* 0x0010 */ struct _NDIS_MINIPORT_BLOCK* MiniportQueue;
  /* 0x0018 */ unsigned char MajorNdisVersion;
  /* 0x0019 */ unsigned char MinorNdisVersion;
  /* 0x001a */ unsigned short Flags;
  /* 0x0020 */ struct _NDIS_WRAPPER_HANDLE* NdisDriverInfo;
  /* 0x0028 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0030 */ struct _UNICODE_STRING ServiceRegPath;
  /* 0x0040 */ void* MiniportDriverContext;
  /* 0x0048 */ struct _NDIS_PROTOCOL_BLOCK* AssociatedProtocol;
  /* 0x0050 */ struct _LIST_ENTRY DeviceList;
  /* 0x0060 */ struct _NDIS_PENDING_IM_INSTANCE* PendingDeviceList;
  /* 0x0068 */ void* UnloadHandler /* function */;
  union
  {
    /* 0x0070 */ struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS MiniportDriverCharacteristics;
    /* 0x0070 */ struct _NDIS51_MINIPORT_CHARACTERISTICS MiniportCharacteristics;
  }; /* size: 0x00f0 */
  /* 0x0160 */ struct _KEVENT MiniportsRemovedEvent;
  /* 0x0178 */ struct _REFERENCE_EX Ref;
  /* 0x0190 */ struct _KMUTANT IMStartRemoveMutex;
  /* 0x01c8 */ void* IMStartRemoveMutexOwnerThread;
  /* 0x01d0 */ unsigned long DriverVersion;
  /* 0x01d8 */ struct _UNICODE_STRING ServiceName;
  /* 0x01e8 */ void* CoCreateVcHandler /* function */;
  /* 0x01f0 */ void* CoDeleteVcHandler /* function */;
  /* 0x01f8 */ void* CoActivateVcHandler /* function */;
  /* 0x0200 */ void* CoDeactivateVcHandler /* function */;
  /* 0x0208 */ void* CoSendNetBufferListsHandler /* function */;
  /* 0x0210 */ void* CoRequestHandler /* function */;
  /* 0x0218 */ void* CoOidRequestHandler /* function */;
  /* 0x0220 */ void* InitiateOffloadHandler /* function */;
  /* 0x0228 */ void* TerminateOffloadHandler /* function */;
  /* 0x0230 */ void* UpdateOffloadHandler /* function */;
  /* 0x0238 */ void* InvalidateOffloadHandler /* function */;
  /* 0x0240 */ void* QueryOffloadHandler /* function */;
  /* 0x0248 */ void* TcpOffloadSendHandler /* function */;
  /* 0x0250 */ void* TcpOffloadReceiveHandler /* function */;
  /* 0x0258 */ void* TcpOffloadDisconnectHandler /* function */;
  /* 0x0260 */ void* TcpOffloadForwardHandler /* function */;
  /* 0x0268 */ void* TcpOffloadReceiveReturnHandler /* function */;
  /* 0x0270 */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
  /* 0x0300 */ void* AddDeviceHandler /* function */;
  /* 0x0308 */ void* RemoveDeviceHandler /* function */;
  /* 0x0310 */ void* FilterResourceRequirementsHandler /* function */;
  /* 0x0318 */ void* StartDeviceHandler /* function */;
  /* 0x0320 */ struct _NDIS_MINIPORT_BLOCK* CompositeBusDefaultMiniport;
  /* 0x0328 */ void* OpenNDKAdapterHandler /* function */;
  /* 0x0330 */ void* CloseNDKAdapterHandler /* function */;
  /* 0x0338 */ void* SysPowerNotifyHandler /* function */;
  /* 0x0340 */ void* IdleNotificationHandler /* function */;
  /* 0x0348 */ void* CancelIdleNotificationHandler /* function */;
  /* 0x0350 */ struct _UNICODE_STRING ImageName;
  /* 0x0360 */ void* AllocateNetBufferListForwardingContextHandler /* function */;
  /* 0x0368 */ void* FreeNetBufferListForwardingContextHandler /* function */;
  /* 0x0370 */ void* AddNetBufferListDestinationHandler /* function */;
  /* 0x0378 */ void* SetNetBufferListSourceHandler /* function */;
  /* 0x0380 */ void* GrowNetBufferListDestinationsHandler /* function */;
  /* 0x0388 */ void* GetNetBufferListDestinationsHandler /* function */;
  /* 0x0390 */ void* UpdateNetBufferListDestinationsHandler /* function */;
  /* 0x0398 */ void* CopyNetBufferListInfoHandler /* function */;
  /* 0x03a0 */ void* ReferenceSwitchNicHandler /* function */;
  /* 0x03a8 */ void* DereferenceSwitchNicHandler /* function */;
  /* 0x03b0 */ void* ReferenceSwitchPortHandler /* function */;
  /* 0x03b8 */ void* DereferenceSwitchPortHandler /* function */;
  /* 0x03c0 */ void* ReportFilteredNetBufferListsHandler /* function */;
  /* 0x03c8 */ void* SetNetBufferListSwitchContextHandler /* function */;
  /* 0x03d0 */ void* GetNetBufferListSwitchContextHandler /* function */;
} NDIS_M_DRIVER_BLOCK, *PNDIS_M_DRIVER_BLOCK; /* size: 0x03d8 */

typedef struct _NDIS_M_PERIODIC_RECEIVES
{
  /* 0x0000 */ struct _NDIS_MINIPORT_BLOCK* NextMiniportBlock;
  /* 0x0008 */ enum _NDIS_M_PERIODIC_RECEIVE_STATE State;
  /* 0x0010 */ unsigned __int64 SpinLock;
  /* 0x0018 */ void* LockThread;
  /* 0x0020 */ unsigned long LockDbg;
  /* 0x0024 */ long NumMQueuedNbls;
  /* 0x0028 */ long NumNblsDequeued;
  /* 0x0030 */ struct _NET_BUFFER_LIST* QueuedHead;
  /* 0x0038 */ struct _NET_BUFFER_LIST* QueuedTail;
  /* 0x0040 */ unsigned long BoundToIP;
  /* 0x0044 */ unsigned char Paused;
  /* 0x0048 */ long NblsAllocated;
  /* 0x004c */ unsigned long TrackingQueued;
  /* 0x0050 */ unsigned long TrackingDequeued;
  /* 0x0054 */ unsigned long TrackingResources;
  /* 0x0058 */ unsigned long TrackingPending;
  /* 0x005c */ unsigned long TrackingIndicated;
  /* 0x0060 */ unsigned long TrackingEmptied;
  /* 0x0068 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0088 */ long WorkItemQueued;
  /* 0x008c */ long __PADDING__[1];
} NDIS_M_PERIODIC_RECEIVES, *PNDIS_M_PERIODIC_RECEIVES; /* size: 0x0090 */

typedef enum _NDIS_M_PERIODIC_RECEIVE_STATE
{
  PeriodicReceivesOff = 0,
  PeriodicReceivesOn = 1,
  PeriodicReceivesBlocked = 2,
} NDIS_M_PERIODIC_RECEIVE_STATE, *PNDIS_M_PERIODIC_RECEIVE_STATE;

typedef struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION
{
  /* 0x0000 */ struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION* NextEntry;
  /* 0x0008 */ unsigned long Tag;
  /* 0x0010 */ unsigned char Data[1];
  /* 0x0011 */ char __PADDING__[15];
} NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION, *PNDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION; /* size: 0x0020 */

typedef struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX* NextEntry;
  /* 0x0010 */ unsigned long Tag;
  /* 0x0018 */ void* Data;
} NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX, *PNDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX; /* size: 0x0020 */

typedef struct _NDIS_NBL_TRACKER
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  struct /* bitfield */
  {
    /* 0x0010 */ enum _NDIS_NBL_TRACKER_SOURCE Source : 16; /* bit position: 0 */
    /* 0x0010 */ unsigned long Flags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0018 */ void* Context;
  /* 0x0020 */ const struct _UNICODE_STRING* Name;
  /* 0x0028 */ struct _NDIS_NBL_TRACKER_BUCKET Buckets[2];
} NDIS_NBL_TRACKER, *PNDIS_NBL_TRACKER; /* size: 0x0048 */

typedef struct _NDIS_NBL_TRACKER_BUCKET
{
  /* 0x0000 */ struct PNDIS_PER_PROCESSOR_SLOT__* Slot;
  /* 0x0008 */ __int64 PassiveCounter;
} NDIS_NBL_TRACKER_BUCKET, *PNDIS_NBL_TRACKER_BUCKET; /* size: 0x0010 */

typedef enum _NDIS_NBL_TRACKER_LIFETIME_EVENT
{
  NdisNblTrackerEvent_QueuedByNdis = 1,
  NdisNblTrackerEvent_NblAllocated = 2,
  NdisNblTrackerEvent_NblAllocatedWithNb = 3,
  NdisNblTrackerEvent_NblFreed = 4,
  NdisNblTrackerEvent_NblAllocatedClone = 5,
  NdisNblTrackerEvent_NblFreedClone = 6,
  NdisNblTrackerEvent_NblAllocatedFragment = 7,
  NdisNblTrackerEvent_NblFreedFragment = 8,
  NdisNblTrackerEvent_NblAllocatedReassembled = 9,
  NdisNblTrackerEvent_NetioAllocatedClone = 10,
  NdisNblTrackerEvent_NetioFreedClone = 11,
  NdisNblTrackerEvent_CustomAllocatedChild = 12,
  NdisNblTrackerEvent_CustomFreedChild = 13,
  NdisNblTrackerEvent_CustomAllocatedNbl = 14,
  NdisNblTrackerEvent_CustomFreedNbl = 15,
  NdisNblTrackerEvent_OtherNotDatapath = 16,
  NdisNblTrackerEvent_LifetimeMax = 17,
} NDIS_NBL_TRACKER_LIFETIME_EVENT, *PNDIS_NBL_TRACKER_LIFETIME_EVENT;

typedef enum _NDIS_NBL_TRACKER_MODE
{
  NdisTrackNblDisabled = 0,
  NdisTrackNblLogOnly = 1,
  NdisTrackNblRuntimeCheck = 2,
  NdisTrackNblFullLogNoStack = 3,
  NdisTrackNblFullLogWithStack = 4,
} NDIS_NBL_TRACKER_MODE, *PNDIS_NBL_TRACKER_MODE;

typedef enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT
{
  NdisNblTrackerEvent_MiniportIndicated = 128,
  NdisNblTrackerEvent_MiniportIndicatedResources = 129,
  NdisNblTrackerEvent_FilterIndicated = 130,
  NdisNblTrackerEvent_FilterIndicatedResources = 131,
  NdisNblTrackerEvent_IndicatedToProtocol = 132,
  NdisNblTrackerEvent_IndicatedToProtocolResources = 133,
  NdisNblTrackerEvent_ProtocolReturned = 134,
  NdisNblTrackerEvent_ProtocolReturnedResources = 135,
  NdisNblTrackerEvent_FilterReturned = 136,
  NdisNblTrackerEvent_ReturnedToFilter = 137,
  NdisNblTrackerEvent_ReturnedToFilterResources = 138,
  NdisNblTrackerEvent_ReturnedToMiniport = 139,
  NdisNblTrackerEvent_ReturnedToMiniportResources = 140,
  NdisNblTrackerEvent_ProtocolSent = 141,
  NdisNblTrackerEvent_FilterSent = 142,
  NdisNblTrackerEvent_SentToFilter = 143,
  NdisNblTrackerEvent_SentToMiniport = 144,
  NdisNblTrackerEvent_MiniportSendCompleted = 145,
  NdisNblTrackerEvent_FilterSendCompleted = 146,
  NdisNblTrackerEvent_SendCompletedToOpen = 147,
  NdisNblTrackerEvent_PacketTranslation = 148,
  NdisNblTrackerEvent_CustomReceived = 149,
  NdisNblTrackerEvent_CustomReturned = 150,
  NdisNblTrackerEvent_CustomSent = 151,
  NdisNblTrackerEvent_CustomSendCompleted = 152,
  NdisNblTrackerEvent_OtherDatapath = 153,
  NdisNblTrackerEvent_OwnershipMax = 154,
} NDIS_NBL_TRACKER_OWNERSHIP_EVENT, *PNDIS_NBL_TRACKER_OWNERSHIP_EVENT;

typedef enum _NDIS_NBL_TRACKER_SOURCE
{
  NdisNblTrackerMiniport = 0,
  NdisNblTrackerFilter = 1,
  NdisNblTrackerProtocol = 2,
  NdisNblTrackerNdisNPOSRReturn = 3,
  NdisNblTrackerNdisSSSend = 4,
  NdisNblTrackerNdisSSRReturn = 5,
  NdisNblTrackerFirstCustomContext = 256,
} NDIS_NBL_TRACKER_SOURCE, *PNDIS_NBL_TRACKER_SOURCE;

typedef enum _NDIS_NDIS5_DRIVER_STATE
{
  Ndis5StateUnused = 0,
  Ndis5StatePaused = 1,
  Ndis5StateRunning = 2,
} NDIS_NDIS5_DRIVER_STATE, *PNDIS_NDIS5_DRIVER_STATE;

typedef struct _NDIS_NDK_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MaxQpCount;
  /* 0x000c */ unsigned long MaxCqCount;
  /* 0x0010 */ unsigned long MaxMrCount;
  /* 0x0014 */ unsigned long MaxPdCount;
  /* 0x0018 */ unsigned long MaxInboundReadLimit;
  /* 0x001c */ unsigned long MaxOutboundReadLimit;
  /* 0x0020 */ unsigned long MaxMwCount;
  /* 0x0024 */ unsigned long MaxSrqCount;
  /* 0x0028 */ unsigned __int64 MissingCounterMask;
  /* 0x0030 */ struct _NDK_ADAPTER_INFO* NdkInfo;
} NDIS_NDK_CAPABILITIES, *PNDIS_NDK_CAPABILITIES; /* size: 0x0038 */

typedef struct _NDIS_NDK_PERFORMANCE_COUNTERS
{
  /* 0x0000 */ unsigned __int64 Connect;
  /* 0x0008 */ unsigned __int64 Accept;
  /* 0x0010 */ unsigned __int64 ConnectFailure;
  /* 0x0018 */ unsigned __int64 ConnectionError;
  /* 0x0020 */ unsigned __int64 ActiveConnection;
  /* 0x0028 */ unsigned __int64 Reserved01;
  /* 0x0030 */ unsigned __int64 Reserved02;
  /* 0x0038 */ unsigned __int64 Reserved03;
  /* 0x0040 */ unsigned __int64 Reserved04;
  /* 0x0048 */ unsigned __int64 Reserved05;
  /* 0x0050 */ unsigned __int64 Reserved06;
  /* 0x0058 */ unsigned __int64 Reserved07;
  /* 0x0060 */ unsigned __int64 Reserved08;
  /* 0x0068 */ unsigned __int64 Reserved09;
  /* 0x0070 */ unsigned __int64 Reserved10;
  /* 0x0078 */ unsigned __int64 Reserved11;
  /* 0x0080 */ unsigned __int64 Reserved12;
  /* 0x0088 */ unsigned __int64 Reserved13;
  /* 0x0090 */ unsigned __int64 Reserved14;
  /* 0x0098 */ unsigned __int64 Reserved15;
  /* 0x00a0 */ unsigned __int64 Reserved16;
  /* 0x00a8 */ unsigned __int64 Reserved17;
  /* 0x00b0 */ unsigned __int64 Reserved18;
  /* 0x00b8 */ unsigned __int64 Reserved19;
  /* 0x00c0 */ unsigned __int64 Reserved20;
  /* 0x00c8 */ unsigned __int64 CQError;
  /* 0x00d0 */ unsigned __int64 RDMAInOctets;
  /* 0x00d8 */ unsigned __int64 RDMAOutOctets;
  /* 0x00e0 */ unsigned __int64 RDMAInFrames;
  /* 0x00e8 */ unsigned __int64 RDMAOutFrames;
} NDIS_NDK_PERFORMANCE_COUNTERS, *PNDIS_NDK_PERFORMANCE_COUNTERS; /* size: 0x00f0 */

typedef struct _NDIS_NET_BUFFER_LIST_8021Q_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int UserPriority : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned int CanonicalFormatId : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int VlanId : 12; /* bit position: 4 */
        /* 0x0000 */ unsigned int Reserved : 16; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ TagHeader;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int UserPriority : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned int CanonicalFormatId : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int VlanId : 12; /* bit position: 4 */
        /* 0x0000 */ unsigned int WMMInfo : 4; /* bit position: 16 */
        /* 0x0000 */ unsigned int Reserved : 12; /* bit position: 20 */
      }; /* bitfield */
    } /* size: 0x0004 */ WLanTagHeader;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0008 */
} NDIS_NET_BUFFER_LIST_8021Q_INFO, *PNDIS_NET_BUFFER_LIST_8021Q_INFO; /* size: 0x0008 */

typedef struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short FilterId;
      union
      {
        union
        {
          /* 0x0002 */ unsigned short QueueId;
          /* 0x0002 */ unsigned short VPortId;
        }; /* size: 0x0002 */
      } /* size: 0x0002 */ QueueVPortInfo;
    } /* size: 0x0004 */ FilteringInfo;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0008 */
} NDIS_NET_BUFFER_LIST_FILTERING_INFO, *PNDIS_NET_BUFFER_LIST_FILTERING_INFO; /* size: 0x0008 */

typedef enum _NDIS_NET_BUFFER_LIST_INFO
{
  TcpIpChecksumNetBufferListInfo = 0,
  TcpOffloadBytesTransferred = 0,
  IPsecOffloadV1NetBufferListInfo = 1,
  IPsecOffloadV2NetBufferListInfo = 1,
  TcpLargeSendNetBufferListInfo = 2,
  TcpReceiveNoPush = 2,
  ClassificationHandleNetBufferListInfo = 3,
  Ieee8021QNetBufferListInfo = 4,
  NetBufferListCancelId = 5,
  MediaSpecificInformation = 6,
  NetBufferListFrameType = 7,
  NetBufferListProtocolId = 7,
  NetBufferListHashValue = 8,
  NetBufferListHashInfo = 9,
  WfpNetBufferListInfo = 10,
  IPsecOffloadV2TunnelNetBufferListInfo = 11,
  IPsecOffloadV2HeaderNetBufferListInfo = 12,
  NetBufferListCorrelationId = 13,
  NetBufferListFilteringInfo = 14,
  MediaSpecificInformationEx = 15,
  NblOriginalInterfaceIfIndex = 16,
  NblReAuthWfpFlowContext = 16,
  TcpReceiveBytesTransferred = 17,
  SwitchForwardingReserved = 18,
  SwitchForwardingDetail = 19,
  VirtualSubnetInfo = 20,
  IMReserved = 21,
  TcpRecvSegCoalesceInfo = 22,
  RscTcpTimestampDelta = 23,
  TcpSendOffloadsSupplementalNetBufferListInfo = 23,
  NetBufferListInfoReserved1 = 24,
  NetBufferListInfoReserved2 = 25,
  MaxNetBufferListInfo = 26,
} NDIS_NET_BUFFER_LIST_INFO, *PNDIS_NET_BUFFER_LIST_INFO;

typedef struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO
{
  union
  {
    /* 0x0000 */ void* MediaSpecificInfo;
    /* 0x0000 */ void* NativeWifiSpecificInfo;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0008 */
} NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO, *PNDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO; /* size: 0x0008 */

typedef struct _NDIS_NET_BUFFER_LIST_POOL
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ unsigned __int64 ListLock;
  /* 0x0010 */ struct _LIST_ENTRY AllocatedList;
  /* 0x0020 */ unsigned short ItemLength;
  /* 0x0022 */ unsigned short ContextSize;
  /* 0x0028 */ void* OwnerHandle;
  /* 0x0030 */ void* Allocator;
  /* 0x0038 */ unsigned long Tag;
  /* 0x003c */ unsigned long Flags;
  /* 0x0040 */ unsigned __int64 Lock;
  /* 0x0048 */ struct _LIST_ENTRY GlobalNetBufferListPoolList;
  /* 0x0058 */ unsigned char ProtocolId;
  /* 0x005c */ unsigned long DataSize;
  /* 0x0060 */ unsigned long MdlSize;
  /* 0x0080 */ struct _NDIS_NPAGED_LOOKASIDE_LIST NetBufferListPoolList[1];
} NDIS_NET_BUFFER_LIST_POOL, *PNDIS_NET_BUFFER_LIST_POOL; /* size: 0x0180 */

typedef struct _NDIS_NET_BUFFER_POOL
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ unsigned __int64 ListLock;
  /* 0x0010 */ struct _LIST_ENTRY AllocatedList;
  /* 0x0020 */ unsigned short ItemLength;
  /* 0x0028 */ void* OwnerHandle;
  /* 0x0030 */ void* Allocator;
  /* 0x0038 */ unsigned long Tag;
  /* 0x0040 */ unsigned __int64 Lock;
  /* 0x0048 */ struct _LIST_ENTRY GlobalNetBufferPoolList;
  /* 0x0058 */ unsigned long Flags;
  /* 0x005c */ unsigned long DataSize;
  /* 0x0060 */ unsigned long MdlSize;
  /* 0x0080 */ struct _NDIS_NPAGED_LOOKASIDE_LIST NetBufferPoolList[1];
} NDIS_NET_BUFFER_POOL, *PNDIS_NET_BUFFER_POOL; /* size: 0x0180 */

typedef enum _NDIS_NIC_ACTIVE_STATE
{
  NdisNicActive = 0,
  NdisNicSuspending = 1,
  NdisNicQuiet = 2,
  NdisNicResuming = 3,
  NdisNicError = 4,
} NDIS_NIC_ACTIVE_STATE, *PNDIS_NIC_ACTIVE_STATE;

typedef struct _NDIS_NIC_SWITCH_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0010 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0018 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0020 */ long Reference;
  /* 0x0024 */ unsigned long SwitchId;
  /* 0x0028 */ struct _NDIS_PF_BLOCK* PFBlock;
  /* 0x0030 */ unsigned long NumActiveVPorts;
  /* 0x0038 */ struct _LIST_ENTRY VPortList;
  /* 0x0048 */ unsigned long NumAllocatedVFs;
  /* 0x0050 */ struct _LIST_ENTRY VFList;
  /* 0x0060 */ unsigned long NonDefaultQueuePairsInUse;
  /* 0x0064 */ struct _NDIS_NIC_SWITCH_PARAMETERS SwitchParameters;
  /* 0x0288 */ unsigned long NumActiveDefaultVPortMacAddresses;
  /* 0x028c */ unsigned long NumActiveNonDefaultVPortMacAddresses;
  /* 0x0290 */ unsigned long NumActiveDefaultVPortVlanIds;
  /* 0x0294 */ unsigned long NumActiveNonDefaultVPortVlanIds;
} NDIS_NIC_SWITCH_BLOCK, *PNDIS_NIC_SWITCH_BLOCK; /* size: 0x0298 */

typedef struct _NDIS_NIC_SWITCH_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long NdisReserved1;
  /* 0x000c */ unsigned long NumTotalMacAddresses;
  /* 0x0010 */ unsigned long NumMacAddressesPerPort;
  /* 0x0014 */ unsigned long NumVlansPerPort;
  /* 0x0018 */ unsigned long NdisReserved2;
  /* 0x001c */ unsigned long NdisReserved3;
  /* 0x0020 */ unsigned long NicSwitchCapabilities;
  /* 0x0024 */ unsigned long MaxNumSwitches;
  /* 0x0028 */ unsigned long MaxNumVPorts;
  /* 0x002c */ unsigned long NdisReserved4;
  /* 0x0030 */ unsigned long MaxNumVFs;
  /* 0x0034 */ unsigned long MaxNumQueuePairs;
  /* 0x0038 */ unsigned long NdisReserved5;
  /* 0x003c */ unsigned long NdisReserved6;
  /* 0x0040 */ unsigned long NdisReserved7;
  /* 0x0044 */ unsigned long MaxNumQueuePairsPerNonDefaultVPort;
  /* 0x0048 */ unsigned long NdisReserved8;
  /* 0x004c */ unsigned long NdisReserved9;
  /* 0x0050 */ unsigned long NdisReserved10;
  /* 0x0054 */ unsigned long NdisReserved11;
  /* 0x0058 */ unsigned long NdisReserved12;
  /* 0x005c */ unsigned long MaxNumMacAddresses;
  /* 0x0060 */ unsigned long NdisReserved13;
  /* 0x0064 */ unsigned long NdisReserved14;
  /* 0x0068 */ unsigned long NdisReserved15;
  /* 0x006c */ unsigned long NdisReserved16;
  /* 0x0070 */ unsigned long NdisReserved17;
} NDIS_NIC_SWITCH_CAPABILITIES, *PNDIS_NIC_SWITCH_CAPABILITIES; /* size: 0x0074 */

typedef struct _NDIS_NIC_SWITCH_INFO_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long FirstElementOffset;
  /* 0x0008 */ unsigned long NumElements;
  /* 0x000c */ unsigned long ElementSize;
} NDIS_NIC_SWITCH_INFO_ARRAY, *PNDIS_NIC_SWITCH_INFO_ARRAY; /* size: 0x0010 */

typedef struct _NDIS_NIC_SWITCH_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_NIC_SWITCH_TYPE SwitchType;
  /* 0x000c */ unsigned long SwitchId;
  /* 0x0010 */ struct _IF_COUNTED_STRING_LH SwitchFriendlyName;
  /* 0x0214 */ unsigned long NumVFs;
  /* 0x0218 */ unsigned long NdisReserved1;
  /* 0x021c */ unsigned long NdisReserved2;
  /* 0x0220 */ unsigned long NdisReserved3;
} NDIS_NIC_SWITCH_PARAMETERS, *PNDIS_NIC_SWITCH_PARAMETERS; /* size: 0x0224 */

typedef enum _NDIS_NIC_SWITCH_TYPE
{
  NdisNicSwitchTypeUnspecified = 0,
  NdisNicSwitchTypeExternal = 1,
  NdisNicSwitchTypeMax = 2,
} NDIS_NIC_SWITCH_TYPE, *PNDIS_NIC_SWITCH_TYPE;

typedef struct _NDIS_NIC_SWITCH_VF_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SwitchId;
  /* 0x000c */ struct _IF_COUNTED_STRING_LH VMName;
  /* 0x0210 */ struct _IF_COUNTED_STRING_LH VMFriendlyName;
  /* 0x0414 */ struct _IF_COUNTED_STRING_LH NicName;
  /* 0x0618 */ unsigned short MacAddressLength;
  /* 0x061a */ unsigned char PermanentMacAddress[32];
  /* 0x063a */ unsigned char CurrentMacAddress[32];
  /* 0x065a */ unsigned short VFId;
  /* 0x065c */ unsigned long RequestorId;
} NDIS_NIC_SWITCH_VF_PARAMETERS, *PNDIS_NIC_SWITCH_VF_PARAMETERS; /* size: 0x0660 */

typedef enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION
{
  NdisNicSwitchVPortInterruptModerationUndefined = 0,
  NdisNicSwitchVPortInterruptModerationAdaptive = 1,
  NdisNicSwitchVPortInterruptModerationOff = 2,
  NdisNicSwitchVPortInterruptModerationLow = 100,
  NdisNicSwitchVPortInterruptModerationMedium = 200,
  NdisNicSwitchVPortInterruptModerationHigh = 300,
} NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION, *PNDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION;

typedef struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SwitchId;
  /* 0x000c */ unsigned long VPortId;
  /* 0x0010 */ struct _IF_COUNTED_STRING_LH VPortName;
  /* 0x0214 */ unsigned short AttachedFunctionId;
  /* 0x0218 */ unsigned long NumQueuePairs;
  /* 0x021c */ enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION InterruptModeration;
  /* 0x0220 */ enum _NDIS_NIC_SWITCH_VPORT_STATE VPortState;
  /* 0x0228 */ struct _GROUP_AFFINITY ProcessorAffinity;
  /* 0x0238 */ unsigned long LookaheadSize;
  /* 0x023c */ long __PADDING__[1];
} NDIS_NIC_SWITCH_VPORT_PARAMETERS, *PNDIS_NIC_SWITCH_VPORT_PARAMETERS; /* size: 0x0240 */

typedef enum _NDIS_NIC_SWITCH_VPORT_STATE
{
  NdisNicSwitchVPortStateUndefined = 0,
  NdisNicSwitchVPortStateActivated = 1,
  NdisNicSwitchVPortStateDeactivated = 2,
  NdisNicSwitchVPortStateMaximum = 3,
} NDIS_NIC_SWITCH_VPORT_STATE, *PNDIS_NIC_SWITCH_VPORT_STATE;

typedef struct _NDIS_NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _LOOKASIDE_LIST_EX List;
  /* 0x0080 */ union _SLIST_HEADER BackupList;
  /* 0x00c0 */ union _SLIST_HEADER* AllocListPtr;
  /* 0x00c8 */ union _SLIST_HEADER* FreeListPtr;
  /* 0x00d0 */ unsigned __int64 ListSwapLock;
  /* 0x00d8 */ unsigned char Initialized;
  /* 0x00d9 */ char __PADDING__[39];
} NDIS_NPAGED_LOOKASIDE_LIST, *PNDIS_NPAGED_LOOKASIDE_LIST; /* size: 0x0100 */

typedef struct _NDIS_NSI_COMPARTMENT_RW
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ union _NET_LUID_LH LoopbackIfLuid;
  /* 0x0010 */ struct _GUID LoopbackIfNetworkGuid;
  /* 0x0020 */ struct _GUID LoopbackIfInterfaceGuid;
  /* 0x0030 */ struct _IF_COUNTED_STRING_LH LoopbackIfDescr;
  /* 0x0234 */ struct _IF_COUNTED_STRING_LH LoopbackIfAlias;
  /* 0x0438 */ struct _GUID CompartmentGuid;
  /* 0x0448 */ unsigned long Flags;
  /* 0x044c */ long __PADDING__[1];
} NDIS_NSI_COMPARTMENT_RW, *PNDIS_NSI_COMPARTMENT_RW; /* size: 0x0450 */

typedef struct _NDIS_NSI_NETWORK_RW
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned int CompartmentId;
  /* 0x0008 */ unsigned long SiteId;
  /* 0x000c */ struct _IF_COUNTED_STRING_LH NetworkName;
} NDIS_NSI_NETWORK_RW, *PNDIS_NSI_NETWORK_RW; /* size: 0x0210 */

typedef enum _NDIS_NSI_REFTAG
{
  NSIREF_IOCTL = 0,
  NSIREF_STATUS = 1,
  NSIREF_IFTOP = 2,
  NSIREF_IFSTATS = 3,
  NSIREF_IFOID = 4,
  NSIREF_NUMBER_OF_TAGS = 5,
} NDIS_NSI_REFTAG, *PNDIS_NSI_REFTAG;

typedef struct _NDIS_OBJECT_HEADER
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Revision;
  /* 0x0002 */ unsigned short Size;
} NDIS_OBJECT_HEADER, *PNDIS_OBJECT_HEADER; /* size: 0x0004 */

typedef struct _NDIS_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD Checksum;
  /* 0x0024 */ struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
  /* 0x0034 */ struct _NDIS_IPSEC_OFFLOAD_V1 IPsecV1;
  /* 0x0050 */ struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
  /* 0x006c */ unsigned long Flags;
  /* 0x0070 */ struct _NDIS_IPSEC_OFFLOAD_V2 IPsecV2;
  /* 0x0090 */ struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD Rsc;
  /* 0x0094 */ struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD EncapsulatedPacketTaskOffloadGre;
} NDIS_OFFLOAD, *PNDIS_OFFLOAD; /* size: 0x009c */

typedef struct _NDIS_OFFLOAD_CLIENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
} NDIS_OFFLOAD_CLIENT_HANDLERS, *PNDIS_OFFLOAD_CLIENT_HANDLERS; /* size: 0x0004 */

typedef struct _NDIS_OFFLOAD_ENCAPSULATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  struct
  {
    /* 0x0004 */ unsigned long Enabled;
    /* 0x0008 */ unsigned long EncapsulationType;
    /* 0x000c */ unsigned long HeaderSize;
  } /* size: 0x000c */ IPv4;
  struct
  {
    /* 0x0010 */ unsigned long Enabled;
    /* 0x0014 */ unsigned long EncapsulationType;
    /* 0x0018 */ unsigned long HeaderSize;
  } /* size: 0x000c */ IPv6;
} NDIS_OFFLOAD_ENCAPSULATION, *PNDIS_OFFLOAD_ENCAPSULATION; /* size: 0x001c */

typedef struct _NDIS_OFFLOAD_EVENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
} NDIS_OFFLOAD_EVENT_HANDLERS, *PNDIS_OFFLOAD_EVENT_HANDLERS; /* size: 0x0004 */

typedef struct _NDIS_OFFLOAD_HANDLE
{
  /* 0x0000 */ void* NdisReserved[1];
  /* 0x0008 */ void* MiniportOffloadContext;
} NDIS_OFFLOAD_HANDLE, *PNDIS_OFFLOAD_HANDLE; /* size: 0x0010 */

typedef struct _NDIS_OFFLOAD_HANDLE_PRIVATE
{
  /* 0x0000 */ struct _NDIS_OFFLOAD_HANDLE Handle;
  /* 0x0010 */ void* ProtocolBindingContext;
} NDIS_OFFLOAD_HANDLE_PRIVATE, *PNDIS_OFFLOAD_HANDLE_PRIVATE; /* size: 0x0018 */

typedef struct _NDIS_OID_CACHE_ENTRY
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0004 */ unsigned int InfoBufferLength;
  /* 0x0008 */ void* InfoBuffer;
  /* 0x0010 */ int LastStatus;
  /* 0x0014 */ unsigned char ValueValid;
  /* 0x0015 */ char __PADDING__[3];
} NDIS_OID_CACHE_ENTRY, *PNDIS_OID_CACHE_ENTRY; /* size: 0x0018 */

typedef struct _NDIS_OID_REQUEST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_REQUEST_TYPE RequestType;
  /* 0x0008 */ unsigned long PortNumber;
  /* 0x000c */ unsigned int Timeout;
  /* 0x0010 */ void* RequestId;
  /* 0x0018 */ void* RequestHandle;
  /* 0x0020 */ union _REQUEST_DATA DATA;
  /* 0x0048 */ unsigned char NdisReserved[128];
  /* 0x00c8 */ unsigned char MiniportReserved[16];
  /* 0x00d8 */ unsigned char SourceReserved[16];
  /* 0x00e8 */ unsigned char SupportedRevision;
  /* 0x00e9 */ unsigned char Reserved1;
  /* 0x00ea */ unsigned short Reserved2;
  /* 0x00ec */ long __PADDING__[1];
} NDIS_OID_REQUEST, *PNDIS_OID_REQUEST; /* size: 0x00f0 */

typedef struct _NDIS_OID_REQUEST_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Completed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long FreeRequest : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long OidInTable : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long SignalEvent : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long CoNdis : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long FromProtocol : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long FromFilter : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long Passthrough : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long LastRestoreFilter : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long OnlyDerefOpen : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long SignalAndExit : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned long MpSaveBuf : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned long DownLevel : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned long Cloned : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned long Mandatory : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned long SentToMiniport : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long SentToFilter : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long ForReset : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned long ForRestore : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned long ForMpDirect : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long DirectRequest : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long RevisionChanged : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long SkipPreProc : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long SkipPostProc : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long SkipSourceCompletion : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long SourceCompletionOnly : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long Remainder : 5; /* bit position: 27 */
  }; /* bitfield */
} NDIS_OID_REQUEST_FLAGS, *PNDIS_OID_REQUEST_FLAGS; /* size: 0x0004 */

typedef struct _NDIS_OID_REQUEST_RESERVED
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY Entry;
    struct
    {
      /* 0x0000 */ struct _NDIS_OID_REQUEST* NextRequest;
      /* 0x0008 */ int Status;
    }; /* size: 0x000c */
  }; /* size: 0x0010 */
  /* 0x0010 */ struct _NDIS_OID_REQUEST_FLAGS Flags;
  /* 0x0014 */ unsigned long OidTableIndex;
  /* 0x0018 */ void* Request;
  /* 0x0020 */ void* SourceHandle;
  union
  {
    struct
    {
      /* 0x0028 */ struct _KEVENT Event;
      /* 0x0040 */ void* NdisVcHandle;
    }; /* size: 0x0020 */
    struct
    {
      /* 0x0028 */ void* PartyContext;
      /* 0x0030 */ void* CallMgrContext;
      /* 0x0038 */ void* VcContext;
      /* 0x0040 */ void* AfContext;
    } /* size: 0x0020 */ CoNdis;
  }; /* size: 0x0020 */
  union
  {
    /* 0x0048 */ unsigned __int64 StartCycle;
    struct
    {
      /* 0x0048 */ struct _NDIS_REQUEST_XLATION_CONTEXT* pOidXlationContext;
      /* 0x0050 */ unsigned long OriginalBufferLength;
    }; /* size: 0x000c */
    struct
    {
      /* 0x0048 */ unsigned long SavedOid;
      /* 0x0050 */ void* SavedInfoBuf;
      /* 0x0058 */ unsigned long SavedInfoBufLen;
      /* 0x005c */ unsigned long RequestBuffer;
    }; /* size: 0x0014 */
    struct
    {
      /* 0x0048 */ struct _NDIS_VF_BLOCK* VFBlock;
      /* 0x0050 */ struct _NDIS_VPORT_BLOCK* VPortBlock;
    } /* size: 0x0010 */ IovContext;
    struct
    {
      /* 0x0048 */ struct _NDIS_WOL_XLATION_CONTEXT* WolXlationContext;
      /* 0x0050 */ unsigned long WolPatternId;
      /* 0x0058 */ struct _NDIS_PACKET_PATTERN_ENTRY* SourcePacketEntry;
    } /* size: 0x0018 */ PMContext;
  }; /* size: 0x0018 */
} NDIS_OID_REQUEST_RESERVED, *PNDIS_OID_REQUEST_RESERVED; /* size: 0x0060 */

typedef struct _NDIS_OPEN_BLOCK
{
  union
  {
    /* 0x0000 */ void* MacHandle;
    /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  }; /* size: 0x0008 */
  /* 0x0008 */ void* BindingHandle;
  /* 0x0010 */ struct _NDIS_MINIPORT_BLOCK* MiniportHandle;
  /* 0x0018 */ struct _NDIS_PROTOCOL_BLOCK* ProtocolHandle;
  /* 0x0020 */ void* ProtocolBindingContext;
  /* 0x0028 */ void* NextSendHandler /* function */;
  /* 0x0030 */ void* NextSendContext;
  /* 0x0038 */ void* MiniportAdapterContext;
  /* 0x0040 */ unsigned char Reserved1;
  /* 0x0041 */ unsigned char CallingFromNdis6Protocol;
  /* 0x0042 */ unsigned char Reserved3;
  /* 0x0043 */ unsigned char Reserved4;
  /* 0x0048 */ void* NextReturnNetBufferListsHandler /* function */;
  /* 0x0050 */ unsigned __int64 Reserved5;
  /* 0x0058 */ void* NextReturnNetBufferListsContext;
  union
  {
    /* 0x0060 */ void* SendHandler /* function */;
    /* 0x0060 */ void* WanSendHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0068 */ void* TransferDataHandler /* function */;
  /* 0x0070 */ void* SendCompleteHandler /* function */;
  /* 0x0078 */ void* TransferDataCompleteHandler /* function */;
  /* 0x0080 */ void* ReceiveHandler /* function */;
  /* 0x0088 */ void* ReceiveCompleteHandler /* function */;
  /* 0x0090 */ void* WanReceiveHandler /* function */;
  /* 0x0098 */ void* RequestCompleteHandler /* function */;
  /* 0x00a0 */ void* ReceivePacketHandler /* function */;
  /* 0x00a8 */ void* SendPacketsHandler /* function */;
  /* 0x00b0 */ void* ResetHandler /* function */;
  /* 0x00b8 */ void* RequestHandler /* function */;
  /* 0x00c0 */ void* OidRequestHandler /* function */;
  /* 0x00c8 */ void* ResetCompleteHandler /* function */;
  union
  {
    /* 0x00d0 */ void* StatusHandler /* function */;
    /* 0x00d0 */ void* StatusHandlerEx /* function */;
  }; /* size: 0x0008 */
  /* 0x00d8 */ void* StatusCompleteHandler /* function */;
  /* 0x00e0 */ volatile unsigned long OpenFlags;
  /* 0x00e4 */ long References;
  /* 0x00e8 */ unsigned __int64 SpinLock;
  /* 0x00f0 */ void* FilterHandle;
  /* 0x00f8 */ unsigned int FrameTypeArraySize;
  /* 0x00fc */ unsigned short FrameTypeArray[4];
  /* 0x0104 */ unsigned long ProtocolOptions;
  /* 0x0108 */ unsigned long CurrentLookahead;
  /* 0x0110 */ void* WSendHandler /* function */;
  /* 0x0118 */ void* WTransferDataHandler /* function */;
  /* 0x0120 */ void* WSendPacketsHandler /* function */;
  /* 0x0128 */ void* CancelSendPacketsHandler /* function */;
  /* 0x0130 */ unsigned long WakeUpEnable;
  /* 0x0134 */ struct _NDIS_PM_PARAMETERS PMCurrentParameters;
  /* 0x0148 */ struct _KEVENT* CloseCompleteEvent;
  /* 0x0150 */ struct _QUEUED_CLOSE QC;
  /* 0x0178 */ long AfReferences;
  /* 0x0180 */ struct _NDIS_OPEN_BLOCK* NextGlobalOpen;
  /* 0x0188 */ struct _NDIS_OPEN_BLOCK* MiniportNextOpen;
  /* 0x0190 */ struct _NDIS_OPEN_BLOCK* ProtocolNextOpen;
  /* 0x0198 */ struct _UNICODE_STRING* BindDeviceName;
  /* 0x01a0 */ struct _UNICODE_STRING* RootDeviceName;
  /* 0x01a8 */ struct _NDIS_OPEN_BLOCK* FilterNextOpen;
  /* 0x01b0 */ unsigned int PacketFilters;
  /* 0x01b4 */ unsigned int OldPacketFilters;
  /* 0x01b8 */ unsigned int MaxMulticastAddresses;
  /* 0x01c0 */ struct _ETH_MULTICAST_WRAPPER* MCastAddressBuf;
  /* 0x01c8 */ unsigned int NumAddresses;
  /* 0x01d0 */ struct _ETH_MULTICAST_WRAPPER* OldMCastAddressBuf;
  /* 0x01d8 */ unsigned int OldNumAddresses;
  /* 0x01e0 */ unsigned char* RssParametersBuffer;
  /* 0x01e8 */ struct _NDIS_RECEIVE_SCALE_PARAMETERS* NdisRSSParameters;
  /* 0x01f0 */ struct _SINGLE_LIST_ENTRY PatternList;
  /* 0x01f8 */ struct _SINGLE_LIST_ENTRY WOLPatternList;
  /* 0x0200 */ struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
  /* 0x0208 */ void* ProtSendNetBufferListsComplete /* function */;
  /* 0x0210 */ void* SendCompleteNdisPacketContext;
  /* 0x0218 */ void* SendCompleteNetBufferListsContext;
  /* 0x0220 */ void* ReceiveNetBufferLists /* function */;
  /* 0x0228 */ void* ReceiveNetBufferListsContext;
  /* 0x0230 */ void* SavedSendPacketsHandler /* function */;
  /* 0x0238 */ void* SavedCancelSendPacketsHandler /* function */;
  /* 0x0240 */ void* SavedSendHandler /* function */;
  /* 0x0248 */ void* InitiateOffloadCompleteHandler /* function */;
  /* 0x0250 */ void* TerminateOffloadCompleteHandler /* function */;
  /* 0x0258 */ void* UpdateOffloadCompleteHandler /* function */;
  /* 0x0260 */ void* InvalidateOffloadCompleteHandler /* function */;
  /* 0x0268 */ void* QueryOffloadCompleteHandler /* function */;
  /* 0x0270 */ void* IndicateOffloadEventHandler /* function */;
  /* 0x0278 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0280 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x0288 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0290 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x0298 */ void* TcpOffloadEventHandler /* function */;
  /* 0x02a0 */ void* TcpOffloadReceiveIndicateHandler /* function */;
  /* 0x02a8 */ struct NDIS_NBL_TRACKER_HANDLE__* NblTracker;
  /* 0x02b0 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
  /* 0x02b8 */ unsigned __int64 RefCountLock;
  /* 0x02c0 */ unsigned long ProtocolMajorVersion;
  /* 0x02c8 */ void** IfBlock;
  /* 0x02d0 */ struct _NDIS_SPIN_LOCK PnPStateLock;
  /* 0x02e0 */ enum _NDIS_NDIS5_DRIVER_STATE PnPState;
  /* 0x02e4 */ int OutstandingSends;
  /* 0x02e8 */ struct _NDIS_EVENT PauseEvent;
  /* 0x0300 */ void* Ndis5WanSendHandler /* function */;
  /* 0x0308 */ void* ProtSendCompleteHandler /* function */;
  /* 0x0310 */ void* OidRequestCompleteHandler /* function */;
  /* 0x0318 */ long NumOfPauseRestartRequests;
  /* 0x031c */ enum _NDIS_OPEN_STATE State;
  /* 0x0320 */ struct _NDIS_OPEN_OFFLOAD* Offload;
  /* 0x0328 */ struct _NDIS_STATUS_UNBIND_WORKITEM* StatusUnbindWorkItem;
  /* 0x0330 */ unsigned __int64 DpcStartCycle;
  /* 0x0338 */ struct PNDIS_PER_PROCESSOR_SLOT__* ReceivedAPacketSlot;
  /* 0x0340 */ void* DirectOidRequestHandler /* function */;
  /* 0x0348 */ struct _LIST_ENTRY ReceiveQueueList;
  /* 0x0358 */ unsigned long NumReceiveQueues;
  /* 0x0360 */ struct _LIST_ENTRY SharedMemoryBlockList;
  /* 0x0370 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0378 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x0380 */ void* AllocateSharedMemoryContext;
  /* 0x0388 */ struct _NDIS_COMPOSITE_BUS_INFORMATION* CompositeBus;
  /* 0x0390 */ unsigned long NumAllocatedVFs;
  /* 0x0398 */ struct _LIST_ENTRY VFList;
  /* 0x03a8 */ unsigned long NumActiveVPorts;
  /* 0x03b0 */ struct _LIST_ENTRY VPortList;
  /* 0x03c0 */ enum _NDIS_OPEN_UNBIND_REASON UnbindReason;
  /* 0x03c4 */ unsigned long AoAcReferences;
  /* 0x03c8 */ struct _NDIS_CO_AF_BLOCK* NextAf;
  /* 0x03d0 */ void* MiniportCoCreateVcHandler /* function */;
  /* 0x03d8 */ void* MiniportCoRequestHandler /* function */;
  /* 0x03e0 */ void* CoCreateVcHandler /* function */;
  /* 0x03e8 */ void* CoDeleteVcHandler /* function */;
  /* 0x03f0 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x03f8 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x0400 */ void* CoRequestCompleteHandler /* function */;
  /* 0x0408 */ void* CoRequestHandler /* function */;
  /* 0x0410 */ struct _LIST_ENTRY ActiveVcHead;
  /* 0x0420 */ struct _LIST_ENTRY InactiveVcHead;
  /* 0x0430 */ long PendingAfNotifications;
  /* 0x0438 */ struct _KEVENT* AfNotifyCompleteEvent;
  /* 0x0440 */ void* MiniportCoOidRequestHandler /* function */;
  /* 0x0448 */ void* CoOidRequestCompleteHandler /* function */;
  /* 0x0450 */ void* CoOidRequestHandler /* function */;
} NDIS_OPEN_BLOCK, *PNDIS_OPEN_BLOCK; /* size: 0x0458 */

typedef struct _NDIS_OPEN_NDK_ADAPTER_PARAMETERS
{
  /* 0x0000 */ struct NDK_VERSION Version;
} NDIS_OPEN_NDK_ADAPTER_PARAMETERS, *PNDIS_OPEN_NDK_ADAPTER_PARAMETERS; /* size: 0x0004 */

typedef struct _NDIS_OPEN_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OFFLOAD_ENCAPSULATION SetEncapsulation;
  /* 0x001c */ unsigned char AlreadySetEncapsulation;
  /* 0x0020 */ struct _NDIS_OFFLOAD_ENCAPSULATION XlateEncap;
  struct
  {
    /* 0x0040 */ unsigned long Oid;
    /* 0x0048 */ void* Buffer;
    /* 0x0050 */ unsigned long BufferLength;
    /* 0x0054 */ long __PADDING__[1];
  } /* size: 0x0018 */ Encapsulation;
  struct
  {
    /* 0x0058 */ unsigned long Oid;
    /* 0x0060 */ void* Buffer;
    /* 0x0068 */ unsigned long BufferLength;
    /* 0x006c */ long __PADDING__[1];
  } /* size: 0x0018 */ Task;
} NDIS_OPEN_OFFLOAD, *PNDIS_OPEN_OFFLOAD; /* size: 0x0070 */

typedef struct _NDIS_OPEN_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _UNICODE_STRING* AdapterName;
  /* 0x0010 */ enum _NDIS_MEDIUM* MediumArray;
  /* 0x0018 */ unsigned int MediumArraySize;
  /* 0x0020 */ unsigned int* SelectedMediumIndex;
  /* 0x0028 */ unsigned short* FrameTypeArray;
  /* 0x0030 */ unsigned int FrameTypeArraySize;
  /* 0x0034 */ long __PADDING__[1];
} NDIS_OPEN_PARAMETERS, *PNDIS_OPEN_PARAMETERS; /* size: 0x0038 */

typedef enum _NDIS_OPEN_STATE
{
  NdisOpenStateRunning = 0,
  NdisOpenStatePausing = 1,
  NdisOpenStatePaused = 2,
  NdisOpenStateRestarting = 3,
} NDIS_OPEN_STATE, *PNDIS_OPEN_STATE;

typedef enum _NDIS_OPEN_UNBIND_REASON
{
  UnbindReasonNotUnbinding = 0,
  UnbindReasonCloseMiniportBindings = 1,
  UnbindReasonCloseAllBindingsOnProtocol = 2,
  UnbindReasonCloseMiniportBindingsForPause = 3,
  UnbindReasonHandleProtocolReconfigNotification = 4,
  UnbindReasonHandleProtocolUnbindNotification = 5,
  UnbindReasonPnPNotifyAllTransports = 6,
  UnbindReasonPnPNotifyBinding = 7,
} NDIS_OPEN_UNBIND_REASON, *PNDIS_OPEN_UNBIND_REASON;

typedef struct _NDIS_PACKET
{
  /* 0x0000 */ struct _NDIS_PACKET_PRIVATE Private;
  union
  {
    struct
    {
      /* 0x0030 */ unsigned char MiniportReserved[16];
      /* 0x0040 */ unsigned char WrapperReserved[16];
    }; /* size: 0x0020 */
    struct
    {
      /* 0x0030 */ unsigned char MiniportReservedEx[24];
      /* 0x0048 */ unsigned char WrapperReservedEx[8];
    }; /* size: 0x0020 */
    /* 0x0030 */ unsigned char MacReserved[32];
  }; /* size: 0x0020 */
  /* 0x0050 */ unsigned __int64 Reserved[2];
  /* 0x0060 */ unsigned char ProtocolReserved[1];
  /* 0x0061 */ char __PADDING__[7];
} NDIS_PACKET, *PNDIS_PACKET; /* size: 0x0068 */

typedef struct _NDIS_PACKET_8021Q_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int UserPriority : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned int CanonicalFormatId : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int VlanId : 12; /* bit position: 4 */
        /* 0x0000 */ unsigned int Reserved : 16; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ TagHeader;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0008 */
} NDIS_PACKET_8021Q_INFO, *PNDIS_PACKET_8021Q_INFO; /* size: 0x0008 */

typedef struct _NDIS_PACKET_EXTENSION
{
  /* 0x0000 */ void* NdisPacketInfo[12];
} NDIS_PACKET_EXTENSION, *PNDIS_PACKET_EXTENSION; /* size: 0x0060 */

typedef struct _NDIS_PACKET_OOB_DATA
{
  union
  {
    /* 0x0000 */ unsigned __int64 TimeToSend;
    /* 0x0000 */ unsigned __int64 TimeSent;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 TimeReceived;
  /* 0x0010 */ unsigned int HeaderSize;
  /* 0x0014 */ unsigned int SizeMediaSpecificInfo;
  /* 0x0018 */ void* MediaSpecificInformation;
  /* 0x0020 */ int Status;
  /* 0x0024 */ long __PADDING__[1];
} NDIS_PACKET_OOB_DATA, *PNDIS_PACKET_OOB_DATA; /* size: 0x0028 */

typedef struct _NDIS_PACKET_PATTERN_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY DupLink;
  /* 0x0010 */ unsigned long Size;
  /* 0x0018 */ void* Source;
  /* 0x0020 */ unsigned long Priority;
  /* 0x0024 */ unsigned long EffectivePriority;
  /* 0x0028 */ unsigned long Id;
  /* 0x002c */ unsigned long PortNumber;
  union
  {
    /* 0x0030 */ struct _NDIS_PM_PACKET_PATTERN Pattern;
    /* 0x0030 */ struct _NDIS_PM_WOL_PATTERN WoLPattern;
    /* 0x0030 */ struct _NDIS_PM_PROTOCOL_OFFLOAD ProtocolOffload;
  }; /* size: 0x00f0 */
} NDIS_PACKET_PATTERN_ENTRY, *PNDIS_PACKET_PATTERN_ENTRY; /* size: 0x0120 */

typedef struct _NDIS_PACKET_PRIVATE
{
  /* 0x0000 */ unsigned int PhysicalCount;
  /* 0x0004 */ unsigned int TotalLength;
  /* 0x0008 */ struct _MDL* Head;
  /* 0x0010 */ struct _MDL* Tail;
  /* 0x0018 */ void* Pool;
  /* 0x0020 */ unsigned int Count;
  /* 0x0024 */ unsigned long Flags;
  /* 0x0028 */ unsigned char ValidCounts;
  /* 0x0029 */ unsigned char NdisPacketFlags;
  /* 0x002a */ unsigned short NdisPacketOobOffset;
  /* 0x002c */ long __PADDING__[1];
} NDIS_PACKET_PRIVATE, *PNDIS_PACKET_PRIVATE; /* size: 0x0030 */

typedef struct _NDIS_PACKET_STACK
{
  /* 0x0000 */ unsigned __int64 IMReserved[2];
  /* 0x0010 */ unsigned __int64 NdisReserved[4];
} NDIS_PACKET_STACK, *PNDIS_PACKET_STACK; /* size: 0x0030 */

typedef struct _NDIS_PACKET_WRAPPER
{
  union
  {
    /* 0x0000 */ unsigned __int64 Padding;
    /* 0x0000 */ unsigned long PvtFlags;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _STACK_INDEX StackIndex;
  /* 0x0010 */ struct _NDIS_PACKET Packet;
} NDIS_PACKET_WRAPPER, *PNDIS_PACKET_WRAPPER; /* size: 0x0078 */

typedef enum _NDIS_PARAMETER_TYPE
{
  NdisParameterInteger = 0,
  NdisParameterHexInteger = 1,
  NdisParameterString = 2,
  NdisParameterMultiString = 3,
  NdisParameterBinary = 4,
} NDIS_PARAMETER_TYPE, *PNDIS_PARAMETER_TYPE;

typedef struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned int DeviceType;
  /* 0x0008 */ unsigned int CurrentSpeedAndMode;
  /* 0x000c */ unsigned int CurrentPayloadSize;
  /* 0x0010 */ unsigned int MaxPayloadSize;
  /* 0x0014 */ unsigned int MaxReadRequestSize;
  /* 0x0018 */ unsigned int CurrentLinkSpeed;
  /* 0x001c */ unsigned int CurrentLinkWidth;
  /* 0x0020 */ unsigned int MaxLinkSpeed;
  /* 0x0024 */ unsigned int MaxLinkWidth;
  /* 0x0028 */ unsigned int PciExpressVersion;
  /* 0x002c */ unsigned int InterruptType;
  /* 0x0030 */ unsigned int MaxInterruptMessages;
} NDIS_PCI_DEVICE_CUSTOM_PROPERTIES, *PNDIS_PCI_DEVICE_CUSTOM_PROPERTIES; /* size: 0x0034 */

typedef struct _NDIS_PCW_CONTEXT
{
  /* 0x0000 */ struct _NDIS_PCW_DATA_BLOCK* PcwBlock;
  /* 0x0008 */ unsigned long DatapathEventsMask;
  /* 0x000c */ unsigned long DatapathCyclesMask;
  /* 0x0010 */ unsigned long CurrentCpu;
  /* 0x0014 */ long __PADDING__[1];
} NDIS_PCW_CONTEXT, *PNDIS_PCW_CONTEXT; /* size: 0x0018 */

typedef struct _NDIS_PCW_DATA_BLOCK
{
  /* 0x0000 */ unsigned long DatapathEventReferences[26];
  /* 0x0068 */ unsigned long DatapathCycleReferences[13];
  /* 0x00a0 */ struct _NDIS_PCW_DATA_BLOCK* Next;
  /* 0x00a8 */ unsigned long ReferenceCount;
  /* 0x00b0 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x00b8 */ unsigned long TotalInstanceId;
  /* 0x00c0 */ struct _UNICODE_STRING TotalInstanceName;
  /* 0x0100 */ struct _NDIS_PCW_PER_CPU_DATA_BLOCK PerCpu[1];
} NDIS_PCW_DATA_BLOCK, *PNDIS_PCW_DATA_BLOCK; /* size: 0x02c0 */

typedef struct _NDIS_PCW_PER_CPU_DATA_BLOCK
{
  union
  {
    /* 0x0000 */ unsigned __int64 DataArray[38];
    /* 0x0000 */ struct _NDIS_PER_PROC_PERFORMANCE_COUNTERS Data;
  }; /* size: 0x0130 */
  /* 0x0130 */ unsigned __int64 CycleStart[13];
  /* 0x0198 */ unsigned long InstanceId;
  /* 0x01a0 */ struct _UNICODE_STRING InstanceName;
  /* 0x01b0 */ long __PADDING__[4];
} NDIS_PCW_PER_CPU_DATA_BLOCK, *PNDIS_PCW_PER_CPU_DATA_BLOCK; /* size: 0x01c0 */

typedef struct _NDIS_PENDING_IM_INSTANCE
{
  /* 0x0000 */ struct _NDIS_PENDING_IM_INSTANCE* Next;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ struct _UNICODE_STRING Name;
} NDIS_PENDING_IM_INSTANCE, *PNDIS_PENDING_IM_INSTANCE; /* size: 0x0020 */

typedef enum _NDIS_PER_PACKET_INFO
{
  TcpIpChecksumPacketInfo = 0,
  IpSecPacketInfo = 1,
  TcpLargeSendPacketInfo = 2,
  ClassificationHandlePacketInfo = 3,
  NdisReserved = 4,
  ScatterGatherListPacketInfo = 5,
  Ieee8021QInfo = 6,
  OriginalPacketInfo = 7,
  PacketCancelId = 8,
  OriginalNetBufferList = 9,
  CachedNetBufferList = 10,
  ShortPacketPaddingInfo = 11,
  MaxPerPacketInfo = 12,
} NDIS_PER_PACKET_INFO, *PNDIS_PER_PACKET_INFO;

typedef struct _NDIS_PER_PROC_PERFORMANCE_COUNTERS
{
  /* 0x0000 */ unsigned __int64 DpcCount;
  /* 0x0008 */ unsigned __int64 IsrCount;
  /* 0x0010 */ unsigned __int64 ReceiveIndicationCalls;
  /* 0x0018 */ unsigned __int64 ReturnNblsCalls;
  /* 0x0020 */ unsigned __int64 ReceivedNbls;
  /* 0x0028 */ unsigned __int64 ReturnedNbls;
  /* 0x0030 */ unsigned __int64 SendCalls;
  /* 0x0038 */ unsigned __int64 SendCompleteCalls;
  /* 0x0040 */ unsigned __int64 SentNbs;
  /* 0x0048 */ unsigned __int64 SendCompleteNbs;
  /* 0x0050 */ unsigned __int64 HalBuildSGListCalls;
  /* 0x0058 */ unsigned __int64 IndirectionTableChangeCalls;
  /* 0x0060 */ unsigned __int64 NdisQueueDpcCallsNotCurrentCpu;
  /* 0x0068 */ unsigned __int64 DpcTotalCycles;
  /* 0x0070 */ unsigned __int64 IsrCycles;
  /* 0x0078 */ unsigned __int64 NdisReceiveIndicationCycles;
  /* 0x0080 */ unsigned __int64 StackReceiveIndicationCycles;
  /* 0x0088 */ unsigned __int64 NdisReturnNblCycles;
  /* 0x0090 */ unsigned __int64 MiniportReturnNblCycles;
  /* 0x0098 */ unsigned __int64 NdisSendCycles;
  /* 0x00a0 */ unsigned __int64 MiniportSendCycles;
  /* 0x00a8 */ unsigned __int64 NdisSendCompleteCycles;
  /* 0x00b0 */ unsigned __int64 StackSendCompleteCycles;
  /* 0x00b8 */ unsigned __int64 HalBuildSGListCycles;
  /* 0x00c0 */ unsigned __int64 IndirectionTableChangeCycles;
  /* 0x00c8 */ unsigned __int64 SendCallsAtPassive;
  /* 0x00d0 */ unsigned __int64 SentNbsAtPassive;
  /* 0x00d8 */ unsigned __int64 ReturnNblsCallsAtPassive;
  /* 0x00e0 */ unsigned __int64 ReturnedNblsAtPassive;
  /* 0x00e8 */ unsigned __int64 LowResourceReceiveIndicationCalls;
  /* 0x00f0 */ unsigned __int64 LowResourceReceivedNbls;
  /* 0x00f8 */ unsigned __int64 TcpOffloadReceiveIndicationCalls;
  /* 0x0100 */ unsigned __int64 TcpOffloadSendCalls;
  /* 0x0108 */ unsigned __int64 TcpOffloadReceiveData;
  /* 0x0110 */ unsigned __int64 TcpOffloadSendData;
  /* 0x0118 */ unsigned __int64 IsrToDpcCycles;
  /* 0x0120 */ unsigned __int64 DpcCallsDeferred;
  /* 0x0128 */ unsigned __int64 PacketsCoalesced;
} NDIS_PER_PROC_PERFORMANCE_COUNTERS, *PNDIS_PER_PROC_PERFORMANCE_COUNTERS; /* size: 0x0130 */

typedef struct _NDIS_PF_BLOCK
{
  /* 0x0000 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0008 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0010 */ struct _NDIS_NIC_SWITCH_BLOCK* NicSwitch;
  /* 0x0018 */ long Reference;
  /* 0x001c */ unsigned long NumAttachedVPorts;
  /* 0x0020 */ struct _LIST_ENTRY AttachedVPortList;
} NDIS_PF_BLOCK, *PNDIS_PF_BLOCK; /* size: 0x0030 */

typedef struct _NDIS_PHYSICAL_ADDRESS_UNIT
{
  /* 0x0000 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0008 */ unsigned int Length;
  /* 0x000c */ long __PADDING__[1];
} NDIS_PHYSICAL_ADDRESS_UNIT, *PNDIS_PHYSICAL_ADDRESS_UNIT; /* size: 0x0010 */

typedef enum _NDIS_PHYSICAL_MEDIUM
{
  NdisPhysicalMediumUnspecified = 0,
  NdisPhysicalMediumWirelessLan = 1,
  NdisPhysicalMediumCableModem = 2,
  NdisPhysicalMediumPhoneLine = 3,
  NdisPhysicalMediumPowerLine = 4,
  NdisPhysicalMediumDSL = 5,
  NdisPhysicalMediumFibreChannel = 6,
  NdisPhysicalMedium1394 = 7,
  NdisPhysicalMediumWirelessWan = 8,
  NdisPhysicalMediumNative802_11 = 9,
  NdisPhysicalMediumBluetooth = 10,
  NdisPhysicalMediumInfiniband = 11,
  NdisPhysicalMediumWiMax = 12,
  NdisPhysicalMediumUWB = 13,
  NdisPhysicalMedium802_3 = 14,
  NdisPhysicalMedium802_5 = 15,
  NdisPhysicalMediumIrda = 16,
  NdisPhysicalMediumWiredWAN = 17,
  NdisPhysicalMediumWiredCoWan = 18,
  NdisPhysicalMediumOther = 19,
  NdisPhysicalMediumMax = 20,
} NDIS_PHYSICAL_MEDIUM, *PNDIS_PHYSICAL_MEDIUM;

typedef struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS
{
  /* 0x0000 */ unsigned long DevicePowerState;
  /* 0x0008 */ unsigned __int64 TimeSuspended100ns;
  /* 0x0010 */ unsigned __int64 Uptime100ns;
  /* 0x0018 */ unsigned long LowPowerTransitions;
  /* 0x001c */ long __PADDING__[1];
} NDIS_PHYSICAL_PERFORMANCE_COUNTERS, *PNDIS_PHYSICAL_PERFORMANCE_COUNTERS; /* size: 0x0020 */

typedef struct _NDIS_PKT_POOL
{
  /* 0x0000 */ unsigned long Tag;
  /* 0x0004 */ unsigned short PacketLength;
  /* 0x0006 */ unsigned short PktsPerBlock;
  /* 0x0008 */ unsigned short MaxBlocks;
  /* 0x000a */ unsigned short StackSize;
  /* 0x000c */ long BlocksAllocated;
  /* 0x0010 */ unsigned long ProtocolId;
  /* 0x0014 */ unsigned long BlockSize;
  /* 0x0018 */ void* Allocator;
  /* 0x0020 */ unsigned __int64 Lock;
  /* 0x0028 */ struct _LIST_ENTRY FreeBlocks;
  /* 0x0038 */ struct _LIST_ENTRY UsedBlocks;
  /* 0x0048 */ struct _LIST_ENTRY AgingBlocks;
  /* 0x0058 */ struct _LIST_ENTRY GlobalPacketPoolList;
  /* 0x0068 */ union _LARGE_INTEGER NextScavengeTick;
} NDIS_PKT_POOL, *PNDIS_PKT_POOL; /* size: 0x0070 */

typedef struct _NDIS_PKT_POOL_HDR
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0020 */ union _SLIST_HEADER FreeList;
  /* 0x0030 */ enum _POOL_BLOCK_TYPE State;
  /* 0x0034 */ long __PADDING__[3];
} NDIS_PKT_POOL_HDR, *PNDIS_PKT_POOL_HDR; /* size: 0x0040 */

typedef struct _NDIS_PM_ADMIN_CONFIG
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long WakeOnPattern : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long WakeOnMagicPacket : 2; /* bit position: 2 */
      /* 0x0000 */ unsigned long DeviceSleepOnDisconnect : 2; /* bit position: 4 */
      /* 0x0000 */ unsigned long PMARPOffload : 2; /* bit position: 6 */
      /* 0x0000 */ unsigned long PMNSOffload : 2; /* bit position: 8 */
      /* 0x0000 */ unsigned long PMWiFiRekeyOffload : 2; /* bit position: 10 */
      /* 0x0000 */ unsigned long SelectiveSuspend : 2; /* bit position: 12 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_PM_ADMIN_CONFIG, *PNDIS_PM_ADMIN_CONFIG; /* size: 0x0004 */

typedef struct _NDIS_PM_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SupportedWoLPacketPatterns;
  /* 0x000c */ unsigned long NumTotalWoLPatterns;
  /* 0x0010 */ unsigned long MaxWoLPatternSize;
  /* 0x0014 */ unsigned long MaxWoLPatternOffset;
  /* 0x0018 */ unsigned long MaxWoLPacketSaveBuffer;
  /* 0x001c */ unsigned long SupportedProtocolOffloads;
  /* 0x0020 */ unsigned long NumArpOffloadIPv4Addresses;
  /* 0x0024 */ unsigned long NumNSOffloadIPv6Addresses;
  /* 0x0028 */ enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
  /* 0x002c */ enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
  /* 0x0030 */ enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
  /* 0x0034 */ unsigned long SupportedWakeUpEvents;
  /* 0x0038 */ unsigned long MediaSpecificWakeUpEvents;
} NDIS_PM_CAPABILITIES, *PNDIS_PM_CAPABILITIES; /* size: 0x003c */

typedef struct _NDIS_PM_COUNTED_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ wchar_t String[65];
} NDIS_PM_COUNTED_STRING, *PNDIS_PM_COUNTED_STRING; /* size: 0x0084 */

typedef struct _NDIS_PM_PACKET_PATTERN
{
  /* 0x0000 */ unsigned long Priority;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned long MaskSize;
  /* 0x000c */ unsigned long PatternOffset;
  /* 0x0010 */ unsigned long PatternSize;
  /* 0x0014 */ unsigned long PatternFlags;
} NDIS_PM_PACKET_PATTERN, *PNDIS_PM_PACKET_PATTERN; /* size: 0x0018 */

typedef struct _NDIS_PM_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long EnabledWoLPacketPatterns;
  /* 0x0008 */ unsigned long EnabledProtocolOffloads;
  /* 0x000c */ unsigned long WakeUpFlags;
  /* 0x0010 */ unsigned long MediaSpecificWakeUpEvents;
} NDIS_PM_PARAMETERS, *PNDIS_PM_PARAMETERS; /* size: 0x0014 */

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Priority;
  /* 0x000c */ enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE ProtocolOffloadType;
  /* 0x0010 */ struct _NDIS_PM_COUNTED_STRING FriendlyName;
  /* 0x0094 */ unsigned long ProtocolOffloadId;
  /* 0x0098 */ unsigned long NextProtocolOffloadOffset;
  /* 0x00a0 */ union _PROTOCOL_OFFLOAD_PARAMETERS ProtocolOffloadParameters;
} NDIS_PM_PROTOCOL_OFFLOAD, *PNDIS_PM_PROTOCOL_OFFLOAD; /* size: 0x00f0 */

typedef enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE
{
  NdisPMProtocolOffloadIdUnspecified = 0,
  NdisPMProtocolOffloadIdIPv4ARP = 1,
  NdisPMProtocolOffloadIdIPv6NS = 2,
  NdisPMProtocolOffload80211RSNRekey = 3,
  NdisPMProtocolOffloadIdMaximum = 4,
} NDIS_PM_PROTOCOL_OFFLOAD_TYPE, *PNDIS_PM_PROTOCOL_OFFLOAD_TYPE;

typedef enum _NDIS_PM_WAKE_REASON_TYPE
{
  NdisWakeReasonUnspecified = 0,
  NdisWakeReasonPacket = 1,
  NdisWakeReasonMediaDisconnect = 2,
  NdisWakeReasonMediaConnect = 3,
  NdisWakeReasonWlanNLODiscovery = 4096,
  NdisWakeReasonWlanAPAssociationLost = 4097,
  NdisWakeReasonWlanGTKHandshakeError = 4098,
  NdisWakeReasonWlan4WayHandshakeRequest = 4099,
  NdisWakeReasonWwanRegisterState = 8192,
  NdisWakeReasonWwanSMSReceive = 8193,
  NdisWakeReasonWwanUSSDReceive = 8194,
} NDIS_PM_WAKE_REASON_TYPE, *PNDIS_PM_WAKE_REASON_TYPE;

typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES
{
  /* 0x0000 */ enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
  /* 0x0004 */ enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
  /* 0x0008 */ enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
} NDIS_PM_WAKE_UP_CAPABILITIES, *PNDIS_PM_WAKE_UP_CAPABILITIES; /* size: 0x000c */

typedef enum _NDIS_PM_WOL_PACKET
{
  NdisPMWoLPacketUnspecified = 0,
  NdisPMWoLPacketBitmapPattern = 1,
  NdisPMWoLPacketMagicPacket = 2,
  NdisPMWoLPacketIPv4TcpSyn = 3,
  NdisPMWoLPacketIPv6TcpSyn = 4,
  NdisPMWoLPacketEapolRequestIdMessage = 5,
  NdisPMWoLPacketMaximum = 6,
} NDIS_PM_WOL_PACKET, *PNDIS_PM_WOL_PACKET;

typedef struct _NDIS_PM_WOL_PATTERN
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Priority;
  /* 0x000c */ enum _NDIS_PM_WOL_PACKET WoLPacketType;
  /* 0x0010 */ struct _NDIS_PM_COUNTED_STRING FriendlyName;
  /* 0x0094 */ unsigned long PatternId;
  /* 0x0098 */ unsigned long NextWoLPatternOffset;
  /* 0x009c */ union _WOL_PATTERN WoLPattern;
} NDIS_PM_WOL_PATTERN, *PNDIS_PM_WOL_PATTERN; /* size: 0x00c4 */

typedef struct _NDIS_PNP_CAPABILITIES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;
} NDIS_PNP_CAPABILITIES, *PNDIS_PNP_CAPABILITIES; /* size: 0x0010 */

typedef enum _NDIS_PNP_DEVICE_STATE
{
  NdisPnPDeviceAdded = 0,
  NdisPnPDeviceStarted = 1,
  NdisPnPDeviceQueryStopped = 2,
  NdisPnPDeviceStopped = 3,
  NdisPnPDeviceQueryRemoved = 4,
  NdisPnPDeviceRemoved = 5,
  NdisPnPDeviceSurpriseRemoved = 6,
} NDIS_PNP_DEVICE_STATE, *PNDIS_PNP_DEVICE_STATE;

typedef struct _NDIS_POOL_HEADER
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ unsigned __int64 ListLock;
  /* 0x0010 */ struct _LIST_ENTRY AllocatedList;
} NDIS_POOL_HEADER, *PNDIS_POOL_HEADER; /* size: 0x0020 */

typedef struct _NDIS_PORT
{
  /* 0x0000 */ struct _NDIS_PORT* Next;
  /* 0x0008 */ void* NdisReserved;
  /* 0x0010 */ void* MiniportReserved;
  /* 0x0018 */ void* ProtocolReserved;
  /* 0x0020 */ struct _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
} NDIS_PORT, *PNDIS_PORT; /* size: 0x0060 */

typedef struct _NDIS_PORT_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long NumberOfPorts;
  /* 0x0008 */ unsigned long OffsetFirstPort;
  /* 0x000c */ unsigned long ElementSize;
  /* 0x0010 */ struct _NDIS_PORT_CHARACTERISTICS Ports[1];
} NDIS_PORT_ARRAY, *PNDIS_PORT_ARRAY; /* size: 0x0050 */

typedef struct _NDIS_PORT_AUTHENTICATION_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_PORT_CONTROL_STATE SendControlState;
  /* 0x0008 */ enum _NDIS_PORT_CONTROL_STATE RcvControlState;
  /* 0x000c */ enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
  /* 0x0010 */ enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
} NDIS_PORT_AUTHENTICATION_PARAMETERS, *PNDIS_PORT_AUTHENTICATION_PARAMETERS; /* size: 0x0014 */

typedef enum _NDIS_PORT_AUTHORIZATION_STATE
{
  NdisPortAuthorizationUnknown = 0,
  NdisPortAuthorized = 1,
  NdisPortUnauthorized = 2,
  NdisPortReauthorizing = 3,
} NDIS_PORT_AUTHORIZATION_STATE, *PNDIS_PORT_AUTHORIZATION_STATE;

typedef struct _NDIS_PORT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0010 */ enum _NDIS_PORT_PNP_STATE PortPnPState;
  /* 0x0014 */ enum _NDIS_PORT_PNP_STATE PrevPortPnPState;
  /* 0x0018 */ struct _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
} NDIS_PORT_BLOCK, *PNDIS_PORT_BLOCK; /* size: 0x0058 */

typedef struct _NDIS_PORT_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PortNumber;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ enum _NDIS_PORT_TYPE Type;
  /* 0x0010 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0018 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0020 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0028 */ enum _NET_IF_DIRECTION_TYPE Direction;
  /* 0x002c */ enum _NDIS_PORT_CONTROL_STATE SendControlState;
  /* 0x0030 */ enum _NDIS_PORT_CONTROL_STATE RcvControlState;
  /* 0x0034 */ enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
  /* 0x0038 */ enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
  /* 0x003c */ long __PADDING__[1];
} NDIS_PORT_CHARACTERISTICS, *PNDIS_PORT_CHARACTERISTICS; /* size: 0x0040 */

typedef enum _NDIS_PORT_CONTROL_STATE
{
  NdisPortControlStateUnknown = 0,
  NdisPortControlStateControlled = 1,
  NdisPortControlStateUncontrolled = 2,
} NDIS_PORT_CONTROL_STATE, *PNDIS_PORT_CONTROL_STATE;

typedef enum _NDIS_PORT_PNP_STATE
{
  NdisPortPnPStateAllocating = 1,
  NdisPortPnPStateAllocated = 2,
  NdisPortPnPStateActivating = 3,
  NdisPortPnPStateActivated = 4,
  NdisPortPnPStateDeactivating = 5,
  NdisPortPnPStateDeactivated = 6,
  NdisPortPnPStateDeallocating = 7,
  NdisPortPnPStateDeallocated = 8,
} NDIS_PORT_PNP_STATE, *PNDIS_PORT_PNP_STATE;

typedef struct _NDIS_PORT_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0008 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0010 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0018 */ enum _NET_IF_DIRECTION_TYPE Direction;
  /* 0x001c */ enum _NDIS_PORT_CONTROL_STATE SendControlState;
  /* 0x0020 */ enum _NDIS_PORT_CONTROL_STATE RcvControlState;
  /* 0x0024 */ enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
  /* 0x0028 */ enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
  /* 0x002c */ unsigned long Flags;
} NDIS_PORT_STATE, *PNDIS_PORT_STATE; /* size: 0x0030 */

typedef enum _NDIS_PORT_TYPE
{
  NdisPortTypeUndefined = 0,
  NdisPortTypeBridge = 1,
  NdisPortTypeRasConnection = 2,
  NdisPortType8021xSupplicant = 3,
  NdisPortTypeNdisImPlatform = 4,
  NdisPortTypeMax = 5,
} NDIS_PORT_TYPE, *PNDIS_PORT_TYPE;

typedef enum _NDIS_POWER_PROFILE
{
  NdisPowerProfileBattery = 0,
  NdisPowerProfileAcOnLine = 1,
} NDIS_POWER_PROFILE, *PNDIS_POWER_PROFILE;

typedef struct _NDIS_PROCESSOR_INFO
{
  /* 0x0000 */ unsigned long CpuNumber;
  /* 0x0004 */ unsigned long PhysicalPackageId;
  /* 0x0008 */ unsigned long CoreId;
  /* 0x000c */ unsigned long HyperThreadID;
} NDIS_PROCESSOR_INFO, *PNDIS_PROCESSOR_INFO; /* size: 0x0010 */

typedef enum _NDIS_PROCESSOR_TYPE
{
  NdisProcessorX86 = 0,
  NdisProcessorMips = 1,
  NdisProcessorAlpha = 2,
  NdisProcessorPpc = 3,
  NdisProcessorAmd64 = 4,
  NdisProcessorIA64 = 5,
  NdisProcessorArm = 6,
} NDIS_PROCESSOR_TYPE, *PNDIS_PROCESSOR_TYPE;

typedef enum _NDIS_PROCESSOR_VENDOR
{
  NdisProcessorVendorUnknown = 0,
  NdisProcessorVendorGenuinIntel = 1,
  NdisProcessorVendorGenuineIntel = 1,
  NdisProcessorVendorAuthenticAMD = 2,
} NDIS_PROCESSOR_VENDOR, *PNDIS_PROCESSOR_VENDOR;

typedef struct _NDIS_PROTOCOL_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* ProtocolDriverContext;
  /* 0x0010 */ struct _NDIS_PROTOCOL_BLOCK* NextProtocol;
  /* 0x0018 */ struct _NDIS_OPEN_BLOCK* OpenQueue;
  /* 0x0020 */ struct _REFERENCE_EX Ref;
  /* 0x0038 */ unsigned char MajorNdisVersion;
  /* 0x0039 */ unsigned char MinorNdisVersion;
  /* 0x003a */ unsigned char MajorDriverVersion;
  /* 0x003b */ unsigned char MinorDriverVersion;
  /* 0x003c */ unsigned int Reserved;
  /* 0x0040 */ unsigned int Flags;
  /* 0x0048 */ struct _UNICODE_STRING Name;
  /* 0x0058 */ unsigned char IsIPv4;
  /* 0x0059 */ unsigned char IsIPv6;
  /* 0x005a */ unsigned char IsNdisTest6;
  /* 0x0060 */ void* BindAdapterHandlerEx /* function */;
  /* 0x0068 */ void* UnbindAdapterHandlerEx /* function */;
  /* 0x0070 */ void* OpenAdapterCompleteHandlerEx /* function */;
  /* 0x0078 */ void* CloseAdapterCompleteHandlerEx /* function */;
  union
  {
    /* 0x0080 */ void* PnPEventHandler /* function */;
    /* 0x0080 */ void* NetPnPEventHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0088 */ void* UnloadHandler /* function */;
  /* 0x0090 */ void* UninstallHandler /* function */;
  /* 0x0098 */ void* RequestCompleteHandler /* function */;
  union
  {
    /* 0x00a0 */ void* StatusHandlerEx /* function */;
    /* 0x00a0 */ void* StatusHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x00a8 */ void* StatusCompleteHandler /* function */;
  /* 0x00b0 */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x00b8 */ void* SendNetBufferListsCompleteHandler /* function */;
  union
  {
    /* 0x00c0 */ void* CoStatusHandlerEx /* function */;
    /* 0x00c0 */ void* CoStatusHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x00c8 */ void* CoAfRegisterNotifyHandler /* function */;
  /* 0x00d0 */ void* CoReceiveNetBufferListsHandler /* function */;
  /* 0x00d8 */ void* CoSendNetBufferListsCompleteHandler /* function */;
  /* 0x00e0 */ void* OpenAdapterCompleteHandler /* function */;
  /* 0x00e8 */ void* CloseAdapterCompleteHandler /* function */;
  union
  {
    /* 0x00f0 */ void* SendCompleteHandler /* function */;
    /* 0x00f0 */ void* WanSendCompleteHandler /* function */;
  }; /* size: 0x0008 */
  union
  {
    /* 0x00f8 */ void* TransferDataCompleteHandler /* function */;
    /* 0x00f8 */ void* WanTransferDataCompleteHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0100 */ void* ResetCompleteHandler /* function */;
  union
  {
    /* 0x0108 */ void* ReceiveHandler /* function */;
    /* 0x0108 */ void* WanReceiveHandler /* function */;
  }; /* size: 0x0008 */
  /* 0x0110 */ void* ReceiveCompleteHandler /* function */;
  /* 0x0118 */ void* ReceivePacketHandler /* function */;
  /* 0x0120 */ void* BindAdapterHandler /* function */;
  /* 0x0128 */ void* UnbindAdapterHandler /* function */;
  /* 0x0130 */ void* CoSendCompleteHandler /* function */;
  /* 0x0138 */ void* CoReceivePacketHandler /* function */;
  /* 0x0140 */ void* OidRequestCompleteHandler /* function */;
  /* 0x0148 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0168 */ struct _KMUTANT Mutex;
  /* 0x01a0 */ void* MutexOwnerThread;
  /* 0x01a8 */ unsigned long MutexOwnerCount;
  /* 0x01ac */ unsigned long MutexOwner;
  /* 0x01b0 */ struct _UNICODE_STRING* BindDeviceName;
  /* 0x01b8 */ struct _UNICODE_STRING* RootDeviceName;
  /* 0x01c0 */ struct _NDIS_M_DRIVER_BLOCK* AssociatedMiniDriver;
  /* 0x01c8 */ struct _NDIS_MINIPORT_BLOCK* BindingAdapter;
  /* 0x01d0 */ struct _KEVENT* DeregEvent;
  /* 0x01d8 */ struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS ClientChars;
  /* 0x0278 */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
  /* 0x0308 */ void* InitiateOffloadCompleteHandler /* function */;
  /* 0x0310 */ void* TerminateOffloadCompleteHandler /* function */;
  /* 0x0318 */ void* UpdateOffloadCompleteHandler /* function */;
  /* 0x0320 */ void* InvalidateOffloadCompleteHandler /* function */;
  /* 0x0328 */ void* QueryOffloadCompleteHandler /* function */;
  /* 0x0330 */ void* IndicateOffloadEventHandler /* function */;
  /* 0x0338 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0340 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x0348 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0350 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x0358 */ void* TcpOffloadEventHandler /* function */;
  /* 0x0360 */ void* TcpOffloadReceiveIndicateHandler /* function */;
  /* 0x0368 */ void* DirectOidRequestCompleteHandler /* function */;
  /* 0x0370 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0378 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x0380 */ void* AllocateSharedMemoryContext;
  /* 0x0388 */ struct _UNICODE_STRING ImageName;
} NDIS_PROTOCOL_BLOCK, *PNDIS_PROTOCOL_BLOCK; /* size: 0x0398 */

typedef struct _NDIS_PROTOCOL_CO_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* CoStatusHandlerEx /* function */;
  /* 0x0010 */ void* CoAfRegisterNotifyHandler /* function */;
  /* 0x0018 */ void* CoReceiveNetBufferListsHandler /* function */;
  /* 0x0020 */ void* CoSendNetBufferListsCompleteHandler /* function */;
} NDIS_PROTOCOL_CO_CHARACTERISTICS, *PNDIS_PROTOCOL_CO_CHARACTERISTICS; /* size: 0x0028 */

typedef struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char MajorNdisVersion;
  /* 0x0005 */ unsigned char MinorNdisVersion;
  /* 0x0006 */ unsigned char MajorDriverVersion;
  /* 0x0007 */ unsigned char MinorDriverVersion;
  /* 0x0008 */ unsigned long Flags;
  /* 0x0010 */ struct _UNICODE_STRING Name;
  /* 0x0020 */ void* SetOptionsHandler /* function */;
  /* 0x0028 */ void* BindAdapterHandlerEx /* function */;
  /* 0x0030 */ void* UnbindAdapterHandlerEx /* function */;
  /* 0x0038 */ void* OpenAdapterCompleteHandlerEx /* function */;
  /* 0x0040 */ void* CloseAdapterCompleteHandlerEx /* function */;
  /* 0x0048 */ void* NetPnPEventHandler /* function */;
  /* 0x0050 */ void* UninstallHandler /* function */;
  /* 0x0058 */ void* OidRequestCompleteHandler /* function */;
  /* 0x0060 */ void* StatusHandlerEx /* function */;
  /* 0x0068 */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x0070 */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0078 */ void* DirectOidRequestCompleteHandler /* function */;
} NDIS_PROTOCOL_DRIVER_CHARACTERISTICS, *PNDIS_PROTOCOL_DRIVER_CHARACTERISTICS; /* size: 0x0080 */

typedef struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST* NextBlock;
  /* 0x0010 */ struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST* DependentBlockList;
  /* 0x0018 */ int Status;
  /* 0x0020 */ void* NdisReserved[3];
  /* 0x0038 */ struct _NDIS_OFFLOAD_HANDLE* OffloadHandle;
  /* 0x0040 */ void* ProtocolReserved[2];
  /* 0x0050 */ void* MiniportReserved[2];
  /* 0x0060 */ void* ImReserved[2];
  /* 0x0070 */ void* Scratch[2];
  /* 0x0080 */ void* SourceHandle;
  /* 0x0088 */ unsigned long PortNumber;
  /* 0x0090 */ struct _NET_BUFFER_LIST* NetBufferListChain;
} NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST, *PNDIS_PROTOCOL_OFFLOAD_BLOCK_LIST; /* size: 0x0098 */

typedef struct _NDIS_PROTOCOL_PAUSE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long PauseReason;
} NDIS_PROTOCOL_PAUSE_PARAMETERS, *PNDIS_PROTOCOL_PAUSE_PARAMETERS; /* size: 0x000c */

typedef struct _NDIS_PROTOCOL_RESTART_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ unsigned char* FilterModuleNameBuffer;
  /* 0x0010 */ unsigned long FilterModuleNameBufferLength;
  /* 0x0018 */ struct _NDIS_RESTART_ATTRIBUTES* RestartAttributes;
  /* 0x0020 */ unsigned long BoundIfIndex;
  /* 0x0028 */ union _NET_LUID_LH BoundIfNetluid;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ long __PADDING__[1];
} NDIS_PROTOCOL_RESTART_PARAMETERS, *PNDIS_PROTOCOL_RESTART_PARAMETERS; /* size: 0x0038 */

typedef struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* InitiateOffloadHandler /* function */;
  /* 0x0010 */ void* TerminateOffloadHandler /* function */;
  /* 0x0018 */ void* UpdateOffloadHandler /* function */;
  /* 0x0020 */ void* InvalidateOffloadHandler /* function */;
  /* 0x0028 */ void* QueryOffloadHandler /* function */;
} NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS, *PNDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS; /* size: 0x0030 */

typedef struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum NDIS_CHIMNEY_OFFLOAD_TYPE OffloadType;
  /* 0x0010 */ void* TcpOffloadSendHandler /* function */;
  /* 0x0018 */ void* TcpOffloadReceiveHandler /* function */;
  /* 0x0020 */ void* TcpOffloadDisconnectHandler /* function */;
  /* 0x0028 */ void* TcpOffloadForwardHandler /* function */;
  /* 0x0030 */ void* TcpOffloadReceiveReturnHandler /* function */;
} NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS, *PNDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS; /* size: 0x0038 */

typedef enum _NDIS_PT_REFTAG
{
  PTREF_BIND_ITER = 0,
  PTREF_CHECKADAPTER = 1,
  PTREF_READREGISTRY = 2,
  PTREF_BINDNOTIFY = 3,
  PTREF_UNBINDNOTIFY = 4,
  PTREF_RECONFIG = 5,
  PTREF_UNLOADNOTIFY = 6,
  PTREF_UNBINDING = 7,
  PTREF_BINDING = 8,
  PTREF_BINDINGX = 9,
  PTREF_SQM = 10,
  PTREF_OPEN = 11,
  PTREF_REENUMERATE = 12,
  PTREF_CHECKPROT = 13,
  PTREF_QUNBIND = 14,
  PTREF_NUMBER_OF_TAGS = 15,
} NDIS_PT_REFTAG, *PNDIS_PT_REFTAG;

typedef struct _NDIS_QOS_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MaxNumTrafficClasses;
  /* 0x000c */ unsigned long MaxNumEtsCapableTrafficClasses;
  /* 0x0010 */ unsigned long MaxNumPfcEnabledTrafficClasses;
} NDIS_QOS_CAPABILITIES, *PNDIS_QOS_CAPABILITIES; /* size: 0x0014 */

typedef struct _NDIS_QOS_CLASSIFICATION_ELEMENT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned short ConditionSelector;
  /* 0x000a */ unsigned short ConditionField;
  /* 0x000c */ unsigned short ActionSelector;
  /* 0x000e */ unsigned short ActionField;
} NDIS_QOS_CLASSIFICATION_ELEMENT, *PNDIS_QOS_CLASSIFICATION_ELEMENT; /* size: 0x0010 */

typedef struct _NDIS_QOS_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long NumTrafficClasses;
  /* 0x000c */ unsigned char PriorityAssignmentTable[8];
  /* 0x0014 */ unsigned char TcBandwidthAssignmentTable[8];
  /* 0x001c */ unsigned char TsaAssignmentTable[8];
  /* 0x0024 */ unsigned long PfcEnable;
  /* 0x0028 */ unsigned long NumClassificationElements;
  /* 0x002c */ unsigned long ClassificationElementSize;
  /* 0x0030 */ unsigned long FirstClassificationElementOffset;
} NDIS_QOS_PARAMETERS, *PNDIS_QOS_PARAMETERS; /* size: 0x0034 */

typedef struct _NDIS_RECEIVE_FILTER_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0010 */ struct _LIST_ENTRY QueueLink;
  /* 0x0020 */ struct _LIST_ENTRY VPortLink;
  /* 0x0030 */ unsigned long FilterId;
  /* 0x0038 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0040 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0048 */ struct _NDIS_RECEIVE_QUEUE_BLOCK* ReceiveQueue;
  /* 0x0050 */ long Reference;
  /* 0x0054 */ struct _NDIS_CONNECTION_INFO ConnectionInfo;
  /* 0x0084 */ struct _NDIS_RECEIVE_FILTER_PARAMETERS FilterParameters;
  /* 0x00b0 */ struct _NDIS_VPORT_BLOCK* VPortBlock;
} NDIS_RECEIVE_FILTER_BLOCK, *PNDIS_RECEIVE_FILTER_BLOCK; /* size: 0x00b8 */

typedef struct _NDIS_RECEIVE_FILTER_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EnabledFilterTypes;
  /* 0x000c */ unsigned long EnabledQueueTypes;
  /* 0x0010 */ unsigned long NumQueues;
  /* 0x0014 */ unsigned long SupportedQueueProperties;
  /* 0x0018 */ unsigned long SupportedFilterTests;
  /* 0x001c */ unsigned long SupportedHeaders;
  /* 0x0020 */ unsigned long SupportedMacHeaderFields;
  /* 0x0024 */ unsigned long MaxMacHeaderFilters;
  /* 0x0028 */ unsigned long MaxQueueGroups;
  /* 0x002c */ unsigned long MaxQueuesPerQueueGroup;
  /* 0x0030 */ unsigned long MinLookaheadSplitSize;
  /* 0x0034 */ unsigned long MaxLookaheadSplitSize;
  /* 0x0038 */ unsigned long SupportedARPHeaderFields;
  /* 0x003c */ unsigned long SupportedIPv4HeaderFields;
  /* 0x0040 */ unsigned long SupportedIPv6HeaderFields;
  /* 0x0044 */ unsigned long SupportedUdpHeaderFields;
  /* 0x0048 */ unsigned long MaxFieldTestsPerPacketCoalescingFilter;
  /* 0x004c */ unsigned long MaxPacketCoalescingFilters;
  /* 0x0050 */ unsigned long NdisReserved;
} NDIS_RECEIVE_FILTER_CAPABILITIES, *PNDIS_RECEIVE_FILTER_CAPABILITIES; /* size: 0x0054 */

typedef struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_FRAME_HEADER FrameHeader;
  /* 0x000c */ enum _NDIS_RECEIVE_FILTER_TEST ReceiveFilterTest;
  /* 0x0010 */ union _HEADER_FIELD HeaderField;
  /* 0x0018 */ union _FIELD_VALUE FieldValue;
  /* 0x0028 */ union _RESULT_VALUE ResultValue;
} NDIS_RECEIVE_FILTER_FIELD_PARAMETERS, *PNDIS_RECEIVE_FILTER_FIELD_PARAMETERS; /* size: 0x0038 */

typedef struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EnabledFilterTypes;
  /* 0x000c */ unsigned long EnabledQueueTypes;
} NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS, *PNDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS; /* size: 0x0010 */

typedef struct _NDIS_RECEIVE_FILTER_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_RECEIVE_FILTER_TYPE FilterType;
  /* 0x000c */ unsigned long QueueId;
  /* 0x0010 */ unsigned long FilterId;
  /* 0x0014 */ unsigned long FieldParametersArrayOffset;
  /* 0x0018 */ unsigned long FieldParametersArrayNumElements;
  /* 0x001c */ unsigned long FieldParametersArrayElementSize;
  /* 0x0020 */ unsigned long RequestedFilterIdBitCount;
  /* 0x0024 */ unsigned long MaxCoalescingDelay;
  /* 0x0028 */ unsigned long VPortId;
} NDIS_RECEIVE_FILTER_PARAMETERS, *PNDIS_RECEIVE_FILTER_PARAMETERS; /* size: 0x002c */

typedef enum _NDIS_RECEIVE_FILTER_TEST
{
  NdisReceiveFilterTestUndefined = 0,
  NdisReceiveFilterTestEqual = 1,
  NdisReceiveFilterTestMaskEqual = 2,
  NdisReceiveFilterTestNotEqual = 3,
  NdisReceiveFilterTestMaximum = 4,
} NDIS_RECEIVE_FILTER_TEST, *PNDIS_RECEIVE_FILTER_TEST;

typedef enum _NDIS_RECEIVE_FILTER_TYPE
{
  NdisReceiveFilterTypeUndefined = 0,
  NdisReceiveFilterTypeVMQueue = 1,
  NdisReceiveFilterTypePacketCoalescing = 2,
  NdisReceiveFilterTypeMaximum = 3,
} NDIS_RECEIVE_FILTER_TYPE, *PNDIS_RECEIVE_FILTER_TYPE;

typedef struct _NDIS_RECEIVE_HASH_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long HashInformation;
  /* 0x000c */ unsigned short HashSecretKeySize;
  /* 0x0010 */ unsigned long HashSecretKeyOffset;
} NDIS_RECEIVE_HASH_PARAMETERS, *PNDIS_RECEIVE_HASH_PARAMETERS; /* size: 0x0014 */

typedef struct _NDIS_RECEIVE_QUEUE_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0010 */ struct _LIST_ENTRY OpenLink;
  /* 0x0020 */ struct _LIST_ENTRY FilterList;
  /* 0x0030 */ unsigned long QueueId;
  /* 0x0034 */ enum _NDIS_RECEIVE_QUEUE_PNP_STATE QueuePnPState;
  /* 0x0038 */ enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
  /* 0x0040 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0048 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0050 */ long Reference;
  /* 0x0054 */ unsigned long NumFilters;
  /* 0x0058 */ struct _LIST_ENTRY SharedMemoryList;
  /* 0x0068 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0070 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x0078 */ unsigned char MacAddress[6];
  /* 0x0080 */ struct _NDIS_RECEIVE_QUEUE_PARAMETERS QueueParameters;
} NDIS_RECEIVE_QUEUE_BLOCK, *PNDIS_RECEIVE_QUEUE_BLOCK; /* size: 0x04c8 */

typedef enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE
{
  NdisReceiveQueueOperationalStateUndefined = 0,
  NdisReceiveQueueOperationalStateRunning = 1,
  NdisReceiveQueueOperationalStatePaused = 2,
  NdisReceiveQueueOperationalStateDmaStopped = 3,
  NdisReceiveQueueOperationalStateMaximum = 4,
} NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE, *PNDIS_RECEIVE_QUEUE_OPERATIONAL_STATE;

typedef struct _NDIS_RECEIVE_QUEUE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_RECEIVE_QUEUE_TYPE QueueType;
  /* 0x000c */ unsigned long QueueId;
  /* 0x0010 */ unsigned long QueueGroupId;
  /* 0x0018 */ struct _GROUP_AFFINITY ProcessorAffinity;
  /* 0x0028 */ unsigned long NumSuggestedReceiveBuffers;
  /* 0x002c */ unsigned long MSIXTableEntry;
  /* 0x0030 */ unsigned long LookaheadSize;
  /* 0x0034 */ struct _IF_COUNTED_STRING_LH VmName;
  /* 0x0238 */ struct _IF_COUNTED_STRING_LH QueueName;
  /* 0x043c */ unsigned long PortId;
  /* 0x0440 */ unsigned long InterruptCoalescingDomainId;
  /* 0x0444 */ long __PADDING__[1];
} NDIS_RECEIVE_QUEUE_PARAMETERS, *PNDIS_RECEIVE_QUEUE_PARAMETERS; /* size: 0x0448 */

typedef enum _NDIS_RECEIVE_QUEUE_PNP_STATE
{
  NdisReceiveQueuePnPStateUndefined = 0,
  NdisReceiveQueuePnPStateAddedToList = 1,
  NdisReceiveQueuePnPStateAllocated = 2,
  NdisReceiveQueuePnPStateEnabled = 3,
  NdisReceiveQueuePnPStateMaximum = 4,
} NDIS_RECEIVE_QUEUE_PNP_STATE, *PNDIS_RECEIVE_QUEUE_PNP_STATE;

typedef struct _NDIS_RECEIVE_QUEUE_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long QueueId;
  /* 0x000c */ enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
} NDIS_RECEIVE_QUEUE_STATE, *PNDIS_RECEIVE_QUEUE_STATE; /* size: 0x0010 */

typedef enum _NDIS_RECEIVE_QUEUE_TYPE
{
  NdisReceiveQueueTypeUnspecified = 0,
  NdisReceiveQueueTypeVMQueue = 1,
  NdisReceiveQueueTypeMaximum = 2,
} NDIS_RECEIVE_QUEUE_TYPE, *PNDIS_RECEIVE_QUEUE_TYPE;

typedef struct _NDIS_RECEIVE_SCALE_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long CapabilitiesFlags;
  /* 0x0008 */ unsigned long NumberOfInterruptMessages;
  /* 0x000c */ unsigned long NumberOfReceiveQueues;
  /* 0x0010 */ unsigned short NumberOfIndirectionTableEntries;
  /* 0x0012 */ char __PADDING__[2];
} NDIS_RECEIVE_SCALE_CAPABILITIES, *PNDIS_RECEIVE_SCALE_CAPABILITIES; /* size: 0x0014 */

typedef struct _NDIS_RECEIVE_SCALE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short BaseCpuNumber;
  /* 0x0008 */ unsigned long HashInformation;
  /* 0x000c */ unsigned short IndirectionTableSize;
  /* 0x0010 */ unsigned long IndirectionTableOffset;
  /* 0x0014 */ unsigned short HashSecretKeySize;
  /* 0x0018 */ unsigned long HashSecretKeyOffset;
  /* 0x001c */ unsigned long ProcessorMasksOffset;
  /* 0x0020 */ unsigned long NumberOfProcessorMasks;
  /* 0x0024 */ unsigned long ProcessorMasksEntrySize;
} NDIS_RECEIVE_SCALE_PARAMETERS, *PNDIS_RECEIVE_SCALE_PARAMETERS; /* size: 0x0028 */

typedef struct _NDIS_REFCOUNT_BLOCK
{
  /* 0x0000 */ unsigned char Flags;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char NumRefTags;
  /* 0x0003 */ unsigned char NumOverflowTaggedEntries;
  union
  {
    /* 0x0008 */ struct _NDIS_REFCOUNT_TAGGED TaggedRefCounts;
    /* 0x0008 */ struct _NDIS_REFCOUNT_WITH_STACK RefWithStack[1];
  }; /* size: 0x0040 */
} NDIS_REFCOUNT_BLOCK, *PNDIS_REFCOUNT_BLOCK; /* size: 0x0048 */

typedef struct _NDIS_REFCOUNT_STACK_BLOCK
{
  /* 0x0000 */ struct _NDIS_REFCOUNT_STACK_BLOCK* Next;
  /* 0x0008 */ struct _NDIS_REFCOUNT_STACK_ENTRY References[6];
  /* 0x0020 */ struct _NDIS_REFCOUNT_STACK_ENTRY Dereferences[6];
} NDIS_REFCOUNT_STACK_BLOCK, *PNDIS_REFCOUNT_STACK_BLOCK; /* size: 0x0038 */

typedef struct _NDIS_REFCOUNT_STACK_ENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Stack : 26; /* bit position: 0 */
    /* 0x0000 */ unsigned long RefCount : 6; /* bit position: 26 */
  }; /* bitfield */
} NDIS_REFCOUNT_STACK_ENTRY, *PNDIS_REFCOUNT_STACK_ENTRY; /* size: 0x0004 */

typedef struct _NDIS_REFCOUNT_TAGGED
{
  /* 0x0000 */ struct _NDIS_REFCOUNT_TAGGED_ENTRY* Tags;
  /* 0x0008 */ unsigned long RefMask[1];
  /* 0x000c */ long __PADDING__[1];
} NDIS_REFCOUNT_TAGGED, *PNDIS_REFCOUNT_TAGGED; /* size: 0x0010 */

typedef struct _NDIS_REFCOUNT_TAGGED_ENTRY
{
  /* 0x0000 */ unsigned char Tag;
  /* 0x0001 */ unsigned char RefCount;
} NDIS_REFCOUNT_TAGGED_ENTRY, *PNDIS_REFCOUNT_TAGGED_ENTRY; /* size: 0x0002 */

typedef struct _NDIS_REFCOUNT_WITH_STACK
{
  /* 0x0000 */ struct _NDIS_REFCOUNT_STACK_BLOCK Block;
  struct /* bitfield */
  {
    /* 0x0038 */ unsigned long ReferenceAllocationFailed : 1; /* bit position: 0 */
    /* 0x0038 */ unsigned long TotalReferences : 15; /* bit position: 1 */
    /* 0x0038 */ unsigned long DereferenceAllocationFailed : 1; /* bit position: 16 */
    /* 0x0038 */ unsigned long TotalDereferences : 15; /* bit position: 17 */
  }; /* bitfield */
  /* 0x003c */ long __PADDING__[1];
} NDIS_REFCOUNT_WITH_STACK, *PNDIS_REFCOUNT_WITH_STACK; /* size: 0x0040 */

typedef struct _NDIS_REQUEST
{
  /* 0x0000 */ unsigned char MacReserved[32];
  /* 0x0020 */ enum _NDIS_REQUEST_TYPE RequestType;
  /* 0x0028 */ union _DATA DATA;
  /* 0x0048 */ unsigned char NdisReserved[72];
  union
  {
    /* 0x0090 */ unsigned char CallMgrReserved[16];
    /* 0x0090 */ unsigned char ProtocolReserved[16];
  }; /* size: 0x0010 */
  /* 0x00a0 */ unsigned char MiniportReserved[16];
} NDIS_REQUEST, *PNDIS_REQUEST; /* size: 0x00b0 */

typedef enum _NDIS_REQUEST_TYPE
{
  NdisRequestQueryInformation = 0,
  NdisRequestSetInformation = 1,
  NdisRequestQueryStatistics = 2,
  NdisRequestOpen = 3,
  NdisRequestClose = 4,
  NdisRequestSend = 5,
  NdisRequestTransferData = 6,
  NdisRequestReset = 7,
  NdisRequestGeneric1 = 8,
  NdisRequestGeneric2 = 9,
  NdisRequestGeneric3 = 10,
  NdisRequestGeneric4 = 11,
  NdisRequestMethod = 12,
} NDIS_REQUEST_TYPE, *PNDIS_REQUEST_TYPE;

typedef struct _NDIS_REQUEST_XLATION_CONTEXT
{
  /* 0x0000 */ unsigned long OldOid;
  /* 0x0008 */ void* InfoBuf;
  /* 0x0010 */ unsigned int InfoBufLength;
  /* 0x0018 */ unsigned __int64 RcvErrorValue;
  /* 0x0020 */ unsigned __int64 RcvNoBufferValue;
  /* 0x0028 */ unsigned __int64 RcvDiscardsValue;
  /* 0x0030 */ unsigned __int64 XmitErrorValue;
  /* 0x0038 */ int Status;
  /* 0x003c */ long __PADDING__[1];
} NDIS_REQUEST_XLATION_CONTEXT, *PNDIS_REQUEST_XLATION_CONTEXT; /* size: 0x0040 */

typedef struct _NDIS_RESTART_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_RESTART_ATTRIBUTES* Next;
  /* 0x0008 */ unsigned long Oid;
  /* 0x000c */ unsigned long DataLength;
  /* 0x0010 */ unsigned char Data[1];
  /* 0x0011 */ char __PADDING__[15];
} NDIS_RESTART_ATTRIBUTES, *PNDIS_RESTART_ATTRIBUTES; /* size: 0x0020 */

typedef struct _NDIS_RESTART_GENERAL_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long MtuSize;
  /* 0x0008 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x0010 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x0018 */ unsigned long LookaheadSize;
  /* 0x001c */ unsigned long MacOptions;
  /* 0x0020 */ unsigned long SupportedPacketFilters;
  /* 0x0024 */ unsigned long MaxMulticastListSize;
  /* 0x0028 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES* RecvScaleCapabilities;
  /* 0x0030 */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x0034 */ unsigned long Flags;
  /* 0x0038 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x003c */ unsigned long SupportedStatistics;
  /* 0x0040 */ unsigned long DataBackFillSize;
  /* 0x0044 */ unsigned long ContextBackFillSize;
  /* 0x0048 */ unsigned long* SupportedOidList;
  /* 0x0050 */ unsigned long SupportedOidListLength;
  /* 0x0054 */ unsigned long MaxLookaheadSizeAccessed;
} NDIS_RESTART_GENERAL_ATTRIBUTES, *PNDIS_RESTART_GENERAL_ATTRIBUTES; /* size: 0x0058 */

typedef union _NDIS_RSC_NBL_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short CoalescedSegCount;
      /* 0x0002 */ unsigned short DupAckCount;
    } /* size: 0x0004 */ Info;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0008 */
} NDIS_RSC_NBL_INFO, *PNDIS_RSC_NBL_INFO; /* size: 0x0008 */

typedef enum _NDIS_RSS_PROFILE
{
  NdisRssProfileClosest = 1,
  NdisRssProfileClosestStatic = 2,
  NdisRssProfileNuma = 3,
  NdisRssProfileNumaStatic = 4,
  NdisRssProfileConservative = 5,
  NdisRssProfileMaximum = 6,
} NDIS_RSS_PROFILE, *PNDIS_RSS_PROFILE;

typedef struct _NDIS_RW_LOCK
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 SpinLock;
      /* 0x0008 */ void* Context;
    }; /* size: 0x0010 */
    /* 0x0000 */ unsigned char Reserved[16];
  }; /* size: 0x0010 */
  union
  {
    /* 0x0010 */ union _NDIS_RW_LOCK_REFCOUNT RefCount[64];
    /* 0x0010 */ unsigned long RefCountEx[256];
    struct
    {
      /* 0x0010 */ unsigned __int64 RefCountLock;
      /* 0x0018 */ volatile unsigned long SharedRefCount;
      /* 0x001c */ volatile unsigned char WriterWaiting;
      /* 0x001d */ char __PADDING__[1011];
    }; /* size: 0x0400 */
  }; /* size: 0x0400 */
} NDIS_RW_LOCK, *PNDIS_RW_LOCK; /* size: 0x0410 */

typedef struct _NDIS_RW_LOCK_EX
{
  /* 0x0000 */ void* SourceHandle;
  /* 0x0008 */ unsigned __int64 WriteLock;
  /* 0x0010 */ struct _ETHREAD* Owner;
  /* 0x0018 */ struct PNDIS_PER_PROCESSOR_SLOT__* RefCountSlot;
  /* 0x0020 */ unsigned long* RefCount[1];
} NDIS_RW_LOCK_EX, *PNDIS_RW_LOCK_EX; /* size: 0x0028 */

typedef union _NDIS_RW_LOCK_REFCOUNT
{
  union
  {
    /* 0x0000 */ unsigned long RefCount;
    /* 0x0000 */ unsigned char cacheLine[16];
  }; /* size: 0x0010 */
} NDIS_RW_LOCK_REFCOUNT, *PNDIS_RW_LOCK_REFCOUNT; /* size: 0x0010 */

typedef struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long QueueId;
  /* 0x000c */ enum _NDIS_SHARED_MEMORY_USAGE SharedMemoryUsage;
  /* 0x0010 */ struct _MDL* Mdl;
  /* 0x0018 */ void* CurrentVa;
  /* 0x0020 */ unsigned long Length;
  /* 0x0028 */ void* ProcessSGListHandler /* function */;
  /* 0x0030 */ void* Context;
  /* 0x0038 */ struct _SCATTER_GATHER_LIST* ScatterGatherListBuffer;
  /* 0x0040 */ unsigned long ScatterGatherListBufferSize;
  /* 0x0044 */ unsigned long ScatterGatherListBufferSizeNeeded;
} NDIS_SCATTER_GATHER_LIST_PARAMETERS, *PNDIS_SCATTER_GATHER_LIST_PARAMETERS; /* size: 0x0048 */

typedef struct _NDIS_SELECTIVE_SUSPEND
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned long IdleTimeout;
  /* 0x0010 */ struct _NDIS_TIMER IdleTimer;
  /* 0x0090 */ unsigned long IdleTickCount;
  /* 0x0098 */ struct _KEVENT IdleWorkItemCompleteEvent;
  /* 0x00b0 */ struct _KEVENT PowerSuspendCompleteEvent;
  /* 0x00c8 */ struct _KEVENT IdleNotificationCompleteEvent;
  /* 0x00e0 */ struct _KEVENT IdleNotificationDoneEvent;
  /* 0x00f8 */ struct _KEVENT DevicePowerReadyEvent;
  /* 0x0110 */ struct _NDIS_WORK_ITEM IdleTimerWorkItem;
  /* 0x0160 */ struct _NDIS_WORK_ITEM IdleCancelWorkItem;
  /* 0x01b0 */ struct _NDIS_IRP_WORK_ITEM ResumeWorkItem;
  /* 0x01e0 */ struct _NDIS_SS_IDLE_FLAGS Flags;
  /* 0x01e4 */ struct _NDIS_SS_STOP_FLAGS StopFlags;
  /* 0x01e8 */ struct _NDIS_SS_CONTROL_OPS PendingControlOps;
  /* 0x01ec */ long PendingPnPEventCount;
  /* 0x01f0 */ long PendingSendNblCount;
  /* 0x01f4 */ long PendingCancelSendCount;
  /* 0x01f8 */ long PendingDirectOidCount;
  /* 0x01fc */ long PendingCancelDirectOidCount;
  /* 0x0200 */ long PendingPnPOpCount;
  /* 0x0208 */ struct _NBL_QUEUE PendingSendNblQueue;
  /* 0x0218 */ struct _NBL_QUEUE PendingReceiveNblQueue;
  /* 0x0228 */ long PendingReceiveReturnCount;
  /* 0x0230 */ struct _LIST_ENTRY PendingDirectOidQueue;
  /* 0x0240 */ struct _NDIS_OID_CACHE_ENTRY* OidCacheArray;
  /* 0x0248 */ struct NDIS_NBL_TRACKER_HANDLE__* QueuedSendNblTracker;
  /* 0x0250 */ struct NDIS_NBL_TRACKER_HANDLE__* QueuedReceiveReturnNblTracker;
  /* 0x0258 */ unsigned short LastUnexpectedFailureLine[2];
  /* 0x025c */ union _NDIS_SS_RESUME_REASON LastResumeReason;
  /* 0x0260 */ unsigned long LastResumeContext;
  /* 0x0264 */ union _NDIS_SS_RESUME_REASON LastBusyEvent;
  /* 0x0268 */ unsigned long LastBusyContext;
  /* 0x026c */ unsigned long SuspendCount;
  /* 0x0270 */ union _LARGE_INTEGER LastSuspendTime;
  /* 0x0278 */ union _LARGE_INTEGER LastCancelTime;
  /* 0x0280 */ unsigned __int64 LastResumeLatencyMs;
  /* 0x0288 */ unsigned __int64 TotalResumeLatencyMs;
  /* 0x0290 */ unsigned __int64 LastSuspendIntervalMs;
  /* 0x0298 */ unsigned __int64 TotalSuspendedTimeMs;
  /* 0x02a0 */ enum _NDIS_DEVICE_POWER_STATE LastRequestedIdlePowerState;
  /* 0x02a4 */ long __PADDING__[1];
} NDIS_SELECTIVE_SUSPEND, *PNDIS_SELECTIVE_SUSPEND; /* size: 0x02a8 */

typedef enum _NDIS_SEND_PATH_TYPE
{
  NdisFilterSendPath = 0,
  NdisNoFilterSendPath = 1,
  Ndis5NoFilterSendPath = 2,
  NdisFakeSendPath = 3,
} NDIS_SEND_PATH_TYPE, *PNDIS_SEND_PATH_TYPE;

typedef struct _NDIS_SG_DMA_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0010 */ void* MiniportAdapterContext;
  /* 0x0018 */ struct _DMA_ADAPTER* DmaAdapterObject;
  /* 0x0020 */ void* ProcessSGListHandler /* function */;
  /* 0x0028 */ void* SharedMemAllocateCompleteHandler /* function */;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ unsigned long MaximumPhysicalMapping;
  /* 0x0038 */ unsigned long ScatterGatherListSize;
  /* 0x0040 */ void* SGListLookasideList;
  /* 0x0048 */ long DmaAdapterRefCount;
  /* 0x0050 */ struct _KEVENT* DmaResourcesReleasedEvent;
  /* 0x0058 */ void* SharedMemoryPage[2];
  /* 0x0068 */ unsigned long SharedMemoryLeft[2];
  /* 0x0070 */ union _LARGE_INTEGER SharedMemoryAddress[2];
  /* 0x0080 */ struct _DMA_ADAPTER* SavedDmaAdapterObject;
  /* 0x0088 */ struct _MAP_REGISTER_ENTRY* MapRegisters;
  /* 0x0090 */ struct _KEVENT* AllocationEvent;
  /* 0x0098 */ unsigned short CurrentMapRegister;
  /* 0x009a */ unsigned short BaseMapRegistersNeeded;
  /* 0x009c */ unsigned short SGMapRegistersNeeded;
  /* 0x009e */ char __PADDING__[2];
} NDIS_SG_DMA_BLOCK, *PNDIS_SG_DMA_BLOCK; /* size: 0x00a0 */

typedef struct _NDIS_SG_DMA_DESCRIPTION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MaximumPhysicalMapping;
  /* 0x0010 */ void* ProcessSGListHandler /* function */;
  /* 0x0018 */ void* SharedMemAllocateCompleteHandler /* function */;
  /* 0x0020 */ unsigned long ScatterGatherListSize;
  /* 0x0024 */ long __PADDING__[1];
} NDIS_SG_DMA_DESCRIPTION, *PNDIS_SG_DMA_DESCRIPTION; /* size: 0x0028 */

typedef struct _NDIS_SHARED_MEMORY_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY MiniportLink;
  /* 0x0010 */ struct _LIST_ENTRY OpenLink;
  /* 0x0020 */ struct _LIST_ENTRY QueueLink;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0038 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0040 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0048 */ struct _NDIS_RECEIVE_QUEUE_BLOCK* ReceiveQueue;
  /* 0x0050 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x0058 */ void* SharedMemoryHandlerContext;
  /* 0x0060 */ void* ProviderAllocationContext;
  /* 0x0068 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0070 */ struct _NDIS_SHARED_MEMORY_PARAMETERS SharedMemoryParameters;
} NDIS_SHARED_MEMORY_BLOCK, *PNDIS_SHARED_MEMORY_BLOCK; /* size: 0x00b8 */

typedef struct _NDIS_SHARED_MEMORY_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long QueueId;
  /* 0x0010 */ void* SharedMemoryHandle;
  /* 0x0018 */ unsigned long PreferredNode;
  /* 0x001c */ enum _NDIS_SHARED_MEMORY_USAGE Usage;
  /* 0x0020 */ unsigned long Length;
  /* 0x0028 */ void* VirtualAddress;
  /* 0x0030 */ unsigned long SGListBufferLength;
  /* 0x0038 */ struct _SCATTER_GATHER_LIST* SGListBuffer;
  /* 0x0040 */ unsigned long VPortId;
  /* 0x0044 */ long __PADDING__[1];
} NDIS_SHARED_MEMORY_PARAMETERS, *PNDIS_SHARED_MEMORY_PARAMETERS; /* size: 0x0048 */

typedef struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* ProviderContext;
  /* 0x0010 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0018 */ void* FreeSharedMemoryHandler /* function */;
} NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS, *PNDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS; /* size: 0x0020 */

typedef enum _NDIS_SHARED_MEMORY_USAGE
{
  NdisSharedMemoryUsageUndefined = 0,
  NdisSharedMemoryUsageXmit = 1,
  NdisSharedMemoryUsageXmitHeader = 2,
  NdisSharedMemoryUsageXmitData = 3,
  NdisSharedMemoryUsageReceive = 4,
  NdisSharedMemoryUsageReceiveLookahead = 5,
  NdisSharedMemoryUsageReceivePostLookahead = 6,
  NdisSharedMemoryUsageReceiveHeader = 7,
  NdisSharedMemoryUsageReceiveData = 8,
  NdisSharedMemoryUsageOther = 9,
  NdisSharedMemoryUsageMax = 10,
} NDIS_SHARED_MEMORY_USAGE, *PNDIS_SHARED_MEMORY_USAGE;

typedef enum _NDIS_SHUTDOWN_ACTION
{
  NdisShutdownPowerOff = 0,
  NdisShutdownBugCheck = 1,
} NDIS_SHUTDOWN_ACTION, *PNDIS_SHUTDOWN_ACTION;

typedef struct _NDIS_SPIN_LOCK
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ unsigned char OldIrql;
  /* 0x0009 */ char __PADDING__[7];
} NDIS_SPIN_LOCK, *PNDIS_SPIN_LOCK; /* size: 0x0010 */

typedef struct _NDIS_SRIOV_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SriovCapabilities;
} NDIS_SRIOV_CAPABILITIES, *PNDIS_SRIOV_CAPABILITIES; /* size: 0x000c */

typedef enum _NDIS_SS_BUSY_REASON
{
  NdisBusyOid = 33,
  NdisBusyPause = 34,
  NdisBusyRestart = 35,
  NdisBusyReset = 36,
  NdisBusyDevicePnPEvent = 37,
  NdisBusyCheckForHang = 49,
  NdisBusyDirectOid = 50,
  NdisBusyCancelDirectOid = 51,
  NdisBusySend = 52,
  NdisBusyCancelSend = 53,
  NdisBusyReceiveReturn = 54,
  NdisBusyWaitWake = 65,
} NDIS_SS_BUSY_REASON, *PNDIS_SS_BUSY_REASON;

typedef struct _NDIS_SS_CONTROL_OPS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Oid : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Pause : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Restart : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reset : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long CheckForHang : 1; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_SS_CONTROL_OPS, *PNDIS_SS_CONTROL_OPS; /* size: 0x0004 */

typedef struct _NDIS_SS_IDLE_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long TimerRunning : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long IdleWorkItemScheduled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long IdleRequestSubmitted : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long SuspendPowerIrpRequested : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long DeviceSuspended : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long ResumePowerIrpRequested : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long CancelWorkItemScheduled : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long IdleRequestCanceled : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long ForceIdleTransition : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long Stopped : 1; /* bit position: 9 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_SS_IDLE_FLAGS, *PNDIS_SS_IDLE_FLAGS; /* size: 0x0004 */

typedef union _NDIS_SS_RESUME_REASON
{
  union
  {
    /* 0x0000 */ enum _NDIS_SS_STOP_REASON StopReason;
    /* 0x0000 */ enum _NDIS_SS_BUSY_REASON BusyReason;
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_SS_RESUME_REASON, *PNDIS_SS_RESUME_REASON; /* size: 0x0004 */

typedef struct _NDIS_SS_STOP_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long QueryRemove : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long DeviceRemove : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long SurpriseRemove : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long QueryStop : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long DeviceStop : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long SystemPower : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long NicQuiet : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long PnPOp : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long NotStarted : 1; /* bit position: 8 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_SS_STOP_FLAGS, *PNDIS_SS_STOP_FLAGS; /* size: 0x0004 */

typedef enum _NDIS_SS_STOP_REASON
{
  NdisSSReasonUnspecified = 0,
  NdisSSQueryRemove = 1,
  NdisSSDeviceRemove = 2,
  NdisSSDeviceSurpriseRemove = 3,
  NdisSSQueryStop = 4,
  NdisSSDeviceStop = 5,
  NdisSSSystemPower = 6,
  NdisSSNicQuiet = 7,
  NdisSSPnPOp = 8,
  NdisSSNotStarted = 9,
  NdisSSStopReasonMax = 15,
} NDIS_SS_STOP_REASON, *PNDIS_SS_STOP_REASON;

typedef struct _NDIS_STACK_TRACE_TABLE
{
  /* 0x0000 */ unsigned __int64 Lock;
  /* 0x0008 */ unsigned char Allocated;
  /* 0x0009 */ unsigned char Collisions;
  /* 0x000a */ unsigned char DroppedStacks;
  /* 0x000b */ unsigned char NumStackFrames;
  /* 0x0010 */ struct _RTL_DYNAMIC_HASH_TABLE HashTable;
  /* 0x0038 */ unsigned long AllocationFailures;
  /* 0x003c */ long __PADDING__[1];
} NDIS_STACK_TRACE_TABLE, *PNDIS_STACK_TRACE_TABLE; /* size: 0x0040 */

typedef struct _NDIS_STATISTICS_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long SupportedStatistics;
  /* 0x0008 */ unsigned __int64 ifInDiscards;
  /* 0x0010 */ unsigned __int64 ifInErrors;
  /* 0x0018 */ unsigned __int64 ifHCInOctets;
  /* 0x0020 */ unsigned __int64 ifHCInUcastPkts;
  /* 0x0028 */ unsigned __int64 ifHCInMulticastPkts;
  /* 0x0030 */ unsigned __int64 ifHCInBroadcastPkts;
  /* 0x0038 */ unsigned __int64 ifHCOutOctets;
  /* 0x0040 */ unsigned __int64 ifHCOutUcastPkts;
  /* 0x0048 */ unsigned __int64 ifHCOutMulticastPkts;
  /* 0x0050 */ unsigned __int64 ifHCOutBroadcastPkts;
  /* 0x0058 */ unsigned __int64 ifOutErrors;
  /* 0x0060 */ unsigned __int64 ifOutDiscards;
  /* 0x0068 */ unsigned __int64 ifHCInUcastOctets;
  /* 0x0070 */ unsigned __int64 ifHCInMulticastOctets;
  /* 0x0078 */ unsigned __int64 ifHCInBroadcastOctets;
  /* 0x0080 */ unsigned __int64 ifHCOutUcastOctets;
  /* 0x0088 */ unsigned __int64 ifHCOutMulticastOctets;
  /* 0x0090 */ unsigned __int64 ifHCOutBroadcastOctets;
} NDIS_STATISTICS_INFO, *PNDIS_STATISTICS_INFO; /* size: 0x0098 */

typedef struct _NDIS_STATUS_INDICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* SourceHandle;
  /* 0x0010 */ unsigned long PortNumber;
  /* 0x0014 */ int StatusCode;
  /* 0x0018 */ unsigned long Flags;
  /* 0x0020 */ void* DestinationHandle;
  /* 0x0028 */ void* RequestId;
  /* 0x0030 */ void* StatusBuffer;
  /* 0x0038 */ unsigned long StatusBufferSize;
  /* 0x003c */ struct _GUID Guid;
  /* 0x0050 */ void* NdisReserved[4];
} NDIS_STATUS_INDICATION, *PNDIS_STATUS_INDICATION; /* size: 0x0070 */

typedef struct _NDIS_STATUS_UNBIND_WORKITEM
{
  /* 0x0000 */ struct _NDIS_WORK_ITEM WorkItem;
  /* 0x0050 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
} NDIS_STATUS_UNBIND_WORKITEM, *PNDIS_STATUS_UNBIND_WORKITEM; /* size: 0x0058 */

typedef enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS
{
  NdisPauseFunctionsUnsupported = 0,
  NdisPauseFunctionsSendOnly = 1,
  NdisPauseFunctionsReceiveOnly = 2,
  NdisPauseFunctionsSendAndReceive = 3,
  NdisPauseFunctionsUnknown = 4,
} NDIS_SUPPORTED_PAUSE_FUNCTIONS, *PNDIS_SUPPORTED_PAUSE_FUNCTIONS;

typedef struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned int ElementSize;
  /* 0x0008 */ unsigned int NumElements;
  /* 0x000c */ unsigned int NumDestinations;
  /* 0x0010 */ void* FirstElement;
} NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY, *PNDIS_SWITCH_FORWARDING_DESTINATION_ARRAY; /* size: 0x0018 */

typedef union _NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int NumAvailableDestinations : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned int SourcePortId : 16; /* bit position: 16 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned int SourceNicIndex : 8; /* bit position: 0 */
        /* 0x0004 */ unsigned int Reserved1 : 2; /* bit position: 8 */
        /* 0x0004 */ unsigned int IsPacketDataSafe : 1; /* bit position: 10 */
        /* 0x0004 */ unsigned int SafePacketDataSize : 12; /* bit position: 11 */
        /* 0x0004 */ unsigned int Reserved2 : 9; /* bit position: 23 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} NDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO, *PNDIS_SWITCH_FORWARDING_DETAIL_NET_BUFFER_LIST_INFO; /* size: 0x0008 */

typedef struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ char* ContextName;
  /* 0x0010 */ struct _GUID* ExtensionId;
} NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO, *PNDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO; /* size: 0x0018 */

typedef struct _NDIS_SWITCH_PORT_DESTINATION
{
  /* 0x0000 */ unsigned int PortId;
  /* 0x0004 */ unsigned short NicIndex;
  struct /* bitfield */
  {
    /* 0x0006 */ unsigned short IsExcluded : 1; /* bit position: 0 */
    /* 0x0006 */ unsigned short PreserveVLAN : 1; /* bit position: 1 */
    /* 0x0006 */ unsigned short PreservePriority : 1; /* bit position: 2 */
    /* 0x0006 */ unsigned short Reserved : 13; /* bit position: 3 */
  }; /* bitfield */
} NDIS_SWITCH_PORT_DESTINATION, *PNDIS_SWITCH_PORT_DESTINATION; /* size: 0x0008 */

typedef struct _NDIS_SYSTEM_PROCESSOR_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_PROCESSOR_VENDOR ProcessorVendor;
  /* 0x000c */ unsigned long NumPhysicalPackages;
  /* 0x0010 */ unsigned long NumCores;
  /* 0x0014 */ unsigned long NumCoresPerPhysicalPackage;
  /* 0x0018 */ unsigned long MaxHyperThreadingCpusPerCore;
  /* 0x001c */ unsigned long RssBaseCpu;
  /* 0x0020 */ unsigned long RssCpuCount;
  /* 0x0028 */ unsigned char* RssProcessors;
  /* 0x0030 */ struct _NDIS_PROCESSOR_INFO CpuInfo[64];
} NDIS_SYSTEM_PROCESSOR_INFO, *PNDIS_SYSTEM_PROCESSOR_INFO; /* size: 0x0430 */

typedef enum _NDIS_TASK
{
  TcpIpChecksumNdisTask = 0,
  IpSecNdisTask = 1,
  TcpLargeSendNdisTask = 2,
  MaxNdisTask = 3,
} NDIS_TASK, *PNDIS_TASK;

typedef struct _NDIS_TASK_IPSEC
{
  struct
  {
    /* 0x0000 */ unsigned long AH_ESP_COMBINED;
    /* 0x0004 */ unsigned long TRANSPORT_TUNNEL_COMBINED;
    /* 0x0008 */ unsigned long V4_OPTIONS;
    /* 0x000c */ unsigned long RESERVED;
  } /* size: 0x0010 */ Supported;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0010 */ unsigned long MD5 : 1; /* bit position: 0 */
      /* 0x0010 */ unsigned long SHA_1 : 1; /* bit position: 1 */
      /* 0x0010 */ unsigned long Transport : 1; /* bit position: 2 */
      /* 0x0010 */ unsigned long Tunnel : 1; /* bit position: 3 */
      /* 0x0010 */ unsigned long Send : 1; /* bit position: 4 */
      /* 0x0010 */ unsigned long Receive : 1; /* bit position: 5 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4AH;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long DES : 1; /* bit position: 0 */
      /* 0x0014 */ unsigned long RESERVED : 1; /* bit position: 1 */
      /* 0x0014 */ unsigned long TRIPLE_DES : 1; /* bit position: 2 */
      /* 0x0014 */ unsigned long NULL_ESP : 1; /* bit position: 3 */
      /* 0x0014 */ unsigned long Transport : 1; /* bit position: 4 */
      /* 0x0014 */ unsigned long Tunnel : 1; /* bit position: 5 */
      /* 0x0014 */ unsigned long Send : 1; /* bit position: 6 */
      /* 0x0014 */ unsigned long Receive : 1; /* bit position: 7 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4ESP;
} NDIS_TASK_IPSEC, *PNDIS_TASK_IPSEC; /* size: 0x0018 */

typedef struct _NDIS_TASK_OFFLOAD
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ enum _NDIS_TASK Task;
  /* 0x000c */ unsigned long OffsetNextTask;
  /* 0x0010 */ unsigned long TaskBufferLength;
  /* 0x0014 */ unsigned char TaskBuffer[1];
  /* 0x0015 */ char __PADDING__[3];
} NDIS_TASK_OFFLOAD, *PNDIS_TASK_OFFLOAD; /* size: 0x0018 */

typedef struct _NDIS_TASK_OFFLOAD_HEADER
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long Reserved;
  /* 0x000c */ unsigned long OffsetFirstTask;
  /* 0x0010 */ struct _NDIS_ENCAPSULATION_FORMAT EncapsulationFormat;
} NDIS_TASK_OFFLOAD_HEADER, *PNDIS_TASK_OFFLOAD_HEADER; /* size: 0x001c */

typedef struct _NDIS_TASK_TCP_IP_CHECKSUM
{
  struct
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long IpChecksum : 1; /* bit position: 4 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4Transmit;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x0004 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
      /* 0x0004 */ unsigned long IpChecksum : 1; /* bit position: 4 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4Receive;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x0008 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x0008 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
    }; /* bitfield */
  } /* size: 0x0004 */ V6Transmit;
  struct
  {
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x000c */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x000c */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x000c */ unsigned long UdpChecksum : 1; /* bit position: 3 */
    }; /* bitfield */
  } /* size: 0x0004 */ V6Receive;
} NDIS_TASK_TCP_IP_CHECKSUM, *PNDIS_TASK_TCP_IP_CHECKSUM; /* size: 0x0010 */

typedef struct _NDIS_TASK_TCP_LARGE_SEND
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long MaxOffLoadSize;
  /* 0x0008 */ unsigned long MinSegmentCount;
  /* 0x000c */ unsigned char TcpOptions;
  /* 0x000d */ unsigned char IpOptions;
  /* 0x000e */ char __PADDING__[2];
} NDIS_TASK_TCP_LARGE_SEND, *PNDIS_TASK_TCP_LARGE_SEND; /* size: 0x0010 */

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Encapsulation;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long SupportIPv4 : 2; /* bit position: 0 */
    /* 0x0008 */ unsigned long SupportIPv6 : 2; /* bit position: 2 */
    /* 0x0008 */ unsigned long SupportIPv6ExtensionHeaders : 2; /* bit position: 4 */
    /* 0x0008 */ unsigned long SupportSack : 2; /* bit position: 6 */
    /* 0x0008 */ unsigned long CongestionAlgorithm : 4; /* bit position: 8 */
  }; /* bitfield */
  /* 0x000c */ unsigned long TcpConnectionOffloadCapacity;
  /* 0x0010 */ unsigned long Flags;
} NDIS_TCP_CONNECTION_OFFLOAD, *PNDIS_TCP_CONNECTION_OFFLOAD; /* size: 0x0014 */

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION
{
  struct
  {
    /* 0x0000 */ unsigned char Enabled;
    /* 0x0004 */ unsigned long EncapsulationType;
    /* 0x0008 */ unsigned long HeaderSize;
  } /* size: 0x000c */ V4;
  struct
  {
    /* 0x000c */ unsigned char Enabled;
    /* 0x0010 */ unsigned long EncapsulationType;
    /* 0x0014 */ unsigned long HeaderSize;
  } /* size: 0x000c */ V6;
} NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION, *PNDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION; /* size: 0x0018 */

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_OFFLOAD_ENCAPSULATION Encapsulation;
  /* 0x0020 */ unsigned long TicksPerSecond;
  /* 0x0024 */ unsigned char TcpAckFrequency;
  /* 0x0025 */ unsigned char TcpDelayedAckTicks;
  /* 0x0026 */ unsigned char TcpMaximumRetransmissions;
  /* 0x0027 */ unsigned char TcpDoubtReachabilityRetransmissions;
  /* 0x0028 */ unsigned long TcpSwsPreventionTicks;
  /* 0x002c */ unsigned long TcpDuplicateAckThreshold;
  /* 0x0030 */ unsigned long TcpPushTicks;
  /* 0x0034 */ unsigned long NceStaleTicks;
  /* 0x0038 */ unsigned long CongestionAlgorithm;
} NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS, *PNDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS; /* size: 0x003c */

typedef struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long IsIPv4 : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long IsIPv6 : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long IpHeaderChecksum : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long Reserved : 11; /* bit position: 5 */
        /* 0x0000 */ unsigned long TcpHeaderOffset : 10; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long TcpChecksumFailed : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long UdpChecksumFailed : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long IpChecksumFailed : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long TcpChecksumSucceeded : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long UdpChecksumSucceeded : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long IpChecksumSucceeded : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned long Loopback : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned long TcpChecksumValueInvalid : 1; /* bit position: 7 */
        /* 0x0000 */ unsigned long IpChecksumValueInvalid : 1; /* bit position: 8 */
      }; /* bitfield */
    } /* size: 0x0004 */ Receive;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0008 */
} NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO, *PNDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO; /* size: 0x0008 */

typedef struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long IpOptionsSupported : 2; /* bit position: 0 */
      /* 0x0004 */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x0004 */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x0004 */ unsigned long UdpChecksum : 2; /* bit position: 6 */
      /* 0x0004 */ unsigned long IpChecksum : 2; /* bit position: 8 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv4Transmit;
  struct
  {
    /* 0x0008 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long IpOptionsSupported : 2; /* bit position: 0 */
      /* 0x000c */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x000c */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x000c */ unsigned long UdpChecksum : 2; /* bit position: 6 */
      /* 0x000c */ unsigned long IpChecksum : 2; /* bit position: 8 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv4Receive;
  struct
  {
    /* 0x0010 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long IpExtensionHeadersSupported : 2; /* bit position: 0 */
      /* 0x0014 */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x0014 */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x0014 */ unsigned long UdpChecksum : 2; /* bit position: 6 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv6Transmit;
  struct
  {
    /* 0x0018 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x001c */ unsigned long IpExtensionHeadersSupported : 2; /* bit position: 0 */
      /* 0x001c */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x001c */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x001c */ unsigned long UdpChecksum : 2; /* bit position: 6 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv6Receive;
} NDIS_TCP_IP_CHECKSUM_OFFLOAD, *PNDIS_TCP_IP_CHECKSUM_OFFLOAD; /* size: 0x0020 */

typedef struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NdisPacketChecksumV4 : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long NdisPacketChecksumV6 : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long NdisPacketTcpChecksum : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long NdisPacketUdpChecksum : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long NdisPacketIpChecksum : 1; /* bit position: 4 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NdisPacketTcpChecksumFailed : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long NdisPacketUdpChecksumFailed : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long NdisPacketIpChecksumFailed : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long NdisPacketTcpChecksumSucceeded : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long NdisPacketUdpChecksumSucceeded : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long NdisPacketIpChecksumSucceeded : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned long NdisPacketLoopback : 1; /* bit position: 6 */
      }; /* bitfield */
    } /* size: 0x0004 */ Receive;
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_TCP_IP_CHECKSUM_PACKET_INFO, *PNDIS_TCP_IP_CHECKSUM_PACKET_INFO; /* size: 0x0004 */

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Unused : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long MSS : 20; /* bit position: 0 */
        /* 0x0000 */ unsigned long TcpHeaderOffset : 10; /* bit position: 20 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV1Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long TcpPayload : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV1TransmitComplete;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long MSS : 20; /* bit position: 0 */
        /* 0x0000 */ unsigned long TcpHeaderOffset : 10; /* bit position: 20 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long IPVersion : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV2Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV2TransmitComplete;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0008 */
} NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO, *PNDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO; /* size: 0x0008 */

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    /* 0x0004 */ unsigned long MaxOffLoadSize;
    /* 0x0008 */ unsigned long MinSegmentCount;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long TcpOptions : 2; /* bit position: 0 */
      /* 0x000c */ unsigned long IpOptions : 2; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0010 */ IPv4;
} NDIS_TCP_LARGE_SEND_OFFLOAD_V1, *PNDIS_TCP_LARGE_SEND_OFFLOAD_V1; /* size: 0x0010 */

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    /* 0x0004 */ unsigned long MaxOffLoadSize;
    /* 0x0008 */ unsigned long MinSegmentCount;
  } /* size: 0x000c */ IPv4;
  struct
  {
    /* 0x000c */ unsigned long Encapsulation;
    /* 0x0010 */ unsigned long MaxOffLoadSize;
    /* 0x0014 */ unsigned long MinSegmentCount;
    struct /* bitfield */
    {
      /* 0x0018 */ unsigned long IpExtensionHeadersSupported : 2; /* bit position: 0 */
      /* 0x0018 */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0010 */ IPv6;
} NDIS_TCP_LARGE_SEND_OFFLOAD_V2, *PNDIS_TCP_LARGE_SEND_OFFLOAD_V2; /* size: 0x001c */

typedef struct _NDIS_TCP_OFFLOAD_CLIENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0010 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x0018 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0020 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x0028 */ void* TcpOffloadEventHandler /* function */;
  /* 0x0030 */ void* TcpOffloadReceiveIndicateHandler /* function */;
} NDIS_TCP_OFFLOAD_CLIENT_HANDLERS, *PNDIS_TCP_OFFLOAD_CLIENT_HANDLERS; /* size: 0x0038 */

typedef struct _NDIS_TCP_OFFLOAD_EVENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ void* NdisTcpOffloadEventHandler /* function */;
  /* 0x0010 */ void* NdisTcpOffloadReceiveHandler /* function */;
  /* 0x0018 */ void* NdisTcpOffloadSendComplete /* function */;
  /* 0x0020 */ void* NdisTcpOffloadReceiveComplete /* function */;
  /* 0x0028 */ void* NdisTcpOffloadDisconnectComplete /* function */;
  /* 0x0030 */ void* NdisTcpOffloadForwardComplete /* function */;
} NDIS_TCP_OFFLOAD_EVENT_HANDLERS, *PNDIS_TCP_OFFLOAD_EVENT_HANDLERS; /* size: 0x0038 */

typedef struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD
{
  struct
  {
    /* 0x0000 */ unsigned char Enabled;
  } /* size: 0x0001 */ IPv4;
  struct
  {
    /* 0x0001 */ unsigned char Enabled;
  } /* size: 0x0001 */ IPv6;
} NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD, *PNDIS_TCP_RECV_SEG_COALESCE_OFFLOAD; /* size: 0x0002 */

typedef struct _NDIS_TIMER
{
  /* 0x0000 */ struct _KTIMER Timer;
  /* 0x0040 */ struct _KDPC Dpc;
} NDIS_TIMER, *PNDIS_TIMER; /* size: 0x0080 */

typedef struct _NDIS_TIMER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long AllocationTag;
  /* 0x0008 */ void* TimerFunction /* function */;
  /* 0x0010 */ void* FunctionContext;
} NDIS_TIMER_CHARACTERISTICS, *PNDIS_TIMER_CHARACTERISTICS; /* size: 0x0018 */

typedef struct _NDIS_TIMER_ENTRY
{
  /* 0x0000 */ struct _NDIS_TIMER_ENTRY* NextTimer;
  /* 0x0008 */ struct _LIST_ENTRY GlobalLink;
  /* 0x0018 */ void* Handle;
  /* 0x0020 */ struct _KTIMER Timer;
  /* 0x0060 */ struct _KDPC Dpc;
  /* 0x00a0 */ unsigned long AllocationTag;
  /* 0x00a8 */ void* TimerFunction /* function */;
  /* 0x00b0 */ void* DefaultFunctionContext;
  /* 0x00b8 */ void* FunctionContext;
  /* 0x00c0 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x00c8 */ unsigned char Periodic;
  /* 0x00c9 */ char __PADDING__[7];
} NDIS_TIMER_ENTRY, *PNDIS_TIMER_ENTRY; /* size: 0x00d0 */

typedef enum _NDIS_TMP_REF_REASON
{
  NdisAoAcTempRefNone = 0,
  NdisAoAcTempRefInit = 1,
  NdisAoAcTempRefPmInit = 2,
  NdisAoAcTempRefWake = 3,
  NdisAoAcTempRefLastDeref = 4,
  NdisAoAcTempRefClearStop = 5,
} NDIS_TMP_REF_REASON, *PNDIS_TMP_REF_REASON;

typedef struct _NDIS_TRACK_MEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0010 */ unsigned long Tag;
  /* 0x0014 */ unsigned int Length;
  /* 0x0018 */ void* Caller;
  /* 0x0020 */ void* CallersCaller;
} NDIS_TRACK_MEM, *PNDIS_TRACK_MEM; /* size: 0x0028 */

typedef enum _NDIS_UDP_HEADER_FIELD
{
  NdisUdpHeaderFieldUndefined = 0,
  NdisUdpHeaderFieldDestinationPort = 1,
  NdisUdpHeaderFieldMaximum = 2,
} NDIS_UDP_HEADER_FIELD, *PNDIS_UDP_HEADER_FIELD;

typedef struct _NDIS_VF_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0010 */ struct _LIST_ENTRY OpenLink;
  /* 0x0020 */ struct _LIST_ENTRY SwitchLink;
  /* 0x0030 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0038 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0040 */ struct _NDIS_NIC_SWITCH_BLOCK* NicSwitch;
  /* 0x0048 */ long Reference;
  /* 0x004c */ unsigned long NumAttachedVPorts;
  /* 0x0050 */ struct _LIST_ENTRY AttachedVPortList;
  /* 0x0060 */ struct _NDIS_NIC_SWITCH_VF_PARAMETERS VFParameters;
} NDIS_VF_BLOCK, *PNDIS_VF_BLOCK; /* size: 0x06c0 */

typedef struct _NDIS_VPORT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0010 */ struct _LIST_ENTRY OpenLink;
  /* 0x0020 */ struct _LIST_ENTRY SwitchLink;
  /* 0x0030 */ struct _LIST_ENTRY FunctionLink;
  /* 0x0040 */ unsigned long Flags;
  /* 0x0048 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0050 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0058 */ struct _NDIS_NIC_SWITCH_BLOCK* NicSwitch;
  /* 0x0060 */ void* AttachedFunction;
  /* 0x0068 */ long Reference;
  /* 0x0070 */ struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS VPortParams;
  /* 0x02b0 */ unsigned long NumFilters;
  /* 0x02b8 */ struct _LIST_ENTRY FilterList;
} NDIS_VPORT_BLOCK, *PNDIS_VPORT_BLOCK; /* size: 0x02c8 */

typedef struct _NDIS_WAN_COMPRESS_INFO
{
  /* 0x0000 */ unsigned char SessionKey[8];
  /* 0x0008 */ unsigned long MSCompType;
  /* 0x000c */ unsigned char CompType;
  /* 0x000e */ unsigned short CompLength;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned char CompOUI[3];
      /* 0x0013 */ unsigned char CompSubType;
      /* 0x0014 */ unsigned char CompValues[32];
    } /* size: 0x0024 */ Proprietary;
    struct
    {
      struct
      {
        /* 0x0010 */ unsigned char CompValues[32];
      } /* size: 0x0020 */ Public;
      /* 0x0030 */ long __PADDING__[1];
    }; /* size: 0x0024 */
  }; /* size: 0x0024 */
} NDIS_WAN_COMPRESS_INFO, *PNDIS_WAN_COMPRESS_INFO; /* size: 0x0034 */

typedef struct _NDIS_WAN_CO_GET_COMP_INFO
{
  /* 0x0000 */ struct _NDIS_WAN_COMPRESS_INFO SendCapabilities;
  /* 0x0034 */ struct _NDIS_WAN_COMPRESS_INFO RecvCapabilities;
} NDIS_WAN_CO_GET_COMP_INFO, *PNDIS_WAN_CO_GET_COMP_INFO; /* size: 0x0068 */

typedef struct _NDIS_WAN_CO_GET_LINK_INFO
{
  /* 0x0000 */ unsigned long MaxSendFrameSize;
  /* 0x0004 */ unsigned long MaxRecvFrameSize;
  /* 0x0008 */ unsigned long SendFramingBits;
  /* 0x000c */ unsigned long RecvFramingBits;
  /* 0x0010 */ unsigned long SendCompressionBits;
  /* 0x0014 */ unsigned long RecvCompressionBits;
  /* 0x0018 */ unsigned long SendACCM;
  /* 0x001c */ unsigned long RecvACCM;
} NDIS_WAN_CO_GET_LINK_INFO, *PNDIS_WAN_CO_GET_LINK_INFO; /* size: 0x0020 */

typedef struct _NDIS_WAN_CO_GET_STATS_INFO
{
  /* 0x0000 */ unsigned long BytesSent;
  /* 0x0004 */ unsigned long BytesRcvd;
  /* 0x0008 */ unsigned long FramesSent;
  /* 0x000c */ unsigned long FramesRcvd;
  /* 0x0010 */ unsigned long CRCErrors;
  /* 0x0014 */ unsigned long TimeoutErrors;
  /* 0x0018 */ unsigned long AlignmentErrors;
  /* 0x001c */ unsigned long SerialOverrunErrors;
  /* 0x0020 */ unsigned long FramingErrors;
  /* 0x0024 */ unsigned long BufferOverrunErrors;
  /* 0x0028 */ unsigned long BytesTransmittedUncompressed;
  /* 0x002c */ unsigned long BytesReceivedUncompressed;
  /* 0x0030 */ unsigned long BytesTransmittedCompressed;
  /* 0x0034 */ unsigned long BytesReceivedCompressed;
  /* 0x0038 */ unsigned long TunnelPacketsRecieved;
  /* 0x003c */ unsigned long TunnelRecievePacketsPending;
  /* 0x0040 */ unsigned long TunnelPacketsIndicatedUp;
  /* 0x0044 */ unsigned long TunnelRecievePacketsRejected;
  /* 0x0048 */ unsigned long TunnelPacketsSent;
  /* 0x004c */ unsigned long TunnelPacketsSentComplete;
  /* 0x0050 */ unsigned long TunnelTransmitPacketsPending;
  /* 0x0054 */ unsigned long TunnelPacketsTransmitError;
  /* 0x0058 */ unsigned long TunnelPacketsSentError;
  /* 0x005c */ unsigned long TunnelTransmitPacketsRejected;
  /* 0x0060 */ unsigned long TunnelAcksSent;
  /* 0x0064 */ unsigned long TunnelAcksSentComplete;
  /* 0x0068 */ unsigned long TunnelGeneric1;
  /* 0x006c */ unsigned long TunnelGeneric2;
  /* 0x0070 */ unsigned long TunnelGeneric3;
} NDIS_WAN_CO_GET_STATS_INFO, *PNDIS_WAN_CO_GET_STATS_INFO; /* size: 0x0074 */

typedef struct _NDIS_WAN_CO_INFO
{
  /* 0x0000 */ unsigned long MaxFrameSize;
  /* 0x0004 */ unsigned long MaxSendWindow;
  /* 0x0008 */ unsigned long FramingBits;
  /* 0x000c */ unsigned long DesiredACCM;
} NDIS_WAN_CO_INFO, *PNDIS_WAN_CO_INFO; /* size: 0x0010 */

typedef struct _NDIS_WAN_CO_SET_COMP_INFO
{
  /* 0x0000 */ struct _NDIS_WAN_COMPRESS_INFO SendCapabilities;
  /* 0x0034 */ struct _NDIS_WAN_COMPRESS_INFO RecvCapabilities;
} NDIS_WAN_CO_SET_COMP_INFO, *PNDIS_WAN_CO_SET_COMP_INFO; /* size: 0x0068 */

typedef struct _NDIS_WAN_CO_SET_LINK_INFO
{
  /* 0x0000 */ unsigned long MaxSendFrameSize;
  /* 0x0004 */ unsigned long MaxRecvFrameSize;
  /* 0x0008 */ unsigned long SendFramingBits;
  /* 0x000c */ unsigned long RecvFramingBits;
  /* 0x0010 */ unsigned long SendCompressionBits;
  /* 0x0014 */ unsigned long RecvCompressionBits;
  /* 0x0018 */ unsigned long SendACCM;
  /* 0x001c */ unsigned long RecvACCM;
} NDIS_WAN_CO_SET_LINK_INFO, *PNDIS_WAN_CO_SET_LINK_INFO; /* size: 0x0020 */

typedef struct _NDIS_WAN_FRAGMENT
{
  /* 0x0000 */ unsigned char RemoteAddress[6];
  /* 0x0006 */ unsigned char LocalAddress[6];
} NDIS_WAN_FRAGMENT, *PNDIS_WAN_FRAGMENT; /* size: 0x000c */

typedef struct _NDIS_WAN_GET_STATS
{
  /* 0x0000 */ unsigned char LocalAddress[6];
  /* 0x0008 */ unsigned long BytesSent;
  /* 0x000c */ unsigned long BytesRcvd;
  /* 0x0010 */ unsigned long FramesSent;
  /* 0x0014 */ unsigned long FramesRcvd;
  /* 0x0018 */ unsigned long CRCErrors;
  /* 0x001c */ unsigned long TimeoutErrors;
  /* 0x0020 */ unsigned long AlignmentErrors;
  /* 0x0024 */ unsigned long SerialOverrunErrors;
  /* 0x0028 */ unsigned long FramingErrors;
  /* 0x002c */ unsigned long BufferOverrunErrors;
  /* 0x0030 */ unsigned long BytesTransmittedUncompressed;
  /* 0x0034 */ unsigned long BytesReceivedUncompressed;
  /* 0x0038 */ unsigned long BytesTransmittedCompressed;
  /* 0x003c */ unsigned long BytesReceivedCompressed;
} NDIS_WAN_GET_STATS, *PNDIS_WAN_GET_STATS; /* size: 0x0040 */

typedef struct _NDIS_WAN_LINE_DOWN
{
  /* 0x0000 */ unsigned char RemoteAddress[6];
  /* 0x0006 */ unsigned char LocalAddress[6];
} NDIS_WAN_LINE_DOWN, *PNDIS_WAN_LINE_DOWN; /* size: 0x000c */

typedef struct _NDIS_WAN_LINE_UP
{
  /* 0x0000 */ unsigned long LinkSpeed;
  /* 0x0004 */ unsigned long MaximumTotalSize;
  /* 0x0008 */ enum _NDIS_WAN_QUALITY Quality;
  /* 0x000c */ unsigned short SendWindow;
  /* 0x000e */ unsigned char RemoteAddress[6];
  /* 0x0014 */ unsigned char LocalAddress[6];
  /* 0x001c */ unsigned long ProtocolBufferLength;
  /* 0x0020 */ unsigned char* ProtocolBuffer;
  /* 0x0028 */ unsigned short ProtocolType;
  /* 0x0030 */ struct _UNICODE_STRING DeviceName;
} NDIS_WAN_LINE_UP, *PNDIS_WAN_LINE_UP; /* size: 0x0040 */

typedef struct _NDIS_WAN_PACKET
{
  /* 0x0000 */ struct _LIST_ENTRY WanPacketQueue;
  /* 0x0010 */ unsigned char* CurrentBuffer;
  /* 0x0018 */ unsigned long CurrentLength;
  /* 0x0020 */ unsigned char* StartBuffer;
  /* 0x0028 */ unsigned char* EndBuffer;
  /* 0x0030 */ void* ProtocolReserved1;
  /* 0x0038 */ void* ProtocolReserved2;
  /* 0x0040 */ void* ProtocolReserved3;
  /* 0x0048 */ void* ProtocolReserved4;
  /* 0x0050 */ void* MacReserved1;
  /* 0x0058 */ void* MacReserved2;
  /* 0x0060 */ void* MacReserved3;
  /* 0x0068 */ void* MacReserved4;
} NDIS_WAN_PACKET, *PNDIS_WAN_PACKET; /* size: 0x0070 */

typedef enum _NDIS_WAN_QUALITY
{
  NdisWanRaw = 0,
  NdisWanErrorControl = 1,
  NdisWanReliable = 2,
} NDIS_WAN_QUALITY, *PNDIS_WAN_QUALITY;

typedef struct _NDIS_WOL_XLATION_CONTEXT
{
  /* 0x0000 */ unsigned long OriginalOid;
  /* 0x0008 */ void* InformationBuffer;
  /* 0x0010 */ unsigned long InformationBufferLength;
  union
  {
    /* 0x0018 */ struct _NDIS_PM_WOL_PATTERN* WolPattern;
    /* 0x0018 */ struct _NDIS_PM_PACKET_PATTERN* PacketPattern;
    struct
    {
      /* 0x0018 */ unsigned long PatternToRemove;
      /* 0x001c */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} NDIS_WOL_XLATION_CONTEXT, *PNDIS_WOL_XLATION_CONTEXT; /* size: 0x0020 */

typedef struct _NDIS_WORK_ITEM
{
  /* 0x0000 */ void* Context;
  /* 0x0008 */ void* Routine /* function */;
  /* 0x0010 */ unsigned char WrapperReserved[64];
} NDIS_WORK_ITEM, *PNDIS_WORK_ITEM; /* size: 0x0050 */

typedef enum _NDIS_WORK_ITEM_TYPE
{
  NdisWorkItemRequest = 0,
  NdisWorkItemSend = 1,
  NdisWorkItemReturnPackets = 2,
  NdisWorkItemResetRequested = 3,
  NdisWorkItemResetInProgress = 4,
  NdisWorkItemReserved = 5,
  NdisWorkItemMiniportCallback = 6,
  NdisMaxWorkItems = 7,
} NDIS_WORK_ITEM_TYPE, *PNDIS_WORK_ITEM_TYPE;

typedef struct _NDIS_WRAPPER_CONFIGURATION_HANDLE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0008 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0018 */ struct _RTL_QUERY_REGISTRY_TABLE ParametersQueryTable[2];
} NDIS_WRAPPER_CONFIGURATION_HANDLE, *PNDIS_WRAPPER_CONFIGURATION_HANDLE; /* size: 0x0088 */

typedef struct _NDIS_WRAPPER_HANDLE
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0008 */ struct _UNICODE_STRING ServiceRegPath;
} NDIS_WRAPPER_HANDLE, *PNDIS_WRAPPER_HANDLE; /* size: 0x0018 */

typedef struct _NDIS_WWAN_AUTH_CHALLENGE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_AUTH_CHALLENGE AuthChallenge;
} NDIS_WWAN_AUTH_CHALLENGE, *PNDIS_WWAN_AUTH_CHALLENGE; /* size: 0x012c */

typedef struct _NDIS_WWAN_DEVICE_CAPS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_DEVICE_CAPS DeviceCaps;
} NDIS_WWAN_DEVICE_CAPS, *PNDIS_WWAN_DEVICE_CAPS; /* size: 0x0160 */

typedef struct _NDIS_WWAN_DRIVER_CAPS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_DRIVER_CAPS DriverCaps;
} NDIS_WWAN_DRIVER_CAPS, *PNDIS_WWAN_DRIVER_CAPS; /* size: 0x0010 */

typedef struct _NDIS_WWAN_HOME_PROVIDER
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_PROVIDER Provider;
} NDIS_WWAN_HOME_PROVIDER, *PNDIS_WWAN_HOME_PROVIDER; /* size: 0x004c */

typedef struct _NDIS_WWAN_PIN_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_PIN_LIST PinList;
} NDIS_WWAN_PIN_LIST, *PNDIS_WWAN_PIN_LIST; /* size: 0x00a8 */

typedef struct _NDIS_WWAN_PREFERRED_PROVIDERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_LIST_HEADER PreferredListHeader;
} NDIS_WWAN_PREFERRED_PROVIDERS, *PNDIS_WWAN_PREFERRED_PROVIDERS; /* size: 0x0010 */

typedef struct _NDIS_WWAN_READY_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_READY_INFO ReadyInfo;
} NDIS_WWAN_READY_INFO, *PNDIS_WWAN_READY_INFO; /* size: 0x0060 */

typedef struct _NDIS_WWAN_SERVICE_ACTIVATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SERVICE_ACTIVATION ServiceActivation;
} NDIS_WWAN_SERVICE_ACTIVATION, *PNDIS_WWAN_SERVICE_ACTIVATION; /* size: 0x0008 */

typedef struct _NDIS_WWAN_SET_CONTEXT_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_CONTEXT_STATE SetContextState;
} NDIS_WWAN_SET_CONTEXT_STATE, *PNDIS_WWAN_SET_CONTEXT_STATE; /* size: 0x04e4 */

typedef struct _NDIS_WWAN_SET_PACKET_SERVICE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _WWAN_PACKET_SERVICE_ACTION PacketServiceAction;
} NDIS_WWAN_SET_PACKET_SERVICE, *PNDIS_WWAN_SET_PACKET_SERVICE; /* size: 0x0008 */

typedef struct _NDIS_WWAN_SET_PROVISIONED_CONTEXT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_CONTEXT ProvisionedContext;
} NDIS_WWAN_SET_PROVISIONED_CONTEXT, *PNDIS_WWAN_SET_PROVISIONED_CONTEXT; /* size: 0x04f0 */

typedef struct _NDIS_WWAN_SET_REGISTER_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_REGISTER_STATE SetRegisterState;
} NDIS_WWAN_SET_REGISTER_STATE, *PNDIS_WWAN_SET_REGISTER_STATE; /* size: 0x001c */

typedef struct _NDIS_WWAN_SET_SIGNAL_INDICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_SIGNAL_INDICATION SignalIndication;
} NDIS_WWAN_SET_SIGNAL_INDICATION, *PNDIS_WWAN_SET_SIGNAL_INDICATION; /* size: 0x000c */

typedef struct _NDIS_WWAN_SET_SMS_CONFIGURATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_SMS_CONFIGURATION SetSmsConfiguration;
} NDIS_WWAN_SET_SMS_CONFIGURATION, *PNDIS_WWAN_SET_SMS_CONFIGURATION; /* size: 0x0018 */

typedef struct _NDIS_WWAN_SMS_DELETE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SMS_FILTER SmsFilter;
} NDIS_WWAN_SMS_DELETE, *PNDIS_WWAN_SMS_DELETE; /* size: 0x000c */

typedef struct _NDIS_WWAN_SMS_READ
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SMS_READ SmsRead;
} NDIS_WWAN_SMS_READ, *PNDIS_WWAN_SMS_READ; /* size: 0x0010 */

typedef struct _NDIS_WWAN_SMS_SEND
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SMS_SEND SmsSend;
} NDIS_WWAN_SMS_SEND, *PNDIS_WWAN_SMS_SEND; /* size: 0x0178 */

typedef struct _NDIS_WWAN_VISIBLE_PROVIDERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_LIST_HEADER VisibleListHeader;
} NDIS_WWAN_VISIBLE_PROVIDERS, *PNDIS_WWAN_VISIBLE_PROVIDERS; /* size: 0x0010 */

typedef enum _NDIS_XLATE_TYPE
{
  XlateSend = 0,
  XlateSendComplete = 1,
  XlateReceive = 2,
  XlateReturn = 3,
} NDIS_XLATE_TYPE, *PNDIS_XLATE_TYPE;

typedef struct _NDK_ADAPTER
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_ADAPTER_DISPATCH* Dispatch;
} NDK_ADAPTER, *PNDK_ADAPTER; /* size: 0x0030 */

typedef struct _NDK_ADAPTER_DISPATCH
{
  /* 0x0000 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkQueryAdapterInfo /* function */;
  /* 0x0010 */ void* NdkCreateCq /* function */;
  /* 0x0018 */ void* NdkCreatePd /* function */;
  /* 0x0020 */ void* NdkCreateSharedEndpoint /* function */;
  /* 0x0028 */ void* NdkCreateConnector /* function */;
  /* 0x0030 */ void* NdkCreateListener /* function */;
  /* 0x0038 */ void* NdkBuildLAM /* function */;
  /* 0x0040 */ void* NdkReleaseLAM /* function */;
} NDK_ADAPTER_DISPATCH, *PNDK_ADAPTER_DISPATCH; /* size: 0x0048 */

typedef struct _NDK_ADAPTER_INFO
{
  /* 0x0000 */ struct NDK_VERSION Version;
  /* 0x0004 */ unsigned int VendorId;
  /* 0x0008 */ unsigned int DeviceId;
  /* 0x0010 */ unsigned __int64 MaxRegistrationSize;
  /* 0x0018 */ unsigned __int64 MaxWindowSize;
  /* 0x0020 */ unsigned long FRMRPageCount;
  /* 0x0024 */ unsigned long MaxInitiatorRequestSge;
  /* 0x0028 */ unsigned long MaxReceiveRequestSge;
  /* 0x002c */ unsigned long MaxReadRequestSge;
  /* 0x0030 */ unsigned long MaxTransferLength;
  /* 0x0034 */ unsigned long MaxInlineDataSize;
  /* 0x0038 */ unsigned long MaxInboundReadLimit;
  /* 0x003c */ unsigned long MaxOutboundReadLimit;
  /* 0x0040 */ unsigned long MaxReceiveQueueDepth;
  /* 0x0044 */ unsigned long MaxInitiatorQueueDepth;
  /* 0x0048 */ unsigned long MaxSrqDepth;
  /* 0x004c */ unsigned long MaxCqDepth;
  /* 0x0050 */ unsigned long LargeRequestThreshold;
  /* 0x0054 */ unsigned long MaxCallerData;
  /* 0x0058 */ unsigned long MaxCalleeData;
  /* 0x005c */ unsigned long AdapterFlags;
} NDK_ADAPTER_INFO, *PNDK_ADAPTER_INFO; /* size: 0x0060 */

typedef struct _NDK_CONNECTOR
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_CONNECTOR_DISPATCH* Dispatch;
} NDK_CONNECTOR, *PNDK_CONNECTOR; /* size: 0x0030 */

typedef struct _NDK_CONNECTOR_DISPATCH
{
  /* 0x0000 */ void* NdkCloseConnector /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkConnect /* function */;
  /* 0x0018 */ void* NdkConnectWithSharedEndpoint /* function */;
  /* 0x0020 */ void* NdkCompleteConnect /* function */;
  /* 0x0028 */ void* NdkAccept /* function */;
  /* 0x0030 */ void* NdkReject /* function */;
  /* 0x0038 */ void* NdkGetConnectionData /* function */;
  /* 0x0040 */ void* NdkGetLocalAddress /* function */;
  /* 0x0048 */ void* NdkGetPeerAddress /* function */;
  /* 0x0050 */ void* NdkDisconnect /* function */;
} NDK_CONNECTOR_DISPATCH, *PNDK_CONNECTOR_DISPATCH; /* size: 0x0058 */

typedef struct _NDK_CQ
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_CQ_DISPATCH* Dispatch;
} NDK_CQ, *PNDK_CQ; /* size: 0x0030 */

typedef struct _NDK_CQ_DISPATCH
{
  /* 0x0000 */ void* NdkCloseCq /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkResizeCq /* function */;
  /* 0x0018 */ void* NdkArmCq /* function */;
  /* 0x0020 */ void* NdkGetCqResults /* function */;
  /* 0x0028 */ void* NdkControlCqInterruptModeration /* function */;
} NDK_CQ_DISPATCH, *PNDK_CQ_DISPATCH; /* size: 0x0030 */

typedef struct _NDK_EXTENSION_INTERFACE
{
  /* 0x0000 */ const void* Dispatch;
} NDK_EXTENSION_INTERFACE, *PNDK_EXTENSION_INTERFACE; /* size: 0x0008 */

typedef struct _NDK_LISTENER
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_LISTENER_DISPATCH* Dispatch;
} NDK_LISTENER, *PNDK_LISTENER; /* size: 0x0030 */

typedef struct _NDK_LISTENER_DISPATCH
{
  /* 0x0000 */ void* NdkCloseListener /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkListen /* function */;
  /* 0x0018 */ void* NdkGetLocalAddress /* function */;
  /* 0x0020 */ void* NdkControlConnectEvents /* function */;
} NDK_LISTENER_DISPATCH, *PNDK_LISTENER_DISPATCH; /* size: 0x0028 */

typedef struct _NDK_LOGICAL_ADDRESS_MAPPING
{
  /* 0x0000 */ void* AdapterContext;
  /* 0x0008 */ unsigned long AdapterPageCount;
  /* 0x0010 */ union _LARGE_INTEGER AdapterPageArray[1];
} NDK_LOGICAL_ADDRESS_MAPPING, *PNDK_LOGICAL_ADDRESS_MAPPING; /* size: 0x0018 */

typedef struct _NDK_MR
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_MR_DISPATCH* Dispatch;
} NDK_MR, *PNDK_MR; /* size: 0x0030 */

typedef struct _NDK_MR_DISPATCH
{
  /* 0x0000 */ void* NdkCloseMr /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkRegisterMr /* function */;
  /* 0x0018 */ void* NdkDeregisterMr /* function */;
  /* 0x0020 */ void* NdkInitializeFastRegisterMr /* function */;
  /* 0x0028 */ void* NdkGetRemoteTokenFromMr /* function */;
  /* 0x0030 */ void* NdkGetLocalTokenFromMr /* function */;
} NDK_MR_DISPATCH, *PNDK_MR_DISPATCH; /* size: 0x0038 */

typedef struct _NDK_MW
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_MW_DISPATCH* Dispatch;
} NDK_MW, *PNDK_MW; /* size: 0x0030 */

typedef struct _NDK_MW_DISPATCH
{
  /* 0x0000 */ void* NdkCloseMw /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkGetRemoteTokenFromMw /* function */;
} NDK_MW_DISPATCH, *PNDK_MW_DISPATCH; /* size: 0x0018 */

typedef struct _NDK_OBJECT_HEADER
{
  /* 0x0000 */ struct NDK_VERSION Version;
  /* 0x0004 */ enum _NDK_OBJECT_TYPE ObjectType;
  /* 0x0008 */ struct _NDK_OBJECT_HEADER_RESERVED_BLOCK NdkReserved;
} NDK_OBJECT_HEADER, *PNDK_OBJECT_HEADER; /* size: 0x0028 */

typedef struct _NDK_OBJECT_HEADER_RESERVED_BLOCK
{
  /* 0x0000 */ void* rf[4];
} NDK_OBJECT_HEADER_RESERVED_BLOCK, *PNDK_OBJECT_HEADER_RESERVED_BLOCK; /* size: 0x0020 */

typedef enum _NDK_OBJECT_TYPE
{
  NdkObjectTypeUndefined = 0,
  NdkObjectTypeAdapter = 1,
  NdkObjectTypeQp = 2,
  NdkObjectTypeCq = 3,
  NdkObjectTypeMr = 4,
  NdkObjectTypeMw = 5,
  NdkObjectTypePd = 6,
  NdkObjectTypeSharedEndpoint = 7,
  NdkObjectTypeConnector = 8,
  NdkObjectTypeListener = 9,
  NdkObjectTypeSrq = 10,
  NdkObjectTypeMax = 11,
} NDK_OBJECT_TYPE, *PNDK_OBJECT_TYPE;

typedef struct _NDK_PD
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_PD_DISPATCH* Dispatch;
} NDK_PD, *PNDK_PD; /* size: 0x0030 */

typedef struct _NDK_PD_DISPATCH
{
  /* 0x0000 */ void* NdkClosePd /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkCreateMr /* function */;
  /* 0x0018 */ void* NdkCreateMw /* function */;
  /* 0x0020 */ void* NdkCreateSrq /* function */;
  /* 0x0028 */ void* NdkCreateQp /* function */;
  /* 0x0030 */ void* NdkCreateQpWithSrq /* function */;
  /* 0x0038 */ void* NdkGetPrivilegedMemoryRegionToken /* function */;
} NDK_PD_DISPATCH, *PNDK_PD_DISPATCH; /* size: 0x0040 */

typedef struct _NDK_QP
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_QP_DISPATCH* Dispatch;
} NDK_QP, *PNDK_QP; /* size: 0x0030 */

typedef struct _NDK_QP_DISPATCH
{
  /* 0x0000 */ void* NdkCloseQp /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkFlush /* function */;
  /* 0x0018 */ void* NdkSend /* function */;
  /* 0x0020 */ void* NdkReceive /* function */;
  /* 0x0028 */ void* NdkBind /* function */;
  /* 0x0030 */ void* NdkFastRegister /* function */;
  /* 0x0038 */ void* NdkInvalidate /* function */;
  /* 0x0040 */ void* NdkRead /* function */;
  /* 0x0048 */ void* NdkWrite /* function */;
} NDK_QP_DISPATCH, *PNDK_QP_DISPATCH; /* size: 0x0050 */

typedef struct _NDK_RESULT
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned long BytesTransferred;
  /* 0x0008 */ void* QPContext;
  /* 0x0010 */ void* RequestContext;
} NDK_RESULT, *PNDK_RESULT; /* size: 0x0018 */

typedef struct _NDK_SGE
{
  union
  {
    /* 0x0000 */ void* VirtualAddress;
    /* 0x0000 */ union _LARGE_INTEGER LogicalAddress;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned int MemoryRegionToken;
} NDK_SGE, *PNDK_SGE; /* size: 0x0010 */

typedef struct _NDK_SHARED_ENDPOINT
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_SHARED_ENDPOINT_DISPATCH* Dispatch;
} NDK_SHARED_ENDPOINT, *PNDK_SHARED_ENDPOINT; /* size: 0x0030 */

typedef struct _NDK_SHARED_ENDPOINT_DISPATCH
{
  /* 0x0000 */ void* NdkCloseSharedEndpoint /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkGetLocalAddress /* function */;
} NDK_SHARED_ENDPOINT_DISPATCH, *PNDK_SHARED_ENDPOINT_DISPATCH; /* size: 0x0018 */

typedef struct _NDK_SRQ
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0028 */ const struct _NDK_SRQ_DISPATCH* Dispatch;
} NDK_SRQ, *PNDK_SRQ; /* size: 0x0030 */

typedef struct _NDK_SRQ_DISPATCH
{
  /* 0x0000 */ void* NdkCloseSrq /* function */;
  /* 0x0008 */ void* NdkQueryExtension /* function */;
  /* 0x0010 */ void* NdkModifySrq /* function */;
  /* 0x0018 */ void* NdkSrqReceive /* function */;
} NDK_SRQ_DISPATCH, *PNDK_SRQ_DISPATCH; /* size: 0x0020 */

typedef struct _NEIGHBOR_OFFLOAD_STATE_CACHED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned char DlDestinationAddress[32];
  /* 0x0028 */ unsigned long HostReachabilityDelta;
} NEIGHBOR_OFFLOAD_STATE_CACHED, *PNEIGHBOR_OFFLOAD_STATE_CACHED; /* size: 0x002c */

typedef struct _NEIGHBOR_OFFLOAD_STATE_CONST
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned char DlSourceAddress[32];
  /* 0x0028 */ unsigned long VlanId : 12; /* bit position: 0 */
} NEIGHBOR_OFFLOAD_STATE_CONST, *PNEIGHBOR_OFFLOAD_STATE_CONST; /* size: 0x002c */

typedef struct _NEIGHBOR_OFFLOAD_STATE_DELEGATED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned long NicReachabilityDelta;
} NEIGHBOR_OFFLOAD_STATE_DELEGATED, *PNEIGHBOR_OFFLOAD_STATE_DELEGATED; /* size: 0x000c */

typedef struct _NETIO_NET_BUFFER_CONTEXT
{
  /* 0x0000 */ unsigned long OriginalDataOffset;
  /* 0x0004 */ unsigned long OriginalDataLength;
  /* 0x0008 */ unsigned long TruncatedLength;
  union
  {
    /* 0x000c */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long EcnField : 2; /* bit position: 0 */
      /* 0x000c */ unsigned long EspTrailerSpaceAllocated : 1; /* bit position: 2 */
      /* 0x000c */ unsigned long Converted : 1; /* bit position: 3 */
      /* 0x000c */ unsigned long Restored : 1; /* bit position: 4 */
      /* 0x000c */ unsigned long EcnForceNotEct : 1; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0010 */ void* Scratch[2];
} NETIO_NET_BUFFER_CONTEXT, *PNETIO_NET_BUFFER_CONTEXT; /* size: 0x0020 */

typedef struct _NETIO_NET_BUFFER_LIST_CONTEXT
{
  /* 0x0000 */ long ReferenceCount;
  /* 0x0008 */ struct _NET_BUFFER_LIST* Parent;
  /* 0x0010 */ void* CompletionRoutine /* function */;
  /* 0x0018 */ void* CompletionContext;
} NETIO_NET_BUFFER_LIST_CONTEXT, *PNETIO_NET_BUFFER_LIST_CONTEXT; /* size: 0x0020 */

typedef struct _NET_BUFFER
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _NET_BUFFER* Next;
      /* 0x0008 */ struct _MDL* CurrentMdl;
      /* 0x0010 */ unsigned long CurrentMdlOffset;
      union
      {
        /* 0x0018 */ unsigned long DataLength;
        struct
        {
          /* 0x0018 */ unsigned __int64 stDataLength;
          /* 0x0020 */ struct _MDL* MdlChain;
          /* 0x0028 */ unsigned long DataOffset;
        }; /* size: 0x0014 */
      }; /* size: 0x0014 */
    }; /* size: 0x0028 */
    /* 0x0000 */ union _SLIST_HEADER Link;
  }; /* size: 0x0028 */
  /* 0x0030 */ unsigned short ChecksumBias;
  /* 0x0032 */ unsigned short Reserved;
  /* 0x0038 */ void* NdisPoolHandle;
  /* 0x0040 */ void* NdisReserved[2];
  /* 0x0050 */ void* ProtocolReserved[6];
  /* 0x0080 */ void* MiniportReserved[4];
  /* 0x00a0 */ union _LARGE_INTEGER DataPhysicalAddress;
  union
  {
    /* 0x00a8 */ struct _NET_BUFFER_SHARED_MEMORY* SharedMemoryInfo;
    /* 0x00a8 */ struct _SCATTER_GATHER_LIST* ScatterGatherList;
  }; /* size: 0x0008 */
} NET_BUFFER, *PNET_BUFFER; /* size: 0x00b0 */

typedef struct _NET_BUFFER_DATA
{
  /* 0x0000 */ struct _NET_BUFFER* Next;
  /* 0x0008 */ struct _MDL* CurrentMdl;
  /* 0x0010 */ unsigned long CurrentMdlOffset;
  union
  {
    /* 0x0018 */ unsigned long DataLength;
    /* 0x0018 */ unsigned __int64 stDataLength;
  }; /* size: 0x0008 */
  /* 0x0020 */ struct _MDL* MdlChain;
  /* 0x0028 */ unsigned long DataOffset;
  /* 0x002c */ long __PADDING__[1];
} NET_BUFFER_DATA, *PNET_BUFFER_DATA; /* size: 0x0030 */

typedef union _NET_BUFFER_DATA_LENGTH
{
  union
  {
    /* 0x0000 */ unsigned long DataLength;
    /* 0x0000 */ unsigned __int64 stDataLength;
  }; /* size: 0x0008 */
} NET_BUFFER_DATA_LENGTH, *PNET_BUFFER_DATA_LENGTH; /* size: 0x0008 */

typedef union _NET_BUFFER_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _NET_BUFFER* Next;
      /* 0x0008 */ struct _MDL* CurrentMdl;
      /* 0x0010 */ unsigned long CurrentMdlOffset;
      union
      {
        /* 0x0018 */ unsigned long DataLength;
        struct
        {
          /* 0x0018 */ unsigned __int64 stDataLength;
          /* 0x0020 */ struct _MDL* MdlChain;
          /* 0x0028 */ unsigned long DataOffset;
        }; /* size: 0x0014 */
      }; /* size: 0x0014 */
    }; /* size: 0x0028 */
    /* 0x0000 */ union _SLIST_HEADER Link;
  }; /* size: 0x0028 */
} NET_BUFFER_HEADER, *PNET_BUFFER_HEADER; /* size: 0x0030 */

typedef struct _NET_BUFFER_LIST
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _NET_BUFFER_LIST* Next;
      /* 0x0008 */ struct _NET_BUFFER* FirstNetBuffer;
    }; /* size: 0x0010 */
    /* 0x0000 */ union _SLIST_HEADER Link;
  }; /* size: 0x0010 */
  /* 0x0010 */ struct _NET_BUFFER_LIST_CONTEXT* Context;
  /* 0x0018 */ struct _NET_BUFFER_LIST* ParentNetBufferList;
  /* 0x0020 */ void* NdisPoolHandle;
  /* 0x0030 */ void* NdisReserved[2];
  /* 0x0040 */ void* ProtocolReserved[4];
  /* 0x0060 */ void* MiniportReserved[2];
  /* 0x0070 */ void* Scratch;
  /* 0x0078 */ void* SourceHandle;
  /* 0x0080 */ unsigned long NblFlags;
  /* 0x0084 */ long ChildRefCount;
  /* 0x0088 */ unsigned long Flags;
  union
  {
    /* 0x008c */ int Status;
    /* 0x008c */ unsigned long NdisReserved2;
  }; /* size: 0x0004 */
  /* 0x0090 */ void* NetBufferListInfo[26];
} NET_BUFFER_LIST, *PNET_BUFFER_LIST; /* size: 0x0160 */

typedef struct _NET_BUFFER_LIST_CONTEXT
{
  /* 0x0000 */ struct _NET_BUFFER_LIST_CONTEXT* Next;
  /* 0x0008 */ unsigned short Size;
  /* 0x000a */ unsigned short Offset;
  /* 0x0010 */ unsigned char* ContextData /* zero-length array */;
} NET_BUFFER_LIST_CONTEXT, *PNET_BUFFER_LIST_CONTEXT; /* size: 0x0010 */

typedef struct _NET_BUFFER_LIST_DATA
{
  /* 0x0000 */ struct _NET_BUFFER_LIST* Next;
  /* 0x0008 */ struct _NET_BUFFER* FirstNetBuffer;
} NET_BUFFER_LIST_DATA, *PNET_BUFFER_LIST_DATA; /* size: 0x0010 */

typedef union _NET_BUFFER_LIST_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _NET_BUFFER_LIST* Next;
      /* 0x0008 */ struct _NET_BUFFER* FirstNetBuffer;
    }; /* size: 0x0010 */
    /* 0x0000 */ union _SLIST_HEADER Link;
  }; /* size: 0x0010 */
} NET_BUFFER_LIST_HEADER, *PNET_BUFFER_LIST_HEADER; /* size: 0x0010 */

typedef struct _NET_BUFFER_LIST_POOL_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char ProtocolId;
  /* 0x0005 */ unsigned char fAllocateNetBuffer;
  /* 0x0006 */ unsigned short ContextSize;
  /* 0x0008 */ unsigned long PoolTag;
  /* 0x000c */ unsigned long DataSize;
} NET_BUFFER_LIST_POOL_PARAMETERS, *PNET_BUFFER_LIST_POOL_PARAMETERS; /* size: 0x0010 */

typedef struct _NET_BUFFER_POOL_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PoolTag;
  /* 0x0008 */ unsigned long DataSize;
} NET_BUFFER_POOL_PARAMETERS, *PNET_BUFFER_POOL_PARAMETERS; /* size: 0x000c */

typedef struct _NET_BUFFER_SHARED_MEMORY
{
  /* 0x0000 */ struct _NET_BUFFER_SHARED_MEMORY* NextSharedMemorySegment;
  /* 0x0008 */ unsigned long SharedMemoryFlags;
  /* 0x0010 */ void* SharedMemoryHandle;
  /* 0x0018 */ unsigned long SharedMemoryOffset;
  /* 0x001c */ unsigned long SharedMemoryLength;
} NET_BUFFER_SHARED_MEMORY, *PNET_BUFFER_SHARED_MEMORY; /* size: 0x0020 */

typedef struct _NET_DEVICE_PNP_EVENT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PortNumber;
  /* 0x0008 */ enum _NDIS_DEVICE_PNP_EVENT DevicePnPEvent;
  /* 0x0010 */ void* InformationBuffer;
  /* 0x0018 */ unsigned long InformationBufferLength;
  /* 0x001c */ unsigned char NdisReserved[16];
  /* 0x002c */ long __PADDING__[1];
} NET_DEVICE_PNP_EVENT, *PNET_DEVICE_PNP_EVENT; /* size: 0x0030 */

typedef enum _NET_DEVICE_POWER_STATE
{
  NetDeviceStateUnspecified = 0,
  NetDeviceStateD0 = 1,
  NetDeviceStateD1 = 2,
  NetDeviceStateD2 = 3,
  NetDeviceStateD3 = 4,
  NetDeviceStateMaximum = 5,
} NET_DEVICE_POWER_STATE, *PNET_DEVICE_POWER_STATE;

typedef enum _NET_IF_ACCESS_TYPE
{
  NET_IF_ACCESS_LOOPBACK = 1,
  NET_IF_ACCESS_BROADCAST = 2,
  NET_IF_ACCESS_POINT_TO_POINT = 3,
  NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
  NET_IF_ACCESS_MAXIMUM = 5,
} NET_IF_ACCESS_TYPE, *PNET_IF_ACCESS_TYPE;

typedef enum _NET_IF_ADMIN_STATUS
{
  NET_IF_ADMIN_STATUS_UP = 1,
  NET_IF_ADMIN_STATUS_DOWN = 2,
  NET_IF_ADMIN_STATUS_TESTING = 3,
} NET_IF_ADMIN_STATUS, *PNET_IF_ADMIN_STATUS;

typedef enum _NET_IF_CONNECTION_TYPE
{
  NET_IF_CONNECTION_DEDICATED = 1,
  NET_IF_CONNECTION_PASSIVE = 2,
  NET_IF_CONNECTION_DEMAND = 3,
  NET_IF_CONNECTION_MAXIMUM = 4,
} NET_IF_CONNECTION_TYPE, *PNET_IF_CONNECTION_TYPE;

typedef enum _NET_IF_DIRECTION_TYPE
{
  NET_IF_DIRECTION_SENDRECEIVE = 0,
  NET_IF_DIRECTION_SENDONLY = 1,
  NET_IF_DIRECTION_RECEIVEONLY = 2,
  NET_IF_DIRECTION_MAXIMUM = 3,
} NET_IF_DIRECTION_TYPE, *PNET_IF_DIRECTION_TYPE;

typedef struct _NET_IF_INFORMATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _NET_PHYSICAL_LOCATION_LH PhysicalLocation;
  /* 0x0014 */ unsigned long WanTunnelType;
  /* 0x0018 */ unsigned long PortNumber;
  /* 0x001c */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x0020 */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x0024 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x0028 */ unsigned char ifConnectorPresent;
  /* 0x002a */ unsigned short PhysAddressLength;
  /* 0x002c */ unsigned short PhysAddressOffset;
  /* 0x002e */ unsigned short PermanentPhysAddressOffset;
  /* 0x0030 */ unsigned short FriendlyNameLength;
  /* 0x0032 */ unsigned short FriendlyNameOffset;
  /* 0x0034 */ struct _GUID InterfaceGuid;
  /* 0x0044 */ struct _GUID NetworkGuid;
  /* 0x0054 */ unsigned long SupportedStatistics;
  /* 0x0058 */ enum _NDIS_MEDIUM MediaType;
  /* 0x005c */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
} NET_IF_INFORMATION, *PNET_IF_INFORMATION; /* size: 0x0060 */

typedef enum _NET_IF_MEDIA_CONNECT_STATE
{
  MediaConnectStateUnknown = 0,
  MediaConnectStateConnected = 1,
  MediaConnectStateDisconnected = 2,
} NET_IF_MEDIA_CONNECT_STATE, *PNET_IF_MEDIA_CONNECT_STATE;

typedef enum _NET_IF_MEDIA_DUPLEX_STATE
{
  MediaDuplexStateUnknown = 0,
  MediaDuplexStateHalf = 1,
  MediaDuplexStateFull = 2,
} NET_IF_MEDIA_DUPLEX_STATE, *PNET_IF_MEDIA_DUPLEX_STATE;

typedef enum _NET_IF_OPER_STATUS
{
  NET_IF_OPER_STATUS_UP = 1,
  NET_IF_OPER_STATUS_DOWN = 2,
  NET_IF_OPER_STATUS_TESTING = 3,
  NET_IF_OPER_STATUS_UNKNOWN = 4,
  NET_IF_OPER_STATUS_DORMANT = 5,
  NET_IF_OPER_STATUS_NOT_PRESENT = 6,
  NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7,
} NET_IF_OPER_STATUS, *PNET_IF_OPER_STATUS;

typedef enum _NET_IF_RCV_ADDRESS_TYPE
{
  NET_IF_RCV_ADDRESS_TYPE_OTHER = 1,
  NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2,
  NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3,
} NET_IF_RCV_ADDRESS_TYPE, *PNET_IF_RCV_ADDRESS_TYPE;

typedef union _NET_LUID_LH
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Reserved : 24; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 NetLuidIndex : 24; /* bit position: 24 */
        /* 0x0000 */ unsigned __int64 IfType : 16; /* bit position: 48 */
      }; /* bitfield */
    } /* size: 0x0008 */ Info;
  }; /* size: 0x0008 */
} NET_LUID_LH, *PNET_LUID_LH; /* size: 0x0008 */

typedef struct _NET_PHYSICAL_LOCATION_LH
{
  /* 0x0000 */ unsigned long BusNumber;
  /* 0x0004 */ unsigned long SlotNumber;
  /* 0x0008 */ unsigned long FunctionNumber;
} NET_PHYSICAL_LOCATION_LH, *PNET_PHYSICAL_LOCATION_LH; /* size: 0x000c */

typedef struct _NET_PNP_EVENT
{
  /* 0x0000 */ enum _NET_PNP_EVENT_CODE NetEvent;
  /* 0x0008 */ void* Buffer;
  /* 0x0010 */ unsigned long BufferLength;
  /* 0x0018 */ unsigned __int64 NdisReserved[4];
  /* 0x0038 */ unsigned __int64 TransportReserved[4];
  /* 0x0058 */ unsigned __int64 TdiReserved[4];
  /* 0x0078 */ unsigned __int64 TdiClientReserved[4];
} NET_PNP_EVENT, *PNET_PNP_EVENT; /* size: 0x0098 */

typedef enum _NET_PNP_EVENT_CODE
{
  NetEventSetPower = 0,
  NetEventQueryPower = 1,
  NetEventQueryRemoveDevice = 2,
  NetEventCancelRemoveDevice = 3,
  NetEventReconfigure = 4,
  NetEventBindList = 5,
  NetEventBindsComplete = 6,
  NetEventPnPCapabilities = 7,
  NetEventPause = 8,
  NetEventRestart = 9,
  NetEventPortActivation = 10,
  NetEventPortDeactivation = 11,
  NetEventIMReEnableDevice = 12,
  NetEventNDKEnable = 13,
  NetEventNDKDisable = 14,
  NetEventFilterPreDetach = 15,
  NetEventBindFailed = 16,
  NetEventSwitchActivate = 17,
  NetEventMaximum = 18,
} NET_PNP_EVENT_CODE, *PNET_PNP_EVENT_CODE;

typedef struct _NET_PNP_EVENT_NOTIFICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PortNumber;
  /* 0x0008 */ struct _NET_PNP_EVENT NetPnPEvent;
  /* 0x00a0 */ unsigned long Flags;
  /* 0x00a4 */ long __PADDING__[1];
} NET_PNP_EVENT_NOTIFICATION, *PNET_PNP_EVENT_NOTIFICATION; /* size: 0x00a8 */

typedef enum _NL_ECN_CODEPOINT
{
  NlEcnCodepointNotEct = 0,
  NlEcnCodepointEct1 = 1,
  NlEcnCodepointEct0 = 2,
  NlEcnCodepointCe = 3,
} NL_ECN_CODEPOINT, *PNL_ECN_CODEPOINT;

typedef struct _NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _NPI_MODULEID
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0004 */ enum _NPI_MODULEID_TYPE Type;
  union
  {
    /* 0x0008 */ struct _GUID Guid;
    struct
    {
      /* 0x0008 */ struct _LUID IfLuid;
      /* 0x0010 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} NPI_MODULEID, *PNPI_MODULEID; /* size: 0x0018 */

typedef enum _NPI_MODULEID_TYPE
{
  MIT_GUID = 1,
  MIT_IF_LUID = 2,
} NPI_MODULEID_TYPE, *PNPI_MODULEID_TYPE;

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0008 */ void* StackBase;
  /* 0x0010 */ void* StackLimit;
  /* 0x0018 */ void* SubSystemTib;
  union
  {
    /* 0x0020 */ void* FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* ArbitraryUserPointer;
  /* 0x0030 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x0038 */

typedef struct _OBJECT_DUMP_CONTROL
{
  /* 0x0000 */ void* Stream;
  /* 0x0008 */ unsigned long Detail;
  /* 0x000c */ long __PADDING__[1];
} OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL; /* size: 0x0010 */

typedef struct _OBJECT_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long HandleAttributes;
  /* 0x0004 */ unsigned long GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION; /* size: 0x0008 */

typedef struct _OBJECT_NAME_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION; /* size: 0x0010 */

typedef struct _OBJECT_TYPE
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0010 */ struct _UNICODE_STRING Name;
  /* 0x0020 */ void* DefaultObject;
  /* 0x0028 */ unsigned char Index;
  /* 0x002c */ unsigned long TotalNumberOfObjects;
  /* 0x0030 */ unsigned long TotalNumberOfHandles;
  /* 0x0034 */ unsigned long HighWaterNumberOfObjects;
  /* 0x0038 */ unsigned long HighWaterNumberOfHandles;
  /* 0x0040 */ struct _OBJECT_TYPE_INITIALIZER TypeInfo;
  /* 0x00b8 */ struct _EX_PUSH_LOCK TypeLock;
  /* 0x00c0 */ unsigned long Key;
  /* 0x00c8 */ struct _LIST_ENTRY CallbackList;
} OBJECT_TYPE, *POBJECT_TYPE; /* size: 0x00d8 */

typedef struct _OBJECT_TYPE_INITIALIZER
{
  /* 0x0000 */ unsigned short Length;
  union
  {
    /* 0x0002 */ unsigned char ObjectTypeFlags;
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned char CaseInsensitive : 1; /* bit position: 0 */
      /* 0x0002 */ unsigned char UnnamedObjectsOnly : 1; /* bit position: 1 */
      /* 0x0002 */ unsigned char UseDefaultObject : 1; /* bit position: 2 */
      /* 0x0002 */ unsigned char SecurityRequired : 1; /* bit position: 3 */
      /* 0x0002 */ unsigned char MaintainHandleCount : 1; /* bit position: 4 */
      /* 0x0002 */ unsigned char MaintainTypeList : 1; /* bit position: 5 */
      /* 0x0002 */ unsigned char SupportsObjectCallbacks : 1; /* bit position: 6 */
      /* 0x0002 */ unsigned char CacheAligned : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ unsigned long ObjectTypeCode;
  /* 0x0008 */ unsigned long InvalidAttributes;
  /* 0x000c */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x001c */ unsigned long ValidAccessMask;
  /* 0x0020 */ unsigned long RetainAccess;
  /* 0x0024 */ enum _POOL_TYPE PoolType;
  /* 0x0028 */ unsigned long DefaultPagedPoolCharge;
  /* 0x002c */ unsigned long DefaultNonPagedPoolCharge;
  /* 0x0030 */ void* DumpProcedure /* function */;
  /* 0x0038 */ void* OpenProcedure /* function */;
  /* 0x0040 */ void* CloseProcedure /* function */;
  /* 0x0048 */ void* DeleteProcedure /* function */;
  /* 0x0050 */ void* ParseProcedure /* function */;
  /* 0x0058 */ void* SecurityProcedure /* function */;
  /* 0x0060 */ void* QueryNameProcedure /* function */;
  /* 0x0068 */ void* OkayToCloseProcedure /* function */;
  /* 0x0070 */ unsigned long WaitObjectFlagMask;
  /* 0x0074 */ unsigned short WaitObjectFlagOffset;
  /* 0x0076 */ unsigned short WaitObjectPointerOffset;
} OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER; /* size: 0x0078 */

typedef enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
} OB_OPEN_REASON, *POB_OPEN_REASON;

typedef struct _OFFLOAD_STATE_HEADER
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long RecognizedOptions;
} OFFLOAD_STATE_HEADER, *POFFLOAD_STATE_HEADER; /* size: 0x0008 */

typedef struct _OID_LIST
{
  /* 0x0000 */ unsigned long StatsOidCount;
  /* 0x0004 */ unsigned long FullOidCount;
  /* 0x0008 */ unsigned long* StatsOidArray;
  /* 0x0010 */ unsigned long* FullOidArray;
} OID_LIST, *POID_LIST; /* size: 0x0018 */

typedef struct _OWNER_ENTRY
{
  /* 0x0000 */ unsigned __int64 OwnerThread;
  union
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long IoPriorityBoosted : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned long OwnerReferenced : 1; /* bit position: 1 */
      /* 0x0008 */ unsigned long OwnerCount : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0008 */ unsigned long TableSize;
  }; /* size: 0x0004 */
  /* 0x000c */ long __PADDING__[1];
} OWNER_ENTRY, *POWNER_ENTRY; /* size: 0x0010 */

typedef struct _PAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _PATH_OFFLOAD_STATE_CACHED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned long PathMtu;
} PATH_OFFLOAD_STATE_CACHED, *PPATH_OFFLOAD_STATE_CACHED; /* size: 0x000c */

typedef struct _PATH_OFFLOAD_STATE_CONST
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ const unsigned char* SourceAddress;
  /* 0x0010 */ const unsigned char* DestinationAddress;
} PATH_OFFLOAD_STATE_CONST, *PPATH_OFFLOAD_STATE_CONST; /* size: 0x0018 */

typedef struct _PATH_OFFLOAD_STATE_DELEGATED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
} PATH_OFFLOAD_STATE_DELEGATED, *PPATH_OFFLOAD_STATE_DELEGATED; /* size: 0x0008 */

typedef struct _PCI_CAPABILITIES_HEADER
{
  /* 0x0000 */ unsigned char CapabilityID;
  /* 0x0001 */ unsigned char Next;
} PCI_CAPABILITIES_HEADER, *PPCI_CAPABILITIES_HEADER; /* size: 0x0002 */

typedef struct _PCI_MSI_MESSAGE_ADDRESS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Reserved : 2; /* bit position: 0 */
    /* 0x0000 */ unsigned long Address : 30; /* bit position: 2 */
  }; /* bitfield */
} PCI_MSI_MESSAGE_ADDRESS, *PPCI_MSI_MESSAGE_ADDRESS; /* size: 0x0004 */

typedef struct _PCI_MSI_MESSAGE_CONTROL
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short MSIEnable : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned short MultipleMessageCapable : 3; /* bit position: 1 */
    /* 0x0000 */ unsigned short MultipleMessageEnable : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned short CapableOf64Bits : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned short PerVectorMaskCapable : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned short Reserved : 7; /* bit position: 9 */
  }; /* bitfield */
} PCI_MSI_MESSAGE_CONTROL, *PPCI_MSI_MESSAGE_CONTROL; /* size: 0x0002 */

struct _PCW_BUFFER;

typedef union _PCW_CALLBACK_INFORMATION
{
  union
  {
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION AddCounter;
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION RemoveCounter;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION EnumerateInstances;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION CollectData;
  }; /* size: 0x0028 */
} PCW_CALLBACK_INFORMATION, *PPCW_CALLBACK_INFORMATION; /* size: 0x0028 */

typedef enum _PCW_CALLBACK_TYPE
{
  PcwCallbackAddCounter = 0,
  PcwCallbackRemoveCounter = 1,
  PcwCallbackEnumerateInstances = 2,
  PcwCallbackCollectData = 3,
} PCW_CALLBACK_TYPE, *PPCW_CALLBACK_TYPE;

typedef struct _PCW_COUNTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned short StructIndex;
  /* 0x0004 */ unsigned short Offset;
  /* 0x0006 */ unsigned short Size;
} PCW_COUNTER_DESCRIPTOR, *PPCW_COUNTER_DESCRIPTOR; /* size: 0x0008 */

typedef struct _PCW_COUNTER_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
} PCW_COUNTER_INFORMATION, *PPCW_COUNTER_INFORMATION; /* size: 0x0010 */

typedef struct _PCW_DATA
{
  /* 0x0000 */ const void* Data;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ long __PADDING__[1];
} PCW_DATA, *PPCW_DATA; /* size: 0x0010 */

struct _PCW_INSTANCE;

typedef struct _PCW_MASK_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
  /* 0x0010 */ unsigned long InstanceId;
  /* 0x0014 */ unsigned char CollectMultiple;
  /* 0x0018 */ struct _PCW_BUFFER* Buffer;
  /* 0x0020 */ struct _KEVENT* CancelEvent;
} PCW_MASK_INFORMATION, *PPCW_MASK_INFORMATION; /* size: 0x0028 */

struct _PCW_REGISTRATION;

typedef struct _PCW_REGISTRATION_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0008 */ const struct _UNICODE_STRING* Name;
  /* 0x0010 */ unsigned long CounterCount;
  /* 0x0018 */ struct _PCW_COUNTER_DESCRIPTOR* Counters;
  /* 0x0020 */ void* Callback /* function */;
  /* 0x0028 */ void* CallbackContext;
} PCW_REGISTRATION_INFORMATION, *PPCW_REGISTRATION_INFORMATION; /* size: 0x0030 */

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsLegacyProcess : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char SpareBits : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0008 */ void* Mutant;
  /* 0x0010 */ void* ImageBaseAddress;
  /* 0x0018 */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0020 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0028 */ void* SubSystemData;
  /* 0x0030 */ void* ProcessHeap;
  /* 0x0038 */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0040 */ void* AtlThunkSListPtr;
  /* 0x0048 */ void* IFEOKey;
  union
  {
    /* 0x0050 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0050 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0050 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0050 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0050 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0050 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0050 */ unsigned long ReservedBits0 : 27; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0058 */ void* KernelCallbackTable;
    /* 0x0058 */ void* UserSharedInfoPtr;
  }; /* size: 0x0008 */
  /* 0x0060 */ unsigned long SystemReserved[1];
  /* 0x0064 */ unsigned long AtlThunkSListPtr32;
  /* 0x0068 */ void* ApiSetMap;
  /* 0x0070 */ unsigned long TlsExpansionCounter;
  /* 0x0078 */ void* TlsBitmap;
  /* 0x0080 */ unsigned long TlsBitmapBits[2];
  /* 0x0088 */ void* ReadOnlySharedMemoryBase;
  /* 0x0090 */ void* HotpatchInformation;
  /* 0x0098 */ void** ReadOnlyStaticServerData;
  /* 0x00a0 */ void* AnsiCodePageData;
  /* 0x00a8 */ void* OemCodePageData;
  /* 0x00b0 */ void* UnicodeCaseTableData;
  /* 0x00b8 */ unsigned long NumberOfProcessors;
  /* 0x00bc */ unsigned long NtGlobalFlag;
  /* 0x00c0 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x00c8 */ unsigned __int64 HeapSegmentReserve;
  /* 0x00d0 */ unsigned __int64 HeapSegmentCommit;
  /* 0x00d8 */ unsigned __int64 HeapDeCommitTotalFreeThreshold;
  /* 0x00e0 */ unsigned __int64 HeapDeCommitFreeBlockThreshold;
  /* 0x00e8 */ unsigned long NumberOfHeaps;
  /* 0x00ec */ unsigned long MaximumNumberOfHeaps;
  /* 0x00f0 */ void** ProcessHeaps;
  /* 0x00f8 */ void* GdiSharedHandleTable;
  /* 0x0100 */ void* ProcessStarterHelper;
  /* 0x0108 */ unsigned long GdiDCAttributeList;
  /* 0x0110 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x0118 */ unsigned long OSMajorVersion;
  /* 0x011c */ unsigned long OSMinorVersion;
  /* 0x0120 */ unsigned short OSBuildNumber;
  /* 0x0122 */ unsigned short OSCSDVersion;
  /* 0x0124 */ unsigned long OSPlatformId;
  /* 0x0128 */ unsigned long ImageSubsystem;
  /* 0x012c */ unsigned long ImageSubsystemMajorVersion;
  /* 0x0130 */ unsigned long ImageSubsystemMinorVersion;
  /* 0x0138 */ unsigned __int64 ActiveProcessAffinityMask;
  /* 0x0140 */ unsigned long GdiHandleBuffer[60];
  /* 0x0230 */ void* PostProcessInitRoutine /* function */;
  /* 0x0238 */ void* TlsExpansionBitmap;
  /* 0x0240 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x02c0 */ unsigned long SessionId;
  /* 0x02c8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x02d0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x02d8 */ void* pShimData;
  /* 0x02e0 */ void* AppCompatInfo;
  /* 0x02e8 */ struct _UNICODE_STRING CSDVersion;
  /* 0x02f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x0300 */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0308 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0310 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0318 */ unsigned __int64 MinimumStackCommit;
  /* 0x0320 */ struct _FLS_CALLBACK_INFO* FlsCallback;
  /* 0x0328 */ struct _LIST_ENTRY FlsListHead;
  /* 0x0338 */ void* FlsBitmap;
  /* 0x0340 */ unsigned long FlsBitmapBits[4];
  /* 0x0350 */ unsigned long FlsHighIndex;
  /* 0x0358 */ void* WerRegistrationData;
  /* 0x0360 */ void* WerShipAssertPtr;
  /* 0x0368 */ void* pUnused;
  /* 0x0370 */ void* pImageHeaderHash;
  union
  {
    /* 0x0378 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0378 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0378 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0378 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0378 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0380 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
} PEB, *PPEB; /* size: 0x0388 */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0008 */ void* SsHandle;
  /* 0x0010 */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0020 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x0030 */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0040 */ void* EntryInProgress;
  /* 0x0048 */ unsigned char ShutdownInProgress;
  /* 0x0050 */ void* ShutdownThreadId;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0058 */

typedef struct _PENDING_STACK_EXPANSION_FALLBACK_WORK
{
  /* 0x0000 */ unsigned char IssueOidRequest;
  /* 0x0001 */ unsigned char CompleteOidRequest;
  /* 0x0008 */ struct _NDIS_OID_REQUEST* DirectOidRequestsToComplete;
  /* 0x0010 */ struct _NDIS_STATUS_INDICATION* StatusIndications;
  /* 0x0018 */ struct _NET_PNP_EVENT_NOTIFICATION* NetPnPEvents;
  /* 0x0020 */ struct _NET_DEVICE_PNP_EVENT* DevicePnPEvents;
  /* 0x0028 */ struct _NET_BUFFER_LIST* SentNblsToComplete;
  /* 0x0030 */ struct _NET_BUFFER_LIST* ReceivedNblsToComplete;
} PENDING_STACK_EXPANSION_FALLBACK_WORK, *PPENDING_STACK_EXPANSION_FALLBACK_WORK; /* size: 0x0038 */

typedef struct _PERFINFO_GROUPMASK
{
  /* 0x0000 */ unsigned long Masks[8];
} PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK; /* size: 0x0020 */

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
} PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
} PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef enum _PKG_TYPE
{
  NPNP_PKG = 0,
  NDCO_PKG = 1,
  MAX_PKG = 2,
} PKG_TYPE, *PPKG_TYPE;

typedef enum _POOL_BLOCK_TYPE
{
  NDIS_PACKET_POOL_BLOCK_FREE = 0,
  NDIS_PACKET_POOL_BLOCK_USED = 1,
  NDIS_PACKET_POOL_BLOCK_AGING = 2,
} POOL_BLOCK_TYPE, *PPOOL_BLOCK_TYPE;

typedef enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolBase = 0,
  NonPagedPoolBaseMustSucceed = 2,
  NonPagedPoolBaseCacheAligned = 4,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
} POOL_TYPE, *PPOOL_TYPE;

typedef struct _POWER_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceD1;
  /* 0x0004 */ unsigned long SequenceD2;
  /* 0x0008 */ unsigned long SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE; /* size: 0x000c */

typedef union _POWER_STATE
{
  union
  {
    /* 0x0000 */ enum _SYSTEM_POWER_STATE SystemState;
    /* 0x0000 */ enum _DEVICE_POWER_STATE DeviceState;
  }; /* size: 0x0004 */
} POWER_STATE, *PPOWER_STATE; /* size: 0x0004 */

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef struct _PPL_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _LOOKASIDE_LIST_EX List;
  /* 0x0060 */ struct _LOOKASIDE_LIST_EX* BackendList;
  /* 0x0068 */ unsigned __int64 Lock;
  /* 0x0070 */ unsigned char Initialized;
  /* 0x0071 */ char __PADDING__[15];
} PPL_LOOKASIDE_LIST, *PPPL_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _PPL_LOOKASIDE_LIST_ARRAY
{
  /* 0x0000 */ unsigned long ValidEntryCount;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Tag;
  /* 0x000c */ unsigned long LookasideTag;
  /* 0x0010 */ unsigned __int64 Size;
  /* 0x0018 */ enum _POOL_TYPE PoolType;
  /* 0x001c */ unsigned short Depth;
  /* 0x0020 */ struct _PPL_LOOKASIDE_LIST** LookasideLists;
  /* 0x0028 */ long __PADDING__[6];
} PPL_LOOKASIDE_LIST_ARRAY, *PPPL_LOOKASIDE_LIST_ARRAY; /* size: 0x0040 */

typedef struct _PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET; /* size: 0x0014 */

typedef struct _PROCESSOR_NUMBER
{
  /* 0x0000 */ unsigned short Group;
  /* 0x0002 */ unsigned char Number;
  /* 0x0003 */ unsigned char Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; /* size: 0x0004 */

typedef union _PROTOCOL_OFFLOAD_PARAMETERS
{
  union
  {
    /* 0x0000 */ struct _IPV4_ARP_PARAMETERS IPv4ARPParameters;
    /* 0x0000 */ struct _IPV6_NS_PARAMETERS IPv6NSParameters;
    /* 0x0000 */ struct _DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
  }; /* size: 0x004c */
} PROTOCOL_OFFLOAD_PARAMETERS, *PPROTOCOL_OFFLOAD_PARAMETERS; /* size: 0x0050 */

typedef enum _PS_ATTRIBUTE_NUM
{
  PsAttributeParentProcess = 0,
  PsAttributeDebugObject = 1,
  PsAttributeToken = 2,
  PsAttributeClientId = 3,
  PsAttributeTebAddress = 4,
  PsAttributeImageName = 5,
  PsAttributeImageInfo = 6,
  PsAttributeMemoryReserve = 7,
  PsAttributePriorityClass = 8,
  PsAttributeErrorMode = 9,
  PsAttributeStdHandleInfo = 10,
  PsAttributeHandleList = 11,
  PsAttributeGroupAffinity = 12,
  PsAttributePreferredNode = 13,
  PsAttributeIdealProcessor = 14,
  PsAttributeUmsThread = 15,
  PsAttributeMitigationOptions = 16,
  PsAttributeMax = 17,
} PS_ATTRIBUTE_NUM, *PPS_ATTRIBUTE_NUM;

typedef enum _PS_STD_HANDLE_STATE
{
  PsNeverDuplicate = 0,
  PsRequestDuplicate = 1,
  PsAlwaysDuplicate = 2,
  PsMaxStdHandleStates = 3,
} PS_STD_HANDLE_STATE, *PPS_STD_HANDLE_STATE;

typedef enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsMaxWakeReasons = 4,
} PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef struct _QUAD
{
  union
  {
    /* 0x0000 */ __int64 UseThisFieldToCopy;
    /* 0x0000 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
} QUAD, *PQUAD; /* size: 0x0008 */

typedef struct _QUERY
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0008 */ void* InformationBuffer;
  /* 0x0010 */ unsigned int InformationBufferLength;
  /* 0x0014 */ unsigned int BytesWritten;
  /* 0x0018 */ unsigned int BytesNeeded;
  /* 0x001c */ long __PADDING__[1];
} QUERY, *PQUERY; /* size: 0x0020 */

typedef struct _QUERY_INFORMATION
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0008 */ void* InformationBuffer;
  /* 0x0010 */ unsigned int InformationBufferLength;
  /* 0x0014 */ unsigned int BytesWritten;
  /* 0x0018 */ unsigned int BytesNeeded;
  /* 0x001c */ long __PADDING__[1];
} QUERY_INFORMATION, *PQUERY_INFORMATION; /* size: 0x0020 */

typedef struct _QUEUED_CLOSE
{
  /* 0x0000 */ int Status;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM WorkItem;
} QUEUED_CLOSE, *PQUEUED_CLOSE; /* size: 0x0028 */

typedef struct _REFERENCE
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ unsigned short ReferenceCount;
  /* 0x000a */ unsigned char Closing;
  /* 0x000b */ char __PADDING__[5];
} REFERENCE, *PREFERENCE; /* size: 0x0010 */

typedef struct _REFERENCE_EX
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ unsigned short ReferenceCount;
  /* 0x000a */ unsigned char Closing;
  /* 0x000b */ unsigned char ZeroBased;
  /* 0x0010 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
} REFERENCE_EX, *PREFERENCE_EX; /* size: 0x0018 */

typedef union _REFERENCE_OBJECT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Deleting : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ReferenceCount : 30; /* bit position: 1 */
      /* 0x0000 */ unsigned long Overflow : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ long Value;
  }; /* size: 0x0004 */
} REFERENCE_OBJECT, *PREFERENCE_OBJECT; /* size: 0x0004 */

typedef enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  MaxRegNtNotifyClass = 47,
} REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef union _REQUEST_DATA
{
  union
  {
    /* 0x0000 */ struct _QUERY QUERY_INFORMATION;
    /* 0x0000 */ struct _SET SET_INFORMATION;
    /* 0x0000 */ struct _METHOD METHOD_INFORMATION;
  }; /* size: 0x0028 */
} REQUEST_DATA, *PREQUEST_DATA; /* size: 0x0028 */

typedef union _RESULT_VALUE
{
  union
  {
    /* 0x0000 */ unsigned char ResultByteValue;
    /* 0x0000 */ unsigned short ResultShortValue;
    /* 0x0000 */ unsigned long ResultLongValue;
    /* 0x0000 */ unsigned __int64 ResultLong64Value;
    /* 0x0000 */ unsigned char ResultByteArrayValue[16];
  }; /* size: 0x0010 */
} RESULT_VALUE, *PRESULT_VALUE; /* size: 0x0010 */

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;

typedef struct _RTL_AVL_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; /* size: 0x0008 */

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE* Left;
      /* 0x0008 */ struct _RTL_BALANCED_NODE* Right;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0010 */ unsigned char Red : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned char Balance : 2; /* bit position: 0 */
    /* 0x0010 */ unsigned __int64 ParentValue;
  }; /* size: 0x0008 */
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; /* size: 0x0018 */

typedef struct _RTL_BITMAP
{
  /* 0x0000 */ unsigned long SizeOfBitMap;
  /* 0x0008 */ unsigned long* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; /* size: 0x0010 */

struct _RTL_CRITICAL_SECTION;

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Length;
  /* 0x0004 */ unsigned long TimeStamp;
  /* 0x0008 */ struct _STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR; /* size: 0x0018 */

typedef struct _RTL_DYNAMIC_HASH_TABLE
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Shift;
  /* 0x0008 */ unsigned long TableSize;
  /* 0x000c */ unsigned long Pivot;
  /* 0x0010 */ unsigned long DivisorMask;
  /* 0x0014 */ unsigned long NumEntries;
  /* 0x0018 */ unsigned long NonEmptyBuckets;
  /* 0x001c */ unsigned long NumEnumerators;
  /* 0x0020 */ void* Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE; /* size: 0x0028 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0008 */ struct _LIST_ENTRY* PrevLinkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT; /* size: 0x0018 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0020 */ unsigned long BucketIndex;
  /* 0x0024 */ long __PADDING__[1];
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR; /* size: 0x0028 */

typedef struct _RTL_QUERY_REGISTRY_TABLE
{
  /* 0x0000 */ void* QueryRoutine /* function */;
  /* 0x0008 */ unsigned long Flags;
  /* 0x0010 */ unsigned short* Name;
  /* 0x0018 */ void* EntryContext;
  /* 0x0020 */ unsigned long DefaultType;
  /* 0x0028 */ void* DefaultData;
  /* 0x0030 */ unsigned long DefaultLength;
  /* 0x0034 */ long __PADDING__[1];
} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE; /* size: 0x0038 */

typedef struct _RTL_RB_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
  /* 0x0008 */ struct _RTL_BALANCED_NODE* Min;
} RTL_RB_TREE, *PRTL_RB_TREE; /* size: 0x0010 */

typedef struct _RTL_SPLAY_LINKS
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* Parent;
  /* 0x0008 */ struct _RTL_SPLAY_LINKS* LeftChild;
  /* 0x0010 */ struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS; /* size: 0x0018 */

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  /* 0x0000 */ unsigned long MaximumLength;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DebugFlags;
  /* 0x0010 */ void* ConsoleHandle;
  /* 0x0018 */ unsigned long ConsoleFlags;
  /* 0x0020 */ void* StandardInput;
  /* 0x0028 */ void* StandardOutput;
  /* 0x0030 */ void* StandardError;
  /* 0x0038 */ struct _CURDIR CurrentDirectory;
  /* 0x0050 */ struct _UNICODE_STRING DllPath;
  /* 0x0060 */ struct _UNICODE_STRING ImagePathName;
  /* 0x0070 */ struct _UNICODE_STRING CommandLine;
  /* 0x0080 */ void* Environment;
  /* 0x0088 */ unsigned long StartingX;
  /* 0x008c */ unsigned long StartingY;
  /* 0x0090 */ unsigned long CountX;
  /* 0x0094 */ unsigned long CountY;
  /* 0x0098 */ unsigned long CountCharsX;
  /* 0x009c */ unsigned long CountCharsY;
  /* 0x00a0 */ unsigned long FillAttribute;
  /* 0x00a4 */ unsigned long WindowFlags;
  /* 0x00a8 */ unsigned long ShowWindowFlags;
  /* 0x00b0 */ struct _UNICODE_STRING WindowTitle;
  /* 0x00c0 */ struct _UNICODE_STRING DesktopInfo;
  /* 0x00d0 */ struct _UNICODE_STRING ShellInfo;
  /* 0x00e0 */ struct _UNICODE_STRING RuntimeData;
  /* 0x00f0 */ struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  /* 0x03f0 */ unsigned __int64 EnvironmentSize;
  /* 0x03f8 */ unsigned __int64 EnvironmentVersion;
  /* 0x0400 */ void* PackageDependencyData;
  /* 0x0408 */ unsigned long ProcessGroupId;
  /* 0x040c */ long __PADDING__[1];
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS; /* size: 0x0410 */

typedef struct _SCATTER_GATHER_ELEMENT
{
  /* 0x0000 */ union _LARGE_INTEGER Address;
  /* 0x0008 */ unsigned long Length;
  /* 0x0010 */ unsigned __int64 Reserved;
} SCATTER_GATHER_ELEMENT, *PSCATTER_GATHER_ELEMENT; /* size: 0x0018 */

typedef struct _SCATTER_GATHER_LIST
{
  /* 0x0000 */ unsigned long NumberOfElements;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ struct _SCATTER_GATHER_ELEMENT* Elements /* zero-length array */;
} SCATTER_GATHER_LIST, *PSCATTER_GATHER_LIST; /* size: 0x0010 */

struct _SCSI_REQUEST_BLOCK;

typedef struct _SECTION_OBJECT_POINTERS
{
  /* 0x0000 */ void* DataSectionObject;
  /* 0x0008 */ void* SharedCacheMap;
  /* 0x0010 */ void* ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS; /* size: 0x0018 */

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ unsigned char ContextTrackingMode;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; /* size: 0x000c */

typedef struct _SECURITY_SUBJECT_CONTEXT
{
  /* 0x0000 */ void* ClientToken;
  /* 0x0008 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0010 */ void* PrimaryToken;
  /* 0x0018 */ void* ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT; /* size: 0x0020 */

typedef struct _SET
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0008 */ void* InformationBuffer;
  /* 0x0010 */ unsigned int InformationBufferLength;
  /* 0x0014 */ unsigned int BytesRead;
  /* 0x0018 */ unsigned int BytesNeeded;
  /* 0x001c */ long __PADDING__[1];
} SET, *PSET; /* size: 0x0020 */

typedef struct _SET_INFORMATION
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0008 */ void* InformationBuffer;
  /* 0x0010 */ unsigned int InformationBufferLength;
  /* 0x0014 */ unsigned int BytesRead;
  /* 0x0018 */ unsigned int BytesNeeded;
  /* 0x001c */ long __PADDING__[1];
} SET_INFORMATION, *PSET_INFORMATION; /* size: 0x0020 */

typedef struct _SID
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char SubAuthorityCount;
  /* 0x0002 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* 0x0008 */ unsigned long SubAuthority[1];
} SID, *PSID; /* size: 0x000c */

typedef struct _SID_IDENTIFIER_AUTHORITY
{
  /* 0x0000 */ unsigned char Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; /* size: 0x0006 */

typedef struct _SINGLE_LIST_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; /* size: 0x0008 */

typedef struct _SLIST_ENTRY
{
  /* 0x0000 */ struct _SLIST_ENTRY* Next;
  /* 0x0008 */ long __PADDING__[2];
} SLIST_ENTRY, *PSLIST_ENTRY; /* size: 0x0010 */

typedef union _SLIST_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 Alignment;
      /* 0x0008 */ unsigned __int64 Region;
    }; /* size: 0x0010 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Depth : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Sequence : 9; /* bit position: 16 */
        /* 0x0000 */ unsigned __int64 NextEntry : 39; /* bit position: 25 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 HeaderType : 1; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 Init : 1; /* bit position: 1 */
        /* 0x0008 */ unsigned __int64 Reserved : 59; /* bit position: 2 */
        /* 0x0008 */ unsigned __int64 Region : 3; /* bit position: 61 */
      }; /* bitfield */
    } /* size: 0x0010 */ Header8;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Depth : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Sequence : 48; /* bit position: 16 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 HeaderType : 1; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 Reserved : 3; /* bit position: 1 */
        /* 0x0008 */ unsigned __int64 NextEntry : 60; /* bit position: 4 */
      }; /* bitfield */
    } /* size: 0x0010 */ HeaderX64;
  }; /* size: 0x0010 */
} SLIST_HEADER, *PSLIST_HEADER; /* size: 0x0010 */

typedef struct _STACK_INDEX
{
  /* 0x0000 */ unsigned long XferDataIndex;
  /* 0x0004 */ unsigned long Index;
} STACK_INDEX, *PSTACK_INDEX; /* size: 0x0008 */

typedef struct _STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0008 */ char* Buffer;
} STRING, *PSTRING; /* size: 0x0010 */

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long TargetSystemState : 4; /* bit position: 8 */
      /* 0x0000 */ unsigned long EffectiveSystemState : 4; /* bit position: 12 */
      /* 0x0000 */ unsigned long CurrentSystemState : 4; /* bit position: 16 */
      /* 0x0000 */ unsigned long IgnoreHibernationPath : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long PseudoTransition : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long Reserved2 : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long ContextAsUlong;
  }; /* size: 0x0004 */
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT; /* size: 0x0004 */

typedef struct _TCP_OFFLOAD_STATE_CACHED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned short Flags;
  /* 0x000c */ unsigned long InitialRcvWnd;
  /* 0x0010 */ unsigned long RcvIndicationSize;
  /* 0x0014 */ unsigned char KaProbeCount;
  /* 0x0018 */ unsigned long KaTimeout;
  /* 0x001c */ unsigned long KaInterval;
  /* 0x0020 */ unsigned long MaxRT;
  /* 0x0024 */ unsigned long FlowLabel : 20; /* bit position: 0 */
  /* 0x0028 */ unsigned char TtlOrHopLimit;
  /* 0x0029 */ unsigned char TosOrTrafficClass;
  /* 0x002a */ unsigned char UserPriority : 3; /* bit position: 0 */
  /* 0x002b */ char __PADDING__[1];
} TCP_OFFLOAD_STATE_CACHED, *PTCP_OFFLOAD_STATE_CACHED; /* size: 0x002c */

typedef struct _TCP_OFFLOAD_STATE_CONST
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned short Flags;
  /* 0x000a */ unsigned short RemotePort;
  /* 0x000c */ unsigned short LocalPort;
  struct /* bitfield */
  {
    /* 0x000e */ unsigned char SndWindScale : 4; /* bit position: 0 */
    /* 0x000e */ unsigned char RcvWindScale : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0010 */ unsigned short RemoteMss;
  /* 0x0014 */ unsigned long HashValue;
} TCP_OFFLOAD_STATE_CONST, *PTCP_OFFLOAD_STATE_CONST; /* size: 0x0018 */

typedef struct _TCP_OFFLOAD_STATE_DELEGATED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ enum TCP_OFFLOAD_CONNECTION_STATE State;
  /* 0x000c */ unsigned short Flags;
  /* 0x0010 */ unsigned long RcvNxt;
  /* 0x0014 */ unsigned long RcvWnd;
  /* 0x0018 */ unsigned long SndUna;
  /* 0x001c */ unsigned long SndNxt;
  /* 0x0020 */ unsigned long SndMax;
  /* 0x0024 */ unsigned long SndWnd;
  /* 0x0028 */ unsigned long MaxSndWnd;
  /* 0x002c */ unsigned long SendWL1;
  /* 0x0030 */ unsigned long CWnd;
  /* 0x0034 */ unsigned long SsThresh;
  /* 0x0038 */ unsigned short SRtt;
  /* 0x003a */ unsigned short RttVar;
  /* 0x003c */ unsigned long TsRecent;
  /* 0x0040 */ unsigned long TsRecentAge;
  /* 0x0044 */ unsigned long TsTime;
  /* 0x0048 */ unsigned long TotalRT;
  /* 0x004c */ unsigned char DupAckCount;
  /* 0x004d */ unsigned char SndWndProbeCount;
  struct
  {
    /* 0x0050 */ unsigned char ProbeCount;
    /* 0x0054 */ unsigned long TimeoutDelta;
  } /* size: 0x0008 */ KeepAlive;
  struct
  {
    /* 0x0058 */ unsigned char Count;
    /* 0x005c */ unsigned long TimeoutDelta;
  } /* size: 0x0008 */ Retransmit;
  union
  {
    struct
    {
      /* 0x0060 */ struct _NET_BUFFER_LIST* SendDataHead;
      /* 0x0068 */ struct _NET_BUFFER_LIST* SendDataTail;
    }; /* size: 0x0010 */
    /* 0x0060 */ unsigned long SendBacklogSize;
  }; /* size: 0x0010 */
  union
  {
    /* 0x0070 */ struct _NET_BUFFER_LIST* BufferedData;
    /* 0x0070 */ unsigned long ReceiveBacklogSize;
  }; /* size: 0x0008 */
  /* 0x0078 */ unsigned long DWnd;
  /* 0x007c */ long __PADDING__[1];
} TCP_OFFLOAD_STATE_DELEGATED, *PTCP_OFFLOAD_STATE_DELEGATED; /* size: 0x0080 */

typedef struct _TCP_OFFLOAD_STATS
{
  /* 0x0000 */ unsigned __int64 InSegments;
  /* 0x0008 */ unsigned __int64 OutSegments;
  /* 0x0010 */ unsigned long CurrentlyEstablished;
  /* 0x0014 */ unsigned long ResetEstablished;
  /* 0x0018 */ unsigned long RetransmittedSegments;
  /* 0x001c */ unsigned long InErrors;
  /* 0x0020 */ unsigned long OutResets;
  /* 0x0024 */ long __PADDING__[1];
} TCP_OFFLOAD_STATS, *PTCP_OFFLOAD_STATS; /* size: 0x0028 */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x0038 */ void* EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID ClientId;
  /* 0x0050 */ void* ActiveRpcHandle;
  /* 0x0058 */ void* ThreadLocalStoragePointer;
  /* 0x0060 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ void* CsrClientThread;
  /* 0x0078 */ void* Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x0100 */ void* WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ void* SystemReserved1[54];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c8 */ struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;
  /* 0x02d0 */ unsigned char SpareBytes[24];
  /* 0x02e8 */ unsigned long TxFsContext;
  /* 0x02f0 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID RealClientId;
  /* 0x07e8 */ void* GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ void* GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ void* glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ void* glReserved2;
  /* 0x1228 */ void* glSectionInfo;
  /* 0x1230 */ void* glSection;
  /* 0x1238 */ void* glTable;
  /* 0x1240 */ void* glCurrentRC;
  /* 0x1248 */ void* glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1258 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1478 */ void* DeallocationStack;
  /* 0x1480 */ void* TlsSlots[64];
  /* 0x1680 */ struct _LIST_ENTRY TlsLinks;
  /* 0x1690 */ void* Vdm;
  /* 0x1698 */ void* ReservedForNtRpc;
  /* 0x16a0 */ void* DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b8 */ void* Instrumentation[11];
  /* 0x1710 */ struct _GUID ActivityId;
  /* 0x1720 */ void* SubProcessTag;
  /* 0x1728 */ void* PerflibData;
  /* 0x1730 */ void* EtwTraceData;
  /* 0x1738 */ void* WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x1744 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x1744 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x1744 */ unsigned char ReservedPad0;
      /* 0x1745 */ unsigned char ReservedPad1;
      /* 0x1746 */ unsigned char ReservedPad2;
      /* 0x1747 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x1748 */ unsigned long GuaranteedStackBytes;
  /* 0x1750 */ void* ReservedForPerf;
  /* 0x1758 */ void* ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1768 */ void* SavedPriorityState;
  /* 0x1770 */ unsigned __int64 ReservedForCodeCoverage;
  /* 0x1778 */ void* ThreadPoolData;
  /* 0x1780 */ void** TlsExpansionSlots;
  /* 0x1788 */ void* DeallocationBStore;
  /* 0x1790 */ void* BStoreLimit;
  /* 0x1798 */ unsigned long MuiGeneration;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ void* NlsCache;
  /* 0x17a8 */ void* pShimData;
  /* 0x17b0 */ unsigned short HeapVirtualAffinity;
  /* 0x17b2 */ unsigned short LowFragHeapDataSlot;
  /* 0x17b8 */ void* CurrentTransactionHandle;
  /* 0x17c0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x17c8 */ void* FlsData;
  /* 0x17d0 */ void* PreferredLanguages;
  /* 0x17d8 */ void* UserPrefLanguages;
  /* 0x17e0 */ void* MergedPrefLanguages;
  /* 0x17e8 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x17ec */ volatile unsigned short CrossTebFlags;
    /* 0x17ec */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x17ee */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x17ee */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x17ee */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x17ee */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x17ee */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x17ee */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x17ee */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x17ee */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x17ee */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x17ee */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x17ee */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x17ee */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x17ee */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x17ee */ unsigned short SpareSameTebBits : 4; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x17f0 */ void* TxnScopeEnterCallback;
  /* 0x17f8 */ void* TxnScopeExitCallback;
  /* 0x1800 */ void* TxnScopeContext;
  /* 0x1808 */ unsigned long LockCount;
  /* 0x180c */ unsigned long SpareUlong0;
  /* 0x1810 */ void* ResourceRetValue;
  /* 0x1818 */ void* ReservedForWdf;
} TEB, *PTEB; /* size: 0x1820 */

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0008 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0010 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x0018 */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0008 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0010 */

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0008 */ struct _TP_POOL* Pool;
  /* 0x0010 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x0018 */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0020 */ void* RaceDll;
  /* 0x0028 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0030 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0038 */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x0038 */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x0038 */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x003c */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0040 */ unsigned long Size;
  /* 0x0044 */ long __PADDING__[1];
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0048 */

struct _TP_CALLBACK_INSTANCE;

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

struct _TP_CLEANUP_GROUP;

struct _TP_POOL;

typedef enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  HypervisorStackwalkRoutineClass = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
} TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef struct _TRANSPORT_HEADER_OFFSET
{
  /* 0x0000 */ unsigned short ProtocolType;
  /* 0x0002 */ unsigned short HeaderOffset;
} TRANSPORT_HEADER_OFFSET, *PTRANSPORT_HEADER_OFFSET; /* size: 0x0004 */

typedef struct _TXN_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short TxFsContext;
  /* 0x0008 */ void* TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK; /* size: 0x0010 */

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

typedef struct _ULONG_REFERENCE
{
  /* 0x0000 */ unsigned __int64 SpinLock;
  /* 0x0008 */ unsigned long ReferenceCount;
  /* 0x000c */ unsigned char Closing;
  /* 0x000d */ char __PADDING__[3];
} ULONG_REFERENCE, *PULONG_REFERENCE; /* size: 0x0010 */

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0008 */ unsigned short* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0010 */

typedef enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef struct _VAR_STRING
{
  /* 0x0000 */ unsigned long ulTotalSize;
  /* 0x0004 */ unsigned long ulNeededSize;
  /* 0x0008 */ unsigned long ulUsedSize;
  /* 0x000c */ unsigned long ulStringFormat;
  /* 0x0010 */ unsigned long ulStringSize;
  /* 0x0014 */ unsigned long ulStringOffset;
} VAR_STRING, *PVAR_STRING; /* size: 0x0018 */

typedef struct _VPB
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short VolumeLabelLength;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0010 */ struct _DEVICE_OBJECT* RealDevice;
  /* 0x0018 */ unsigned long SerialNumber;
  /* 0x001c */ unsigned long ReferenceCount;
  /* 0x0020 */ wchar_t VolumeLabel[32];
} VPB, *PVPB; /* size: 0x0060 */

typedef struct _VPCI_INVALIDATE_BLOCK_OUTPUT
{
  /* 0x0000 */ unsigned __int64 BlockMask;
} VPCI_INVALIDATE_BLOCK_OUTPUT, *PVPCI_INVALIDATE_BLOCK_OUTPUT; /* size: 0x0008 */

typedef struct _WAIT_CONTEXT_BLOCK
{
  union
  {
    /* 0x0000 */ struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY DmaWaitEntry;
      /* 0x0010 */ unsigned long NumberOfChannels;
      struct /* bitfield */
      {
        /* 0x0014 */ unsigned long SyncCallback : 1; /* bit position: 0 */
        /* 0x0014 */ unsigned long DmaContext : 1; /* bit position: 1 */
        /* 0x0014 */ unsigned long Reserved : 30; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0018 */ void* DeviceRoutine /* function */;
  /* 0x0020 */ void* DeviceContext;
  /* 0x0028 */ unsigned long NumberOfMapRegisters;
  /* 0x0030 */ void* DeviceObject;
  /* 0x0038 */ void* CurrentIrp;
  /* 0x0040 */ struct _KDPC* BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK; /* size: 0x0048 */

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
} WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef union _WHEA_ERROR_PACKET_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved1 : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long HypervisorError : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved2 : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_PACKET_V2
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ union _WHEA_ERROR_PACKET_FLAGS Flags;
  /* 0x0010 */ enum _WHEA_ERROR_TYPE ErrorType;
  /* 0x0014 */ enum _WHEA_ERROR_SEVERITY ErrorSeverity;
  /* 0x0018 */ unsigned long ErrorSourceId;
  /* 0x001c */ enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
  /* 0x0020 */ struct _GUID NotifyType;
  /* 0x0030 */ unsigned __int64 Context;
  /* 0x0038 */ enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
  /* 0x003c */ unsigned long Reserved1;
  /* 0x0040 */ unsigned long DataOffset;
  /* 0x0044 */ unsigned long DataLength;
  /* 0x0048 */ unsigned long PshedDataOffset;
  /* 0x004c */ unsigned long PshedDataLength;
} WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2; /* size: 0x0050 */

typedef struct _WHEA_ERROR_RECORD
{
  /* 0x0000 */ struct _WHEA_ERROR_RECORD_HEADER Header;
  /* 0x0080 */ struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
} WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD; /* size: 0x00c8 */

typedef struct _WHEA_ERROR_RECORD_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ union _WHEA_REVISION Revision;
  /* 0x0006 */ unsigned long SignatureEnd;
  /* 0x000a */ unsigned short SectionCount;
  /* 0x000c */ enum _WHEA_ERROR_SEVERITY Severity;
  /* 0x0010 */ union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ union _WHEA_TIMESTAMP Timestamp;
  /* 0x0020 */ struct _GUID PlatformId;
  /* 0x0030 */ struct _GUID PartitionId;
  /* 0x0040 */ struct _GUID CreatorId;
  /* 0x0050 */ struct _GUID NotifyType;
  /* 0x0060 */ unsigned __int64 RecordId;
  /* 0x0068 */ union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  /* 0x006c */ union _WHEA_PERSISTENCE_INFO PersistenceInfo;
  /* 0x0074 */ unsigned char Reserved[12];
} WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER; /* size: 0x0080 */

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS; /* size: 0x0004 */

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PlatformId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Timestamp : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PartitionId : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  /* 0x0000 */ unsigned long SectionOffset;
  /* 0x0004 */ unsigned long SectionLength;
  /* 0x0008 */ union _WHEA_REVISION Revision;
  /* 0x000a */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ struct _GUID SectionType;
  /* 0x0020 */ struct _GUID FRUId;
  /* 0x0030 */ enum _WHEA_ERROR_SEVERITY SectionSeverity;
  /* 0x0034 */ char FRUText[20];
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR; /* size: 0x0048 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Primary : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ContainmentWarning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reset : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long ThresholdExceeded : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ResourceNotAvailable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long LatentError : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS; /* size: 0x0004 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char FRUId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char FRUText : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS; /* size: 0x0001 */

typedef enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
} WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeMax = 12,
} WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
} WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef union _WHEA_PERSISTENCE_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Signature : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Length : 24; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Identifier : 16; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Attributes : 2; /* bit position: 56 */
      /* 0x0000 */ unsigned __int64 DoNotLog : 1; /* bit position: 58 */
      /* 0x0000 */ unsigned __int64 Reserved : 5; /* bit position: 59 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 AsULONGLONG;
  }; /* size: 0x0008 */
} WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO; /* size: 0x0008 */

typedef union _WHEA_REVISION
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char MinorRevision;
      /* 0x0001 */ unsigned char MajorRevision;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_REVISION, *PWHEA_REVISION; /* size: 0x0002 */

typedef union _WHEA_TIMESTAMP
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Seconds : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Minutes : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Hours : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Precise : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 Day : 8; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 Month : 8; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Year : 8; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 Century : 8; /* bit position: 56 */
    }; /* bitfield */
    /* 0x0000 */ union _LARGE_INTEGER AsLARGE_INTEGER;
  }; /* size: 0x0008 */
} WHEA_TIMESTAMP, *PWHEA_TIMESTAMP; /* size: 0x0008 */

typedef struct _WOL_BITMAP_PATTERN
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long MaskOffset;
  /* 0x0008 */ unsigned long MaskSize;
  /* 0x000c */ unsigned long PatternOffset;
  /* 0x0010 */ unsigned long PatternSize;
} WOL_BITMAP_PATTERN, *PWOL_BITMAP_PATTERN; /* size: 0x0014 */

typedef union _WOL_PATTERN
{
  union
  {
    /* 0x0000 */ struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
    /* 0x0000 */ struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
    /* 0x0000 */ struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
    /* 0x0000 */ struct _WOL_BITMAP_PATTERN WoLBitMapPattern;
  }; /* size: 0x0028 */
} WOL_PATTERN, *PWOL_PATTERN; /* size: 0x0028 */

typedef struct _WORK_QUEUE_ITEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0010 */ void* WorkerRoutine /* function */;
  /* 0x0018 */ void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; /* size: 0x0020 */

typedef enum _WORK_QUEUE_TYPE
{
  CriticalWorkQueue = 0,
  DelayedWorkQueue = 1,
  HyperCriticalWorkQueue = 2,
  NormalWorkQueue = 3,
  BackgroundWorkQueue = 4,
  RealTimeWorkQueue = 5,
  SuperCriticalWorkQueue = 6,
  MaximumWorkQueue = 7,
  CustomPriorityWorkQueue = 32,
} WORK_QUEUE_TYPE, *PWORK_QUEUE_TYPE;

typedef enum _WWAN_ACTIVATION_COMMAND
{
  WwanActivationCommandDeactivate = 0,
  WwanActivationCommandActivate = 1,
  WwanActivationCommandMax = 2,
} WWAN_ACTIVATION_COMMAND, *PWWAN_ACTIVATION_COMMAND;

typedef struct _WWAN_AUTH_AKAP_CHALLENGE
{
  /* 0x0000 */ unsigned char Rand[16];
  /* 0x0010 */ unsigned char Autn[16];
  /* 0x0020 */ unsigned char NetworkName[256];
  /* 0x0120 */ unsigned long NetworkNameLength;
} WWAN_AUTH_AKAP_CHALLENGE, *PWWAN_AUTH_AKAP_CHALLENGE; /* size: 0x0124 */

typedef struct _WWAN_AUTH_AKA_CHALLENGE
{
  /* 0x0000 */ unsigned char Rand[16];
  /* 0x0010 */ unsigned char Autn[16];
} WWAN_AUTH_AKA_CHALLENGE, *PWWAN_AUTH_AKA_CHALLENGE; /* size: 0x0020 */

typedef struct _WWAN_AUTH_CHALLENGE
{
  /* 0x0000 */ enum _WWAN_AUTH_METHOD AuthMethod;
  union
  {
    union
    {
      /* 0x0004 */ struct _WWAN_AUTH_SIM_CHALLENGE AuthSim;
      /* 0x0004 */ struct _WWAN_AUTH_AKA_CHALLENGE AuthAka;
      /* 0x0004 */ struct _WWAN_AUTH_AKAP_CHALLENGE AuthAkap;
    }; /* size: 0x0124 */
  } /* size: 0x0124 */ u;
} WWAN_AUTH_CHALLENGE, *PWWAN_AUTH_CHALLENGE; /* size: 0x0128 */

typedef enum _WWAN_AUTH_METHOD
{
  WwanAuthSim = 0,
  WwanAuthAka = 1,
  WwanAuthAkaPrime = 2,
  WwanAuthMethodMax = 3,
} WWAN_AUTH_METHOD, *PWWAN_AUTH_METHOD;

typedef enum _WWAN_AUTH_PROTOCOL
{
  WwanAuthProtocolNone = 0,
  WwanAuthProtocolPap = 1,
  WwanAuthProtocolChap = 2,
  WwanAuthProtocolMsChapV2 = 3,
  WwanAuthProtocolMax = 4,
} WWAN_AUTH_PROTOCOL, *PWWAN_AUTH_PROTOCOL;

typedef struct _WWAN_AUTH_SIM_CHALLENGE
{
  /* 0x0000 */ unsigned char Rand1[16];
  /* 0x0010 */ unsigned char Rand2[16];
  /* 0x0020 */ unsigned char Rand3[16];
  /* 0x0030 */ unsigned long n;
} WWAN_AUTH_SIM_CHALLENGE, *PWWAN_AUTH_SIM_CHALLENGE; /* size: 0x0034 */

typedef enum _WWAN_CELLULAR_CLASS
{
  WwanCellularClassUnknown = 0,
  WwanCellularClassGsm = 1,
  WwanCellularClassCdma = 2,
  WwanCellularClassMax = 3,
} WWAN_CELLULAR_CLASS, *PWWAN_CELLULAR_CLASS;

typedef enum _WWAN_COMPRESSION
{
  WwanCompressionNone = 0,
  WwanCompressionEnable = 1,
  WwanCompressionMax = 2,
} WWAN_COMPRESSION, *PWWAN_COMPRESSION;

typedef enum _WWAN_CONTEXT_TYPE
{
  WwanContextTypeNone = 0,
  WwanContextTypeInternet = 1,
  WwanContextTypeVpn = 2,
  WwanContextTypeVoice = 3,
  WwanContextTypeVideoShare = 4,
  WwanContextTypeCustom = 5,
  WwanContextTypePurchase = 6,
  WwanContextTypeMax = 7,
} WWAN_CONTEXT_TYPE, *PWWAN_CONTEXT_TYPE;

typedef struct _WWAN_DEVICE_CAPS
{
  /* 0x0000 */ enum _WWAN_DEVICE_TYPE WwanDeviceType;
  /* 0x0004 */ enum _WWAN_CELLULAR_CLASS WwanCellularClass;
  /* 0x0008 */ enum _WWAN_VOICE_CLASS WwanVoiceClass;
  /* 0x000c */ enum _WWAN_SIM_CLASS WwanSimClass;
  /* 0x0010 */ unsigned long WwanDataClass;
  /* 0x0014 */ wchar_t CustomDataClass[12];
  /* 0x002c */ unsigned long WwanGsmBandClass;
  /* 0x0030 */ unsigned long WwanCdmaBandClass;
  /* 0x0034 */ wchar_t CustomBandClass[20];
  /* 0x005c */ unsigned long WwanSmsCaps;
  /* 0x0060 */ unsigned long WwanControlCaps;
  /* 0x0064 */ wchar_t DeviceId[18];
  /* 0x0088 */ wchar_t Manufacturer[32];
  /* 0x00c8 */ wchar_t Model[32];
  /* 0x0108 */ wchar_t FirmwareInfo[32];
  /* 0x0148 */ unsigned long MaxActivatedContexts;
  /* 0x014c */ unsigned long WwanAuthAlgoCaps;
  /* 0x0150 */ struct _WWAN_LIST_HEADER CellularClassListHeader;
} WWAN_DEVICE_CAPS, *PWWAN_DEVICE_CAPS; /* size: 0x0158 */

typedef enum _WWAN_DEVICE_TYPE
{
  WwanDeviceTypeUnknown = 0,
  WwanDeviceTypeEmbedded = 1,
  WwanDeviceTypeRemovable = 2,
  WwanDeviceTypeRemote = 3,
  WwanDeviceTypeMax = 4,
} WWAN_DEVICE_TYPE, *PWWAN_DEVICE_TYPE;

typedef struct _WWAN_DRIVER_CAPS
{
  /* 0x0000 */ unsigned long ulMajorVersion;
  /* 0x0004 */ unsigned long ulMinorVersion;
  /* 0x0008 */ unsigned long ulDriverCaps;
} WWAN_DRIVER_CAPS, *PWWAN_DRIVER_CAPS; /* size: 0x000c */

typedef enum _WWAN_EMERGENCY_MODE
{
  WwanEmergencyModeOff = 0,
  WwanEmergencyModeOn = 1,
  WwanEmergencyModeMax = 2,
} WWAN_EMERGENCY_MODE, *PWWAN_EMERGENCY_MODE;

typedef enum _WWAN_IP_TYPE
{
  WwanIPTypeDefault = 0,
  WwanIPTypeIPv4 = 1,
  WwanIPTypeIPv6 = 2,
  WwanIPTypeIpv4v6 = 3,
} WWAN_IP_TYPE, *PWWAN_IP_TYPE;

typedef struct _WWAN_LIST_HEADER
{
  /* 0x0000 */ enum _WWAN_STRUCT_TYPE ElementType;
  /* 0x0004 */ unsigned long ElementCount;
} WWAN_LIST_HEADER, *PWWAN_LIST_HEADER; /* size: 0x0008 */

typedef enum _WWAN_PACKET_SERVICE_ACTION
{
  WwanPacketServiceActionAttach = 0,
  WwanPacketServiceActionDetach = 1,
} WWAN_PACKET_SERVICE_ACTION, *PWWAN_PACKET_SERVICE_ACTION;

typedef struct _WWAN_PIN_DESC
{
  /* 0x0000 */ enum _WWAN_PIN_MODE PinMode;
  /* 0x0004 */ enum _WWAN_PIN_FORMAT PinFormat;
  /* 0x0008 */ unsigned long PinLengthMin;
  /* 0x000c */ unsigned long PinLengthMax;
} WWAN_PIN_DESC, *PWWAN_PIN_DESC; /* size: 0x0010 */

typedef enum _WWAN_PIN_FORMAT
{
  WwanPinFormatUnknown = 0,
  WwanPinFormatNumeric = 1,
  WwanPinFormatAlphaNumeric = 2,
  WwanPinFormatMax = 3,
} WWAN_PIN_FORMAT, *PWWAN_PIN_FORMAT;

typedef struct _WWAN_PIN_LIST
{
  /* 0x0000 */ struct _WWAN_PIN_DESC WwanPinDescPin1;
  /* 0x0010 */ struct _WWAN_PIN_DESC WwanPinDescPin2;
  /* 0x0020 */ struct _WWAN_PIN_DESC WwanPinDescDeviceSimPin;
  /* 0x0030 */ struct _WWAN_PIN_DESC WwanPinDescDeviceFirstSimPin;
  /* 0x0040 */ struct _WWAN_PIN_DESC WwanPinDescNetworkPin;
  /* 0x0050 */ struct _WWAN_PIN_DESC WwanPinDescNetworkSubsetPin;
  /* 0x0060 */ struct _WWAN_PIN_DESC WwanPinDescSvcProviderPin;
  /* 0x0070 */ struct _WWAN_PIN_DESC WwanPinDescCorporatePin;
  /* 0x0080 */ struct _WWAN_PIN_DESC WwanPinDescSubsidyLock;
  /* 0x0090 */ struct _WWAN_PIN_DESC WwanPinDescCustom;
} WWAN_PIN_LIST, *PWWAN_PIN_LIST; /* size: 0x00a0 */

typedef enum _WWAN_PIN_MODE
{
  WwanPinModeNotSupported = 0,
  WwanPinModeEnabled = 1,
  WwanPinModeDisabled = 2,
  WwanPinModeMax = 3,
} WWAN_PIN_MODE, *PWWAN_PIN_MODE;

typedef struct _WWAN_PROVIDER
{
  /* 0x0000 */ wchar_t ProviderId[7];
  /* 0x0010 */ unsigned long ProviderState;
  /* 0x0014 */ wchar_t ProviderName[21];
  /* 0x0040 */ unsigned long WwanDataClass;
} WWAN_PROVIDER, *PWWAN_PROVIDER; /* size: 0x0044 */

typedef struct _WWAN_READY_INFO
{
  /* 0x0000 */ enum _WWAN_READY_STATE ReadyState;
  /* 0x0004 */ enum _WWAN_EMERGENCY_MODE EmergencyMode;
  /* 0x0008 */ wchar_t SubscriberId[16];
  /* 0x0028 */ wchar_t SimIccId[21];
  /* 0x0052 */ unsigned char CdmaShortMsgSize;
  /* 0x0054 */ struct _WWAN_LIST_HEADER TNListHeader;
} WWAN_READY_INFO, *PWWAN_READY_INFO; /* size: 0x005c */

typedef enum _WWAN_READY_STATE
{
  WwanReadyStateOff = 0,
  WwanReadyStateInitialized = 1,
  WwanReadyStateSimNotInserted = 2,
  WwanReadyStateBadSim = 3,
  WwanReadyStateFailure = 4,
  WwanReadyStateNotActivated = 5,
  WwanReadyStateDeviceLocked = 6,
} WWAN_READY_STATE, *PWWAN_READY_STATE;

typedef enum _WWAN_REGISTER_ACTION
{
  WwanRegisterActionAutomatic = 0,
  WwanRegisterActionManual = 1,
  WwanRegisterActionMax = 2,
} WWAN_REGISTER_ACTION, *PWWAN_REGISTER_ACTION;

typedef struct _WWAN_SERVICE_ACTIVATION
{
  /* 0x0000 */ unsigned long uVendorSpecificBufferSize;
} WWAN_SERVICE_ACTIVATION, *PWWAN_SERVICE_ACTIVATION; /* size: 0x0004 */

typedef struct _WWAN_SET_CONTEXT
{
  /* 0x0000 */ unsigned long ContextId;
  /* 0x0004 */ enum _WWAN_CONTEXT_TYPE ContextType;
  /* 0x0008 */ wchar_t AccessString[101];
  /* 0x00d2 */ wchar_t UserName[256];
  /* 0x02d2 */ wchar_t Password[256];
  /* 0x04d4 */ enum _WWAN_COMPRESSION Compression;
  /* 0x04d8 */ enum _WWAN_AUTH_PROTOCOL AuthType;
  /* 0x04dc */ wchar_t ProviderId[7];
  /* 0x04ea */ char __PADDING__[2];
} WWAN_SET_CONTEXT, *PWWAN_SET_CONTEXT; /* size: 0x04ec */

typedef struct _WWAN_SET_CONTEXT_STATE
{
  /* 0x0000 */ unsigned long ConnectionId;
  /* 0x0004 */ enum _WWAN_ACTIVATION_COMMAND ActivationCommand;
  /* 0x0008 */ wchar_t AccessString[101];
  /* 0x00d2 */ wchar_t UserName[256];
  /* 0x02d2 */ wchar_t Password[256];
  /* 0x04d4 */ enum _WWAN_COMPRESSION Compression;
  /* 0x04d8 */ enum _WWAN_AUTH_PROTOCOL AuthType;
  /* 0x04dc */ enum _WWAN_IP_TYPE IPType;
} WWAN_SET_CONTEXT_STATE, *PWWAN_SET_CONTEXT_STATE; /* size: 0x04e0 */

typedef struct _WWAN_SET_REGISTER_STATE
{
  /* 0x0000 */ wchar_t ProviderId[7];
  /* 0x0010 */ enum _WWAN_REGISTER_ACTION RegisterAction;
  /* 0x0014 */ unsigned long WwanDataClass;
} WWAN_SET_REGISTER_STATE, *PWWAN_SET_REGISTER_STATE; /* size: 0x0018 */

typedef struct _WWAN_SET_SIGNAL_INDICATION
{
  /* 0x0000 */ unsigned long RssiInterval;
  /* 0x0004 */ unsigned long RssiThreshold;
} WWAN_SET_SIGNAL_INDICATION, *PWWAN_SET_SIGNAL_INDICATION; /* size: 0x0008 */

typedef struct _WWAN_SET_SMS_CONFIGURATION
{
  /* 0x0000 */ char ScAddress[16];
  /* 0x0010 */ enum _WWAN_SMS_FORMAT SmsFormat;
} WWAN_SET_SMS_CONFIGURATION, *PWWAN_SET_SMS_CONFIGURATION; /* size: 0x0014 */

typedef enum _WWAN_SIM_CLASS
{
  WwanSimClassUnknown = 0,
  WwanSimClassSimLogical = 1,
  WwanSimClassSimRemovable = 2,
  WwanSimClassSimRemote = 3,
  WwanSimClassMax = 4,
} WWAN_SIM_CLASS, *PWWAN_SIM_CLASS;

typedef enum _WWAN_SMS_CDMA_ENCODING
{
  WwanSmsCdmaEncodingOctet = 0,
  WwanSmsCdmaEncodingEpm = 1,
  WwanSmsCdmaEncoding7BitAscii = 2,
  WwanSmsCdmaEncodingIa5 = 3,
  WwanSmsCdmaEncodingUnicode = 4,
  WwanSmsCdmaEncodingShiftJis = 5,
  WwanSmsCdmaEncodingKorean = 6,
  WwanSmsCdmaEncodingLatinHebrew = 7,
  WwanSmsCdmaEncodingLatin = 8,
  WwanSmsCdmaEncodingGsm7Bit = 9,
  WwanSmsCdmaEncodingMax = 10,
} WWAN_SMS_CDMA_ENCODING, *PWWAN_SMS_CDMA_ENCODING;

typedef enum _WWAN_SMS_CDMA_LANG
{
  WwanSmsCdmaLangUnknown = 0,
  WwanSmsCdmaLangEnglish = 1,
  WwanSmsCdmaLangFrench = 2,
  WwanSmsCdmaLangSpanish = 3,
  WwanSmsCdmaLangJapanese = 4,
  WwanSmsCdmaLangKorean = 5,
  WwanSmsCdmaLangChinese = 6,
  WwanSmsCdmaLangHebrew = 7,
  WwanSmsCdmaLangMax = 8,
} WWAN_SMS_CDMA_LANG, *PWWAN_SMS_CDMA_LANG;

typedef struct _WWAN_SMS_FILTER
{
  /* 0x0000 */ enum _WWAN_SMS_FLAG Flag;
  /* 0x0004 */ unsigned long MessageIndex;
} WWAN_SMS_FILTER, *PWWAN_SMS_FILTER; /* size: 0x0008 */

typedef enum _WWAN_SMS_FLAG
{
  WwanSmsFlagAll = 0,
  WwanSmsFlagIndex = 1,
  WwanSmsFlagNew = 2,
  WwanSmsFlagOld = 3,
  WwanSmsFlagSent = 4,
  WwanSmsFlagDraft = 5,
  WwanSmsFlagMax = 6,
} WWAN_SMS_FLAG, *PWWAN_SMS_FLAG;

typedef enum _WWAN_SMS_FORMAT
{
  WwanSmsFormatPdu = 0,
  WwanSmsFormatReserved0 = 1,
  WwanSmsFormatReserved1 = 2,
  WwanSmsFormatReserved2 = 3,
  WwanSmsFormatCdma = 4,
  WwanSmsFormatMax = 5,
} WWAN_SMS_FORMAT, *PWWAN_SMS_FORMAT;

typedef struct _WWAN_SMS_READ
{
  /* 0x0000 */ enum _WWAN_SMS_FORMAT SmsFormat;
  /* 0x0004 */ struct _WWAN_SMS_FILTER ReadFilter;
} WWAN_SMS_READ, *PWWAN_SMS_READ; /* size: 0x000c */

typedef struct _WWAN_SMS_SEND
{
  /* 0x0000 */ enum _WWAN_SMS_FORMAT SmsFormat;
  union
  {
    union
    {
      /* 0x0004 */ struct _WWAN_SMS_SEND_PDU Pdu;
      /* 0x0004 */ struct _WWAN_SMS_SEND_CDMA Cdma;
    }; /* size: 0x016f */
  } /* size: 0x0170 */ u;
} WWAN_SMS_SEND, *PWWAN_SMS_SEND; /* size: 0x0174 */

typedef struct _WWAN_SMS_SEND_CDMA
{
  /* 0x0000 */ enum _WWAN_SMS_CDMA_ENCODING EncodingId;
  /* 0x0004 */ enum _WWAN_SMS_CDMA_LANG LanguageId;
  /* 0x0008 */ char Address[50];
  /* 0x003a */ unsigned short SizeInBytes;
  /* 0x003c */ unsigned char SizeInCharacters;
  /* 0x003d */ unsigned char EncodedMsg[160];
  /* 0x00dd */ char __PADDING__[3];
} WWAN_SMS_SEND_CDMA, *PWWAN_SMS_SEND_CDMA; /* size: 0x00e0 */

typedef struct _WWAN_SMS_SEND_PDU
{
  /* 0x0000 */ unsigned char Size;
  /* 0x0001 */ char PduData[366];
} WWAN_SMS_SEND_PDU, *PWWAN_SMS_SEND_PDU; /* size: 0x016f */

typedef enum _WWAN_STRUCT_TYPE
{
  WwanStructTN = 0,
  WwanStructContext = 1,
  WwanStructProvider = 2,
  WwanStructSmsPdu = 3,
  WwanStructReserved0 = 4,
  WwanStructReserved1 = 5,
  WwanStructReserved2 = 6,
  WwanStructSmsCdma = 7,
  WwanStructReserved3 = 8,
  WwanStructDeviceServiceEntry = 9,
  WwanStructProvider2 = 10,
  WwanStructDeviceServiceGuid = 11,
  WwanStructDeviceServiceCommandId = 12,
  WwanStructCellularClass = 13,
  WwanStructMax = 14,
} WWAN_STRUCT_TYPE, *PWWAN_STRUCT_TYPE;

typedef enum _WWAN_VOICE_CLASS
{
  WwanVoiceClassUnknown = 0,
  WwanVoiceClassNoVoice = 1,
  WwanVoiceClassSeparateVoiceData = 2,
  WwanVoiceClassSimultaneousVoiceData = 3,
  WwanVoiceClassMax = 4,
} WWAN_VOICE_CLASS, *PWWAN_VOICE_CLASS;

typedef struct _XSAVE_FORMAT
{
  /* 0x0000 */ unsigned short ControlWord;
  /* 0x0002 */ unsigned short StatusWord;
  /* 0x0004 */ unsigned char TagWord;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short ErrorOpcode;
  /* 0x0008 */ unsigned long ErrorOffset;
  /* 0x000c */ unsigned short ErrorSelector;
  /* 0x000e */ unsigned short Reserved2;
  /* 0x0010 */ unsigned long DataOffset;
  /* 0x0014 */ unsigned short DataSelector;
  /* 0x0016 */ unsigned short Reserved3;
  /* 0x0018 */ unsigned long MxCsr;
  /* 0x001c */ unsigned long MxCsr_Mask;
  /* 0x0020 */ struct _M128A FloatRegisters[8];
  /* 0x00a0 */ struct _M128A XmmRegisters[16];
  /* 0x01a0 */ unsigned char Reserved4[96];
} XSAVE_FORMAT, *PXSAVE_FORMAT; /* size: 0x0200 */

typedef struct _XSTATE_CONFIGURATION
{
  /* 0x0000 */ unsigned __int64 EnabledFeatures;
  /* 0x0008 */ unsigned __int64 EnabledVolatileFeatures;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long OptimizedSave : 1; /* bit position: 0 */
  /* 0x0018 */ struct _XSTATE_FEATURE Features[64];
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; /* size: 0x0218 */

typedef struct _XSTATE_FEATURE
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE; /* size: 0x0008 */

typedef struct _X_FILTER
{
  /* 0x0000 */ struct _NDIS_OPEN_BLOCK* OpenList;
  /* 0x0008 */ struct _NDIS_OPEN_BLOCK* NoFTypeOpenList;
  /* 0x0010 */ struct _NDIS_OPEN_BLOCK* FTypeOpenList;
  /* 0x0018 */ struct _NDIS_FRAME_TYPE_RECORD FrameTypeRecord;
  /* 0x0120 */ struct _NDIS_RW_LOCK_EX* BindListLock;
  /* 0x0128 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0130 */ unsigned int CombinedPacketFilter;
  /* 0x0134 */ unsigned int OldCombinedPacketFilter;
  /* 0x0138 */ unsigned int MiniportPacketFilter;
  /* 0x013c */ unsigned int NumOpens;
  /* 0x0140 */ unsigned int NumNoETypeOpens;
  /* 0x0148 */ struct _NDIS_OPEN_BLOCK* SingleActiveOpen;
  /* 0x0150 */ unsigned char AdapterAddress[6];
  /* 0x0158 */ unsigned int MaxMulticastAddresses;
  /* 0x0160 */ unsigned char* NextMCastAddressBuf[6];
  /* 0x0168 */ unsigned char* NextOldMCastAddressBuf[6];
  /* 0x0170 */ unsigned int NextNumAddresses;
  /* 0x0174 */ unsigned int NextOldNumAddresses;
  /* 0x0178 */ unsigned char* MiniportMCastAddressBuf[6];
  /* 0x0180 */ unsigned int MiniportNumAddresses;
  /* 0x0188 */ unsigned char* MiniportOldMCastAddressBuf[6];
  /* 0x0190 */ unsigned int MiniportOldNumAddresses;
  /* 0x0194 */ long __PADDING__[1];
} X_FILTER, *PX_FILTER; /* size: 0x0198 */

typedef struct _flowspec
{
  /* 0x0000 */ unsigned long TokenRate;
  /* 0x0004 */ unsigned long TokenBucketSize;
  /* 0x0008 */ unsigned long PeakBandwidth;
  /* 0x000c */ unsigned long Latency;
  /* 0x0010 */ unsigned long DelayVariation;
  /* 0x0014 */ unsigned long ServiceType;
  /* 0x0018 */ unsigned long MaxSduSize;
  /* 0x001c */ unsigned long MinimumPolicedSize;
} flowspec, *Pflowspec; /* size: 0x0020 */

struct in6_addr
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned char Byte[16];
      /* 0x0000 */ unsigned short Word[8];
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
}; /* size: 0x0010 */

struct in_addr
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned char s_b1;
        /* 0x0001 */ unsigned char s_b2;
        /* 0x0002 */ unsigned char s_b3;
        /* 0x0003 */ unsigned char s_b4;
      } /* size: 0x0004 */ S_un_b;
      struct
      {
        /* 0x0000 */ unsigned short s_w1;
        /* 0x0002 */ unsigned short s_w2;
      } /* size: 0x0004 */ S_un_w;
      /* 0x0000 */ unsigned long S_addr;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ S_un;
}; /* size: 0x0004 */

struct sockaddr
{
  /* 0x0000 */ unsigned short sa_family;
  /* 0x0002 */ char sa_data[14];
}; /* size: 0x0010 */

struct sockaddr_in
{
  /* 0x0000 */ unsigned short sin_family;
  /* 0x0002 */ unsigned short sin_port;
  /* 0x0004 */ struct in_addr sin_addr;
  /* 0x0008 */ char sin_zero[8];
}; /* size: 0x0010 */

struct sockaddr_in6
{
  /* 0x0000 */ unsigned short sin6_family;
  /* 0x0002 */ unsigned short sin6_port;
  /* 0x0004 */ unsigned long sin6_flowinfo;
  /* 0x0008 */ struct in6_addr sin6_addr;
  union
  {
    /* 0x0018 */ unsigned long sin6_scope_id;
    /* 0x0018 */ struct SCOPE_ID sin6_scope_struct;
  }; /* size: 0x0004 */
}; /* size: 0x001c */

/*
AddNetConfigOpsAce
AdjustOffloadContext
CmRegUtilCreateUcKey
CmRegUtilCreateWstrKey
CmRegUtilOpenExistingWstrKey
CmRegUtilUcValueGetFullBuffer
CmRegUtilUcValueSetUcString
CmRegUtilWstrValueGetDword
CmRegUtilWstrValueSetWstrString
CmpRegUtilAllocateUnicodeString
CreateDeviceDriverSecurityDescriptor
DisableMagicPacketKeyword
DriverEntry
Duplicate802_11AttachAttributes
Duplicate802_11AttachAttributesCommon
EthCreateFilter
EthDeInitializeFilter
EthDeleteFilter
EthDeleteFilterOpenAdapter
EthFilterDprIndicateReceive
EthFilterDprIndicateReceiveComplete
EthIndicateReceive
EthInitializeFilter
EthQueryGlobalFilterAddresses
EthQueryOpenFilterAddresses
EtwEx_tidActivityInfoTransfer
ExAllocateFromNPagedLookasideList
ExFreeToNPagedLookasideList
FindExportedRoutineByName
GetMiniportFromReqTracker
GetMsgDpc
GroupCompletionContext
GsDriverEntry
IFBLOCK_DECREMENT_REF
IFBLOCK_DEREFERENCE_MINIPORT_LINK
IFBLOCK_INCREMENT_REF
IoDevObjCreateDeviceSecure
IopDevObjAdjustNewDeviceParameters
IopDevObjApplyPostCreationSettings
IsOidRequestDirectOid
IsReadLockAlreadyHeldByCurrentThread
IsRscSupportedVersion
MINIPORT_INTERLOCKED_CLEAR_FLAG
MINIPORT_INTERLOCKED_TEST_FLAG
McGenControlCallbackV2
McGenEventRegister
Microsoft_Windows_Networking_Correlation_EtwEnableCallback
MiniportSupportsReceiveThrottle
NDISM_SEND_PACKET_STATS
NDIS_BUFFER_TO_SPAN_PAGES
NDIS_COUNT_POWER_TRANSITION
NDIS_FREE_XFER_DATA_PACKET
NDIS_NDK_PCW_NUM_COUNTERS_SET_IN_MASK
NDIS_STACK_RESERVED_FROM_PACKET
NdisAcquireRWLockRead
NdisAcquireRWLockWrite
NdisAcquireReadWriteLock
NdisAcquireSpinLock
NdisActiveGroupCount
NdisAdjustBufferLength
NdisAdjustNetBufferCurrentMdl
NdisAdvanceNetBufferDataStart
NdisAdvanceNetBufferListDataStart
NdisAllocateBuffer
NdisAllocateBufferPool
NdisAllocateCloneNetBufferList
NdisAllocateCloneOidRequest
NdisAllocateFragmentNetBufferList
NdisAllocateGenericObject
NdisAllocateIoWorkItem
NdisAllocateMdl
NdisAllocateMemory
NdisAllocateMemoryWithTag
NdisAllocateMemoryWithTagPriority
NdisAllocateNetBuffer
NdisAllocateNetBufferAndNetBufferList
NdisAllocateNetBufferList
NdisAllocateNetBufferListContext
NdisAllocateNetBufferListPool
NdisAllocateNetBufferMdlAndData
NdisAllocateNetBufferPool
NdisAllocatePacket
NdisAllocatePacketPool
NdisAllocatePacketPoolEx
NdisAllocateRWLock
NdisAllocateReassembledNetBufferList
NdisAllocateSharedMemory
NdisAllocateSpinLockExported
NdisAllocateTimerObject
NdisAnsiStringToUnicodeString
NdisBufferLength
NdisBufferVirtualAddress
NdisBuildScatterGatherList
NdisCancelDirectOidRequest
NdisCancelOidRequest
NdisCancelSendNetBufferLists
NdisCancelSendPackets
NdisCancelTimer
NdisCancelTimerObject
NdisClAddParty
NdisClCloseAddressFamily
NdisClCloseCall
NdisClDeregisterSap
NdisClDropParty
NdisClGetProtocolVcContextFromTapiCallId
NdisClIncomingCallComplete
NdisClMakeCall
NdisClModifyCallQoS
NdisClNotifyCloseAddressFamilyComplete
NdisClOpenAddressFamily
NdisClOpenAddressFamilyEx
NdisClRegisterSap
NdisCloseAdapter
NdisCloseAdapterEx
NdisCloseConfiguration
NdisCloseFile
NdisCloseNDKAdapter
NdisCmActivateVc
NdisCmAddPartyComplete
NdisCmCloseAddressFamilyComplete
NdisCmCloseCallComplete
NdisCmDeactivateVc
NdisCmDeregisterSapComplete
NdisCmDispatchCallConnected
NdisCmDispatchIncomingCall
NdisCmDispatchIncomingCallQoSChange
NdisCmDispatchIncomingCloseCall
NdisCmDispatchIncomingDropParty
NdisCmDropPartyComplete
NdisCmMakeCallComplete
NdisCmModifyCallQoSComplete
NdisCmNotifyCloseAddressFamily
NdisCmOpenAddressFamilyComplete
NdisCmRegisterAddressFamily
NdisCmRegisterAddressFamilyEx
NdisCmRegisterSapComplete
NdisCoAssignInstanceName
NdisCoCreateVc
NdisCoDeleteVc
NdisCoGetTapiCallId
NdisCoOidRequest
NdisCoOidRequestComplete
NdisCoRequest
NdisCoRequestComplete
NdisCoSendNetBufferLists
NdisCoSendPackets
NdisCompleteBindAdapter
NdisCompleteBindAdapterEx
NdisCompleteDmaTransfer
NdisCompleteNetPnPEvent
NdisCompletePnPEvent
NdisCompleteUnbindAdapter
NdisCompleteUnbindAdapterEx
NdisCopyBuffer
NdisCopyFromNetBufferToNetBuffer
NdisCopyFromPacketToPacket
NdisCopyFromPacketToPacketSafe
NdisCopyReceiveNetBufferListInfo
NdisCopySendNetBufferListInfo
NdisCurrentGroupAndProcessor
NdisCurrentProcessorIndex
NdisDeregisterDeviceEx
NdisDeregisterProtocol
NdisDeregisterProtocolDriver
NdisDeregisterTdiCallBack
NdisDirectOidRequest
NdisDllInitialize
NdisDprAcquireReadWriteLock
NdisDprAcquireSpinLock
NdisDprReleaseReadWriteLock
NdisDprReleaseSpinLock
NdisEnumerateFilterModules
NdisFCancelDirectOidRequest
NdisFCancelOidRequest
NdisFCancelSendNetBufferLists
NdisFDeregisterFilterDriver
NdisFDevicePnPEventNotify
NdisFDirectOidRequest
NdisFDirectOidRequestComplete
NdisFGetOptionalSwitchHandlers
NdisFIndicateReceiveNetBufferLists
NdisFIndicateStatus
NdisFNetPnPEvent
NdisFOidRequest
NdisFOidRequestComplete
NdisFPauseComplete
NdisFRegisterFilterDriver
NdisFRestartComplete
NdisFRestartFilter
NdisFReturnNetBufferLists
NdisFSendNetBufferLists
NdisFSendNetBufferListsComplete
NdisFSetAttributes
NdisFreeBuffer
NdisFreeBufferPool
NdisFreeCloneNetBufferList
NdisFreeCloneOidRequest
NdisFreeFragmentNetBufferList
NdisFreeGenericObject
NdisFreeIoWorkItem
NdisFreeMdl
NdisFreeMemory
NdisFreeMemoryWithTag
NdisFreeMemoryWithTagPriority
NdisFreeNetBuffer
NdisFreeNetBufferList
NdisFreeNetBufferListContext
NdisFreeNetBufferListPool
NdisFreeNetBufferPool
NdisFreePacket
NdisFreePacketPool
NdisFreeRWLock
NdisFreeReassembledNetBufferList
NdisFreeScatterGatherList
NdisFreeSharedMemory
NdisFreeSpinLockExported
NdisFreeTimerObject
NdisGeneratePartialCancelId
NdisGetBufferPhysicalArraySize
NdisGetCurrentProcessorCounts
NdisGetCurrentProcessorCpuUsage
NdisGetCurrentSystemTime
NdisGetDataBuffer
NdisGetDeviceReservedExtension
NdisGetDriverHandle
NdisGetFirstBufferFromPacket
NdisGetFirstBufferFromPacketSafe
NdisGetHypervisorInfo
NdisGetNetBufferListProtocolId
NdisGetPacketCancelId
NdisGetPacketFromNetBufferList
NdisGetPoolFromNetBuffer
NdisGetPoolFromNetBufferList
NdisGetPoolFromPacket
NdisGetProcessorInformation
NdisGetProcessorInformationEx
NdisGetReceivedPacket
NdisGetRoutineAddress
NdisGetRssProcessorInformation
NdisGetSessionCompartmentId
NdisGetSessionToCompartmentMappingEpochAndZero
NdisGetSharedDataAlignment
NdisGetSystemUpTime
NdisGetSystemUpTimeEx
NdisGetThreadObjectCompartmentId
NdisGetVersion
NdisGroupActiveProcessorCount
NdisGroupActiveProcessorMask
NdisGroupMaxProcessorCount
NdisIMAssociateMiniport
NdisIMCancelInitializeDeviceInstance
NdisIMCopySendCompletePerPacketInfo
NdisIMCopySendPerPacketInfo
NdisIMDeInitializeDeviceInstance
NdisIMDeregisterLayeredMiniport
NdisIMGetBindingContext
NdisIMGetCurrentPacketStack
NdisIMGetDeviceContext
NdisIMInitializeDeviceInstance
NdisIMInitializeDeviceInstanceEx
NdisIMNotifyPnPEvent
NdisIMQueueMiniportCallback
NdisIMRegisterLayeredMiniport
NdisIMRevertBack
NdisIMSetInternalBindings
NdisIMSwitchToMiniport
NdisIfAddIfStackEntry
NdisIfAllocateNetLuidIndex
NdisIfAllocateNetLuidIndexEx
NdisIfDeleteIfStackEntry
NdisIfDeregisterInterface
NdisIfDeregisterProvider
NdisIfFreeNetLuidIndex
NdisIfGetInterfaceIndexFromNetLuid
NdisIfGetNetLuidFromInterfaceIndex
NdisIfQueryBindingIfIndex
NdisIfRegisterInterface
NdisIfRegisterProvider
NdisImmediateReadPciSlotInformation
NdisImmediateReadPortUchar
NdisImmediateReadPortUlong
NdisImmediateReadPortUshort
NdisImmediateReadSharedMemory
NdisImmediateWritePciSlotInformation
NdisImmediateWritePortUchar
NdisImmediateWritePortUlong
NdisImmediateWritePortUshort
NdisImmediateWriteSharedMemory
NdisInitializeEvent
NdisInitializeReadWriteLock
NdisInitializeString
NdisInitializeTimer
NdisInitializeWrapper
NdisInitiateOffload
NdisInterlockedAddUlong
NdisInterlockedDecrement
NdisInterlockedIncrement
NdisInterlockedInsertHeadList
NdisInterlockedInsertTailList
NdisInterlockedPopEntryList
NdisInterlockedPushEntryList
NdisInterlockedRemoveHeadList
NdisInvalidateOffload
NdisIsStatusIndicationCloneable
NdisMAllocateMapRegisters
NdisMAllocateNetBufferSGList
NdisMAllocatePort
NdisMAllocateSharedMemory
NdisMAllocateSharedMemoryAsync
NdisMCancelTimer
NdisMCloseLog
NdisMCmActivateVc
NdisMCmCreateVc
NdisMCmDeactivateVc
NdisMCmDeleteVc
NdisMCmOidRequest
NdisMCmRegisterAddressFamily
NdisMCmRegisterAddressFamilyEx
NdisMCmRequest
NdisMCoActivateVcComplete
NdisMCoDeactivateVcComplete
NdisMCoIndicateReceiveNetBufferLists
NdisMCoIndicateReceivePacket
NdisMCoIndicateStatus
NdisMCoIndicateStatusEx
NdisMCoOidRequestComplete
NdisMCoReceiveComplete
NdisMCoRequestComplete
NdisMCoSendComplete
NdisMCoSendNetBufferListsComplete
NdisMCompleteBufferPhysicalMapping
NdisMConfigMSIXTableEntry
NdisMCreateLog
NdisMDeregisterAdapterShutdownHandler
NdisMDeregisterDevice
NdisMDeregisterDmaChannel
NdisMDeregisterInterrupt
NdisMDeregisterInterruptEx
NdisMDeregisterIoPortRange
NdisMDeregisterMiniportDriver
NdisMDeregisterScatterGatherDma
NdisMDirectOidRequestComplete
NdisMEnableVirtualization
NdisMFlushLog
NdisMFreeMapRegisters
NdisMFreeNetBufferSGList
NdisMFreePort
NdisMFreeSharedMemory
NdisMGetBusData
NdisMGetDeviceProperty
NdisMGetDmaAlignment
NdisMGetMiniportInitAttributes
NdisMGetOffloadHandlers
NdisMGetVirtualDeviceLocation
NdisMGetVirtualFunctionBusData
NdisMGetVirtualFunctionLocation
NdisMIdleNotificationComplete
NdisMIdleNotificationConfirm
NdisMIndicateReceiveNetBufferLists
NdisMIndicateStatus
NdisMIndicateStatusComplete
NdisMIndicateStatusEx
NdisMInitializeScatterGatherDma
NdisMInitializeTimer
NdisMInitiateOffloadComplete
NdisMInvalidateConfigBlock
NdisMInvalidateOffloadComplete
NdisMMapIoSpace
NdisMNetPnPEvent
NdisMOffloadEventIndicate
NdisMOidRequestComplete
NdisMPauseComplete
NdisMPciAssignResources
NdisMPromoteMiniport
NdisMQueryAdapterInstanceName
NdisMQueryAdapterResources
NdisMQueryInformationComplete
NdisMQueryOffloadStateComplete
NdisMQueryProbedBars
NdisMQueueDpc
NdisMQueueDpcEx
NdisMReadConfigBlock
NdisMReadDmaCounter
NdisMRegisterAdapterShutdownHandler
NdisMRegisterDevice
NdisMRegisterDmaChannel
NdisMRegisterInterrupt
NdisMRegisterInterruptEx
NdisMRegisterIoPortRange
NdisMRegisterMiniport
NdisMRegisterMiniportDriver
NdisMRegisterScatterGatherDma
NdisMRegisterUnloadHandler
NdisMRemoveMiniport
NdisMRequestDpc
NdisMResetComplete
NdisMResetMiniport
NdisMRestartComplete
NdisMSendComplete
NdisMSendNetBufferListsComplete
NdisMSendResourcesAvailable
NdisMSetAttributes
NdisMSetAttributesEx
NdisMSetBusData
NdisMSetInformationComplete
NdisMSetMiniportAttributes
NdisMSetMiniportSecondary
NdisMSetPeriodicTimer
NdisMSetTimer
NdisMSetVirtualFunctionBusData
NdisMSleep
NdisMStartBufferPhysicalMapping
NdisMSynchronizeWithInterrupt
NdisMSynchronizeWithInterruptEx
NdisMTcpOffloadDisconnectComplete
NdisMTcpOffloadEventIndicate
NdisMTcpOffloadForwardComplete
NdisMTcpOffloadReceiveComplete
NdisMTcpOffloadReceiveIndicate
NdisMTcpOffloadSendComplete
NdisMTerminateOffloadComplete
NdisMTransferDataComplete
NdisMUnmapIoSpace
NdisMUpdateOffloadComplete
NdisMWanIndicateReceive
NdisMWanIndicateReceiveComplete
NdisMWanSendComplete
NdisMWriteConfigBlock
NdisMWriteLogData
NdisMapFile
NdisMatchPdoWithPacket
NdisMaxGroupCount
NdisNblTrackerDeregisterComponent
NdisNblTrackerRecordEvent
NdisNblTrackerRegisterComponent
NdisNblTrackerTransferOwnership
NdisOffloadTcpDisconnect
NdisOffloadTcpForward
NdisOffloadTcpReceive
NdisOffloadTcpReceiveReturn
NdisOffloadTcpSend
NdisOidRequest
NdisOpenAdapter
NdisOpenAdapterEx
NdisOpenConfiguration
NdisOpenConfigurationEx
NdisOpenConfigurationKeyByIndex
NdisOpenConfigurationKeyByName
NdisOpenFile
NdisOpenNDKAdapter
NdisOpenProtocolConfiguration
NdisOverrideBusNumber
NdisPacketPoolUsage
NdisPacketSize
NdisProcessorIndexToNumber
NdisProcessorNumberToIndex
NdisQueryAdapterInstanceName
NdisQueryBindInstanceName
NdisQueryBuffer
NdisQueryBufferOffset
NdisQueryBufferSafe
NdisQueryMapRegisterCount
NdisQueryNetBufferPhysicalCount
NdisQueryOffloadState
NdisQueryPacket
NdisQueryPendingIOCount
NdisQueueIoWorkItem
NdisReEnumerateProtocolBindings
NdisReadConfiguration
NdisReadEisaSlotInformation
NdisReadEisaSlotInformationEx
NdisReadMcaPosInformation
NdisReadNetworkAddress
NdisReadPciSlotInformation
NdisReadPcmciaAttributeMemory
NdisRegisterDeviceEx
NdisRegisterProtocol
NdisRegisterProtocolDriver
NdisRegisterTdiCallBack
NdisReleaseNicActive
NdisReleaseRWLock
NdisReleaseReadWriteLock
NdisReleaseSpinLock
NdisRequest
NdisReset
NdisResetEvent
NdisRetreatNetBufferDataStart
NdisRetreatNetBufferListDataStart
NdisReturnNetBufferLists
NdisReturnPackets
NdisScheduleWorkItem
NdisSend
NdisSendNetBufferLists
NdisSendPackets
NdisSetAoAcOptions
NdisSetCoalescableTimerObject
NdisSetEvent
NdisSetOptionalHandlers
NdisSetPacketCancelId
NdisSetPacketPoolProtocolId
NdisSetPacketStatus
NdisSetPeriodicTimer
NdisSetProtocolFilter
NdisSetSessionCompartmentId
NdisSetThreadObjectCompartmentId
NdisSetTimer
NdisSetTimerEx
NdisSetTimerObject
NdisSetupDmaTransfer
NdisSystemActiveProcessorCount
NdisSystemProcessorCount
NdisTerminateOffload
NdisTerminateWrapper
NdisTransferData
NdisTryAcquireNicActive
NdisUnbindAdapter
NdisUnchainBufferAtBack
NdisUnchainBufferAtFront
NdisUnicodeStringToAnsiString
NdisUnmapFile
NdisUpcaseUnicodeString
NdisUpdateOffload
NdisUpdateSharedMemory
NdisWaitEvent
NdisWriteConfiguration
NdisWriteErrorLogEntry
NdisWriteEventLogEntry
NdisWritePciSlotInformation
NdisWritePcmciaAttributeMemory
NetDmaDeregisterProvider
NetDmaGetVersion
NetDmaInterruptDpc
NetDmaIsr
NetDmaPnPEventNotify
NetDmaProviderStart
NetDmaProviderStop
NetDmaRegisterProvider
NetTrcGetNetBufferListCorrelationGuid
NetTrcIsNetBufferListCorrelationIdValid
PiRegStateOpenClassKey
PiRegStateReadStackCreationSettingsFromKey
PpRegStateReadCreateClassCreationSettings
PpRegStateUpdateStackCreationSettings
PplCreateLookasideList
PplDestroyLookasideList
PplGenericAllocateFunction
PplGenericFreeFunction
PplHotAddProcCompleteNotify
PplHotAddProcStartNotify
PplpCreateOneLookasideList
PplpFreeOneLookasideList
PplpLazyInitializeLookasideList
PrivateULongAdd
PrivateULongMult
RtlCopyBufferToMdl
RtlCopyMdlToBuffer
RtlCopyMdlToMdl
RtlStringCbLengthW
RtlStringCbPrintfW
RtlStringCchPrintfW
RtlUIntAdd
RtlULongAdd
RtlULongLongMult
RtlUShortAdd
RtlUnicodeStringCat
RtlUnicodeStringCopy
RtlUnicodeStringCopyString
RtlUnicodeStringPrintf
SeSddlSecurityDescriptorFromSDDL
SeUtilSecurityInfoFromSecurityDescriptor
SepSddlAddAceToAcl
SepSddlDaclFromSDDLString
SepSddlGetAclForString
SepSddlGetSidForString
SepSddlLookupAccessMaskInTable
SepSddlParseWideStringUlong
SepSddlSecurityDescriptorFromSDDLString
StoreCompletionContext
Template_j
Template_jcqjzzz
Template_jqx
Template_jqxb
Template_jqxjqxqq
Template_jqxptq
Template_jqxq
Template_jqxqj
Template_jqxqq
Template_jqxqqq
Template_jqxqqt
Template_jqxtpp
Template_jqxz
Template_jqxzq
Template_jqxzqq
Template_jqxzqqQR5
Template_pp
Template_q
Template_qq
Template_qqq
Template_qqqz
Template_qqx
Template_qx
Template_qxq
Template_qxqqq
Template_qzz
Template_xq
Template_xqqq
Template_z
Template_zq
WPP_SF_
WPP_SF_D
WPP_SF_DD
WPP_SF_DDD
WPP_SF_DDDDD
WPP_SF_DDDDDDDDDDD
WPP_SF_DDL
WPP_SF_DDLqdL
WPP_SF_DL
WPP_SF_DZD
WPP_SF_DZZ
WPP_SF_DZZD
WPP_SF_DqL
WPP_SF_DqLL
WPP_SF_DqZ
WPP_SF_Dql
WPP_SF_DqlD
WPP_SF_DqqZZ
WPP_SF_L
WPP_SF_LDD
WPP_SF_LL
WPP_SF_Llq
WPP_SF_Lq
WPP_SF_LqDLqD
WPP_SF_LqL
WPP_SF_LqZ
WPP_SF_Lqq
WPP_SF_LqqZZ
WPP_SF_S
WPP_SF_SZD
WPP_SF_Sd
WPP_SF_SqZ
WPP_SF_Sx
WPP_SF_Z
WPP_SF_ZL
WPP_SF_ZLqL
WPP_SF_ZS
WPP_SF_ZZ
WPP_SF_ZZD
WPP_SF_ZZL
WPP_SF_ZZd
WPP_SF_ZqD
WPP_SF_ZqL
WPP_SF_Zqd
WPP_SF_Zqq
WPP_SF_d
WPP_SF_dD
WPP_SF_dL
WPP_SF_dd
WPP_SF_ddLLL
WPP_SF_dl
WPP_SF_dlL
WPP_SF_dllL
WPP_SF_dq
WPP_SF_dqZ
WPP_SF_l
WPP_SF_lLq
WPP_SF_ll
WPP_SF_llL
WPP_SF_q
WPP_SF_qD
WPP_SF_qDD
WPP_SF_qDDDDDD
WPP_SF_qDDLq
WPP_SF_qDL
WPP_SF_qDLLq
WPP_SF_qDdZ
WPP_SF_qDq
WPP_SF_qDqD
WPP_SF_qDqL
WPP_SF_qL
WPP_SF_qLDDDDDDDDDD
WPP_SF_qLDDDDDDDDDDD
WPP_SF_qLL
WPP_SF_qLLDDDDDDDDDD
WPP_SF_qLLL
WPP_SF_qLLLL
WPP_SF_qLLq
WPP_SF_qLLqD
WPP_SF_qLLqL
WPP_SF_qLd
WPP_SF_qLl
WPP_SF_qLq
WPP_SF_qLqL
WPP_SF_qSD
WPP_SF_qZ
WPP_SF_qZD
WPP_SF_qZL
WPP_SF_qZLLL
WPP_SF_qZZ
WPP_SF_qZddD
WPP_SF_qZl
WPP_SF_qZq
WPP_SF_qd
WPP_SF_qdD
WPP_SF_qdDd
WPP_SF_qdL
WPP_SF_ql
WPP_SF_qlL
WPP_SF_qllq
WPP_SF_qq
WPP_SF_qqD
WPP_SF_qqDD
WPP_SF_qqDDD
WPP_SF_qqDL
WPP_SF_qqDd
WPP_SF_qqDq
WPP_SF_qqL
WPP_SF_qqLD
WPP_SF_qqS
WPP_SF_qqZ
WPP_SF_qqZZ
WPP_SF_qqZddZ
WPP_SF_qqZddZD
WPP_SF_qqd
WPP_SF_qqil
WPP_SF_qqill
WPP_SF_qql
WPP_SF_qqq
WPP_SF_qqqD
WPP_SF_qqqDD
WPP_SF_qqqL
WPP_SF_qqqq
WPP_SF_qqqqD
WPP_SF_qqqqDL
WPP_SF_qqqqq
WPP_SF_qqqqqL
WPP_SF_qs
WPP_SF_qsD
WPP_SF_sL
WPP_SF_sZZ
WdmlibIoCreateDeviceSecure
WdmlibRtlInitUnicodeStringEx
WppClassicProviderCallback
WppInitKm
WppLoadTracingSupport
WppTraceCallback
XFilterAdjust
XNoteFilterOpenAdapter
XRemoveBindingFromLists
XSetupFrameTypeInFilter
XlateReceivePacketStats
__C_specific_handler
__GSHandlerCheck
__GSHandlerCheckCommon
__report_gsfailure
__security_check_cookie
__security_init_cookie
ethAddOneOpenMulticastAddress
ethAllocateOpenMulticastBuffer
ethDeleteOneOpenMulticastAddress
ethFilterDprIndicateReceivePacket
ethFilterReceivePacketStats
ethFindMulticast
memcmp
memcpy
memset
ndis5InterruptDpc
ndis5QueuedMiniportDpcWorkItem
ndis6DummyReceiveComplete
ndisAcquireMiniportFilterPnPLocalLockEx
ndisAcquireMiniportPnPEventLock
ndisAcquireReadLockPerCpuRefCnt
ndisAcquireReadLockSharedRefCnt
ndisAcquireReadWriteLockX
ndisAcquireWriteLockPerCpuRefCnt
ndisAcquireWriteLockSharedRefCnt
ndisAddCompletedNblsToTracker
ndisAddDevice
ndisAddMediaTypeToArray
ndisAddNblsToTracker
ndisAddPortToList
ndisAddReceiveFilterToList
ndisAddReceiveQueueToList
ndisAddWoLMagicPacket
ndisAllocOrFreeIterativeDataPathTrackerIfNeeded
ndisAllocateConfigurationString
ndisAllocateDefaultQueue
ndisAllocateEventLog
ndisAllocateFromNPagedPool
ndisAllocateIterativeDataPathTracker
ndisAllocateMdl
ndisAllocateOpenBlock
ndisAllocateOpenOffload
ndisAllocatePerProcessorSlot
ndisAllocateReceiveQueue
ndisAllocateRefCount
ndisAllocationExecutionRoutine
ndisAoAcCleanup
ndisAoAcClearStop
ndisAoAcCompleteQueuedIrps
ndisAoAcIdleRequestConfirm
ndisAoAcInitialize
ndisAoAcIsD0Required
ndisAoAcIsTempRefNeededAfterDeref
ndisAoAcPmInitTempRef
ndisAoAcStop
ndisAoAcTempRefWorkItem
ndisAoAcWakeWorkItem
ndisAttachFilterToMiniport
ndisBindForEachProtocol
ndisBindUnbindPeriodicReceives
ndisBootDriverReinit
ndisBreakdownNblChainWithDiffFlags
ndisBreakdownNblChainWithDiffFlagsAndPort
ndisBugCheckEx
ndisBugcheckHandler
ndisBuildDeviceAcl
ndisCalculateIdealNblTrackerHistoryBufferSize
ndisCalculateRssProcessorCount
ndisCallReceiveCompleteHandler
ndisCallReceiveHandler
ndisCallSendCompleteHandler
ndisCallSendHandler
ndisCancelIdleRequest
ndisCancelIdleRequestSync
ndisCancelInitModeTimeoutTimer
ndisCancelLogIrp
ndisCancelMediaDisconnectTimer
ndisCancelWaitWake
ndisCancelWakeUpDpcTimer
ndisCaptureStackTrace
ndisCharEqual
ndisCheckAccess
ndisCheckAdapterBindings
ndisCheckAllFiltersLoaded
ndisCheckFilterMiniports
ndisCheckForHangSupported
ndisCheckIfTypeMismatch
ndisCheckMiniportFilters
ndisCheckMiniportWakeUpCapable
ndisCheckProtocolBindings
ndisCheckProtocolBindingsOnMiniBlock
ndisCheckWatchdogTimer
ndisCleanUpForProtocol
ndisCleanupMiniportOnLastDeref
ndisClearBusy
ndisClearReceiveFilter
ndisClonePMPatternList
ndisCloseAllBindingsOnProtocol
ndisCloseIrpHandler
ndisCloseMiniportBindings
ndisCloseMiniportBindingsForPause
ndisCloseRef
ndisCloseULongRef
ndisCmCleanupDpcRoutine
ndisCmCleanupSessionState
ndisCmCleanupThreadState
ndisCmCleanupWorkRoutine
ndisCmFindCompartment
ndisCmFindThreadStateUnderLock
ndisCmGetThreadSessionId
ndisCmInitialize
ndisCmLazyInitializeCleanup
ndisCoCompleteOidRequestToRequest
ndisCoIndicatePromiscNetBuffer
ndisCoIndicatePromiscPacket
ndisCoIndicateStatusInternal
ndisCoOidRequestToRequest
ndisCoSendNetBufferListsToNdisPacket
ndisCoSendNetBufferListsToNetBufferLists
ndisCoSendPacketsToNdisPackets
ndisCoSendPacketsToNetBufferLists
ndisCompareGuid
ndisComparePMCapabilities
ndisComparePMProtocolOffloads
ndisCompareProcNum
ndisCompareProcNumInit
ndisCompareStatusCodes
ndisCompareWoLPatterns
ndisCompleteLegacyRequest
ndisCompleteOidRequestToRequest
ndisCompletionRoutine
ndisConvertOffloadValueToString
ndisConvertPMCapabilitiesToPnp
ndisConvertPnpCapabilitiesToPM
ndisConvertWakeUpEnableToPMConfig
ndisCopyNBLInfoToPacket
ndisCopyNdisOffload
ndisCopyPacketInfoToNBL
ndisCopyPeriodicReceiveNbl
ndisCountBootProtocol
ndisCounterSetProviderCallback
ndisCpuHotAddHandler
ndisCpuSpecificInitHypervisorInfo
ndisCreateAcl
ndisCreateAdapterInstanceName
ndisCreateDWORDStreamEntry
ndisCreateFilterAdapterRegistry
ndisCreateFilterDriverRegistry
ndisCreateFilterInstanceRegistry
ndisCreateGenericSD
ndisCreateIrpHandler
ndisCreateNdisSupportedOidList
ndisCreateNotifyQueue
ndisCreatePMAddRemoveWorkItem
ndisCreatePMPacketPattern
ndisCreatePMProtocolOffloadEntry
ndisCreatePMRejectWorkItem
ndisCreateReceiveWorkerThreadPool
ndisCreateSecurityDescriptor
ndisCreateStringStreamEntry
ndisCreateThread
ndisCreateWakeUpPatternEntry
ndisCreateWoLPatternEntry
ndisDataPathExpandStackCallback
ndisDeQueueMiniportOnDriver
ndisDeQueueOpenOnMiniport
ndisDeQueueOpenOnProtocol
ndisDeinitializeZeroBasedRef
ndisDeletePatternEntry
ndisDeliverNetPnPEventSynchronously
ndisDerefMiniportBindWorkItem
ndisDereferenceAf
ndisDereferenceAfNotification
ndisDereferenceDmaAdapter
ndisDereferenceDriver
ndisDereferenceFilter
ndisDereferenceFilterDriver
ndisDereferenceMiniport
ndisDereferenceMiniportForNsi
ndisDereferenceMiniportRef
ndisDereferencePackage
ndisDereferenceProtocol
ndisDereferenceReceiveFilter
ndisDereferenceReceiveQueue
ndisDereferenceRef
ndisDereferenceSap
ndisDereferenceVcPtr
ndisDereferenceWithTag
ndisDetachFilter
ndisDetachFiltersOnMiniport
ndisDeviceControlIrpHandler
ndisDeviceInternalIrpDispatch
ndisDevicePnPEventNotifyFiltersAndAllTransports
ndisDevicePnPEventNotifyMiniport
ndisDevicePowerDown
ndisDevicePowerOn
ndisDisableRsc
ndisDispatchIoWorkItem
ndisDispatchRequest
ndisDmaAddCpuNotify
ndisDmaExecutionRoutine
ndisDoCancelDirectOidRequest
ndisDoDirectOidRequest
ndisDoLoopbackNetBufferList
ndisDoOidRequests
ndisDoPeriodicReceivesIndication
ndisDoesSystemSupportSriov
ndisDriverReinit
ndisDriverSystemDispatch
ndisDummyIrpHandler
ndisEmptyPeriodicReceivesQueue
ndisEnablePMParamForPattern
ndisEnablePMParamForProtocolOffload
ndisEnableWppTracingCallback
ndisEnumStatus
ndisEnumerateFilterInstances
ndisEnumerateInterfaces
ndisEnumerateInterfaces32
ndisEnumeratePorts
ndisEtwRegisterGuids
ndisEventEntryCount
ndisEventLogFromHandle
ndisEventLogHandleFromLog
ndisExpandDataPathStack
ndisExpandStack
ndisExpandStackTrace
ndisFAllocateFilterOffload
ndisFCancelDirectOidRequestInternal
ndisFCancelOidRequestInternal
ndisFDevicePnPEventNotifyInternal
ndisFDirectOidRequestCompleteInternal
ndisFDoDirectOidRequestInternal
ndisFDoLoopbackNetBufferList
ndisFDoOidRequestInternal
ndisFFailRequests
ndisFForwardNetPnPEventToFilter
ndisFIndicateOffloadChange
ndisFIndicateStatusInternal
ndisFIndicateStatusToFilter
ndisFIndicateStatusWrapper
ndisFInvokeAttach
ndisFInvokeCancelDirectOidRequest
ndisFInvokeCancelOidRequest
ndisFInvokeDetach
ndisFInvokeDevicePnPEventNotify
ndisFInvokeDirectOidRequest
ndisFInvokeDirectOidRequestComplete
ndisFInvokeNetPnPEvent
ndisFInvokePause
ndisFInvokeRestart
ndisFInvokeSetFilterModuleOptions
ndisFInvokeSetOptions
ndisFInvokeStatus
ndisFIsLoopbackNetBuffer
ndisFLoopbackNetBufferLists
ndisFNetPnPEventInternal
ndisFNotifyDetach
ndisFOidRequestCompleteInternal
ndisFQueueOidRequest
ndisFSetRestartAttributes
ndisFakeFilterReceiveHandler
ndisFakeFilterSendHandler
ndisFakeMiniportCancelSendPackets
ndisFillEventLogEntry
ndisFillOffloadCapsInTasks
ndisFilterAttachCleanUp
ndisFilterCancelSendNetBufferLists
ndisFilterCancelSendNetBufferListsInternal
ndisFilterFakeCancelSendNetBufferLists
ndisFilterIndicatePMCapabilities
ndisFilterIndicatePMOffloadReject
ndisFilterIndicateReceiveNetBufferLists
ndisFilterIndicateWoLPatternReject
ndisFilterQueueBindWorkitem
ndisFilterQueuedCheckAdapterBindings
ndisFilterSendNetBufferLists
ndisFindFilterPosition
ndisFindMiniMumVersionDrivers
ndisFindMiniportOnGlobalList
ndisFindPatternEntry
ndisFindPortByPortNumber
ndisFindReceiveFilterByFilterId
ndisFindReceiveQueueByQueueId
ndisFindRootDevice
ndisFinishBindAttempt
ndisFreeConvertedPacket
ndisFreeEventLog
ndisFreeMdl
ndisFreeNblToNPagedPool
ndisFreeOpenBlock
ndisFreePacketPool
ndisFreePacketPoolHdr
ndisFreePaddedMdl
ndisFreePerProcessorSlot
ndisFreePeriodicReceives
ndisFreeReceiveQueue
ndisFreeRefCount
ndisFreeRefCountAuxiliaryMemory
ndisFreeRefCountStackChain
ndisFreeRefCountStacksInBlock
ndisFreeSharedMemory
ndisFreeToNPagedPool
ndisGenerateCorrelationIds
ndisGenerateNetBufferListCorrelationIds
ndisGetAdapterHardwareInfo
ndisGetAdapterRssInfo
ndisGetAnyProcInsideNode
ndisGetCombinedPMConfig
ndisGetDpcWatchdogInfo
ndisGetEncapsulationFromTask
ndisGetHardwareInfo
ndisGetHigherFilterWithPnpRef
ndisGetListEntriesCount
ndisGetLogicalProcessorInformation
ndisGetLowerFilterWithPnpRef
ndisGetMiniportIfBlock
ndisGetMiniportIndicateList
ndisGetMiniportInfo
ndisGetMiniportOffloadCapability
ndisGetNewPatternEntryId
ndisGetNthEntry
ndisGetOidSourceHandle
ndisGetOrCreateFilterInstanceKey
ndisGetPMProtocolOffloadSize
ndisGetPatternEffectivePriority
ndisGetPciDeviceCustomProperties
ndisGetPerformanceCounters
ndisGetPortList
ndisGetPowerInfo
ndisGetProcessorInfo
ndisGetRdmaCapabilities
ndisGetServiceNameFromRegPath
ndisGetSetBusConfigSpace
ndisGetTaskBytes
ndisGetTimeInterval
ndisGetWakeUpPatternSize
ndisGetWoLPatternSize
ndisHandleFilterAttachOrDetachNotification
ndisHandleFilterHandlersChange
ndisHandleLegacyTransport
ndisHandleOrphanDevice
ndisHandlePnPRequest
ndisHandleProtocolBindNotification
ndisHandleProtocolReconfigNotification
ndisHandleProtocolUnbindNotification
ndisHandleProtocolUnloadNotification
ndisHandleUModePnPOp
ndisIMAddIfStackEntry
ndisIMCheckDeviceInstance
ndisIMDeleteIfStackEntry
ndisIMInitializeDeviceInstance
ndisIMQueueDeviceInstance
ndisIPsecNblInfoToPktInfo
ndisIPsecPktInfoToNBLInfo
ndisIdleCancelWorkItem
ndisIdleWaitWakeComplete
ndisIfAliasChange
ndisIfAllocateAndVerifyNetLuidIndex
ndisIfCreateCompartmentBlock
ndisIfCreateFilterInterface
ndisIfCreateInterface
ndisIfCreateInterfaceForiScsi
ndisIfCreateInterfaceFromPersistentStore
ndisIfCreateNetwork
ndisIfCreateNetworkBlock
ndisIfCreatePersistedInterface
ndisIfCreatePersistentCompartment
ndisIfDeletePersistedInterface
ndisIfDeleteStackEntries
ndisIfDereferenceMiniport
ndisIfDetachMiniportBlock
ndisIfEnumerateNsiObjects
ndisIfFindAvailableCompartmentId
ndisIfFindCompartmentBlock
ndisIfFindInterface
ndisIfFindInterfaceByInterfaceGuid
ndisIfFindInterfaceByNetLuid
ndisIfFindNetworkBlock
ndisIfFindNextInterfaceByNetLuid
ndisIfFindNextRcvAddress
ndisIfFindRcvAddress
ndisIfFindStackEntry
ndisIfGetFilterIfAlias
ndisIfGetFilterIfInfoFromRegistry
ndisIfGetMiniportStatistics
ndisIfGetRcvAddressFromMiniport
ndisIfGetUniqueSiteId
ndisIfInitGetCompartmentList
ndisIfInitGetInterfaceList
ndisIfInitGetNetworkList
ndisIfInitialize
ndisIfQueryBindingMiniportIfIndex
ndisIfQueryFilterObject
ndisIfQueryLoopbackObject
ndisIfQueryMiniportObject
ndisIfQueryMiniportObjectNotPresent
ndisIfQueryObject
ndisIfQueryProvider
ndisIfQueryProviderWorkItem
ndisIfQuerySetMiniport
ndisIfReferenceMiniport
ndisIfReleaseSiteId
ndisIfRemoveIfBlockMiniportAssociation
ndisIfSetFilterIfInfoInRegistry
ndisIfSetIfDescr
ndisIfSetInterfaceState
ndisIfSetLoopbackObject
ndisIfSetObject
ndisIfStackTablePathExist
ndisIfUpdateFilterIfStack
ndisIfUpdateInterfaceOnAddDevice
ndisIfUpdateInterfaceOnInitialize
ndisIfUpdateLoopbackInterfaceOnNetwork
ndisIfUpdatePersistedInterfaceInfo
ndisIfWriteRegistry
ndisImmediateReadWritePort
ndisImmediateReadWriteSharedMemory
ndisIndicateInitialStateToBinding
ndisIndicateInitialStateToFilter
ndisIndicateOffloadChangeInternal
ndisIndicatePMCapabilities
ndisIndicateStatusInternal
ndisIndicateToPmodeOpens
ndisIndicateXlatedPacketsToNdis5Protocols
ndisInitModeTimeoutDpc
ndisInitModeTimeoutWorkItem
ndisInitialBindCompleted
ndisInitializeAdapter
ndisInitializeBinding
ndisInitializeBindingEx
ndisInitializeConfiguration
ndisInitializeMiniportRestartAttributes
ndisInitializeNetPnPEvent
ndisInitializeNsi
ndisInitializePerProcRcvTracker
ndisInitializePeriodicReceives
ndisInitializeRef
ndisInitializeStackTraces
ndisInitializeThreadPool
ndisInitializeULongRef
ndisInitializeZeroBasedRef
ndisInsertInWorkQueue
ndisInsertPatternListEntry
ndisInterruptDpc
ndisInvokeBindAdapter
ndisInvokeCloseAdapterComplete
ndisInvokeDirectOidRequestComplete
ndisInvokeMiniportSysPowerNotify
ndisInvokeNetPnPEvent
ndisInvokeNextReceiveCompleteHandler
ndisInvokeNextReceiveHandler
ndisInvokeNextSendCompleteHandler
ndisInvokeNextSendHandler
ndisInvokeOidRequestComplete
ndisInvokeOpenAdapterComplete
ndisInvokeSetOptions
ndisInvokeStatus
ndisInvokeUnbindAdapter
ndisIovAddSwitchToList
ndisIovAddVFToMiniportList
ndisIovAddVPortToMiniportList
ndisIovAllocateVF
ndisIovCancelIoctlInvalidate
ndisIovCancelIoctlNotification
ndisIovCreateDefaultNicSwitch
ndisIovCreateVPort
ndisIovDeleteDefaultNicSwitch
ndisIovDeleteVPort
ndisIovFindSwitchBySwitchId
ndisIovFindVFByVFId
ndisIovFindVPortByVPortId
ndisIovFreeVF
ndisIovGetNicSwitchList
ndisIovInitVf
ndisIovInvalidateBlockCompletion
ndisIovIoctlAttach
ndisIovIoctlDetach
ndisIovIoctlEventComplete
ndisIovIoctlInvalidate
ndisIovIoctlNotification
ndisIovReadSwitchConfiguration
ndisIovTeardownVf
ndisIsCompartmentEnumerable
ndisIsCurrentNblContextBlockPreallocated
ndisIsDefaultPortStateOperational
ndisIsFilterAttached
ndisIsMiniportReady
ndisIsMiniportStarted
ndisIsPMProtocolOffloadSupported
ndisIsPossibleSmuggling
ndisIsProtocolABootProtocol
ndisIsSatisfiedByOidGenStatistics
ndisIsSystemBooting
ndisIsValidIfString
ndisIsValidIfStringParts
ndisIsValidMulticastFilter
ndisIsValidPMAdminConfigState
ndisIsValidPMConfig
ndisIsValidPMProtocolOffload
ndisIsValidPmCountedString
ndisIsValidWakeupEnableConfig
ndisIsValidWoLPattern
ndisIsWoLPacketTypeSupported
ndisIterateProtocolBindings
ndisKillReceiveWorkerThreadPool
ndisLWM5IndicateReceive
ndisLWM5PauseMiniport
ndisLWM5RestartMinport
ndisLastNblInNblChain
ndisLegacyProtocolPauseRestartHandler
ndisLegacyRequest
ndisLogMiniportEvent
ndisMAbortPackets
ndisMAbortRequests
ndisMAcquireStInLockWithSpinLock
ndisMAllocSGList
ndisMAllocSGListS
ndisMAllocateMiniportOffload
ndisMAllocateRequest
ndisMBeginNormalMode
ndisMCancelSendNetBufferListsOnMiniport
ndisMCheckPacketAndPad
ndisMCheckReceiveFilterPacketCoalescingAttributes
ndisMCleanupMiniportBlockOnStop
ndisMCoFreeResources
ndisMCoIndicateReceiveNdisPacketToNdisPacket
ndisMCoIndicateReceiveNdisPacketToNetBufferLists
ndisMCoIndicateReceiveNetBufferListsToNdisPacket
ndisMCoIndicateReceiveNetBufferListsToNetBufferLists
ndisMCoOidRequestToRequest
ndisMCoSendCompleteToNdisPacket
ndisMCoSendCompleteToNetBufferLists
ndisMCoSendNetBufferListsCompleteToNdisPackets
ndisMCoSendNetBufferListsCompleteToNetBufferLists
ndisMCommonHaltMiniport
ndisMCopyFromPacketToBuffer
ndisMDeQueueWorkItem
ndisMDeferredDpc
ndisMDeferredReturnPackets
ndisMDeferredSend
ndisMDeferredSendPackets
ndisMDeferredSendPacketsSG
ndisMDeferredSendSG
ndisMDeleteMiniportBlockOnRemove
ndisMDereferenceIfBlock
ndisMDereferenceOpenLocked
ndisMDereferenceOpenUnlocked
ndisMDeregisterBugCheckHandler
ndisMDirectOidRequest
ndisMDisableInitMode
ndisMDispatchReceiveNetBufferLists
ndisMDispatchReceiveNetBufferListsWithLock
ndisMDoDirectOidRequest
ndisMDoMiniportOp
ndisMDoOidRequest
ndisMDoProtocolRequest
ndisMDpc
ndisMDpcX
ndisMDummyIndicatePacket
ndisMEmitTraceRundown
ndisMFailRequests
ndisMFakeDirectOidRequest
ndisMFakeOidRequest
ndisMFakeRequest
ndisMFakeReset
ndisMFakeSend
ndisMFakeSendNetBufferLists
ndisMFakeSendPackets
ndisMFakeWanSend
ndisMFindNumaDistances
ndisMFindNumaNode
ndisMFinishClose
ndisMFinishQueuedPendingOpen
ndisMFreeSGList
ndisMGetLogData
ndisMHaltMiniport
ndisMHandleNDKPnPEvents
ndisMIndicateHDSplitChange
ndisMIndicateNetBufferListsToOpen
ndisMIndicateNicSwitchCapsChange
ndisMIndicateOffloadChange
ndisMIndicatePMCapabilities
ndisMIndicatePMHardwareCapabilities
ndisMIndicatePMOffloadReject
ndisMIndicatePacket
ndisMIndicatePacketsToNetBufferLists
ndisMIndicateQosParametersChange
ndisMIndicateReceiveFilterCapsChange
ndisMIndicateReceiveNblsWithThrottling
ndisMIndicateSplitNblChain
ndisMIndicateTcpConnectionOffloadChange
ndisMIndicateWoLPatternReject
ndisMInitializeAdapter
ndisMInitializeInitMode
ndisMInitializeMiniportBlock
ndisMInitializeMiniportBlockFront
ndisMInvokeCancelDirectOidRequest
ndisMInvokeCancelOidRequest
ndisMInvokeCheckForHang
ndisMInvokeDevicePnPEventNotifyHandler
ndisMInvokeDirectOidRequest
ndisMInvokeDriverUnload
ndisMInvokeFilterResourceRequirements
ndisMInvokeHalt
ndisMInvokeInitialize
ndisMInvokeOidRequest
ndisMInvokePause
ndisMInvokeRemoveDevice
ndisMInvokeReset
ndisMInvokeRestart
ndisMInvokeSetOptions
ndisMInvokeShutdown
ndisMInvokeStartDevice
ndisMIsLoopbackNetBuffer
ndisMIsLoopbackPacket
ndisMIsr
ndisMKillOpen
ndisMLoopbackNetBufferLists
ndisMLoopbackPacketX
ndisMNotifyMachineName
ndisMOidRequest
ndisMOidRequestCompleteInternal
ndisMOidRequestToRequest
ndisMOpenAdapter
ndisMPeriodicPendingReceives
ndisMPeriodicReceivesResources
ndisMPowerPolicy
ndisMProcessDeferred
ndisMProcessResetRequested
ndisMProcessSGList
ndisMProcessSGListS
ndisMQueueNewWorkItem
ndisMQueueOidRequest
ndisMQueueReceiveNetBufferLists
ndisMQueueWorkItem
ndisMQueuedAllocateSharedHandler
ndisMQueuedFinishClose
ndisMQueuedFreeSharedHandler
ndisMReadPciPropertiesFromConfigSpace
ndisMReferenceIfBlock
ndisMReferenceOpen
ndisMRegisterBugCheckHandler
ndisMRejectSend
ndisMRejectSendPackets
ndisMReleaseStInLockAndSpinLock
ndisMReset
ndisMResetCompleteStage1
ndisMResetCompleteStage2
ndisMResetMiniportInternal
ndisMRestoreFilterSettings
ndisMRestoreOpenHandlers
ndisMSend
ndisMSendCompleteNetBufferListsInternal
ndisMSendCompleteNetBufferListsToOpen
ndisMSendCompletePacketToNetBufferLists
ndisMSendCompleteSG
ndisMSendCompleteX
ndisMSendNBLToMiniport
ndisMSendNetBufferListsCompleteInternal
ndisMSendNetBufferListsCompleteToNdisPackets
ndisMSendNetBufferListsToPackets
ndisMSendPacketCompleteToOpen
ndisMSendPackets
ndisMSendPacketsSGToMiniport
ndisMSendPacketsToMiniport
ndisMSendPacketsToNetBufferLists
ndisMSendPacketsXToMiniport
ndisMSetGeneralAttributes
ndisMSetHDSplitAttributes
ndisMSetIndicatePacketHandler
ndisMSetNDKAttributes
ndisMSetNative802_11Attributes
ndisMSetNicSwitchAttributes
ndisMSetOffloadAttributes
ndisMSetQosAttributes
ndisMSetReceiveFilterAttributes
ndisMSetRssCapabilities
ndisMSetSriovAttributes
ndisMShutdownMiniport
ndisMStartInitMode
ndisMStartWanSends
ndisMSwapOpenHandlers
ndisMTimerDpc
ndisMTimerDpcX
ndisMTimerObjectDpc
ndisMTopReceiveNetBufferLists
ndisMTransferData
ndisMUnload
ndisMUnloadEx
ndisMUpdateNameOnPMWakePacket
ndisMValidatePMWakePacket
ndisMValidatePMWakeReason
ndisMWakeUpDpc
ndisMWakeUpDpcX
ndisMWanSend
ndisMapOpenByName
ndisMarkNetBufferListCorrelationIdsAsUsed
ndisMediaDisconnectComplete
ndisMediaDisconnectTimeout
ndisMediaDisconnectWorker
ndisMergeEncapsulations
ndisMergeOffloadCapsAndRegistry
ndisMethodDeviceOid
ndisMiniportDpc
ndisMiniportIsr
ndisMiniportMessageIsr
ndisMiniportPostAddWOLPattern
ndisMiniportPostAddWakeUpPattern
ndisMiniportPostRemoveWoLPattern
ndisMiniportPreAddProtocolOffload
ndisMiniportPreAddWoLPattern
ndisMiniportPreRemoveWOLPattern
ndisMoveLinkedList
ndisNDKCleanup
ndisNDKGlobalDisabled
ndisNDKHandleWmiChangeRequest
ndisNDKWmiGetAdapterCapabilities
ndisNblTrackerDeleteTracker
ndisNblTrackerHandleFromNdisObjectHandle
ndisNblTrackerInitialize
ndisNblTrackerPrintComponentNameToDebugger
ndisNblTrackerReadConfiguration
ndisNblTrackerRecordEvent
ndisNblTrackerTransferOneNbl
ndisNblTrackerTransferOwnershipInternal
ndisNblTrackerTransferOwnershipSingleNbl
ndisNblTrackerUpdateOwnershipCount
ndisNdkPcwAddCounter
ndisNdkPcwCollectData
ndisNdkPcwCollectMiniportStats
ndisNdkPcwEnumerateInstances
ndisNdkPcwMiniportCleanup
ndisNdkPcwProviderCallback
ndisNdkPcwRemoveCounter
ndisNetBufferToPacket
ndisNicActiveAcquire
ndisNicActiveHandleCleanup
ndisNicActiveRelease
ndisNicActiveRequestComplete
ndisNicQuietCheckRef
ndisNicQuietRequestComplete
ndisNicQuietWaitWakeComplete
ndisNotifyAfRegistration
ndisNotifyBindFailure
ndisNotifyBindFailureOnAllProtocols
ndisNotifyBindFailureOnIteratedProtocol
ndisNotifyDevicePowerStateChange
ndisNotifyMiniports
ndisNotifyWmiBindUnbind
ndisNsiChangeInterfaceInfo
ndisNsiChangeNetworkInfo
ndisNsiClientParameterChangeHandler
ndisNsiDeregisterChangeNotification
ndisNsiEnumerateAllCompartments
ndisNsiEnumerateAllIfRcvAddresses
ndisNsiEnumerateAllIfRcvAddressesInOneInterface
ndisNsiEnumerateAllIfStackEntries
ndisNsiEnumerateAllIfStackEntriesFull
ndisNsiEnumerateAllInterfaceInformation
ndisNsiEnumerateAllInvertedIfStackEntries
ndisNsiEnumerateAllNetworks
ndisNsiEnumerateAllSessionInformation
ndisNsiGetAllIfRcvAddress
ndisNsiGetAllInterfaceInformation
ndisNsiGetAllSessionInformation
ndisNsiGetAllThreadInformation
ndisNsiGetCompartmentIdForGuid
ndisNsiGetCompartmentInfo
ndisNsiGetIfNameForIfIndex
ndisNsiGetIfRcvAddress
ndisNsiGetIfRcvAddressRodInformation
ndisNsiGetInterfaceInformation
ndisNsiGetInterfaceRodEnumObject
ndisNsiGetInterfaceRodInformation
ndisNsiGetInterfaceRosEnumObject
ndisNsiGetInterfaceRosInformation
ndisNsiGetInterfaceRwInformation
ndisNsiGetNetworkInfo
ndisNsiGetTopIfBlockForRequest
ndisNsiGetTopIfBlockFromMiniport
ndisNsiNotifyClientCompartmentChange
ndisNsiNotifyClientInterfaceChange
ndisNsiNotifyClientNetworkChange
ndisNsiPostGetInterfaceRodInformation
ndisNsiProviderAttachNsiClient
ndisNsiProviderCleanupNsiClientContext
ndisNsiProviderDetachNsiClient
ndisNsiQueuedIfBlockRodChangeNotification
ndisNsiRegisterChangeNotification
ndisNsiScheduleIfBlockRodChangeNotification
ndisNsiSetAllCompartment
ndisNsiSetAllNetworkInfo
ndisNsiSetAllSessionInformation
ndisNsiSetAllThreadInformation
ndisNsiSetInterfaceInformation
ndisNsiSetNetworkInfo
ndisNsiSyncMiniportMediaConnectStateNotification
ndisNsiSyncMiniportOperStatusNotification
ndisNumDataBytesInNblChain
ndisNumNblsInNblChain
ndisOidGetStatisticAllProcessors
ndisOidPMAddRemove
ndisOidPMRemove
ndisOidPostAddPMProtocolOffload
ndisOidPostCurrentLookahead
ndisOidPostEnableWakeUp
ndisOidPostEthMulticastList
ndisOidPostEthMulticastOid
ndisOidPostIovAllocateVF
ndisOidPostIovCreateVPort
ndisOidPostIovDeleteVPort
ndisOidPostIovFreeVF
ndisOidPostIovNicSwitchParameters
ndisOidPostIovVPortParameters
ndisOidPostLinkSpeed
ndisOidPostMaxLookahead
ndisOidPostMediaState
ndisOidPostMiniportSetEncapsulation
ndisOidPostMiniportStats
ndisOidPostOffloadEncapsulation
ndisOidPostOpenSetEncapsulation
ndisOidPostPMAddWOLPattern
ndisOidPostPMParameters
ndisOidPostPMRemoveWOLPattern
ndisOidPostPacketFilter
ndisOidPostRSSParameters
ndisOidPostRcvFilterAllocateQueue
ndisOidPostRcvFilterClearFilter
ndisOidPostRcvFilterFreeQueue
ndisOidPostRcvFilterMoveFilter
ndisOidPostRcvFilterQueueParameters
ndisOidPostRcvFilterSetFilter
ndisOidPostRemovePMProtocolOffload
ndisOidPostStatistics
ndisOidPostTaskOffload
ndisOidPostTcpConnectionOffloadParameters
ndisOidPostWakeUpPatternList
ndisOidPostWolPatternList
ndisOidPreAddPMProtocolOffload
ndisOidPreAddWakeUpPattern
ndisOidPreCurrentLookahead
ndisOidPreDriverVersion
ndisOidPreEnableWakeUp
ndisOidPreEnumeratePorts
ndisOidPreEthAddress
ndisOidPreEthMulticastList
ndisOidPreEthMulticastOid
ndisOidPreFriendlyName
ndisOidPreGenStats
ndisOidPreGetPMProtocolOffload
ndisOidPreGetPciDeviceCustomProperties
ndisOidPreHDSplitCurrentConfig
ndisOidPreIovAllocateVF
ndisOidPreIovBarResources
ndisOidPreIovCaps
ndisOidPreIovCreateNicSwitch
ndisOidPreIovCreateVPort
ndisOidPreIovDeleteNicSwitch
ndisOidPreIovDeleteVPort
ndisOidPreIovEnumNicSwitches
ndisOidPreIovEnumVFs
ndisOidPreIovEnumVPorts
ndisOidPreIovFreeVF
ndisOidPreIovGetVFVendorDeviceId
ndisOidPreIovInvalidateConfigBlock
ndisOidPreIovNicSwitchParameters
ndisOidPreIovPfLuid
ndisOidPreIovProbedBars
ndisOidPreIovReadVFConfigBlock
ndisOidPreIovReadVFConfigSpace
ndisOidPreIovResetVF
ndisOidPreIovSetVFPowerState
ndisOidPreIovVFParameters
ndisOidPreIovVPortParameters
ndisOidPreIovVfSerialNumber
ndisOidPreIovWriteVFConfigBlock
ndisOidPreIovWriteVFConfigSpace
ndisOidPreLinkSpeedAndMediaState
ndisOidPreLinkState
ndisOidPreMacAddress
ndisOidPreMacOptions
ndisOidPreMaxFrameOrTotalSize
ndisOidPreMaxLinkSpeed
ndisOidPreMaxListSize
ndisOidPreMaxLookahead
ndisOidPreMediaInUse
ndisOidPreMiniportSetEncapsulation
ndisOidPreMiniportStats
ndisOidPreNdisIfOidQuery
ndisOidPreNicSwitchCaps
ndisOidPreOffloadCaps
ndisOidPreOffloadEncapsulation
ndisOidPreOffloadHwCaps
ndisOidPreOpenSetEncapsulation
ndisOidPrePMAddWOLPattern
ndisOidPrePMCapabilities
ndisOidPrePMCurrentCapabilities
ndisOidPrePMHaltOnSuspend
ndisOidPrePMHardwareCapabilities
ndisOidPrePMParameters
ndisOidPrePMProtocolOffloadList
ndisOidPrePMRemoveWOLPattern
ndisOidPrePMWOLPatternList
ndisOidPrePacketFilter
ndisOidPrePhysicalMedium
ndisOidPrePnPCapabilities
ndisOidPrePortState
ndisOidPreProtocolOptions
ndisOidPreQosCapabilities
ndisOidPreQosGetParameters
ndisOidPreQosSetParameters
ndisOidPreQueryOffloadEncapsulation
ndisOidPreQueryTcpConnectionParameters
ndisOidPreRSSCaps
ndisOidPreRSSParameters
ndisOidPreRcvFilterAllocateQueue
ndisOidPreRcvFilterAllocationComplete
ndisOidPreRcvFilterClearFilter
ndisOidPreRcvFilterEnumFilters
ndisOidPreRcvFilterEnumQueues
ndisOidPreRcvFilterFreeQueue
ndisOidPreRcvFilterGlobalParameters
ndisOidPreRcvFilterMoveFilter
ndisOidPreRcvFilterParameters
ndisOidPreRcvFilterQueueParameters
ndisOidPreRcvFilterSetFilter
ndisOidPreReceiveFilterCaps
ndisOidPreRemovePMProtocolOffload
ndisOidPreRemoveWakeUpPattern
ndisOidPreSetHDSplitParameters
ndisOidPreSetOffloadEncapsulation
ndisOidPreSetPortAuthentication
ndisOidPreStatistics
ndisOidPreSupportedList
ndisOidPreTaskOffload
ndisOidPreTcpConnectionOffload
ndisOidPreTcpConnectionOffloadHwCaps
ndisOidPreTcpConnectionOffloadParameters
ndisOidPreWakeUpPatternList
ndisOidRequestComplete
ndisOidSendToMiniportDirect
ndisOidTranslateBetweenOids
ndisOpenCancelSendNetBufferLists
ndisOpenIndicatePMCapabilities
ndisOpenProtocolSubkey
ndisOpenULongRef
ndisPMAddProtocolOffload
ndisPMAddRemoveAsync
ndisPMAddWOLPattern
ndisPMPatternIdExist
ndisPMRejectAsync
ndisPacketToNetBuffer
ndisPadShortPacket
ndisPauseFilter
ndisPauseFilterStack
ndisPauseMiniport
ndisPauseMiniportStack
ndisPcwAddCounter
ndisPcwAddEvent
ndisPcwAddSinglePhysicalInstance
ndisPcwCollectData
ndisPcwCollectPhysicalData
ndisPcwCollectSingleInstance
ndisPcwDeleteConsumer
ndisPcwEndCycleCounter
ndisPcwEnumerateInstances
ndisPcwEnumerateSingleInstance
ndisPcwGetCpu
ndisPcwGetInstanceName
ndisPcwGetMiniportDataBlock
ndisPcwGetMiniportDataBlockInternal
ndisPcwGetMiniportInstanceId
ndisPcwGetMiniportName
ndisPcwGetReferencesForConsumer
ndisPcwIncludeMiniport
ndisPcwMatchInstance
ndisPcwNotifyMiniportRemoval
ndisPcwQueryPcfMatchCount
ndisPcwReferenceMiniportDataBlock
ndisPcwRemoveCounter
ndisPcwStartCycleCounter
ndisPcwUpdateMiniportDataBlock
ndisPcwUpdatePhysicalMiniportCounters
ndisPeriodicReceivesAddCpu
ndisPeriodicReceivesTimer
ndisPeriodicReceivesWorker
ndisPhysicalNicPcwProviderCallback
ndisPmHaltMiniport
ndisPmInitializeMiniport
ndisPnPAddDevice
ndisPnPCancelRemoveDevice
ndisPnPDispatch
ndisPnPHandlePagingIrp
ndisPnPIrpCancelRemove
ndisPnPIrpCancelStop
ndisPnPIrpDeviceUsageNotification
ndisPnPIrpFilterResourceRequirements
ndisPnPIrpQueryCapabilities
ndisPnPIrpQueryInterface
ndisPnPIrpQueryPnPDeviceState
ndisPnPIrpQueryRemove
ndisPnPIrpQueryStop
ndisPnPIrpRemoveDevice
ndisPnPIrpStartDevice
ndisPnPIrpStopDevice
ndisPnPIrpSurpriseRemoval
ndisPnPNotifyAllTransports
ndisPnPNotifyBinding
ndisPnPPortActivation
ndisPnPPortDeactivation
ndisPnPQueryRemoveDevice
ndisPnPQuerySriovInterface
ndisPnPQueryStopDevice
ndisPnPRemoveDevice
ndisPnPRemoveDeviceEx
ndisPnPStartDevice
ndisPopulateRssProcessorSet
ndisPostOffloadAdminSettings
ndisPostOpenSetMulticastList
ndisPostRemoveMiniportWakeUpPattern
ndisPostSetAddWakeUpPattern
ndisPostSetMiniportRSSParameters
ndisPostSetOpenPacketFilter
ndisPostSetOpenRSSParameters
ndisPostSetRemoveWakeUpPattern
ndisPowerDispatch
ndisPowerIrpWorker
ndisPowerSaveClearStop
ndisPowerSaveStop
ndisPowerStateCallback
ndisPowerSuspendRequestComplete
ndisPplCreatePool
ndisPplDestroyPool
ndisPplLazyInitializeLookaside
ndisPreOffloadAdminSettings
ndisPreProcessOid
ndisPreQueryPMParameters
ndisPreRemoveMiniportWakeUpPattern
ndisPreRemoveOpenWakeUpPattern
ndisPreSetPMParameters
ndisPreTaskOffloadQuery
ndisPreTaskOffloadSet
ndisPrepForLowPower
ndisProcessRequestAsync
ndisProtocolAlreadyBound
ndisQueryBusInterface
ndisQueryCustomGuids
ndisQueryDeviceFlags
ndisQueryDeviceOid
ndisQueryDriverImageName
ndisQueryEnableWakeUp
ndisQueryFilterInstanceHandlers
ndisQueryFilterOffloadCaps
ndisQueryGuidData
ndisQueryGuidDataSize
ndisQueryMediaStatus
ndisQueryMiniportEthMulticastList
ndisQueryMiniportOffloadCaps
ndisQueryMiniportPacketFilter
ndisQueryMiniportRSSParameters
ndisQueryOidList
ndisQueryOpenEnableWakeUp
ndisQueryOpenEthMulticastList
ndisQueryOpenPacketFilter
ndisQueryOpenRSSParameters
ndisQueryPower
ndisQueryPowerCapabilities
ndisQueryPowerComplete
ndisQueryPowerCompleteSystemState
ndisQueryReferenceBusInterface
ndisQuerySetMiniport
ndisQuerySetMiniportDeviceState
ndisQuerySetMiniportEx
ndisQueryStatisticsOids
ndisQuerySupportedGuidToOidList
ndisQueryWakeUpPatternList
ndisQueryWolPatternList
ndisQueueBindWorkitem
ndisQueueDpcWorkItem
ndisQueueFilterOnDriver
ndisQueueMiniportOnDriver
ndisQueueOidRequest
ndisQueueOpenOnMiniport
ndisQueueOpenOnProtocol
ndisQueuePeriodicReceivesTimer
ndisQueuePeriodicReceivesWorkItem
ndisQueuePowerIrp
ndisQueueRequestOnTopAsync
ndisQueueRequestWorkItem
ndisQueueRestoreRequestsOnTop
ndisQueueSendNblsOnMiniport
ndisQueueStackExpansionFallbackNbls
ndisQueueStackExpansionFallbackWorkItem
ndisQueueWorkItem
ndisQueuedCheckAdapterBindings
ndisQueuedCheckForHang
ndisQueuedMiniportDpcWorkItem
ndisQueuedResetMiniport
ndisQueuedRestartFilter
ndisQueuedStatusUnbindAdapter
ndisQueuedUnbindAdapter
ndisQueuedUpdatePMCapabilities
ndisReadBindPaths
ndisReadFilterDriverFilterClass
ndisReadFilterDriverFilterRunType
ndisReadFilterDriverFilterType
ndisReadFilterDriverRegistry
ndisReadFilterDriverUnbindOnAttach
ndisReadFilterDriverUnbindOnDetach
ndisReadMiniportDefaultPortAuthStates
ndisReadMiniportFilterList
ndisReadMiniportMediaSpecificPortAuthStates
ndisReadMiniportSpecificPortAuthStates
ndisReadNDKGlobalFlags
ndisReadOffloadRegistry
ndisReadPMAdminConfigState
ndisReadPMRegistry
ndisReadParameter
ndisReadProtocolBinding
ndisReadRegParameters
ndisReadRegistry
ndisReadRssKeywords
ndisReadSSTimeoutKeywords
ndisReadUpperBindings
ndisReadWriteLockGlobalInit
ndisReceiveQueueingOff
ndisReceiveQueueingOn
ndisReceiveQueueingPaused
ndisReceiveQueueingRestart
ndisReceiveWorkerThread
ndisRecordEvent
ndisRefCountHandleFromRefCountBlock
ndisRefNoCheckMiniportBindWorkItem
ndisReferenceAf
ndisReferenceDriver
ndisReferenceFilterByHandle
ndisReferenceFilterDriverByName
ndisReferenceMiniport
ndisReferenceMiniportByGuid
ndisReferenceMiniportByHandle
ndisReferenceMiniportByHandleForNsi
ndisReferenceMiniportByName
ndisReferenceMiniportByNetLuid
ndisReferenceMiniportNoCheck
ndisReferenceNextUnprocessedMiniport
ndisReferenceNextUnprocessedOpenEx
ndisReferenceOpenByHandle
ndisReferencePackage
ndisReferenceProtocol
ndisReferenceProtocolByName
ndisReferenceRef
ndisReferenceRefNoCheck
ndisReferenceTopMiniportByNameForNsi
ndisReferenceVcPtr
ndisReferenceWithTag
ndisReferenceWithTagStackTrace
ndisRegisterMiniportDriver
ndisRegisterProtocolDriverCommon
ndisReinitializeMiniportBlock
ndisRejectUnsupportedPMOffloads
ndisRejectUnsupportedWoLPatterns
ndisReleaseMiniportFilterPnPLocalLock
ndisReleaseMiniportPnPEventLock
ndisReleaseReadWriteLockX
ndisReleaseStackTrace
ndisRemoveFromNblQueueByCancelId
ndisRemoveOpenFromGlobalList
ndisRemoveOpenWakeUpPattern
ndisRemovePMLowestPriorityEntry
ndisReplayDirectOids
ndisReplaySendNbls
ndisRequestDeviceLowPower
ndisRequestDevicePowerD0
ndisRequestNicActive
ndisRequestNicQuiet
ndisRequestPowerResume
ndisRequestWaitWake
ndisRequestedDevicePowerIrpComplete
ndisResetPMCapabilities
ndisResizeRefCountBlock
ndisResizeRefCountBlockTagged
ndisRestartFilter
ndisRestartFilterStack
ndisRestartMiniport
ndisRestartMiniportFilterStack
ndisRestartMiniportStack
ndisRestoreFilterHandlers
ndisRestoreMiniportHandlers
ndisReturnNblWithPowerQueue
ndisReturnNetBufferListsInternal
ndisReturnNetBufferListsToPackets
ndisReturnPacketToMiniport
ndisReturnPacketToNetBufferList
ndisReturnPeriodicReceives
ndisReturnQueuedLowPowerNbls
ndisRollbackPortActivation
ndisRollbackPortDeactivation
ndisSSGetCachedOidValue
ndisSSGetOidCacheEntry
ndisSSIdleTimerDpc
ndisSSIdleTimerWorkItem
ndisSSInvalidateOidCache
ndisSSUpdateCounters
ndisSSUpdateOidCacheValue
ndisSaveParameters
ndisScheduleD0CompleteSignalWorkItem
ndisScheduleStartDeviceWorkItem
ndisScheduleWorkItemInternal
ndisSelectiveSuspendClearStop
ndisSelectiveSuspendFree
ndisSelectiveSuspendInitialize
ndisSelectiveSuspendResumeOperations
ndisSelectiveSuspendStop
ndisSendCompleteWithPause
ndisSendNBLToFilter
ndisSendPacketsWithPause
ndisSendWithPause
ndisSetAddWakeUpPattern
ndisSetAllFilterDefaultParameters
ndisSetBusyAsync
ndisSetBusySync
ndisSetDeviceInterfaceState
ndisSetDeviceNames
ndisSetDevicePower
ndisSetDevicePowerDownComplete
ndisSetDevicePowerOnComplete
ndisSetEnableWakeUp
ndisSetFilterDefaultParameter
ndisSetIdleTimer
ndisSetMediaDisconnectTimer
ndisSetMiniportEnableWakeUp
ndisSetMiniportEthMulticastList
ndisSetMiniportHandlers
ndisSetMiniportPacketFilter
ndisSetMiniportRSSParameters
ndisSetNDKHandlers
ndisSetOpenAddWakeUpPattern
ndisSetOpenEnableWakeUp
ndisSetOpenEthAddDeleteMulticast
ndisSetOpenEthMulticastList
ndisSetOpenPacketFilter
ndisSetOpenRSSParameters
ndisSetOpenToTranslationMode
ndisSetPerfTrackParameters
ndisSetPower
ndisSetPowerResume
ndisSetPowerResumeComplete
ndisSetPowerResumeCompleteWorkItem
ndisSetPowerSuspend
ndisSetReceiveFilter
ndisSetRemoveWakeUpPattern
ndisSetRestoreMulticastList
ndisSetRestorePacketFilter
ndisSetSSHandlers
ndisSetStatusInNblChain
ndisSetSystemPower
ndisSetSystemPowerNotificationHandlers
ndisSetSystemPowerOnComplete
ndisSetTaskOffloadValidate
ndisSetTempRefTimer
ndisSetWakeUpTimer
ndisSetupDownwardHandlers
ndisSetupLwfMiniportHandlers
ndisSetupMiniportProtocolHandlers
ndisSetupNdis6OpenHandlers
ndisSetupNoFilterHandlers
ndisSetupUpwardHandlers
ndisSetupWmiNode
ndisShouldSuppressReceiveFilterCapabilities
ndisSignalD0CompleteWorkItem
ndisSignalD0RequestComplete
ndisSortNetBufferLists
ndisSortRssProcessors
ndisSourceHandleFromOwner
ndisSourcePreAddProtocolOffload
ndisSourcePreAddWoLPattern
ndisSplitStatisticsOids
ndisSqmAddToStream
ndisSqmCallback
ndisSqmGetMiniportName
ndisSqmGetNicInfo
ndisSqmGetPhysicalMiniportInfo
ndisSqmIsCommonInboxDriver
ndisSqmLogDriverVersion
ndisSqmReadKeywords
ndisSqmSetDWord
ndisSqmTimerDPCRoutine
ndisSqmTimerWorkerRoutine
ndisSriovGetResourceForBar
ndisSriovInterfaceDereference
ndisSriovInterfaceGetDeviceLocation
ndisSriovInterfaceGetVendorAndDeviceIds
ndisSriovInterfaceQueryProbedBars
ndisSriovInterfaceReadVFConfig
ndisSriovInterfaceReadVfConfigBlock
ndisSriovInterfaceReference
ndisSriovInterfaceResetVF
ndisSriovInterfaceSetVfPowerState
ndisSriovInterfaceWriteVFConfig
ndisSriovInterfaceWriteVfConfigBlock
ndisSriovQueryLuid
ndisStackExpansionFallbackWorker
ndisStartDeviceSynchronous
ndisStartDeviceWorkItem
ndisStartMapping
ndisStartNsiClient
ndisStartNsiProvider
ndisSubmitIdleRequest
ndisSwapFilterHandlers
ndisSwapMiniportHandlers
ndisSwitchMiniportReceiveFunction
ndisSynchReturnPacketsForTranslation
ndisTempRefTimerDpc
ndisThreadPoolTimerHandler
ndisTopTcpConnectionOffloadStatus
ndisTraceDelayStopRoutine
ndisTraceDpcEnd
ndisTraceDpcStart
ndisTracePeriodicRcvOnOff
ndisTracePeriodicReceivesEnd
ndisTracePeriodicReceivesStart
ndisTraceQueueWorkItem
ndisTraceRcv
ndisTraceRundownDeviceControl
ndisTraceRundownStopTraceWorkItem
ndisTraceWorkItemExecEnd
ndisTraceWorkItemExecStart
ndisTranslateOffloadSetsToTasks
ndisTranslateResources
ndisUnbindProtocol
ndisUnexpectedAoAcError
ndisUnexpectedSsError
ndisUnicodeStringToPointer
ndisUnloadPeriodicReceives
ndisUnprocessAllMiniports
ndisUnprocessAllOpens
ndisUnsetNdis6OpenHandlers
ndisUpdateAndIndicatePMCapabilities
ndisUpdateCheckForLoopbackFlag
ndisUpdateHDSplitKeyword
ndisUpdateLoopbackOpens
ndisUpdateMinimumStackVersion
ndisUpdateMiniportPortStates
ndisUpdateNoPauseOnSuspend
ndisUpdateOffloadKeywords
ndisUpdateOperationalStatus
ndisUpdatePMCurrentCapabilities
ndisUpdatePMCurrentParameters
ndisUpdateRcvFilterQueueParameters
ndisUpdateStringIfChanged
ndisUpdateWmiPMParamsForPatterns
ndisUpdateWmiPMParamsForProtocolOffloads
ndisValidComponentId
ndisValidOid
ndisValidate60Protocol
ndisValidateConnectionOffload
ndisValidateLegacyProtocols
ndisValidateOffloadCapability
ndisValidateQosParameters
ndisVerifierAllocateMemory
ndisVerifierAllocateMemoryWithTag
ndisVerifierAllocatePacketPool
ndisVerifierAllocatePacketPoolEx
ndisVerifierFreeMemory
ndisVerifierFreePacketPool
ndisVerifierGetRoutineAddress
ndisVerifierInitialization
ndisVerifierInjectResourceFailure
ndisVerifierQueryMapRegisterCount
ndisWMIDispatch
ndisWaitForBindCompletion
ndisWaitForDpcCompletion
ndisWaitForResetCompletion
ndisWaitWakeComplete
ndisWakeUpDevice
ndisWildCardStringMatch
ndisWmiChangeSingleInstance
ndisWmiDisableEvents
ndisWmiEnableEvents
ndisWmiExecuteMethod
ndisWmiFindInstanceName
ndisWmiGetGuid
ndisWmiGuidIsAdapterSpecific
ndisWmiMapOids
ndisWmiQueryAllData
ndisWmiQueryPMActiveCapabilities
ndisWmiQuerySingleInstance
ndisWmiRegister
ndisWmiSetPMAdminConfig
ndisWmiXlateEnumNdisRecvQueuesToWmiRecvQueues
ndisWorkItemHandler
ndisWorkerThread
ndisWppExtendedCallback
ndisWppFastTraceMessage
ndisWriteConfigurationIfPresent
ndisWriteDriverNDISVersionToServiceKey
ndisWritePMAdminConfigState
ndisWriteWmiStatusIndication
ndisXlateAddPacketPatternToWolPatternOid
ndisXlateAddWolPatternToPacketPatternOid
ndisXlateMiniportFlags
ndisXlatePMParametersToWakeUpEnableOid
ndisXlatePnPFlags
ndisXlateRecvNetBufferListsToPacketArray
ndisXlateRecvPacketArrayToNetBufferLists
ndisXlateRemovePacketPatternToWolPatternOid
ndisXlateRemoveWolPatternToPacketPatternOid
ndisXlateReturnNetBufferListToPacket
ndisXlateReturnPacketToNetBufferList
ndisXlateSSResume
ndisXlateSendCompleteNetBufferListToPacket
ndisXlateSendCompletePacketToNetBufferList
ndisXlateSendNetBufferListsToPacketArray
ndisXlateSendPacketArrayToNetBufferLists
ndisXlateWakeUpEnableToPMParametersOid
ndisXlateWakeUpPatternListToWolPatternList
ndisXlateWolPatternListToWakeUpPatternList
ndispConvOffsetToPointer
ndispConvVar
nullCreateFilter
nullDeleteFilter
nullDeleteFilterOpenAdapter
*/

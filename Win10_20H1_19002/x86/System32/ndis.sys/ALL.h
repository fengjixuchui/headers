enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum BINDING_ENABLED_OR_DISABLED;
union _WHEA_PERSISTENCE_INFO;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum PAUSE_OR_RESTART;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum _PS_MITIGATION_OPTION;
struct _LIST_ENTRY;
struct _NDIS_OPEN_BLOCK;
enum _RTL_FEATURE_CONFIGURATION_OPERATION;
enum _RTL_FEATURE_ENABLED_STATE_OPTIONS;
struct _NDIS_OBJECT_HEADER;
struct _NDIS_OFFLOAD_CLIENT_HANDLERS;
enum _NT_PRODUCT_TYPE;
enum _TP_CALLBACK_PRIORITY;
struct _GUID;
class wistd::__compressed_pair<Rtl::KString *,wistd::default_delete<Rtl::KString> >;
class wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >;
struct NDIS_BIND_FILTER_DRIVER;
class KRef<NDIS_BIND_FILTER_DRIVER>::KRefHolder;
enum _RTL_RESOURCE_POLICY_FLAGS;
enum _POOL_TYPE;
enum _EX_POOL_PRIORITY;
struct _NDIS_FRAME_TYPE_AND_OPEN;
struct _NDIS_FRAME_TYPE_RECORD;
enum _EVENT_TYPE;
enum _IO_PRIORITY_HINT;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
enum _DEVICE_POWER_STATE;
enum _DEVICE_WAKE_DEPTH;
enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY;
enum _NDIS_GFT_COUNTER_TYPE;
enum _NDIS_GFT_WILDCARD_ACTION;
enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT;
enum _NDIS_GFT_FLOW_ENTRY_STATE;
struct _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY;
enum _DEVPROPSTORE;
enum _MEMORY_CACHING_TYPE;
struct _ECP_LIST;
struct _ACTIVATION_CONTEXT_STACK;
struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
struct _SINGLE_LIST_ENTRY;
union _SLIST_HEADER;
struct _GENERAL_LOOKASIDE_POOL;
struct _LOOKASIDE_LIST_EX;
enum _WHEA_ERROR_TYPE;
enum _WHEA_ERROR_SEVERITY;
struct _EVENT_DESCRIPTOR;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
struct _NDIS_SPIN_LOCK;
enum _WWAN_SMS_FORMAT;
enum _WWAN_SMS_FLAG;
struct _WWAN_SMS_FILTER;
struct _WWAN_SMS_READ;
enum SCOPE_LEVEL;
enum NL_ADDRESS_TYPE;
struct _DEVPROPKEY;
struct _NDIS_PACKET_PRIVATE;
struct _DISPATCHER_HEADER;
struct _KEVENT;
struct _FAST_MUTEX;
enum DL_ADDRESS_TYPE;
enum _NPI_MODULEID_TYPE;
struct _NETIO_NET_BUFFER_CONTEXT;
struct _TEB_ACTIVE_FRAME_CONTEXT;
enum COMPARTMENT_ID;
union _LARGE_INTEGER;
struct _EVENT_HEADER;
enum _NET_DEVICE_RESET_TYPE;
struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1;
struct _NDIS_IPSEC_OFFLOAD_V1;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2;
struct _NDIS_IPSEC_OFFLOAD_V2;
struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO;
union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO;
struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2;
enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS;
struct _NDIS_RFC6877_464XLAT_OFFLOAD;
struct _NDIS_UDP_SEGMENTATION_OFFLOAD;
struct _NDIS_OFFLOAD;
enum FEATURE_CHANGE_TIME;
enum FEATURE_ENABLED_STATE;
enum wil_FeatureEnabledStateOptions;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _TEB_ACTIVE_FRAME;
struct wistd::default_delete<NDIS_BIND_PROTOCOL_LINK>;
enum wil_details_StagingConfigFeatureFields;
enum wil_details_ServiceReportingOptions;
struct NDIS_MEMORYDUMP_HANDLE__;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
enum wil_ReportingKind;
enum wil_details_ServiceReportingKind;
struct _NDIS_DEVICE_OBJECT_ATTRIBUTES;
enum wil_VariantReportingKind;
struct _PROCESSOR_NUMBER;
struct Rtl::KString;
struct _RTL_SPLAY_LINKS;
enum wil_FeatureEnabledStateKind;
enum wil_FeatureEnabledState;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_NT_HEADERS;
enum wil_FeatureStore;
enum wil_FeatureChangeTime;
enum _OB_OPEN_REASON;
struct _NET_BUFFER_SHARED_MEMORY;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
enum wil_FeatureVariantPayloadKind;
struct _DOT11_SSID;
struct DOT11_SSID_LIST;
enum _NET_PNP_EVENT_CODE;
struct _NET_PNP_EVENT;
enum _RTL_FEATURE_CONFIGURATION_TYPE;
struct _NT_TIB;
struct _CLIENT_ID;
struct _GDI_TEB_BATCH;
struct _UNICODE_STRING;
struct _TEB;
enum _RTL_FEATURE_CONFIGURATION_PRIORITY;
enum wil_details_FeatureTestStateKind;
enum _DOT11_AUTH_ALGORITHM;
enum _DOT11_CIPHER_ALGORITHM;
enum _DOT11_ASSOCIATION_STATE;
enum _DOT11_POWER_MODE;
struct _DOT11_PEER_STATISTICS;
struct _DOT11_PEER_INFO;
struct _NET_BUFFER_LIST_DATA;
enum _EVENT_INFO_CLASS;
struct _TraceLoggingMetadata_t;
enum _TAG_UNNAMED_1;
struct _NDIS_WAN_LINE_DOWN;
struct _NET_BUFFER_LIST_CONTEXT;
enum _NDIS_REQUEST_TYPE;
enum CallRunMode;
struct _LUID;
enum KRegKey::BooleanDisposition;
enum Ndis::BindSource::Flags;
enum NetSetupSubkeyType;
enum BIND_SOURCE_STATE;
struct _EVENT_FILTER_DESCRIPTOR;
struct _RTL_BALANCED_NODE;
enum NDIS_DO_NOT_BIND_REASON;
enum NDIS_PAUSE_REASON;
enum _NET_IF_MEDIA_CONNECT_STATE;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
struct _KNODE;
class wistd::__compressed_pair<NDIS_BIND_FILTER_LINK *,wistd::default_delete<NDIS_BIND_FILTER_LINK> >;
enum _NET_IF_MEDIA_DUPLEX_STATE;
enum _NDIS_MEDIUM;
enum __vc_attributes::event_receiverAttribute::type_e;
struct __vc_attributes::event_receiverAttribute;
struct _NDIS_LOG;
struct wil_details_StagingConfigHeaderProperties;
enum _NDIS_INTERFACE_TYPE;
enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS;
struct _DESCRIPTOR;
struct _KSPECIAL_REGISTERS;
enum _SYSTEM_POWER_STATE;
enum _NDIS_M_PERIODIC_RECEIVE_STATE;
struct _WORK_QUEUE_ITEM;
struct _NDIS_M_PERIODIC_RECEIVES;
enum _NDIS_PNP_DEVICE_STATE;
struct _RTL_AVL_TREE;
class wistd::__compressed_pair<NDIS_BIND_PROTOCOL_LINK *,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >;
enum _NDIS_PHYSICAL_MEDIUM;
enum _NDIS_MINIPORT_STATE;
enum _NDIS_SEND_PATH_TYPE;
enum _NDIS_PORT_CONTROL_STATE;
struct __WIL__WNF_STATE_NAME;
struct _EVENT_DATA_DESCRIPTOR;
enum _NDIS_PORT_AUTHORIZATION_STATE;
enum _INTERFACE_TYPE;
struct _WNF_TYPE_ID;
struct _KSPIN_LOCK_QUEUE;
enum _NET_IF_ADMIN_STATUS;
struct _NDIS_WAN_CO_GET_LINK_INFO;
struct _PENDING_STACK_EXPANSION_FALLBACK_WORK;
enum _NET_IF_OPER_STATUS;
enum _NDIS_MINIPORT_EVENT;
struct _FLOATING_SAVE_AREA;
struct _CONTEXT;
struct _KPROCESSOR_STATE;
struct _KPRCB;
union _NET_LUID_LH;
struct _NDIS_FILTER_INTERFACE;
enum _NDIS_RSS_PROFILE;
enum _NDIS_ENCAPSULATION;
struct _NDIS_ENCAPSULATION_FORMAT;
struct _NDIS_TASK_OFFLOAD_HEADER;
enum _NDIS_PM_WAKE_REASON_TYPE;
enum NetSetupStoreType;
enum _NDIS_FILTER_STATE;
struct _NDIS_FILTER_TASK_OFFLOAD;
enum _NET_IF_ACCESS_TYPE;
enum _IPSEC_OFFLOAD_V2_OPERATION;
struct _IPSEC_OFFLOAD_V2_UPDATE_SA;
struct _NDIS_PHYSICAL_ADDRESS_UNIT;
struct wistd::__invokable_r<void,void (__stdcall*)(NDISWATCHDOG__ *),NDISWATCHDOG__ * &>;
enum _NET_IF_CONNECTION_TYPE;
enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE;
enum NDIS_NDIS5_DRIVER_STATE;
enum _NDIS_DEVICE_POWER_STATE;
enum NDIS_MINIPORT_POLICY_OWNER;
struct _GENERIC_MAPPING;
struct _ACCESS_REASONS;
struct _AUX_ACCESS_DATA;
struct _WWAN_SET_SIGNAL_INDICATION;
struct _NDIS_WWAN_SET_SIGNAL_INDICATION;
enum _PKTMON_PACKET_TYPE;
enum _NDIS_HALT_ACTION;
enum _NDIS_SHUTDOWN_ACTION;
struct _KPROCESS;
struct DOT11_PRIVACY_EXEMPTION;
enum _IO_RATE_CONTROL_TYPE;
struct _OFFLOAD_STATE_HEADER;
struct _PATH_OFFLOAD_STATE_DELEGATED;
struct _ETW_BUFFER_CONTEXT;
enum _KINTERRUPT_POLARITY;
struct _NDIS_POOL_HEADER;
enum _NDIS_RECEIVE_QUEUE_PNP_STATE;
enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE;
enum _JOBOBJECTINFOCLASS;
struct _NDIS_WAN_COMPRESS_INFO;
struct _NDIS_WAN_CO_GET_COMP_INFO;
enum _NDIS_INTERRUPT_TYPE;
enum _NETSETUPPROP_OPERATOR;
struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS;
enum _SECURITY_OPERATION_CODE;
union __m64;
struct _GENERAL_LOOKASIDE;
struct _PAGED_LOOKASIDE_LIST;
enum _NETSETUP_OBJECT_SOURCE;
enum _NL_ECN_CODEPOINT;
enum _NETSETUP_OBJECT_TYPE;
enum TlgIn_t;
enum NetDmaEventTypes;
enum _NDIS_LWFDRV_REFTAG;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WHEA_EVENT_LOG_ENTRY;
struct wistd::__compressed_pair_elem<wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS>,1,1>;
enum _NDIS_NBL_TRACKER_SOURCE;
enum _NDIS_PROCESSOR_VENDOR;
struct _RTL_RB_TREE;
enum _NDIS_DATA_PATH_TYPE;
enum _NETSETUP_ENVIRONMENT_TYPE;
union _WHEA_ERROR_PACKET_FLAGS;
struct _WHEA_ERROR_PACKET_V2;
enum _NDIS_GFP_TABLE_TYPE;
struct _NDIS_MINIPORT_HANDLERS;
struct wistd::__compressed_pair_elem<Rtl::KString *,0,0>;
enum _NDIS_GFP_WILDCARD_MATCH_TYPE;
enum _NDIS_NET_BUFFER_LIST_INFO;
union _WHEA_REVISION;
enum _NETSETUP_QUERY_RESULT_ACTION;
enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _NDIS_PCW_DATA_BLOCK;
enum _WWAN_PACKET_SERVICE_ACTION;
enum _NETSETUP_REASON_BINDING_IS_CRITICAL;
struct _tlgProvider_t;
enum _NDIS_FRAME_HEADER;
enum _PS_WAKE_REASON;
enum wil_FeatureStage;
enum wil_UsageReportingMode;
struct PAGED_OBJECT<1920090443>;
struct _tlgTypeMapBase<unsigned int>;
struct _REFERENCE;
union _ULARGE_INTEGER;
struct _KTIMER;
struct _KDPC;
struct _NDIS_TIMER;
struct _NDIS_PM_WAKE_UP_CAPABILITIES;
struct _NDIS_PNP_CAPABILITIES;
struct _NDIS_PM_CAPABILITIES;
struct _NDIS_PM_PARAMETERS;
struct _DEVICE_CAPABILITIES;
enum _NDIS_WORK_ITEM_TYPE;
struct _NDIS_MINIPORT_WORK_ITEM;
struct _KBUGCHECK_CALLBACK_RECORD;
struct _NDIS_RECEIVE_SCALE_CAPABILITIES;
struct _NDIS_WORK_ITEM;
struct _NDIS_RESTART_GENERAL_ATTRIBUTES;
struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES;
struct _PCI_CAPABILITIES_HEADER;
union _PCI_MSI_MESSAGE_CONTROL;
struct PCI_MSI_CAPABILITY;
struct MSIX_TABLE_POINTER;
struct PCI_MSIX_CAPABILITY;
struct _NDIS_MINIPORT_OFFLOAD_REG;
struct _NDIS_EVENT;
struct _NDIS_PM_ADMIN_CONFIG;
struct _KSEMAPHORE;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_REMOVE_LOCK;
struct _ULONG_REFERENCE;
struct _NDIS_D0_SIGNAL_WORK_ITEM;
struct _VPCI_INVALIDATE_BLOCK_OUTPUT;
class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>;
class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>;
class Rtl::KArray<void *,1>;
class Ndis::BindState;
struct Ndis::BindStack;
class KPushLock;
class KWaitEvent;
class KWorkItem<Ndis::BindEngine>;
struct Ndis::BindEngine;
class Rtl::KNeutralLock<enum NDIS_MINIPORT_POLICY_OWNER>;
struct _IF_PHYSICAL_ADDRESS_LH;
struct WORKITEM_WITH_IRP;
class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> > >;
struct _PKTMON_COMPONENT_CONTEXT;
struct _PKTMON_EDGE_CONTEXT;
struct _NDIS_MINIPORT_BLOCK;
enum _DEVICE_RESET_TYPE;
enum _NDIS_802_11_WEP_STATUS;
enum _FSINFOCLASS;
enum _NDIS_INTERRUPT_MODERATION;
struct _NDIS_LINK_PARAMETERS;
enum _NETSETUP_BINDING_PATH_TYPE;
enum _WWAN_STRUCT_TYPE;
enum _DEVICE_RELATION_TYPE;
enum _REG_NOTIFY_CLASS;
enum _SECURITY_IMPERSONATION_LEVEL;
struct _wil_details_UsageSubscriptionData;
enum _NDIS_PT_REFTAG;
enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT;
enum _NDIS_MSIX_TABLE_CONFIG;
enum __vc_attributes::event_sourceAttribute::type_e;
struct _NDIS_CALL_MANAGER_CHARACTERISTICS;
enum _NDIS_802_11_STATUS_TYPE;
enum _NDIS_NBL_TRACKER_LIFETIME_EVENT;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum CPU_VENDORS;
enum _WWAN_VOICE_CLASS;
enum _NDIS_GFT_FLOW_ENTRY_TYPE;
enum _PKG_TYPE;
enum DEVICE_TEXT_TYPE;
enum TCP_UPLOAD_REASON;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum _POOL_BLOCK_TYPE;
struct DOT11_IBSS_PARAMS;
enum _NDIS_SHARED_MEMORY_USAGE;
enum _IO_ALLOCATION_ACTION;
enum _WWAN_DEVICE_TYPE;
struct _NDIS_NBL_TRACKER_BUCKET;
enum _MODE;
enum _NDIS_IPV6_HEADER_FIELD;
struct _NDIS_GFT_PACKET_COUNTER_VALUE;
struct _NDIS_GFT_BYTE_COUNTER_VALUE;
struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE;
struct _NDIS_GFT_FLOW_STATE;
struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE_AND_STATE;
struct _NDIS_GFT_COUNTER_VALUE;
struct _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER;
enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION;
enum _KINTERRUPT_MODE;
enum _NET_IF_DIRECTION_TYPE;
enum _NDIS_PORT_PNP_STATE;
enum _POWER_STATE_TYPE;
enum _MEMORY_CACHING_TYPE_ORIG;
enum _NDIS_802_11_AUTHENTICATION_MODE;
enum _IRQ_PRIORITY;
struct _IO_RESOURCE_DESCRIPTOR;
struct _IO_RESOURCE_LIST;
enum _TlgBlob_t;
enum _NETSETUP_QUERY_STATE;
struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH;
struct NdisDebugBlock<1282691138>;
struct _NDIS_IF_NETWORK_BLOCK;
enum _NDIS_WDF_CX_DRIVER_STATE;
struct wistd::integral_constant<bool,0>;
enum _SYSTEM_PROCESS_CLASSIFICATION;
struct _KDEVICE_QUEUE_ENTRY;
struct wil::details::resource_policy<unsigned long *,void __stdcall(unsigned long *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned int,2>,unsigned long *,unsigned long *,0,std::nullptr_t>;
enum _NDIS_RECEIVE_QUEUE_TYPE;
enum _KSPIN_LOCK_QUEUE_NUMBER;
struct _NDIS_WDF_CX_CHARACTERISTICS;
struct _KSYSTEM_TIME;
class KRef<NDIS_BIND_FILTER_DRIVER>;
struct NDIS_BIND_FILTER_LINK;
enum _NDIS_PER_PACKET_INFO;
enum _NDIS_WAN_QUALITY;
struct LIST_ENTRY64;
enum _NETSETUP_PNP_DEVICE_CLASS;
struct _TCP_OFFLOAD_STATE_CONST;
enum _NDIS_POWER_PROFILE;
enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION;
struct _flowspec;
enum _NDIS_ENVIRONMENT_TYPE;
struct _NDIS_REQUEST::_DATA::_QUERY_INFORMATION;
struct _NDIS_REQUEST::_DATA::_SET_INFORMATION;
union _NDIS_REQUEST::_DATA;
struct _NDIS_REQUEST;
enum _NDIS_DEVICE_PNP_EVENT;
struct wil_details_StagingConfigWnfStateName;
struct wil_details_StagingConfigUsageTrigger;
struct KALLOCATION_TAG<1920090443,1>;
enum TlgOut_t;
enum _USER_ACTIVITY_PRESENCE;
struct _SECURITY_SUBJECT_CONTEXT;
struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS;
struct _MCGEN_TRACE_CONTEXT;
struct _XSTATE_FEATURE;
struct _XSTATE_CONFIGURATION;
struct _KUSER_SHARED_DATA;
enum INDICATE_OFFLOAD_EVENT;
enum _NDIS_PORT_TYPE;
struct _NDIS_802_11_SSID;
struct _NDIS_802_11_NON_BCAST_SSID_LIST;
struct LIST_ENTRY32;
struct NDIS_BIND_PROTOCOL_DRIVER;
struct wil::details::resource_policy<void *,long (__stdcall*)(void *),&ZwClose,wistd::integral_constant<unsigned int,0>,void *,void *,0,std::nullptr_t>;
struct _NDIS_OID_REQUEST_FLAGS;
enum _TRACE_INFORMATION_CLASS;
struct _LUID_AND_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES;
enum _WWAN_AUTH_METHOD;
struct _WWAN_AUTH_SIM_CHALLENGE;
struct _WWAN_AUTH_AKA_CHALLENGE;
struct _WWAN_AUTH_AKAP_CHALLENGE;
struct _WWAN_AUTH_CHALLENGE;
struct _NDIS_WWAN_AUTH_CHALLENGE;
enum _EXCEPTION_DISPOSITION;
enum _NDIS_PARAMETER_TYPE;
enum NDIS_CHIMNEY_OFFLOAD_TYPE;
struct _DOT11_WFD_ATTRIBUTES;
enum _NDIS_MPIF_REFTAG;
struct _NDIS_IF_PROVIDER_BLOCK;
struct wil_details_StagingConfig;
enum TCP_OFFLOAD_EVENT_TYPE;
struct _DOT11_VWIFI_COMBINATION;
struct DOT11_VWIFI_ATTRIBUTES;
enum TCP_OFFLOAD_CONNECTION_STATE;
enum _NDIS_BIND_FILTER_FLAGS;
enum _PERFINFO_MM_STAT;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
struct _CM_RESOURCE_LIST;
struct _CURDIR;
struct _STRING;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_USER_PROCESS_PARAMETERS;
enum OFFLOAD_STATE_TYPE;
enum _WWAN_REGISTER_ACTION;
class KAutoEvent;
enum _NDIS_NSI_REFTAG;
enum _WWAN_CONTEXT_TYPE;
class wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(unsigned long *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned int,2>,unsigned long *,unsigned long *,0,std::nullptr_t> >;
enum _WWAN_COMPRESSION;
enum _WWAN_AUTH_PROTOCOL;
struct _NDK_SHARED_ENDPOINT_DISPATCH;
struct _FILE_OBJECT;
enum _NDIS_IF_REFTAG;
enum PDCCLIENTID;
struct DOT11_EXTSTA_ATTRIBUTES;
enum _WWAN_SMS_CDMA_ENCODING;
enum _WWAN_SMS_CDMA_LANG;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET;
struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD;
union _NDIS_OID_REQUEST::_REQUEST_DATA;
struct _NDIS_OID_REQUEST;
struct _ACTIVATION_CONTEXT;
enum _NDK_RDMA_TECHNOLOGY;
struct _NDIS_REFCOUNT_STACK_ENTRY;
struct _NDIS_REFCOUNT_STACK_BLOCK;
struct _NDIS_REFCOUNT_WITH_STACK;
struct KDefaultRegion;
enum _WWAN_PIN_MODE;
struct _NDIS_PD_QUEUE;
enum _WWAN_PIN_FORMAT;
enum _HV_EXT_EPF_MODE;
enum _MM_PAGE_PRIORITY;
struct _TP_POOL;
enum _WWAN_READY_STATE;
enum _WWAN_EMERGENCY_MODE;
struct _DRIVER_EXTENSION;
enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;
struct _TP_CALLBACK_ENVIRON_V3;
enum NDIS_PD_COUNTER_TYPE;
enum _NDIS_MDRV_REFTAG;
struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2;
enum _NDIS_NBL_TRACKER_MODE;
enum _VRF_TRIAGE_CONTEXT;
struct _WWAN_SMS_SEND_PDU;
struct _WWAN_SMS_SEND_CDMA;
struct _WWAN_SMS_SEND;
struct _NDIS_WWAN_SMS_SEND;
enum _NDIS_RECEIVE_FILTER_TYPE;
enum _NDK_OBJECT_TYPE;
struct _tlgWrapperBinary;
enum ReplacesCorHdrNumericDefines;
struct __WIL__WNF_TYPE_ID;
struct _NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION;
enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE;
struct _NDIS_IF_PROVIDER_CHARACTERISTICS;
enum PDC_ACTIVITY_TYPE;
struct NDK_VERSION;
struct _NDK_OBJECT_HEADER_RESERVED_BLOCK;
struct _NDK_OBJECT_HEADER;
struct _NDK_CONNECTOR;
enum _NDIS_QOS_SQ_TYPE;
struct _WAIT_CONTEXT_BLOCK;
struct _KDEVICE_QUEUE;
struct _DEVICE_OBJECT;
enum _NDIS_ARP_HEADER_FIELD;
enum _NDIS_MP_REFTAG;
struct _NDIS_NIC_SWITCH_CAPABILITIES;
enum NdisIfBlockSource;
union wil_details_ReportedState;
enum _NDIS_NSI_INTERFACE_PURPOSE;
enum _NDIS_LWF_REFTAG;
enum DMA_COMPLETION_STATUS;
enum _NDIS_FPNP_REFTAG;
enum _NDIS_CLASS_ID;
enum _DOT11_DIVERSITY_SUPPORT;
struct _NDIS_NBL_TRACKER;
enum _NDIS_GFT_PROFILE_TYPE;
enum Ndis::ReadBindingsOptions::Flags;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE;
enum NDIS_PD_CONTROL_TYPE;
enum NDIS_PD_QUEUE_CONTROL_CODE;
struct wil_details_StagingConfigFeature;
enum NDIS_PD_PROVIDER_CONTROL_CODE;
struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO;
struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION;
enum _NDIS_TASK;
enum _NDIS_PM_WOL_PACKET;
struct _NET_BUFFER_LIST_POOL_PARAMETERS;
enum _WWAN_ACTIVATION_COMMAND;
enum _WWAN_IP_TYPE;
enum _WWAN_PSMEDIA_PREFERENCE;
enum _WWAN_CONFIGURATION_SOURCE;
struct _REFERENCE_EX;
struct _NDIS_FILTER_DRIVER_CHARACTERISTICS;
struct _NDIS_FILTER_DRIVER_BLOCK;
enum _NDIS_802_11_NETWORK_TYPE;
class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned int,2>,wil::details::kspin_lock_saved_irql,unsigned long *,0,std::nullptr_t> > >;
struct _PEB;
enum _NDIS_802_11_NETWORK_INFRASTRUCTURE;
struct wil_details_RecordUsageResult;
enum _DOT11_PHY_TYPE;
enum _DMA_WIDTH;
struct _NDIS_PD_COUNTER_PARAMETERS;
enum _DMA_SPEED;
enum NDIS_PD_QUEUE_TYPE;
struct _NDIS_802_11_AI_RESFI;
enum __vc_attributes::moduleAttribute::type_e;
class KCriticalRegion;
struct _NDIS_PORT_CHARACTERISTICS;
struct _NDIS_PORT_BLOCK;
enum __vc_attributes::aggregatableAttribute::type_e;
struct _SYSTEM_POWER_STATE_CONTEXT;
struct _RECORDER_LOG_CREATE_PARAMS;
struct _PEB_LDR_DATA;
enum __vc_attributes::threadingAttribute::threading_e;
struct _NDIS_PACKET_EXTENSION;
enum __vc_attributes::helper_attributes::usageAttribute::usage_e;
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;
enum __vc_attributes::event_sourceAttribute::optimize_e;
enum _NDIS_PROCESSOR_TYPE;
enum _NDIS_RECEIVE_FILTER_TEST;
enum _NET_DEVICE_POWER_STATE;
struct _NDIS_GFT_TABLE_INFO;
enum _FILE_INFORMATION_CLASS;
enum BUS_QUERY_ID_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum POWER_ACTION;
enum _WWAN_CELLULAR_CLASS;
enum _WWAN_SIM_CLASS;
enum _DOT11_TEMP_TYPE;
struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO;
enum _NDIS_MAC_HEADER_FIELD;
enum _NDIS_IPV4_HEADER_FIELD;
enum _NDIS_UDP_HEADER_FIELD;
enum _NDK_OPERATION_TYPE;
enum _NDIS_NIC_SWITCH_VPORT_STATE;
class wil::details::unique_storage<wil::details::resource_policy<void *,long (__stdcall*)(void *),&ZwClose,wistd::integral_constant<unsigned int,0>,void *,void *,0,std::nullptr_t> >;
struct _RTL_CRITICAL_SECTION;
struct NDIS_NBL_TRACKER_HANDLE__;
struct PAGED_OBJECT<1148473410>;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _OWNER_ENTRY;
struct _ERESOURCE;
struct KALLOCATION_TAG<1396859982,1>;
struct _WNF_STATE_NAME;
struct _KAPC;
struct _TP_CLEANUP_GROUP;
struct _TP_CALLBACK_INSTANCE;
union _POWER_STATE;
struct _IO_STACK_LOCATION;
struct _COMPRESSED_DATA_INFO;
struct SCOPE_ID;
struct _IPV6_FRAGMENT_HEADER;
struct _NDIS_CO_VC_PTR_BLOCK;
struct in_addr;
struct _IPV4_HEADER;
struct _EXCEPTION_RECORD;
struct _WWAN_LIST_HEADER;
struct _WWAN_DEVICE_CAPS;
struct _EPROCESS;
struct _NDIS_RECEIVE_FILTER_PARAMETERS;
struct _ACTIVATION_CONTEXT_DATA;
struct _ASSEMBLY_STORAGE_MAP;
struct DOT11_PHY_ID_LIST;
struct _LEAP_SECOND_DATA;
struct _NETIO_NET_BUFFER_LIST_CONTEXT;
struct _SID_IDENTIFIER_AUTHORITY;
struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFT_PROFILE_INFO_ARRAY;
struct _tlgWrapSz<wchar_t>;
struct _tlgWrapSz<char16_t>;
struct _QUAD;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _EXT_DELETE_PARAMETERS;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
struct _FILE_BASIC_INFORMATION;
struct _IMAGE_DOS_HEADER;
struct _NDIS_OFFLOAD_ENCAPSULATION;
struct _NDIS_TCP_CONNECTION_OFFLOAD;
struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS;
struct _NDIS_MINIPORT_OFFLOAD;
struct _KTHREAD;
struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH;
struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE;
struct _GROUP_AFFINITY;
struct _IF_COUNTED_STRING_LH;
struct _NDIS_RECEIVE_QUEUE_PARAMETERS;
struct _NDIS_RECEIVE_QUEUE_BLOCK;
struct wistd::__invokable_r<void,void (__stdcall*)(wil::details::kspin_lock_saved_irql const &),wil::details::kspin_lock_saved_irql &>;
struct _EXT_SET_PARAMETERS_V0;
struct _DMA_TRANSFER_INFO_V1;
struct _NPAGED_LOOKASIDE_LIST;
struct _IO_STATUS_BLOCK;
struct _TCP_OFFLOAD_STATE_CACHED;
union _NDIS_RW_LOCK_REFCOUNT;
struct _EX_PUSH_LOCK;
struct _ETHREAD;
struct _FILTER_PAUSE_RESTART_CONTEXT;
struct _IRP;
struct _MDL;
struct _NDIS_802_11_KEY;
struct _NDIS_PD_RECEIVE_QUEUE_COUNTER;
struct _DRIVER_OBJECT;
struct _FAST_IO_DISPATCH;
struct _VPB;
struct _NET_PNP_EVENT_NOTIFICATION;
struct _SID;
struct _SECTION_OBJECT_POINTERS;
struct _tlgTypeMapBase<unsigned char>;
struct _IO_COMPLETION_CONTEXT;
struct _tlgWrapSz<char>;
struct _NDIS_INTERRUPT_MODERATION_PARAMETERS;
struct __vc_attributes::event_sourceAttribute;
struct _NDIS_MINIPORT_STATS;
class Rtl::KArray<void *,1>::const_iterator;
struct DOT11_PHY_FRAME_STATISTICS;
struct _tlgCharTraits<char>;
struct _FILE_STANDARD_INFORMATION;
struct _NDIS_QOS_CLASSIFICATION_ELEMENT;
struct _NDIS40_PROTOCOL_CHARACTERISTICS;
struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS;
struct _NDIS_GFT_FLOW_ENTRY_ID_ARRAY;
struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION;
struct _NDIS_802_11_CAPABILITY;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _NDIS_MINIPORT_PNP_CHARACTERISTICS;
struct _DMA_ADAPTER;
struct _CO_SPECIFIC_PARAMETERS;
struct _CO_CALL_MANAGER_PARAMETERS;
struct _OID_LIST;
struct _NDIS_802_11_CONFIGURATION_FH;
struct _NDIS_802_11_CONFIGURATION;
struct _NDIS_WLAN_BSSID;
struct _NDIS_802_11_BSSID_LIST;
struct _NDIS_BIND_PARAMETERS;
struct sockaddr;
struct wistd::unique_ptr<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >::__nat;
struct _DOT11_ADDITIONAL_IE;
union _REFERENCE_OBJECT;
struct _NDIS_MINIPORT_INTERRUPT;
struct wistd::integral_constant<enum _EVENT_TYPE,1>;
struct _EVENT_RECORD;
struct _IO_TIMER;
struct NDIS_REFCOUNT_HANDLE__;
struct _DEVOBJ_EXTENSION;
struct _NDIS_PORT_STATE;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _NDIS_PD_FILTER_PARAMETERS;
struct _NDIS_GFT_VPORT_PARAMETERS;
struct _IO_SECURITY_CONTEXT;
struct _SECURITY_QUALITY_OF_SERVICE;
struct wil_StagingConfig;
struct _INITIAL_PRIVILEGE_SET;
struct _PRIVILEGE_SET;
struct _ACCESS_STATE;
struct _NDIS_OPEN_PARAMETERS;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _NDIS_SHARED_MEMORY_PARAMETERS;
struct _NDIS_SHARED_MEMORY_BLOCK;
struct _NDIS_QOS_OFFLOAD_CAPABILITIES;
union __m128;
struct _SCSI_REQUEST_BLOCK;
struct _NDK_QP;
struct wistd::__compressed_pair_elem<wistd::default_delete<NDIS_BIND_PROTOCOL_LINK>,1,1>;
struct _INTERFACE;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _NDIS_SG_DMA_BLOCK;
struct wil_FeatureState;
struct KIrqlRegion;
struct _NDIS_MINIPORT_TIMER;
struct _MAP_REGISTER_ENTRY;
struct DOT11_HRDSSS_PHY_ATTRIBUTES;
class KPushLockBase;
struct _POWER_SEQUENCE;
struct _NDIS_TIMER_ENTRY;
struct sockaddr_in;
struct _CO_PVC;
struct _NDIS_802_11_VARIABLE_IEs;
union _DL_EI48;
struct _NDIS_WATCHDOG_TRIAGE_BLOCK;
struct FEATURE_LOGGED_TRAITS;
struct _NDIS_NSI_INTERFACE_ENUM_ROD;
class wil::last_error_context;
struct _WWAN_PIN_DESC;
struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS;
union _NET_BUFFER_LIST_HEADER;
struct _EJOB;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _TXN_PARAMETER_BLOCK;
struct _IO_PRIORITY_INFO;
struct _NDIS_SG_DMA_DESCRIPTION;
struct _NDIS_CONNECTION_INFO;
struct _DEVPROPCOMPKEY;
struct _OBJECT_HANDLE_INFORMATION;
struct _OBJECT_TYPE_INITIALIZER;
struct _OBJECT_TYPE;
struct _NDIS_WWAN_SMS_READ;
struct _tlgTypeMapBase<long>;
struct _OBJECT_DUMP_CONTROL;
struct _NET_PHYSICAL_LOCATION_LH;
struct _NET_IF_INFORMATION;
struct _NPI_MODULEID;
struct _tlgWrapSid<_SID>;
struct _DMA_COMMON_BUFFER_VECTOR;
struct NONPAGED_OBJECT<1920226123>;
struct _NDIS_COMMON_OPEN_BLOCK::_QUEUED_CLOSE;
union _NET_BUFFER_DATA_LENGTH;
struct _OB_EXTENDED_PARSE_PARAMETERS;
struct _tlgTypeMapBase<_SID const *>;
struct _NDIS_802_11_AUTHENTICATION_REQUEST;
struct _NDK_CQ_DISPATCH;
struct wil_details_StagingConfigHeader;
struct _tlgTypeMapBase<double>;
union wil_details_FeatureStateCache;
struct _OBJECT_NAME_INFORMATION;
struct _NDIS_GFP_ETHERNET_HEADER_FIELDS;
struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
struct in6_addr;
struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH;
struct _tlgCharTraits<char16_t>;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
union _WHEA_TIMESTAMP;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
struct _WHEA_ERROR_RECORD_HEADER;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _WHEA_ERROR_RECORD;
struct FEATURE_STATE_CHANGE_SUBSCRIPTION__;
struct _DMA_TRANSFER_INFO_V2;
struct _GEN_GET_TIME_CAPS;
struct sockaddr_in6;
struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO;
struct _NDIS_PACKET;
struct _NET_BUFFER_LIST;
struct KALLOCATION_TAG<1282164290,1>;
struct _NET_BUFFER_DATA;
union _NET_BUFFER_HEADER;
struct _NET_BUFFER;
struct _SCATTER_GATHER_ELEMENT;
struct _SCATTER_GATHER_LIST;
struct _BSSID_INFO;
struct _NDIS_802_11_PMKID;
struct _NET_BUFFER_LIST_TIMESTAMP;
struct _NDIS_FILTER_ATTACH_PARAMETERS;
struct _NDIS_DRIVER_WRAPPER_HANDLE;
union _DL_OUI;
union _DL_EUI48;
struct _NDIS_QOS_SQ_PARAMETERS;
class KRundown;
struct _NDIS_STATUS_INDICATION;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
struct _PERFINFO_GROUPMASK;
struct _PPL_LOOKASIDE_LIST;
struct _PPL_LOOKASIDE_LIST_ARRAY;
struct PNDIS_PER_PROCESSOR_SLOT__;
struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY;
struct _NDIS_IF_BLOCK;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS;
struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS_V2;
union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS;
struct NdisDebugBlock<1935819854>;
struct _NDIS_WDF_COMPLETE_ADD_PARAMS;
struct _NDIS_GUID;
union wil_details_RecordedState;
struct wil_details_FeatureReportingCache;
struct FEATURE_ERROR;
struct _NDK_PD;
struct _NDIS_INTERRUPT_BLOCK;
struct _NDIS_IF_COMPARTMENT_BLOCK;
struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS;
struct _NDIS_TIMESTAMP_CAPABILITIES;
struct _RTL_FEATURE_CONFIGURATION;
struct _RTL_FEATURE_USAGE_REPORT;
struct wil_details_FeatureTestState;
struct _NDK_ADAPTER;
struct _tlgProviderMetadata_t;
struct _tlgWrapperPtrSize;
struct _NDK_RESULT_EX;
struct _tlgWrapperPtrSizeType;
struct _NDK_SHARED_ENDPOINT;
class KRundownManualConstruct;
struct DOT11_QOS_PARAMS;
struct _NDIS_RECEIVE_FILTER_CAPABILITIES;
struct _RECORDER_CONFIGURE_PARAMS;
struct wil::details::kspin_lock_saved_irql;
struct _NDIS_SRIOV_CAPABILITIES;
class wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned int,2>,wil::details::kspin_lock_saved_irql,unsigned long *,0,std::nullptr_t> >;
class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(unsigned long *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned int,2>,unsigned long *,unsigned long *,0,std::nullptr_t> > >;
struct _NDIS_FILTER_RESTART_PARAMETERS;
class wil::kernel_spin_lock;
struct _NDIS_FILTER_BLOCK;
class KWaitEventBase<wistd::integral_constant<enum _EVENT_TYPE,0> >;
class KWaitEventManualConstruct;
class KWaitEventBase<wistd::integral_constant<enum _EVENT_TYPE,1> >;
struct _NDIS_PF_BLOCK;
class KLockHolder;
class KLockThisShared;
class KLockThisExclusive;
struct _NDIS_OID_REQUEST_RESERVED;
struct _NDIS_MINIPORT_SYSPOWER_NOTIFY;
struct _NDIS_REQUEST_XLATION_CONTEXT;
struct _NDIS_VF_BLOCK;
struct _NDIS_NDK_CAPABILITIES;
struct _NDIS_NDK_REQUEST_PARAMETERS;
struct _NDIS_NDK_RESPONSE_PARAMETERS;
struct _NDIS_NDK_PARAMETERS;
struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS;
struct _NDIS_VPORT_BLOCK;
struct _NDIS_CLIENT_CHARACTERISTICS;
struct _NDIS_CO_AF_BLOCK;
struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION;
struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO;
struct CO_ADDRESS_FAMILY;
class KRegKey;
struct CO_SAP;
class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::iterator;
struct DOT11_COUNTRY_OR_REGION_STRING_LIST;
struct _CO_CALL_PARAMETERS;
class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::const_iterator;
struct _CO_MEDIA_PARAMETERS;
struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS;
struct _KINTERRUPT;
struct _X_FILTER;
struct _NDIS_RW_LOCK_EX;
struct _WWAN_PROVIDER;
struct _NDIS_WWAN_HOME_PROVIDER;
struct _DMA_OPERATIONS;
struct wistd::integral_constant<bool,1>;
struct wistd::__numeric_type<void>;
struct KALLOCATION_TAG<1148473410,1>;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS;
struct KALLOCATOR<1147946562,1>;
struct _DMA_ADAPTER_INFO_V1;
struct _DMA_ADAPTER_INFO;
struct _NDK_SRQ_DISPATCH;
struct KALLOCATION_TAG<1147946562,1>;
struct _DMA_TRANSFER_INFO;
struct _RPC_BINDING_VECTOR;
class Rtl::KArray<unsigned char,1>;
struct _NDIS_RESTART_ATTRIBUTES;
struct _NDIS_PROTOCOL_RESTART_PARAMETERS;
struct NDIS_RESTART_INFORMATION;
struct KALLOCATOR<1920226123,512>;
class KRundownHolder;
class wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> >;
struct KALLOCATION_TAG<1920226123,512>;
struct _NDIS_AF_LIST;
struct _NDIS_RECEIVE_SCALE_PARAMETERS;
struct _NDK_LISTENER_DISPATCH;
struct _NDIS_802_11_STATISTICS;
struct _NDIS_HD_SPLIT_CURRENT_CONFIG;
struct _NDIS_NIC_SWITCH_INFO_ARRAY;
struct _NDIS_FILTER_PAUSE_PARAMETERS;
struct _NET_DEVICE_PNP_EVENT;
struct DOT11_MAC_FRAME_STATISTICS;
struct DOT11_STATISTICS;
struct _NDIS_IF_RCV_ADDRESS;
struct DOT11_MAC_ADDRESS_LIST;
struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES;
struct PAGED_OBJECT<1147946562>;
struct _VAR_STRING;
struct _CO_ADDRESS;
struct _CO_ADDRESS_LIST;
struct wistd::default_delete<Rtl::KString>;
struct NdisDebugBlock<1282164290>;
struct _NDIS_RW_LOCK;
struct _NDIS_NIC_SWITCH_BLOCK;
struct _NDIS_RECEIVE_HASH_PARAMETERS;
struct _NDIS_WLAN_BSSID_EX;
struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS;
struct _NDIS50_MINIPORT_CHARACTERISTICS;
struct _NDIS51_MINIPORT_CHARACTERISTICS;
class wistd::__compressed_pair<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS *,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >;
class wistd::unique_ptr<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >;
struct _KMUTANT;
struct _NDIS_M_DRIVER_BLOCK;
struct _NDIS_WRAPPER_HANDLE;
class KRef<NDIS_BIND_PROTOCOL_DRIVER>;
class KCoalescingWorkItem<_NDIS_PROTOCOL_BLOCK>;
struct _NDIS_PROTOCOL_BLOCK;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS;
struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN;
union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN;
struct _NDIS_PORT;
struct _NDK_ADAPTER_INFO;
struct _EX_RUNDOWN_REF;
class KRundownBase;
struct DOT11_BYTE_ARRAY;
struct _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE;
struct _NDIS_TASK_IPSEC;
struct std::nothrow_t;
struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH;
struct FILTERDBS;
struct DOT11_EXTSTA_CAPABILITY;
struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO;
class KWorkItemBase<_NDIS_PROTOCOL_BLOCK,KCoalescingWorkItem<_NDIS_PROTOCOL_BLOCK> >;
struct _NDIS_COMMON_OPEN_BLOCK;
struct __vc_attributes::helper_attributes::v1_alttypeAttribute;
struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY;
struct NdisDebugBlock<1148473410>;
struct _NDIS_TASK_TCP_IP_CHECKSUM;
struct KALLOCATOR<1282691138,1>;
struct NDIS_BIND_PROTOCOL_LINK;
struct _NDIS_WAN_PACKET;
struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST;
struct _NDIS_GFT_DELETE_TABLE_PARAMETERS;
struct _NDIS_GFT_OFFLOAD_PARAMETERS;
struct _NDIS_PM_PACKET_PATTERN;
struct _NDIS_PM_COUNTED_STRING;
struct _NDIS_PM_WOL_PATTERN;
struct _NDIS_PM_PROTOCOL_OFFLOAD;
struct _NDIS_PACKET_PATTERN_ENTRY;
struct _NDIS_OFFLOAD_HANDLE;
struct _NDIS_OFFLOAD_HANDLE_PRIVATE;
struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS;
struct _NDIS_ENTRY_HEADER;
class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>::iterator;
struct KALLOCATOR<1935819854,1>;
struct _NDIS_NPAGED_LOOKASIDE_LIST;
class KRef<NDIS_BIND_PROTOCOL_DRIVER>::KRefHolder;
struct _NDIS_PENDING_IM_INSTANCE;
struct _NDIS_MINIPORT_INIT_PARAMETERS;
struct _NDIS_TASK_TCP_LARGE_SEND;
struct _NDIS_PORT_AUTHENTICATION_PARAMETERS;
struct _NDIS_PD_QUEUE_DISPATCH;
struct _NDIS_MINIPORT_PAUSE_PARAMETERS;
struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO;
struct _NDIS_MINIPORT_RESTART_PARAMETERS;
struct NdisDebugBlock<1396859982>;
struct NdisDebugBlock<1920090443>;
struct _tlgTypeMapBase<unsigned long>;
struct _TCP_OFFLOAD_STATE_DELEGATED;
struct _NDIS_SELECTIVE_SUSPEND;
struct _tlgTypeMapBase<unsigned short>;
struct _DOT11_EXTAP_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES;
struct NDISWATCHDOG__;
struct _NDIS_EVENT_LOG_ENTRY;
struct _NDIS_PD_CONFIG;
struct BINARY_DATA;
struct _tlgTypeMapBase<char16_t const *>;
struct _NDIS_CONFIGURATION_PARAMETER;
struct _NDIS_WDF_CX_DRIVER_BLOCK;
struct _IPSEC_OFFLOAD_V2_ADD_SA;
struct NDIS_WDF_CX_DRIVER_CONTEXT__;
struct _tlgTypeMapBase<char16_t>;
struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST;
struct _tlgTypeMapBase<__int64>;
struct NDIS_EVENT_LOG_HANDLE__;
struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE;
struct _NDIS_PD_QUEUE_PARAMETERS;
struct _NDIS_GFT_COUNTER_INFO;
struct _NDIS_OPEN_NDK_ADAPTER_PARAMETERS;
struct _DOT11_ASSOCIATION_INFO_EX;
struct DOT11_ASSOCIATION_PARAMS;
struct _NDK_ADAPTER_DISPATCH;
struct _NDIS_WWAN_PREFERRED_PROVIDERS;
struct _NDIS_FILTER_ATTRIBUTES;
struct _NDK_EXTENSION_INTERFACE;
struct _PD_BUFFER_VIRTUAL_SUBNET_INFO;
struct _PD_BUFFER_8021Q_INFO;
struct _PD_BUFFER;
struct _NDIS_WAN_CO_SET_LINK_INFO;
struct _PATH_OFFLOAD_STATE_CACHED;
struct wistd::__compressed_pair_elem<wistd::default_delete<NDIS_BIND_FILTER_LINK>,1,1>;
struct _NDIS_TASK_OFFLOAD;
struct _NDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE;
struct wistd::integral_constant<unsigned int,1>;
struct _NDK_CQ;
struct _NDIS_DMA_DESCRIPTION;
struct DOT11_ASSOCIATION_INFO_LIST;
struct DOT11_AUTH_ALGORITHM_LIST;
struct DOT11_OFDM_PHY_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES;
struct _NDIS_SRIOV_VF_CONFIG_STATE;
struct _NDK_RESULT;
struct DOT11_DATA_RATE_MAPPING_ENTRY;
struct _NDIS_802_11_STATUS_INDICATION;
struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<NDIS_BIND_FILTER_LINK> >;
struct _NDIS_EVENT_LOG;
struct wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS>;
struct _NDK_PD_DISPATCH;
struct _NDIS_GFP_WILDCARD_MATCH_PROFILE;
struct _NDIS_PROCESSOR_INFO;
struct _NDIS_SYSTEM_PROCESSOR_INFO;
struct _NDIS_RSC_STATISTICS_INFO;
struct _NDK_MR;
struct _NDK_MR_DISPATCH;
struct _NDIS_GFP_EXACT_MATCH_PROFILE;
struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY;
struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES;
struct _NDIS_GFT_FLOW_ENTRY_ARRAY;
struct _RTL_QUERY_REGISTRY_TABLE;
struct _NDIS_WRAPPER_CONFIGURATION_HANDLE;
struct _DOT11_DISASSOCIATE_PEER_REQUEST;
struct _NDK_MW;
struct _NDK_MW_DISPATCH;
struct _NDIS_IPSEC_PACKET_INFO;
struct _WWAN_SET_CONTEXT;
struct _NDIS_WWAN_SET_PROVISIONED_CONTEXT;
struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__;
struct NdisDebugBlock<1920226123>;
struct _NDK_SRQ;
struct _NDK_CONNECTOR_DISPATCH;
struct _NEIGHBOR_OFFLOAD_STATE_CACHED;
struct _NDIS_TCP_OFFLOAD_CLIENT_HANDLERS;
struct wistd::integral_constant<enum _EVENT_TYPE,0>;
struct _NDK_SGE;
struct _NDIS_TRIAGE_OBJECT_HEADER;
struct wistd::__compressed_pair_elem<NDIS_BIND_PROTOCOL_LINK *,0,0>;
struct _NDK_QP_DISPATCH;
struct DOT11_PMKID_ENTRY;
struct wil::details::resource_policy<unsigned long *,void __stdcall(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned int,2>,wil::details::kspin_lock_saved_irql,unsigned long *,0,std::nullptr_t>;
struct wistd::integral_constant<unsigned int,2>;
struct DOT11_PMKID_LIST;
struct wistd::__invokable_r<void,void (__stdcall*)(unsigned long *) noexcept,unsigned long * &>;
struct _NDK_LOGICAL_ADDRESS_MAPPING;
struct _WWAN_SET_SMS_CONFIGURATION;
struct _NDIS_WWAN_SET_SMS_CONFIGURATION;
struct _IP_OFFLOAD_STATS;
struct _NDIS_PD_CAPABILITIES;
struct _NDIS_GFT_TABLE_INFO_ARRAY;
struct _NDIS_PD_FILTER_COUNTER;
struct _NDIS_RECEIVE_QUEUE_STATE;
struct _tlgTypeMapBase<unsigned __int64>;
struct _tlgTypeMapBase<short>;
struct wistd::__compressed_pair_elem<NDIS_BIND_FILTER_LINK *,0,0>;
struct _NET_BUFFER_POOL_PARAMETERS;
struct _NDIS_LINK_STATE;
struct _tlgTypeMapBase<wchar_t const *>;
struct _LOCK_STATE;
struct __vc_attributes::aggregatableAttribute;
struct _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY;
struct __vc_attributes::helper_attributes::usageAttribute;
struct _NEIGHBOR_OFFLOAD_STATE_DELEGATED;
struct _NDIS_802_11_AUTHENTICATION_EVENT;
class KWorkItemBase<Ndis::BindEngine,KWorkItem<Ndis::BindEngine> >;
struct _WWAN_SERVICE_ACTIVATION;
struct _NDIS_WWAN_SERVICE_ACTIVATION;
struct _NDIS_WAN_FRAGMENT;
struct _NDK_LISTENER;
struct _tlgTypeMapBase<_SID *>;
struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS;
struct _NDIS_HD_SPLIT_ATTRIBUTES;
struct wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >::__nat;
struct _NDIS_PD_ACQUIRE_QUEUES_PARAMETERS;
struct _DOT11_PEER_INFO_LIST;
struct _NDIS_SWITCH_PORT_DESTINATION;
struct wistd::__compressed_pair_elem<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS *,0,0>;
struct _NDIS_GFT_STATISTICS;
struct NDIS_PD_PROVIDER_HANDLE__;
struct _NDIS_GFT_DELETE_PROFILE_PARAMETERS;
struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO;
struct _NDIS_BIND_PATHS;
struct _DEVICE_RESET_INTERFACE_STANDARD;
struct _NDIS_PACKET_OOB_DATA;
struct wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t>;
struct _NDIS_DMA_BLOCK;
struct _WWAN_SET_CONTEXT_STATE;
struct _NDIS_MINIPORT_AOAC;
struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES;
struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS;
struct _NDIS_QOS_CAPABILITIES;
struct _NDIS_QOS_PARAMETERS;
class wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >;
class wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >;
struct _tlgTypeMapBase<void const *>;
struct NDIS_BIND_LINK_BASE;
struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__;
struct _tlgTypeMapBase<char16_t *>;
struct _NDIS_RSS_DPC_WORKER_CONTEXT;
struct _NDIS_WOL_XLATION_CONTEXT;
struct _NDIS_REFCOUNT_TAGGED;
struct _NDIS_IF_STACK_ENTRY;
struct _NDIS_802_11_AI_REQFI;
struct NDIS_BIND_DRIVER_BASE;
struct NdisDebugBlock<1147946562>;
struct _tlgTypeMapBase<_SYSTEMTIME>;
struct wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >::__nat;
struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<Rtl::KString> >;
struct KALLOCATOR<1282164290,1>;
struct _NDIS_GFT_CUSTOM_ACTION;
struct PAGED_OBJECT<1282164290>;
struct _NDIS_OPEN_OFFLOAD;
struct KALLOCATOR<1148473410,1>;
struct KALLOCATION_TAG<1282691138,1>;
struct PAGED_OBJECT<1282691138>;
struct _NDIS_MINIPORT_SS_CHARACTERISTICS;
class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void *,long (__stdcall*)(void *),&ZwClose,wistd::integral_constant<unsigned int,0>,void *,void *,0,std::nullptr_t> > >;
struct _NDIS_STATISTICS_INFO;
struct KALLOCATOR<1396859982,1>;
struct _tlgTypeMapBase<wchar_t>;
struct PAGED_OBJECT<1396859982>;
struct KALLOCATOR<1920090443,1>;
struct _NDIS_WWAN_SMS_DELETE;
struct _NDIS_WWAN_SET_CONTEXT_STATE;
class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>::const_iterator;
struct _NDIS_DRIVER_OPTIONAL_HANDLERS;
struct KALLOCATION_TAG<1935819854,1>;
struct PAGED_OBJECT<1935819854>;
struct _WWAN_READY_INFO;
struct _NDIS_WWAN_READY_INFO;
struct NdisDebugBlock<1230455886>;
class Rtl::KArray<unsigned char,1>::const_iterator;
class Rtl::KArray<unsigned char,1>::iterator;
struct _STACK_INDEX;
struct _NDIS_PACKET_WRAPPER;
struct NDIS_MINIPORT_ADAPTER_HANDLE__;
struct _NDIS_OFFLOAD_EVENT_HANDLERS;
struct wistd::__compressed_pair_elem<wistd::default_delete<Rtl::KString>,1,1>;
struct _ETH_MULTICAST_WRAPPER;
struct _NDIS_STATUS_UNBIND_WORKITEM;
struct _NDIS_PKT_POOL;
struct _NDIS_CO_VC_BLOCK;
struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >;
struct wistd::default_delete<NDIS_BIND_FILTER_LINK>;
struct wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >::__nat;
struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >;
struct __vc_attributes::threadingAttribute;
struct _TCP_OFFLOAD_STATS;
struct _NDIS50_PROTOCOL_CHARACTERISTICS;
struct _IPSEC_OFFLOAD_V2_DELETE_SA;
struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS;
struct DOT11_PRIVACY_EXEMPTION_LIST;
struct _NDIS_PD_POST_AND_DRAIN_ARG;
struct _NDIS_GENERIC_OBJECT;
struct _DOT11_AVAILABLE_FREQUENCY_LIST;
struct _NDIS_PACKET_8021Q_INFO;
struct _NDIS_GFT_COUNTER_INFO_ARRAY;
struct _tlgTypeMapBase<float>;
struct _NDIS_ENUM_FILTERS;
struct wistd::integral_constant<unsigned int,0>;
struct _NDIS_NET_BUFFER_LIST_POOL;
struct _NDIS_WWAN_SET_PACKET_SERVICE;
struct _NDIS_PACKET_STACK;
union _NDIS_RSC_NBL_INFO;
struct _NDIS_TRACK_MEM;
struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER;
union _NDIS_PD_COUNTER_VALUE;
struct _tlgTypeMapBase<signed char>;
struct _WWAN_PIN_LIST;
struct _NDIS_WWAN_PIN_LIST;
struct _tlgTypeMapBase<char const *>;
struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES;
struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES;
union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES;
struct _NDIS_GFT_PROFILE_INFO;
struct DOT11_ERP_PHY_ATTRIBUTES;
struct DOT11_PHY_ATTRIBUTES;
struct NDIS_PD_COUNTER_HANDLE__;
struct _NDIS_PD_PROVIDER_DISPATCH;
struct DOT11_AUTH_CIPHER_PAIR;
struct _NDIS_PORT_ARRAY;
struct _NDIS_GFT_OFFLOAD_CAPABILITIES;
struct _NDIS_GFT_FREE_COUNTER_PARAMETERS;
struct _NDIS_802_11_WEP;
struct _NDIS_SWITCH_NIC_STATUS_INDICATION;
struct _tlgCharTraits<wchar_t>;
struct _LOCK_STATE_EX;
struct _tlgTypeMapBase<_GUID>;
struct _NDIS_WWAN_VISIBLE_PROVIDERS;
struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX;
struct _NDIS_802_11_FIXED_IEs;
struct _tlgTypeMapBase<int>;
struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS;
struct __WIL__WNF_USER_SUBSCRIPTION;
struct _NDIS_TCP_OFFLOAD_EVENT_HANDLERS;
struct _tlgTypeMapBase<char>;
struct _PATH_OFFLOAD_STATE_CONST;
struct _NDIS_NSI_INTERFACE_ENUM_ROS;
struct _NDIS_GFT_TABLE_PARAMETERS;
struct _NDIS_802_11_BSSID_LIST_EX;
struct _NDIS_RECEIVE_FILTER_BLOCK;
struct _WWAN_SET_REGISTER_STATE;
struct _NDIS_WWAN_SET_REGISTER_STATE;
struct DOT11_CIPHER_DEFAULT_KEY_VALUE;
struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO;
struct _NDIS_REFCOUNT_BLOCK;
struct _NDIS_WAN_GET_STATS;
struct _tlgTypeMapBase<bool>;
struct _NEIGHBOR_OFFLOAD_STATE_CONST;
struct _NDIS_WAN_LINE_UP;
struct DOT11_BSSID_LIST;
struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS;
struct _tlgTypeMapBase<char *>;
struct _NDIS_GFT_CUSTOM_ACTION_PROFILE;
struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION;
struct _NDIS_MINIPORT_CO_CHARACTERISTICS;
struct _tlgTypeMapBase<void *>;
struct _NDIS_NET_BUFFER_POOL;
struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS;
struct _tlgTypeMapBase<_FILETIME>;
struct _NDIS_CONFIGURATION_OBJECT;
struct _IO_INTERRUPT_MESSAGE_INFO;
struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO;
struct _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY;
struct _NDIS_TIMER_CHARACTERISTICS;
struct _tlgTypeMapBase<wchar_t *>;
struct _NDIS_REFCOUNT_TAGGED_ENTRY;
struct _DOT11_INCOMING_ASSOC_DECISION;
struct _TRANSPORT_HEADER_OFFSET;
struct _NDIS_PROTOCOL_PAUSE_PARAMETERS;
struct _GEN_GET_NETCARD_TIME;
struct _NDIS_WWAN_DEVICE_CAPS;
struct _NDIS_802_11_TEST;
struct _NDIS_GLOBAL_TRIAGE_BLOCK;
struct _NDIS_GFT_COUNTER_PARAMETERS;
struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS;
struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO;
struct _MEDIA_SPECIFIC_INFORMATION;
struct _WWAN_DRIVER_CAPS;
struct _NDIS_WWAN_DRIVER_CAPS;
struct NDIS_PD_FILTER_HANDLE__;
struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO;
struct _NDIS_STACK_TRACE_TABLE;
struct DOT11_PORT_STATE_NOTIFICATION;
struct _NDIS_NET_BUFFER_LIST_8021Q_INFO;
class Rtl::KArray<void *,1>::iterator;
struct __vc_attributes::moduleAttribute;
struct _NDIS_802_11_NETWORK_TYPE_LIST;
struct _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY;
struct _NDIS_802_11_ASSOCIATION_INFORMATION;
struct _NDIS_802_11_REMOVE_KEY;
struct DOT11_AUTH_CIPHER_PAIR_LIST;
struct _PMKID_CANDIDATE;
struct _NDIS_802_11_PMKID_CANDIDATE_LIST;
struct _DOT11_AVAILABLE_CHANNEL_LIST;
struct _NDIS_PROTOCOL_CO_CHARACTERISTICS;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE;
union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE;
struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS;
struct _NDIS_WAN_CO_GET_STATS_INFO;
struct _NDIS_PKT_POOL_HDR;
struct DOT11_CIPHER_ALGORITHM_LIST;
struct _NDIS_WAN_CO_INFO;
struct _NDIS_WAN_CO_SET_COMP_INFO;
struct _NDIS_MSIX_CONFIG_PARAMETERS;
struct _NDIS_GFT_COUNTER_VALUE_ARRAY;

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

enum BINDING_ENABLED_OR_DISABLED
{
  BindingEnabled = 0,
  BindingDisabled = 1,
};

typedef union _WHEA_PERSISTENCE_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Signature : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Length : 24; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Identifier : 16; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Attributes : 2; /* bit position: 56 */
      /* 0x0000 */ unsigned __int64 DoNotLog : 1; /* bit position: 58 */
      /* 0x0000 */ unsigned __int64 Reserved : 5; /* bit position: 59 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 AsULONGLONG;
  }; /* size: 0x0008 */
} WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO; /* size: 0x0008 */

enum SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4,
};

enum PAUSE_OR_RESTART
{
  DatapathPaused = 0,
  DatapathRunning = 1,
};

enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};

enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
};

typedef enum _PS_MITIGATION_OPTION
{
  PS_MITIGATION_OPTION_NX = 0,
  PS_MITIGATION_OPTION_SEHOP = 1,
  PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
  PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
  PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
  PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
  PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
  PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
  PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
  PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
  PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
  PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
  PS_MITIGATION_OPTION_FONT_DISABLE = 12,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
  PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
  PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
  PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
  PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
  PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
  PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
  PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
  PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
  PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
  PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
  PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
  PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
  PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
  PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
  PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 31,
} PS_MITIGATION_OPTION, *PPS_MITIGATION_OPTION;

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0004 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0008 */

typedef struct _NDIS_OPEN_BLOCK
{
  /* 0x0000 */ long Padding_0[132];
  /* 0x0210 */ struct _NDIS_CO_AF_BLOCK* NextAf;
  /* 0x0214 */ void* MiniportCoCreateVcHandler /* function */;
  /* 0x0218 */ void* MiniportCoRequestHandler /* function */;
  /* 0x021c */ void* CoCreateVcHandler /* function */;
  /* 0x0220 */ void* CoDeleteVcHandler /* function */;
  /* 0x0224 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x0228 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x022c */ void* CoRequestCompleteHandler /* function */;
  /* 0x0230 */ void* CoRequestHandler /* function */;
  /* 0x0234 */ struct _LIST_ENTRY ActiveVcHead;
  /* 0x023c */ struct _LIST_ENTRY InactiveVcHead;
  /* 0x0244 */ long PendingAfNotifications;
  /* 0x0248 */ struct _KEVENT* AfNotifyCompleteEvent;
  /* 0x024c */ void* MiniportCoOidRequestHandler /* function */;
  /* 0x0250 */ void* CoOidRequestCompleteHandler /* function */;
  /* 0x0254 */ void* CoOidRequestHandler /* function */;
} NDIS_OPEN_BLOCK, *PNDIS_OPEN_BLOCK; /* size: 0x0258 */

typedef enum _RTL_FEATURE_CONFIGURATION_OPERATION
{
  FeatureConfigurationOperationNone = 0,
  FeatureConfigurationOperationFeatureState = 1,
  FeatureConfigurationOperationVariantState = 2,
  FeatureConfigurationOperationResetState = 4,
} RTL_FEATURE_CONFIGURATION_OPERATION, *PRTL_FEATURE_CONFIGURATION_OPERATION;

typedef enum _RTL_FEATURE_ENABLED_STATE_OPTIONS
{
  FeatureEnabledStateOptionsNone = 0,
  FeatureEnabledStateOptionsWexpConfig = 1,
} RTL_FEATURE_ENABLED_STATE_OPTIONS, *PRTL_FEATURE_ENABLED_STATE_OPTIONS;

typedef struct _NDIS_OBJECT_HEADER
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Revision;
  /* 0x0002 */ unsigned short Size;
} NDIS_OBJECT_HEADER, *PNDIS_OBJECT_HEADER; /* size: 0x0004 */

typedef struct _NDIS_OFFLOAD_CLIENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
} NDIS_OFFLOAD_CLIENT_HANDLERS, *PNDIS_OFFLOAD_CLIENT_HANDLERS; /* size: 0x0004 */

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

class wistd::__compressed_pair<Rtl::KString *,wistd::default_delete<Rtl::KString> >
{
}; /* size: 0x0004 */

class wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >
{
  /* 0x0000 */ class wistd::__compressed_pair<Rtl::KString *,wistd::default_delete<Rtl::KString> > __ptr_;
}; /* size: 0x0004 */

struct NDIS_BIND_FILTER_DRIVER
{
  /* 0x0000 */ long Padding_1[3];
  /* 0x000c */ struct _GUID Guid;
  /* 0x001c */ unsigned long FilterBindFlags;
  /* 0x0020 */ class wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > FilterClass;
  /* 0x0024 */ struct _NDIS_FILTER_DRIVER_BLOCK* RunningDriver;
}; /* size: 0x0028 */

class KRef<NDIS_BIND_FILTER_DRIVER>::KRefHolder
{
  /* 0x0000 */ struct NDIS_BIND_FILTER_DRIVER _t;
  /* 0x0028 */ unsigned long RefCount;
}; /* size: 0x002c */

typedef enum _RTL_RESOURCE_POLICY_FLAGS
{
  RTL_RESOURCE_POLICY_FLAGS_NONE = 0,
} RTL_RESOURCE_POLICY_FLAGS, *PRTL_RESOURCE_POLICY_FLAGS;

typedef enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolBase = 0,
  NonPagedPoolBaseMustSucceed = 2,
  NonPagedPoolBaseCacheAligned = 4,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
} POOL_TYPE, *PPOOL_TYPE;

typedef enum _EX_POOL_PRIORITY
{
  LowPoolPriority = 0,
  LowPoolPrioritySpecialPoolOverrun = 8,
  LowPoolPrioritySpecialPoolUnderrun = 9,
  NormalPoolPriority = 16,
  NormalPoolPrioritySpecialPoolOverrun = 24,
  NormalPoolPrioritySpecialPoolUnderrun = 25,
  HighPoolPriority = 32,
  HighPoolPrioritySpecialPoolOverrun = 40,
  HighPoolPrioritySpecialPoolUnderrun = 41,
} EX_POOL_PRIORITY, *PEX_POOL_PRIORITY;

typedef struct _NDIS_FRAME_TYPE_AND_OPEN
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ char Padding_2[2];
  /* 0x0004 */ struct _NDIS_OPEN_BLOCK* Open;
} NDIS_FRAME_TYPE_AND_OPEN, *PNDIS_FRAME_TYPE_AND_OPEN; /* size: 0x0008 */

typedef struct _NDIS_FRAME_TYPE_RECORD
{
  /* 0x0000 */ unsigned int NumEntries;
  /* 0x0004 */ struct _NDIS_FRAME_TYPE_AND_OPEN Entry[16];
} NDIS_FRAME_TYPE_RECORD, *PNDIS_FRAME_TYPE_RECORD; /* size: 0x0084 */

typedef enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

typedef enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
} IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
} DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY
{
  NdisGftCounterUpdateFrequencyUndefined = 0,
  NdisGftCounterUpdateFrequencyOnQuery = 1,
  NdisGftCounterUpdateFrequencyPerUpdatePeriod = 2,
  NdisGftCounterUpdateFrequencyPerPacket = 3,
  NdisGftCounterUpdateFrequencyMax = 4,
} NDIS_GFT_COUNTER_UPDATE_FREQUENCY, *PNDIS_GFT_COUNTER_UPDATE_FREQUENCY;

typedef enum _NDIS_GFT_COUNTER_TYPE
{
  NdisGftCounterTypeUndefined = 0,
  NdisGftCounterTypePacket = 1,
  NdisGftCounterTypeByte = 2,
  NdisGftCounterTypePacketByte = 3,
  NdisGftCounterTypePacketByteAndState = 4,
  NdisGftCounterTypeMax = 5,
} NDIS_GFT_COUNTER_TYPE, *PNDIS_GFT_COUNTER_TYPE;

typedef enum _NDIS_GFT_WILDCARD_ACTION
{
  NdisGftWildcardActionUndefined = 0,
  NdisGftWildcardActionAllow = 1,
  NdisGftWildcardActionDrop = 2,
  NdisGftWildcardActionMax = 3,
} NDIS_GFT_WILDCARD_ACTION, *PNDIS_GFT_WILDCARD_ACTION;

typedef enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT
{
  NdisGftFlowEntryCacheHintUndefined = 0,
  NdisGftFlowEntryCacheHintLowFrequency = 100,
  NdisGftFlowEntryCacheHintMediumFrequency = 200,
  NdisGftFlowEntryCacheHintHighFrequency = 300,
  NdisGftFlowEntryCacheHintMax = 1000,
} NDIS_GFT_FLOW_ENTRY_CACHE_HINT, *PNDIS_GFT_FLOW_ENTRY_CACHE_HINT;

typedef enum _NDIS_GFT_FLOW_ENTRY_STATE
{
  NdisGftFlowEntryStateUndefined = 0,
  NdisGftFlowEntryStateDeactivated = 1,
  NdisGftFlowEntryStateActivated = 2,
  NdisGftFlowEntryStateMax = 3,
} NDIS_GFT_FLOW_ENTRY_STATE, *PNDIS_GFT_FLOW_ENTRY_STATE;

typedef struct _NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ unsigned long VPortId;
  /* 0x0010 */ unsigned long MatchProfileId;
  /* 0x0014 */ int MatchRequestStatus;
  /* 0x0018 */ int ActionRequestStatus;
  /* 0x001c */ unsigned long CounterFlags;
  /* 0x0020 */ enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
  /* 0x0024 */ enum _NDIS_GFT_COUNTER_TYPE CounterType;
  /* 0x0028 */ unsigned long UpdatePeriod;
  union
  {
    union
    {
      /* 0x002c */ volatile struct _NDIS_GFT_PACKET_COUNTER_VALUE* PacketCounterAddress;
      /* 0x002c */ volatile struct _NDIS_GFT_BYTE_COUNTER_VALUE* ByteCounterAddress;
      /* 0x002c */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE* PacketByteCounterAddress;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ CounterValueBuffer;
  /* 0x0030 */ unsigned long Priority;
  /* 0x0034 */ enum _NDIS_GFT_WILDCARD_ACTION Action;
  /* 0x0038 */ unsigned long RedirectionVPortId;
  /* 0x003c */ unsigned long TtlIsOneRedirectionVPortId;
  /* 0x0040 */ unsigned long NumCounterObjects;
  /* 0x0044 */ unsigned long CounterIdArray[8];
  /* 0x0064 */ enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT CacheHint;
  /* 0x0068 */ unsigned long ClientFlowEntryId;
  /* 0x006c */ unsigned long ProviderFlowEntryId;
  /* 0x0070 */ enum _NDIS_GFT_FLOW_ENTRY_STATE FlowEntryState;
  /* 0x0074 */ unsigned long HeaderGroupWildcardMatchArrayOffset;
  /* 0x0078 */ unsigned long HeaderGroupWildcardMatchArrayNumElements;
  /* 0x007c */ unsigned long HeaderGroupWildcardMatchArrayElementSize;
  /* 0x0080 */ unsigned long CustomActionOffset;
} NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY, *PNDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY; /* size: 0x0084 */

typedef enum _DEVPROPSTORE
{
  DEVPROP_STORE_SYSTEM = 0,
  DEVPROP_STORE_USER = 1,
} DEVPROPSTORE, *PDEVPROPSTORE;

typedef enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
  MmNotMapped = -1,
} MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

struct _ECP_LIST;

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x0004 */ struct _LIST_ENTRY FrameListCache;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long NextCookieSequenceNumber;
  /* 0x0014 */ unsigned long StackId;
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0018 */

typedef struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long HeadersPresent;
  /* 0x000c */ long Padding_3;
  /* 0x0010 */ unsigned __int64 MatchFields;
} NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE, *PNDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE; /* size: 0x0018 */

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE
{
  WheaEventLogEntryTypeInformational = 0,
  WheaEventLogEntryTypeWarning = 1,
  WheaEventLogEntryTypeError = 2,
} WHEA_EVENT_LOG_ENTRY_TYPE, *PWHEA_EVENT_LOG_ENTRY_TYPE;

typedef enum _WHEA_EVENT_LOG_ENTRY_ID
{
  WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
  WheaEventLogEntryIdWheaInit = -2147483646,
  WheaEventLogEntryIdCmcSwitchToPolling = -2147483645,
  WheaEventLogEntryIdDroppedCorrectedError = -2147483644,
  WheaEventLogEntryIdStartedReportHwError = -2147483643,
  WheaEventLogEntryIdPFAMemoryOfflined = -2147483642,
  WheaEventLogEntryIdPFAMemoryRemoveMonitor = -2147483641,
  WheaEventLogEntryIdPFAMemoryPolicy = -2147483640,
  WheaEventLogEntryIdPshedInjectError = -2147483639,
  WheaEventLogEntryIdOscCapabilities = -2147483638,
  WheaEventLogEntryIdPshedPluginRegister = -2147483637,
  WheaEventLogEntryIdAddRemoveErrorSource = -2147483636,
  WheaEventLogEntryIdWorkQueueItem = -2147483635,
  WheaEventLogEntryIdAttemptErrorRecovery = -2147483634,
  WheaEventLogEntryIdMcaFoundErrorInBank = -2147483633,
  WheaEventLogEntryIdMcaStuckErrorCheck = -2147483632,
  WheaEventLogEntryIdMcaErrorCleared = -2147483631,
  WheaEventLogEntryIdClearedPoison = -2147483630,
  WheaEventLogEntryIdProcessEINJ = -2147483629,
  WheaEventLogEntryIdProcessHEST = -2147483628,
  WheaEventLogEntryIdCreateGenericRecord = -2147483627,
  WheaEventLogEntryIdErrorRecord = -2147483626,
  WheaEventLogEntryIdErrorRecordLimit = -2147483625,
  WheaEventLogEntryIdErrSrcArrayInvalid = -2147483623,
  WheaEventLogEntryIdAcpiTimeOut = -2147483622,
  WheaEventLogCmciRestart = -2147483621,
  WheaEventLogCmciFinalRestart = -2147483620,
  WheaEventLogEntryEtwOverFlow = -2147483619,
  WheaEventLogAzccRootBusSearchErr = -2147483618,
  WheaEventLogAzccRootBusList = -2147483617,
  WheaEventLogEntryIdErrSrcInvalid = -2147483616,
  WheaEventLogEntryIdGenericErrMemMap = -2147483615,
  WheaEventLogEntryIdPshedCallbackCollision = -2147483614,
  WheaEventLogEntryIdSELBugCheckProgress = -2147483613,
  WheaEventLogEntryIdPshedPluginLoad = -2147483612,
  WheaEventLogEntryIdPshedPluginUnload = -2147483611,
  WheaEventLogEntryIdPshedPluginSupported = -2147483610,
  WheaEventLogEntryIdDeviceDriver = -2147483609,
  WheaEventLogEntryIdCmciImplPresent = -2147483608,
  WheaEventLogEntryIdCmciInitError = -2147483607,
  WheaEventLogEntryIdSELBugCheckRecovery = -2147483606,
  WheaEventLogEntryIdDrvErrSrcInvalid = -2147483605,
  WheaEventLogEntryIdDrvHandleBusy = -2147483604,
  WheaEventLogEntryIdWheaHeartbeat = -2147483603,
  WheaEventLogAzccRootBusPoisonSet = -2147483602,
  WheaEventLogEntryIdSELBugCheckInfo = -2147483601,
  WheaEventLogEntryIdErrDimmInfoMismatch = -2147483600,
} WHEA_EVENT_LOG_ENTRY_ID, *PWHEA_EVENT_LOG_ENTRY_ID;

typedef struct _SINGLE_LIST_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; /* size: 0x0004 */

typedef union _SLIST_HEADER
{
  union
  {
    /* 0x0000 */ unsigned __int64 Alignment;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY Next;
      /* 0x0004 */ unsigned short Depth;
      /* 0x0006 */ unsigned short CpuId;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} SLIST_HEADER, *PSLIST_HEADER; /* size: 0x0008 */

typedef struct _GENERAL_LOOKASIDE_POOL
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  union
  {
    /* 0x0010 */ unsigned long AllocateMisses;
    /* 0x0010 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long TotalFrees;
  union
  {
    /* 0x0018 */ unsigned long FreeMisses;
    /* 0x0018 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x001c */ enum _POOL_TYPE Type;
  /* 0x0020 */ unsigned long Tag;
  /* 0x0024 */ unsigned long Size;
  union
  {
    /* 0x0028 */ void* AllocateEx /* function */;
    /* 0x0028 */ void* Allocate /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* FreeEx /* function */;
    /* 0x002c */ void* Free /* function */;
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _LIST_ENTRY ListEntry;
  /* 0x0038 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x003c */ unsigned long LastAllocateMisses;
    /* 0x003c */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0040 */ unsigned long Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL; /* size: 0x0048 */

typedef struct _LOOKASIDE_LIST_EX
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX; /* size: 0x0048 */

typedef enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
  WheaErrTypePmem = 7,
} WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
} WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef struct _EVENT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Channel;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Opcode;
  /* 0x0006 */ unsigned short Task;
  /* 0x0008 */ unsigned __int64 Keyword;
} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR; /* size: 0x0010 */

typedef enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeGenericV2 = 12,
  WheaErrSrcTypeSCIGenericV2 = 13,
  WheaErrSrcTypeBMC = 14,
  WheaErrSrcTypePMEM = 15,
  WheaErrSrcTypeDeviceDriver = 16,
  WheaErrSrcTypeMax = 17,
} WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
} WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef struct _NDIS_SPIN_LOCK
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ unsigned char OldIrql;
  /* 0x0005 */ char __PADDING__[3];
} NDIS_SPIN_LOCK, *PNDIS_SPIN_LOCK; /* size: 0x0008 */

typedef enum _WWAN_SMS_FORMAT
{
  WwanSmsFormatPdu = 0,
  WwanSmsFormatReserved0 = 1,
  WwanSmsFormatReserved1 = 2,
  WwanSmsFormatReserved2 = 3,
  WwanSmsFormatCdma = 4,
  WwanSmsFormatMax = 5,
} WWAN_SMS_FORMAT, *PWWAN_SMS_FORMAT;

typedef enum _WWAN_SMS_FLAG
{
  WwanSmsFlagAll = 0,
  WwanSmsFlagIndex = 1,
  WwanSmsFlagNew = 2,
  WwanSmsFlagOld = 3,
  WwanSmsFlagSent = 4,
  WwanSmsFlagDraft = 5,
  WwanSmsFlagMax = 6,
} WWAN_SMS_FLAG, *PWWAN_SMS_FLAG;

typedef struct _WWAN_SMS_FILTER
{
  /* 0x0000 */ enum _WWAN_SMS_FLAG Flag;
  /* 0x0004 */ unsigned long MessageIndex;
} WWAN_SMS_FILTER, *PWWAN_SMS_FILTER; /* size: 0x0008 */

typedef struct _WWAN_SMS_READ
{
  /* 0x0000 */ enum _WWAN_SMS_FORMAT SmsFormat;
  /* 0x0004 */ struct _WWAN_SMS_FILTER ReadFilter;
} WWAN_SMS_READ, *PWWAN_SMS_READ; /* size: 0x000c */

enum SCOPE_LEVEL
{
  ScopeLevelInterface = 1,
  ScopeLevelLink = 2,
  ScopeLevelSubnet = 3,
  ScopeLevelAdmin = 4,
  ScopeLevelSite = 5,
  ScopeLevelOrganization = 8,
  ScopeLevelGlobal = 14,
  ScopeLevelCount = 16,
};

enum NL_ADDRESS_TYPE
{
  NlatUnspecified = 0,
  NlatUnicast = 1,
  NlatAnycast = 2,
  NlatMulticast = 3,
  NlatBroadcast = 4,
  NlatInvalid = 5,
};

typedef struct _DEVPROPKEY
{
  /* 0x0000 */ struct _GUID fmtid;
  /* 0x0010 */ unsigned long pid;
} DEVPROPKEY, *PDEVPROPKEY; /* size: 0x0014 */

typedef struct _NDIS_PACKET_PRIVATE
{
  /* 0x0000 */ unsigned int PhysicalCount;
  /* 0x0004 */ unsigned int TotalLength;
  /* 0x0008 */ struct _MDL* Head;
  /* 0x000c */ struct _MDL* Tail;
  /* 0x0010 */ void* Pool;
  /* 0x0014 */ unsigned int Count;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned char ValidCounts;
  /* 0x001d */ unsigned char NdisPacketFlags;
  /* 0x001e */ unsigned short NdisPacketOobOffset;
} NDIS_PACKET_PRIVATE, *PNDIS_PACKET_PRIVATE; /* size: 0x0020 */

typedef struct _DISPATCHER_HEADER
{
  union
  {
    /* 0x0000 */ volatile long Lock;
    /* 0x0000 */ long LockNV;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Signalling;
      /* 0x0002 */ unsigned char Size;
      /* 0x0003 */ unsigned char Reserved1;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char TimerType;
      union
      {
        /* 0x0001 */ unsigned char TimerControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Absolute : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Wake : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char EncodedTolerableDelay : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Hand;
          union
          {
            /* 0x0003 */ unsigned char TimerMiscFlags;
            struct /* bitfield */
            {
              /* 0x0003 */ unsigned char Index : 1; /* bit position: 0 */
              /* 0x0003 */ unsigned char Processor : 5; /* bit position: 1 */
              /* 0x0003 */ unsigned char Inserted : 1; /* bit position: 6 */
              /* 0x0003 */ volatile unsigned char Expired : 1; /* bit position: 7 */
            }; /* bitfield */
          }; /* size: 0x0001 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char Timer2Type;
      union
      {
        /* 0x0001 */ unsigned char Timer2Flags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Timer2Inserted : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Timer2Expiring : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char Timer2CancelPending : 1; /* bit position: 2 */
            /* 0x0001 */ unsigned char Timer2SetPending : 1; /* bit position: 3 */
            /* 0x0001 */ unsigned char Timer2Running : 1; /* bit position: 4 */
            /* 0x0001 */ unsigned char Timer2Disabled : 1; /* bit position: 5 */
            /* 0x0001 */ unsigned char Timer2ReservedFlags : 2; /* bit position: 6 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Timer2ComponentId;
          /* 0x0003 */ unsigned char Timer2RelativeId;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char QueueType;
      union
      {
        /* 0x0001 */ unsigned char QueueControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Abandoned : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char DisableIncrement : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char QueueReservedControlFlags : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char QueueSize;
          /* 0x0003 */ unsigned char QueueReserved;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char ThreadType;
      /* 0x0001 */ unsigned char ThreadReserved;
      union
      {
        /* 0x0002 */ unsigned char ThreadControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0002 */ unsigned char CycleProfiling : 1; /* bit position: 0 */
            /* 0x0002 */ unsigned char CounterProfiling : 1; /* bit position: 1 */
            /* 0x0002 */ unsigned char GroupScheduling : 1; /* bit position: 2 */
            /* 0x0002 */ unsigned char AffinitySet : 1; /* bit position: 3 */
            /* 0x0002 */ unsigned char Tagged : 1; /* bit position: 4 */
            /* 0x0002 */ unsigned char EnergyProfiling : 1; /* bit position: 5 */
            /* 0x0002 */ unsigned char SchedulerAssist : 1; /* bit position: 6 */
            /* 0x0002 */ unsigned char Instrumented : 1; /* bit position: 7 */
          }; /* bitfield */
          /* 0x0003 */ unsigned char DebugActive;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char MutantType;
      /* 0x0001 */ unsigned char MutantSize;
      /* 0x0002 */ unsigned char DpcActive;
      /* 0x0003 */ unsigned char MutantReserved;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ long SignalState;
  /* 0x0008 */ struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; /* size: 0x0010 */

typedef struct _KEVENT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; /* size: 0x0010 */

typedef struct _FAST_MUTEX
{
  /* 0x0000 */ long Count;
  /* 0x0004 */ void* Owner;
  /* 0x0008 */ unsigned long Contention;
  /* 0x000c */ struct _KEVENT Event;
  /* 0x001c */ unsigned long OldIrql;
} FAST_MUTEX, *PFAST_MUTEX; /* size: 0x0020 */

enum DL_ADDRESS_TYPE
{
  DlUnicast = 0,
  DlMulticast = 1,
  DlBroadcast = 2,
};

typedef enum _NPI_MODULEID_TYPE
{
  MIT_GUID = 1,
  MIT_IF_LUID = 2,
} NPI_MODULEID_TYPE, *PNPI_MODULEID_TYPE;

typedef struct _NETIO_NET_BUFFER_CONTEXT
{
  /* 0x0000 */ unsigned long OriginalDataOffset;
  /* 0x0004 */ unsigned long OriginalDataLength;
  /* 0x0008 */ unsigned long TruncatedLength;
  union
  {
    /* 0x000c */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long EcnField : 2; /* bit position: 0 */
      /* 0x000c */ unsigned long EspTrailerSpaceAllocated : 1; /* bit position: 2 */
      /* 0x000c */ unsigned long Converted : 1; /* bit position: 3 */
      /* 0x000c */ unsigned long Restored : 1; /* bit position: 4 */
      /* 0x000c */ unsigned long EcnForceNotEct : 1; /* bit position: 5 */
      /* 0x000c */ unsigned long NdPriority : 1; /* bit position: 6 */
      /* 0x000c */ unsigned long IpsnpiForwardInjection : 1; /* bit position: 7 */
      /* 0x000c */ unsigned long IpsnpiForwardInjectionCopy : 1; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0010 */ void* Scratch[2];
} NETIO_NET_BUFFER_CONTEXT, *PNETIO_NET_BUFFER_CONTEXT; /* size: 0x0018 */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0008 */

enum COMPARTMENT_ID
{
  UNSPECIFIED_COMPARTMENT_ID = 0,
  DEFAULT_COMPARTMENT_ID = 1,
};

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

typedef struct _EVENT_HEADER
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short HeaderType;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short EventProperty;
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _GUID ProviderId;
  /* 0x0028 */ struct _EVENT_DESCRIPTOR EventDescriptor;
  union
  {
    struct
    {
      /* 0x0038 */ unsigned long KernelTime;
      /* 0x003c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0038 */ unsigned __int64 ProcessorTime;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _GUID ActivityId;
} EVENT_HEADER, *PEVENT_HEADER; /* size: 0x0050 */

typedef enum _NET_DEVICE_RESET_TYPE
{
  FunctionLevelReset = 0,
  PlatformLevelReset = 1,
} NET_DEVICE_RESET_TYPE, *PNET_DEVICE_RESET_TYPE;

typedef struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long IpOptionsSupported : 2; /* bit position: 0 */
      /* 0x0004 */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x0004 */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x0004 */ unsigned long UdpChecksum : 2; /* bit position: 6 */
      /* 0x0004 */ unsigned long IpChecksum : 2; /* bit position: 8 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv4Transmit;
  struct
  {
    /* 0x0008 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long IpOptionsSupported : 2; /* bit position: 0 */
      /* 0x000c */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x000c */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x000c */ unsigned long UdpChecksum : 2; /* bit position: 6 */
      /* 0x000c */ unsigned long IpChecksum : 2; /* bit position: 8 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv4Receive;
  struct
  {
    /* 0x0010 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long IpExtensionHeadersSupported : 2; /* bit position: 0 */
      /* 0x0014 */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x0014 */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x0014 */ unsigned long UdpChecksum : 2; /* bit position: 6 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv6Transmit;
  struct
  {
    /* 0x0018 */ unsigned long Encapsulation;
    struct /* bitfield */
    {
      /* 0x001c */ unsigned long IpExtensionHeadersSupported : 2; /* bit position: 0 */
      /* 0x001c */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
      /* 0x001c */ unsigned long TcpChecksum : 2; /* bit position: 4 */
      /* 0x001c */ unsigned long UdpChecksum : 2; /* bit position: 6 */
    }; /* bitfield */
  } /* size: 0x0008 */ IPv6Receive;
} NDIS_TCP_IP_CHECKSUM_OFFLOAD, *PNDIS_TCP_IP_CHECKSUM_OFFLOAD; /* size: 0x0020 */

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    /* 0x0004 */ unsigned long MaxOffLoadSize;
    /* 0x0008 */ unsigned long MinSegmentCount;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long TcpOptions : 2; /* bit position: 0 */
      /* 0x000c */ unsigned long IpOptions : 2; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0010 */ IPv4;
} NDIS_TCP_LARGE_SEND_OFFLOAD_V1, *PNDIS_TCP_LARGE_SEND_OFFLOAD_V1; /* size: 0x0010 */

typedef struct _NDIS_IPSEC_OFFLOAD_V1
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    /* 0x0004 */ unsigned long AhEspCombined;
    /* 0x0008 */ unsigned long TransportTunnelCombined;
    /* 0x000c */ unsigned long IPv4Options;
    /* 0x0010 */ unsigned long Flags;
  } /* size: 0x0014 */ Supported;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long Md5 : 2; /* bit position: 0 */
      /* 0x0014 */ unsigned long Sha_1 : 2; /* bit position: 2 */
      /* 0x0014 */ unsigned long Transport : 2; /* bit position: 4 */
      /* 0x0014 */ unsigned long Tunnel : 2; /* bit position: 6 */
      /* 0x0014 */ unsigned long Send : 2; /* bit position: 8 */
      /* 0x0014 */ unsigned long Receive : 2; /* bit position: 10 */
    }; /* bitfield */
  } /* size: 0x0004 */ IPv4AH;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0018 */ unsigned long Des : 2; /* bit position: 0 */
      /* 0x0018 */ unsigned long Reserved : 2; /* bit position: 2 */
      /* 0x0018 */ unsigned long TripleDes : 2; /* bit position: 4 */
      /* 0x0018 */ unsigned long NullEsp : 2; /* bit position: 6 */
      /* 0x0018 */ unsigned long Transport : 2; /* bit position: 8 */
      /* 0x0018 */ unsigned long Tunnel : 2; /* bit position: 10 */
      /* 0x0018 */ unsigned long Send : 2; /* bit position: 12 */
      /* 0x0018 */ unsigned long Receive : 2; /* bit position: 14 */
    }; /* bitfield */
  } /* size: 0x0004 */ IPv4ESP;
} NDIS_IPSEC_OFFLOAD_V1, *PNDIS_IPSEC_OFFLOAD_V1; /* size: 0x001c */

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    /* 0x0004 */ unsigned long MaxOffLoadSize;
    /* 0x0008 */ unsigned long MinSegmentCount;
  } /* size: 0x000c */ IPv4;
  struct
  {
    /* 0x000c */ unsigned long Encapsulation;
    /* 0x0010 */ unsigned long MaxOffLoadSize;
    /* 0x0014 */ unsigned long MinSegmentCount;
    struct /* bitfield */
    {
      /* 0x0018 */ unsigned long IpExtensionHeadersSupported : 2; /* bit position: 0 */
      /* 0x0018 */ unsigned long TcpOptionsSupported : 2; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0010 */ IPv6;
} NDIS_TCP_LARGE_SEND_OFFLOAD_V2, *PNDIS_TCP_LARGE_SEND_OFFLOAD_V2; /* size: 0x001c */

typedef struct _NDIS_IPSEC_OFFLOAD_V2
{
  /* 0x0000 */ unsigned long Encapsulation;
  /* 0x0004 */ unsigned char IPv6Supported;
  /* 0x0005 */ unsigned char IPv4Options;
  /* 0x0006 */ unsigned char IPv6NonIPsecExtensionHeaders;
  /* 0x0007 */ unsigned char Ah;
  /* 0x0008 */ unsigned char Esp;
  /* 0x0009 */ unsigned char AhEspCombined;
  /* 0x000a */ unsigned char Transport;
  /* 0x000b */ unsigned char Tunnel;
  /* 0x000c */ unsigned char TransportTunnelCombined;
  /* 0x000d */ unsigned char LsoSupported;
  /* 0x000e */ unsigned char ExtendedSequenceNumbers;
  /* 0x000f */ char Padding_4;
  /* 0x0010 */ unsigned long UdpEsp;
  /* 0x0014 */ unsigned long AuthenticationAlgorithms;
  /* 0x0018 */ unsigned long EncryptionAlgorithms;
  /* 0x001c */ unsigned long SaOffloadCapacity;
} NDIS_IPSEC_OFFLOAD_V2, *PNDIS_IPSEC_OFFLOAD_V2; /* size: 0x0020 */

typedef struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD
{
  struct
  {
    /* 0x0000 */ unsigned char Enabled;
  } /* size: 0x0001 */ IPv4;
  struct
  {
    /* 0x0001 */ unsigned char Enabled;
  } /* size: 0x0001 */ IPv6;
} NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD, *PNDIS_TCP_RECV_SEG_COALESCE_OFFLOAD; /* size: 0x0002 */

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long TransmitChecksumOffloadSupported : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReceiveChecksumOffloadSupported : 4; /* bit position: 4 */
    /* 0x0000 */ unsigned long LsoV2Supported : 4; /* bit position: 8 */
    /* 0x0000 */ unsigned long RssSupported : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned long VmqSupported : 4; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long MaxHeaderSizeSupported;
} NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD, *PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD; /* size: 0x0008 */

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO
{
  /* 0x0000 */ unsigned short VxlanUDPPortNumber;
  /* 0x0002 */ unsigned short VxlanUDPPortNumberConfigurable : 1; /* bit position: 0 */
} NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO, *PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO; /* size: 0x0004 */

typedef union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO
{
  union
  {
    /* 0x0000 */ struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO::_VXLAN_INFO VxlanInfo;
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO, *PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO; /* size: 0x0004 */

typedef struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long TransmitChecksumOffloadSupported : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReceiveChecksumOffloadSupported : 4; /* bit position: 4 */
    /* 0x0000 */ unsigned long LsoV2Supported : 4; /* bit position: 8 */
    /* 0x0000 */ unsigned long RssSupported : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned long VmqSupported : 4; /* bit position: 16 */
    /* 0x0000 */ unsigned long Reserved : 12; /* bit position: 20 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long MaxHeaderSizeSupported;
  /* 0x0008 */ union _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2::_ENCAPSULATION_PROTOCOL_INFO EncapsulationProtocolInfo;
  /* 0x000c */ unsigned long Reserved1;
  /* 0x0010 */ unsigned long Reserved2;
} NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2, *PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2; /* size: 0x0014 */

typedef enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS
{
  NDIS_RFC6877_464XLAT_OFFLOAD_NOT_SUPPORTED = 0,
  NDIS_RFC6877_464XLAT_OFFLOAD_DISABLED = 1,
  NDIS_RFC6877_464XLAT_OFFLOAD_ENABLED = 2,
  NDIS_RFC6877_464XLAT_OFFLOAD_ON_DEMAND = 3,
} NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS, *PNDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS;

typedef struct _NDIS_RFC6877_464XLAT_OFFLOAD
{
  /* 0x0000 */ enum _NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS XlatOffload;
  /* 0x0004 */ unsigned long Flags;
} NDIS_RFC6877_464XLAT_OFFLOAD, *PNDIS_RFC6877_464XLAT_OFFLOAD; /* size: 0x0008 */

typedef struct _NDIS_UDP_SEGMENTATION_OFFLOAD
{
  struct
  {
    /* 0x0000 */ unsigned long Encapsulation;
    /* 0x0004 */ unsigned long MaxOffLoadSize;
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long MinSegmentCount : 6; /* bit position: 0 */
      /* 0x0008 */ unsigned long SubMssFinalSegmentSupported : 1; /* bit position: 6 */
      /* 0x0008 */ unsigned long Reserved : 25; /* bit position: 7 */
    }; /* bitfield */
  } /* size: 0x000c */ IPv4;
  struct
  {
    /* 0x000c */ unsigned long Encapsulation;
    /* 0x0010 */ unsigned long MaxOffLoadSize;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long MinSegmentCount : 6; /* bit position: 0 */
      /* 0x0014 */ unsigned long SubMssFinalSegmentSupported : 1; /* bit position: 6 */
      /* 0x0014 */ unsigned long Reserved1 : 25; /* bit position: 7 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x0018 */ unsigned long IpExtensionHeadersSupported : 2; /* bit position: 0 */
      /* 0x0018 */ unsigned long Reserved2 : 30; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0010 */ IPv6;
} NDIS_UDP_SEGMENTATION_OFFLOAD, *PNDIS_UDP_SEGMENTATION_OFFLOAD; /* size: 0x001c */

typedef struct _NDIS_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD Checksum;
  /* 0x0024 */ struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
  /* 0x0034 */ struct _NDIS_IPSEC_OFFLOAD_V1 IPsecV1;
  /* 0x0050 */ struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
  /* 0x006c */ unsigned long Flags;
  /* 0x0070 */ struct _NDIS_IPSEC_OFFLOAD_V2 IPsecV2;
  /* 0x0090 */ struct _NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD Rsc;
  /* 0x0092 */ char Padding_5[2];
  /* 0x0094 */ struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD EncapsulatedPacketTaskOffloadGre;
  /* 0x009c */ struct _NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 EncapsulatedPacketTaskOffloadVxlan;
  /* 0x00b0 */ unsigned char EncapsulationTypes;
  /* 0x00b1 */ char Padding_6[3];
  /* 0x00b4 */ struct _NDIS_RFC6877_464XLAT_OFFLOAD Rfc6877Xlat;
  /* 0x00bc */ struct _NDIS_UDP_SEGMENTATION_OFFLOAD UdpSegmentation;
} NDIS_OFFLOAD, *PNDIS_OFFLOAD; /* size: 0x00d8 */

enum FEATURE_CHANGE_TIME
{
  FEATURE_CHANGE_TIME_READ = 0,
  FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
  FEATURE_CHANGE_TIME_SESSION = 2,
  FEATURE_CHANGE_TIME_REBOOT = 3,
  FEATURE_CHANGE_TIME_USER_FLAG = 128,
};

enum FEATURE_ENABLED_STATE
{
  FEATURE_ENABLED_STATE_DEFAULT = 0,
  FEATURE_ENABLED_STATE_DISABLED = 1,
  FEATURE_ENABLED_STATE_ENABLED = 2,
  FEATURE_ENABLED_STATE_HAS_NOTIFICATION = 128,
  FEATURE_ENABLED_STATE_HAS_VARIANT_CONFIGURATION = 64,
};

enum wil_FeatureEnabledStateOptions
{
  wil_FeatureEnabledStateOptions_None = 0,
  wil_FeatureEnabledStateOptions_VariantConfig = 1,
};

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char ShareDisposition;
  /* 0x0002 */ unsigned short Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Generic;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Port;
      struct
      {
        /* 0x0004 */ unsigned short Level;
        /* 0x0006 */ unsigned short Group;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long Affinity;
      } /* size: 0x000c */ Interrupt;
      struct
      {
        union
        {
          struct
          {
            /* 0x0004 */ unsigned short Group;
            /* 0x0006 */ unsigned short MessageCount;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned long Affinity;
          } /* size: 0x000c */ Raw;
          struct
          {
            /* 0x0004 */ unsigned short Level;
            /* 0x0006 */ unsigned short Group;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned long Affinity;
          } /* size: 0x000c */ Translated;
        }; /* size: 0x000c */
      } /* size: 0x000c */ MessageInterrupt;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Memory;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long Port;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ Dma;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned char TransferWidth;
        /* 0x000d */ unsigned char Reserved1;
        /* 0x000e */ unsigned char Reserved2;
        /* 0x000f */ unsigned char Reserved3;
      } /* size: 0x000c */ DmaV3;
      struct
      {
        /* 0x0004 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0004 */ unsigned long Start;
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Reserved;
      } /* size: 0x000c */ BusNumber;
      struct
      {
        /* 0x0004 */ unsigned long DataSize;
        /* 0x0008 */ unsigned long Reserved1;
        /* 0x000c */ unsigned long Reserved2;
      } /* size: 0x000c */ DeviceSpecificData;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length40;
      } /* size: 0x000c */ Memory40;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length48;
      } /* size: 0x000c */ Memory48;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length64;
      } /* size: 0x000c */ Memory64;
      struct
      {
        /* 0x0004 */ unsigned char Class;
        /* 0x0005 */ unsigned char Type;
        /* 0x0006 */ unsigned char Reserved1;
        /* 0x0007 */ unsigned char Reserved2;
        /* 0x0008 */ unsigned long IdLowPart;
        /* 0x000c */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x000c */
  } /* size: 0x000c */ u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR; /* size: 0x0010 */

typedef struct _CM_PARTIAL_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST; /* size: 0x0018 */

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0008 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x000c */

struct wistd::default_delete<NDIS_BIND_PROTOCOL_LINK>
{
}; /* size: 0x0001 */

enum wil_details_StagingConfigFeatureFields
{
  wil_details_StagingConfigFeatureFields_None = 0,
  wil_details_StagingConfigFeatureFields_ServiceState = 1,
  wil_details_StagingConfigFeatureFields_UserState = 2,
  wil_details_StagingConfigFeatureFields_TestState = 4,
  wil_details_StagingConfigFeatureFields_Variant = 8,
};

enum wil_details_ServiceReportingOptions
{
  wil_details_ServiceReportingOptions_None = 0,
  wil_details_ServiceReportingOptions_VariantConfig = 1,
};

struct NDIS_MEMORYDUMP_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0004 */ struct _LIST_ENTRY* PrevLinkage;
  /* 0x0008 */ unsigned long Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT; /* size: 0x000c */

enum wil_ReportingKind
{
  wil_ReportingKind_None = 0,
  wil_ReportingKind_UniqueUsage = 1,
  wil_ReportingKind_UniqueOpportunity = 2,
  wil_ReportingKind_DeviceUsage = 3,
  wil_ReportingKind_DeviceOpportunity = 4,
  wil_ReportingKind_TotalDuration = 5,
  wil_ReportingKind_PausedDuration = 6,
};

enum wil_details_ServiceReportingKind
{
  wil_details_ServiceReportingKind_UniqueUsage = 0,
  wil_details_ServiceReportingKind_UniqueOpportunity = 1,
  wil_details_ServiceReportingKind_DeviceUsage = 2,
  wil_details_ServiceReportingKind_DeviceOpportunity = 3,
  wil_details_ServiceReportingKind_PotentialUniqueUsage = 4,
  wil_details_ServiceReportingKind_PotentialUniqueOpportunity = 5,
  wil_details_ServiceReportingKind_PotentialDeviceUsage = 6,
  wil_details_ServiceReportingKind_PotentialDeviceOpportunity = 7,
  wil_details_ServiceReportingKind_EnabledTotalDuration = 8,
  wil_details_ServiceReportingKind_EnabledPausedDuration = 9,
  wil_details_ServiceReportingKind_DisabledTotalDuration = 10,
  wil_details_ServiceReportingKind_DisabledPausedDuration = 11,
  wil_details_ServiceReportingKind_CustomEnabledBase = 100,
  wil_details_ServiceReportingKind_CustomDisabledBase = 150,
  wil_details_ServiceReportingKind_Store = 254,
  wil_details_ServiceReportingKind_None = 255,
  wil_details_ServiceReportingKind_VariantDevicePotentialBase = 256,
  wil_details_ServiceReportingKind_VariantDeviceUsageBase = 320,
  wil_details_ServiceReportingKind_VariantUniquePotentialBase = 384,
  wil_details_ServiceReportingKind_VariantUniqueUsageBase = 448,
};

typedef struct _NDIS_DEVICE_OBJECT_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _UNICODE_STRING* DeviceName;
  /* 0x0008 */ struct _UNICODE_STRING* SymbolicName;
  /* 0x000c */ void** MajorFunctions /* function */;
  /* 0x0010 */ unsigned long ExtensionSize;
  /* 0x0014 */ const struct _UNICODE_STRING* DefaultSDDLString;
  /* 0x0018 */ const struct _GUID* DeviceClassGuid;
} NDIS_DEVICE_OBJECT_ATTRIBUTES, *PNDIS_DEVICE_OBJECT_ATTRIBUTES; /* size: 0x001c */

enum wil_VariantReportingKind
{
  wil_VariantReportingKind_None = 0,
  wil_VariantReportingKind_UniqueUsage = 1,
  wil_VariantReportingKind_DeviceUsage = 2,
};

typedef struct _PROCESSOR_NUMBER
{
  /* 0x0000 */ unsigned short Group;
  /* 0x0002 */ unsigned char Number;
  /* 0x0003 */ unsigned char Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; /* size: 0x0004 */

struct Rtl::KString
{
}; /* size: 0x0008 */

typedef struct _RTL_SPLAY_LINKS
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* Parent;
  /* 0x0004 */ struct _RTL_SPLAY_LINKS* LeftChild;
  /* 0x0008 */ struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS; /* size: 0x000c */

enum wil_FeatureEnabledStateKind
{
  wil_FeatureEnabledStateKind_All = 0,
  wil_FeatureEnabledStateKind_Service = 1,
  wil_FeatureEnabledStateKind_User = 2,
  wil_FeatureEnabledStateKind_Test = 3,
};

enum wil_FeatureEnabledState
{
  wil_FeatureEnabledState_Default = 0,
  wil_FeatureEnabledState_Disabled = 1,
  wil_FeatureEnabledState_Enabled = 2,
};

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

typedef struct _IMAGE_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned long SizeOfStackReserve;
  /* 0x004c */ unsigned long SizeOfStackCommit;
  /* 0x0050 */ unsigned long SizeOfHeapReserve;
  /* 0x0054 */ unsigned long SizeOfHeapCommit;
  /* 0x0058 */ unsigned long LoaderFlags;
  /* 0x005c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0060 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER; /* size: 0x00e0 */

typedef struct _IMAGE_NT_HEADERS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS; /* size: 0x00f8 */

enum wil_FeatureStore
{
  wil_FeatureStore_Machine = 0,
  wil_FeatureStore_User = 1,
  wil_FeatureStore_All = 2,
};

enum wil_FeatureChangeTime
{
  wil_FeatureChangeTime_OnRead = 0,
  wil_FeatureChangeTime_OnReload = 1,
  wil_FeatureChangeTime_OnSession = 2,
  wil_FeatureChangeTime_OnReboot = 3,
};

typedef enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
} OB_OPEN_REASON, *POB_OPEN_REASON;

typedef struct _NET_BUFFER_SHARED_MEMORY
{
  /* 0x0000 */ struct _NET_BUFFER_SHARED_MEMORY* NextSharedMemorySegment;
  /* 0x0004 */ unsigned long SharedMemoryFlags;
  /* 0x0008 */ void* SharedMemoryHandle;
  /* 0x000c */ unsigned long SharedMemoryOffset;
  /* 0x0010 */ unsigned long SharedMemoryLength;
} NET_BUFFER_SHARED_MEMORY, *PNET_BUFFER_SHARED_MEMORY; /* size: 0x0014 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  /* 0x0008 */ unsigned long Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY; /* size: 0x000c */

enum wil_FeatureVariantPayloadKind
{
  wil_FeatureVariantPayloadKind_None = 0,
  wil_FeatureVariantPayloadKind_Resident = 1,
  wil_FeatureVariantPayloadKind_External = 2,
};

typedef struct _DOT11_SSID
{
  /* 0x0000 */ unsigned long uSSIDLength;
  /* 0x0004 */ unsigned char ucSSID[32];
} DOT11_SSID, *PDOT11_SSID; /* size: 0x0024 */

struct DOT11_SSID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct _DOT11_SSID SSIDs[1];
}; /* size: 0x0030 */

typedef enum _NET_PNP_EVENT_CODE
{
  NetEventSetPower = 0,
  NetEventQueryPower = 1,
  NetEventQueryRemoveDevice = 2,
  NetEventCancelRemoveDevice = 3,
  NetEventReconfigure = 4,
  NetEventBindList = 5,
  NetEventBindsComplete = 6,
  NetEventPnPCapabilities = 7,
  NetEventPause = 8,
  NetEventRestart = 9,
  NetEventPortActivation = 10,
  NetEventPortDeactivation = 11,
  NetEventIMReEnableDevice = 12,
  NetEventNDKEnable = 13,
  NetEventNDKDisable = 14,
  NetEventFilterPreDetach = 15,
  NetEventBindFailed = 16,
  NetEventSwitchActivate = 17,
  NetEventAllowBindsAbove = 18,
  NetEventInhibitBindsAbove = 19,
  NetEventAllowStart = 20,
  NetEventRequirePause = 21,
  NetEventUploadGftFlowEntries = 22,
  NetEventMaximum = 23,
} NET_PNP_EVENT_CODE, *PNET_PNP_EVENT_CODE;

typedef struct _NET_PNP_EVENT
{
  /* 0x0000 */ enum _NET_PNP_EVENT_CODE NetEvent;
  /* 0x0004 */ void* Buffer;
  /* 0x0008 */ unsigned long BufferLength;
  /* 0x000c */ unsigned long NdisReserved[4];
  /* 0x001c */ unsigned long TransportReserved[4];
  /* 0x002c */ unsigned long TdiReserved[4];
  /* 0x003c */ unsigned long TdiClientReserved[4];
} NET_PNP_EVENT, *PNET_PNP_EVENT; /* size: 0x004c */

typedef enum _RTL_FEATURE_CONFIGURATION_TYPE
{
  RtlFeatureConfigurationBoot = 0,
  RtlFeatureConfigurationRuntime = 1,
  RtlFeatureConfigurationCount = 2,
} RTL_FEATURE_CONFIGURATION_TYPE, *PRTL_FEATURE_CONFIGURATION_TYPE;

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0004 */ void* StackBase;
  /* 0x0008 */ void* StackLimit;
  /* 0x000c */ void* SubSystemTib;
  union
  {
    /* 0x0010 */ void* FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ void* ArbitraryUserPointer;
  /* 0x0018 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x001c */

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0004 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0008 */

typedef struct _GDI_TEB_BATCH
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e0 */

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ wchar_t* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0008 */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x001c */ void* EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID ClientId;
  /* 0x0028 */ void* ActiveRpcHandle;
  /* 0x002c */ void* ThreadLocalStoragePointer;
  /* 0x0030 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ void* CsrClientThread;
  /* 0x0040 */ void* Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ void* WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ void* ReservedForDebuggerInstrumentation[16];
  /* 0x010c */ void* SystemReserved1[26];
  /* 0x0174 */ char PlaceholderCompatibilityMode;
  /* 0x0175 */ unsigned char PlaceholderHydrationAlwaysExplicit;
  /* 0x0176 */ char PlaceholderReserved[10];
  /* 0x0180 */ unsigned long ProxiedProcessId;
  /* 0x0184 */ struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
  /* 0x019c */ unsigned char WorkingOnBehalfTicket[8];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;
  /* 0x01ac */ unsigned long InstrumentationCallbackSp;
  /* 0x01b0 */ unsigned long InstrumentationCallbackPreviousPc;
  /* 0x01b4 */ unsigned long InstrumentationCallbackPreviousSp;
  /* 0x01b8 */ unsigned char InstrumentationCallbackDisabled;
  /* 0x01b9 */ unsigned char SpareBytes[23];
  /* 0x01d0 */ unsigned long TxFsContext;
  /* 0x01d4 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID RealClientId;
  /* 0x06bc */ void* GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ void* GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ void* glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ void* glReserved2;
  /* 0x0be0 */ void* glSectionInfo;
  /* 0x0be4 */ void* glSection;
  /* 0x0be8 */ void* glTable;
  /* 0x0bec */ void* glCurrentRC;
  /* 0x0bf0 */ void* glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0a */ char Padding_7[2];
  /* 0x0e0c */ void* DeallocationStack;
  /* 0x0e10 */ void* TlsSlots[64];
  /* 0x0f10 */ struct _LIST_ENTRY TlsLinks;
  /* 0x0f18 */ void* Vdm;
  /* 0x0f1c */ void* ReservedForNtRpc;
  /* 0x0f20 */ void* DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ void* Instrumentation[9];
  /* 0x0f50 */ struct _GUID ActivityId;
  /* 0x0f60 */ void* SubProcessTag;
  /* 0x0f64 */ void* PerflibData;
  /* 0x0f68 */ void* EtwTraceData;
  /* 0x0f6c */ void* WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x0f74 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x0f74 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x0f74 */ unsigned char ReservedPad0;
      /* 0x0f75 */ unsigned char ReservedPad1;
      /* 0x0f76 */ unsigned char ReservedPad2;
      /* 0x0f77 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0f78 */ unsigned long GuaranteedStackBytes;
  /* 0x0f7c */ void* ReservedForPerf;
  /* 0x0f80 */ void* ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ void* SavedPriorityState;
  /* 0x0f8c */ unsigned long ReservedForCodeCoverage;
  /* 0x0f90 */ void* ThreadPoolData;
  /* 0x0f94 */ void** TlsExpansionSlots;
  /* 0x0f98 */ unsigned long MuiGeneration;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ void* NlsCache;
  /* 0x0fa4 */ void* pShimData;
  /* 0x0fa8 */ unsigned long HeapData;
  /* 0x0fac */ void* CurrentTransactionHandle;
  /* 0x0fb0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x0fb4 */ void* FlsData;
  /* 0x0fb8 */ void* PreferredLanguages;
  /* 0x0fbc */ void* UserPrefLanguages;
  /* 0x0fc0 */ void* MergedPrefLanguages;
  /* 0x0fc4 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x0fc8 */ volatile unsigned short CrossTebFlags;
    /* 0x0fc8 */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0fca */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x0fca */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x0fca */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x0fca */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x0fca */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x0fca */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x0fca */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x0fca */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x0fca */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x0fca */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x0fca */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x0fca */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x0fca */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x0fca */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x0fca */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x0fca */ unsigned short SkipLoaderInit : 1; /* bit position: 14 */
      /* 0x0fca */ unsigned short SpareSameTebBits : 1; /* bit position: 15 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0fcc */ void* TxnScopeEnterCallback;
  /* 0x0fd0 */ void* TxnScopeExitCallback;
  /* 0x0fd4 */ void* TxnScopeContext;
  /* 0x0fd8 */ unsigned long LockCount;
  /* 0x0fdc */ long WowTebOffset;
  /* 0x0fe0 */ void* ResourceRetValue;
  /* 0x0fe4 */ void* ReservedForWdf;
  /* 0x0fe8 */ unsigned __int64 ReservedForCrt;
  /* 0x0ff0 */ struct _GUID EffectiveContainerId;
} TEB, *PTEB; /* size: 0x1000 */

typedef enum _RTL_FEATURE_CONFIGURATION_PRIORITY
{
  FeatureConfigurationPriorityAll = 0,
  FeatureConfigurationPriorityService = 4,
  FeatureConfigurationPriorityUser = 8,
  FeatureConfigurationPriorityTest = 12,
  FeatureConfigurationPriorityMax = 15,
} RTL_FEATURE_CONFIGURATION_PRIORITY, *PRTL_FEATURE_CONFIGURATION_PRIORITY;

enum wil_details_FeatureTestStateKind
{
  wil_details_FeatureTestStateKind_EnabledState = 0,
  wil_details_FeatureTestStateKind_Variant = 1,
};

typedef enum _DOT11_AUTH_ALGORITHM
{
  DOT11_AUTH_ALGO_80211_OPEN = 1,
  DOT11_AUTH_ALGO_80211_SHARED_KEY = 2,
  DOT11_AUTH_ALGO_WPA = 3,
  DOT11_AUTH_ALGO_WPA_PSK = 4,
  DOT11_AUTH_ALGO_WPA_NONE = 5,
  DOT11_AUTH_ALGO_RSNA = 6,
  DOT11_AUTH_ALGO_RSNA_PSK = 7,
  DOT11_AUTH_ALGO_WPA3 = 8,
  DOT11_AUTH_ALGO_WPA3_SAE = 9,
  DOT11_AUTH_ALGO_OWE = 10,
  DOT11_AUTH_ALGO_IHV_START = -2147483648,
  DOT11_AUTH_ALGO_IHV_END = -1,
} DOT11_AUTH_ALGORITHM, *PDOT11_AUTH_ALGORITHM;

typedef enum _DOT11_CIPHER_ALGORITHM
{
  DOT11_CIPHER_ALGO_NONE = 0,
  DOT11_CIPHER_ALGO_WEP40 = 1,
  DOT11_CIPHER_ALGO_TKIP = 2,
  DOT11_CIPHER_ALGO_CCMP = 4,
  DOT11_CIPHER_ALGO_WEP104 = 5,
  DOT11_CIPHER_ALGO_BIP = 6,
  DOT11_CIPHER_ALGO_GCMP = 8,
  DOT11_CIPHER_ALGO_GCMP_256 = 9,
  DOT11_CIPHER_ALGO_CCMP_256 = 10,
  DOT11_CIPHER_ALGO_BIP_GMAC_128 = 11,
  DOT11_CIPHER_ALGO_BIP_GMAC_256 = 12,
  DOT11_CIPHER_ALGO_BIP_CMAC_256 = 13,
  DOT11_CIPHER_ALGO_WPA_USE_GROUP = 256,
  DOT11_CIPHER_ALGO_RSN_USE_GROUP = 256,
  DOT11_CIPHER_ALGO_WEP = 257,
  DOT11_CIPHER_ALGO_IHV_START = -2147483648,
  DOT11_CIPHER_ALGO_IHV_END = -1,
} DOT11_CIPHER_ALGORITHM, *PDOT11_CIPHER_ALGORITHM;

typedef enum _DOT11_ASSOCIATION_STATE
{
  dot11_assoc_state_zero = 0,
  dot11_assoc_state_unauth_unassoc = 1,
  dot11_assoc_state_auth_unassoc = 2,
  dot11_assoc_state_auth_assoc = 3,
} DOT11_ASSOCIATION_STATE, *PDOT11_ASSOCIATION_STATE;

typedef enum _DOT11_POWER_MODE
{
  dot11_power_mode_unknown = 0,
  dot11_power_mode_active = 1,
  dot11_power_mode_powersave = 2,
} DOT11_POWER_MODE, *PDOT11_POWER_MODE;

typedef struct _DOT11_PEER_STATISTICS
{
  /* 0x0000 */ unsigned __int64 ullDecryptSuccessCount;
  /* 0x0008 */ unsigned __int64 ullDecryptFailureCount;
  /* 0x0010 */ unsigned __int64 ullTxPacketSuccessCount;
  /* 0x0018 */ unsigned __int64 ullTxPacketFailureCount;
  /* 0x0020 */ unsigned __int64 ullRxPacketSuccessCount;
  /* 0x0028 */ unsigned __int64 ullRxPacketFailureCount;
} DOT11_PEER_STATISTICS, *PDOT11_PEER_STATISTICS; /* size: 0x0030 */

typedef struct _DOT11_PEER_INFO
{
  /* 0x0000 */ unsigned char MacAddress[6];
  /* 0x0006 */ unsigned short usCapabilityInformation;
  /* 0x0008 */ enum _DOT11_AUTH_ALGORITHM AuthAlgo;
  /* 0x000c */ enum _DOT11_CIPHER_ALGORITHM UnicastCipherAlgo;
  /* 0x0010 */ enum _DOT11_CIPHER_ALGORITHM MulticastCipherAlgo;
  /* 0x0014 */ unsigned char bWpsEnabled;
  /* 0x0015 */ char Padding_8;
  /* 0x0016 */ unsigned short usListenInterval;
  /* 0x0018 */ unsigned char ucSupportedRates[255];
  /* 0x0117 */ char Padding_9;
  /* 0x0118 */ unsigned short usAssociationID;
  /* 0x011a */ char Padding_10[2];
  /* 0x011c */ enum _DOT11_ASSOCIATION_STATE AssociationState;
  /* 0x0120 */ enum _DOT11_POWER_MODE PowerMode;
  /* 0x0124 */ long Padding_11;
  /* 0x0128 */ union _LARGE_INTEGER liAssociationUpTime;
  /* 0x0130 */ struct _DOT11_PEER_STATISTICS Statistics;
} DOT11_PEER_INFO, *PDOT11_PEER_INFO; /* size: 0x0160 */

typedef struct _NET_BUFFER_LIST_DATA
{
  /* 0x0000 */ struct _NET_BUFFER_LIST* Next;
  /* 0x0004 */ struct _NET_BUFFER* FirstNetBuffer;
} NET_BUFFER_LIST_DATA, *PNET_BUFFER_LIST_DATA; /* size: 0x0008 */

typedef enum _EVENT_INFO_CLASS
{
  EventProviderBinaryTrackInfo = 0,
  EventProviderSetReserved1 = 1,
  EventProviderSetTraits = 2,
  EventProviderUseDescriptorType = 3,
  MaxEventInfo = 4,
} EVENT_INFO_CLASS, *PEVENT_INFO_CLASS;

typedef struct _TraceLoggingMetadata_t
{
  /* 0x0000 */ unsigned int Signature;
  /* 0x0004 */ unsigned short Size;
  /* 0x0006 */ unsigned char Version;
  /* 0x0007 */ unsigned char Flags;
  /* 0x0008 */ unsigned __int64 Magic;
} TraceLoggingMetadata_t, *PTraceLoggingMetadata_t; /* size: 0x0010 */

typedef enum
{
  Unlocked = 0,
  Shared = 1,
  Exclusive = 2,
} TAG_UNNAMED_1, *PTAG_UNNAMED_1;

typedef struct _NDIS_WAN_LINE_DOWN
{
  /* 0x0000 */ unsigned char RemoteAddress[6];
  /* 0x0006 */ unsigned char LocalAddress[6];
} NDIS_WAN_LINE_DOWN, *PNDIS_WAN_LINE_DOWN; /* size: 0x000c */

typedef struct _NET_BUFFER_LIST_CONTEXT
{
  /* 0x0000 */ struct _NET_BUFFER_LIST_CONTEXT* Next;
  /* 0x0004 */ unsigned short Size;
  /* 0x0006 */ unsigned short Offset;
  /* 0x0008 */ unsigned char* ContextData /* zero-length array */;
} NET_BUFFER_LIST_CONTEXT, *PNET_BUFFER_LIST_CONTEXT; /* size: 0x0008 */

typedef enum _NDIS_REQUEST_TYPE
{
  NdisRequestQueryInformation = 0,
  NdisRequestSetInformation = 1,
  NdisRequestQueryStatistics = 2,
  NdisRequestOpen = 3,
  NdisRequestClose = 4,
  NdisRequestSend = 5,
  NdisRequestTransferData = 6,
  NdisRequestReset = 7,
  NdisRequestGeneric1 = 8,
  NdisRequestGeneric2 = 9,
  NdisRequestGeneric3 = 10,
  NdisRequestGeneric4 = 11,
  NdisRequestMethod = 12,
} NDIS_REQUEST_TYPE, *PNDIS_REQUEST_TYPE;

enum CallRunMode
{
  RunSynchronous = 0,
  RunAsynchronous = 1,
  RunAsynchronousButOkayToBlock = 2,
};

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

enum KRegKey::BooleanDisposition
{
  FailIfNotFound = 0,
  DefaultToFalse = 1,
  DefaultToTrue = 2,
};

enum Ndis::BindSource::Flags
{
  Registry = 1,
  UserRequested = 2,
  UnsolicitedOpen = 4,
  TapiProxy = 8,
};

enum NetSetupSubkeyType
{
  Root = 0,
  PropertyBag = 1,
  KernelSummary = 2,
  Writeback = 3,
  Keywords = 4,
};

enum BIND_SOURCE_STATE
{
  AddBindSource = 0,
  RemoveBindSource = 1,
};

typedef struct _EVENT_FILTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Type;
} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR; /* size: 0x0010 */

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE* Left;
      /* 0x0004 */ struct _RTL_BALANCED_NODE* Right;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0008 */ unsigned char Red : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned char Balance : 2; /* bit position: 0 */
    /* 0x0008 */ unsigned long ParentValue;
  }; /* size: 0x0004 */
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; /* size: 0x000c */

enum NDIS_DO_NOT_BIND_REASON
{
  Reason_NoBindSourceWantsThisBinding = 1,
  Reason_DriverNotReady = 2,
  Reason_LastBindAttemptFailed = 4,
  Reason_LastRestartAttemptFailed = 8,
  Reason_DriverRejectedBinding = 16,
  Reason_MissingMandatoryFilter = 32,
  Reason_MissingOptionalFilter = 64,
  Reason_MissingModifyingFilter = 128,
  Reason_MandatoryMissingDuringBoot = 256,
  Reason_UnbindOnAttach = 512,
  Reason_UnbindOnDetach = 1024,
  Reason_MiniportLowPower = 2048,
  Reason_RemovingMiniport = 4096,
  Reason_RebindNeeded = 8192,
  Reason_DefaultPortNotActive = 0xffff8000,
  Reason_SecondaryMiniport = 0x10000,
  Reason_MiniportNotReady = 0x20000,
  Reason_DisabledByLegacyIoctl = 0x40000,
  Reason_MiniportDeviceNotStarted = 0x80000,
  Reason_NetEventInhibitBindsAbove = 0x100000,
  Reason_ProtocolDependsOnVBus = 0x200000,
  Reason_IncompatibleWithNotification = 0x400000,
  Reason_MiniportInterfaceDeregister = 0x800000,
};

enum NDIS_PAUSE_REASON
{
  PauseReason_InitialPause = 1,
  PauseReason_LowPower = 2,
  PauseReason_Pnp = 4,
  PauseReason_RemovingMiniport = 8,
  PauseReason_LowerDriverPaused = 16,
  PauseReason_RestartNeeded = 32,
  PauseReason_MandatoryMissingDuringBoot = 64,
  PauseReason_Wdf = 128,
  PauseReason_NetEventRequirePause = 256,
  PauseReason_InterfaceChangeInProgress = 512,
};

typedef enum _NET_IF_MEDIA_CONNECT_STATE
{
  MediaConnectStateUnknown = 0,
  MediaConnectStateConnected = 1,
  MediaConnectStateDisconnected = 2,
} NET_IF_MEDIA_CONNECT_STATE, *PNET_IF_MEDIA_CONNECT_STATE;

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char FRUId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char FRUText : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS; /* size: 0x0001 */

struct _KNODE;

class wistd::__compressed_pair<NDIS_BIND_FILTER_LINK *,wistd::default_delete<NDIS_BIND_FILTER_LINK> >
{
}; /* size: 0x0004 */

typedef enum _NET_IF_MEDIA_DUPLEX_STATE
{
  MediaDuplexStateUnknown = 0,
  MediaDuplexStateHalf = 1,
  MediaDuplexStateFull = 2,
} NET_IF_MEDIA_DUPLEX_STATE, *PNET_IF_MEDIA_DUPLEX_STATE;

typedef enum _NDIS_MEDIUM
{
  NdisMedium802_3 = 0,
  NdisMedium802_5 = 1,
  NdisMediumFddi = 2,
  NdisMediumWan = 3,
  NdisMediumLocalTalk = 4,
  NdisMediumDix = 5,
  NdisMediumArcnetRaw = 6,
  NdisMediumArcnet878_2 = 7,
  NdisMediumAtm = 8,
  NdisMediumWirelessWan = 9,
  NdisMediumIrda = 10,
  NdisMediumBpc = 11,
  NdisMediumCoWan = 12,
  NdisMedium1394 = 13,
  NdisMediumInfiniBand = 14,
  NdisMediumTunnel = 15,
  NdisMediumNative802_11 = 16,
  NdisMediumLoopback = 17,
  NdisMediumWiMAX = 18,
  NdisMediumIP = 19,
  NdisMediumMax = 20,
} NDIS_MEDIUM, *PNDIS_MEDIUM;

typedef enum __vc_attributes::event_receiverAttribute::type_e
{
  native = 0,
  com = 1,
  managed = 2,
} _vc_attributes::event_receiverAttribute::type_e, *P_vc_attributes::event_receiverAttribute::type_e;

typedef struct __vc_attributes::event_receiverAttribute
{
  /* 0x0000 */ enum __vc_attributes::event_receiverAttribute::type_e type;
  /* 0x0004 */ BOOL layout_dependent;
  /* 0x0005 */ char __PADDING__[3];
} _vc_attributes::event_receiverAttribute, *P_vc_attributes::event_receiverAttribute; /* size: 0x0008 */

struct _NDIS_LOG;

struct wil_details_StagingConfigHeaderProperties
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int ignoreServiceState : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int ignoreUserState : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int ignoreTestState : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int ignoreVariants : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int unused : 28; /* bit position: 4 */
  }; /* bitfield */
}; /* size: 0x0004 */

typedef enum _NDIS_INTERFACE_TYPE
{
  NdisInterfaceInternal = 0,
  NdisInterfaceIsa = 1,
  NdisInterfaceEisa = 2,
  NdisInterfaceMca = 3,
  NdisInterfaceTurboChannel = 4,
  NdisInterfacePci = 5,
  NdisInterfacePcMcia = 8,
  NdisInterfaceCBus = 9,
  NdisInterfaceMPIBus = 10,
  NdisInterfaceMPSABus = 11,
  NdisInterfaceProcessorInternal = 12,
  NdisInterfaceInternalPowerBus = 13,
  NdisInterfacePNPISABus = 14,
  NdisInterfacePNPBus = 15,
  NdisInterfaceUSB = 16,
  NdisInterfaceIrda = 17,
  NdisInterface1394 = 18,
  NdisMaximumInterfaceType = 19,
} NDIS_INTERFACE_TYPE, *PNDIS_INTERFACE_TYPE;

typedef enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS
{
  NdisPauseFunctionsUnsupported = 0,
  NdisPauseFunctionsSendOnly = 1,
  NdisPauseFunctionsReceiveOnly = 2,
  NdisPauseFunctionsSendAndReceive = 3,
  NdisPauseFunctionsUnknown = 4,
} NDIS_SUPPORTED_PAUSE_FUNCTIONS, *PNDIS_SUPPORTED_PAUSE_FUNCTIONS;

typedef struct _DESCRIPTOR
{
  /* 0x0000 */ unsigned short Pad;
  /* 0x0002 */ unsigned short Limit;
  /* 0x0004 */ unsigned long Base;
} DESCRIPTOR, *PDESCRIPTOR; /* size: 0x0008 */

typedef struct _KSPECIAL_REGISTERS
{
  /* 0x0000 */ unsigned long Cr0;
  /* 0x0004 */ unsigned long Cr2;
  /* 0x0008 */ unsigned long Cr3;
  /* 0x000c */ unsigned long Cr4;
  /* 0x0010 */ unsigned long KernelDr0;
  /* 0x0014 */ unsigned long KernelDr1;
  /* 0x0018 */ unsigned long KernelDr2;
  /* 0x001c */ unsigned long KernelDr3;
  /* 0x0020 */ unsigned long KernelDr6;
  /* 0x0024 */ unsigned long KernelDr7;
  /* 0x0028 */ struct _DESCRIPTOR Gdtr;
  /* 0x0030 */ struct _DESCRIPTOR Idtr;
  /* 0x0038 */ unsigned short Tr;
  /* 0x003a */ unsigned short Ldtr;
  /* 0x003c */ unsigned __int64 Xcr0;
  /* 0x0044 */ unsigned long ExceptionList;
  /* 0x0048 */ unsigned long Reserved[3];
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS; /* size: 0x0054 */

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _NDIS_M_PERIODIC_RECEIVE_STATE
{
  PeriodicReceivesOff = 0,
  PeriodicReceivesOn = 1,
  PeriodicReceivesBlocked = 2,
} NDIS_M_PERIODIC_RECEIVE_STATE, *PNDIS_M_PERIODIC_RECEIVE_STATE;

typedef struct _WORK_QUEUE_ITEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0008 */ void* WorkerRoutine /* function */;
  /* 0x000c */ void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; /* size: 0x0010 */

typedef struct _NDIS_M_PERIODIC_RECEIVES
{
  /* 0x0000 */ struct _NDIS_MINIPORT_BLOCK* NextMiniportBlock;
  /* 0x0004 */ enum _NDIS_M_PERIODIC_RECEIVE_STATE State;
  /* 0x0008 */ unsigned long SpinLock;
  /* 0x000c */ void* LockThread;
  /* 0x0010 */ long NumMQueuedNbls;
  /* 0x0014 */ long NumNblsDequeued;
  /* 0x0018 */ struct _NET_BUFFER_LIST* QueuedHead;
  /* 0x001c */ struct _NET_BUFFER_LIST* QueuedTail;
  /* 0x0020 */ unsigned long BoundToIP;
  /* 0x0024 */ unsigned char Paused;
  /* 0x0025 */ char Padding_12[3];
  /* 0x0028 */ long NblsAllocated;
  /* 0x002c */ unsigned long TrackingQueued;
  /* 0x0030 */ unsigned long TrackingDequeued;
  /* 0x0034 */ unsigned long TrackingResources;
  /* 0x0038 */ unsigned long TrackingPending;
  /* 0x003c */ unsigned long TrackingIndicated;
  /* 0x0040 */ unsigned long TrackingEmptied;
  /* 0x0044 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0054 */ long WorkItemQueued;
} NDIS_M_PERIODIC_RECEIVES, *PNDIS_M_PERIODIC_RECEIVES; /* size: 0x0058 */

typedef enum _NDIS_PNP_DEVICE_STATE
{
  NdisPnPDeviceAdded = 0,
  NdisPnPDeviceStarted = 1,
  NdisPnPDeviceQueryStopped = 2,
  NdisPnPDeviceStopped = 3,
  NdisPnPDeviceQueryRemoved = 4,
  NdisPnPDeviceRemoved = 5,
  NdisPnPDeviceSurpriseRemoved = 6,
} NDIS_PNP_DEVICE_STATE, *PNDIS_PNP_DEVICE_STATE;

typedef struct _RTL_AVL_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; /* size: 0x0004 */

class wistd::__compressed_pair<NDIS_BIND_PROTOCOL_LINK *,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >
{
}; /* size: 0x0004 */

typedef enum _NDIS_PHYSICAL_MEDIUM
{
  NdisPhysicalMediumUnspecified = 0,
  NdisPhysicalMediumWirelessLan = 1,
  NdisPhysicalMediumCableModem = 2,
  NdisPhysicalMediumPhoneLine = 3,
  NdisPhysicalMediumPowerLine = 4,
  NdisPhysicalMediumDSL = 5,
  NdisPhysicalMediumFibreChannel = 6,
  NdisPhysicalMedium1394 = 7,
  NdisPhysicalMediumWirelessWan = 8,
  NdisPhysicalMediumNative802_11 = 9,
  NdisPhysicalMediumBluetooth = 10,
  NdisPhysicalMediumInfiniband = 11,
  NdisPhysicalMediumWiMax = 12,
  NdisPhysicalMediumUWB = 13,
  NdisPhysicalMedium802_3 = 14,
  NdisPhysicalMedium802_5 = 15,
  NdisPhysicalMediumIrda = 16,
  NdisPhysicalMediumWiredWAN = 17,
  NdisPhysicalMediumWiredCoWan = 18,
  NdisPhysicalMediumOther = 19,
  NdisPhysicalMediumNative802_15_4 = 20,
  NdisPhysicalMediumMax = 21,
} NDIS_PHYSICAL_MEDIUM, *PNDIS_PHYSICAL_MEDIUM;

typedef enum _NDIS_MINIPORT_STATE
{
  NdisMiniportUndefinedState = 0,
  NdisMiniportHalted = 1,
  NdisMiniportInitializing = 2,
  NdisMiniportRestarting = 3,
  NdisMiniportRunning = 4,
  NdisMiniportPausing = 5,
  NdisMiniportPaused = 6,
} NDIS_MINIPORT_STATE, *PNDIS_MINIPORT_STATE;

typedef enum _NDIS_SEND_PATH_TYPE
{
  NdisFilterSendPath = 0,
  NdisNoFilterSendPath = 1,
  Ndis5NoFilterSendPath = 2,
  NdisFakeSendPath = 3,
} NDIS_SEND_PATH_TYPE, *PNDIS_SEND_PATH_TYPE;

typedef enum _NDIS_PORT_CONTROL_STATE
{
  NdisPortControlStateUnknown = 0,
  NdisPortControlStateControlled = 1,
  NdisPortControlStateUncontrolled = 2,
} NDIS_PORT_CONTROL_STATE, *PNDIS_PORT_CONTROL_STATE;

typedef struct __WIL__WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} _WIL__WNF_STATE_NAME, *P_WIL__WNF_STATE_NAME; /* size: 0x0008 */

typedef struct _EVENT_DATA_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  union
  {
    /* 0x000c */ unsigned long Reserved;
    struct
    {
      /* 0x000c */ unsigned char Type;
      /* 0x000d */ unsigned char Reserved1;
      /* 0x000e */ unsigned short Reserved2;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR; /* size: 0x0010 */

typedef enum _NDIS_PORT_AUTHORIZATION_STATE
{
  NdisPortAuthorizationUnknown = 0,
  NdisPortAuthorized = 1,
  NdisPortUnauthorized = 2,
  NdisPortReauthorizing = 3,
} NDIS_PORT_AUTHORIZATION_STATE, *PNDIS_PORT_AUTHORIZATION_STATE;

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef struct _WNF_TYPE_ID
{
  /* 0x0000 */ struct _GUID TypeId;
} WNF_TYPE_ID, *PWNF_TYPE_ID; /* size: 0x0010 */

typedef struct _KSPIN_LOCK_QUEUE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE* volatile Next;
  /* 0x0004 */ unsigned long* volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE; /* size: 0x0008 */

typedef enum _NET_IF_ADMIN_STATUS
{
  NET_IF_ADMIN_STATUS_UP = 1,
  NET_IF_ADMIN_STATUS_DOWN = 2,
  NET_IF_ADMIN_STATUS_TESTING = 3,
} NET_IF_ADMIN_STATUS, *PNET_IF_ADMIN_STATUS;

typedef struct _NDIS_WAN_CO_GET_LINK_INFO
{
  /* 0x0000 */ unsigned long MaxSendFrameSize;
  /* 0x0004 */ unsigned long MaxRecvFrameSize;
  /* 0x0008 */ unsigned long SendFramingBits;
  /* 0x000c */ unsigned long RecvFramingBits;
  /* 0x0010 */ unsigned long SendCompressionBits;
  /* 0x0014 */ unsigned long RecvCompressionBits;
  /* 0x0018 */ unsigned long SendACCM;
  /* 0x001c */ unsigned long RecvACCM;
} NDIS_WAN_CO_GET_LINK_INFO, *PNDIS_WAN_CO_GET_LINK_INFO; /* size: 0x0020 */

typedef struct _PENDING_STACK_EXPANSION_FALLBACK_WORK
{
  /* 0x0000 */ unsigned char IssueOidRequest;
  /* 0x0001 */ unsigned char CompleteOidRequest;
  /* 0x0002 */ char Padding_13[2];
  /* 0x0004 */ struct _NDIS_OID_REQUEST* DirectOidRequestsToComplete;
  /* 0x0008 */ struct _NDIS_STATUS_INDICATION* StatusIndications;
  /* 0x000c */ struct _NET_PNP_EVENT_NOTIFICATION* NetPnPEvents;
  /* 0x0010 */ struct _NET_DEVICE_PNP_EVENT* DevicePnPEvents;
  /* 0x0014 */ struct _NET_BUFFER_LIST* SentNblsToComplete;
  /* 0x0018 */ struct _NET_BUFFER_LIST* ReceivedNblsToComplete;
} PENDING_STACK_EXPANSION_FALLBACK_WORK, *PPENDING_STACK_EXPANSION_FALLBACK_WORK; /* size: 0x001c */

typedef enum _NET_IF_OPER_STATUS
{
  NET_IF_OPER_STATUS_UP = 1,
  NET_IF_OPER_STATUS_DOWN = 2,
  NET_IF_OPER_STATUS_TESTING = 3,
  NET_IF_OPER_STATUS_UNKNOWN = 4,
  NET_IF_OPER_STATUS_DORMANT = 5,
  NET_IF_OPER_STATUS_NOT_PRESENT = 6,
  NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7,
} NET_IF_OPER_STATUS, *PNET_IF_OPER_STATUS;

typedef enum _NDIS_MINIPORT_EVENT
{
  NdisMEvent_Unknown = 0,
  NdisMEventDx_SystemSleep = 1,
  NdisMEventDx_NicQuiet = 2,
  NdisMEventDx_SSIdle = 3,
  NdisMEventDx_D3DTimeout = 4,
  NdisMEventD0_SystemResume = 5,
  NdisMEventD0_NicActive = 6,
  NdisMEventD0_AoAcWake = 7,
  NdisMEventD0_SSResume = 8,
  NdisMEventD0_D3DCancel = 9,
  NdisMEventD0_D3DWake = 10,
  NdisMEventD0_D3DResume = 11,
  NdisMEventD0_Complete = 12,
  NdisMEventD0_SSComplete = 13,
  NdisMEventDx_Complete = 14,
  NdisMEventDx_SSComplete = 15,
  NdisMEvent_SSCancelIdle = 16,
  NdisMEvent_SSIdleComplete = 17,
  NdisMEvent_SSIdleReq = 18,
  NdisMEvent_SSIdleConfirm = 19,
  NdisMEventD0_AoAcSurpriseWake = 20,
  NdisMEvent_DeviceAdded = 31,
  NdisMEvent_DeviceStart = 32,
  NdisMEvent_DeviceQueryRemove = 33,
  NdisMEvent_DeviceCancelRemove = 34,
  NdisMEvent_DeviceRemove = 35,
  NdisMEvent_DeviceSurpriseRemoval = 36,
  NdisMEvent_DeviceQueryStop = 37,
  NdisMEvent_DeviceCancelStop = 38,
  NdisMEvent_DeviceStop = 39,
  NdisMEvent_MiniportInitialized = 51,
  NdisMEvent_MiniportHalted = 52,
  NdisMEvent_MiniportPaused = 53,
  NdisMEvent_MiniportRestarted = 54,
  NdisMEvent_MiniportPmInitialized = 55,
  NdisMEventErr_Min = 70,
  NdisMEventErr_UserRequested = 70,
  NdisMEventErr_MiniportRequested = 71,
  NdisMEventErr_FailedIMInitDevice = 72,
  NdisMEventErr_FailedRestart = 73,
  NdisMEventErr_FailedPowerD0 = 74,
  NdisMEventErr_FailedPowerDx = 75,
  NdisMEventErr_UninstalledByUsermode = 76,
  NdisMEventErr_Max = 76,
} NDIS_MINIPORT_EVENT, *PNDIS_MINIPORT_EVENT;

typedef struct _FLOATING_SAVE_AREA
{
  /* 0x0000 */ unsigned long ControlWord;
  /* 0x0004 */ unsigned long StatusWord;
  /* 0x0008 */ unsigned long TagWord;
  /* 0x000c */ unsigned long ErrorOffset;
  /* 0x0010 */ unsigned long ErrorSelector;
  /* 0x0014 */ unsigned long DataOffset;
  /* 0x0018 */ unsigned long DataSelector;
  /* 0x001c */ unsigned char RegisterArea[80];
  /* 0x006c */ unsigned long Spare0;
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA; /* size: 0x0070 */

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
  /* 0x0004 */ unsigned long Dr0;
  /* 0x0008 */ unsigned long Dr1;
  /* 0x000c */ unsigned long Dr2;
  /* 0x0010 */ unsigned long Dr3;
  /* 0x0014 */ unsigned long Dr6;
  /* 0x0018 */ unsigned long Dr7;
  /* 0x001c */ struct _FLOATING_SAVE_AREA FloatSave;
  /* 0x008c */ unsigned long SegGs;
  /* 0x0090 */ unsigned long SegFs;
  /* 0x0094 */ unsigned long SegEs;
  /* 0x0098 */ unsigned long SegDs;
  /* 0x009c */ unsigned long Edi;
  /* 0x00a0 */ unsigned long Esi;
  /* 0x00a4 */ unsigned long Ebx;
  /* 0x00a8 */ unsigned long Edx;
  /* 0x00ac */ unsigned long Ecx;
  /* 0x00b0 */ unsigned long Eax;
  /* 0x00b4 */ unsigned long Ebp;
  /* 0x00b8 */ unsigned long Eip;
  /* 0x00bc */ unsigned long SegCs;
  /* 0x00c0 */ unsigned long EFlags;
  /* 0x00c4 */ unsigned long Esp;
  /* 0x00c8 */ unsigned long SegSs;
  /* 0x00cc */ unsigned char ExtendedRegisters[512];
} CONTEXT, *PCONTEXT; /* size: 0x02cc */

typedef struct _KPROCESSOR_STATE
{
  /* 0x0000 */ struct _CONTEXT ContextFrame;
  /* 0x02cc */ struct _KSPECIAL_REGISTERS SpecialRegisters;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE; /* size: 0x0320 */

typedef struct _KPRCB
{
  /* 0x0000 */ unsigned short MinorVersion;
  /* 0x0002 */ unsigned short MajorVersion;
  /* 0x0004 */ struct _KTHREAD* CurrentThread;
  /* 0x0008 */ struct _KTHREAD* NextThread;
  /* 0x000c */ struct _KTHREAD* IdleThread;
  /* 0x0010 */ unsigned char LegacyNumber;
  /* 0x0011 */ unsigned char NestingLevel;
  /* 0x0012 */ unsigned short BuildType;
  /* 0x0014 */ char CpuType;
  /* 0x0015 */ char CpuID;
  union
  {
    /* 0x0016 */ unsigned short CpuStep;
    struct
    {
      /* 0x0016 */ unsigned char CpuStepping;
      /* 0x0017 */ unsigned char CpuModel;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0018 */ struct _KPROCESSOR_STATE ProcessorState;
  /* 0x0338 */ struct _KNODE* ParentNode;
  /* 0x033c */ char* PriorityState;
  /* 0x0340 */ unsigned long KernelReserved[14];
  /* 0x0378 */ unsigned long HalReserved[16];
  /* 0x03b8 */ unsigned long CFlushSize;
  /* 0x03bc */ unsigned char CoresPerPhysicalProcessor;
  /* 0x03bd */ unsigned char LogicalProcessorsPerCore;
  /* 0x03be */ unsigned char CpuVendor;
  /* 0x03bf */ unsigned char PrcbPad0[1];
  /* 0x03c0 */ unsigned long MHz;
  /* 0x03c4 */ unsigned char GroupIndex;
  /* 0x03c5 */ unsigned char Group;
  /* 0x03c6 */ unsigned char PrcbPad05[2];
  /* 0x03c8 */ unsigned long GroupSetMember;
  /* 0x03cc */ unsigned long Number;
  /* 0x03d0 */ unsigned char ClockOwner;
  union
  {
    /* 0x03d1 */ unsigned char PendingTickFlags;
    struct /* bitfield */
    {
      /* 0x03d1 */ unsigned char PendingTick : 1; /* bit position: 0 */
      /* 0x03d1 */ unsigned char PendingBackupTick : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x03d2 */ unsigned char PrcbPad10[70];
  /* 0x0418 */ struct _KSPIN_LOCK_QUEUE LockQueue[17];
} KPRCB, *PKPRCB; /* size: 0x04a0 */

typedef union _NET_LUID_LH
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Reserved : 24; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 NetLuidIndex : 24; /* bit position: 24 */
        /* 0x0000 */ unsigned __int64 IfType : 16; /* bit position: 48 */
      }; /* bitfield */
    } /* size: 0x0008 */ Info;
  }; /* size: 0x0008 */
} NET_LUID_LH, *PNET_LUID_LH; /* size: 0x0008 */

typedef struct _NDIS_FILTER_INTERFACE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long FilterType;
  /* 0x000c */ unsigned long FilterRunType;
  /* 0x0010 */ unsigned long IfIndex;
  /* 0x0014 */ long Padding_14;
  /* 0x0018 */ union _NET_LUID_LH NetLuid;
  /* 0x0020 */ struct _UNICODE_STRING FilterClass;
  /* 0x0028 */ struct _UNICODE_STRING FilterInstanceName;
} NDIS_FILTER_INTERFACE, *PNDIS_FILTER_INTERFACE; /* size: 0x0030 */

typedef enum _NDIS_RSS_PROFILE
{
  NdisRssProfileClosest = 1,
  NdisRssProfileClosestStatic = 2,
  NdisRssProfileNuma = 3,
  NdisRssProfileNumaStatic = 4,
  NdisRssProfileConservative = 5,
  NdisRssProfileMaximum = 6,
} NDIS_RSS_PROFILE, *PNDIS_RSS_PROFILE;

typedef enum _NDIS_ENCAPSULATION
{
  UNSPECIFIED_Encapsulation = 0,
  NULL_Encapsulation = 1,
  IEEE_802_3_Encapsulation = 2,
  IEEE_802_5_Encapsulation = 3,
  LLC_SNAP_ROUTED_Encapsulation = 4,
  LLC_SNAP_BRIDGED_Encapsulation = 5,
} NDIS_ENCAPSULATION, *PNDIS_ENCAPSULATION;

typedef struct _NDIS_ENCAPSULATION_FORMAT
{
  /* 0x0000 */ enum _NDIS_ENCAPSULATION Encapsulation;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long FixedHeaderSize : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0004 */ Flags;
  /* 0x0008 */ unsigned long EncapsulationHeaderSize;
} NDIS_ENCAPSULATION_FORMAT, *PNDIS_ENCAPSULATION_FORMAT; /* size: 0x000c */

typedef struct _NDIS_TASK_OFFLOAD_HEADER
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long Reserved;
  /* 0x000c */ unsigned long OffsetFirstTask;
  /* 0x0010 */ struct _NDIS_ENCAPSULATION_FORMAT EncapsulationFormat;
} NDIS_TASK_OFFLOAD_HEADER, *PNDIS_TASK_OFFLOAD_HEADER; /* size: 0x001c */

typedef enum _NDIS_PM_WAKE_REASON_TYPE
{
  NdisWakeReasonUnspecified = 0,
  NdisWakeReasonPacket = 1,
  NdisWakeReasonMediaDisconnect = 2,
  NdisWakeReasonMediaConnect = 3,
  NdisWakeReasonWlanNLODiscovery = 4096,
  NdisWakeReasonWlanAPAssociationLost = 4097,
  NdisWakeReasonWlanGTKHandshakeError = 4098,
  NdisWakeReasonWlan4WayHandshakeRequest = 4099,
  NdisWakeReasonWwanRegisterState = 8192,
  NdisWakeReasonWwanSMSReceive = 8193,
  NdisWakeReasonWwanUSSDReceive = 8194,
  NdisWakeReasonWwanPacketState = 8196,
  NdisWakeReasonWwanUiccChange = 8197,
} NDIS_PM_WAKE_REASON_TYPE, *PNDIS_PM_WAKE_REASON_TYPE;

enum NetSetupStoreType
{
  System = 0,
  Mutable = 1,
};

typedef enum _NDIS_FILTER_STATE
{
  NdisFilterDetached = 0,
  NdisFilterAttaching = 1,
  NdisFilterPaused = 2,
  NdisFilterRestarting = 3,
  NdisFilterRunning = 4,
  NdisFilterPausing = 5,
  NdisFilterDetaching = 6,
} NDIS_FILTER_STATE, *PNDIS_FILTER_STATE;

typedef struct _NDIS_FILTER_TASK_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OFFLOAD OffloadCaps;
} NDIS_FILTER_TASK_OFFLOAD, *PNDIS_FILTER_TASK_OFFLOAD; /* size: 0x00d8 */

typedef enum _NET_IF_ACCESS_TYPE
{
  NET_IF_ACCESS_LOOPBACK = 1,
  NET_IF_ACCESS_BROADCAST = 2,
  NET_IF_ACCESS_POINT_TO_POINT = 3,
  NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
  NET_IF_ACCESS_MAXIMUM = 5,
} NET_IF_ACCESS_TYPE, *PNET_IF_ACCESS_TYPE;

typedef enum _IPSEC_OFFLOAD_V2_OPERATION
{
  IPsecOffloadV2Ah = 1,
  IPsecOffloadV2Esp = 2,
  IPsecOffloadV2Max = 3,
} IPSEC_OFFLOAD_V2_OPERATION, *PIPSEC_OFFLOAD_V2_OPERATION;

typedef struct _IPSEC_OFFLOAD_V2_UPDATE_SA
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* OffloadHandle;
  /* 0x0008 */ enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
  /* 0x000c */ unsigned long Spi;
  /* 0x0010 */ unsigned long SequenceNumberHighOrder;
} IPSEC_OFFLOAD_V2_UPDATE_SA, *PIPSEC_OFFLOAD_V2_UPDATE_SA; /* size: 0x0014 */

typedef struct _NDIS_PHYSICAL_ADDRESS_UNIT
{
  /* 0x0000 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0008 */ unsigned int Length;
  /* 0x000c */ long __PADDING__[1];
} NDIS_PHYSICAL_ADDRESS_UNIT, *PNDIS_PHYSICAL_ADDRESS_UNIT; /* size: 0x0010 */

struct wistd::__invokable_r<void,void (__stdcall*)(NDISWATCHDOG__ *),NDISWATCHDOG__ * &>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

typedef enum _NET_IF_CONNECTION_TYPE
{
  NET_IF_CONNECTION_DEDICATED = 1,
  NET_IF_CONNECTION_PASSIVE = 2,
  NET_IF_CONNECTION_DEMAND = 3,
  NET_IF_CONNECTION_MAXIMUM = 4,
} NET_IF_CONNECTION_TYPE, *PNET_IF_CONNECTION_TYPE;

typedef enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE
{
  NdisMiniportHookDriverTypeNone = 0,
  NdisMiniportHookDriverTypeWdi = 1,
  NdisMiniportHookDriverType_Maximum = 2,
} NDIS_MINIPORT_HOOK_DRIVER_TYPE, *PNDIS_MINIPORT_HOOK_DRIVER_TYPE;

enum NDIS_NDIS5_DRIVER_STATE
{
  Ndis5StateUnused = 0,
  Ndis5StatePaused = 1,
  Ndis5StateRunning = 2,
};

typedef enum _NDIS_DEVICE_POWER_STATE
{
  NdisDeviceStateUnspecified = 0,
  NdisDeviceStateD0 = 1,
  NdisDeviceStateD1 = 2,
  NdisDeviceStateD2 = 3,
  NdisDeviceStateD3 = 4,
  NdisDeviceStateMaximum = 5,
} NDIS_DEVICE_POWER_STATE, *PNDIS_DEVICE_POWER_STATE;

enum NDIS_MINIPORT_POLICY_OWNER
{
  MiniportNotOwned = 0,
  MiniportOwnedByPowerManagement = 1,
  MiniportOwnedByBindEngine = 2,
};

typedef struct _GENERIC_MAPPING
{
  /* 0x0000 */ unsigned long GenericRead;
  /* 0x0004 */ unsigned long GenericWrite;
  /* 0x0008 */ unsigned long GenericExecute;
  /* 0x000c */ unsigned long GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING; /* size: 0x0010 */

typedef struct _ACCESS_REASONS
{
  /* 0x0000 */ unsigned long Data[32];
} ACCESS_REASONS, *PACCESS_REASONS; /* size: 0x0080 */

typedef struct _AUX_ACCESS_DATA
{
  /* 0x0000 */ struct _PRIVILEGE_SET* PrivilegesUsed;
  /* 0x0004 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0014 */ unsigned long AccessesToAudit;
  /* 0x0018 */ unsigned long MaximumAuditMask;
  /* 0x001c */ struct _GUID TransactionId;
  /* 0x002c */ void* NewSecurityDescriptor;
  /* 0x0030 */ void* ExistingSecurityDescriptor;
  /* 0x0034 */ void* ParentSecurityDescriptor;
  /* 0x0038 */ void* DeRefSecurityDescriptor /* function */;
  /* 0x003c */ void* SDLock;
  /* 0x0040 */ struct _ACCESS_REASONS AccessReasons;
  /* 0x00c0 */ unsigned char GenerateStagingEvents;
  /* 0x00c1 */ char __PADDING__[3];
} AUX_ACCESS_DATA, *PAUX_ACCESS_DATA; /* size: 0x00c4 */

typedef struct _WWAN_SET_SIGNAL_INDICATION
{
  /* 0x0000 */ unsigned long RssiInterval;
  /* 0x0004 */ unsigned long RssiThreshold;
} WWAN_SET_SIGNAL_INDICATION, *PWWAN_SET_SIGNAL_INDICATION; /* size: 0x0008 */

typedef struct _NDIS_WWAN_SET_SIGNAL_INDICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_SIGNAL_INDICATION SignalIndication;
} NDIS_WWAN_SET_SIGNAL_INDICATION, *PNDIS_WWAN_SET_SIGNAL_INDICATION; /* size: 0x000c */

typedef enum _PKTMON_PACKET_TYPE
{
  PktMonPayload_Unknown = 0,
  PktMonPayload_Ethernet = 1,
  PktMonPayload_WiFi = 2,
  PktMonPayload_MBB = 3,
  PktMonPayload_HTTP = 4,
} PKTMON_PACKET_TYPE, *PPKTMON_PACKET_TYPE;

typedef enum _NDIS_HALT_ACTION
{
  NdisHaltDeviceDisabled = 0,
  NdisHaltDeviceInstanceDeInitialized = 1,
  NdisHaltDevicePoweredDown = 2,
  NdisHaltDeviceSurpriseRemoved = 3,
  NdisHaltDeviceFailed = 4,
  NdisHaltDeviceInitializationFailed = 5,
  NdisHaltDeviceStopped = 6,
} NDIS_HALT_ACTION, *PNDIS_HALT_ACTION;

typedef enum _NDIS_SHUTDOWN_ACTION
{
  NdisShutdownPowerOff = 0,
  NdisShutdownBugCheck = 1,
} NDIS_SHUTDOWN_ACTION, *PNDIS_SHUTDOWN_ACTION;

struct _KPROCESS;

struct DOT11_PRIVACY_EXEMPTION
{
  /* 0x0000 */ unsigned short usEtherType;
  /* 0x0002 */ unsigned short usExemptionActionType;
  /* 0x0004 */ unsigned short usExemptionPacketType;
}; /* size: 0x0006 */

typedef enum _IO_RATE_CONTROL_TYPE
{
  IoRateControlTypeCapMin = 0,
  IoRateControlTypeIopsCap = 0,
  IoRateControlTypeBandwidthCap = 1,
  IoRateControlTypeTimePercentCap = 2,
  IoRateControlTypeCapMax = 2,
  IoRateControlTypeReservationMin = 3,
  IoRateControlTypeIopsReservation = 3,
  IoRateControlTypeBandwidthReservation = 4,
  IoRateControlTypeTimePercentReservation = 5,
  IoRateControlTypeReservationMax = 5,
  IoRateControlTypeCriticalReservationMin = 6,
  IoRateControlTypeIopsCriticalReservation = 6,
  IoRateControlTypeBandwidthCriticalReservation = 7,
  IoRateControlTypeTimePercentCriticalReservation = 8,
  IoRateControlTypeCriticalReservationMax = 8,
  IoRateControlTypeSoftCapMin = 9,
  IoRateControlTypeIopsSoftCap = 9,
  IoRateControlTypeBandwidthSoftCap = 10,
  IoRateControlTypeTimePercentSoftCap = 11,
  IoRateControlTypeSoftCapMax = 11,
  IoRateControlTypeLimitExcessNotifyMin = 12,
  IoRateControlTypeIopsLimitExcessNotify = 12,
  IoRateControlTypeBandwidthLimitExcessNotify = 13,
  IoRateControlTypeTimePercentLimitExcessNotify = 14,
  IoRateControlTypeLimitExcessNotifyMax = 14,
  IoRateControlTypeMax = 15,
} IO_RATE_CONTROL_TYPE, *PIO_RATE_CONTROL_TYPE;

typedef struct _OFFLOAD_STATE_HEADER
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long RecognizedOptions;
} OFFLOAD_STATE_HEADER, *POFFLOAD_STATE_HEADER; /* size: 0x0008 */

typedef struct _PATH_OFFLOAD_STATE_DELEGATED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
} PATH_OFFLOAD_STATE_DELEGATED, *PPATH_OFFLOAD_STATE_DELEGATED; /* size: 0x0008 */

typedef struct _ETW_BUFFER_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char ProcessorNumber;
      /* 0x0001 */ unsigned char Alignment;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short ProcessorIndex;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short LoggerId;
} ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT; /* size: 0x0004 */

typedef enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
  InterruptActiveBothTriggerLow = 3,
  InterruptActiveBothTriggerHigh = 4,
} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef struct _NDIS_POOL_HEADER
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long ListLock;
  /* 0x0008 */ struct _LIST_ENTRY AllocatedList;
} NDIS_POOL_HEADER, *PNDIS_POOL_HEADER; /* size: 0x0010 */

typedef enum _NDIS_RECEIVE_QUEUE_PNP_STATE
{
  NdisReceiveQueuePnPStateUndefined = 0,
  NdisReceiveQueuePnPStateAddedToList = 1,
  NdisReceiveQueuePnPStateAllocated = 2,
  NdisReceiveQueuePnPStateEnabled = 3,
  NdisReceiveQueuePnPStateMaximum = 4,
} NDIS_RECEIVE_QUEUE_PNP_STATE, *PNDIS_RECEIVE_QUEUE_PNP_STATE;

typedef enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE
{
  NdisReceiveQueueOperationalStateUndefined = 0,
  NdisReceiveQueueOperationalStateRunning = 1,
  NdisReceiveQueueOperationalStatePaused = 2,
  NdisReceiveQueueOperationalStateDmaStopped = 3,
  NdisReceiveQueueOperationalStateMaximum = 4,
} NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE, *PNDIS_RECEIVE_QUEUE_OPERATIONAL_STATE;

typedef enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectWakeInformation = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectClearEvent = 25,
  JobObjectInterferenceInformation = 26,
  JobObjectClearPeakJobMemoryUsed = 27,
  JobObjectMemoryUsageInformation = 28,
  JobObjectSharedCommit = 29,
  JobObjectContainerId = 30,
  JobObjectIoRateControlInformation = 31,
  JobObjectSiloRootDirectory = 37,
  JobObjectServerSiloBasicInformation = 38,
  JobObjectServerSiloUserSharedData = 39,
  JobObjectServerSiloInitialize = 40,
  JobObjectServerSiloRunningState = 41,
  JobObjectIoAttribution = 42,
  JobObjectMemoryPartitionInformation = 43,
  JobObjectContainerTelemetryId = 44,
  JobObjectSiloSystemRoot = 45,
  JobObjectEnergyTrackingState = 46,
  JobObjectThreadImpersonationInformation = 47,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  JobObjectReserved8Information = 25,
  JobObjectReserved9Information = 26,
  JobObjectReserved10Information = 27,
  JobObjectReserved11Information = 28,
  JobObjectReserved12Information = 29,
  JobObjectReserved13Information = 30,
  JobObjectReserved14Information = 31,
  JobObjectNetRateControlInformation = 32,
  JobObjectNotificationLimitInformation2 = 33,
  JobObjectLimitViolationInformation2 = 34,
  JobObjectCreateSilo = 35,
  JobObjectSiloBasicInformation = 36,
  JobObjectReserved15Information = 37,
  JobObjectReserved16Information = 38,
  JobObjectReserved17Information = 39,
  JobObjectReserved18Information = 40,
  JobObjectReserved19Information = 41,
  JobObjectReserved20Information = 42,
  JobObjectReserved21Information = 43,
  JobObjectReserved22Information = 44,
  JobObjectReserved23Information = 45,
  JobObjectReserved24Information = 46,
  JobObjectReserved25Information = 47,
  MaxJobObjectInfoClass = 48,
} JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef struct _NDIS_WAN_COMPRESS_INFO
{
  /* 0x0000 */ unsigned char SessionKey[8];
  /* 0x0008 */ unsigned long MSCompType;
  /* 0x000c */ unsigned char CompType;
  /* 0x000d */ char Padding_15;
  /* 0x000e */ unsigned short CompLength;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned char CompOUI[3];
      /* 0x0013 */ unsigned char CompSubType;
      /* 0x0014 */ unsigned char CompValues[32];
    } /* size: 0x0024 */ Proprietary;
    struct
    {
      struct
      {
        /* 0x0010 */ unsigned char CompValues[32];
      } /* size: 0x0020 */ Public;
      /* 0x0030 */ long __PADDING__[1];
    }; /* size: 0x0024 */
  }; /* size: 0x0024 */
} NDIS_WAN_COMPRESS_INFO, *PNDIS_WAN_COMPRESS_INFO; /* size: 0x0034 */

typedef struct _NDIS_WAN_CO_GET_COMP_INFO
{
  /* 0x0000 */ struct _NDIS_WAN_COMPRESS_INFO SendCapabilities;
  /* 0x0034 */ struct _NDIS_WAN_COMPRESS_INFO RecvCapabilities;
} NDIS_WAN_CO_GET_COMP_INFO, *PNDIS_WAN_CO_GET_COMP_INFO; /* size: 0x0068 */

typedef enum _NDIS_INTERRUPT_TYPE
{
  NDIS_CONNECT_LINE_BASED = 1,
  NDIS_CONNECT_MESSAGE_BASED = 2,
} NDIS_INTERRUPT_TYPE, *PNDIS_INTERRUPT_TYPE;

typedef enum _NETSETUPPROP_OPERATOR
{
  NETSETUPPROP_OPERATOR_MODIFIER_NOT = 0x10000,
  NETSETUPPROP_OPERATOR_MODIFIER_IGNORE_CASE = 0x20000,
  NETSETUPPROP_OPERATOR_NONE = 0,
  NETSETUPPROP_OPERATOR_EXISTS = 1,
  NETSETUPPROP_OPERATOR_NOT_EXISTS = 0x10001,
  NETSETUPPROP_OPERATOR_EQUALS = 2,
  NETSETUPPROP_OPERATOR_NOT_EQUALS = 0x10002,
  NETSETUPPROP_OPERATOR_GREATER_THAN = 3,
  NETSETUPPROP_OPERATOR_LESS_THAN = 4,
  NETSETUPPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
  NETSETUPPROP_OPERATOR_LESS_THAN_EQUALS = 6,
  NETSETUPPROP_OPERATOR_EQUALS_IGNORE_CASE = 0x20002,
  NETSETUPPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 0x30002,
  NETSETUPPROP_OPERATOR_BITMASK_ALL = 7,
  NETSETUPPROP_OPERATOR_BITMASK_ANY = 8,
  NETSETUPPROP_OPERATOR_CHANGED = 256,
  NETSETUPPROP_OPERATOR_CHANGED_ANY_IN_NAMESPACE = 257,
  NETSETUPPROP_OPERATOR_LIST_CONTAINS = 4096,
  NETSETUPPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 0x21000,
  NETSETUPPROP_OPERATOR_LIST_COUNT = 8192,
  NETSETUPPROP_OPERATOR_AND_OPEN = 0x100000,
  NETSETUPPROP_OPERATOR_AND_CLOSE = 0x200000,
  NETSETUPPROP_OPERATOR_OR_OPEN = 0x300000,
  NETSETUPPROP_OPERATOR_OR_CLOSE = 0x400000,
  NETSETUPPROP_OPERATOR_NOT_OPEN = 0x500000,
  NETSETUPPROP_OPERATOR_NOT_CLOSE = 0x600000,
  NETSETUPPROP_OPERATOR_XOR_OPEN = 0x700000,
  NETSETUPPROP_OPERATOR_XOR_CLOSE = 0x800000,
  NETSETUPPROP_TARGET_MODIFIER_PRINCIPAL_OBJECT = 0,
  NETSETUPPROP_TARGET_MODIFIER_TRANSACTION = 0x10000000,
  NETSETUPPROP_TARGET_MODIFIER_ANY_ON_PATH = 0x20000000,
  NETSETUPPROP_TARGET_MODIFIER_ALL_ON_PATH = 0x20010000,
  NETSETUPPROP_TARGET_MODIFIER_TOP_OF_PATH = 0x30000000,
  NETSETUPPROP_TARGET_MODIFIER_BOTTOM_OF_PATH = 0x40000000,
  NETSETUPPROP_TARGET_MODIFIER_GLOBAL = 0x50000000,
  NETSETUPPROP_TARGET_MODIFIER_ANY_PROPERTY = 0x60000000,
  NETSETUPPROP_OPERATOR_MASK_EVAL = 4095,
  NETSETUPPROP_OPERATOR_MASK_LIST = 0xfffff000,
  NETSETUPPROP_OPERATOR_MASK_MODIFIER = 0xf0000,
  NETSETUPPROP_OPERATOR_MASK_NOT_LOGICAL = 0xfffff,
  NETSETUPPROP_OPERATOR_MASK_LOGICAL = 0xff00000,
  NETSETUPPROP_OPERATOR_MASK_TARGET = -268435456,
} NETSETUPPROP_OPERATOR, *PNETSETUPPROP_OPERATOR;

typedef struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* ClCreateVcHandler /* function */;
  /* 0x000c */ void* ClDeleteVcHandler /* function */;
  /* 0x0010 */ void* ClOidRequestHandler /* function */;
  /* 0x0014 */ void* ClOidRequestCompleteHandler /* function */;
  /* 0x0018 */ void* ClOpenAfCompleteHandlerEx /* function */;
  /* 0x001c */ void* ClCloseAfCompleteHandler /* function */;
  /* 0x0020 */ void* ClRegisterSapCompleteHandler /* function */;
  /* 0x0024 */ void* ClDeregisterSapCompleteHandler /* function */;
  /* 0x0028 */ void* ClMakeCallCompleteHandler /* function */;
  /* 0x002c */ void* ClModifyCallQoSCompleteHandler /* function */;
  /* 0x0030 */ void* ClCloseCallCompleteHandler /* function */;
  /* 0x0034 */ void* ClAddPartyCompleteHandler /* function */;
  /* 0x0038 */ void* ClDropPartyCompleteHandler /* function */;
  /* 0x003c */ void* ClIncomingCallHandler /* function */;
  /* 0x0040 */ void* ClIncomingCallQoSChangeHandler /* function */;
  /* 0x0044 */ void* ClIncomingCloseCallHandler /* function */;
  /* 0x0048 */ void* ClIncomingDropPartyHandler /* function */;
  /* 0x004c */ void* ClCallConnectedHandler /* function */;
  /* 0x0050 */ void* ClNotifyCloseAfHandler /* function */;
} NDIS_CO_CLIENT_OPTIONAL_HANDLERS, *PNDIS_CO_CLIENT_OPTIONAL_HANDLERS; /* size: 0x0054 */

typedef enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef union __m64
{
  union
  {
    /* 0x0000 */ unsigned __int64 m64_u64;
    /* 0x0000 */ float m64_f32[2];
    /* 0x0000 */ char m64_i8[8];
    /* 0x0000 */ short m64_i16[4];
    /* 0x0000 */ int m64_i32[2];
    /* 0x0000 */ __int64 m64_i64;
    /* 0x0000 */ unsigned char m64_u8[8];
    /* 0x0000 */ unsigned short m64_u16[4];
    /* 0x0000 */ unsigned int m64_u32[2];
  }; /* size: 0x0008 */
} _m64, *P_m64; /* size: 0x0008 */

typedef struct _GENERAL_LOOKASIDE
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  union
  {
    /* 0x0010 */ unsigned long AllocateMisses;
    /* 0x0010 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long TotalFrees;
  union
  {
    /* 0x0018 */ unsigned long FreeMisses;
    /* 0x0018 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x001c */ enum _POOL_TYPE Type;
  /* 0x0020 */ unsigned long Tag;
  /* 0x0024 */ unsigned long Size;
  union
  {
    /* 0x0028 */ void* AllocateEx /* function */;
    /* 0x0028 */ void* Allocate /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* FreeEx /* function */;
    /* 0x002c */ void* Free /* function */;
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _LIST_ENTRY ListEntry;
  /* 0x0038 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x003c */ unsigned long LastAllocateMisses;
    /* 0x003c */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0040 */ unsigned long Future[2];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE; /* size: 0x0048 */

typedef struct _PAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
  /* 0x0048 */ struct _FAST_MUTEX Lock__ObsoleteButDoNotDelete;
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST; /* size: 0x0068 */

typedef enum _NETSETUP_OBJECT_SOURCE
{
  NetSetupObjectSourceUnknown = 0,
  NetSetupObjectSourcePartOfOS = 1,
  NetSetupObjectCreatedByOtherOSComponent = 2,
  NetSetupObjectCreatedByNetSetupInternal = 3,
  NetSetupObjectCreatedByOSMigration = 4,
  NetSetupObjectCreatedByNicInstallation = 5,
  NetSetupObjectCreatedByINetCfg = 6,
  NetSetupObjectSourceHardcoded = 7,
  NetSetupObjectSourceOfflineDism = 8,
  NetSetupObjectSourceUniversalInfRegistration = 9,
} NETSETUP_OBJECT_SOURCE, *PNETSETUP_OBJECT_SOURCE;

typedef enum _NL_ECN_CODEPOINT
{
  NlEcnCodepointNotEct = 0,
  NlEcnCodepointEct1 = 1,
  NlEcnCodepointEct0 = 2,
  NlEcnCodepointCe = 3,
} NL_ECN_CODEPOINT, *PNL_ECN_CODEPOINT;

typedef enum _NETSETUP_OBJECT_TYPE
{
  NetSetupObjectTypeUnknown = 0,
  NetSetupObjectTypeGlobal = 1,
  NetSetupObjectTypeInterface = 2,
  NetSetupObjectTypeFilterDriver = 3,
  NetSetupObjectTypeProtocolDriver = 4,
  NetSetupObjectTypeServiceDriver = 5,
  NetSetupObjectTypeClientDriver = 6,
  NetSetupObjectTypeBindingPath = 7,
  NetSetupObjectTypeMux = 8,
  NetSetupObjectTypeTransaction = 9,
  NetSetupObjectTypeReflectedProperty = 10,
  NetSetupObjectTypeBindRule = 11,
  NetSetupObjectTypeInterfaceDriver = 12,
  NetSetupObjectTypeMaximum = 13,
} NETSETUP_OBJECT_TYPE, *PNETSETUP_OBJECT_TYPE;

enum TlgIn_t
{
  TlgInNULL = 0,
  TlgInUNICODESTRING = 1,
  TlgInANSISTRING = 2,
  TlgInINT8 = 3,
  TlgInUINT8 = 4,
  TlgInINT16 = 5,
  TlgInUINT16 = 6,
  TlgInINT32 = 7,
  TlgInUINT32 = 8,
  TlgInINT64 = 9,
  TlgInUINT64 = 10,
  TlgInFLOAT = 11,
  TlgInDOUBLE = 12,
  TlgInBOOL32 = 13,
  TlgInBINARY = 14,
  TlgInGUID = 15,
  _TlgInPOINTER_unsupported = 16,
  TlgInFILETIME = 17,
  TlgInSYSTEMTIME = 18,
  TlgInSID = 19,
  TlgInHEXINT32 = 20,
  TlgInHEXINT64 = 21,
  TlgInCOUNTEDSTRING = 22,
  TlgInCOUNTEDANSISTRING = 23,
  _TlgInSTRUCT = 24,
  TlgInCOUNTEDBINARY = 25,
  _TlgInMax = 26,
  TlgInINTPTR = 7,
  TlgInUINTPTR = 8,
  TlgInPOINTER = 20,
  TlgInLONG = 7,
  TlgInULONG = 8,
  TlgInHEXLONG = 20,
  _TlgInCcount = 32,
  TlgInVcount = 64,
  _TlgInChain = 128,
  _TlgInCustom = 96,
  _TlgInTypeMask = 31,
  _TlgInCountMask = 96,
  _TlgInFlagMask = 224,
};

enum NetDmaEventTypes
{
  NdisMIndicateRecvEvent = 0,
  NdisPIndicateRecvEvent = 1,
  NdisPIndicateRecvCompleteEvent = 2,
  NdisPReturnPacketsExEvent = 3,
  NdisMReturnPacketsExEvent = 4,
  NdisPReturnPacketEvent = 5,
  NdisMReturnPacketEvent = 6,
  NdisMReturnPacketInRecvEvent = 7,
  DmaCopyV2VEvent = 8,
  DmaChainV2VNoCopyEvent = 9,
  DmaChainV2VCopyEvent = 10,
  DmaCopyP2VEvent = 11,
  DmaChainP2VNoCopyEvent = 12,
  DmaChainP2VCopyEvent = 13,
  DmaCopyFlushEvent = 14,
  DmaCopyAppendEvent = 15,
  DmaChainCopyAppendEvent = 16,
  DmaCopyFlushAppendEvent = 17,
  DmaCopyCheckForCompletionEvent = 18,
  DmaCopyGetPhysicalAddressEvent = 19,
  DmaCopyNullXferEvent = 20,
  DmaCopyDummyEvent = 21,
  TotalEventTypes = 22,
};

typedef enum _NDIS_LWFDRV_REFTAG
{
  LWFDRV_ATTACHING = 0,
  LWFDRV_IOWORKITEM = 1,
  LWFDRV_IOWORKITEMC = 2,
  LWFDRV_FILTERMODULE = 3,
  LWFDRV_PD_CLIENT = 4,
  LWFDRV_NUMBER_OF_TAGS = 5,
} NDIS_LWFDRV_REFTAG, *PNDIS_LWFDRV_REFTAG;

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long LogInternalEtw : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long LogBlackbox : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long LogSel : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long RawSel : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long NoFormat : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Driver : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long Reserved2 : 25; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_EVENT_LOG_ENTRY_FLAGS, *PWHEA_EVENT_LOG_ENTRY_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
  /* 0x0010 */ unsigned long OwnerTag;
  /* 0x0014 */ enum _WHEA_EVENT_LOG_ENTRY_ID Id;
  /* 0x0018 */ union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
  /* 0x001c */ unsigned long PayloadLength;
} WHEA_EVENT_LOG_ENTRY_HEADER, *PWHEA_EVENT_LOG_ENTRY_HEADER; /* size: 0x0020 */

typedef struct _WHEA_EVENT_LOG_ENTRY
{
  /* 0x0000 */ struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
} WHEA_EVENT_LOG_ENTRY, *PWHEA_EVENT_LOG_ENTRY; /* size: 0x0020 */

struct wistd::__compressed_pair_elem<wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS>,1,1>
{
}; /* size: 0x0001 */

typedef enum _NDIS_NBL_TRACKER_SOURCE
{
  NdisNblTrackerMiniport = 0,
  NdisNblTrackerFilter = 1,
  NdisNblTrackerProtocol = 2,
  NdisNblTrackerNdisNPOSRReturn = 3,
  NdisNblTrackerNdisSSSend = 4,
  NdisNblTrackerNdisSSRReturn = 5,
  NdisNblTrackerFirstCustomContext = 256,
} NDIS_NBL_TRACKER_SOURCE, *PNDIS_NBL_TRACKER_SOURCE;

typedef enum _NDIS_PROCESSOR_VENDOR
{
  NdisProcessorVendorUnknown = 0,
  NdisProcessorVendorGenuinIntel = 1,
  NdisProcessorVendorGenuineIntel = 1,
  NdisProcessorVendorAuthenticAMD = 2,
} NDIS_PROCESSOR_VENDOR, *PNDIS_PROCESSOR_VENDOR;

typedef struct _RTL_RB_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
  union
  {
    /* 0x0004 */ unsigned char Encoded : 1; /* bit position: 0 */
    /* 0x0004 */ struct _RTL_BALANCED_NODE* Min;
  }; /* size: 0x0004 */
} RTL_RB_TREE, *PRTL_RB_TREE; /* size: 0x0008 */

typedef enum _NDIS_DATA_PATH_TYPE
{
  NdisSendPath = 0,
  NdisSendCompletePath = 1,
  NdisReceivePath = 2,
  NdisReceiveCompletePath = 3,
  NdisDataPathCount = 4,
} NDIS_DATA_PATH_TYPE, *PNDIS_DATA_PATH_TYPE;

typedef enum _NETSETUP_ENVIRONMENT_TYPE
{
  NetSetupEnvironmentApplicationOnline = 0,
  NetSetupEnvironmentCbsOnline = 1,
  NetSetupEnvironmentCbsOffline = 2,
  NetSetupEnvironmentRpcServer = 3,
  NetSetupEnvironmentMiniportPnp = 4,
  NetSetupEnvironmentTest = 5,
  NetSetupEnvironmentApplicationOffline = 6,
  NetSetupEnvironmentNetCfgShim = 7,
  NetSetupEnvironmentOSMigrationOffline = 8,
  NetSetupEnvironmentOSMigrationOnline = 9,
  NetSetupEnvironmentNotifyObjectHost = 10,
  NetSetupEnvironmentTransactionMonitor = 11,
  NetSetupEnvironmentTypeNotifyObjectReplay = 12,
} NETSETUP_ENVIRONMENT_TYPE, *PNETSETUP_ENVIRONMENT_TYPE;

typedef union _WHEA_ERROR_PACKET_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long CriticalEvent : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long HypervisorError : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long AddressTranslationRequired : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long AddressTranslationCompleted : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long Reserved2 : 24; /* bit position: 8 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_PACKET_V2
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ union _WHEA_ERROR_PACKET_FLAGS Flags;
  /* 0x0010 */ enum _WHEA_ERROR_TYPE ErrorType;
  /* 0x0014 */ enum _WHEA_ERROR_SEVERITY ErrorSeverity;
  /* 0x0018 */ unsigned long ErrorSourceId;
  /* 0x001c */ enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
  /* 0x0020 */ struct _GUID NotifyType;
  /* 0x0030 */ unsigned __int64 Context;
  /* 0x0038 */ enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
  /* 0x003c */ unsigned long Reserved1;
  /* 0x0040 */ unsigned long DataOffset;
  /* 0x0044 */ unsigned long DataLength;
  /* 0x0048 */ unsigned long PshedDataOffset;
  /* 0x004c */ unsigned long PshedDataLength;
} WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2; /* size: 0x0050 */

typedef enum _NDIS_GFP_TABLE_TYPE
{
  NdisGfpTableTypeUndefined = 0,
  NdisGfpTableTypeWildcardIngress = 1,
  NdisGfpTableTypeWildcardEgress = 2,
  NdisGfpTableTypeExactMatchIngress = 3,
  NdisGfpTableTypeExactMatchEgress = 4,
  NdisGfpTableTypePacketDirect = 5,
  NdisGfpTableTypeMax = 6,
} NDIS_GFP_TABLE_TYPE, *PNDIS_GFP_TABLE_TYPE;

typedef struct _NDIS_MINIPORT_HANDLERS
{
  /* 0x0000 */ void* RequestContext;
  /* 0x0004 */ void* CancelSendContext;
  /* 0x0008 */ void* IndicateNetBufferListsContext;
  /* 0x000c */ struct NDIS_NBL_TRACKER_HANDLE__* IndicateNetBufferListsTracker;
  /* 0x0010 */ struct _NDIS_OBJECT_HEADER* IndicateNetBufferListsObject;
  /* 0x0014 */ void* SaveIndicateNetBufferListsContext;
  /* 0x0018 */ void* ReturnNetBufferListsContext;
  /* 0x001c */ struct NDIS_NBL_TRACKER_HANDLE__* ReturnNetBufferListsTracker;
  /* 0x0020 */ struct _NDIS_OBJECT_HEADER* ReturnNetBufferListsObject;
  /* 0x0024 */ void* SendNetBufferListsContext;
  /* 0x0028 */ struct NDIS_NBL_TRACKER_HANDLE__* SendNetBufferListsTracker;
  /* 0x002c */ struct _NDIS_OBJECT_HEADER* SendNetBufferListsObject;
  /* 0x0030 */ void* SendNetBufferListsCompleteContext;
  /* 0x0034 */ struct NDIS_NBL_TRACKER_HANDLE__* SendNetBufferListsCompleteTracker;
  /* 0x0038 */ struct _NDIS_OBJECT_HEADER* SendNetBufferListsCompleteObject;
  /* 0x003c */ void* RequestHandle;
  union
  {
    /* 0x0040 */ void* CancelSendHandler /* function */;
    /* 0x0040 */ void* CancelSendPacketsHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0044 */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0048 */ void* IndicateNetBufferListsHandler /* function */;
  /* 0x004c */ void* SaveIndicateNetBufferListsHandler /* function */;
  /* 0x0050 */ void* ReturnNetBufferListsHandler /* function */;
  /* 0x0054 */ void* SendNetBufferListsHandler /* function */;
  /* 0x0058 */ void* DirectRequestHandle;
} NDIS_MINIPORT_HANDLERS, *PNDIS_MINIPORT_HANDLERS; /* size: 0x005c */

struct wistd::__compressed_pair_elem<Rtl::KString *,0,0>
{
  /* 0x0000 */ struct Rtl::KString* __value_;
}; /* size: 0x0004 */

typedef enum _NDIS_GFP_WILDCARD_MATCH_TYPE
{
  NdisGfpWildcardMatchTypeUndefined = 0,
  NdisGfpWildcardMatchTypeEqual = 1,
  NdisGfpWildcardMatchTypeMaskEqual = 2,
  NdisGfpWildcardMatchTypeInRange = 3,
  NdisGfpWildcardMatchTypeMax = 4,
} NDIS_GFP_WILDCARD_MATCH_TYPE, *PNDIS_GFP_WILDCARD_MATCH_TYPE;

typedef enum _NDIS_NET_BUFFER_LIST_INFO
{
  TcpIpChecksumNetBufferListInfo = 0,
  TcpOffloadBytesTransferred = 0,
  IPsecOffloadV1NetBufferListInfo = 1,
  IPsecOffloadV2NetBufferListInfo = 1,
  TcpLargeSendNetBufferListInfo = 2,
  TcpReceiveNoPush = 2,
  ClassificationHandleNetBufferListInfo = 3,
  Ieee8021QNetBufferListInfo = 4,
  NetBufferListCancelId = 5,
  MediaSpecificInformation = 6,
  NetBufferListFrameType = 7,
  NetBufferListProtocolId = 7,
  NetBufferListHashValue = 8,
  NetBufferListHashInfo = 9,
  WfpNetBufferListInfo = 10,
  IPsecOffloadV2TunnelNetBufferListInfo = 11,
  IPsecOffloadV2HeaderNetBufferListInfo = 12,
  NetBufferListCorrelationId = 13,
  NetBufferListFilteringInfo = 14,
  MediaSpecificInformationEx = 15,
  NblOriginalInterfaceIfIndex = 16,
  NblReAuthWfpFlowContext = 16,
  TcpReceiveBytesTransferred = 17,
  NrtNameResolutionId = 17,
  UdpRecvSegCoalesceOffloadInfo = 17,
  IMReserved = 18,
  TcpRecvSegCoalesceInfo = 19,
  UdpSegmentationOffloadInfo = 19,
  RscTcpTimestampDelta = 20,
  TcpSendOffloadsSupplementalNetBufferListInfo = 20,
  NetBufferListInfoReserved3 = 21,
  NetBufferListInfoReserved4 = 22,
  SwitchForwardingReserved = 23,
  SwitchForwardingDetail_b0_to_b31 = 24,
  SwitchForwardingDetail_b32_to_b63 = 25,
  VirtualSubnetInfo = 26,
  NetBufferListInfoReserved1 = 27,
  NetBufferListInfoReserved2 = 28,
  MaxNetBufferListInfo = 29,
} NDIS_NET_BUFFER_LIST_INFO, *PNDIS_NET_BUFFER_LIST_INFO;

typedef union _WHEA_REVISION
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char MinorRevision;
      /* 0x0001 */ unsigned char MajorRevision;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_REVISION, *PWHEA_REVISION; /* size: 0x0002 */

typedef enum _NETSETUP_QUERY_RESULT_ACTION
{
  NetSetupQueryResultStateChange = 0,
  NetSetupQueryResultAdd = 1,
  NetSetupQueryResultUpdate = 2,
  NetSetupQueryResultRemove = 3,
} NETSETUP_QUERY_RESULT_ACTION, *PNETSETUP_QUERY_RESULT_ACTION;

typedef enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
{
  MemoryNotContiguous = 0,
  MemoryAlignedAndContiguous = 1,
  MemoryNotResident = 2,
  MemoryNotEligibleToMakeContiguous = 3,
  MemoryContiguityStateMax = 4,
} MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE, *PMEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;

typedef struct _MAILSLOT_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long MailslotQuota;
  /* 0x0004 */ unsigned long MaximumMessageSize;
  /* 0x0008 */ union _LARGE_INTEGER ReadTimeout;
  /* 0x0010 */ unsigned char TimeoutSpecified;
  /* 0x0011 */ char __PADDING__[7];
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS; /* size: 0x0018 */

struct _NDIS_PCW_DATA_BLOCK;

typedef enum _WWAN_PACKET_SERVICE_ACTION
{
  WwanPacketServiceActionAttach = 0,
  WwanPacketServiceActionDetach = 1,
} WWAN_PACKET_SERVICE_ACTION, *PWWAN_PACKET_SERVICE_ACTION;

typedef enum _NETSETUP_REASON_BINDING_IS_CRITICAL
{
  NetSetupBindingIsSecurityCritical = 1,
  NetSetupBindingIsMediaConverter = 2,
  NetSetupBindingProvidesBootDevice = 3,
} NETSETUP_REASON_BINDING_IS_CRITICAL, *PNETSETUP_REASON_BINDING_IS_CRITICAL;

typedef struct _tlgProvider_t
{
  /* 0x0000 */ unsigned int LevelPlus1;
  /* 0x0004 */ const unsigned short* ProviderMetadataPtr;
  /* 0x0008 */ unsigned __int64 KeywordAny;
  /* 0x0010 */ unsigned __int64 KeywordAll;
  /* 0x0018 */ unsigned __int64 RegHandle;
  /* 0x0020 */ void* EnableCallback /* function */;
  /* 0x0024 */ void* CallbackContext;
} tlgProvider_t, *PtlgProvider_t; /* size: 0x0028 */

typedef enum _NDIS_FRAME_HEADER
{
  NdisFrameHeaderUndefined = 0,
  NdisFrameHeaderMac = 1,
  NdisFrameHeaderArp = 2,
  NdisFrameHeaderIPv4 = 3,
  NdisFrameHeaderIPv6 = 4,
  NdisFrameHeaderUdp = 5,
  NdisFrameHeaderMaximum = 6,
} NDIS_FRAME_HEADER, *PNDIS_FRAME_HEADER;

typedef enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsWakeReasonPreserveProcess = 4,
  PsWakeReasonActivityReference = 5,
  PsWakeReasonWorkOnBehalf = 6,
  PsMaxWakeReasons = 7,
} PS_WAKE_REASON, *PPS_WAKE_REASON;

enum wil_FeatureStage
{
  wil_FeatureStage_AlwaysDisabled = 0,
  wil_FeatureStage_DisabledByDefault = 1,
  wil_FeatureStage_EnabledByDefault = 2,
  wil_FeatureStage_AlwaysEnabled = 3,
};

enum wil_UsageReportingMode
{
  wil_UsageReportingMode_Default = 0,
  wil_UsageReportingMode_SuppressPotential = 1,
  wil_UsageReportingMode_SuppressImplicit = 2,
};

struct PAGED_OBJECT<1920090443>
{
}; /* size: 0x0001 */

typedef struct _tlgTypeMapBase<unsigned int>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<unsigned int>, *PtlgTypeMapBase<unsigned int>; /* size: 0x0001 */

typedef struct _REFERENCE
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ unsigned short ReferenceCount;
  /* 0x0006 */ unsigned char Closing;
  /* 0x0007 */ char __PADDING__[1];
} REFERENCE, *PREFERENCE; /* size: 0x0008 */

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

typedef struct _KTIMER
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ union _ULARGE_INTEGER DueTime;
  /* 0x0018 */ struct _LIST_ENTRY TimerListEntry;
  /* 0x0020 */ struct _KDPC* Dpc;
  /* 0x0024 */ unsigned long Period;
} KTIMER, *PKTIMER; /* size: 0x0028 */

typedef struct _KDPC
{
  union
  {
    /* 0x0000 */ unsigned long TargetInfoAsUlong;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Importance;
      /* 0x0002 */ volatile unsigned short Number;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY DpcListEntry;
  /* 0x0008 */ unsigned long ProcessorHistory;
  /* 0x000c */ void* DeferredRoutine /* function */;
  /* 0x0010 */ void* DeferredContext;
  /* 0x0014 */ void* SystemArgument1;
  /* 0x0018 */ void* SystemArgument2;
  /* 0x001c */ void* DpcData;
} KDPC, *PKDPC; /* size: 0x0020 */

typedef struct _NDIS_TIMER
{
  /* 0x0000 */ struct _KTIMER Timer;
  /* 0x0028 */ struct _KDPC Dpc;
} NDIS_TIMER, *PNDIS_TIMER; /* size: 0x0048 */

typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES
{
  /* 0x0000 */ enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
  /* 0x0004 */ enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
  /* 0x0008 */ enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
} NDIS_PM_WAKE_UP_CAPABILITIES, *PNDIS_PM_WAKE_UP_CAPABILITIES; /* size: 0x000c */

typedef struct _NDIS_PNP_CAPABILITIES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;
} NDIS_PNP_CAPABILITIES, *PNDIS_PNP_CAPABILITIES; /* size: 0x0010 */

typedef struct _NDIS_PM_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SupportedWoLPacketPatterns;
  /* 0x000c */ unsigned long NumTotalWoLPatterns;
  /* 0x0010 */ unsigned long MaxWoLPatternSize;
  /* 0x0014 */ unsigned long MaxWoLPatternOffset;
  /* 0x0018 */ unsigned long MaxWoLPacketSaveBuffer;
  /* 0x001c */ unsigned long SupportedProtocolOffloads;
  /* 0x0020 */ unsigned long NumArpOffloadIPv4Addresses;
  /* 0x0024 */ unsigned long NumNSOffloadIPv6Addresses;
  /* 0x0028 */ enum _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
  /* 0x002c */ enum _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
  /* 0x0030 */ enum _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
  /* 0x0034 */ unsigned long SupportedWakeUpEvents;
  /* 0x0038 */ unsigned long MediaSpecificWakeUpEvents;
} NDIS_PM_CAPABILITIES, *PNDIS_PM_CAPABILITIES; /* size: 0x003c */

typedef struct _NDIS_PM_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long EnabledWoLPacketPatterns;
  /* 0x0008 */ unsigned long EnabledProtocolOffloads;
  /* 0x000c */ unsigned long WakeUpFlags;
  /* 0x0010 */ unsigned long MediaSpecificWakeUpEvents;
} NDIS_PM_PARAMETERS, *PNDIS_PM_PARAMETERS; /* size: 0x0014 */

typedef struct _DEVICE_CAPABILITIES
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long DeviceD1 : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long DeviceD2 : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long LockSupported : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long EjectSupported : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Removable : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long DockDevice : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long UniqueID : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long SilentInstall : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned long RawDeviceOK : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned long SurpriseRemovalOK : 1; /* bit position: 9 */
    /* 0x0004 */ unsigned long WakeFromD0 : 1; /* bit position: 10 */
    /* 0x0004 */ unsigned long WakeFromD1 : 1; /* bit position: 11 */
    /* 0x0004 */ unsigned long WakeFromD2 : 1; /* bit position: 12 */
    /* 0x0004 */ unsigned long WakeFromD3 : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned long HardwareDisabled : 1; /* bit position: 14 */
    /* 0x0004 */ unsigned long NonDynamic : 1; /* bit position: 15 */
    /* 0x0004 */ unsigned long WarmEjectSupported : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long NoDisplayInUI : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long Reserved1 : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long WakeFromInterrupt : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long SecureDevice : 1; /* bit position: 20 */
    /* 0x0004 */ unsigned long ChildOfVgaEnabledBridge : 1; /* bit position: 21 */
    /* 0x0004 */ unsigned long DecodeIoOnBoot : 1; /* bit position: 22 */
    /* 0x0004 */ unsigned long Reserved : 9; /* bit position: 23 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long Address;
  /* 0x000c */ unsigned long UINumber;
  /* 0x0010 */ enum _DEVICE_POWER_STATE DeviceState[7];
  /* 0x002c */ enum _SYSTEM_POWER_STATE SystemWake;
  /* 0x0030 */ enum _DEVICE_POWER_STATE DeviceWake;
  /* 0x0034 */ unsigned long D1Latency;
  /* 0x0038 */ unsigned long D2Latency;
  /* 0x003c */ unsigned long D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES; /* size: 0x0040 */

typedef enum _NDIS_WORK_ITEM_TYPE
{
  NdisWorkItemRequest = 0,
  NdisWorkItemSend = 1,
  NdisWorkItemReturnPackets = 2,
  NdisWorkItemResetRequested = 3,
  NdisWorkItemResetInProgress = 4,
  NdisWorkItemReserved = 5,
  NdisWorkItemMiniportCallback = 6,
  NdisMaxWorkItems = 7,
} NDIS_WORK_ITEM_TYPE, *PNDIS_WORK_ITEM_TYPE;

typedef struct _NDIS_MINIPORT_WORK_ITEM
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0004 */ enum _NDIS_WORK_ITEM_TYPE WorkItemType;
  /* 0x0008 */ void* WorkItemContext;
} NDIS_MINIPORT_WORK_ITEM, *PNDIS_MINIPORT_WORK_ITEM; /* size: 0x000c */

typedef struct _KBUGCHECK_CALLBACK_RECORD
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0008 */ void* CallbackRoutine /* function */;
  /* 0x000c */ void* Buffer;
  /* 0x0010 */ unsigned long Length;
  /* 0x0014 */ unsigned char* Component;
  /* 0x0018 */ unsigned long Checksum;
  /* 0x001c */ unsigned char State;
  /* 0x001d */ char __PADDING__[3];
} KBUGCHECK_CALLBACK_RECORD, *PKBUGCHECK_CALLBACK_RECORD; /* size: 0x0020 */

typedef struct _NDIS_RECEIVE_SCALE_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long CapabilitiesFlags;
  /* 0x0008 */ unsigned long NumberOfInterruptMessages;
  /* 0x000c */ unsigned long NumberOfReceiveQueues;
  /* 0x0010 */ unsigned short NumberOfIndirectionTableEntries;
  /* 0x0012 */ char __PADDING__[2];
} NDIS_RECEIVE_SCALE_CAPABILITIES, *PNDIS_RECEIVE_SCALE_CAPABILITIES; /* size: 0x0014 */

typedef struct _NDIS_WORK_ITEM
{
  /* 0x0000 */ void* Context;
  /* 0x0004 */ void* Routine /* function */;
  /* 0x0008 */ unsigned char WrapperReserved[32];
} NDIS_WORK_ITEM, *PNDIS_WORK_ITEM; /* size: 0x0028 */

typedef struct _NDIS_RESTART_GENERAL_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long MtuSize;
  /* 0x0008 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x0010 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x0018 */ unsigned long LookaheadSize;
  /* 0x001c */ unsigned long MacOptions;
  /* 0x0020 */ unsigned long SupportedPacketFilters;
  /* 0x0024 */ unsigned long MaxMulticastListSize;
  /* 0x0028 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES* RecvScaleCapabilities;
  /* 0x002c */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x0030 */ unsigned long Flags;
  /* 0x0034 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x0038 */ unsigned long SupportedStatistics;
  /* 0x003c */ unsigned long DataBackFillSize;
  /* 0x0040 */ unsigned long ContextBackFillSize;
  /* 0x0044 */ unsigned long* SupportedOidList;
  /* 0x0048 */ unsigned long SupportedOidListLength;
  /* 0x004c */ unsigned long MaxLookaheadSizeAccessed;
} NDIS_RESTART_GENERAL_ATTRIBUTES, *PNDIS_RESTART_GENERAL_ATTRIBUTES; /* size: 0x0050 */

typedef struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned int DeviceType;
  /* 0x0008 */ unsigned int CurrentSpeedAndMode;
  /* 0x000c */ unsigned int CurrentPayloadSize;
  /* 0x0010 */ unsigned int MaxPayloadSize;
  /* 0x0014 */ unsigned int MaxReadRequestSize;
  /* 0x0018 */ unsigned int CurrentLinkSpeed;
  /* 0x001c */ unsigned int CurrentLinkWidth;
  /* 0x0020 */ unsigned int MaxLinkSpeed;
  /* 0x0024 */ unsigned int MaxLinkWidth;
  /* 0x0028 */ unsigned int PciExpressVersion;
  /* 0x002c */ unsigned int InterruptType;
  /* 0x0030 */ unsigned int MaxInterruptMessages;
} NDIS_PCI_DEVICE_CUSTOM_PROPERTIES, *PNDIS_PCI_DEVICE_CUSTOM_PROPERTIES; /* size: 0x0034 */

typedef struct _PCI_CAPABILITIES_HEADER
{
  /* 0x0000 */ unsigned char CapabilityID;
  /* 0x0001 */ unsigned char Next;
} PCI_CAPABILITIES_HEADER, *PPCI_CAPABILITIES_HEADER; /* size: 0x0002 */

typedef union _PCI_MSI_MESSAGE_CONTROL
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short MSIEnable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short MultipleMessageCapable : 3; /* bit position: 1 */
      /* 0x0000 */ unsigned short MultipleMessageEnable : 3; /* bit position: 4 */
      /* 0x0000 */ unsigned short CapableOf64Bits : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned short PerVectorMaskCapable : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned short Reserved : 7; /* bit position: 9 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} PCI_MSI_MESSAGE_CONTROL, *PPCI_MSI_MESSAGE_CONTROL; /* size: 0x0002 */

struct PCI_MSI_CAPABILITY
{
  /* 0x0000 */ struct _PCI_CAPABILITIES_HEADER Header;
  /* 0x0002 */ union _PCI_MSI_MESSAGE_CONTROL MessageControl;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long Reserved : 2; /* bit position: 0 */
          /* 0x0004 */ unsigned long Address : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ Register;
      /* 0x0004 */ unsigned long Raw;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ MessageAddressLower;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned short MessageData;
      /* 0x000a */ unsigned short Reserved;
      /* 0x000c */ unsigned long MaskBits;
      /* 0x0010 */ unsigned long PendingBits;
    } /* size: 0x000c */ Option32Bit;
    struct
    {
      /* 0x0008 */ unsigned long MessageAddressUpper;
      /* 0x000c */ unsigned short MessageData;
      /* 0x000e */ unsigned short Reserved;
      /* 0x0010 */ unsigned long MaskBits;
      /* 0x0014 */ unsigned long PendingBits;
    } /* size: 0x0010 */ Option64Bit;
  }; /* size: 0x0010 */
}; /* size: 0x0018 */

struct MSIX_TABLE_POINTER
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long BaseIndexRegister : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long TableOffset;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct PCI_MSIX_CAPABILITY
{
  /* 0x0000 */ struct _PCI_CAPABILITIES_HEADER Header;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned short TableSize : 11; /* bit position: 0 */
      /* 0x0002 */ unsigned short Reserved : 3; /* bit position: 11 */
      /* 0x0002 */ unsigned short FunctionMask : 1; /* bit position: 14 */
      /* 0x0002 */ unsigned short MSIXEnable : 1; /* bit position: 15 */
    }; /* bitfield */
  } /* size: 0x0002 */ MessageControl;
  /* 0x0004 */ struct MSIX_TABLE_POINTER MessageTable;
  /* 0x0008 */ struct MSIX_TABLE_POINTER PBATable;
}; /* size: 0x000c */

typedef struct _NDIS_MINIPORT_OFFLOAD_REG
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IPv4XSumTxDisabled : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long IPv4XSumRxDisabled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long TCPv4XSumTxDisabled : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long TCPv4XSumRxDisabled : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long UDPv4XSumTxDisabled : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long UDPv4XSumRxDisabled : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long TCPv6XSumTxDisabled : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long TCPv6XSumRxDisabled : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long UDPv6XSumTxDisabled : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long UDPv6XSumRxDisabled : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long LsoV1IPv4Disabled : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long LsoV2IPv4Disabled : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long LsoV2IPv6Disabled : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long IPsecAHDisabled : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned long IPsecESPDisabled : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned long TCPv4ConnectionOffloadDisabled : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned long TCPv6ConnectionOffloadDisabled : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned long ReadRegistry : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned long IPsecV2AHDisabled : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned long IPsecV2ESPDisabled : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned long IPsecV2IPv4AHDisabled : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long IPsecV2IPv4ESPDisabled : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long IPSecV2IPv6Disabled : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned long RscIPv4Disabled : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned long RscIPv6Disabled : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned long EncapsulatedPacketTaskOffloadDisabled : 1; /* bit position: 25 */
      /* 0x0000 */ unsigned long EncapsulatedPacketTaskOffloadNvgreDisabled : 1; /* bit position: 26 */
      /* 0x0000 */ unsigned long EncapsulatedPacketTaskOffloadVxlanDisabled : 1; /* bit position: 27 */
      /* 0x0000 */ unsigned long UsoIPv4Disabled : 1; /* bit position: 28 */
      /* 0x0000 */ unsigned long UsoIPv6Disabled : 1; /* bit position: 29 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_MINIPORT_OFFLOAD_REG, *PNDIS_MINIPORT_OFFLOAD_REG; /* size: 0x0004 */

typedef struct _NDIS_EVENT
{
  /* 0x0000 */ struct _KEVENT Event;
} NDIS_EVENT, *PNDIS_EVENT; /* size: 0x0010 */

typedef struct _NDIS_PM_ADMIN_CONFIG
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long WakeOnPattern : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long WakeOnMagicPacket : 2; /* bit position: 2 */
      /* 0x0000 */ unsigned long DeviceSleepOnDisconnect : 2; /* bit position: 4 */
      /* 0x0000 */ unsigned long PMARPOffload : 2; /* bit position: 6 */
      /* 0x0000 */ unsigned long PMNSOffload : 2; /* bit position: 8 */
      /* 0x0000 */ unsigned long PMWiFiRekeyOffload : 2; /* bit position: 10 */
      /* 0x0000 */ unsigned long SelectiveSuspend : 2; /* bit position: 12 */
      /* 0x0000 */ unsigned long NicAutoPowerSaver : 2; /* bit position: 14 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_PM_ADMIN_CONFIG, *PNDIS_PM_ADMIN_CONFIG; /* size: 0x0004 */

typedef struct _KSEMAPHORE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ long Limit;
} KSEMAPHORE, *PKSEMAPHORE; /* size: 0x0014 */

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  /* 0x0000 */ unsigned char Removed;
  /* 0x0001 */ unsigned char Reserved[3];
  /* 0x0004 */ long IoCount;
  /* 0x0008 */ struct _KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK; /* size: 0x0018 */

typedef struct _IO_REMOVE_LOCK
{
  /* 0x0000 */ struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK; /* size: 0x0018 */

typedef struct _ULONG_REFERENCE
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ unsigned long ReferenceCount;
  /* 0x0008 */ unsigned char Closing;
  /* 0x0009 */ char __PADDING__[3];
} ULONG_REFERENCE, *PULONG_REFERENCE; /* size: 0x000c */

typedef struct _NDIS_D0_SIGNAL_WORK_ITEM
{
  /* 0x0000 */ struct _NDIS_WORK_ITEM WorkItem;
  /* 0x0028 */ long CompletionStatus;
  /* 0x002c */ unsigned char Scheduled;
  /* 0x002d */ char __PADDING__[3];
} NDIS_D0_SIGNAL_WORK_ITEM, *PNDIS_D0_SIGNAL_WORK_ITEM; /* size: 0x0030 */

typedef struct _VPCI_INVALIDATE_BLOCK_OUTPUT
{
  /* 0x0000 */ unsigned __int64 BlockMask;
} VPCI_INVALIDATE_BLOCK_OUTPUT, *PVPCI_INVALIDATE_BLOCK_OUTPUT; /* size: 0x0008 */

class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>
{
  /* 0x0000 */ unsigned long m_bufferSize;
  /* 0x0004 */ unsigned long m_numElements;
  /* 0x0008 */ class wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >* _p;
}; /* size: 0x000c */

class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>
{
  /* 0x0000 */ unsigned long m_bufferSize;
  /* 0x0004 */ unsigned long m_numElements;
  /* 0x0008 */ class wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >* _p;
}; /* size: 0x000c */

class Rtl::KArray<void *,1>
{
  /* 0x0000 */ unsigned long m_bufferSize;
  /* 0x0004 */ unsigned long m_numElements;
  /* 0x0008 */ void** _p;
}; /* size: 0x000c */

class Ndis::BindState
{
  /* 0x0000 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0004 */ BOOL AllowBindDespiteMandatory;
  /* 0x0005 */ BOOL PretendBindingActive;
  /* 0x0006 */ BOOL NeedsPauseAction;
  /* 0x0007 */ char Padding_16;
  /* 0x0008 */ void* m_AdditionalContext;
  /* 0x000c */ int m_LastErrorCode;
  /* 0x0010 */ unsigned long m_bindSources;
  /* 0x0014 */ unsigned long m_unbindReasons;
  /* 0x0018 */ unsigned long m_pauseReasons;
  /* 0x001c */ enum PAUSE_OR_RESTART m_actualPauseState;
  /* 0x0020 */ class Rtl::KArray<void *,1> m_bindContext;
}; /* size: 0x002c */

struct Ndis::BindStack
{
  /* 0x0000 */ class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1> Protocols;
  /* 0x000c */ class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1> Filters;
  /* 0x0018 */ class Ndis::BindState Miniport;
  /* 0x0044 */ unsigned long ChangeEpoch;
}; /* size: 0x0048 */

class KPushLock
{
}; /* size: 0x0004 */

class KWaitEvent
{
}; /* size: 0x0010 */

class KWorkItem<Ndis::BindEngine>
{
}; /* size: 0x0018 */

struct Ndis::BindEngine
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _NDIS_MINIPORT_BLOCK* m_miniport;
      /* 0x0004 */ struct _KTHREAD* m_bindThread;
      /* 0x0008 */ struct NDIS_BIND_LINK_BASE* m_currentOperation;
      /* 0x000c */ class KPushLock m_lock;
      /* 0x0010 */ class KWaitEvent m_bindCompleteEvent;
      /* 0x0020 */ class KWorkItem<Ndis::BindEngine> m_asyncBindWorkItem;
      /* 0x0038 */ BOOL m_isDirty;
      /* 0x0039 */ char Padding_17[3];
      /* 0x003c */ class KWaitEvent* m_removeReadyEvent;
    }; /* size: 0x003d */
    struct
    {
      /* 0x0000 */ unsigned long s_NumBindOperationsInProgress;
      /* 0x0004 */ long __PADDING__[15];
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
}; /* size: 0x0040 */

class Rtl::KNeutralLock<enum NDIS_MINIPORT_POLICY_OWNER>
{
  union
  {
    /* 0x0000 */ enum NDIS_MINIPORT_POLICY_OWNER UnownedValue;
    /* 0x0000 */ enum NDIS_MINIPORT_POLICY_OWNER m_owner;
  }; /* size: 0x0004 */
  /* 0x0004 */ class KPushLock m_lock;
  /* 0x0008 */ class KWaitEvent m_isUnowned;
}; /* size: 0x0018 */

typedef struct _IF_PHYSICAL_ADDRESS_LH
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned char Address[32];
} IF_PHYSICAL_ADDRESS_LH, *PIF_PHYSICAL_ADDRESS_LH; /* size: 0x0022 */

struct WORKITEM_WITH_IRP
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM Workitem;
  /* 0x0010 */ struct _IRP* Irp;
}; /* size: 0x0014 */

class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> > >
{
}; /* size: 0x0004 */

typedef struct _PKTMON_COMPONENT_CONTEXT
{
  /* 0x0000 */ void* CompHandle;
  /* 0x0004 */ enum _PKTMON_PACKET_TYPE PacketType;
  struct /* bitfield */
  {
    /* 0x0008 */ int FlowEnabled : 1; /* bit position: 0 */
    /* 0x0008 */ int DropEnabled : 1; /* bit position: 1 */
  }; /* bitfield */
} PKTMON_COMPONENT_CONTEXT, *PPKTMON_COMPONENT_CONTEXT; /* size: 0x000c */

typedef struct _PKTMON_EDGE_CONTEXT
{
  /* 0x0000 */ void* EdgeHandle;
  /* 0x0004 */ struct _PKTMON_COMPONENT_CONTEXT* CompContext;
  /* 0x0008 */ enum _PKTMON_PACKET_TYPE PacketType;
} PKTMON_EDGE_CONTEXT, *PPKTMON_EDGE_CONTEXT; /* size: 0x000c */

typedef struct _NDIS_MINIPORT_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_MINIPORT_BLOCK* NextMiniport;
  /* 0x0008 */ struct _NDIS_MINIPORT_BLOCK* BaseMiniport;
  /* 0x000c */ void* MiniportAdapterContext;
  union
  {
    /* 0x0010 */ struct _UNICODE_STRING Reserved4;
    struct
    {
      /* 0x0010 */ unsigned char MajorNdisVersion;
      /* 0x0011 */ unsigned char MinorNdisVersion;
      /* 0x0012 */ char Padding_18[2];
      /* 0x0014 */ struct _NDIS_PCW_DATA_BLOCK* PcwDataBlock;
    }; /* size: 0x0006 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0018 */ long PcwDatapathEventMask;
    /* 0x0018 */ void* Reserved28;
  }; /* size: 0x0004 */
  /* 0x001c */ struct _NDIS_OPEN_BLOCK* OpenQueue;
  /* 0x0020 */ struct _REFERENCE ShortRef;
  union
  {
    /* 0x0028 */ long PcwDatapathCycleMask;
    /* 0x0028 */ void* Reserved29;
  }; /* size: 0x0004 */
  /* 0x002c */ unsigned char LinkStateIndicationFlags;
  /* 0x002d */ unsigned char LockAcquired;
  /* 0x002e */ unsigned char PmodeOpens;
  /* 0x002f */ unsigned char LoopbackOpens;
  /* 0x0030 */ unsigned long Lock;
  /* 0x0034 */ void* Reserved25;
  /* 0x0038 */ struct _NDIS_MINIPORT_INTERRUPT* Interrupt;
  /* 0x003c */ unsigned long Flags;
  /* 0x0040 */ unsigned long PnPFlags;
  /* 0x0044 */ struct _LIST_ENTRY PacketList;
  /* 0x004c */ struct _NDIS_PACKET* FirstPendingPacket;
  /* 0x0050 */ struct _NDIS_PACKET* ReturnPacketsQueue;
  /* 0x0054 */ unsigned long RequestBuffer;
  /* 0x0058 */ void* Reserved26;
  /* 0x005c */ struct _NDIS_MINIPORT_BLOCK* PrimaryMiniport;
  /* 0x0060 */ void* NextCancelSendNetBufferListsHandler /* function */;
  /* 0x0064 */ void* OidContext;
  /* 0x0068 */ unsigned long SupportedOidListLength;
  /* 0x006c */ struct _CM_RESOURCE_LIST* Resources;
  /* 0x0070 */ struct _NDIS_TIMER WakeUpDpcTimer;
  union
  {
    /* 0x00b8 */ struct _UNICODE_STRING Reserved20;
    struct
    {
      /* 0x00b8 */ enum _NET_IF_MEDIA_CONNECT_STATE MiniportMediaConnectState;
      /* 0x00bc */ enum _NET_IF_MEDIA_DUPLEX_STATE MiniportMediaDuplexState;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x00c0 */ struct _UNICODE_STRING SymbolicLinkName;
  /* 0x00c8 */ unsigned long CheckForHangSeconds;
  /* 0x00cc */ unsigned short CFHangTicks;
  /* 0x00ce */ unsigned short CFHangCurrentTick;
  /* 0x00d0 */ int ResetStatus;
  /* 0x00d4 */ struct _NDIS_OPEN_BLOCK* ResetOpen;
  union
  {
    /* 0x00d8 */ struct _X_FILTER* EthDB;
    /* 0x00d8 */ struct _X_FILTER* NullDB;
  }; /* size: 0x0004 */
  /* 0x00dc */ void* Unused1;
  /* 0x00e0 */ void* Unused2;
  /* 0x00e4 */ void* Unused3;
  /* 0x00e8 */ void* PacketIndicateHandler /* function */;
  /* 0x00ec */ void* SendCompleteHandler /* function */;
  /* 0x00f0 */ void* SendResourcesHandler /* function */;
  /* 0x00f4 */ void* ResetCompleteHandler /* function */;
  /* 0x00f8 */ enum _NDIS_MEDIUM MediaType;
  /* 0x00fc */ unsigned long AutoNegotiationFlags;
  /* 0x0100 */ enum _NDIS_INTERFACE_TYPE Reserved5;
  /* 0x0104 */ enum _NDIS_INTERFACE_TYPE AdapterType;
  union
  {
    /* 0x0108 */ struct _DEVICE_OBJECT* Reserved6;
    /* 0x0108 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  }; /* size: 0x0004 */
  union
  {
    /* 0x010c */ struct _DEVICE_OBJECT* Reserved7;
    /* 0x010c */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  }; /* size: 0x0004 */
  /* 0x0110 */ unsigned long* SupportedOidList;
  /* 0x0114 */ struct _NDIS_SG_DMA_BLOCK* MiniportSGDmaBlock;
  /* 0x0118 */ struct _NDIS_AF_LIST* CallMgrAfList;
  /* 0x011c */ void* MiniportThread;
  /* 0x0120 */ void* SetInfoBuf;
  /* 0x0124 */ unsigned short SetInfoBufLen;
  /* 0x0126 */ unsigned short MaxSendPackets;
  /* 0x0128 */ int FakeStatus;
  union
  {
    /* 0x012c */ void* Reserved24;
    /* 0x012c */ void* GlobalTriageBlock;
  }; /* size: 0x0004 */
  /* 0x0130 */ struct _NDIS_RECEIVE_SCALE_PARAMETERS* CombinedNdisRSSParameters;
  union
  {
    /* 0x0134 */ struct _NDIS_MINIPORT_TIMER* TimerQueue;
    /* 0x0134 */ struct _NDIS_TIMER_ENTRY* TimerObjectQueue;
  }; /* size: 0x0004 */
  /* 0x0138 */ unsigned int MacOptions;
  /* 0x013c */ struct _NDIS_REQUEST* PendingRequest;
  /* 0x0140 */ unsigned int MaximumLongAddresses;
  /* 0x0144 */ unsigned int Reserved27;
  /* 0x0148 */ unsigned int MiniportCurrentLookahead;
  /* 0x014c */ unsigned int MiniportMaximumLookahead;
  union
  {
    /* 0x0150 */ unsigned long Reserved1;
    /* 0x0150 */ struct _X_FILTER* NullMediaFilter;
  }; /* size: 0x0004 */
  /* 0x0154 */ void* DisableInterruptHandler /* function */;
  /* 0x0158 */ void* EnableInterruptHandler /* function */;
  /* 0x015c */ void* SendPacketsHandler /* function */;
  /* 0x0160 */ void* DeferredSendHandler /* function */;
  /* 0x0164 */ void* EthRxIndicateHandler /* function */;
  /* 0x0168 */ void* Reserved30;
  /* 0x016c */ void* NextSendNetBufferListsHandler /* function */;
  /* 0x0170 */ void* EthRxCompleteHandler /* function */;
  /* 0x0174 */ void* Reserved31;
  /* 0x0178 */ void* SavedNextSendNetBufferListsHandler /* function */;
  /* 0x017c */ void* StatusHandler /* function */;
  /* 0x0180 */ void* StatusCompleteHandler /* function */;
  /* 0x0184 */ void* TDCompleteHandler /* function */;
  /* 0x0188 */ void* QueryCompleteHandler /* function */;
  /* 0x018c */ void* SetCompleteHandler /* function */;
  /* 0x0190 */ void* WanSendCompleteHandler /* function */;
  /* 0x0194 */ void* WanRcvHandler /* function */;
  /* 0x0198 */ void* WanRcvCompleteHandler /* function */;
  /* 0x019c */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x01a0 */ struct _KEVENT* PnPEventLockEvent;
  /* 0x01a4 */ struct _NDIS_OBJECT_HEADER* MediaSpecificAttributes;
  /* 0x01a8 */ struct _IRP* PendingQueryPowerIrp;
  /* 0x01ac */ struct _NDIS_INTERRUPT_BLOCK* InterruptEx;
  /* 0x01b0 */ unsigned __int64 XmitLinkSpeed;
  /* 0x01b8 */ unsigned __int64 RcvLinkSpeed;
  /* 0x01c0 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x01c4 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS MiniportPauseFunctions;
  /* 0x01c8 */ unsigned long MiniportAutoNegotiationFlags;
  /* 0x01cc */ struct _SINGLE_LIST_ENTRY WorkQueue[7];
  /* 0x01e8 */ struct _SINGLE_LIST_ENTRY SingleWorkItems[6];
  /* 0x0200 */ unsigned char SendFlags;
  /* 0x0201 */ unsigned char MP6SupportPM;
  /* 0x0202 */ unsigned char XState;
  /* 0x0203 */ char Padding_19;
  /* 0x0204 */ struct _NDIS_LOG* Log;
  /* 0x0208 */ struct _CM_RESOURCE_LIST* AllocatedResources;
  /* 0x020c */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
  /* 0x0210 */ struct _SINGLE_LIST_ENTRY PatternList;
  /* 0x0214 */ struct _SINGLE_LIST_ENTRY WOLPatternList;
  /* 0x0218 */ struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
  /* 0x021c */ struct _NDIS_PNP_CAPABILITIES PMCapabilities61;
  /* 0x022c */ struct _NDIS_PM_CAPABILITIES PMHardwareCapabilities;
  /* 0x0268 */ struct _NDIS_PM_CAPABILITIES PMAdvertisedCapabilities;
  /* 0x02a4 */ struct _NDIS_PM_PARAMETERS PMCurrentParameters;
  /* 0x02b8 */ struct _NDIS_PM_PARAMETERS PMWmiParameters;
  /* 0x02cc */ struct _DEVICE_CAPABILITIES OriginalDeviceCaps;
  /* 0x030c */ struct _DEVICE_CAPABILITIES DeviceCaps;
  /* 0x034c */ unsigned char S0WakeupSupported;
  /* 0x034d */ char Padding_20[3];
  /* 0x0350 */ unsigned long WakeUpEnable;
  /* 0x0354 */ struct _IRP* WaitWakeIrp;
  /* 0x0358 */ struct _KEVENT WaitWakeIrpCompleted;
  /* 0x0368 */ BOOL WaitWakeIoCompletionRoutineRan;
  /* 0x0369 */ BOOL WaitWakeCancelInProgress;
  /* 0x036a */ BOOL WaitWakeCancelAttempted;
  /* 0x036b */ char Padding_21;
  /* 0x036c */ enum _SYSTEM_POWER_STATE WaitWakeSystemState;
  /* 0x0370 */ union _LARGE_INTEGER VcIndex;
  /* 0x0378 */ unsigned long VcCountLock;
  /* 0x037c */ struct _LIST_ENTRY WmiEnabledVcs;
  /* 0x0384 */ struct _NDIS_GUID* pNdisGuidMap;
  /* 0x0388 */ struct _NDIS_GUID* pCustomGuidMap;
  /* 0x038c */ unsigned short VcCount;
  /* 0x038e */ unsigned short cNdisGuidMap;
  /* 0x0390 */ unsigned short cCustomGuidMap;
  /* 0x0392 */ char Padding_22[6];
  /* 0x0398 */ struct _NDIS_TIMER MediaDisconnectTimer;
  /* 0x03e0 */ enum _NDIS_PNP_DEVICE_STATE PnPDeviceState;
  /* 0x03e4 */ enum _NDIS_PNP_DEVICE_STATE OldPnPDeviceState;
  /* 0x03e8 */ struct _KDPC DeferredDpc;
  /* 0x0408 */ union _LARGE_INTEGER StartTicks;
  /* 0x0410 */ struct _NDIS_PACKET** IndicatedPacket;
  /* 0x0414 */ struct _KEVENT* RemoveReadyEvent;
  /* 0x0418 */ struct _KEVENT* AllRequestsCompletedEvent;
  /* 0x041c */ unsigned long InitTimeMs;
  /* 0x0420 */ struct _NDIS_MINIPORT_WORK_ITEM WorkItemBuffer[6];
  /* 0x0468 */ struct _OID_LIST* OidList;
  /* 0x046c */ unsigned short InternalResetCount;
  /* 0x046e */ unsigned short MiniportResetCount;
  /* 0x0470 */ unsigned short MediaSenseConnectCount;
  /* 0x0472 */ unsigned short MediaSenseDisconnectCount;
  /* 0x0474 */ struct _NDIS_PACKET** xPackets;
  /* 0x0478 */ unsigned long UserModeOpenReferences;
  /* 0x047c */ void* WSendPacketsHandler /* function */;
  /* 0x0480 */ unsigned long MiniportAttributes;
  /* 0x0484 */ unsigned short NumOpens;
  /* 0x0486 */ unsigned short CFHangXTicks;
  /* 0x0488 */ unsigned long RequestCount;
  /* 0x048c */ unsigned long IndicatedPacketsCount;
  /* 0x0490 */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
  /* 0x0494 */ enum _NDIS_MEDIUM MiniportMediaType;
  /* 0x0498 */ enum _NDIS_MEDIUM DataLinkLayerType;
  /* 0x049c */ enum _NDIS_MEDIUM MpSpecifiedMediaType;
  /* 0x04a0 */ struct _NDIS_REQUEST* LastRequest;
  /* 0x04a4 */ void* FakeMac;
  /* 0x04a8 */ void* LockThread;
  /* 0x04ac */ unsigned long InfoFlags;
  /* 0x04b0 */ unsigned long TimerQueueLock;
  /* 0x04b4 */ struct _KEVENT* ResetCompletedEvent;
  /* 0x04b8 */ void* SavedPacketIndicateHandler /* function */;
  /* 0x04bc */ long RegisteredInterrupts;
  /* 0x04c0 */ unsigned long SetOid;
  /* 0x04c4 */ struct _KEVENT CFHCompletedEvent;
  /* 0x04d4 */ struct _WORK_QUEUE_ITEM CFHWorkItem;
  /* 0x04e4 */ volatile long CFHWorkItemQueued;
  /* 0x04e8 */ void* DeviceContext;
  /* 0x04ec */ struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE* RssParametersBuffer;
  /* 0x04f0 */ unsigned char UsingMSIX;
  /* 0x04f1 */ unsigned char Miniport5InNdis6Mode;
  /* 0x04f2 */ unsigned char Miniport5HasNdis6Component;
  /* 0x04f3 */ unsigned char InitMode;
  /* 0x04f4 */ unsigned char InitModeNotNeededAnymore;
  /* 0x04f5 */ char MediaChangeFilters;
  /* 0x04f6 */ unsigned char CheckPacketFilters;
  /* 0x04f7 */ unsigned char ReceiveFilters;
  /* 0x04f8 */ unsigned long RecvLock;
  /* 0x04fc */ enum _NDIS_MINIPORT_STATE RecvState;
  /* 0x0500 */ unsigned long OutstandingReceives;
  /* 0x0504 */ void* MiniportRecvLockThread;
  /* 0x0508 */ void* NextSendPacketsHandler /* function */;
  /* 0x050c */ void* FinalSendPacketsHandler /* function */;
  /* 0x0510 */ struct _NDIS_FILTER_BLOCK* LowestFilter;
  /* 0x0514 */ struct _NDIS_FILTER_BLOCK* HighestFilter;
  /* 0x0518 */ void* ShutdownContext;
  /* 0x051c */ void* ShutdownHandler /* function */;
  /* 0x0520 */ struct _KBUGCHECK_CALLBACK_RECORD BugcheckCallbackRecord;
  /* 0x0540 */ void* TopIndicateNetBufferListsHandler /* function */;
  /* 0x0544 */ void* TopIndicateLoopbackNetBufferListsHandler /* function */;
  /* 0x0548 */ void* Ndis5PacketIndicateHandler /* function */;
  /* 0x054c */ void* MiniportReturnPacketHandler /* function */;
  /* 0x0550 */ void* MiniportReturnPacketContext;
  /* 0x0554 */ void* SynchronousReturnPacketHandler /* function */;
  /* 0x0558 */ void* SynchronousReturnPacketContext;
  /* 0x055c */ struct _LIST_ENTRY OidRequestList;
  /* 0x0564 */ struct _NDIS_OID_REQUEST* PendingOidRequest;
  /* 0x0568 */ struct _NDIS_OID_REQUEST* ProcessedOidRequest;
  /* 0x056c */ struct _NDIS_OID_REQUEST* HookedOidRequest;
  /* 0x0570 */ void* NextCoOidRequestHandle;
  /* 0x0574 */ unsigned long Ndis6ProtocolsBound;
  /* 0x0578 */ unsigned long PmodeOpen6;
  /* 0x057c */ enum _NDIS_MINIPORT_STATE State;
  /* 0x0580 */ struct _KEVENT* AsyncOpCompletionEvent;
  /* 0x0584 */ int AsyncOpCompletionStatus;
  /* 0x0588 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x0590 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x0598 */ unsigned long SupportedPacketFilters;
  /* 0x059c */ struct _NDIS_MINIPORT_HANDLERS NoFilter;
  /* 0x05f8 */ struct _NDIS_MINIPORT_HANDLERS Next;
  /* 0x0654 */ unsigned char ReceivePathEnabled;
  /* 0x0655 */ unsigned char NormalTopReceive;
  /* 0x0656 */ char Padding_23[2];
  /* 0x0658 */ enum _NDIS_SEND_PATH_TYPE SendPathType;
  /* 0x065c */ enum _NDIS_SEND_PATH_TYPE SavedSendPathType;
  /* 0x0660 */ unsigned char SavedReceivePathEnabled;
  /* 0x0661 */ char Padding_24[3];
  /* 0x0664 */ unsigned long TimestampFlags;
  /* 0x0668 */ unsigned long FilterPnPFlags;
  /* 0x066c */ unsigned long SupportedStatistics;
  /* 0x0670 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES RecvScaleCapabilities;
  /* 0x0684 */ struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES* GeneralAttributes;
  /* 0x0688 */ struct _LIST_ENTRY PortList;
  /* 0x0690 */ unsigned char* AllocatedPortIndices;
  /* 0x0694 */ unsigned long AllocatedPortIndicesLength;
  /* 0x0698 */ unsigned long NumberOfPorts;
  /* 0x069c */ unsigned long NumberOfActivePorts;
  /* 0x06a0 */ unsigned __int64 MiniportXmitLinkSpeed;
  /* 0x06a8 */ unsigned __int64 MiniportRcvLinkSpeed;
  /* 0x06b0 */ struct _NDIS_TIMER InitModeTimeoutTimer;
  /* 0x06f8 */ struct _NDIS_WORK_ITEM InitModeTimeoutWorkItem;
  /* 0x0720 */ struct _KEVENT InitModeTimeoutTimerQueuedEvent;
  /* 0x0730 */ unsigned long DataBackFillSize;
  /* 0x0734 */ unsigned long ContextBackFillSize;
  /* 0x0738 */ struct _NDIS_RESTART_GENERAL_ATTRIBUTES TopFilterRestartAttributes;
  /* 0x0788 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES TopRecvScaleCapabilities;
  /* 0x079c */ unsigned long NsiOpenReferences;
  /* 0x07a0 */ void* ProcessingOpen;
  /* 0x07a4 */ struct _KEVENT* NsiRequestsCompletedEvent;
  /* 0x07a8 */ enum _DEVICE_POWER_STATE QueryPowerDeviceState;
  /* 0x07ac */ unsigned char MinimumNdisMajorVersion;
  /* 0x07ad */ unsigned char MinimumNdisMinorVersion;
  /* 0x07ae */ char Padding_25[2];
  /* 0x07b0 */ struct _NDIS_MINIPORT_STATS* BottomIfStats;
  /* 0x07b4 */ struct _NDIS_M_PERIODIC_RECEIVES PeriodicReceiveQueue;
  /* 0x080c */ struct PNDIS_PER_PROCESSOR_SLOT__* PeriodicReceivesNblCountIndex;
  /* 0x0810 */ enum _NDIS_PORT_CONTROL_STATE DefaultSendControlState;
  /* 0x0814 */ enum _NDIS_PORT_CONTROL_STATE DefaultRcvControlState;
  /* 0x0818 */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultSendAuthorizationState;
  /* 0x081c */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultRcvAuthorizationState;
  /* 0x0820 */ enum _NDIS_PORT_CONTROL_STATE DefaultPortSendControlState;
  /* 0x0824 */ enum _NDIS_PORT_CONTROL_STATE DefaultPortRcvControlState;
  /* 0x0828 */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultPortSendAuthorizationState;
  /* 0x082c */ enum _NDIS_PORT_AUTHORIZATION_STATE DefaultPortRcvAuthorizationState;
  /* 0x0830 */ struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES PciDeviceCustomProperties;
  /* 0x0864 */ void* TopNdis5PacketIndicateHandler /* function */;
  /* 0x0868 */ unsigned long* ndisSupportedOidList;
  /* 0x086c */ unsigned long ndisSupportedOidListLength;
  /* 0x0870 */ unsigned long MsiIntCount;
  /* 0x0874 */ struct _WORK_QUEUE_ITEM MiniportDpcWorkItem;
  /* 0x0884 */ long Padding_26;
  /* 0x0888 */ unsigned __int64 InvalidFrames;
  /* 0x0890 */ long PagingPathCount;
  /* 0x0894 */ struct _LIST_ENTRY ReceiveQueueList;
  /* 0x089c */ unsigned char* AllocatedQueueIndices;
  /* 0x08a0 */ unsigned long AllocatedQueueIndicesLength;
  /* 0x08a4 */ unsigned long NumReceiveQueues;
  /* 0x08a8 */ struct _LIST_ENTRY ReceiveFilterList;
  /* 0x08b0 */ unsigned char* AllocatedReceiveFilterIndices;
  /* 0x08b4 */ unsigned long AllocatedReceiveFilterIndicesLength;
  /* 0x08b8 */ unsigned long NumReceiveFilters;
  /* 0x08bc */ unsigned long EnabledReceiveFilterTypes;
  /* 0x08c0 */ unsigned long EnabledReceiveQueueTypes;
  /* 0x08c4 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterHwCapabilities;
  /* 0x08c8 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterCurrentCapabilities;
  /* 0x08cc */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* TopReceiveFilterCurrentCapabilities;
  /* 0x08d0 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchHwCapabilities;
  /* 0x08d4 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchCurrentCapabilities;
  /* 0x08d8 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* TopNicSwitchCurrentCapabilities;
  /* 0x08dc */ struct _LIST_ENTRY SharedMemoryBlockList;
  /* 0x08e4 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x08e8 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x08ec */ void* AllocateSharedMemoryContext;
  /* 0x08f0 */ struct PCI_MSI_CAPABILITY MsiCaps;
  /* 0x0908 */ struct PCI_MSIX_CAPABILITY MsiXCaps;
  /* 0x0914 */ long Padding_27;
  /* 0x0918 */ unsigned __int64 NumberOfIndirectionTableChanges;
  /* 0x0920 */ unsigned int PciDeviceSriovSupport;
  union
  {
    /* 0x0924 */ unsigned char BeginSavedFields;
    /* 0x0924 */ unsigned long NumUserOpens;
  }; /* size: 0x0004 */
  /* 0x0928 */ struct _NDIS_MINIPORT_OFFLOAD_REG OffloadRegistry;
  /* 0x092c */ unsigned short MediaDisconnectTimeOut;
  /* 0x092e */ unsigned short SGMapRegistersNeeded;
  /* 0x0930 */ unsigned long DriverVerifyFlags;
  /* 0x0934 */ void* SetBusData /* function */;
  /* 0x0938 */ void* GetBusData /* function */;
  /* 0x093c */ void* BusDataContext;
  /* 0x0940 */ enum _INTERFACE_TYPE BusType;
  /* 0x0944 */ unsigned long BusNumber;
  /* 0x0948 */ struct _NDIS_EVENT OpenReadyEvent;
  /* 0x0958 */ unsigned long NumAdminOpens;
  /* 0x095c */ struct _NDIS_M_DRIVER_BLOCK* DriverHandle;
  /* 0x0960 */ struct _NDIS_BIND_PATHS* BindPaths;
  /* 0x0964 */ enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediumType;
  /* 0x0968 */ void* SecurityDescriptor;
  /* 0x096c */ struct _UNICODE_STRING BaseName;
  /* 0x0974 */ struct _UNICODE_STRING MiniportName;
  /* 0x097c */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0980 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0984 */ struct _DEVICE_OBJECT* NextDeviceObject;
  /* 0x0988 */ struct _NDIS_MINIPORT_BLOCK* NextGlobalMiniport;
  /* 0x098c */ struct _UNICODE_STRING* pAdapterInstanceName;
  /* 0x0990 */ unsigned long PnPCapabilities;
  /* 0x0994 */ enum _DEVICE_POWER_STATE CurrentDevicePowerState;
  /* 0x0998 */ unsigned long PowerStateLock;
  /* 0x099c */ enum _DEVICE_POWER_STATE DriverPowerState;
  /* 0x09a0 */ enum _DEVICE_POWER_STATE PrevDriverPowerState;
  /* 0x09a4 */ struct _NET_BUFFER_LIST* LowPowerRcvReturnNbls;
  /* 0x09a8 */ unsigned long PendingReturnNBLCount;
  /* 0x09ac */ unsigned char SurpriseRemoveFlushedRcvReturnQueue;
  /* 0x09ad */ char Padding_28[3];
  /* 0x09b0 */ struct NDIS_NBL_TRACKER_HANDLE__* LowPowerRcvReturnNblTracker;
  /* 0x09b4 */ struct _NDIS_PM_ADMIN_CONFIG PMAdminConfig;
  /* 0x09b8 */ struct _KSEMAPHORE PMPatternSemaphore;
  /* 0x09cc */ struct _KSEMAPHORE PMOffloadSemaphore;
  /* 0x09e0 */ void* BusInterface;
  /* 0x09e4 */ unsigned short InstanceNumber;
  /* 0x09e6 */ char Padding_29[2];
  /* 0x09e8 */ void* ConfigurationHandle;
  /* 0x09ec */ struct _GUID InterfaceGuid;
  /* 0x09fc */ long Padding_30;
  /* 0x0a00 */ union _NET_LUID_LH NetLuid;
  /* 0x0a08 */ unsigned char IfBlockAvailable;
  /* 0x0a09 */ char Padding_31[3];
  /* 0x0a0c */ struct _NDIS_IF_BLOCK* IfBlock;
  /* 0x0a10 */ struct _KEVENT* IfBlockPointerRefZeroEvent;
  /* 0x0a14 */ unsigned int IfIndex;
  /* 0x0a18 */ enum _NET_IF_ADMIN_STATUS AdminStatus;
  /* 0x0a1c */ enum _NET_IF_OPER_STATUS OperStatus;
  /* 0x0a20 */ unsigned long OperStatusFlags;
  union
  {
    /* 0x0a24 */ void* SendHandler /* function */;
    /* 0x0a24 */ void* WanSendHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0a28 */ struct NDIS_NBL_TRACKER_HANDLE__* NblTracker;
  /* 0x0a2c */ struct _DEVICE_RESET_INTERFACE_STANDARD* ReenumerateSelfInterface;
  /* 0x0a30 */ struct _NDIS_MINIPORT_OFFLOAD* Offload;
  /* 0x0a34 */ void* NDKBlock;
  /* 0x0a38 */ void* AddDeviceContext;
  /* 0x0a3c */ struct _IO_REMOVE_LOCK RemoveLock;
  /* 0x0a54 */ struct _UNICODE_STRING DevinterfaceNetSymbolicLinkName;
  /* 0x0a5c */ unsigned long PhysicalMediumInInf;
  /* 0x0a60 */ class wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > ExportName;
  /* 0x0a64 */ class wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > FilterClass;
  /* 0x0a68 */ void* StatusProcessingThread;
  /* 0x0a6c */ struct _UNICODE_STRING FdoName;
  /* 0x0a74 */ struct _KEVENT PowerD0CompleteEvent;
  /* 0x0a84 */ long LastD0CompleteStatus;
  /* 0x0a88 */ enum _NDIS_MINIPORT_EVENT LastD0Reason;
  /* 0x0a8a */ char Padding_32[2];
  /* 0x0a8c */ unsigned long DirectOidRequestCount;
  /* 0x0a90 */ struct _KEVENT* AllDirectRequestsCompletedEvent;
  /* 0x0a94 */ struct _NDIS_HD_SPLIT_CURRENT_CONFIG* HDSplitCurrentConfig;
  /* 0x0a98 */ void* MSIXConfigContext;
  /* 0x0a9c */ void* SetMSIXTableEntry /* function */;
  /* 0x0aa0 */ void* MaskMSIXTableEntry /* function */;
  /* 0x0aa4 */ void* UnmaskMSIXTableEntry /* function */;
  /* 0x0aa8 */ struct _WORK_QUEUE_ITEM DevicePowerStateWorkItem;
  /* 0x0ab8 */ struct _WORK_QUEUE_ITEM SystemPowerStateWorkItem;
  /* 0x0ac8 */ struct _NDIS_RECEIVE_QUEUE_BLOCK* DefaultReceiveQueue;
  /* 0x0acc */ unsigned long MaxNumRssProcessors;
  /* 0x0ad0 */ struct _PROCESSOR_NUMBER RssBaseProcessor;
  /* 0x0ad4 */ struct _PROCESSOR_NUMBER RssMaxProcessor;
  /* 0x0ad8 */ enum _NDIS_RSS_PROFILE RssProfile;
  /* 0x0adc */ unsigned short NumaNodeId;
  /* 0x0ade */ char Padding_33[2];
  /* 0x0ae0 */ unsigned short* NumaDistances;
  /* 0x0ae4 */ struct _UNICODE_STRING* pModifiedInstanceName;
  /* 0x0ae8 */ unsigned long SyncFlags;
  /* 0x0aec */ unsigned long WSyncFlags;
  /* 0x0af0 */ unsigned long InterlockedFlags;
  /* 0x0af4 */ struct _ULONG_REFERENCE Ref;
  /* 0x0b00 */ struct _NDIS_SELECTIVE_SUSPEND* SelectiveSuspend;
  /* 0x0b04 */ struct _NDIS_MINIPORT_AOAC* AoAc;
  /* 0x0b08 */ enum _NDIS_PM_WAKE_REASON_TYPE LastWakeReason;
  /* 0x0b0c */ struct NDIS_EVENT_LOG_HANDLE__* PnpEventLog;
  /* 0x0b10 */ struct _NDIS_D0_SIGNAL_WORK_ITEM D0CompleteSignalWorkItem;
  /* 0x0b40 */ struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS* PhysicalPerformanceCounters;
  /* 0x0b44 */ long Padding_34;
  /* 0x0b48 */ union _LARGE_INTEGER TimeOfInitialization;
  /* 0x0b50 */ union _LARGE_INTEGER LastSystemSleepTime;
  /* 0x0b58 */ unsigned __int64 TotalSystemSleepTimeMs;
  /* 0x0b60 */ struct _NDIS_SRIOV_CAPABILITIES* SriovHwCapabilities;
  /* 0x0b64 */ struct _NDIS_SRIOV_CAPABILITIES* SriovCurrentCapabilities;
  /* 0x0b68 */ unsigned __int64 InvalidateBlockMask;
  /* 0x0b70 */ struct _IRP* InvalidateBlockIoctlPf;
  /* 0x0b74 */ struct _IRP* InvalidateBlockIoctlVf;
  /* 0x0b78 */ struct _VPCI_INVALIDATE_BLOCK_OUTPUT InvalidateBlockVfParams;
  /* 0x0b80 */ struct _KEVENT InvalidateBlockEvent;
  /* 0x0b90 */ unsigned short InvalidateVfId;
  /* 0x0b92 */ unsigned char InvalidateBlockCancelling;
  /* 0x0b93 */ char Padding_35;
  /* 0x0b94 */ struct _NDIS_PF_BLOCK* PFBlock;
  /* 0x0b98 */ unsigned long NumSwitches;
  /* 0x0b9c */ struct _LIST_ENTRY NicSwitchList;
  /* 0x0ba4 */ unsigned long NumAllocatedVFs;
  /* 0x0ba8 */ struct _LIST_ENTRY VFList;
  /* 0x0bb0 */ unsigned long NumActiveVPorts;
  /* 0x0bb4 */ struct _LIST_ENTRY VPortList;
  /* 0x0bbc */ unsigned char* AllocatedVPortIndices;
  /* 0x0bc0 */ unsigned long AllocatedVPortIndicesLength;
  /* 0x0bc4 */ void* SetVirtualFunctionData /* function */;
  /* 0x0bc8 */ void* GetVirtualFunctionData /* function */;
  /* 0x0bcc */ void* EnableVirtualization /* function */;
  /* 0x0bd0 */ void* GetVirtualDeviceLocation /* function */;
  /* 0x0bd4 */ void* GetVirtualFunctionProbedBars /* function */;
  /* 0x0bd8 */ void* VirtInterfaceContext;
  /* 0x0bdc */ struct _UNICODE_STRING DevinterfaceVirtSymbolicLinkName;
  /* 0x0be4 */ void* VpciInterfaceDereference /* function */;
  /* 0x0be8 */ void* WriteVfConfigBlock /* function */;
  /* 0x0bec */ void* ReadVfConfigBlock /* function */;
  /* 0x0bf0 */ void* VpciInterfaceContext;
  /* 0x0bf4 */ unsigned int VfSerialNumber;
  /* 0x0bf8 */ struct _LUID SriovLuid;
  /* 0x0c00 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
  /* 0x0c04 */ struct NDIS_REFCOUNT_HANDLE__* NsiRefCountTracker;
  /* 0x0c08 */ struct _NDIS_QOS_CAPABILITIES* QosHwCapabilities;
  /* 0x0c0c */ struct _NDIS_QOS_CAPABILITIES* QosCurrentCapabilities;
  /* 0x0c10 */ struct _NDIS_QOS_PARAMETERS* QosOperationalParameters;
  /* 0x0c14 */ unsigned long QosOperationalParametersBufferSize;
  /* 0x0c18 */ struct _NDIS_QOS_PARAMETERS* QosRemoteParameters;
  /* 0x0c1c */ unsigned long QosRemoteParametersBufferSize;
  /* 0x0c20 */ unsigned __int64 DeviceFlags;
  /* 0x0c28 */ void* VerifierContext;
  /* 0x0c2c */ struct _WORK_QUEUE_ITEM SurpriseRemovalWorkItem;
  /* 0x0c3c */ struct Ndis::BindStack Bindings;
  /* 0x0c84 */ struct Ndis::BindEngine BindEngine;
  /* 0x0cc4 */ class Rtl::KNeutralLock<enum NDIS_MINIPORT_POLICY_OWNER> MiniportOwner;
  /* 0x0cdc */ BOOL PmInterruptedByPnp;
  /* 0x0cdd */ BOOL DoNotBlockOnMiniportLock;
  /* 0x0cde */ BOOL PoFxDStateReportingEnabled;
  /* 0x0cdf */ char Padding_36;
  /* 0x0ce0 */ struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__* HookAdapterHandle;
  /* 0x0ce4 */ struct _WORK_QUEUE_ITEM InterfaceUpdateWorkItem;
  /* 0x0cf4 */ BOOL InterfaceUpdateInProgress;
  /* 0x0cf5 */ BOOL MacAddressUpdateQueued;
  /* 0x0cf6 */ BOOL MtuUpdateQueued;
  /* 0x0cf7 */ char Padding_37;
  /* 0x0cf8 */ struct _IF_PHYSICAL_ADDRESS_LH PendingMacAddress;
  /* 0x0d1a */ char Padding_38[2];
  /* 0x0d1c */ unsigned long PendingMtuSize;
  /* 0x0d20 */ wchar_t* PnPInstanceId;
  /* 0x0d24 */ struct WORKITEM_WITH_IRP DevicePowerOnWorkItem;
  /* 0x0d38 */ struct WORKITEM_WITH_IRP DevicePowerDownWorkItem;
  /* 0x0d4c */ class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> > > PendingOidWatchdog;
  /* 0x0d50 */ class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> > > HookedOidWatchdog;
  /* 0x0d54 */ class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> > > ReenumerateWatchdog;
  /* 0x0d58 */ void* PdcHandle;
  /* 0x0d5c */ long Padding_39;
  /* 0x0d60 */ struct _NDIS_TIMER PdcTaskClientDisableTimer;
  /* 0x0da8 */ struct _NDIS_WORK_ITEM PdcTaskClientDisableWorkItem;
  /* 0x0dd0 */ volatile long PdcTaskClientMode;
  /* 0x0dd4 */ unsigned long ModernStandbyWoLMagicPacketEnable;
  /* 0x0dd8 */ BOOL ModernStandbySystemWakeEnabled;
  /* 0x0dd9 */ char Padding_40[3];
  /* 0x0ddc */ struct _NDIS_RSS_DPC_WORKER_CONTEXT* RssV2Context;
  /* 0x0de0 */ volatile long RssV2CompletionCount;
  /* 0x0de4 */ struct _KEVENT RssV2CompletionEvent;
  /* 0x0df4 */ unsigned char RssV2Initialized;
  /* 0x0df5 */ char Padding_41[3];
  /* 0x0df8 */ struct _LIST_ENTRY SynchronousOidCalls;
  /* 0x0e00 */ struct _NDIS_TIMESTAMP_CAPABILITIES* HwTimestampCapabilities;
  /* 0x0e04 */ struct _NDIS_TIMESTAMP_CAPABILITIES* HwTimestampCurrentConfig;
  /* 0x0e08 */ struct _NDIS_TIMESTAMP_CAPABILITIES* TopTimestampConfig;
  /* 0x0e0c */ struct _NDIS_TIMESTAMP_CAPABILITIES* TopHwTimestampCapabilities;
  /* 0x0e10 */ struct _PKTMON_COMPONENT_CONTEXT PktMonComp;
  /* 0x0e1c */ struct _PKTMON_EDGE_CONTEXT PktMonEdge;
  /* 0x0e28 */ enum NetSetupStoreType LWMConfigurationStore;
  /* 0x0e2c */ long __PADDING__[1];
} NDIS_MINIPORT_BLOCK, *PNDIS_MINIPORT_BLOCK; /* size: 0x0e30 */

typedef enum _DEVICE_RESET_TYPE
{
  FunctionLevelDeviceReset = 0,
  PlatformLevelDeviceReset = 1,
} DEVICE_RESET_TYPE, *PDEVICE_RESET_TYPE;

typedef enum _NDIS_802_11_WEP_STATUS
{
  Ndis802_11WEPEnabled = 0,
  Ndis802_11Encryption1Enabled = 0,
  Ndis802_11WEPDisabled = 1,
  Ndis802_11EncryptionDisabled = 1,
  Ndis802_11WEPKeyAbsent = 2,
  Ndis802_11Encryption1KeyAbsent = 2,
  Ndis802_11WEPNotSupported = 3,
  Ndis802_11EncryptionNotSupported = 3,
  Ndis802_11Encryption2Enabled = 4,
  Ndis802_11Encryption2KeyAbsent = 5,
  Ndis802_11Encryption3Enabled = 6,
  Ndis802_11Encryption3KeyAbsent = 7,
} NDIS_802_11_WEP_STATUS, *PNDIS_802_11_WEP_STATUS;

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMetadataSizeInformation = 13,
  FileFsFullSizeInformationEx = 14,
  FileFsMaximumInformation = 15,
} FSINFOCLASS, *PFSINFOCLASS;

typedef enum _NDIS_INTERRUPT_MODERATION
{
  NdisInterruptModerationUnknown = 0,
  NdisInterruptModerationNotSupported = 1,
  NdisInterruptModerationEnabled = 2,
  NdisInterruptModerationDisabled = 3,
} NDIS_INTERRUPT_MODERATION, *PNDIS_INTERRUPT_MODERATION;

typedef struct _NDIS_LINK_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0008 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0010 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0018 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x001c */ unsigned long AutoNegotiationFlags;
} NDIS_LINK_PARAMETERS, *PNDIS_LINK_PARAMETERS; /* size: 0x0020 */

typedef enum _NETSETUP_BINDING_PATH_TYPE
{
  NetSetupBindingPathNdisProtocol = 0,
  NetSetupBindingPathNdisFilter = 1,
  NetSetupBindingPathTdi = 2,
} NETSETUP_BINDING_PATH_TYPE, *PNETSETUP_BINDING_PATH_TYPE;

typedef enum _WWAN_STRUCT_TYPE
{
  WwanStructTN = 0,
  WwanStructContext = 1,
  WwanStructProvider = 2,
  WwanStructSmsPdu = 3,
  WwanStructReserved0 = 4,
  WwanStructReserved1 = 5,
  WwanStructReserved2 = 6,
  WwanStructSmsCdma = 7,
  WwanStructReserved3 = 8,
  WwanStructDeviceServiceEntry = 9,
  WwanStructProvider2 = 10,
  WwanStructDeviceServiceGuid = 11,
  WwanStructDeviceServiceCommandId = 12,
  WwanStructCellularClass = 13,
  WwanStructDeviceSlotMap = 14,
  WwanStructUiccApplication = 15,
  WwanStructRegisterAcquisitionOrder = 16,
  WwanStructRegistrationState = 17,
  WwanStructSignalState = 18,
  WwanStructUiccTerminalCapability = 19,
  WwanStructSarConfig = 20,
  WwanStructContextV2 = 21,
  WwanStructNetworkBlacklistProvider = 22,
  WwanStructMPDPChildInterface = 23,
  WwantStructSNSSAI = 24,
  WwantStructTAI = 25,
  WwanStructMax = 26,
} WWAN_STRUCT_TYPE, *PWWAN_STRUCT_TYPE;

typedef enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  RegNtPreQueryKeyName = 47,
  RegNtPostQueryKeyName = 48,
  MaxRegNtNotifyClass = 49,
} REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef struct _wil_details_UsageSubscriptionData
{
  /* 0x0000 */ unsigned int featureId;
  /* 0x0004 */ unsigned short serviceReportingKind;
  /* 0x0006 */ char __PADDING__[2];
} wil_details_UsageSubscriptionData, *Pwil_details_UsageSubscriptionData; /* size: 0x0008 */

typedef enum _NDIS_PT_REFTAG
{
  PTREF_BIND_ITER = 0,
  PTREF_READREGISTRY = 1,
  PTREF_BINDNOTIFY = 2,
  PTREF_UNBINDNOTIFY = 3,
  PTREF_RECONFIG = 4,
  PTREF_UNLOADNOTIFY = 5,
  PTREF_UNBINDING = 6,
  PTREF_BINDING = 7,
  PTREF_BINDINGX = 8,
  PTREF_OPEN = 9,
  PTREF_REENUMERATE = 10,
  PTREF_QUNBIND = 11,
  PTREF_BINDCOMPLETE = 12,
  PTREF_BINDFAILNOTIFY = 13,
  PTREF_PD_CLIENT = 14,
  PTREF_NUMBER_OF_TAGS = 15,
} NDIS_PT_REFTAG, *PNDIS_PT_REFTAG;

typedef enum _NDIS_NBL_TRACKER_OWNERSHIP_EVENT
{
  NdisNblTrackerEvent_MiniportIndicated = 128,
  NdisNblTrackerEvent_MiniportIndicatedResources = 129,
  NdisNblTrackerEvent_FilterIndicated = 130,
  NdisNblTrackerEvent_FilterIndicatedResources = 131,
  NdisNblTrackerEvent_IndicatedToProtocol = 132,
  NdisNblTrackerEvent_IndicatedToProtocolResources = 133,
  NdisNblTrackerEvent_IndicatedToProtocolPacket = 134,
  NdisNblTrackerEvent_ProtocolReturned = 135,
  NdisNblTrackerEvent_ProtocolReturnedResources = 136,
  NdisNblTrackerEvent_ProtocolReturnedPacket = 137,
  NdisNblTrackerEvent_FilterReturned = 138,
  NdisNblTrackerEvent_ReturnedToFilter = 139,
  NdisNblTrackerEvent_ReturnedToFilterResources = 140,
  NdisNblTrackerEvent_ReturnedToMiniport = 141,
  NdisNblTrackerEvent_ReturnedToMiniportResources = 142,
  NdisNblTrackerEvent_ProtocolSent = 143,
  NdisNblTrackerEvent_FilterSent = 144,
  NdisNblTrackerEvent_SentToFilter = 145,
  NdisNblTrackerEvent_SentToMiniport = 146,
  NdisNblTrackerEvent_MiniportSendCompleted = 147,
  NdisNblTrackerEvent_FilterSendCompleted = 148,
  NdisNblTrackerEvent_SendCompletedToOpen = 149,
  NdisNblTrackerEvent_CustomReceived = 150,
  NdisNblTrackerEvent_CustomReturned = 151,
  NdisNblTrackerEvent_CustomSent = 152,
  NdisNblTrackerEvent_CustomSendCompleted = 153,
  NdisNblTrackerEvent_OtherDatapath = 154,
  NdisNblTrackerEvent_LoopbackIndicated = 155,
  NdisNblTrackerEvent_LoopbackReturned = 156,
  NdisNblTrackerEvent_OwnershipMax = 157,
} NDIS_NBL_TRACKER_OWNERSHIP_EVENT, *PNDIS_NBL_TRACKER_OWNERSHIP_EVENT;

typedef enum _NDIS_MSIX_TABLE_CONFIG
{
  NdisMSIXTableConfigSetTableEntry = 0,
  NdisMSIXTableConfigMaskTableEntry = 1,
  NdisMSIXTableConfigUnmaskTableEntry = 2,
  NdisMSIXTableConfigMax = 3,
} NDIS_MSIX_TABLE_CONFIG, *PNDIS_MSIX_TABLE_CONFIG;

typedef enum __vc_attributes::event_sourceAttribute::type_e
{
  native = 0,
  com = 1,
  managed = 2,
} _vc_attributes::event_sourceAttribute::type_e, *P_vc_attributes::event_sourceAttribute::type_e;

typedef struct _NDIS_CALL_MANAGER_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorVersion;
  /* 0x0001 */ unsigned char MinorVersion;
  /* 0x0002 */ unsigned short Filler;
  /* 0x0004 */ unsigned int Reserved;
  /* 0x0008 */ void* CmCreateVcHandler /* function */;
  /* 0x000c */ void* CmDeleteVcHandler /* function */;
  /* 0x0010 */ void* CmOpenAfHandler /* function */;
  /* 0x0014 */ void* CmCloseAfHandler /* function */;
  /* 0x0018 */ void* CmRegisterSapHandler /* function */;
  /* 0x001c */ void* CmDeregisterSapHandler /* function */;
  /* 0x0020 */ void* CmMakeCallHandler /* function */;
  /* 0x0024 */ void* CmCloseCallHandler /* function */;
  /* 0x0028 */ void* CmIncomingCallCompleteHandler /* function */;
  /* 0x002c */ void* CmAddPartyHandler /* function */;
  /* 0x0030 */ void* CmDropPartyHandler /* function */;
  /* 0x0034 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x0038 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x003c */ void* CmModifyCallQoSHandler /* function */;
  /* 0x0040 */ void* CmRequestHandler /* function */;
  /* 0x0044 */ void* CmRequestCompleteHandler /* function */;
} NDIS_CALL_MANAGER_CHARACTERISTICS, *PNDIS_CALL_MANAGER_CHARACTERISTICS; /* size: 0x0048 */

typedef enum _NDIS_802_11_STATUS_TYPE
{
  Ndis802_11StatusType_Authentication = 0,
  Ndis802_11StatusType_MediaStreamMode = 1,
  Ndis802_11StatusType_PMKID_CandidateList = 2,
  Ndis802_11StatusTypeMax = 3,
} NDIS_802_11_STATUS_TYPE, *PNDIS_802_11_STATUS_TYPE;

typedef enum _NDIS_NBL_TRACKER_LIFETIME_EVENT
{
  NdisNblTrackerEvent_QueuedByNdis = 1,
  NdisNblTrackerEvent_NblAllocated = 2,
  NdisNblTrackerEvent_NblAllocatedWithNb = 3,
  NdisNblTrackerEvent_NblFreed = 4,
  NdisNblTrackerEvent_NblAllocatedClone = 5,
  NdisNblTrackerEvent_NblFreedClone = 6,
  NdisNblTrackerEvent_NblAllocatedFragment = 7,
  NdisNblTrackerEvent_NblFreedFragment = 8,
  NdisNblTrackerEvent_NblAllocatedReassembled = 9,
  NdisNblTrackerEvent_NetioAllocatedClone = 10,
  NdisNblTrackerEvent_NetioFreedClone = 11,
  NdisNblTrackerEvent_CustomAllocatedChild = 12,
  NdisNblTrackerEvent_CustomFreedChild = 13,
  NdisNblTrackerEvent_CustomAllocatedNbl = 14,
  NdisNblTrackerEvent_CustomFreedNbl = 15,
  NdisNblTrackerEvent_OtherNotDatapath = 16,
  NdisNblTrackerEvent_PacketTranslationCached = 17,
  NdisNblTrackerEvent_PacketTranslationReused = 18,
  NdisNblTrackerEvent_Translate6To5TxOut = 19,
  NdisNblTrackerEvent_Translate6To5TxReturn = 20,
  NdisNblTrackerEvent_Translate5To6TxOut = 21,
  NdisNblTrackerEvent_Translate5To6TxReturn = 22,
  NdisNblTrackerEvent_Translate5To5TxOut = 23,
  NdisNblTrackerEvent_Translate5To5TxReturn = 24,
  NdisNblTrackerEvent_Translate6To5RxOut = 25,
  NdisNblTrackerEvent_Translate6To5RxReturn = 26,
  NdisNblTrackerEvent_Translate5To6RxOut = 27,
  NdisNblTrackerEvent_Translate5To6RxReturn = 28,
  NdisNblTrackerEvent_Translate5To5RxOut = 29,
  NdisNblTrackerEvent_Translate5To5RxReturn = 30,
  NdisNblTrackerEvent_LifetimeMax = 31,
} NDIS_NBL_TRACKER_LIFETIME_EVENT, *PNDIS_NBL_TRACKER_LIFETIME_EVENT;

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
  DirectoryNotifyInformation = 1,
  DirectoryNotifyExtendedInformation = 2,
} DIRECTORY_NOTIFY_INFORMATION_CLASS, *PDIRECTORY_NOTIFY_INFORMATION_CLASS;

enum CPU_VENDORS
{
  CPU_NONE = 0,
  CPU_INTEL = 1,
  CPU_AMD = 2,
  CPU_CYRIX = 3,
  CPU_TRANSMETA = 4,
  CPU_VIA = 5,
  CPU_CENTAUR = 5,
  CPU_RISE = 6,
  CPU_UNKNOWN = 7,
};

typedef enum _WWAN_VOICE_CLASS
{
  WwanVoiceClassUnknown = 0,
  WwanVoiceClassNoVoice = 1,
  WwanVoiceClassSeparateVoiceData = 2,
  WwanVoiceClassSimultaneousVoiceData = 3,
  WwanVoiceClassMax = 4,
} WWAN_VOICE_CLASS, *PWWAN_VOICE_CLASS;

typedef enum _NDIS_GFT_FLOW_ENTRY_TYPE
{
  NdisGftFlowEntryTypeUndefined = 0,
  NdisGftFlowEntryTypeExactMatch = 1,
  NdisGftFlowEntryTypeWildcard = 2,
  NdisGftFlowEntryTypeMax = 3,
} NDIS_GFT_FLOW_ENTRY_TYPE, *PNDIS_GFT_FLOW_ENTRY_TYPE;

typedef enum _PKG_TYPE
{
  NPNP_PKG = 0,
  NDCO_PKG = 1,
  MAX_PKG = 2,
} PKG_TYPE, *PPKG_TYPE;

enum DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

enum TCP_UPLOAD_REASON
{
  LowActivity = 1,
  HighDropRate = 2,
  SmallIO = 3,
  NoBufferPreposting = 4,
  NoBufferProposting = 4,
  ReceivedUrgentData = 5,
  HighFragmentation = 6,
  HighOutOfOrderPackets = 7,
  TimeoutExpiration = 8,
  InvalidState = 9,
  UploadRequested = 10,
  HardwareFailure = 11,
  MaxUploadReason = 12,
};

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
} PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

typedef enum _POOL_BLOCK_TYPE
{
  NDIS_PACKET_POOL_BLOCK_FREE = 0,
  NDIS_PACKET_POOL_BLOCK_USED = 1,
  NDIS_PACKET_POOL_BLOCK_AGING = 2,
} POOL_BLOCK_TYPE, *PPOOL_BLOCK_TYPE;

struct DOT11_IBSS_PARAMS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char bJoinOnly;
  /* 0x0005 */ char Padding_42[3];
  /* 0x0008 */ unsigned long uIEsOffset;
  /* 0x000c */ unsigned long uIEsLength;
}; /* size: 0x0010 */

typedef enum _NDIS_SHARED_MEMORY_USAGE
{
  NdisSharedMemoryUsageUndefined = 0,
  NdisSharedMemoryUsageXmit = 1,
  NdisSharedMemoryUsageXmitHeader = 2,
  NdisSharedMemoryUsageXmitData = 3,
  NdisSharedMemoryUsageReceive = 4,
  NdisSharedMemoryUsageReceiveLookahead = 5,
  NdisSharedMemoryUsageReceivePostLookahead = 6,
  NdisSharedMemoryUsageReceiveHeader = 7,
  NdisSharedMemoryUsageReceiveData = 8,
  NdisSharedMemoryUsageOther = 9,
  NdisSharedMemoryUsageMax = 10,
} NDIS_SHARED_MEMORY_USAGE, *PNDIS_SHARED_MEMORY_USAGE;

typedef enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef enum _WWAN_DEVICE_TYPE
{
  WwanDeviceTypeUnknown = 0,
  WwanDeviceTypeEmbedded = 1,
  WwanDeviceTypeRemovable = 2,
  WwanDeviceTypeRemote = 3,
  WwanDeviceTypeMax = 4,
} WWAN_DEVICE_TYPE, *PWWAN_DEVICE_TYPE;

typedef struct _NDIS_NBL_TRACKER_BUCKET
{
  /* 0x0000 */ struct PNDIS_PER_PROCESSOR_SLOT__* Slot;
  /* 0x0004 */ long PassiveCounter;
} NDIS_NBL_TRACKER_BUCKET, *PNDIS_NBL_TRACKER_BUCKET; /* size: 0x0008 */

typedef enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
} MODE, *PMODE;

typedef enum _NDIS_IPV6_HEADER_FIELD
{
  NdisIPv6HeaderFieldUndefined = 0,
  NdisIPv6HeaderFieldProtocol = 1,
  NdisIPv6HeaderFieldMaximum = 2,
} NDIS_IPV6_HEADER_FIELD, *PNDIS_IPV6_HEADER_FIELD;

typedef struct _NDIS_GFT_PACKET_COUNTER_VALUE
{
  /* 0x0000 */ unsigned __int64 Packets;
  /* 0x0008 */ union _LARGE_INTEGER LastUpdate;
} NDIS_GFT_PACKET_COUNTER_VALUE, *PNDIS_GFT_PACKET_COUNTER_VALUE; /* size: 0x0010 */

typedef struct _NDIS_GFT_BYTE_COUNTER_VALUE
{
  /* 0x0000 */ unsigned __int64 Bytes;
  /* 0x0008 */ union _LARGE_INTEGER LastUpdate;
} NDIS_GFT_BYTE_COUNTER_VALUE, *PNDIS_GFT_BYTE_COUNTER_VALUE; /* size: 0x0010 */

typedef struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE
{
  /* 0x0000 */ unsigned __int64 Packets;
  /* 0x0008 */ unsigned __int64 Bytes;
  /* 0x0010 */ union _LARGE_INTEGER LastUpdate;
} NDIS_GFT_PACKET_BYTE_COUNTER_VALUE, *PNDIS_GFT_PACKET_BYTE_COUNTER_VALUE; /* size: 0x0018 */

typedef struct _NDIS_GFT_FLOW_STATE
{
  /* 0x0000 */ unsigned long TcpSeqNum;
  /* 0x0004 */ unsigned long TcpAckNum;
} NDIS_GFT_FLOW_STATE, *PNDIS_GFT_FLOW_STATE; /* size: 0x0008 */

typedef struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE_AND_STATE
{
  /* 0x0000 */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE PacketByteCounterValue;
  /* 0x0018 */ volatile struct _NDIS_GFT_FLOW_STATE FlowState;
} NDIS_GFT_PACKET_BYTE_COUNTER_VALUE_AND_STATE, *PNDIS_GFT_PACKET_BYTE_COUNTER_VALUE_AND_STATE; /* size: 0x0020 */

typedef struct _NDIS_GFT_COUNTER_VALUE
{
  /* 0x0000 */ enum _NDIS_GFT_COUNTER_TYPE CounterType;
  /* 0x0004 */ long Padding_43;
  union
  {
    union
    {
      /* 0x0008 */ volatile struct _NDIS_GFT_PACKET_COUNTER_VALUE Packets;
      /* 0x0008 */ volatile struct _NDIS_GFT_BYTE_COUNTER_VALUE Bytes;
      /* 0x0008 */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE PacketsBytes;
      /* 0x0008 */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE_AND_STATE PacketsBytesAndState;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ CounterValue;
} NDIS_GFT_COUNTER_VALUE, *PNDIS_GFT_COUNTER_VALUE; /* size: 0x0028 */

typedef struct _NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER
{
  /* 0x0000 */ unsigned long FlowEntryId;
  /* 0x0004 */ long Padding_44;
  /* 0x0008 */ struct _NDIS_GFT_COUNTER_VALUE CounterValue;
} NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER, *PNDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER; /* size: 0x0030 */

typedef enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION
{
  NdisGftHeaderGroupTranspositionActionUndefined = 0,
  NdisGftHeaderGroupTranspositionActionModify = 1,
  NdisGftHeaderGroupTranspositionActionIgnore = 2,
  NdisGftHeaderGroupTranspositionActionPush = 3,
  NdisGftHeaderGroupTranspositionActionPop = 4,
  NdisGftHeaderGroupTranspositionActionMax = 5,
} NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION, *PNDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION;

typedef enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
} KINTERRUPT_MODE, *PKINTERRUPT_MODE;

typedef enum _NET_IF_DIRECTION_TYPE
{
  NET_IF_DIRECTION_SENDRECEIVE = 0,
  NET_IF_DIRECTION_SENDONLY = 1,
  NET_IF_DIRECTION_RECEIVEONLY = 2,
  NET_IF_DIRECTION_MAXIMUM = 3,
} NET_IF_DIRECTION_TYPE, *PNET_IF_DIRECTION_TYPE;

typedef enum _NDIS_PORT_PNP_STATE
{
  NdisPortPnPStateAllocating = 1,
  NdisPortPnPStateAllocated = 2,
  NdisPortPnPStateActivating = 3,
  NdisPortPnPStateActivated = 4,
  NdisPortPnPStateDeactivating = 5,
  NdisPortPnPStateDeactivated = 6,
  NdisPortPnPStateDeallocating = 7,
  NdisPortPnPStateDeallocated = 8,
} NDIS_PORT_PNP_STATE, *PNDIS_PORT_PNP_STATE;

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

typedef enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
} MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef enum _NDIS_802_11_AUTHENTICATION_MODE
{
  Ndis802_11AuthModeOpen = 0,
  Ndis802_11AuthModeShared = 1,
  Ndis802_11AuthModeAutoSwitch = 2,
  Ndis802_11AuthModeWPA = 3,
  Ndis802_11AuthModeWPAPSK = 4,
  Ndis802_11AuthModeWPANone = 5,
  Ndis802_11AuthModeWPA2 = 6,
  Ndis802_11AuthModeWPA2PSK = 7,
  Ndis802_11AuthModeWPA3 = 8,
  Ndis802_11AuthModeWPA3SAE = 9,
  Ndis802_11AuthModeOWE = 10,
  Ndis802_11AuthModeMax = 11,
} NDIS_802_11_AUTHENTICATION_MODE, *PNDIS_802_11_AUTHENTICATION_MODE;

typedef enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
} IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef struct _IO_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Option;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char ShareDisposition;
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short Spare2;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Port;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory;
      struct
      {
        /* 0x0008 */ unsigned long MinimumVector;
        /* 0x000c */ unsigned long MaximumVector;
        /* 0x0010 */ unsigned short AffinityPolicy;
        /* 0x0012 */ unsigned short Group;
        /* 0x0014 */ enum _IRQ_PRIORITY PriorityPolicy;
        /* 0x0018 */ unsigned long TargetedProcessors;
      } /* size: 0x0014 */ Interrupt;
      struct
      {
        /* 0x0008 */ unsigned long MinimumChannel;
        /* 0x000c */ unsigned long MaximumChannel;
      } /* size: 0x0008 */ Dma;
      struct
      {
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved;
        /* 0x0010 */ unsigned long Channel;
        /* 0x0014 */ unsigned long TransferWidth;
      } /* size: 0x0010 */ DmaV3;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Generic;
      struct
      {
        /* 0x0008 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long MinBusNumber;
        /* 0x0010 */ unsigned long MaxBusNumber;
        /* 0x0014 */ unsigned long Reserved;
      } /* size: 0x0010 */ BusNumber;
      struct
      {
        /* 0x0008 */ unsigned long Priority;
        /* 0x000c */ unsigned long Reserved1;
        /* 0x0010 */ unsigned long Reserved2;
      } /* size: 0x000c */ ConfigData;
      struct
      {
        /* 0x0008 */ unsigned long Length40;
        /* 0x000c */ unsigned long Alignment40;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory40;
      struct
      {
        /* 0x0008 */ unsigned long Length48;
        /* 0x000c */ unsigned long Alignment48;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory48;
      struct
      {
        /* 0x0008 */ unsigned long Length64;
        /* 0x000c */ unsigned long Alignment64;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory64;
      struct
      {
        /* 0x0008 */ unsigned char Class;
        /* 0x0009 */ unsigned char Type;
        /* 0x000a */ unsigned char Reserved1;
        /* 0x000b */ unsigned char Reserved2;
        /* 0x000c */ unsigned long IdLowPart;
        /* 0x0010 */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _IO_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST; /* size: 0x0028 */

typedef enum _TlgBlob_t
{
  _TlgBlobNone = 0,
  _TlgBlobEnd = 1,
  _TlgBlobProvider = 2,
  _TlgBlobEvent3 = 3,
  _TlgBlobProvider3 = 4,
  _TlgBlobEvent2 = 5,
  _TlgBlobEvent4 = 6,
  _TlgBlobMax = 7,
} TlgBlob_t, *PTlgBlob_t;

typedef enum _NETSETUP_QUERY_STATE
{
  NetSetupQueryStateInitialized = 0,
  NetSetupQueryStateEnumCompleted = 1,
  NetSetupQueryStateAborted = 2,
  NetSetupQueryStateClosed = 3,
} NETSETUP_QUERY_STATE, *PNETSETUP_QUERY_STATE;

typedef struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH
{
  /* 0x0000 */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
  /* 0x0004 */ unsigned short Port;
  /* 0x0006 */ unsigned short Range;
} NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH, *PNDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH; /* size: 0x0008 */

struct NdisDebugBlock<1282691138>
{
}; /* size: 0x0001 */

struct _NDIS_IF_NETWORK_BLOCK;

typedef enum _NDIS_WDF_CX_DRIVER_STATE
{
  NdisCxDriverStateInvalid = 0,
  NdisCxDriverStateRegistered = 1,
  NdisCxDriverStateDeregistered = 2,
} NDIS_WDF_CX_DRIVER_STATE, *PNDIS_WDF_CX_DRIVER_STATE;

struct wistd::integral_constant<bool,0>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

typedef enum _SYSTEM_PROCESS_CLASSIFICATION
{
  SystemProcessClassificationNormal = 0,
  SystemProcessClassificationSystem = 1,
  SystemProcessClassificationSecureSystem = 2,
  SystemProcessClassificationMemCompression = 3,
  SystemProcessClassificationRegistry = 4,
  SystemProcessClassificationMaximum = 5,
} SYSTEM_PROCESS_CLASSIFICATION, *PSYSTEM_PROCESS_CLASSIFICATION;

typedef struct _KDEVICE_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceListEntry;
  /* 0x0008 */ unsigned long SortKey;
  /* 0x000c */ unsigned char Inserted;
  /* 0x000d */ char __PADDING__[3];
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY; /* size: 0x0010 */

struct wil::details::resource_policy<unsigned long *,void __stdcall(unsigned long *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned int,2>,unsigned long *,unsigned long *,0,std::nullptr_t>
{
}; /* size: 0x0001 */

typedef enum _NDIS_RECEIVE_QUEUE_TYPE
{
  NdisReceiveQueueTypeUnspecified = 0,
  NdisReceiveQueueTypeVMQueue = 1,
  NdisReceiveQueueTypeMaximum = 2,
} NDIS_RECEIVE_QUEUE_TYPE, *PNDIS_RECEIVE_QUEUE_TYPE;

typedef enum _KSPIN_LOCK_QUEUE_NUMBER
{
  LockQueueUnusedSpare0 = 0,
  LockQueueUnusedSpare1 = 1,
  LockQueueUnusedSpare2 = 2,
  LockQueueUnusedSpare3 = 3,
  LockQueueVacbLock = 4,
  LockQueueMasterLock = 5,
  LockQueueNonPagedPoolLock = 6,
  LockQueueIoCancelLock = 7,
  LockQueueUnusedSpare8 = 8,
  LockQueueIoVpbLock = 9,
  LockQueueIoDatabaseLock = 10,
  LockQueueIoCompletionLock = 11,
  LockQueueNtfsStructLock = 12,
  LockQueueAfdWorkQueueLock = 13,
  LockQueueBcbLock = 14,
  LockQueueUnusedSpare15 = 15,
  LockQueueUnusedSpare16 = 16,
  LockQueueMaximumLock = 17,
} KSPIN_LOCK_QUEUE_NUMBER, *PKSPIN_LOCK_QUEUE_NUMBER;

typedef struct _NDIS_WDF_CX_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* EvtCxPowerReference /* function */;
  /* 0x0008 */ void* EvtCxPowerDereference /* function */;
  /* 0x000c */ void* EvtCxPowerAoAcEngage /* function */;
  /* 0x0010 */ void* EvtCxPowerAoAcDisengage /* function */;
  /* 0x0014 */ void* EvtCxGetDeviceObject /* function */;
  /* 0x0018 */ void* EvtCxGetNextDeviceObject /* function */;
  /* 0x001c */ void* EvtCxGetAssignedFdoName /* function */;
  /* 0x0020 */ void* EvtCxGetNdisHandleFromDeviceObject /* function */;
  /* 0x0024 */ void* EvtCxUpdatePMParameters /* function */;
  /* 0x0028 */ void* EvtCxAllocateMiniportBlock /* function */;
  /* 0x002c */ void* EvtCxMiniportCompleteAdd /* function */;
  /* 0x0030 */ void* EvtCxDeviceStartComplete /* function */;
  /* 0x0034 */ void* EvtCxMiniportDeviceReset /* function */;
  /* 0x0038 */ void* EvtCxMiniportQueryDeviceResetSupport /* function */;
  /* 0x003c */ void* EvtCxGetWmiEventGuid /* function */;
} NDIS_WDF_CX_CHARACTERISTICS, *PNDIS_WDF_CX_CHARACTERISTICS; /* size: 0x0040 */

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

class KRef<NDIS_BIND_FILTER_DRIVER>
{
  /* 0x0000 */ class KRef<NDIS_BIND_FILTER_DRIVER>::KRefHolder* _p;
}; /* size: 0x0004 */

struct NDIS_BIND_FILTER_LINK
{
  /* 0x0000 */ long Padding_45[13];
  /* 0x0034 */ class KRef<NDIS_BIND_FILTER_DRIVER> BindDriver;
  /* 0x0038 */ unsigned long FilterIndex;
}; /* size: 0x003c */

typedef enum _NDIS_PER_PACKET_INFO
{
  TcpIpChecksumPacketInfo = 0,
  IpSecPacketInfo = 1,
  TcpLargeSendPacketInfo = 2,
  ClassificationHandlePacketInfo = 3,
  NdisReserved = 4,
  ScatterGatherListPacketInfo = 5,
  Ieee8021QInfo = 6,
  OriginalPacketInfo = 7,
  PacketCancelId = 8,
  OriginalNetBufferList = 9,
  CachedNetBufferList = 10,
  ShortPacketPaddingInfo = 11,
  MaxPerPacketInfo = 12,
} NDIS_PER_PACKET_INFO, *PNDIS_PER_PACKET_INFO;

typedef enum _NDIS_WAN_QUALITY
{
  NdisWanRaw = 0,
  NdisWanErrorControl = 1,
  NdisWanReliable = 2,
} NDIS_WAN_QUALITY, *PNDIS_WAN_QUALITY;

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

typedef enum _NETSETUP_PNP_DEVICE_CLASS
{
  NetSetupPnpDeviceClassNet = 0,
  NetSetupPnpDeviceClassInfrared = 1,
} NETSETUP_PNP_DEVICE_CLASS, *PNETSETUP_PNP_DEVICE_CLASS;

typedef struct _TCP_OFFLOAD_STATE_CONST
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned short Flags;
  /* 0x000a */ unsigned short RemotePort;
  /* 0x000c */ unsigned short LocalPort;
  struct /* bitfield */
  {
    /* 0x000e */ unsigned char SndWindScale : 4; /* bit position: 0 */
    /* 0x000e */ unsigned char RcvWindScale : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x000f */ char Padding_46;
  /* 0x0010 */ unsigned short RemoteMss;
  /* 0x0012 */ char Padding_47[2];
  /* 0x0014 */ unsigned long HashValue;
} TCP_OFFLOAD_STATE_CONST, *PTCP_OFFLOAD_STATE_CONST; /* size: 0x0018 */

typedef enum _NDIS_POWER_PROFILE
{
  NdisPowerProfileBattery = 0,
  NdisPowerProfileAcOnLine = 1,
} NDIS_POWER_PROFILE, *PNDIS_POWER_PROFILE;

typedef enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION
{
  NdisNicSwitchVPortInterruptModerationUndefined = 0,
  NdisNicSwitchVPortInterruptModerationAdaptive = 1,
  NdisNicSwitchVPortInterruptModerationOff = 2,
  NdisNicSwitchVPortInterruptModerationLow = 100,
  NdisNicSwitchVPortInterruptModerationMedium = 200,
  NdisNicSwitchVPortInterruptModerationHigh = 300,
} NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION, *PNDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION;

typedef struct _flowspec
{
  /* 0x0000 */ unsigned long TokenRate;
  /* 0x0004 */ unsigned long TokenBucketSize;
  /* 0x0008 */ unsigned long PeakBandwidth;
  /* 0x000c */ unsigned long Latency;
  /* 0x0010 */ unsigned long DelayVariation;
  /* 0x0014 */ unsigned long ServiceType;
  /* 0x0018 */ unsigned long MaxSduSize;
  /* 0x001c */ unsigned long MinimumPolicedSize;
} flowspec, *Pflowspec; /* size: 0x0020 */

typedef enum _NDIS_ENVIRONMENT_TYPE
{
  NdisEnvironmentWindows = 0,
  NdisEnvironmentWindowsNt = 1,
} NDIS_ENVIRONMENT_TYPE, *PNDIS_ENVIRONMENT_TYPE;

typedef struct _NDIS_REQUEST::_DATA::_QUERY_INFORMATION
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0004 */ void* InformationBuffer;
  /* 0x0008 */ unsigned int InformationBufferLength;
  /* 0x000c */ unsigned int BytesWritten;
  /* 0x0010 */ unsigned int BytesNeeded;
} NDIS_REQUEST::_DATA::_QUERY_INFORMATION, *PNDIS_REQUEST::_DATA::_QUERY_INFORMATION; /* size: 0x0014 */

typedef struct _NDIS_REQUEST::_DATA::_SET_INFORMATION
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0004 */ void* InformationBuffer;
  /* 0x0008 */ unsigned int InformationBufferLength;
  /* 0x000c */ unsigned int BytesRead;
  /* 0x0010 */ unsigned int BytesNeeded;
} NDIS_REQUEST::_DATA::_SET_INFORMATION, *PNDIS_REQUEST::_DATA::_SET_INFORMATION; /* size: 0x0014 */

typedef union _NDIS_REQUEST::_DATA
{
  union
  {
    /* 0x0000 */ struct _NDIS_REQUEST::_DATA::_QUERY_INFORMATION QUERY_INFORMATION;
    /* 0x0000 */ struct _NDIS_REQUEST::_DATA::_SET_INFORMATION SET_INFORMATION;
  }; /* size: 0x0014 */
} NDIS_REQUEST::_DATA, *PNDIS_REQUEST::_DATA; /* size: 0x0014 */

typedef struct _NDIS_REQUEST
{
  /* 0x0000 */ unsigned char MacReserved[16];
  /* 0x0010 */ enum _NDIS_REQUEST_TYPE RequestType;
  /* 0x0014 */ union _NDIS_REQUEST::_DATA DATA;
  /* 0x0028 */ unsigned char NdisReserved[36];
  union
  {
    /* 0x004c */ unsigned char CallMgrReserved[8];
    /* 0x004c */ unsigned char ProtocolReserved[8];
  }; /* size: 0x0008 */
  /* 0x0054 */ unsigned char MiniportReserved[8];
} NDIS_REQUEST, *PNDIS_REQUEST; /* size: 0x005c */

typedef enum _NDIS_DEVICE_PNP_EVENT
{
  NdisDevicePnPEventQueryRemoved = 0,
  NdisDevicePnPEventRemoved = 1,
  NdisDevicePnPEventSurpriseRemoved = 2,
  NdisDevicePnPEventQueryStopped = 3,
  NdisDevicePnPEventStopped = 4,
  NdisDevicePnPEventPowerProfileChanged = 5,
  NdisDevicePnPEventFilterListChanged = 6,
  NdisDevicePnPEventMaximum = 7,
} NDIS_DEVICE_PNP_EVENT, *PNDIS_DEVICE_PNP_EVENT;

struct wil_details_StagingConfigWnfStateName
{
  /* 0x0000 */ unsigned int Data[2];
}; /* size: 0x0008 */

struct wil_details_StagingConfigUsageTrigger
{
  /* 0x0000 */ unsigned int featureId;
  /* 0x0004 */ struct wil_details_StagingConfigWnfStateName trigger;
  struct /* bitfield */
  {
    /* 0x000c */ unsigned int serviceReportingKind : 16; /* bit position: 0 */
    /* 0x000c */ unsigned int isVariantConfig : 1; /* bit position: 16 */
    /* 0x000c */ unsigned int unused : 15; /* bit position: 17 */
  }; /* bitfield */
}; /* size: 0x0010 */

struct KALLOCATION_TAG<1920090443,1>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

enum TlgOut_t
{
  TlgOutNULL = 0,
  TlgOutNOPRINT = 1,
  TlgOutSTRING = 2,
  TlgOutBOOLEAN = 3,
  TlgOutHEX = 4,
  TlgOutPID = 5,
  TlgOutTID = 6,
  TlgOutPORT = 7,
  TlgOutIPV4 = 8,
  TlgOutIPV6 = 9,
  TlgOutSOCKETADDRESS = 10,
  TlgOutXML = 11,
  TlgOutJSON = 12,
  TlgOutWIN32ERROR = 13,
  TlgOutNTSTATUS = 14,
  TlgOutHRESULT = 15,
  TlgOutFILETIME = 16,
  TlgOutSIGNED = 17,
  TlgOutUNSIGNED = 18,
  TlgOutUTF8 = 35,
  TlgOutPKCS7_WITH_TYPE_INFO = 36,
  TlgOutCODE_POINTER = 37,
  TlgOutDATETIME_UTC = 38,
  _TlgOutMax = 39,
  _TlgOutChain = 128,
  _TlgOutTypeMask = 127,
};

typedef enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef struct _SECURITY_SUBJECT_CONTEXT
{
  /* 0x0000 */ void* ClientToken;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ void* PrimaryToken;
  /* 0x000c */ void* ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT; /* size: 0x0010 */

typedef struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* SendNetBufferListsHandler /* function */;
  /* 0x000c */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0010 */ void* CancelSendNetBufferListsHandler /* function */;
  /* 0x0014 */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x0018 */ void* ReturnNetBufferListsHandler /* function */;
} NDIS_FILTER_PARTIAL_CHARACTERISTICS, *PNDIS_FILTER_PARTIAL_CHARACTERISTICS; /* size: 0x001c */

typedef struct _MCGEN_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 RegistrationHandle;
  /* 0x0008 */ unsigned __int64 Logger;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long IsEnabled;
  /* 0x0028 */ unsigned char Level;
  /* 0x0029 */ unsigned char Reserve;
  /* 0x002a */ unsigned short EnableBitsCount;
  /* 0x002c */ unsigned long* EnableBitMask;
  /* 0x0030 */ const unsigned __int64* EnableKeyWords;
  /* 0x0034 */ const unsigned char* EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT; /* size: 0x0038 */

typedef struct _XSTATE_FEATURE
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE; /* size: 0x0008 */

typedef struct _XSTATE_CONFIGURATION
{
  /* 0x0000 */ unsigned __int64 EnabledFeatures;
  /* 0x0008 */ unsigned __int64 EnabledVolatileFeatures;
  /* 0x0010 */ unsigned long Size;
  union
  {
    /* 0x0014 */ unsigned long ControlFlags;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long OptimizedSave : 1; /* bit position: 0 */
      /* 0x0014 */ unsigned long CompactionEnabled : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0018 */ struct _XSTATE_FEATURE Features[64];
  /* 0x0218 */ unsigned __int64 EnabledSupervisorFeatures;
  /* 0x0220 */ unsigned __int64 AlignedFeatures;
  /* 0x0228 */ unsigned long AllFeatureSize;
  /* 0x022c */ unsigned long AllFeatures[64];
  /* 0x032c */ long Padding_48;
  /* 0x0330 */ unsigned __int64 EnabledUserVisibleSupervisorFeatures;
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; /* size: 0x0338 */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long AitSamplingValue;
  /* 0x024c */ unsigned long AppCompatFlag;
  /* 0x0250 */ unsigned __int64 RNGSeedVersion;
  /* 0x0258 */ unsigned long GlobalValidationRunlevel;
  /* 0x025c */ volatile long TimeZoneBiasStamp;
  /* 0x0260 */ unsigned long NtBuildNumber;
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ unsigned char Reserved0[1];
  /* 0x026a */ unsigned short NativeProcessorArchitecture;
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ unsigned long BootId;
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  union
  {
    /* 0x02d5 */ unsigned char MitigationPolicies;
    struct /* bitfield */
    {
      /* 0x02d5 */ unsigned char NXSupportPolicy : 2; /* bit position: 0 */
      /* 0x02d5 */ unsigned char SEHValidationPolicy : 2; /* bit position: 2 */
      /* 0x02d5 */ unsigned char CurDirDevicesSkippedForDlls : 2; /* bit position: 4 */
      /* 0x02d5 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x02d6 */ unsigned short CyclesPerYield;
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ unsigned char VirtualizationFlags;
  /* 0x02ee */ unsigned char Reserved12[2];
  union
  {
    /* 0x02f0 */ unsigned long SharedDataFlags;
    struct /* bitfield */
    {
      /* 0x02f0 */ unsigned long DbgErrorPortPresent : 1; /* bit position: 0 */
      /* 0x02f0 */ unsigned long DbgElevationEnabled : 1; /* bit position: 1 */
      /* 0x02f0 */ unsigned long DbgVirtEnabled : 1; /* bit position: 2 */
      /* 0x02f0 */ unsigned long DbgInstallerDetectEnabled : 1; /* bit position: 3 */
      /* 0x02f0 */ unsigned long DbgLkgEnabled : 1; /* bit position: 4 */
      /* 0x02f0 */ unsigned long DbgDynProcessorEnabled : 1; /* bit position: 5 */
      /* 0x02f0 */ unsigned long DbgConsoleBrokerEnabled : 1; /* bit position: 6 */
      /* 0x02f0 */ unsigned long DbgSecureBootEnabled : 1; /* bit position: 7 */
      /* 0x02f0 */ unsigned long DbgMultiSessionSku : 1; /* bit position: 8 */
      /* 0x02f0 */ unsigned long DbgMultiUsersInSessionSku : 1; /* bit position: 9 */
      /* 0x02f0 */ unsigned long DbgStateSeparationEnabled : 1; /* bit position: 10 */
      /* 0x02f0 */ unsigned long SpareBits : 21; /* bit position: 11 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02f4 */ unsigned long DataFlagsPad[1];
  /* 0x02f8 */ unsigned __int64 TestRetInstruction;
  /* 0x0300 */ __int64 QpcFrequency;
  /* 0x0308 */ unsigned long SystemCall;
  union
  {
    union
    {
      /* 0x030c */ unsigned long AllFlags;
      struct /* bitfield */
      {
        /* 0x030c */ unsigned long Win32Process : 1; /* bit position: 0 */
        /* 0x030c */ unsigned long Sgx2Enclave : 1; /* bit position: 1 */
        /* 0x030c */ unsigned long VbsBasicEnclave : 1; /* bit position: 2 */
        /* 0x030c */ unsigned long SpareBits : 29; /* bit position: 3 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ UserCetAvailableEnvironments;
  /* 0x0310 */ unsigned __int64 SystemCallPad[2];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
    /* 0x0320 */ unsigned long ReservedTickCountOverlay[3];
  }; /* size: 0x000c */
  /* 0x032c */ unsigned long TickCountPad[1];
  /* 0x0330 */ unsigned long Cookie;
  /* 0x0334 */ unsigned long CookiePad[1];
  /* 0x0338 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0340 */ unsigned __int64 TimeUpdateLock;
  /* 0x0348 */ unsigned __int64 BaselineSystemTimeQpc;
  /* 0x0350 */ unsigned __int64 BaselineInterruptTimeQpc;
  /* 0x0358 */ unsigned __int64 QpcSystemTimeIncrement;
  /* 0x0360 */ unsigned __int64 QpcInterruptTimeIncrement;
  /* 0x0368 */ unsigned char QpcSystemTimeIncrementShift;
  /* 0x0369 */ unsigned char QpcInterruptTimeIncrementShift;
  /* 0x036a */ unsigned short UnparkedProcessorCount;
  /* 0x036c */ unsigned long EnclaveFeatureMask[4];
  /* 0x037c */ unsigned long TelemetryCoverageRound;
  /* 0x0380 */ unsigned short UserModeGlobalLogger[16];
  /* 0x03a0 */ unsigned long ImageFileExecutionOptions;
  /* 0x03a4 */ unsigned long LangGenerationCount;
  /* 0x03a8 */ unsigned __int64 Reserved4;
  /* 0x03b0 */ volatile unsigned __int64 InterruptTimeBias;
  /* 0x03b8 */ volatile unsigned __int64 QpcBias;
  /* 0x03c0 */ unsigned long ActiveProcessorCount;
  /* 0x03c4 */ volatile unsigned char ActiveGroupCount;
  /* 0x03c5 */ unsigned char Reserved9;
  union
  {
    /* 0x03c6 */ unsigned short QpcData;
    struct
    {
      /* 0x03c6 */ volatile unsigned char QpcBypassEnabled;
      /* 0x03c7 */ unsigned char QpcShift;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x03c8 */ union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  /* 0x03d0 */ union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  /* 0x03d8 */ struct _XSTATE_CONFIGURATION XState;
  /* 0x0710 */ struct _KSYSTEM_TIME FeatureConfigurationChangeStamp;
  /* 0x071c */ unsigned long Spare;
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x0720 */

enum INDICATE_OFFLOAD_EVENT
{
  NeighborReachabilityInDoubt = 1,
  NeighborReachabilityQuery = 2,
  MaxOffloadEvent = 3,
};

typedef enum _NDIS_PORT_TYPE
{
  NdisPortTypeUndefined = 0,
  NdisPortTypeBridge = 1,
  NdisPortTypeRasConnection = 2,
  NdisPortType8021xSupplicant = 3,
  NdisPortTypeNdisImPlatform = 4,
  NdisPortTypeMax = 5,
} NDIS_PORT_TYPE, *PNDIS_PORT_TYPE;

typedef struct _NDIS_802_11_SSID
{
  /* 0x0000 */ unsigned long SsidLength;
  /* 0x0004 */ unsigned char Ssid[32];
} NDIS_802_11_SSID, *PNDIS_802_11_SSID; /* size: 0x0024 */

typedef struct _NDIS_802_11_NON_BCAST_SSID_LIST
{
  /* 0x0000 */ unsigned long NumberOfItems;
  /* 0x0004 */ struct _NDIS_802_11_SSID Non_Bcast_Ssid[1];
} NDIS_802_11_NON_BCAST_SSID_LIST, *PNDIS_802_11_NON_BCAST_SSID_LIST; /* size: 0x0028 */

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

struct NDIS_BIND_PROTOCOL_DRIVER
{
  /* 0x0000 */ long Padding_49[3];
  /* 0x000c */ class wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > Name;
  /* 0x0010 */ unsigned long ProtocolBindFlags;
  /* 0x0014 */ struct _NDIS_PROTOCOL_BLOCK* RunningDriver;
}; /* size: 0x0018 */

struct wil::details::resource_policy<void *,long (__stdcall*)(void *),&ZwClose,wistd::integral_constant<unsigned int,0>,void *,void *,0,std::nullptr_t>
{
}; /* size: 0x0001 */

typedef struct _NDIS_OID_REQUEST_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Completed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long FreeRequest : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long OidInTable : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long SignalEvent : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long CoNdis : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long FromProtocol : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long FromFilter : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long Passthrough : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long LastRestoreFilter : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long OnlyDerefOpen : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long SignalAndExit : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned long MpSaveBuf : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned long DownLevel : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned long Cloned : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned long Mandatory : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned long SentToMiniport : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long SentToFilter : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long ForReset : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned long ForRestore : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned long ForMpDirect : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long DirectRequest : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long RevisionChanged : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long SkipPreProc : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long SkipPostProc : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long SkipSourceCompletion : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long SourceCompletionOnly : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long InternalClone : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long Remainder : 4; /* bit position: 28 */
  }; /* bitfield */
} NDIS_OID_REQUEST_FLAGS, *PNDIS_OID_REQUEST_FLAGS; /* size: 0x0004 */

typedef enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
} TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned char DmaAddressWidth;
  /* 0x0009 */ char __PADDING__[3];
} NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES; /* size: 0x000c */

typedef enum _WWAN_AUTH_METHOD
{
  WwanAuthSim = 0,
  WwanAuthAka = 1,
  WwanAuthAkaPrime = 2,
  WwanAuthMethodMax = 3,
} WWAN_AUTH_METHOD, *PWWAN_AUTH_METHOD;

typedef struct _WWAN_AUTH_SIM_CHALLENGE
{
  /* 0x0000 */ unsigned char Rand1[16];
  /* 0x0010 */ unsigned char Rand2[16];
  /* 0x0020 */ unsigned char Rand3[16];
  /* 0x0030 */ unsigned long n;
} WWAN_AUTH_SIM_CHALLENGE, *PWWAN_AUTH_SIM_CHALLENGE; /* size: 0x0034 */

typedef struct _WWAN_AUTH_AKA_CHALLENGE
{
  /* 0x0000 */ unsigned char Rand[16];
  /* 0x0010 */ unsigned char Autn[16];
} WWAN_AUTH_AKA_CHALLENGE, *PWWAN_AUTH_AKA_CHALLENGE; /* size: 0x0020 */

typedef struct _WWAN_AUTH_AKAP_CHALLENGE
{
  /* 0x0000 */ unsigned char Rand[16];
  /* 0x0010 */ unsigned char Autn[16];
  /* 0x0020 */ unsigned char NetworkName[256];
  /* 0x0120 */ unsigned long NetworkNameLength;
} WWAN_AUTH_AKAP_CHALLENGE, *PWWAN_AUTH_AKAP_CHALLENGE; /* size: 0x0124 */

typedef struct _WWAN_AUTH_CHALLENGE
{
  /* 0x0000 */ enum _WWAN_AUTH_METHOD AuthMethod;
  union
  {
    union
    {
      /* 0x0004 */ struct _WWAN_AUTH_SIM_CHALLENGE AuthSim;
      /* 0x0004 */ struct _WWAN_AUTH_AKA_CHALLENGE AuthAka;
      /* 0x0004 */ struct _WWAN_AUTH_AKAP_CHALLENGE AuthAkap;
    }; /* size: 0x0124 */
  } /* size: 0x0124 */ u;
} WWAN_AUTH_CHALLENGE, *PWWAN_AUTH_CHALLENGE; /* size: 0x0128 */

typedef struct _NDIS_WWAN_AUTH_CHALLENGE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_AUTH_CHALLENGE AuthChallenge;
} NDIS_WWAN_AUTH_CHALLENGE, *PNDIS_WWAN_AUTH_CHALLENGE; /* size: 0x012c */

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef enum _NDIS_PARAMETER_TYPE
{
  NdisParameterInteger = 0,
  NdisParameterHexInteger = 1,
  NdisParameterString = 2,
  NdisParameterMultiString = 3,
  NdisParameterBinary = 4,
} NDIS_PARAMETER_TYPE, *PNDIS_PARAMETER_TYPE;

enum NDIS_CHIMNEY_OFFLOAD_TYPE
{
  NdisTcpChimneyOffload = 1,
  NdisIpsecChimneyOffload = 2,
  NdisRdmaChimneyOffload = 3,
  NdisMaxChimneyOffload = 4,
};

typedef struct _DOT11_WFD_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumConcurrentGORole;
  /* 0x0008 */ unsigned long uNumConcurrentClientRole;
  /* 0x000c */ unsigned long WPSVersionsSupported;
  /* 0x0010 */ unsigned char bServiceDiscoverySupported;
  /* 0x0011 */ unsigned char bClientDiscoverabilitySupported;
  /* 0x0012 */ unsigned char bInfrastructureManagementSupported;
  /* 0x0013 */ char Padding_50;
  /* 0x0014 */ unsigned long uMaxSecondaryDeviceTypeListSize;
  /* 0x0018 */ unsigned char DeviceAddress[6];
  /* 0x001e */ char Padding_51[2];
  /* 0x0020 */ unsigned long uInterfaceAddressListCount;
  /* 0x0024 */ unsigned char* pInterfaceAddressList[6];
  /* 0x0028 */ unsigned long uNumSupportedCountryOrRegionStrings;
  /* 0x002c */ unsigned char* pSupportedCountryOrRegionStrings[3];
  /* 0x0030 */ unsigned long uDiscoveryFilterListSize;
  /* 0x0034 */ unsigned long uGORoleClientTableSize;
} DOT11_WFD_ATTRIBUTES, *PDOT11_WFD_ATTRIBUTES; /* size: 0x0038 */

typedef enum _NDIS_MPIF_REFTAG
{
  MPIFREF_IMDEINIT = 0,
  MPIFREF_AOAC = 1,
  MPIFREF_QUERYOBJ = 2,
  MPIFREF_GETTOP = 3,
  MPIFREF_GETRCVADDR = 4,
  MPIFREF_GETALLRCVADDR = 5,
  MPIFREF_CHIIB = 6,
  MPIFREF_CHIIUF = 7,
  MPIFREF_CHIIC = 8,
  MPIFREF_ENUMRCVADDR = 9,
  MPIFREF_SETISTATE = 10,
  MPIFREF_PMINIT = 11,
  MPIFREF_DEVPOWERUPFAIL = 12,
  MPIFREF_DEVPOWERUP = 13,
  MPIFREF_POWERDOWN = 14,
  MPIFREF_POWERDOWNFAIL = 15,
  MPIFREF_WMI = 16,
  MPIFREF_INITIALSTATE = 17,
  MPIFREF_REFMPGUID = 18,
  MPIFREF_FATAL_ERROR = 19,
  MPIFREF_DELIFBLOCK = 20,
  MPIFREF_UPDATECHARS = 21,
  MPIFREF_CREATE = 22,
  MPIFREF_SET_ATTRIBUTES = 23,
  MPIFREF_GET_MTYPE = 24,
  MPIFREF_DEVICE_RESET = 25,
  MPIFREF_TIMESTAMPING = 26,
  MPIFREF_PKTMON = 27,
  MPIFREF_SWTIMESTAMPING = 28,
  MPIFREF_NUMBER_OF_TAGS = 29,
} NDIS_MPIF_REFTAG, *PNDIS_MPIF_REFTAG;

struct _NDIS_IF_PROVIDER_BLOCK;

struct wil_details_StagingConfig
{
  /* 0x0000 */ enum wil_FeatureStore store;
  /* 0x0004 */ int forUpdate;
  /* 0x0008 */ unsigned long readChangeStamp;
  /* 0x000c */ unsigned char readVersion;
  /* 0x000d */ char Padding_52[3];
  /* 0x0010 */ int modified;
  /* 0x0014 */ struct wil_details_StagingConfigHeader* header;
  /* 0x0018 */ struct wil_details_StagingConfigFeature* features;
  /* 0x001c */ struct wil_details_StagingConfigUsageTrigger* triggers;
  /* 0x0020 */ int changedInSession;
  /* 0x0024 */ void* buffer;
  /* 0x0028 */ unsigned long bufferSize;
  /* 0x002c */ unsigned long bufferAlloc;
  /* 0x0030 */ int bufferOwned;
}; /* size: 0x0034 */

enum TCP_OFFLOAD_EVENT_TYPE
{
  TcpIndicateSendBacklogChange = 1,
  TcpIndicateDisconnect = 2,
  TcpIndicateRetrieve = 3,
  TcpIndicateAbort = 4,
};

typedef struct _DOT11_VWIFI_COMBINATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumInfrastructure;
  /* 0x0008 */ unsigned long uNumAdhoc;
  /* 0x000c */ unsigned long uNumSoftAP;
} DOT11_VWIFI_COMBINATION, *PDOT11_VWIFI_COMBINATION; /* size: 0x0010 */

struct DOT11_VWIFI_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uTotalNumOfEntries;
  /* 0x0008 */ struct _DOT11_VWIFI_COMBINATION Combinations[1];
}; /* size: 0x0018 */

enum TCP_OFFLOAD_CONNECTION_STATE
{
  TcpConnectionClosed = 0,
  TcpConnectionListen = 1,
  TcpConnectionSynSent = 2,
  TcpConnectionSynRcvd = 3,
  TcpConnectionEstablished = 4,
  TcpConnectionFinWait1 = 5,
  TcpConnectionFinWait2 = 6,
  TcpConnectionCloseWait = 7,
  TcpConnectionClosing = 8,
  TcpConnectionLastAck = 9,
  TcpConnectionTimeWait = 10,
  TcpConnectionMaxState = 11,
};

typedef enum _NDIS_BIND_FILTER_FLAGS
{
  NdisBindFilter_Optional = 1,
  NdisBindFilter_Monitoring = 2,
  NdisBindFilter_UnbindOnAttach = 4,
  NdisBindFilter_UnbindOnDetach = 8,
  NdisBindFilter_NoStartAtBootHint = 16,
} NDIS_BIND_FILTER_FLAGS, *PNDIS_BIND_FILTER_FLAGS;

typedef enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
} PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef struct _CM_RESOURCE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST; /* size: 0x0024 */

typedef struct _CURDIR
{
  /* 0x0000 */ struct _UNICODE_STRING DosPath;
  /* 0x0008 */ void* Handle;
} CURDIR, *PCURDIR; /* size: 0x000c */

typedef struct _STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ char* Buffer;
} STRING, *PSTRING; /* size: 0x0008 */

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Length;
  /* 0x0004 */ unsigned long TimeStamp;
  /* 0x0008 */ struct _STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR; /* size: 0x0010 */

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  /* 0x0000 */ unsigned long MaximumLength;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DebugFlags;
  /* 0x0010 */ void* ConsoleHandle;
  /* 0x0014 */ unsigned long ConsoleFlags;
  /* 0x0018 */ void* StandardInput;
  /* 0x001c */ void* StandardOutput;
  /* 0x0020 */ void* StandardError;
  /* 0x0024 */ struct _CURDIR CurrentDirectory;
  /* 0x0030 */ struct _UNICODE_STRING DllPath;
  /* 0x0038 */ struct _UNICODE_STRING ImagePathName;
  /* 0x0040 */ struct _UNICODE_STRING CommandLine;
  /* 0x0048 */ void* Environment;
  /* 0x004c */ unsigned long StartingX;
  /* 0x0050 */ unsigned long StartingY;
  /* 0x0054 */ unsigned long CountX;
  /* 0x0058 */ unsigned long CountY;
  /* 0x005c */ unsigned long CountCharsX;
  /* 0x0060 */ unsigned long CountCharsY;
  /* 0x0064 */ unsigned long FillAttribute;
  /* 0x0068 */ unsigned long WindowFlags;
  /* 0x006c */ unsigned long ShowWindowFlags;
  /* 0x0070 */ struct _UNICODE_STRING WindowTitle;
  /* 0x0078 */ struct _UNICODE_STRING DesktopInfo;
  /* 0x0080 */ struct _UNICODE_STRING ShellInfo;
  /* 0x0088 */ struct _UNICODE_STRING RuntimeData;
  /* 0x0090 */ struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  /* 0x0290 */ unsigned long EnvironmentSize;
  /* 0x0294 */ unsigned long EnvironmentVersion;
  /* 0x0298 */ void* PackageDependencyData;
  /* 0x029c */ unsigned long ProcessGroupId;
  /* 0x02a0 */ unsigned long LoaderThreads;
  /* 0x02a4 */ struct _UNICODE_STRING RedirectionDllName;
  /* 0x02ac */ struct _UNICODE_STRING HeapPartitionName;
  /* 0x02b4 */ unsigned __int64* DefaultThreadpoolCpuSetMasks;
  /* 0x02b8 */ unsigned long DefaultThreadpoolCpuSetMaskCount;
  /* 0x02bc */ unsigned long DefaultThreadpoolThreadMaximum;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS; /* size: 0x02c0 */

enum OFFLOAD_STATE_TYPE
{
  NeighborOffloadConstState = 1,
  NeighborOffloadCachedState = 2,
  NeighborOffloadDelegatedState = 3,
  NeighborOffloadState = 4,
  Ip4OffloadConstState = 5,
  Ip4OffloadCachedState = 6,
  Ip4OffloadDelegatedState = 7,
  Ip4OffloadState = 8,
  Ip6OffloadConstState = 9,
  Ip6OffloadCachedState = 10,
  Ip6OffloadDelegatedState = 11,
  Ip6OffloadState = 12,
  TcpOffloadConstState = 13,
  TcpOffloadCachedState = 14,
  TcpOffloadDelegatedState = 15,
  TcpOffloadResourceState = 16,
  TcpOffloadState = 17,
  FilterReservedOffloadState = 254,
  MaximumOffloadState = 255,
};

typedef enum _WWAN_REGISTER_ACTION
{
  WwanRegisterActionAutomatic = 0,
  WwanRegisterActionManual = 1,
  WwanRegisterActionMax = 2,
} WWAN_REGISTER_ACTION, *PWWAN_REGISTER_ACTION;

class KAutoEvent
{
}; /* size: 0x0010 */

typedef enum _NDIS_NSI_REFTAG
{
  NSIREF_IOCTL = 0,
  NSIREF_STATUS = 1,
  NSIREF_IFTOP = 2,
  NSIREF_IFSTATS = 3,
  NSIREF_IFOID = 4,
  NSIREF_NUMBER_OF_TAGS = 5,
} NDIS_NSI_REFTAG, *PNDIS_NSI_REFTAG;

typedef enum _WWAN_CONTEXT_TYPE
{
  WwanContextTypeNone = 0,
  WwanContextTypeInternet = 1,
  WwanContextTypeVpn = 2,
  WwanContextTypeVoice = 3,
  WwanContextTypeVideoShare = 4,
  WwanContextTypeCustom = 5,
  WwanContextTypePurchase = 6,
  WwanContextTypeMms = 7,
  WwanContextTypeIms = 8,
  WwanContextTypeAdmin = 9,
  WwanContextTypeApp = 10,
  WwanContextTypeXcap = 11,
  WwanContextTypeTethering = 12,
  WwanContextTypeEmergencyCall = 13,
  WwanContextTypeLteAttach = 14,
  WwanContextTypeMax = 15,
} WWAN_CONTEXT_TYPE, *PWWAN_CONTEXT_TYPE;

class wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(unsigned long *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned int,2>,unsigned long *,unsigned long *,0,std::nullptr_t> >
{
  /* 0x0000 */ unsigned long* m_ptr;
}; /* size: 0x0004 */

typedef enum _WWAN_COMPRESSION
{
  WwanCompressionNone = 0,
  WwanCompressionEnable = 1,
  WwanCompressionMax = 2,
} WWAN_COMPRESSION, *PWWAN_COMPRESSION;

typedef enum _WWAN_AUTH_PROTOCOL
{
  WwanAuthProtocolNone = 0,
  WwanAuthProtocolPap = 1,
  WwanAuthProtocolChap = 2,
  WwanAuthProtocolMsChapV2 = 3,
  WwanAuthProtocolAuto = 4,
  WwanAuthProtocolMax = 5,
} WWAN_AUTH_PROTOCOL, *PWWAN_AUTH_PROTOCOL;

typedef struct _NDK_SHARED_ENDPOINT_DISPATCH
{
  /* 0x0000 */ void* NdkCloseSharedEndpoint /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkGetLocalAddress /* function */;
} NDK_SHARED_ENDPOINT_DISPATCH, *PNDK_SHARED_ENDPOINT_DISPATCH; /* size: 0x000c */

typedef struct _FILE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ struct _VPB* Vpb;
  /* 0x000c */ void* FsContext;
  /* 0x0010 */ void* FsContext2;
  /* 0x0014 */ struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;
  /* 0x0018 */ void* PrivateCacheMap;
  /* 0x001c */ long FinalStatus;
  /* 0x0020 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0024 */ unsigned char LockOperation;
  /* 0x0025 */ unsigned char DeletePending;
  /* 0x0026 */ unsigned char ReadAccess;
  /* 0x0027 */ unsigned char WriteAccess;
  /* 0x0028 */ unsigned char DeleteAccess;
  /* 0x0029 */ unsigned char SharedRead;
  /* 0x002a */ unsigned char SharedWrite;
  /* 0x002b */ unsigned char SharedDelete;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ struct _UNICODE_STRING FileName;
  /* 0x0038 */ union _LARGE_INTEGER CurrentByteOffset;
  /* 0x0040 */ unsigned long Waiters;
  /* 0x0044 */ unsigned long Busy;
  /* 0x0048 */ void* LastLock;
  /* 0x004c */ struct _KEVENT Lock;
  /* 0x005c */ struct _KEVENT Event;
  /* 0x006c */ struct _IO_COMPLETION_CONTEXT* CompletionContext;
  /* 0x0070 */ unsigned long IrpListLock;
  /* 0x0074 */ struct _LIST_ENTRY IrpList;
  /* 0x007c */ void* FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT; /* size: 0x0080 */

typedef enum _NDIS_IF_REFTAG
{
  IFREF_REGISTER = 0,
  IFREF_GETII = 1,
  IFREF_TOPGETII = 2,
  IFREF_GETALL = 3,
  IFREF_TOPGETALL = 4,
  IFREF_SET = 5,
  IFREF_ENUMALL = 6,
  IFREF_TOPENUMALL = 7,
  IFREF_GETRCVADDR = 8,
  IFREF_GETALLRCVADDR = 9,
  IFREF_ASYNCCHANGE = 10,
  IFREF_CHALIAS = 11,
  IFREF_MINIPORT = 12,
  IFREF_SETDESCR = 13,
  IFREF_UPDATECHARS = 14,
  IFREF_UPDATE = 15,
  IFREF_TIMESTAMPING = 16,
  IFREF_NUMBER_OF_TAGS = 17,
} NDIS_IF_REFTAG, *PNDIS_IF_REFTAG;

enum PDCCLIENTID
{
  PDC_INVALID_CLIENT = 0,
  PDC_PLM_CLIENT = 1,
  PDC_NQM_CLIENT = 2,
  PDC_WNS_CLIENT = 3,
  PDC_DAM_CLIENT = 4,
  PDC_WCM_CLIENT = 5,
  PDC_NCSI_CLIENT = 7,
  PDC_DHCP_CLIENT = 8,
  PDC_TCPIP_CLIENT = 9,
  PDC_WU_CLIENT = 11,
  PDC_GP_CLIENT = 12,
  PDC_NCA_CLIENT = 14,
  PDC_BI_CLIENT = 15,
  PDC_MSCHED_CLIENT = 16,
  PDC_SUSPENDRESUME_CLIENT = 17,
  PDC_INTERNAL_CLIENT = 18,
  PDC_DEFAULT_KM_TEST_CLIENT_EXEMPTED = 19,
  PDC_DEFAULT_UM_TEST_CLIENT_EXEMPTED = 20,
  PDC_DAM_PHASE_TEST_CLIENT = 21,
  PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
  PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
  PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
  PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
  PDC_DAM_KM_TEST_CLIENT = 26,
  PDC_DAM_UM_TEST_CLIENT = 27,
  PDC_SINGLETON_TEST_CLIENT = 28,
  PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
  PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
  PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
  PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
  PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
  PDC_SHELL_CLIENT = 34,
  PDC_MAINTENANCE_CLIENT = 35,
  PDC_SYNC_CLIENT = 36,
  PDC_IDM_CLIENT = 37,
  PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
  PDC_TETHERING_CLIENT = 39,
  PDC_AUDIO_CLIENT = 40,
  PDC_LOCK_SCREEN = 41,
  PDC_LREC_CLIENT = 42,
  PDC_WP_BW_CLIENT = 43,
  PDC_WP_MEDIA_STREAMING_CLIENT = 44,
  PDC_WP_MAPS_CLIENT = 46,
  PDC_WP_SYNC_CLIENT = 47,
  PDC_SETTING_SYNC_CLIENT = 48,
  PDC_WP_EDM_CLIENT = 49,
  PDC_WP_WALLET_CLIENT = 50,
  PDC_WP_LOCATION_CLIENT = 51,
  PDC_WP_CM_CLIENT = 53,
  PDC_WP_DCP_CLIENT = 54,
  PDC_WP_WIFIAUTO_CLIENT = 55,
  PDC_BITLOCKER_CLIENT = 56,
  PDC_MDM_CERTINSTALLER_CLIENT = 57,
  PDC_WP_IM_CLIENT = 58,
  PDC_WP_MMS_CLIENT = 59,
  PDC_DEVICEENROLLER_CLIENT = 60,
  PDC_WP_WIFI_SCANNING_CLIENT = 61,
  PDC_WP_OMADM_CLIENT = 62,
  PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
  PDC_WP_DIS_CLIENT = 64,
  PDC_BITS_CLIENT = 65,
  PDC_WP_VOIP_EXECUTION_CLIENT = 66,
  PDC_WP_RESERVED_CLIENT3 = 67,
  PDC_SLEEP_STUDY_CLIENT = 68,
  PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
  PDC_HYPERV_CLIENT = 70,
  PDC_KM_SIGNAL_CLIENT = 71,
  PDC_UM_SIGNAL_CLIENT = 72,
  PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
  PDC_XB_SYSTEM_CLIENT = 74,
  PDC_XB_HOST_CLIENT = 75,
  PDC_PRINT_JOB_MANAGER_CLIENT = 76,
  PDC_TELEMETRY_CLIENT = 77,
  PDC_ERROR_REPORTING_CLIENT = 78,
  PDC_XBOX_NTM = 79,
  PDC_CBE_CLIENT = 80,
  PDC_FIND_MY_PHONE_CLIENT = 81,
  PDC_COMMAND_CHANNEL_CLIENT = 82,
  PDC_PPM_PROFILES_CLIENT = 83,
  PDC_WIFI_CALLING_CLIENT = 84,
  PDC_WU_REBOOT_CLIENT = 85,
  PDC_SYSMAIN_CLIENT = 86,
  PDC_XBOX_UPDATE_CLIENT = 87,
  PDC_CHAT_SERVICE_CLIENT = 88,
  PDC_FIND_MY_DEVICE_CLIENT = 89,
  PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
  PDC_INSTALL_AGENT_CLIENT = 91,
  PDC_XBOX_WAKE_ON_VOICE = 92,
  PDC_PLM_AUDIO_CLIENT = 93,
  PDC_WP_BCKAUDIO_CLIENT = 94,
  PDC_WAKE_ON_LAN_CLIENT = 95,
  PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
  PDC_DATA_MIGRATION_MANAGER = 97,
  PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
  PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
  PDC_HAM_CLIENT = 100,
  PDC_FILESHARINGSERVER_CLIENT = 101,
  PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
  PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
  PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
  PDC_HTTPSDATASOURCE_CLIENT = 105,
  PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
  PDC_TERMINALSERVER_SESSION_CLIENT = 107,
  PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
  PDC_XBOX_NUI_CLIENT = 110,
  PDC_WIFI_CALLING_IMS_CLIENT = 111,
  PDC_SLEEPSTUDY_HELPER_USER_CLIENT = 112,
  PDC_SLEEPSTUDY_HELPER_KERNEL_CLIENT = 113,
  PDC_CONTAINER_MANAGER_CLIENT = 114,
  PDC_NUMBER_OF_CLIENTS = 115,
};

struct DOT11_EXTSTA_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uScanSSIDListSize;
  /* 0x0008 */ unsigned long uDesiredBSSIDListSize;
  /* 0x000c */ unsigned long uDesiredSSIDListSize;
  /* 0x0010 */ unsigned long uExcludedMacAddressListSize;
  /* 0x0014 */ unsigned long uPrivacyExemptionListSize;
  /* 0x0018 */ unsigned long uKeyMappingTableSize;
  /* 0x001c */ unsigned long uDefaultKeyTableSize;
  /* 0x0020 */ unsigned long uWEPKeyValueMaxLength;
  /* 0x0024 */ unsigned long uPMKIDCacheSize;
  /* 0x0028 */ unsigned long uMaxNumPerSTADefaultKeyTables;
  /* 0x002c */ unsigned char bStrictlyOrderedServiceClassImplemented;
  /* 0x002d */ unsigned char ucSupportedQoSProtocolFlags;
  /* 0x002e */ unsigned char bSafeModeImplemented;
  /* 0x002f */ char Padding_53;
  /* 0x0030 */ unsigned long uNumSupportedCountryOrRegionStrings;
  /* 0x0034 */ unsigned char* pSupportedCountryOrRegionStrings[3];
  /* 0x0038 */ unsigned long uInfraNumSupportedUcastAlgoPairs;
  /* 0x003c */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
  /* 0x0040 */ unsigned long uInfraNumSupportedMcastAlgoPairs;
  /* 0x0044 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
  /* 0x0048 */ unsigned long uAdhocNumSupportedUcastAlgoPairs;
  /* 0x004c */ struct DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedUcastAlgoPairs;
  /* 0x0050 */ unsigned long uAdhocNumSupportedMcastAlgoPairs;
  /* 0x0054 */ struct DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedMcastAlgoPairs;
  /* 0x0058 */ unsigned char bAutoPowerSaveMode;
  /* 0x0059 */ char Padding_54[3];
  /* 0x005c */ unsigned long uMaxNetworkOffloadListSize;
  /* 0x0060 */ unsigned char bMFPCapable;
  /* 0x0061 */ char Padding_55[3];
  /* 0x0064 */ unsigned long uInfraNumSupportedMcastMgmtAlgoPairs;
  /* 0x0068 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastMgmtAlgoPairs;
  /* 0x006c */ unsigned char bNeighborReportSupported;
  /* 0x006d */ unsigned char bAPChannelReportSupported;
  /* 0x006e */ unsigned char bActionFramesSupported;
  /* 0x006f */ unsigned char bANQPQueryOffloadSupported;
  /* 0x0070 */ unsigned char bHESSIDConnectionSupported;
  /* 0x0071 */ char __PADDING__[3];
}; /* size: 0x0074 */

typedef enum _WWAN_SMS_CDMA_ENCODING
{
  WwanSmsCdmaEncodingOctet = 0,
  WwanSmsCdmaEncodingEpm = 1,
  WwanSmsCdmaEncoding7BitAscii = 2,
  WwanSmsCdmaEncodingIa5 = 3,
  WwanSmsCdmaEncodingUnicode = 4,
  WwanSmsCdmaEncodingShiftJis = 5,
  WwanSmsCdmaEncodingKorean = 6,
  WwanSmsCdmaEncodingLatinHebrew = 7,
  WwanSmsCdmaEncodingLatin = 8,
  WwanSmsCdmaEncodingGsm7Bit = 9,
  WwanSmsCdmaEncodingMax = 10,
} WWAN_SMS_CDMA_ENCODING, *PWWAN_SMS_CDMA_ENCODING;

typedef enum _WWAN_SMS_CDMA_LANG
{
  WwanSmsCdmaLangUnknown = 0,
  WwanSmsCdmaLangEnglish = 1,
  WwanSmsCdmaLangFrench = 2,
  WwanSmsCdmaLangSpanish = 3,
  WwanSmsCdmaLangJapanese = 4,
  WwanSmsCdmaLangKorean = 5,
  WwanSmsCdmaLangChinese = 6,
  WwanSmsCdmaLangHebrew = 7,
  WwanSmsCdmaLangMax = 8,
} WWAN_SMS_CDMA_LANG, *PWWAN_SMS_CDMA_LANG;

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0004 */ void* InformationBuffer;
  /* 0x0008 */ unsigned int InformationBufferLength;
  /* 0x000c */ unsigned int BytesWritten;
  /* 0x0010 */ unsigned int BytesNeeded;
} NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY, *PNDIS_OID_REQUEST::_REQUEST_DATA::_QUERY; /* size: 0x0014 */

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0004 */ void* InformationBuffer;
  /* 0x0008 */ unsigned int InformationBufferLength;
  /* 0x000c */ unsigned int BytesRead;
  /* 0x0010 */ unsigned int BytesNeeded;
} NDIS_OID_REQUEST::_REQUEST_DATA::_SET, *PNDIS_OID_REQUEST::_REQUEST_DATA::_SET; /* size: 0x0014 */

typedef struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD
{
  /* 0x0000 */ unsigned long Oid;
  /* 0x0004 */ void* InformationBuffer;
  /* 0x0008 */ unsigned long InputBufferLength;
  /* 0x000c */ unsigned long OutputBufferLength;
  /* 0x0010 */ unsigned long MethodId;
  /* 0x0014 */ unsigned int BytesWritten;
  /* 0x0018 */ unsigned int BytesRead;
  /* 0x001c */ unsigned int BytesNeeded;
} NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD, *PNDIS_OID_REQUEST::_REQUEST_DATA::_METHOD; /* size: 0x0020 */

typedef union _NDIS_OID_REQUEST::_REQUEST_DATA
{
  union
  {
    /* 0x0000 */ struct _NDIS_OID_REQUEST::_REQUEST_DATA::_QUERY QUERY_INFORMATION;
    /* 0x0000 */ struct _NDIS_OID_REQUEST::_REQUEST_DATA::_SET SET_INFORMATION;
    /* 0x0000 */ struct _NDIS_OID_REQUEST::_REQUEST_DATA::_METHOD METHOD_INFORMATION;
  }; /* size: 0x0020 */
} NDIS_OID_REQUEST::_REQUEST_DATA, *PNDIS_OID_REQUEST::_REQUEST_DATA; /* size: 0x0020 */

typedef struct _NDIS_OID_REQUEST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_REQUEST_TYPE RequestType;
  /* 0x0008 */ unsigned long PortNumber;
  /* 0x000c */ unsigned int Timeout;
  /* 0x0010 */ void* RequestId;
  /* 0x0014 */ void* RequestHandle;
  /* 0x0018 */ union _NDIS_OID_REQUEST::_REQUEST_DATA DATA;
  /* 0x0038 */ unsigned char NdisReserved[64];
  /* 0x0078 */ unsigned char MiniportReserved[8];
  /* 0x0080 */ unsigned char SourceReserved[8];
  /* 0x0088 */ unsigned char SupportedRevision;
  /* 0x0089 */ unsigned char Reserved1;
  /* 0x008a */ unsigned short Reserved2;
  /* 0x008c */ unsigned long SwitchId;
  /* 0x0090 */ unsigned long VPortId;
  /* 0x0094 */ unsigned long Flags;
} NDIS_OID_REQUEST, *PNDIS_OID_REQUEST; /* size: 0x0098 */

struct _ACTIVATION_CONTEXT;

typedef enum _NDK_RDMA_TECHNOLOGY
{
  NdkUndefined = 0,
  NdkiWarp = 1,
  NdkInfiniBand = 2,
  NdkRoCE = 3,
  NdkRoCEv2 = 4,
  NdkMaxTechnology = 5,
} NDK_RDMA_TECHNOLOGY, *PNDK_RDMA_TECHNOLOGY;

typedef struct _NDIS_REFCOUNT_STACK_ENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Stack : 26; /* bit position: 0 */
    /* 0x0000 */ unsigned long RefCount : 6; /* bit position: 26 */
  }; /* bitfield */
} NDIS_REFCOUNT_STACK_ENTRY, *PNDIS_REFCOUNT_STACK_ENTRY; /* size: 0x0004 */

typedef struct _NDIS_REFCOUNT_STACK_BLOCK
{
  /* 0x0000 */ struct _NDIS_REFCOUNT_STACK_BLOCK* Next;
  /* 0x0004 */ struct _NDIS_REFCOUNT_STACK_ENTRY References[6];
  /* 0x001c */ struct _NDIS_REFCOUNT_STACK_ENTRY Dereferences[6];
} NDIS_REFCOUNT_STACK_BLOCK, *PNDIS_REFCOUNT_STACK_BLOCK; /* size: 0x0034 */

typedef struct _NDIS_REFCOUNT_WITH_STACK
{
  /* 0x0000 */ struct _NDIS_REFCOUNT_STACK_BLOCK Block;
  struct /* bitfield */
  {
    /* 0x0034 */ unsigned long ReferenceAllocationFailed : 1; /* bit position: 0 */
    /* 0x0034 */ unsigned long TotalReferences : 15; /* bit position: 1 */
    /* 0x0034 */ unsigned long DereferenceAllocationFailed : 1; /* bit position: 16 */
    /* 0x0034 */ unsigned long TotalDereferences : 15; /* bit position: 17 */
  }; /* bitfield */
} NDIS_REFCOUNT_WITH_STACK, *PNDIS_REFCOUNT_WITH_STACK; /* size: 0x0038 */

struct KDefaultRegion
{
}; /* size: 0x0001 */

typedef enum _WWAN_PIN_MODE
{
  WwanPinModeNotSupported = 0,
  WwanPinModeEnabled = 1,
  WwanPinModeDisabled = 2,
  WwanPinModeMax = 3,
} WWAN_PIN_MODE, *PWWAN_PIN_MODE;

typedef struct _NDIS_PD_QUEUE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ const struct _NDIS_PD_QUEUE_DISPATCH* Dispatch;
  /* 0x000c */ void* PDPlatformReserved[2];
  /* 0x0014 */ void* PDClientReserved[2];
} NDIS_PD_QUEUE, *PNDIS_PD_QUEUE; /* size: 0x001c */

typedef enum _WWAN_PIN_FORMAT
{
  WwanPinFormatUnknown = 0,
  WwanPinFormatNumeric = 1,
  WwanPinFormatAlphaNumeric = 2,
  WwanPinFormatMax = 3,
} WWAN_PIN_FORMAT, *PWWAN_PIN_FORMAT;

typedef enum _HV_EXT_EPF_MODE
{
  HvExtEpfModeMin = 0,
  HvExtEpfModeNt = 0,
  HvExtEpfModeMax = 1,
} HV_EXT_EPF_MODE, *PHV_EXT_EPF_MODE;

typedef enum _MM_PAGE_PRIORITY
{
  LowPagePriority = 0,
  NormalPagePriority = 16,
  HighPagePriority = 32,
} MM_PAGE_PRIORITY, *PMM_PAGE_PRIORITY;

struct _TP_POOL;

typedef enum _WWAN_READY_STATE
{
  WwanReadyStateOff = 0,
  WwanReadyStateInitialized = 1,
  WwanReadyStateSimNotInserted = 2,
  WwanReadyStateBadSim = 3,
  WwanReadyStateFailure = 4,
  WwanReadyStateNotActivated = 5,
  WwanReadyStateDeviceLocked = 6,
  WwanReadyStateNoEsimProfile = 7,
  WwanReadyStateMax = 8,
} WWAN_READY_STATE, *PWWAN_READY_STATE;

typedef enum _WWAN_EMERGENCY_MODE
{
  WwanEmergencyModeOff = 0,
  WwanEmergencyModeOn = 1,
  WwanEmergencyModeMax = 2,
} WWAN_EMERGENCY_MODE, *PWWAN_EMERGENCY_MODE;

typedef struct _DRIVER_EXTENSION
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0004 */ void* AddDevice /* function */;
  /* 0x0008 */ unsigned long Count;
  /* 0x000c */ struct _UNICODE_STRING ServiceKeyName;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION; /* size: 0x0014 */

typedef enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE
{
  SystemFeatureConfigurationSectionTypeBoot = 0,
  SystemFeatureConfigurationSectionTypeRuntime = 1,
  SystemFeatureConfigurationSectionTypeUsageTriggers = 2,
  SystemFeatureConfigurationSectionTypeCount = 3,
} SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE, *PSYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _TP_POOL* Pool;
  /* 0x0008 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x000c */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0010 */ void* RaceDll;
  /* 0x0014 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0018 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x001c */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x001c */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x001c */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x001c */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0020 */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0024 */ unsigned long Size;
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0028 */

enum NDIS_PD_COUNTER_TYPE
{
  PDCounterTypeUnknown = 0,
  PDCounterTypeReceiveQueue = 1,
  PDCounterTypeTransmitQueue = 2,
  PDCounterTypeReceiveFilter = 3,
  PDCounterTypeMax = 4,
};

typedef enum _NDIS_MDRV_REFTAG
{
  MDRVREF_IMDEINIT = 0,
  MDRVREF_REMOVINGMP = 1,
  MDRVREF_MINIPORT = 2,
  MDRVREF_IOWORKITEM = 3,
  MDRVREF_IOWORKITEMC = 4,
  MDRVREF_NOTIFYMINI = 5,
  MDRVREF_MPREFH = 6,
  MDRVREF_MPREFN = 7,
  MDRVREF_MPREFT = 8,
  MDRVREF_CHECKPT = 9,
  MDRVREF_TIMEROBJDPC = 10,
  MDRVREF_TIMERDPCX = 11,
  MDRVREF_NUMBER_OF_TAGS = 12,
} NDIS_MDRV_REFTAG, *PNDIS_MDRV_REFTAG;

typedef struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2
{
  /* 0x0000 */ unsigned char ucSupportedTxDataRatesValue[255];
  /* 0x00ff */ unsigned char ucSupportedRxDataRatesValue[255];
} DOT11_SUPPORTED_DATA_RATES_VALUE_V2, *PDOT11_SUPPORTED_DATA_RATES_VALUE_V2; /* size: 0x01fe */

typedef enum _NDIS_NBL_TRACKER_MODE
{
  NdisTrackNblDisabled = 0,
  NdisTrackNblLogOnly = 1,
  NdisTrackNblRuntimeCheck = 2,
  NdisTrackNblFullLogNoStack = 3,
  NdisTrackNblFullLogWithStack = 4,
} NDIS_NBL_TRACKER_MODE, *PNDIS_NBL_TRACKER_MODE;

typedef enum _VRF_TRIAGE_CONTEXT
{
  VRF_TRIAGE_CONTEXT_NONE = 0,
  VRF_TRIAGE_CONTEXT_DEFAULT = 1,
  VRF_TRIAGE_CONTEXT_DEVELOPMENT = 1,
  VRF_TRIAGE_CONTEXT_CERTIFICATION = 2,
  VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 3,
  VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 4,
  VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 5,
  NUM_VRF_TRIAGE_CONTEXTS = 6,
} VRF_TRIAGE_CONTEXT, *PVRF_TRIAGE_CONTEXT;

typedef struct _WWAN_SMS_SEND_PDU
{
  /* 0x0000 */ unsigned char Size;
  /* 0x0001 */ char PduData[366];
} WWAN_SMS_SEND_PDU, *PWWAN_SMS_SEND_PDU; /* size: 0x016f */

typedef struct _WWAN_SMS_SEND_CDMA
{
  /* 0x0000 */ enum _WWAN_SMS_CDMA_ENCODING EncodingId;
  /* 0x0004 */ enum _WWAN_SMS_CDMA_LANG LanguageId;
  /* 0x0008 */ char Address[50];
  /* 0x003a */ unsigned short SizeInBytes;
  /* 0x003c */ unsigned char SizeInCharacters;
  /* 0x003d */ unsigned char EncodedMsg[160];
  /* 0x00dd */ char __PADDING__[3];
} WWAN_SMS_SEND_CDMA, *PWWAN_SMS_SEND_CDMA; /* size: 0x00e0 */

typedef struct _WWAN_SMS_SEND
{
  /* 0x0000 */ enum _WWAN_SMS_FORMAT SmsFormat;
  union
  {
    union
    {
      /* 0x0004 */ struct _WWAN_SMS_SEND_PDU Pdu;
      /* 0x0004 */ struct _WWAN_SMS_SEND_CDMA Cdma;
    }; /* size: 0x016f */
  } /* size: 0x0170 */ u;
} WWAN_SMS_SEND, *PWWAN_SMS_SEND; /* size: 0x0174 */

typedef struct _NDIS_WWAN_SMS_SEND
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SMS_SEND SmsSend;
} NDIS_WWAN_SMS_SEND, *PNDIS_WWAN_SMS_SEND; /* size: 0x0178 */

typedef enum _NDIS_RECEIVE_FILTER_TYPE
{
  NdisReceiveFilterTypeUndefined = 0,
  NdisReceiveFilterTypeVMQueue = 1,
  NdisReceiveFilterTypePacketCoalescing = 2,
  NdisReceiveFilterTypeMaximum = 3,
} NDIS_RECEIVE_FILTER_TYPE, *PNDIS_RECEIVE_FILTER_TYPE;

typedef enum _NDK_OBJECT_TYPE
{
  NdkObjectTypeUndefined = 0,
  NdkObjectTypeAdapter = 1,
  NdkObjectTypeQp = 2,
  NdkObjectTypeCq = 3,
  NdkObjectTypeMr = 4,
  NdkObjectTypeMw = 5,
  NdkObjectTypePd = 6,
  NdkObjectTypeSharedEndpoint = 7,
  NdkObjectTypeConnector = 8,
  NdkObjectTypeListener = 9,
  NdkObjectTypeSrq = 10,
  NdkObjectTypeMax = 11,
} NDK_OBJECT_TYPE, *PNDK_OBJECT_TYPE;

typedef struct _tlgWrapperBinary
{
  union
  {
    /* 0x0000 */ const unsigned int DataDescCount;
    /* 0x0000 */ const void* const Ptr;
  }; /* size: 0x0004 */
  /* 0x0004 */ const unsigned short Size;
  /* 0x0006 */ char __PADDING__[2];
} tlgWrapperBinary, *PtlgWrapperBinary; /* size: 0x0008 */

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 5,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

typedef struct __WIL__WNF_TYPE_ID
{
  /* 0x0000 */ struct _GUID TypeId;
} _WIL__WNF_TYPE_ID, *P_WIL__WNF_TYPE_ID; /* size: 0x0010 */

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION
{
  struct
  {
    /* 0x0000 */ unsigned char Enabled;
    /* 0x0001 */ char Padding_56[3];
    /* 0x0004 */ unsigned long EncapsulationType;
    /* 0x0008 */ unsigned long HeaderSize;
  } /* size: 0x000c */ V4;
  struct
  {
    /* 0x000c */ unsigned char Enabled;
    /* 0x0001 */ char Padding_57[3];
    /* 0x0010 */ unsigned long EncapsulationType;
    /* 0x0014 */ unsigned long HeaderSize;
  } /* size: 0x000c */ V6;
} NDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION, *PNDIS_TCP_CONNECTION_OFFLOAD_ENCAPSULATION; /* size: 0x0018 */

typedef enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE
{
  NdisPMProtocolOffloadIdUnspecified = 0,
  NdisPMProtocolOffloadIdIPv4ARP = 1,
  NdisPMProtocolOffloadIdIPv6NS = 2,
  NdisPMProtocolOffload80211RSNRekey = 3,
  NdisPMProtocolOffload80211RSNRekeyV2 = 4,
  NdisPMProtocolOffloadIdMaximum = 5,
} NDIS_PM_PROTOCOL_OFFLOAD_TYPE, *PNDIS_PM_PROTOCOL_OFFLOAD_TYPE;

typedef struct _NDIS_IF_PROVIDER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* QueryObjectHandler /* function */;
  /* 0x0008 */ void* SetObjectHandler /* function */;
  /* 0x000c */ void* Reserved1;
  /* 0x0010 */ void* Reserved2;
} NDIS_IF_PROVIDER_CHARACTERISTICS, *PNDIS_IF_PROVIDER_CHARACTERISTICS; /* size: 0x0014 */

enum PDC_ACTIVITY_TYPE
{
  PdcNetwork = 0,
  PdcSystem = 1,
  PdcTimer = 2,
  PdcAllNetworks = 3,
  PdcAnyNetwork = 4,
  PdcInvalidActivity = 5,
  PdcMaxActivity = 5,
};

struct NDK_VERSION
{
  /* 0x0000 */ unsigned short Major;
  /* 0x0002 */ unsigned short Minor;
}; /* size: 0x0004 */

typedef struct _NDK_OBJECT_HEADER_RESERVED_BLOCK
{
  /* 0x0000 */ void* rf[4];
} NDK_OBJECT_HEADER_RESERVED_BLOCK, *PNDK_OBJECT_HEADER_RESERVED_BLOCK; /* size: 0x0010 */

typedef struct _NDK_OBJECT_HEADER
{
  /* 0x0000 */ struct NDK_VERSION Version;
  /* 0x0004 */ enum _NDK_OBJECT_TYPE ObjectType;
  /* 0x0008 */ struct _NDK_OBJECT_HEADER_RESERVED_BLOCK NdkReserved;
} NDK_OBJECT_HEADER, *PNDK_OBJECT_HEADER; /* size: 0x0018 */

typedef struct _NDK_CONNECTOR
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_CONNECTOR_DISPATCH* Dispatch;
} NDK_CONNECTOR, *PNDK_CONNECTOR; /* size: 0x001c */

typedef enum _NDIS_QOS_SQ_TYPE
{
  NdisQosSqTypeUndefined = 0,
  NdisQosSqTypeStandard = 1,
  NdisQosSqTypeGFT = 2,
  NdisQosSqTypeMax = 3,
} NDIS_QOS_SQ_TYPE, *PNDIS_QOS_SQ_TYPE;

typedef struct _WAIT_CONTEXT_BLOCK
{
  union
  {
    /* 0x0000 */ struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY DmaWaitEntry;
      /* 0x0008 */ unsigned long NumberOfChannels;
      struct /* bitfield */
      {
        /* 0x000c */ unsigned long SyncCallback : 1; /* bit position: 0 */
        /* 0x000c */ unsigned long DmaContext : 1; /* bit position: 1 */
        /* 0x000c */ unsigned long ZeroMapRegisters : 1; /* bit position: 2 */
        /* 0x000c */ unsigned long Reserved : 9; /* bit position: 3 */
        /* 0x000c */ unsigned long NumberOfRemapPages : 20; /* bit position: 12 */
      }; /* bitfield */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0010 */ void* DeviceRoutine /* function */;
  /* 0x0014 */ void* DeviceContext;
  /* 0x0018 */ unsigned long NumberOfMapRegisters;
  /* 0x001c */ void* DeviceObject;
  /* 0x0020 */ void* CurrentIrp;
  /* 0x0024 */ struct _KDPC* BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK; /* size: 0x0028 */

typedef struct _KDEVICE_QUEUE
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _LIST_ENTRY DeviceListHead;
  /* 0x000c */ unsigned long Lock;
  /* 0x0010 */ unsigned char Busy;
  /* 0x0011 */ char __PADDING__[3];
} KDEVICE_QUEUE, *PKDEVICE_QUEUE; /* size: 0x0014 */

typedef struct _DEVICE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x000c */ struct _DEVICE_OBJECT* NextDevice;
  /* 0x0010 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0014 */ struct _IRP* CurrentIrp;
  /* 0x0018 */ struct _IO_TIMER* Timer;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ unsigned long Characteristics;
  /* 0x0024 */ struct _VPB* Vpb;
  /* 0x0028 */ void* DeviceExtension;
  /* 0x002c */ unsigned long DeviceType;
  /* 0x0030 */ char StackSize;
  /* 0x0031 */ char Padding_58[3];
  union
  {
    union
    {
      /* 0x0034 */ struct _LIST_ENTRY ListEntry;
      /* 0x0034 */ struct _WAIT_CONTEXT_BLOCK Wcb;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ Queue;
  /* 0x005c */ unsigned long AlignmentRequirement;
  /* 0x0060 */ struct _KDEVICE_QUEUE DeviceQueue;
  /* 0x0074 */ struct _KDPC Dpc;
  /* 0x0094 */ unsigned long ActiveThreadCount;
  /* 0x0098 */ void* SecurityDescriptor;
  /* 0x009c */ struct _KEVENT DeviceLock;
  /* 0x00ac */ unsigned short SectorSize;
  /* 0x00ae */ unsigned short Spare1;
  /* 0x00b0 */ struct _DEVOBJ_EXTENSION* DeviceObjectExtension;
  /* 0x00b4 */ void* Reserved;
} DEVICE_OBJECT, *PDEVICE_OBJECT; /* size: 0x00b8 */

typedef enum _NDIS_ARP_HEADER_FIELD
{
  NdisARPHeaderFieldUndefined = 0,
  NdisARPHeaderFieldOperation = 1,
  NdisARPHeaderFieldSPA = 2,
  NdisARPHeaderFieldTPA = 3,
  NdisARPHeaderFieldMaximum = 4,
} NDIS_ARP_HEADER_FIELD, *PNDIS_ARP_HEADER_FIELD;

typedef enum _NDIS_MP_REFTAG
{
  MPREF_AOAC_NA_ACQUIRE = 0,
  MPREF_AOAC_NA_RELEASE = 1,
  MPREF_AOAC_REFTIMER = 2,
  MPREF_AOAC_CLEANUP = 3,
  MPREF_AOAC_REFWAKE = 4,
  MPREF_AOAC_WAKE_ENABLE = 5,
  MPREF_AOAC_WAKE_DISABLE = 6,
  MPREF_CS_WNF_CALLBACK = 7,
  MPREF_API_RESET = 8,
  MPREF_API_REENUMERATE = 9,
  MPREF_PM_WAITWAKE = 10,
  MPREF_PM_D3D = 11,
  MPREF_PM_DEVPOWERUP = 12,
  MPREF_PM_POWERIRP = 13,
  MPREF_PM_OID = 14,
  MPREF_PM_REJECT = 15,
  MPREF_PM_UPDATECAPS = 16,
  MPREF_PM_D0COMPLETE = 17,
  MPREF_PM_PDCTASKCLIENT = 18,
  MPREF_PM_PDCTASKCLIENTDISABLE = 19,
  MPREF_SS_IDLETIMER = 20,
  MPREF_SS_IDLEREQ = 21,
  MPREF_PNP_IMDEINIT = 22,
  MPREF_PNP_INITMODE = 23,
  MPREF_PNP_INITIALIZED = 24,
  MPREF_PNP_CHECKBIND = 25,
  MPREF_PNP_PAUSING = 26,
  MPREF_PNP_RESTARTING = 27,
  MPREF_PNP_STOPPING = 28,
  MPREF_PNP_SURPRISE_REMOVAL = 29,
  MPREF_PNP_REMOVING = 30,
  MPREF_PNP_BASEINIT = 31,
  MPREF_PNP_BINDENUM = 32,
  MPREF_PNP_PROMOTE = 33,
  MPREF_PNP_REFRESH = 34,
  MPREF_LWF_RESTART = 35,
  MPREF_LWF_CHECKBIND = 36,
  MPREF_LWF_ENUMAPI = 37,
  MPREF_LWF_PNPNOTIFY = 38,
  MPREF_LWF_ATTACHING = 39,
  MPREF_LWF_ATTACHED = 40,
  MPREF_LWF_DETACHING = 41,
  MPREF_LWF_DETACHMON = 42,
  MPREF_LWF_ASYNCBIND = 43,
  MPREF_PT_OPENING = 44,
  MPREF_PT_OPENINGX = 45,
  MPREF_PT_OPENED = 46,
  MPREF_PT_BINDNOTIFY = 47,
  MPREF_PT_UNBINDNOTIFY = 48,
  MPREF_PT_UNBINDAPI = 49,
  MPREF_PT_FINISHCLOSE = 50,
  MPREF_PT_ASYNCCLOSE = 51,
  MPREF_PT_RECONFIG = 52,
  MPREF_PT_CHECKMDRV = 53,
  MPREF_PT_LEGACYREBIND = 54,
  MPREF_PT_NDPROXY_RULE = 55,
  MPREF_SI_BASE = 56,
  MPREF_SI_NSI = 57,
  MPREF_SI_CHANGEMACMTU = 58,
  MPREF_IF_STATS = 59,
  MPREF_IF_FINDTOP = 60,
  MPREF_IF_OID = 61,
  MPREF_IF_BASE = 62,
  MPREF_IF_STACKENTRY = 63,
  MPREF_IF_DELSTACK = 64,
  MPREF_RES_ASYNCSHM = 65,
  MPREF_RES_FREESHM = 66,
  MPREF_RES_ADDCPU = 67,
  MPREF_RES_IOV = 68,
  MPREF_RES_QUEUE = 69,
  MPREF_RES_RCVFILTER = 70,
  MPREF_OID_QUEUED = 71,
  MPREF_OID_QUEUEING = 72,
  MPREF_OID_QUEUEINGD = 73,
  MPREF_OID_TOPQUEUE = 74,
  MPREF_OID_COMPLETING = 75,
  MPREF_IO_PERIODICRCV = 76,
  MPREF_IO_QUEUEDDPC = 77,
  MPREF_IO_LEGACYDPC = 78,
  MPREF_CO_REGAF = 79,
  MPREF_CO_REGAFX = 80,
  MPREF_CO_OPENAF = 81,
  MPREF_MISC_PROCESS = 82,
  MPREF_MISC_CFH = 83,
  MPREF_MISC_WPPRUNDOWN = 84,
  MPREF_MISC_PKTMON = 85,
  MPREF_UM_HANDLE = 86,
  MPREF_UM_IOCTL = 87,
  MPREF_PCW_ENUM = 88,
  MPREF_PCW_COLLECT = 89,
  MPREF_PCW_REF = 90,
  MPREF_PCW_ENUMNDK = 91,
  MPREF_PCW_ADDING = 92,
  MPREF_PCW_ADDED = 93,
  MPREF_PCW_PCFOID = 94,
  MPREF_WMI_CHANGE = 95,
  MPREF_WMI_QUERYALL = 96,
  MPREF_WMI_QUERYONE = 97,
  MPREF_WMI_EXEC = 98,
  MPREF_API_IOWORKITEM = 99,
  MPREF_API_PORT = 100,
  MPREF_PD_PROVIDER = 101,
  MPREF_PD_MEM = 102,
  MPREF_CS_RESILIENCY_CALLBACK = 103,
  MPREF_NBL_TRACK_WATCHDOG = 104,
  MPREF_LWM_START = 105,
  MPREF_LWM_UNINITIALIZE = 106,
  MPREF_DEVICE_RESET = 107,
  MPREF_QUERY_DEVICE_RESET = 108,
  MPREF_WDF_DEFAULT = 109,
  MPREF_NUMBER_OF_TAGS = 110,
} NDIS_MP_REFTAG, *PNDIS_MP_REFTAG;

typedef struct _NDIS_NIC_SWITCH_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long NdisReserved1;
  /* 0x000c */ unsigned long NumTotalMacAddresses;
  /* 0x0010 */ unsigned long NumMacAddressesPerPort;
  /* 0x0014 */ unsigned long NumVlansPerPort;
  /* 0x0018 */ unsigned long NdisReserved2;
  /* 0x001c */ unsigned long NdisReserved3;
  /* 0x0020 */ unsigned long NicSwitchCapabilities;
  /* 0x0024 */ unsigned long MaxNumSwitches;
  /* 0x0028 */ unsigned long MaxNumVPorts;
  /* 0x002c */ unsigned long NdisReserved4;
  /* 0x0030 */ unsigned long MaxNumVFs;
  /* 0x0034 */ unsigned long MaxNumQueuePairs;
  /* 0x0038 */ unsigned long NdisReserved5;
  /* 0x003c */ unsigned long NdisReserved6;
  /* 0x0040 */ unsigned long NdisReserved7;
  /* 0x0044 */ unsigned long MaxNumQueuePairsPerNonDefaultVPort;
  /* 0x0048 */ unsigned long NdisReserved8;
  /* 0x004c */ unsigned long NdisReserved9;
  /* 0x0050 */ unsigned long NdisReserved10;
  /* 0x0054 */ unsigned long NdisReserved11;
  /* 0x0058 */ unsigned long NdisReserved12;
  /* 0x005c */ unsigned long MaxNumMacAddresses;
  /* 0x0060 */ unsigned long NdisReserved13;
  /* 0x0064 */ unsigned long NdisReserved14;
  /* 0x0068 */ unsigned long NdisReserved15;
  /* 0x006c */ unsigned long NdisReserved16;
  /* 0x0070 */ unsigned long NdisReserved17;
  /* 0x0074 */ unsigned long MaxNumRssCapableNonDefaultPFVPorts;
  /* 0x0078 */ unsigned long NumberOfIndirectionTableEntriesForDefaultVPort;
  /* 0x007c */ unsigned long NumberOfIndirectionTableEntriesPerNonDefaultPFVPort;
  /* 0x0080 */ unsigned long MaxNumQueuePairsForDefaultVPort;
} NDIS_NIC_SWITCH_CAPABILITIES, *PNDIS_NIC_SWITCH_CAPABILITIES; /* size: 0x0084 */

enum NdisIfBlockSource
{
  NdisIfBlockSourcePublicApi = 0,
  NdisIfBlockSourcePersistedNetSetup = 1,
  NdisIfBlockSourceAutomaticLwFilter = 2,
  NdisIfBlockSourceAutomaticLoopback = 3,
};

union wil_details_ReportedState
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int queuedForReporting : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int reportedDeviceUsage : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int reportedDevicePotential : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int reportedDeviceOpportunity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int reportedDevicePotentialOpportunity : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int usageCount : 9; /* bit position: 5 */
      /* 0x0000 */ unsigned int usageCountRepresentsPotential : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned int opportunityCount : 7; /* bit position: 15 */
      /* 0x0000 */ unsigned int opportunityCountRepresentsPotential : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned int unused : 9; /* bit position: 23 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

typedef enum _NDIS_NSI_INTERFACE_PURPOSE
{
  NDIS_NSI_INTERFACE_PURPOSE_DEFAULT = 0,
  NDIS_NSI_INTERFACE_PURPOSE_INTERNAL_VSWITCH_NIC = 1,
  NDIS_NSI_INTERFACE_PURPOSE_MAX = 2,
} NDIS_NSI_INTERFACE_PURPOSE, *PNDIS_NSI_INTERFACE_PURPOSE;

typedef enum _NDIS_LWF_REFTAG
{
  LWFREF_DETACHING = 0,
  LWFREF_WORKITEM = 1,
  LWFREF_PKTMON = 2,
  LWFREF_NUMBER_OF_TAGS = 3,
} NDIS_LWF_REFTAG, *PNDIS_LWF_REFTAG;

enum DMA_COMPLETION_STATUS
{
  DmaComplete = 0,
  DmaAborted = 1,
  DmaError = 2,
  DmaCancelled = 3,
};

typedef enum _NDIS_FPNP_REFTAG
{
  FPNPREF_FCANCELOID = 0,
  FPNPREF_PCANCELOID = 1,
  FPNPREF_PCANCELDOID = 2,
  FPNPREF_FCANCELDOID = 3,
  FPNPREF_DOCANCELDOID = 4,
  FPNPREF_DPNPNOTIFYF = 5,
  FPNPREF_DPNPNOTIFYM = 6,
  FPNPREF_DPNPNOTIFYT = 7,
  FPNPREF_FSTATUS = 8,
  FPNPREF_MSTATS = 9,
  FPNPREF_NPNPEVENT = 10,
  FPNPREF_IFTOP = 11,
  FPNPREF_OIDQUEUED = 12,
  FPNPREF_FSYNCOID = 13,
  FPNPREF_PSYNCOID = 14,
  FPNPREF_OIDPENDING = 15,
  FPNPREF_DOIDPENDING = 16,
  FPNPREF_OIDSEARCH = 17,
  FPNPREF_DOIDSEARCH = 18,
  FPNPREF_COMPLETEOID = 19,
  FPNPREF_DOIDCOMPLETE = 20,
  FPNPREF_PREDETACH = 21,
  FPNPREF_APIRESTART = 22,
  FPNPREF_SYNCHRONOUSOID = 23,
  FPNPREF_PKTMON = 24,
  FPNPREF_NUMBER_OF_TAGS = 25,
} NDIS_FPNP_REFTAG, *PNDIS_FPNP_REFTAG;

typedef enum _NDIS_CLASS_ID
{
  NdisClass802_3Priority = 0,
  NdisClassWirelessWanMbxMailbox = 1,
  NdisClassIrdaPacketInfo = 2,
  NdisClassAtmAALInfo = 3,
} NDIS_CLASS_ID, *PNDIS_CLASS_ID;

typedef enum _DOT11_DIVERSITY_SUPPORT
{
  dot11_diversity_support_unknown = 0,
  dot11_diversity_support_fixedlist = 1,
  dot11_diversity_support_notsupported = 2,
  dot11_diversity_support_dynamic = 3,
} DOT11_DIVERSITY_SUPPORT, *PDOT11_DIVERSITY_SUPPORT;

typedef struct _NDIS_NBL_TRACKER
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  struct /* bitfield */
  {
    /* 0x0008 */ enum _NDIS_NBL_TRACKER_SOURCE Source : 16; /* bit position: 0 */
    /* 0x0008 */ unsigned long Flags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x000c */ void* Context;
  /* 0x0010 */ const struct _UNICODE_STRING* Name;
  /* 0x0014 */ struct _NDIS_NBL_TRACKER_BUCKET Buckets[2];
} NDIS_NBL_TRACKER, *PNDIS_NBL_TRACKER; /* size: 0x0024 */

typedef enum _NDIS_GFT_PROFILE_TYPE
{
  NdisGftProfileTypeUndefined = 0,
  NdisGftProfileTypeExactMatch = 1,
  NdisGftProfileTypeHeaderTransposition = 2,
  NdisGftProfileTypeWildcardMatch = 3,
  NdisGftProfileTypeMax = 4,
} NDIS_GFT_PROFILE_TYPE, *PNDIS_GFT_PROFILE_TYPE;

enum Ndis::ReadBindingsOptions::Flags
{
  Default = 0,
  DoNotRemoveMissingBindings = 1,
};

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0004 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0008 */

typedef struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long HeadersPresent;
  /* 0x000c */ long Padding_59;
  /* 0x0010 */ unsigned __int64 MatchFields;
  /* 0x0018 */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourceIPv4AddressMatchType;
  /* 0x001c */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationIPv4AddressMatchType;
  /* 0x0020 */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourceIPv6AddressMatchType;
  /* 0x0024 */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationIPv6AddressMatchType;
  /* 0x0028 */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE SourcePortMatchType;
  /* 0x002c */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE DestinationPortMatchType;
  /* 0x0030 */ unsigned char TcpFlags;
  /* 0x0031 */ char __PADDING__[7];
} NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE, *PNDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE; /* size: 0x0038 */

enum NDIS_PD_CONTROL_TYPE
{
  NdisPDCTL_IN = 0,
  NdisPDCTL_OUT = 1,
  NdisPDCTL_INOUT = 2,
};

enum NDIS_PD_QUEUE_CONTROL_CODE
{
  NdisPDQCTLUnknown = 0,
  NdisPDQCTLQueueDepthThreshold = 1,
  NdisPDQCTLModerationInterval = 2,
  NdisPDQCTLModerationCount = 3,
  NdisPDQCTLNotificationGroupId = 4,
  NdisPDQCTLSchedulerQueueId = 5,
  NdisPDQCTLMax = 6,
};

struct wil_details_StagingConfigFeature
{
  /* 0x0000 */ unsigned int featureId;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int changedInSession : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned int isVariantConfig : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned int unused1 : 6; /* bit position: 2 */
    /* 0x0004 */ unsigned int serviceState : 2; /* bit position: 8 */
    /* 0x0004 */ unsigned int userState : 2; /* bit position: 10 */
    /* 0x0004 */ unsigned int testState : 2; /* bit position: 12 */
    /* 0x0004 */ unsigned int unused2 : 2; /* bit position: 14 */
    /* 0x0004 */ unsigned int unused3 : 8; /* bit position: 16 */
    /* 0x0004 */ unsigned int variant : 6; /* bit position: 24 */
    /* 0x0004 */ unsigned int payloadKind : 2; /* bit position: 30 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int payload;
}; /* size: 0x000c */

enum NDIS_PD_PROVIDER_CONTROL_CODE
{
  NdisPDPCTLUnknown = 0,
  NdisPDPCTLCapabilities = 1,
  NdisPDPCTLMax = 2,
};

typedef struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO
{
  /* 0x0000 */ unsigned long Identifier;
  /* 0x0004 */ unsigned long KeyLength;
  /* 0x0008 */ unsigned long KeyOffsetBytes;
  /* 0x000c */ unsigned long AdditionalInfo;
} IPSEC_OFFLOAD_V2_ALGORITHM_INFO, *PIPSEC_OFFLOAD_V2_ALGORITHM_INFO; /* size: 0x0010 */

typedef struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ enum _IPSEC_OFFLOAD_V2_OPERATION Operation;
  /* 0x0008 */ unsigned long Spi;
  /* 0x000c */ struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO AuthenticationAlgorithm;
  /* 0x001c */ struct _IPSEC_OFFLOAD_V2_ALGORITHM_INFO EncryptionAlgorithm;
  /* 0x002c */ unsigned long SequenceNumberHighOrder;
} IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION, *PIPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION; /* size: 0x0030 */

typedef enum _NDIS_TASK
{
  TcpIpChecksumNdisTask = 0,
  IpSecNdisTask = 1,
  TcpLargeSendNdisTask = 2,
  MaxNdisTask = 3,
} NDIS_TASK, *PNDIS_TASK;

typedef enum _NDIS_PM_WOL_PACKET
{
  NdisPMWoLPacketUnspecified = 0,
  NdisPMWoLPacketBitmapPattern = 1,
  NdisPMWoLPacketMagicPacket = 2,
  NdisPMWoLPacketIPv4TcpSyn = 3,
  NdisPMWoLPacketIPv6TcpSyn = 4,
  NdisPMWoLPacketEapolRequestIdMessage = 5,
  NdisPMWoLPacketMaximum = 6,
} NDIS_PM_WOL_PACKET, *PNDIS_PM_WOL_PACKET;

typedef struct _NET_BUFFER_LIST_POOL_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char ProtocolId;
  /* 0x0005 */ unsigned char fAllocateNetBuffer;
  /* 0x0006 */ unsigned short ContextSize;
  /* 0x0008 */ unsigned long PoolTag;
  /* 0x000c */ unsigned long DataSize;
} NET_BUFFER_LIST_POOL_PARAMETERS, *PNET_BUFFER_LIST_POOL_PARAMETERS; /* size: 0x0010 */

typedef enum _WWAN_ACTIVATION_COMMAND
{
  WwanActivationCommandDeactivate = 0,
  WwanActivationCommandActivate = 1,
  WwanActivationCommandCancel = 2,
  WwanActivationCommandMax = 3,
} WWAN_ACTIVATION_COMMAND, *PWWAN_ACTIVATION_COMMAND;

typedef enum _WWAN_IP_TYPE
{
  WwanIPTypeDefault = 0,
  WwanIPTypeIPv4 = 1,
  WwanIPTypeIPv6 = 2,
  WwanIPTypeIpv4v6 = 3,
  WwanIPTypeXlat = 4,
  WwanSessionTypeEthernet = 5,
  WwanSessionTypeUnstructured = 6,
  WwanSessionTypeMax = 7,
} WWAN_IP_TYPE, *PWWAN_IP_TYPE;

typedef enum _WWAN_PSMEDIA_PREFERENCE
{
  WwanPsMediaPreferenceNone = 0,
  WwanPsMediaPreferenceCellularOnly = 1,
  WwanPsMediaPreferenceCellularPreferred = 2,
  WwanPsMediaPreferenceWiFiOnly = 3,
  WwanPsMediaPreferenceWiFiPreferred = 4,
  WwanPsMediaPreferenceMax = 5,
} WWAN_PSMEDIA_PREFERENCE, *PWWAN_PSMEDIA_PREFERENCE;

typedef enum _WWAN_CONFIGURATION_SOURCE
{
  WwanUserProvisioned = 0,
  WwanAdminProvisioned = 1,
  WwanOperatorProvisioned = 2,
  WwanDeviceProvisioned = 3,
  WwanModemProvisioned = 4,
  WwanModemOperatorProvisioned = 5,
  WwanMaxProvisionSource = 6,
} WWAN_CONFIGURATION_SOURCE, *PWWAN_CONFIGURATION_SOURCE;

typedef struct _REFERENCE_EX
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ unsigned short ReferenceCount;
  /* 0x0006 */ unsigned char Closing;
  /* 0x0007 */ unsigned char ZeroBased;
  /* 0x0008 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
} REFERENCE_EX, *PREFERENCE_EX; /* size: 0x000c */

typedef struct _NDIS_FILTER_DRIVER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char MajorNdisVersion;
  /* 0x0005 */ unsigned char MinorNdisVersion;
  /* 0x0006 */ unsigned char MajorDriverVersion;
  /* 0x0007 */ unsigned char MinorDriverVersion;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _UNICODE_STRING FriendlyName;
  /* 0x0014 */ struct _UNICODE_STRING UniqueName;
  /* 0x001c */ struct _UNICODE_STRING ServiceName;
  /* 0x0024 */ void* SetOptionsHandler /* function */;
  /* 0x0028 */ void* SetFilterModuleOptionsHandler /* function */;
  /* 0x002c */ void* AttachHandler /* function */;
  /* 0x0030 */ void* DetachHandler /* function */;
  /* 0x0034 */ void* RestartHandler /* function */;
  /* 0x0038 */ void* PauseHandler /* function */;
  /* 0x003c */ void* SendNetBufferListsHandler /* function */;
  /* 0x0040 */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0044 */ void* CancelSendNetBufferListsHandler /* function */;
  /* 0x0048 */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x004c */ void* ReturnNetBufferListsHandler /* function */;
  /* 0x0050 */ void* OidRequestHandler /* function */;
  /* 0x0054 */ void* OidRequestCompleteHandler /* function */;
  /* 0x0058 */ void* CancelOidRequestHandler /* function */;
  /* 0x005c */ void* DevicePnPEventNotifyHandler /* function */;
  /* 0x0060 */ void* NetPnPEventHandler /* function */;
  /* 0x0064 */ void* StatusHandler /* function */;
  /* 0x0068 */ void* DirectOidRequestHandler /* function */;
  /* 0x006c */ void* DirectOidRequestCompleteHandler /* function */;
  /* 0x0070 */ void* CancelDirectOidRequestHandler /* function */;
  /* 0x0074 */ void* SynchronousOidRequestHandler /* function */;
  /* 0x0078 */ void* SynchronousOidRequestCompleteHandler /* function */;
} NDIS_FILTER_DRIVER_CHARACTERISTICS, *PNDIS_FILTER_DRIVER_CHARACTERISTICS; /* size: 0x007c */

typedef struct _NDIS_FILTER_DRIVER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_FILTER_DRIVER_BLOCK* NextFilterDriver;
  /* 0x0008 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x000c */ struct _NDIS_FILTER_BLOCK* FilterQueue;
  /* 0x0010 */ void* FilterDriverContext;
  /* 0x0014 */ unsigned long Lock;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _LIST_ENTRY DeviceList;
  /* 0x0024 */ struct _REFERENCE_EX Ref;
  /* 0x0030 */ struct _NDIS_FILTER_DRIVER_CHARACTERISTICS DefaultFilterCharacteristics;
  /* 0x00ac */ void* TcpOffloadReceiveReturnHandler /* function */;
  /* 0x00b0 */ class KRef<NDIS_BIND_FILTER_DRIVER> Bind;
  /* 0x00b4 */ struct _UNICODE_STRING ImageName;
} NDIS_FILTER_DRIVER_BLOCK, *PNDIS_FILTER_DRIVER_BLOCK; /* size: 0x00bc */

typedef enum _NDIS_802_11_NETWORK_TYPE
{
  Ndis802_11FH = 0,
  Ndis802_11DS = 1,
  Ndis802_11OFDM5 = 2,
  Ndis802_11OFDM24 = 3,
  Ndis802_11Automode = 4,
  Ndis802_11NetworkTypeMax = 5,
} NDIS_802_11_NETWORK_TYPE, *PNDIS_802_11_NETWORK_TYPE;

class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned int,2>,wil::details::kspin_lock_saved_irql,unsigned long *,0,std::nullptr_t> > >
{
}; /* size: 0x0008 */

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char IsLongPathAwareProcess : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ void* Mutant;
  /* 0x0008 */ void* ImageBaseAddress;
  /* 0x000c */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0010 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0014 */ void* SubSystemData;
  /* 0x0018 */ void* ProcessHeap;
  /* 0x001c */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0020 */ union _SLIST_HEADER* volatile AtlThunkSListPtr;
  /* 0x0024 */ void* IFEOKey;
  union
  {
    /* 0x0028 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0028 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0028 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0028 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0028 */ unsigned long ProcessPreviouslyThrottled : 1; /* bit position: 5 */
      /* 0x0028 */ unsigned long ProcessCurrentlyThrottled : 1; /* bit position: 6 */
      /* 0x0028 */ unsigned long ProcessImagesHotPatched : 1; /* bit position: 7 */
      /* 0x0028 */ unsigned long ReservedBits0 : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* KernelCallbackTable;
    /* 0x002c */ void* UserSharedInfoPtr;
  }; /* size: 0x0004 */
  /* 0x0030 */ unsigned long SystemReserved;
  /* 0x0034 */ union _SLIST_HEADER* volatile AtlThunkSListPtr32;
  /* 0x0038 */ void* ApiSetMap;
  /* 0x003c */ unsigned long TlsExpansionCounter;
  /* 0x0040 */ void* TlsBitmap;
  /* 0x0044 */ unsigned long TlsBitmapBits[2];
  /* 0x004c */ void* ReadOnlySharedMemoryBase;
  /* 0x0050 */ void* SharedData;
  /* 0x0054 */ void** ReadOnlyStaticServerData;
  /* 0x0058 */ void* AnsiCodePageData;
  /* 0x005c */ void* OemCodePageData;
  /* 0x0060 */ void* UnicodeCaseTableData;
  /* 0x0064 */ unsigned long NumberOfProcessors;
  /* 0x0068 */ unsigned long NtGlobalFlag;
  /* 0x006c */ long Padding_60;
  /* 0x0070 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0078 */ unsigned long HeapSegmentReserve;
  /* 0x007c */ unsigned long HeapSegmentCommit;
  /* 0x0080 */ unsigned long HeapDeCommitTotalFreeThreshold;
  /* 0x0084 */ unsigned long HeapDeCommitFreeBlockThreshold;
  /* 0x0088 */ unsigned long NumberOfHeaps;
  /* 0x008c */ unsigned long MaximumNumberOfHeaps;
  /* 0x0090 */ void** ProcessHeaps;
  /* 0x0094 */ void* GdiSharedHandleTable;
  /* 0x0098 */ void* ProcessStarterHelper;
  /* 0x009c */ unsigned long GdiDCAttributeList;
  /* 0x00a0 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x00a4 */ unsigned long OSMajorVersion;
  /* 0x00a8 */ unsigned long OSMinorVersion;
  /* 0x00ac */ unsigned short OSBuildNumber;
  /* 0x00ae */ unsigned short OSCSDVersion;
  /* 0x00b0 */ unsigned long OSPlatformId;
  /* 0x00b4 */ unsigned long ImageSubsystem;
  /* 0x00b8 */ unsigned long ImageSubsystemMajorVersion;
  /* 0x00bc */ unsigned long ImageSubsystemMinorVersion;
  /* 0x00c0 */ unsigned long ActiveProcessAffinityMask;
  /* 0x00c4 */ unsigned long GdiHandleBuffer[34];
  /* 0x014c */ void* PostProcessInitRoutine /* function */;
  /* 0x0150 */ void* TlsExpansionBitmap;
  /* 0x0154 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x01d4 */ unsigned long SessionId;
  /* 0x01d8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x01e0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x01e8 */ void* pShimData;
  /* 0x01ec */ void* AppCompatInfo;
  /* 0x01f0 */ struct _UNICODE_STRING CSDVersion;
  /* 0x01f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x01fc */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0200 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0204 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0208 */ unsigned long MinimumStackCommit;
  /* 0x020c */ void* SparePointers[4];
  /* 0x021c */ unsigned long SpareUlongs[5];
  /* 0x0230 */ void* WerRegistrationData;
  /* 0x0234 */ void* WerShipAssertPtr;
  /* 0x0238 */ void* pUnused;
  /* 0x023c */ void* pImageHeaderHash;
  union
  {
    /* 0x0240 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0240 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0240 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0240 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0240 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0244 */ long Padding_61;
  /* 0x0248 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
  /* 0x0250 */ unsigned long TppWorkerpListLock;
  /* 0x0254 */ struct _LIST_ENTRY TppWorkerpList;
  /* 0x025c */ void* WaitOnAddressHashTable[128];
  /* 0x045c */ void* TelemetryCoverageHeader;
  /* 0x0460 */ unsigned long CloudFileFlags;
  /* 0x0464 */ unsigned long CloudFileDiagFlags;
  /* 0x0468 */ char PlaceholderCompatibilityMode;
  /* 0x0469 */ char PlaceholderCompatibilityModeReserved[7];
  /* 0x0470 */ struct _LEAP_SECOND_DATA* LeapSecondData;
  union
  {
    /* 0x0474 */ unsigned long LeapSecondFlags;
    struct /* bitfield */
    {
      /* 0x0474 */ unsigned long SixtySecondEnabled : 1; /* bit position: 0 */
      /* 0x0474 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0478 */ unsigned long NtGlobalFlag2;
  /* 0x047c */ long __PADDING__[1];
} PEB, *PPEB; /* size: 0x0480 */

typedef enum _NDIS_802_11_NETWORK_INFRASTRUCTURE
{
  Ndis802_11IBSS = 0,
  Ndis802_11Infrastructure = 1,
  Ndis802_11AutoUnknown = 2,
  Ndis802_11InfrastructureMax = 3,
} NDIS_802_11_NETWORK_INFRASTRUCTURE, *PNDIS_802_11_NETWORK_INFRASTRUCTURE;

struct wil_details_RecordUsageResult
{
  /* 0x0000 */ int queueBackground;
  /* 0x0004 */ unsigned int countImmediate;
  /* 0x0008 */ enum wil_details_ServiceReportingKind kindImmediate;
  /* 0x000c */ unsigned int payloadId;
  /* 0x0010 */ int ignoredUse;
  /* 0x0014 */ int isVariantConfiguration;
}; /* size: 0x0018 */

typedef enum _DOT11_PHY_TYPE
{
  dot11_phy_type_unknown = 0,
  dot11_phy_type_any = 0,
  dot11_phy_type_fhss = 1,
  dot11_phy_type_dsss = 2,
  dot11_phy_type_irbaseband = 3,
  dot11_phy_type_ofdm = 4,
  dot11_phy_type_hrdsss = 5,
  dot11_phy_type_erp = 6,
  dot11_phy_type_ht = 7,
  dot11_phy_type_vht = 8,
  dot11_phy_type_dmg = 9,
  dot11_phy_type_he = 10,
  dot11_phy_type_IHV_start = -2147483648,
  dot11_phy_type_IHV_end = -1,
} DOT11_PHY_TYPE, *PDOT11_PHY_TYPE;

typedef enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
} DMA_WIDTH, *PDMA_WIDTH;

typedef struct _NDIS_PD_COUNTER_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ const wchar_t* CounterName;
  /* 0x000c */ enum NDIS_PD_COUNTER_TYPE Type;
} NDIS_PD_COUNTER_PARAMETERS, *PNDIS_PD_COUNTER_PARAMETERS; /* size: 0x0010 */

typedef enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
} DMA_SPEED, *PDMA_SPEED;

enum NDIS_PD_QUEUE_TYPE
{
  PDQueueTypeUnknown = 0,
  PDQueueTypeReceive = 1,
  PDQueueTypeTransmit = 2,
  PDQueueTypeMax = 3,
};

typedef struct _NDIS_802_11_AI_RESFI
{
  /* 0x0000 */ unsigned short Capabilities;
  /* 0x0002 */ unsigned short StatusCode;
  /* 0x0004 */ unsigned short AssociationId;
} NDIS_802_11_AI_RESFI, *PNDIS_802_11_AI_RESFI; /* size: 0x0006 */

typedef enum __vc_attributes::moduleAttribute::type_e
{
  dll = 1,
  exe = 2,
  service = 3,
  unspecified = 4,
  EXE = 2,
  SERVICE = 3,
} _vc_attributes::moduleAttribute::type_e, *P_vc_attributes::moduleAttribute::type_e;

class KCriticalRegion
{
  /* 0x0000 */ BOOL m_Entered;
}; /* size: 0x0001 */

typedef struct _NDIS_PORT_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PortNumber;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ enum _NDIS_PORT_TYPE Type;
  /* 0x0010 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0014 */ long Padding_62;
  /* 0x0018 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0020 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0028 */ enum _NET_IF_DIRECTION_TYPE Direction;
  /* 0x002c */ enum _NDIS_PORT_CONTROL_STATE SendControlState;
  /* 0x0030 */ enum _NDIS_PORT_CONTROL_STATE RcvControlState;
  /* 0x0034 */ enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
  /* 0x0038 */ enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
  /* 0x003c */ long __PADDING__[1];
} NDIS_PORT_CHARACTERISTICS, *PNDIS_PORT_CHARACTERISTICS; /* size: 0x0040 */

typedef struct _NDIS_PORT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ enum _NDIS_PORT_PNP_STATE PortPnPState;
  /* 0x000c */ enum _NDIS_PORT_PNP_STATE PrevPortPnPState;
  /* 0x0010 */ struct _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
} NDIS_PORT_BLOCK, *PNDIS_PORT_BLOCK; /* size: 0x0050 */

typedef enum __vc_attributes::aggregatableAttribute::type_e
{
  never = 0,
  allowed = 1,
  always = 2,
} _vc_attributes::aggregatableAttribute::type_e, *P_vc_attributes::aggregatableAttribute::type_e;

typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long TargetSystemState : 4; /* bit position: 8 */
      /* 0x0000 */ unsigned long EffectiveSystemState : 4; /* bit position: 12 */
      /* 0x0000 */ unsigned long CurrentSystemState : 4; /* bit position: 16 */
      /* 0x0000 */ unsigned long IgnoreHibernationPath : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long PseudoTransition : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long KernelSoftReboot : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned long DirectedDripsTransition : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned long Reserved2 : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long ContextAsUlong;
  }; /* size: 0x0004 */
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT; /* size: 0x0004 */

typedef struct _RECORDER_LOG_CREATE_PARAMS
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long LogTag;
  /* 0x0008 */ unsigned long TotalBufferSize;
  /* 0x000c */ unsigned long ErrorPartitionSize;
  /* 0x0010 */ unsigned long LogIdentifierAppendValue;
  /* 0x0014 */ unsigned char LogIdentifierAppendValueSet;
  /* 0x0015 */ char Padding_63[3];
  /* 0x0018 */ unsigned long LogIdentifierSize;
  /* 0x001c */ char LogIdentifier[16];
} RECORDER_LOG_CREATE_PARAMS, *PRECORDER_LOG_CREATE_PARAMS; /* size: 0x002c */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0005 */ char Padding_64[3];
  /* 0x0008 */ void* SsHandle;
  /* 0x000c */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0014 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x001c */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0024 */ void* EntryInProgress;
  /* 0x0028 */ unsigned char ShutdownInProgress;
  /* 0x0029 */ char Padding_65[3];
  /* 0x002c */ void* ShutdownThreadId;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0030 */

typedef enum __vc_attributes::threadingAttribute::threading_e
{
  apartment = 1,
  single = 2,
  free = 3,
  neutral = 4,
  both = 5,
} _vc_attributes::threadingAttribute::threading_e, *P_vc_attributes::threadingAttribute::threading_e;

typedef struct _NDIS_PACKET_EXTENSION
{
  /* 0x0000 */ void* NdisPacketInfo[12];
} NDIS_PACKET_EXTENSION, *PNDIS_PACKET_EXTENSION; /* size: 0x0030 */

typedef enum __vc_attributes::helper_attributes::usageAttribute::usage_e
{
  eAnyUsage = 0,
  eCoClassUsage = 1,
  eCOMInterfaceUsage = 2,
  eInterfaceUsage = 6,
  eMemberUsage = 8,
  eMethodUsage = 16,
  eInterfaceMethodUsage = 32,
  eInterfaceMemberUsage = 64,
  eCoClassMemberUsage = 128,
  eCoClassMethodUsage = 256,
  eGlobalMethodUsage = 768,
  eGlobalDataUsage = 1024,
  eClassUsage = 2048,
  eInterfaceParameterUsage = 4096,
  eMethodParameterUsage = 12288,
  eIDLModuleUsage = 16384,
  eAnonymousUsage = 0xffff8000,
  eTypedefUsage = 0x10000,
  eUnionUsage = 0x20000,
  eEnumUsage = 0x40000,
  eDefineTagUsage = 0x80000,
  eStructUsage = 0x100000,
  eLocalUsage = 0x200000,
  ePropertyUsage = 0x400000,
  eEventUsage = 0x800000,
  eTemplateUsage = 0x1000000,
  eModuleUsage = 0x1000000,
  eIllegalUsage = 0x2000000,
  eAsynchronousUsage = 0x4000000,
  eAnyIDLUsage = 0x3f7fff,
} _vc_attributes::helper_attributes::usageAttribute::usage_e, *P_vc_attributes::helper_attributes::usageAttribute::usage_e;

typedef enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e
{
  eBoolean = 0,
  eInteger = 1,
  eFloat = 2,
  eDouble = 3,
} _vc_attributes::helper_attributes::v1_alttypeAttribute::type_e, *P_vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;

typedef enum __vc_attributes::event_sourceAttribute::optimize_e
{
  speed = 0,
  size = 1,
} _vc_attributes::event_sourceAttribute::optimize_e, *P_vc_attributes::event_sourceAttribute::optimize_e;

typedef enum _NDIS_PROCESSOR_TYPE
{
  NdisProcessorX86 = 0,
  NdisProcessorMips = 1,
  NdisProcessorAlpha = 2,
  NdisProcessorPpc = 3,
  NdisProcessorAmd64 = 4,
  NdisProcessorIA64 = 5,
  NdisProcessorArm = 6,
  NdisProcessorArm64 = 7,
} NDIS_PROCESSOR_TYPE, *PNDIS_PROCESSOR_TYPE;

typedef enum _NDIS_RECEIVE_FILTER_TEST
{
  NdisReceiveFilterTestUndefined = 0,
  NdisReceiveFilterTestEqual = 1,
  NdisReceiveFilterTestMaskEqual = 2,
  NdisReceiveFilterTestNotEqual = 3,
  NdisReceiveFilterTestMaximum = 4,
} NDIS_RECEIVE_FILTER_TEST, *PNDIS_RECEIVE_FILTER_TEST;

typedef enum _NET_DEVICE_POWER_STATE
{
  NetDeviceStateUnspecified = 0,
  NetDeviceStateD0 = 1,
  NetDeviceStateD1 = 2,
  NetDeviceStateD2 = 3,
  NetDeviceStateD3 = 4,
  NetDeviceStateMaximum = 5,
} NET_DEVICE_POWER_STATE, *PNET_DEVICE_POWER_STATE;

typedef struct _NDIS_GFT_TABLE_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ enum _NDIS_GFP_TABLE_TYPE TableType;
  /* 0x0010 */ unsigned long NextTableId;
  /* 0x0014 */ unsigned long NumFlowEntries;
} NDIS_GFT_TABLE_INFO, *PNDIS_GFT_TABLE_INFO; /* size: 0x0018 */

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileIdExtdBothDirectoryInformation = 63,
  FileDispositionInformationEx = 64,
  FileRenameInformationEx = 65,
  FileRenameInformationExBypassAccessCheck = 66,
  FileDesiredStorageClassInformation = 67,
  FileStatInformation = 68,
  FileMemoryPartitionInformation = 69,
  FileStatLxInformation = 70,
  FileCaseSensitiveInformation = 71,
  FileLinkInformationEx = 72,
  FileLinkInformationExBypassAccessCheck = 73,
  FileStorageReserveIdInformation = 74,
  FileCaseSensitiveInformationForceAccessCheck = 75,
  FileMaximumInformation = 76,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

enum BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
  DeviceUsageTypeGuestAssigned = 6,
} DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
  PowerActionDisplayOff = 8,
};

typedef enum _WWAN_CELLULAR_CLASS
{
  WwanCellularClassUnknown = 0,
  WwanCellularClassGsm = 1,
  WwanCellularClassCdma = 2,
  WwanCellularClassMax = 3,
} WWAN_CELLULAR_CLASS, *PWWAN_CELLULAR_CLASS;

typedef enum _WWAN_SIM_CLASS
{
  WwanSimClassUnknown = 0,
  WwanSimClassSimLogical = 1,
  WwanSimClassSimRemovable = 2,
  WwanSimClassSimRemote = 3,
  WwanSimClassMax = 4,
} WWAN_SIM_CLASS, *PWWAN_SIM_CLASS;

typedef enum _DOT11_TEMP_TYPE
{
  dot11_temp_type_unknown = 0,
  dot11_temp_type_1 = 1,
  dot11_temp_type_2 = 2,
} DOT11_TEMP_TYPE, *PDOT11_TEMP_TYPE;

typedef struct _NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO
{
  union
  {
    /* 0x0000 */ void* MediaSpecificInfo;
    /* 0x0000 */ void* NativeWifiSpecificInfo;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0004 */
} NDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO, *PNDIS_NET_BUFFER_LIST_MEDIA_SPECIFIC_INFO; /* size: 0x0004 */

typedef enum _NDIS_MAC_HEADER_FIELD
{
  NdisMacHeaderFieldUndefined = 0,
  NdisMacHeaderFieldDestinationAddress = 1,
  NdisMacHeaderFieldSourceAddress = 2,
  NdisMacHeaderFieldProtocol = 3,
  NdisMacHeaderFieldVlanId = 4,
  NdisMacHeaderFieldPriority = 5,
  NdisMacHeaderFieldPacketType = 6,
  NdisMacHeaderFieldMaximum = 7,
} NDIS_MAC_HEADER_FIELD, *PNDIS_MAC_HEADER_FIELD;

typedef enum _NDIS_IPV4_HEADER_FIELD
{
  NdisIPv4HeaderFieldUndefined = 0,
  NdisIPv4HeaderFieldProtocol = 1,
  NdisIPv4HeaderFieldMaximum = 2,
} NDIS_IPV4_HEADER_FIELD, *PNDIS_IPV4_HEADER_FIELD;

typedef enum _NDIS_UDP_HEADER_FIELD
{
  NdisUdpHeaderFieldUndefined = 0,
  NdisUdpHeaderFieldDestinationPort = 1,
  NdisUdpHeaderFieldMaximum = 2,
} NDIS_UDP_HEADER_FIELD, *PNDIS_UDP_HEADER_FIELD;

typedef enum _NDK_OPERATION_TYPE
{
  NdkOperationTypeReceive = 1,
  NdkOperationTypeReceiveAndInvalidate = 0xffff8001,
  NdkOperationTypeSend = 2,
  NdkOperationTypeFastRegister = 4,
  NdkOperationTypeBind = 8,
  NdkOperationTypeInvalidate = 16,
  NdkOperationTypeRead = 32,
  NdkOperationTypeWrite = 64,
} NDK_OPERATION_TYPE, *PNDK_OPERATION_TYPE;

typedef enum _NDIS_NIC_SWITCH_VPORT_STATE
{
  NdisNicSwitchVPortStateUndefined = 0,
  NdisNicSwitchVPortStateActivated = 1,
  NdisNicSwitchVPortStateDeactivated = 2,
  NdisNicSwitchVPortStateMaximum = 3,
} NDIS_NIC_SWITCH_VPORT_STATE, *PNDIS_NIC_SWITCH_VPORT_STATE;

class wil::details::unique_storage<wil::details::resource_policy<void *,long (__stdcall*)(void *),&ZwClose,wistd::integral_constant<unsigned int,0>,void *,void *,0,std::nullptr_t> >
{
  /* 0x0000 */ void* m_ptr;
}; /* size: 0x0004 */

struct _RTL_CRITICAL_SECTION;

struct NDIS_NBL_TRACKER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct PAGED_OBJECT<1148473410>
{
}; /* size: 0x0001 */

typedef struct _PS_MITIGATION_OPTIONS_MAP
{
  /* 0x0000 */ unsigned __int64 Map[2];
} PS_MITIGATION_OPTIONS_MAP, *PPS_MITIGATION_OPTIONS_MAP; /* size: 0x0010 */

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
  /* 0x0000 */ unsigned __int64 Map[2];
} PS_MITIGATION_AUDIT_OPTIONS_MAP, *PPS_MITIGATION_AUDIT_OPTIONS_MAP; /* size: 0x0010 */

typedef struct _OWNER_ENTRY
{
  /* 0x0000 */ unsigned long OwnerThread;
  union
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long IoPriorityBoosted : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long OwnerReferenced : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long IoQoSPriorityBoosted : 1; /* bit position: 2 */
      /* 0x0004 */ unsigned long OwnerCount : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0004 */ unsigned long TableSize;
  }; /* size: 0x0004 */
} OWNER_ENTRY, *POWNER_ENTRY; /* size: 0x0008 */

typedef struct _ERESOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY SystemResourcesList;
  /* 0x0008 */ struct _OWNER_ENTRY* OwnerTable;
  /* 0x000c */ short ActiveCount;
  union
  {
    /* 0x000e */ unsigned short Flag;
    struct
    {
      /* 0x000e */ unsigned char ReservedLowFlags;
      /* 0x000f */ unsigned char WaiterPriority;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0010 */ void* SharedWaiters;
  /* 0x0014 */ void* ExclusiveWaiters;
  /* 0x0018 */ struct _OWNER_ENTRY OwnerEntry;
  /* 0x0020 */ unsigned long ActiveEntries;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long NumberOfSharedWaiters;
  /* 0x002c */ unsigned long NumberOfExclusiveWaiters;
  union
  {
    /* 0x0030 */ void* Address;
    /* 0x0030 */ unsigned long CreatorBackTraceIndex;
  }; /* size: 0x0004 */
  /* 0x0034 */ unsigned long SpinLock;
} ERESOURCE, *PERESOURCE; /* size: 0x0038 */

struct KALLOCATION_TAG<1396859982,1>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME; /* size: 0x0008 */

typedef struct _KAPC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char SpareByte0;
  /* 0x0002 */ unsigned char Size;
  /* 0x0003 */ unsigned char SpareByte1;
  /* 0x0004 */ unsigned long SpareLong0;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x000c */ struct _LIST_ENTRY ApcListEntry;
  union
  {
    struct
    {
      /* 0x0014 */ void* KernelRoutine /* function */;
      /* 0x0018 */ void* RundownRoutine /* function */;
      /* 0x001c */ void* NormalRoutine /* function */;
    }; /* size: 0x000c */
    /* 0x0014 */ void* Reserved[3];
  }; /* size: 0x000c */
  /* 0x0020 */ void* NormalContext;
  /* 0x0024 */ void* SystemArgument1;
  /* 0x0028 */ void* SystemArgument2;
  /* 0x002c */ char ApcStateIndex;
  /* 0x002d */ char ApcMode;
  /* 0x002e */ unsigned char Inserted;
  /* 0x002f */ char __PADDING__[1];
} KAPC, *PKAPC; /* size: 0x0030 */

struct _TP_CLEANUP_GROUP;

struct _TP_CALLBACK_INSTANCE;

typedef union _POWER_STATE
{
  union
  {
    /* 0x0000 */ enum _SYSTEM_POWER_STATE SystemState;
    /* 0x0000 */ enum _DEVICE_POWER_STATE DeviceState;
  }; /* size: 0x0004 */
} POWER_STATE, *PPOWER_STATE; /* size: 0x0004 */

typedef struct _IO_STACK_LOCATION
{
  /* 0x0000 */ unsigned char MajorFunction;
  /* 0x0001 */ unsigned char MinorFunction;
  /* 0x0002 */ unsigned char Flags;
  /* 0x0003 */ unsigned char Control;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short FileAttributes;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ unsigned long EaLength;
      } /* size: 0x0010 */ Create;
      struct
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short Reserved;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0010 */ CreatePipe;
      struct
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short Reserved;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ struct _MAILSLOT_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0010 */ CreateMailslot;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ Read;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ Write;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ struct _UNICODE_STRING* FileName;
        /* 0x000c */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0010 */ unsigned long FileIndex;
      } /* size: 0x0010 */ QueryDirectory;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long CompletionFilter;
      } /* size: 0x0008 */ NotifyDirectory;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long CompletionFilter;
        /* 0x000c */ enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
      } /* size: 0x000c */ NotifyDirectoryEx;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
      } /* size: 0x0008 */ QueryFile;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x000c */ struct _FILE_OBJECT* FileObject;
        union
        {
          struct
          {
            /* 0x0010 */ unsigned char ReplaceIfExists;
            /* 0x0011 */ unsigned char AdvanceOnly;
          }; /* size: 0x0002 */
          /* 0x0010 */ unsigned long ClusterCount;
          /* 0x0010 */ void* DeleteHandle;
        }; /* size: 0x0004 */
      } /* size: 0x0010 */ SetFile;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FSINFOCLASS FsInformationClass;
      } /* size: 0x0008 */ QueryVolume;
      struct
      {
        /* 0x0004 */ unsigned long OutputBufferLength;
        /* 0x0008 */ unsigned long InputBufferLength;
        /* 0x000c */ unsigned long FsControlCode;
        /* 0x0010 */ void* Type3InputBuffer;
      } /* size: 0x0010 */ FileSystemControl;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER* Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ LockControl;
      struct
      {
        /* 0x0004 */ unsigned long OutputBufferLength;
        /* 0x0008 */ unsigned long InputBufferLength;
        /* 0x000c */ unsigned long IoControlCode;
        /* 0x0010 */ void* Type3InputBuffer;
      } /* size: 0x0010 */ DeviceIoControl;
      struct
      {
        /* 0x0004 */ unsigned long SecurityInformation;
        /* 0x0008 */ unsigned long Length;
      } /* size: 0x0008 */ QuerySecurity;
      struct
      {
        /* 0x0004 */ unsigned long SecurityInformation;
        /* 0x0008 */ void* SecurityDescriptor;
      } /* size: 0x0008 */ SetSecurity;
      struct
      {
        /* 0x0004 */ struct _VPB* Vpb;
        /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0008 */ MountVolume;
      struct
      {
        /* 0x0004 */ struct _VPB* Vpb;
        /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0008 */ VerifyVolume;
      struct
      {
        /* 0x0004 */ struct _SCSI_REQUEST_BLOCK* Srb;
      } /* size: 0x0004 */ Scsi;
      struct
      {
        /* 0x0004 */ enum _DEVICE_RELATION_TYPE Type;
      } /* size: 0x0004 */ QueryDeviceRelations;
      struct
      {
        /* 0x0004 */ const struct _GUID* InterfaceType;
        /* 0x0008 */ unsigned short Size;
        /* 0x000a */ unsigned short Version;
        /* 0x000c */ struct _INTERFACE* Interface;
        /* 0x0010 */ void* InterfaceSpecificData;
      } /* size: 0x0010 */ QueryInterface;
      struct
      {
        /* 0x0004 */ struct _DEVICE_CAPABILITIES* Capabilities;
      } /* size: 0x0004 */ DeviceCapabilities;
      struct
      {
        /* 0x0004 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;
      } /* size: 0x0004 */ FilterResourceRequirements;
      struct
      {
        /* 0x0004 */ unsigned long WhichSpace;
        /* 0x0008 */ void* Buffer;
        /* 0x000c */ unsigned long Offset;
        /* 0x0010 */ unsigned long Length;
      } /* size: 0x0010 */ ReadWriteConfig;
      struct
      {
        /* 0x0004 */ unsigned char Lock;
      } /* size: 0x0001 */ SetLock;
      struct
      {
        /* 0x0004 */ enum BUS_QUERY_ID_TYPE IdType;
      } /* size: 0x0004 */ QueryId;
      struct
      {
        /* 0x0004 */ enum DEVICE_TEXT_TYPE DeviceTextType;
        /* 0x0008 */ unsigned long LocaleId;
      } /* size: 0x0008 */ QueryDeviceText;
      struct
      {
        /* 0x0004 */ unsigned char InPath;
        /* 0x0005 */ unsigned char Reserved[3];
        /* 0x0008 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
      } /* size: 0x0008 */ UsageNotification;
      struct
      {
        /* 0x0004 */ enum _SYSTEM_POWER_STATE PowerState;
      } /* size: 0x0004 */ WaitWake;
      struct
      {
        /* 0x0004 */ struct _POWER_SEQUENCE* PowerSequence;
      } /* size: 0x0004 */ PowerSequence;
      struct
      {
        union
        {
          /* 0x0004 */ unsigned long SystemContext;
          /* 0x0004 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
        }; /* size: 0x0004 */
        /* 0x0008 */ enum _POWER_STATE_TYPE Type;
        /* 0x000c */ union _POWER_STATE State;
        /* 0x0010 */ enum POWER_ACTION ShutdownType;
      } /* size: 0x0010 */ Power;
      struct
      {
        /* 0x0004 */ struct _CM_RESOURCE_LIST* AllocatedResources;
        /* 0x0008 */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
      } /* size: 0x0008 */ StartDevice;
      struct
      {
        /* 0x0004 */ unsigned long ProviderId;
        /* 0x0008 */ void* DataPath;
        /* 0x000c */ unsigned long BufferSize;
        /* 0x0010 */ void* Buffer;
      } /* size: 0x0010 */ WMI;
      struct
      {
        /* 0x0004 */ void* Argument1;
        /* 0x0008 */ void* Argument2;
        /* 0x000c */ void* Argument3;
        /* 0x0010 */ void* Argument4;
      } /* size: 0x0010 */ Others;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Parameters;
  /* 0x0014 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ struct _FILE_OBJECT* FileObject;
  /* 0x001c */ void* CompletionRoutine /* function */;
  /* 0x0020 */ void* Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION; /* size: 0x0024 */

typedef struct _COMPRESSED_DATA_INFO
{
  /* 0x0000 */ unsigned short CompressionFormatAndEngine;
  /* 0x0002 */ unsigned char CompressionUnitShift;
  /* 0x0003 */ unsigned char ChunkShift;
  /* 0x0004 */ unsigned char ClusterShift;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ unsigned short NumberOfChunks;
  /* 0x0008 */ unsigned long CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO; /* size: 0x000c */

struct SCOPE_ID
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Zone : 28; /* bit position: 0 */
      /* 0x0000 */ unsigned long Level : 4; /* bit position: 28 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

typedef struct _IPV6_FRAGMENT_HEADER
{
  /* 0x0000 */ unsigned char NextHeader;
  /* 0x0001 */ unsigned char Reserved;
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned short DontUse1 : 8; /* bit position: 0 */
      /* 0x0002 */ unsigned short MoreFragments : 1; /* bit position: 8 */
      /* 0x0002 */ unsigned short ReservedBits : 2; /* bit position: 9 */
      /* 0x0002 */ unsigned short DontUse2 : 5; /* bit position: 11 */
    }; /* bitfield */
    /* 0x0002 */ unsigned short OffsetAndFlags;
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned int Id;
} IPV6_FRAGMENT_HEADER, *PIPV6_FRAGMENT_HEADER; /* size: 0x0008 */

typedef struct _NDIS_CO_VC_PTR_BLOCK
{
  /* 0x0000 */ long References;
  /* 0x0004 */ unsigned long CallFlags;
  /* 0x0008 */ unsigned long* pVcFlags;
  /* 0x000c */ unsigned long Lock;
  /* 0x0010 */ void* ClientContext;
  /* 0x0014 */ struct _LIST_ENTRY ClientLink;
  /* 0x001c */ struct _LIST_ENTRY VcLink;
  /* 0x0024 */ struct _NDIS_CO_AF_BLOCK* AfBlock;
  /* 0x0028 */ struct _NDIS_CO_VC_BLOCK* VcBlock;
  /* 0x002c */ struct _NDIS_OPEN_BLOCK* ClientOpen;
  /* 0x0030 */ long OwnsVcBlock;
  /* 0x0034 */ void* CoDeleteVcHandler /* function */;
  /* 0x0038 */ void* DeleteVcContext;
  /* 0x003c */ void* ClModifyCallQoSCompleteHandler /* function */;
  /* 0x0040 */ void* ClIncomingCallQoSChangeHandler /* function */;
  /* 0x0044 */ void* ClCallConnectedHandler /* function */;
  /* 0x0048 */ struct _NDIS_OPEN_BLOCK* CallMgrOpen;
  /* 0x004c */ void* CallMgrContext;
  /* 0x0050 */ struct _LIST_ENTRY CallMgrLink;
  /* 0x0058 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x005c */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x0060 */ void* CmModifyCallQoSHandler /* function */;
  /* 0x0064 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0068 */ void* MiniportContext;
  /* 0x006c */ void* WCoSendPacketsHandler /* function */;
  /* 0x0070 */ void* WCoDeleteVcHandler /* function */;
  /* 0x0074 */ void* WCoActivateVcHandler /* function */;
  /* 0x0078 */ void* WCoDeactivateVcHandler /* function */;
  /* 0x007c */ void* WCoSendNetBufferListsHandler /* function */;
  /* 0x0080 */ void* CoSendNetBufferListsHandler /* function */;
  /* 0x0084 */ void* CoSendNetBufferListsCompleteHandler /* function */;
  /* 0x0088 */ void* CoSendPacketHandler /* function */;
  /* 0x008c */ void* CoSendPacketCompleteHandler /* function */;
  /* 0x0090 */ void* CoIndicateReceivePacketHandler /* function */;
  /* 0x0094 */ void* CoIndicateReceiveNetBufferListsHandler /* function */;
  /* 0x0098 */ struct _UNICODE_STRING VcInstanceName;
  /* 0x00a0 */ union _LARGE_INTEGER VcIndex;
  /* 0x00a8 */ struct _LIST_ENTRY WmiLink;
  /* 0x00b0 */ unsigned char CallMiniportDeleteVc;
  /* 0x00b1 */ char __PADDING__[7];
} NDIS_CO_VC_PTR_BLOCK, *PNDIS_CO_VC_PTR_BLOCK; /* size: 0x00b8 */

struct in_addr
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ unsigned char s_b1;
        /* 0x0001 */ unsigned char s_b2;
        /* 0x0002 */ unsigned char s_b3;
        /* 0x0003 */ unsigned char s_b4;
      } /* size: 0x0004 */ S_un_b;
      struct
      {
        /* 0x0000 */ unsigned short s_w1;
        /* 0x0002 */ unsigned short s_w2;
      } /* size: 0x0004 */ S_un_w;
      /* 0x0000 */ unsigned long S_addr;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ S_un;
}; /* size: 0x0004 */

typedef struct _IPV4_HEADER
{
  union
  {
    /* 0x0000 */ unsigned char VersionAndHeaderLength;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char HeaderLength : 4; /* bit position: 0 */
      /* 0x0000 */ unsigned char Version : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  union
  {
    /* 0x0001 */ unsigned char TypeOfServiceAndEcnField;
    struct /* bitfield */
    {
      /* 0x0001 */ unsigned char EcnField : 2; /* bit position: 0 */
      /* 0x0001 */ unsigned char TypeOfService : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0002 */ unsigned short TotalLength;
  /* 0x0004 */ unsigned short Identification;
  union
  {
    /* 0x0006 */ unsigned short FlagsAndOffset;
    struct /* bitfield */
    {
      /* 0x0006 */ unsigned short DontUse1 : 5; /* bit position: 0 */
      /* 0x0006 */ unsigned short MoreFragments : 1; /* bit position: 5 */
      /* 0x0006 */ unsigned short DontFragment : 1; /* bit position: 6 */
      /* 0x0006 */ unsigned short Reserved : 1; /* bit position: 7 */
      /* 0x0006 */ unsigned short DontUse2 : 8; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0008 */ unsigned char TimeToLive;
  /* 0x0009 */ unsigned char Protocol;
  /* 0x000a */ unsigned short HeaderChecksum;
  /* 0x000c */ struct in_addr SourceAddress;
  /* 0x0010 */ struct in_addr DestinationAddress;
} IPV4_HEADER, *PIPV4_HEADER; /* size: 0x0014 */

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x000c */ void* ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0050 */

typedef struct _WWAN_LIST_HEADER
{
  /* 0x0000 */ enum _WWAN_STRUCT_TYPE ElementType;
  /* 0x0004 */ unsigned long ElementCount;
} WWAN_LIST_HEADER, *PWWAN_LIST_HEADER; /* size: 0x0008 */

typedef struct _WWAN_DEVICE_CAPS
{
  /* 0x0000 */ enum _WWAN_DEVICE_TYPE WwanDeviceType;
  /* 0x0004 */ enum _WWAN_CELLULAR_CLASS WwanCellularClass;
  /* 0x0008 */ enum _WWAN_VOICE_CLASS WwanVoiceClass;
  /* 0x000c */ enum _WWAN_SIM_CLASS WwanSimClass;
  /* 0x0010 */ unsigned long WwanDataClass;
  /* 0x0014 */ wchar_t CustomDataClass[12];
  /* 0x002c */ unsigned long WwanGsmBandClass;
  /* 0x0030 */ unsigned long WwanCdmaBandClass;
  /* 0x0034 */ wchar_t CustomBandClass[20];
  /* 0x005c */ unsigned long WwanSmsCaps;
  /* 0x0060 */ unsigned long WwanControlCaps;
  /* 0x0064 */ wchar_t DeviceId[18];
  /* 0x0088 */ wchar_t Manufacturer[32];
  /* 0x00c8 */ wchar_t Model[32];
  /* 0x0108 */ wchar_t FirmwareInfo[32];
  /* 0x0148 */ unsigned long MaxActivatedContexts;
  /* 0x014c */ unsigned long WwanAuthAlgoCaps;
  /* 0x0150 */ struct _WWAN_LIST_HEADER CellularClassListHeader;
} WWAN_DEVICE_CAPS, *PWWAN_DEVICE_CAPS; /* size: 0x0158 */

struct _EPROCESS;

typedef struct _NDIS_RECEIVE_FILTER_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_RECEIVE_FILTER_TYPE FilterType;
  /* 0x000c */ unsigned long QueueId;
  /* 0x0010 */ unsigned long FilterId;
  /* 0x0014 */ unsigned long FieldParametersArrayOffset;
  /* 0x0018 */ unsigned long FieldParametersArrayNumElements;
  /* 0x001c */ unsigned long FieldParametersArrayElementSize;
  /* 0x0020 */ unsigned long RequestedFilterIdBitCount;
  /* 0x0024 */ unsigned long MaxCoalescingDelay;
  /* 0x0028 */ unsigned long VPortId;
} NDIS_RECEIVE_FILTER_PARAMETERS, *PNDIS_RECEIVE_FILTER_PARAMETERS; /* size: 0x002c */

struct _ACTIVATION_CONTEXT_DATA;

struct _ASSEMBLY_STORAGE_MAP;

struct DOT11_PHY_ID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned long dot11PhyId[1];
}; /* size: 0x0010 */

struct _LEAP_SECOND_DATA;

typedef struct _NETIO_NET_BUFFER_LIST_CONTEXT
{
  /* 0x0000 */ long ReferenceCount;
  /* 0x0004 */ struct _NET_BUFFER_LIST* Parent;
  /* 0x0008 */ void* CompletionRoutine /* function */;
  /* 0x000c */ void* CompletionContext;
} NETIO_NET_BUFFER_LIST_CONTEXT, *PNETIO_NET_BUFFER_LIST_CONTEXT; /* size: 0x0010 */

typedef struct _SID_IDENTIFIER_AUTHORITY
{
  /* 0x0000 */ unsigned char Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; /* size: 0x0006 */

typedef struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH
{
  /* 0x0000 */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
  /* 0x0004 */ struct in_addr IPAddress;
  union
  {
    union
    {
      /* 0x0008 */ unsigned long PrefixLength;
      /* 0x0008 */ unsigned long RangeSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ MatchValue;
} NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH, *PNDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH; /* size: 0x000c */

typedef struct _NDIS_GFT_PROFILE_INFO_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long ProfileInfoArrayOffset;
  /* 0x000c */ unsigned long ProfileInfoArrayNumElements;
  /* 0x0010 */ unsigned long ProfileInfoArrayElementSize;
} NDIS_GFT_PROFILE_INFO_ARRAY, *PNDIS_GFT_PROFILE_INFO_ARRAY; /* size: 0x0014 */

typedef struct _tlgWrapSz<wchar_t>
{
  union
  {
    /* 0x0000 */ const unsigned int DataDescCount;
    /* 0x0000 */ const wchar_t* const Psz;
  }; /* size: 0x0004 */
} tlgWrapSz<wchar_t>, *PtlgWrapSz<wchar_t>; /* size: 0x0004 */

typedef struct _tlgWrapSz<char16_t>
{
  union
  {
    /* 0x0000 */ const unsigned int DataDescCount;
    /* 0x0000 */ const char16_t* const Psz;
  }; /* size: 0x0004 */
} tlgWrapSz<char16_t>, *PtlgWrapSz<char16_t>; /* size: 0x0004 */

typedef struct _QUAD
{
  union
  {
    /* 0x0000 */ __int64 UseThisFieldToCopy;
    /* 0x0000 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
} QUAD, *PQUAD; /* size: 0x0008 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  union
  {
    /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    /* 0x0000 */ struct _LIST_ENTRY* CurEntry;
  }; /* size: 0x000c */
  /* 0x000c */ struct _LIST_ENTRY* ChainHead;
  /* 0x0010 */ unsigned long BucketIndex;
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR; /* size: 0x0014 */

typedef struct _EXT_DELETE_PARAMETERS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* DeleteCallback /* function */;
  /* 0x000c */ void* DeleteContext;
} EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS; /* size: 0x0010 */

typedef struct _RTL_DYNAMIC_HASH_TABLE
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Shift;
  /* 0x0008 */ unsigned long TableSize;
  /* 0x000c */ unsigned long Pivot;
  /* 0x0010 */ unsigned long DivisorMask;
  /* 0x0014 */ unsigned long NumEntries;
  /* 0x0018 */ unsigned long NonEmptyBuckets;
  /* 0x001c */ unsigned long NumEnumerators;
  /* 0x0020 */ void* Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE; /* size: 0x0024 */

typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ const wchar_t* TriggerId;
} CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG; /* size: 0x0008 */

typedef struct _FILE_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ unsigned long FileAttributes;
  /* 0x0024 */ long __PADDING__[1];
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION; /* size: 0x0028 */

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

typedef struct _NDIS_OFFLOAD_ENCAPSULATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  struct
  {
    /* 0x0004 */ unsigned long Enabled;
    /* 0x0008 */ unsigned long EncapsulationType;
    /* 0x000c */ unsigned long HeaderSize;
  } /* size: 0x000c */ IPv4;
  struct
  {
    /* 0x0010 */ unsigned long Enabled;
    /* 0x0014 */ unsigned long EncapsulationType;
    /* 0x0018 */ unsigned long HeaderSize;
  } /* size: 0x000c */ IPv6;
} NDIS_OFFLOAD_ENCAPSULATION, *PNDIS_OFFLOAD_ENCAPSULATION; /* size: 0x001c */

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Encapsulation;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long SupportIPv4 : 2; /* bit position: 0 */
    /* 0x0008 */ unsigned long SupportIPv6 : 2; /* bit position: 2 */
    /* 0x0008 */ unsigned long SupportIPv6ExtensionHeaders : 2; /* bit position: 4 */
    /* 0x0008 */ unsigned long SupportSack : 2; /* bit position: 6 */
    /* 0x0008 */ unsigned long CongestionAlgorithm : 4; /* bit position: 8 */
  }; /* bitfield */
  /* 0x000c */ unsigned long TcpConnectionOffloadCapacity;
  /* 0x0010 */ unsigned long Flags;
} NDIS_TCP_CONNECTION_OFFLOAD, *PNDIS_TCP_CONNECTION_OFFLOAD; /* size: 0x0014 */

typedef struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_OFFLOAD_ENCAPSULATION Encapsulation;
  /* 0x0020 */ unsigned long TicksPerSecond;
  /* 0x0024 */ unsigned char TcpAckFrequency;
  /* 0x0025 */ unsigned char TcpDelayedAckTicks;
  /* 0x0026 */ unsigned char TcpMaximumRetransmissions;
  /* 0x0027 */ unsigned char TcpDoubtReachabilityRetransmissions;
  /* 0x0028 */ unsigned long TcpSwsPreventionTicks;
  /* 0x002c */ unsigned long TcpDuplicateAckThreshold;
  /* 0x0030 */ unsigned long TcpPushTicks;
  /* 0x0034 */ unsigned long NceStaleTicks;
  /* 0x0038 */ unsigned long CongestionAlgorithm;
} NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS, *PNDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS; /* size: 0x003c */

typedef struct _NDIS_MINIPORT_OFFLOAD
{
  /* 0x0000 */ unsigned char SupportsOffload;
  /* 0x0001 */ unsigned char SupportsTopOffload;
  /* 0x0002 */ unsigned char SupportsTcpConnectionOffload;
  /* 0x0003 */ unsigned char SupportsTopTcpConnectionOffload;
  /* 0x0004 */ unsigned char TopConnectionOffloadPaused;
  /* 0x0005 */ unsigned char RSCDisallowed;
  /* 0x0006 */ char Padding_66[2];
  /* 0x0008 */ struct _NDIS_OFFLOAD MiniportCurrentConfig;
  /* 0x00e0 */ struct _NDIS_OFFLOAD TopCapabilities;
  /* 0x01b8 */ struct _NDIS_OFFLOAD MiniportInitialConfig;
  /* 0x0290 */ struct _NDIS_OFFLOAD MiniportHardwareCapabilities;
  /* 0x0368 */ struct _NDIS_OFFLOAD_ENCAPSULATION MiniportSetEncapsulation;
  /* 0x0384 */ struct _NDIS_OFFLOAD_ENCAPSULATION TopSetEncapsulation;
  /* 0x03a0 */ struct _NDIS_OFFLOAD_ENCAPSULATION TopMergedEncapsulation;
  /* 0x03bc */ struct _NDIS_OFFLOAD_ENCAPSULATION MiniportMergedEncapsulation;
  /* 0x03d8 */ struct _NDIS_TCP_CONNECTION_OFFLOAD TopTcpConnectionOffloadCapabilities;
  /* 0x03ec */ struct _NDIS_TCP_CONNECTION_OFFLOAD MiniportTcpConnectionOffloadCurrentConfig;
  /* 0x0400 */ struct _NDIS_TCP_CONNECTION_OFFLOAD MiniportHwTcpConnectionOffloadCapabilities;
  /* 0x0414 */ struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS TopTcpConnectionParameters;
  /* 0x0450 */ struct _NDIS_TCP_CONNECTION_OFFLOAD_PARAMETERS MiniportTcpConnectionParameters;
  /* 0x048c */ unsigned char MiniportTask[144];
  /* 0x051c */ unsigned long MiniportTaskSize;
  /* 0x0520 */ unsigned char Ndis5Xsum;
  /* 0x0521 */ unsigned char Ndis5LSO;
  /* 0x0522 */ unsigned char Ndis5IPsec;
  /* 0x0523 */ char Padding_67;
  /* 0x0524 */ void* MiniportRequestBuffer;
  /* 0x0528 */ unsigned long MiniportRequestOid;
  /* 0x052c */ unsigned long MiniportRequestBufferLength;
} NDIS_MINIPORT_OFFLOAD, *PNDIS_MINIPORT_OFFLOAD; /* size: 0x0530 */

struct _KTHREAD;

typedef struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH
{
  /* 0x0000 */ struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH SourcePort;
  /* 0x0008 */ struct _NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH DestinationPort;
} NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH, *PNDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH; /* size: 0x0010 */

typedef struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE
{
  /* 0x0000 */ unsigned char Combined[608];
  /* 0x0260 */ unsigned char Oid[608];
} NDIS_MINIPORT_RSS_PARAMETERS_CACHE, *PNDIS_MINIPORT_RSS_PARAMETERS_CACHE; /* size: 0x04c0 */

typedef struct _GROUP_AFFINITY
{
  /* 0x0000 */ unsigned long Mask;
  /* 0x0004 */ unsigned short Group;
  /* 0x0006 */ unsigned short Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; /* size: 0x000c */

typedef struct _IF_COUNTED_STRING_LH
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ wchar_t String[257];
} IF_COUNTED_STRING_LH, *PIF_COUNTED_STRING_LH; /* size: 0x0204 */

typedef struct _NDIS_RECEIVE_QUEUE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_RECEIVE_QUEUE_TYPE QueueType;
  /* 0x000c */ unsigned long QueueId;
  /* 0x0010 */ unsigned long QueueGroupId;
  /* 0x0014 */ struct _GROUP_AFFINITY ProcessorAffinity;
  /* 0x0020 */ unsigned long NumSuggestedReceiveBuffers;
  /* 0x0024 */ unsigned long MSIXTableEntry;
  /* 0x0028 */ unsigned long LookaheadSize;
  /* 0x002c */ struct _IF_COUNTED_STRING_LH VmName;
  /* 0x0230 */ struct _IF_COUNTED_STRING_LH QueueName;
  /* 0x0434 */ unsigned long PortId;
  /* 0x0438 */ unsigned long InterruptCoalescingDomainId;
  /* 0x043c */ unsigned long QosSqId;
} NDIS_RECEIVE_QUEUE_PARAMETERS, *PNDIS_RECEIVE_QUEUE_PARAMETERS; /* size: 0x0440 */

typedef struct _NDIS_RECEIVE_QUEUE_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0008 */ struct _LIST_ENTRY OpenLink;
  /* 0x0010 */ struct _LIST_ENTRY FilterList;
  /* 0x0018 */ unsigned long QueueId;
  /* 0x001c */ enum _NDIS_RECEIVE_QUEUE_PNP_STATE QueuePnPState;
  /* 0x0020 */ enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
  /* 0x0024 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0028 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x002c */ long Reference;
  /* 0x0030 */ unsigned long NumFilters;
  /* 0x0034 */ struct _LIST_ENTRY SharedMemoryList;
  /* 0x003c */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0040 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x0044 */ unsigned char MacAddress[6];
  /* 0x004a */ char Padding_68[2];
  /* 0x004c */ struct _NDIS_RECEIVE_QUEUE_PARAMETERS QueueParameters;
} NDIS_RECEIVE_QUEUE_BLOCK, *PNDIS_RECEIVE_QUEUE_BLOCK; /* size: 0x048c */

struct wistd::__invokable_r<void,void (__stdcall*)(wil::details::kspin_lock_saved_irql const &),wil::details::kspin_lock_saved_irql &>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

typedef struct _EXT_SET_PARAMETERS_V0
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ __int64 NoWakeTolerance;
} EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0; /* size: 0x0010 */

typedef struct _DMA_TRANSFER_INFO_V1
{
  /* 0x0000 */ unsigned long MapRegisterCount;
  /* 0x0004 */ unsigned long ScatterGatherElementCount;
  /* 0x0008 */ unsigned long ScatterGatherListSize;
} DMA_TRANSFER_INFO_V1, *PDMA_TRANSFER_INFO_V1; /* size: 0x000c */

typedef struct _NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
  /* 0x0048 */ unsigned long Lock__ObsoleteButDoNotDelete;
  /* 0x004c */ long __PADDING__[1];
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST; /* size: 0x0050 */

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    /* 0x0000 */ long Status;
    /* 0x0000 */ void* Pointer;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; /* size: 0x0008 */

typedef struct _TCP_OFFLOAD_STATE_CACHED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned short Flags;
  /* 0x000a */ char Padding_69[2];
  /* 0x000c */ unsigned long InitialRcvWnd;
  /* 0x0010 */ unsigned long RcvIndicationSize;
  /* 0x0014 */ unsigned char KaProbeCount;
  /* 0x0015 */ char Padding_70[3];
  /* 0x0018 */ unsigned long KaTimeout;
  /* 0x001c */ unsigned long KaInterval;
  /* 0x0020 */ unsigned long MaxRT;
  /* 0x0024 */ unsigned long FlowLabel : 20; /* bit position: 0 */
  /* 0x0028 */ unsigned char TtlOrHopLimit;
  /* 0x0029 */ unsigned char TosOrTrafficClass;
  /* 0x002a */ unsigned char UserPriority : 3; /* bit position: 0 */
  /* 0x002b */ char __PADDING__[1];
} TCP_OFFLOAD_STATE_CACHED, *PTCP_OFFLOAD_STATE_CACHED; /* size: 0x002c */

typedef union _NDIS_RW_LOCK_REFCOUNT
{
  union
  {
    /* 0x0000 */ unsigned long RefCount;
    /* 0x0000 */ unsigned char cacheLine[16];
  }; /* size: 0x0010 */
} NDIS_RW_LOCK_REFCOUNT, *PNDIS_RW_LOCK_REFCOUNT; /* size: 0x0010 */

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Shared : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; /* size: 0x0004 */

struct _ETHREAD;

typedef struct _FILTER_PAUSE_RESTART_CONTEXT
{
  /* 0x0000 */ struct _NDIS_FILTER_BLOCK* Filter;
  /* 0x0004 */ int Status;
  /* 0x0008 */ struct _KEVENT Event;
} FILTER_PAUSE_RESTART_CONTEXT, *PFILTER_PAUSE_RESTART_CONTEXT; /* size: 0x0018 */

typedef struct _IRP
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _MDL* MdlAddress;
  /* 0x0008 */ unsigned long Flags;
  union
  {
    union
    {
      /* 0x000c */ struct _IRP* MasterIrp;
      /* 0x000c */ long IrpCount;
      /* 0x000c */ void* SystemBuffer;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ AssociatedIrp;
  /* 0x0010 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0018 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0020 */ char RequestorMode;
  /* 0x0021 */ unsigned char PendingReturned;
  /* 0x0022 */ char StackCount;
  /* 0x0023 */ char CurrentLocation;
  /* 0x0024 */ unsigned char Cancel;
  /* 0x0025 */ unsigned char CancelIrql;
  /* 0x0026 */ char ApcEnvironment;
  /* 0x0027 */ unsigned char AllocationFlags;
  /* 0x0028 */ struct _IO_STATUS_BLOCK* UserIosb;
  /* 0x002c */ struct _KEVENT* UserEvent;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0030 */ void* UserApcRoutine /* function */;
          /* 0x0030 */ void* IssuingProcess;
        }; /* size: 0x0004 */
        /* 0x0034 */ void* UserApcContext;
      } /* size: 0x0008 */ AsynchronousParameters;
      /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Overlay;
  /* 0x0038 */ void* CancelRoutine /* function */;
  /* 0x003c */ void* UserBuffer;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0040 */ struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
          /* 0x0040 */ void* DriverContext[4];
        }; /* size: 0x0010 */
        /* 0x0050 */ struct _ETHREAD* Thread;
        /* 0x0054 */ char* AuxiliaryBuffer;
        /* 0x0058 */ struct _LIST_ENTRY ListEntry;
        union
        {
          /* 0x0060 */ struct _IO_STACK_LOCATION* CurrentStackLocation;
          /* 0x0060 */ unsigned long PacketType;
        }; /* size: 0x0004 */
        /* 0x0064 */ struct _FILE_OBJECT* OriginalFileObject;
        /* 0x0068 */ void* IrpExtension;
      } /* size: 0x002c */ Overlay;
      /* 0x0040 */ struct _KAPC Apc;
      /* 0x0040 */ void* CompletionKey;
    }; /* size: 0x0030 */
  } /* size: 0x0030 */ Tail;
} IRP, *PIRP; /* size: 0x0070 */

typedef struct _MDL
{
  /* 0x0000 */ struct _MDL* Next;
  /* 0x0004 */ short Size;
  /* 0x0006 */ short MdlFlags;
  /* 0x0008 */ struct _EPROCESS* Process;
  /* 0x000c */ void* MappedSystemVa;
  /* 0x0010 */ void* StartVa;
  /* 0x0014 */ unsigned long ByteCount;
  /* 0x0018 */ unsigned long ByteOffset;
} MDL, *PMDL; /* size: 0x001c */

typedef struct _NDIS_802_11_KEY
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long KeyIndex;
  /* 0x0008 */ unsigned long KeyLength;
  /* 0x000c */ unsigned char BSSID[6];
  /* 0x0012 */ char Padding_71[6];
  /* 0x0018 */ unsigned __int64 KeyRSC;
  /* 0x0020 */ unsigned char KeyMaterial[1];
  /* 0x0021 */ char __PADDING__[7];
} NDIS_802_11_KEY, *PNDIS_802_11_KEY; /* size: 0x0028 */

typedef struct _NDIS_PD_RECEIVE_QUEUE_COUNTER
{
  /* 0x0000 */ unsigned __int64 PacketsReceived;
  /* 0x0008 */ unsigned __int64 BytesReceived;
  /* 0x0010 */ unsigned __int64 PacketsDropped;
} NDIS_PD_RECEIVE_QUEUE_COUNTER, *PNDIS_PD_RECEIVE_QUEUE_COUNTER; /* size: 0x0018 */

typedef struct _DRIVER_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ void* DriverStart;
  /* 0x0010 */ unsigned long DriverSize;
  /* 0x0014 */ void* DriverSection;
  /* 0x0018 */ struct _DRIVER_EXTENSION* DriverExtension;
  /* 0x001c */ struct _UNICODE_STRING DriverName;
  /* 0x0024 */ struct _UNICODE_STRING* HardwareDatabase;
  /* 0x0028 */ struct _FAST_IO_DISPATCH* FastIoDispatch;
  /* 0x002c */ void* DriverInit /* function */;
  /* 0x0030 */ void* DriverStartIo /* function */;
  /* 0x0034 */ void* DriverUnload /* function */;
  /* 0x0038 */ void* MajorFunction[28] /* function */;
} DRIVER_OBJECT, *PDRIVER_OBJECT; /* size: 0x00a8 */

typedef struct _FAST_IO_DISPATCH
{
  /* 0x0000 */ unsigned long SizeOfFastIoDispatch;
  /* 0x0004 */ void* FastIoCheckIfPossible /* function */;
  /* 0x0008 */ void* FastIoRead /* function */;
  /* 0x000c */ void* FastIoWrite /* function */;
  /* 0x0010 */ void* FastIoQueryBasicInfo /* function */;
  /* 0x0014 */ void* FastIoQueryStandardInfo /* function */;
  /* 0x0018 */ void* FastIoLock /* function */;
  /* 0x001c */ void* FastIoUnlockSingle /* function */;
  /* 0x0020 */ void* FastIoUnlockAll /* function */;
  /* 0x0024 */ void* FastIoUnlockAllByKey /* function */;
  /* 0x0028 */ void* FastIoDeviceControl /* function */;
  /* 0x002c */ void* AcquireFileForNtCreateSection /* function */;
  /* 0x0030 */ void* ReleaseFileForNtCreateSection /* function */;
  /* 0x0034 */ void* FastIoDetachDevice /* function */;
  /* 0x0038 */ void* FastIoQueryNetworkOpenInfo /* function */;
  /* 0x003c */ void* AcquireForModWrite /* function */;
  /* 0x0040 */ void* MdlRead /* function */;
  /* 0x0044 */ void* MdlReadComplete /* function */;
  /* 0x0048 */ void* PrepareMdlWrite /* function */;
  /* 0x004c */ void* MdlWriteComplete /* function */;
  /* 0x0050 */ void* FastIoReadCompressed /* function */;
  /* 0x0054 */ void* FastIoWriteCompressed /* function */;
  /* 0x0058 */ void* MdlReadCompleteCompressed /* function */;
  /* 0x005c */ void* MdlWriteCompleteCompressed /* function */;
  /* 0x0060 */ void* FastIoQueryOpen /* function */;
  /* 0x0064 */ void* ReleaseForModWrite /* function */;
  /* 0x0068 */ void* AcquireForCcFlush /* function */;
  /* 0x006c */ void* ReleaseForCcFlush /* function */;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH; /* size: 0x0070 */

typedef struct _VPB
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short VolumeLabelLength;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ struct _DEVICE_OBJECT* RealDevice;
  /* 0x0010 */ unsigned long SerialNumber;
  /* 0x0014 */ unsigned long ReferenceCount;
  /* 0x0018 */ wchar_t VolumeLabel[32];
} VPB, *PVPB; /* size: 0x0058 */

typedef struct _NET_PNP_EVENT_NOTIFICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PortNumber;
  /* 0x0008 */ struct _NET_PNP_EVENT NetPnPEvent;
  /* 0x0054 */ unsigned long Flags;
  /* 0x0058 */ unsigned long SwitchId;
  /* 0x005c */ unsigned long VPortId;
} NET_PNP_EVENT_NOTIFICATION, *PNET_PNP_EVENT_NOTIFICATION; /* size: 0x0060 */

typedef struct _SID
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char SubAuthorityCount;
  /* 0x0002 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* 0x0008 */ unsigned long SubAuthority[1];
} SID, *PSID; /* size: 0x000c */

typedef struct _SECTION_OBJECT_POINTERS
{
  /* 0x0000 */ void* DataSectionObject;
  /* 0x0004 */ void* SharedCacheMap;
  /* 0x0008 */ void* ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS; /* size: 0x000c */

typedef struct _tlgTypeMapBase<unsigned char>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<unsigned char>, *PtlgTypeMapBase<unsigned char>; /* size: 0x0001 */

typedef struct _IO_COMPLETION_CONTEXT
{
  /* 0x0000 */ void* Port;
  /* 0x0004 */ void* Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT; /* size: 0x0008 */

typedef struct _tlgWrapSz<char>
{
  union
  {
    /* 0x0000 */ const unsigned int DataDescCount;
    /* 0x0000 */ const char* const Psz;
  }; /* size: 0x0004 */
} tlgWrapSz<char>, *PtlgWrapSz<char>; /* size: 0x0004 */

typedef struct _NDIS_INTERRUPT_MODERATION_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_INTERRUPT_MODERATION InterruptModeration;
} NDIS_INTERRUPT_MODERATION_PARAMETERS, *PNDIS_INTERRUPT_MODERATION_PARAMETERS; /* size: 0x000c */

typedef struct __vc_attributes::event_sourceAttribute
{
  /* 0x0000 */ enum __vc_attributes::event_sourceAttribute::type_e type;
  /* 0x0004 */ enum __vc_attributes::event_sourceAttribute::optimize_e optimize;
  /* 0x0008 */ BOOL decorate;
  /* 0x0009 */ char __PADDING__[3];
} _vc_attributes::event_sourceAttribute, *P_vc_attributes::event_sourceAttribute; /* size: 0x000c */

typedef struct _NDIS_MINIPORT_STATS
{
  /* 0x0000 */ unsigned __int64 ifHCInOctets;
  /* 0x0008 */ unsigned __int64 ifHCInUcastOctets;
  /* 0x0010 */ unsigned __int64 ifHCInBroadcastOctets;
  /* 0x0018 */ unsigned __int64 ifHCInMulticastOctets;
  /* 0x0020 */ unsigned __int64 ifHCInUcastPkts;
  /* 0x0028 */ unsigned __int64 ifHCInMulticastPkts;
  /* 0x0030 */ unsigned __int64 ifHCInBroadcastPkts;
  /* 0x0038 */ unsigned __int64 ifHCOutOctets;
  /* 0x0040 */ unsigned __int64 ifHCOutUcastPkts;
  /* 0x0048 */ unsigned __int64 ifHCOutMulticastPkts;
  /* 0x0050 */ unsigned __int64 ifHCOutBroadcastPkts;
  /* 0x0058 */ unsigned __int64 ifHCOutUcastOctets;
  /* 0x0060 */ unsigned __int64 ifHCOutMulticastOctets;
  /* 0x0068 */ unsigned __int64 ifHCOutBroadcastOctets;
} NDIS_MINIPORT_STATS, *PNDIS_MINIPORT_STATS; /* size: 0x0070 */

class Rtl::KArray<void *,1>::const_iterator;

struct DOT11_PHY_FRAME_STATISTICS
{
  /* 0x0000 */ unsigned __int64 ullTransmittedFrameCount;
  /* 0x0008 */ unsigned __int64 ullMulticastTransmittedFrameCount;
  /* 0x0010 */ unsigned __int64 ullFailedCount;
  /* 0x0018 */ unsigned __int64 ullRetryCount;
  /* 0x0020 */ unsigned __int64 ullMultipleRetryCount;
  /* 0x0028 */ unsigned __int64 ullMaxTXLifetimeExceededCount;
  /* 0x0030 */ unsigned __int64 ullTransmittedFragmentCount;
  /* 0x0038 */ unsigned __int64 ullRTSSuccessCount;
  /* 0x0040 */ unsigned __int64 ullRTSFailureCount;
  /* 0x0048 */ unsigned __int64 ullACKFailureCount;
  /* 0x0050 */ unsigned __int64 ullReceivedFrameCount;
  /* 0x0058 */ unsigned __int64 ullMulticastReceivedFrameCount;
  /* 0x0060 */ unsigned __int64 ullPromiscuousReceivedFrameCount;
  /* 0x0068 */ unsigned __int64 ullMaxRXLifetimeExceededCount;
  /* 0x0070 */ unsigned __int64 ullFrameDuplicateCount;
  /* 0x0078 */ unsigned __int64 ullReceivedFragmentCount;
  /* 0x0080 */ unsigned __int64 ullPromiscuousReceivedFragmentCount;
  /* 0x0088 */ unsigned __int64 ullFCSErrorCount;
}; /* size: 0x0090 */

typedef struct _tlgCharTraits<char>
{
} tlgCharTraits<char>, *PtlgCharTraits<char>; /* size: 0x0001 */

typedef struct _FILE_STANDARD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0010 */ unsigned long NumberOfLinks;
  /* 0x0014 */ unsigned char DeletePending;
  /* 0x0015 */ unsigned char Directory;
  /* 0x0016 */ char __PADDING__[2];
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION; /* size: 0x0018 */

typedef struct _NDIS_QOS_CLASSIFICATION_ELEMENT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned short ConditionSelector;
  /* 0x000a */ unsigned short ConditionField;
  /* 0x000c */ unsigned short ActionSelector;
  /* 0x000e */ unsigned short ActionField;
} NDIS_QOS_CLASSIFICATION_ELEMENT, *PNDIS_QOS_CLASSIFICATION_ELEMENT; /* size: 0x0010 */

typedef struct _NDIS40_PROTOCOL_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorNdisVersion;
  /* 0x0001 */ unsigned char MinorNdisVersion;
  /* 0x0002 */ unsigned short Filler;
  union
  {
    /* 0x0004 */ unsigned int Reserved;
    /* 0x0004 */ unsigned int Flags;
  }; /* size: 0x0004 */
  /* 0x0008 */ void* OpenAdapterCompleteHandler /* function */;
  /* 0x000c */ void* CloseAdapterCompleteHandler /* function */;
  union
  {
    /* 0x0010 */ void* SendCompleteHandler /* function */;
    /* 0x0010 */ void* WanSendCompleteHandler /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ void* TransferDataCompleteHandler /* function */;
    /* 0x0014 */ void* WanTransferDataCompleteHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0018 */ void* ResetCompleteHandler /* function */;
  /* 0x001c */ void* RequestCompleteHandler /* function */;
  union
  {
    /* 0x0020 */ void* ReceiveHandler /* function */;
    /* 0x0020 */ void* WanReceiveHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0024 */ void* ReceiveCompleteHandler /* function */;
  /* 0x0028 */ void* StatusHandler /* function */;
  /* 0x002c */ void* StatusCompleteHandler /* function */;
  /* 0x0030 */ struct _UNICODE_STRING Name;
  /* 0x0038 */ void* ReceivePacketHandler /* function */;
  /* 0x003c */ void* BindAdapterHandler /* function */;
  /* 0x0040 */ void* UnbindAdapterHandler /* function */;
  /* 0x0044 */ void* PnPEventHandler /* function */;
  /* 0x0048 */ void* UnloadHandler /* function */;
} NDIS40_PROTOCOL_CHARACTERISTICS, *PNDIS40_PROTOCOL_CHARACTERISTICS; /* size: 0x004c */

typedef struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* InitiateOffloadHandler /* function */;
  /* 0x000c */ void* TerminateOffloadHandler /* function */;
  /* 0x0010 */ void* UpdateOffloadHandler /* function */;
  /* 0x0014 */ void* InvalidateOffloadHandler /* function */;
  /* 0x0018 */ void* QueryOffloadHandler /* function */;
} NDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS, *PNDIS_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS; /* size: 0x001c */

typedef struct _NDIS_GFT_FLOW_ENTRY_ID_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ unsigned long VPortId;
  union
  {
    union
    {
      struct
      {
        /* 0x0010 */ unsigned long ProviderFlowEntryIdArrayOffset;
        /* 0x0014 */ unsigned long ProviderFlowEntryIdArrayNumElements;
        /* 0x0018 */ unsigned long ProviderFlowEntryIdArrayElementSize;
      } /* size: 0x000c */ FlowEntryIdArray;
      struct
      {
        /* 0x0010 */ unsigned long ProviderFlowEntryIdAndCounterArrayOffset;
        /* 0x0014 */ unsigned long ProviderFlowEntryIdAndCounterArrayNumElements;
        /* 0x0018 */ unsigned long ProviderFlowEntryIdAndCounterArrayElementSize;
      } /* size: 0x000c */ FlowEntryIdAndCounterArray;
    }; /* size: 0x000c */
  } /* size: 0x000c */ IdArray;
} NDIS_GFT_FLOW_ENTRY_ID_ARRAY, *PNDIS_GFT_FLOW_ENTRY_ID_ARRAY; /* size: 0x001c */

typedef struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION
{
  /* 0x0000 */ enum _NDIS_802_11_AUTHENTICATION_MODE AuthModeSupported;
  /* 0x0004 */ enum _NDIS_802_11_WEP_STATUS EncryptStatusSupported;
} NDIS_802_11_AUTHENTICATION_ENCRYPTION, *PNDIS_802_11_AUTHENTICATION_ENCRYPTION; /* size: 0x0008 */

typedef struct _NDIS_802_11_CAPABILITY
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long NoOfPMKIDs;
  /* 0x000c */ unsigned long NoOfAuthEncryptPairsSupported;
  /* 0x0010 */ struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION AuthenticationEncryptionSupported[1];
} NDIS_802_11_CAPABILITY, *PNDIS_802_11_CAPABILITY; /* size: 0x0018 */

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ unsigned long FileAttributes;
  /* 0x0034 */ long __PADDING__[1];
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION; /* size: 0x0038 */

typedef struct _NDIS_MINIPORT_PNP_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* MiniportAddDeviceHandler /* function */;
  /* 0x0008 */ void* MiniportRemoveDeviceHandler /* function */;
  /* 0x000c */ void* MiniportFilterResourceRequirementsHandler /* function */;
  /* 0x0010 */ void* MiniportStartDeviceHandler /* function */;
  /* 0x0014 */ unsigned long Flags;
} NDIS_MINIPORT_PNP_CHARACTERISTICS, *PNDIS_MINIPORT_PNP_CHARACTERISTICS; /* size: 0x0018 */

typedef struct _DMA_ADAPTER
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _DMA_OPERATIONS* DmaOperations;
} DMA_ADAPTER, *PDMA_ADAPTER; /* size: 0x0008 */

typedef struct _CO_SPECIFIC_PARAMETERS
{
  /* 0x0000 */ unsigned long ParamType;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned char Parameters[1];
  /* 0x0009 */ char __PADDING__[3];
} CO_SPECIFIC_PARAMETERS, *PCO_SPECIFIC_PARAMETERS; /* size: 0x000c */

typedef struct _CO_CALL_MANAGER_PARAMETERS
{
  /* 0x0000 */ struct _flowspec Transmit;
  /* 0x0020 */ struct _flowspec Receive;
  /* 0x0040 */ struct _CO_SPECIFIC_PARAMETERS CallMgrSpecific;
} CO_CALL_MANAGER_PARAMETERS, *PCO_CALL_MANAGER_PARAMETERS; /* size: 0x004c */

typedef struct _OID_LIST
{
  /* 0x0000 */ unsigned long StatsOidCount;
  /* 0x0004 */ unsigned long FullOidCount;
  /* 0x0008 */ unsigned long* StatsOidArray;
  /* 0x000c */ unsigned long* FullOidArray;
} OID_LIST, *POID_LIST; /* size: 0x0010 */

typedef struct _NDIS_802_11_CONFIGURATION_FH
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long HopPattern;
  /* 0x0008 */ unsigned long HopSet;
  /* 0x000c */ unsigned long DwellTime;
} NDIS_802_11_CONFIGURATION_FH, *PNDIS_802_11_CONFIGURATION_FH; /* size: 0x0010 */

typedef struct _NDIS_802_11_CONFIGURATION
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long BeaconPeriod;
  /* 0x0008 */ unsigned long ATIMWindow;
  /* 0x000c */ unsigned long DSConfig;
  /* 0x0010 */ struct _NDIS_802_11_CONFIGURATION_FH FHConfig;
} NDIS_802_11_CONFIGURATION, *PNDIS_802_11_CONFIGURATION; /* size: 0x0020 */

typedef struct _NDIS_WLAN_BSSID
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char MacAddress[6];
  /* 0x000a */ unsigned char Reserved[2];
  /* 0x000c */ struct _NDIS_802_11_SSID Ssid;
  /* 0x0030 */ unsigned long Privacy;
  /* 0x0034 */ long Rssi;
  /* 0x0038 */ enum _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
  /* 0x003c */ struct _NDIS_802_11_CONFIGURATION Configuration;
  /* 0x005c */ enum _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
  /* 0x0060 */ unsigned char SupportedRates[8];
} NDIS_WLAN_BSSID, *PNDIS_WLAN_BSSID; /* size: 0x0068 */

typedef struct _NDIS_802_11_BSSID_LIST
{
  /* 0x0000 */ unsigned long NumberOfItems;
  /* 0x0004 */ struct _NDIS_WLAN_BSSID Bssid[1];
} NDIS_802_11_BSSID_LIST, *PNDIS_802_11_BSSID_LIST; /* size: 0x006c */

typedef struct _NDIS_BIND_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _UNICODE_STRING* ProtocolSection;
  /* 0x0008 */ struct _UNICODE_STRING* AdapterName;
  /* 0x000c */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0010 */ enum _NDIS_MEDIUM MediaType;
  /* 0x0014 */ unsigned long MtuSize;
  /* 0x0018 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x0020 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0028 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x0030 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0038 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x003c */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0040 */ unsigned long LookaheadSize;
  /* 0x0044 */ struct _NDIS_PNP_CAPABILITIES* PowerManagementCapabilities;
  /* 0x0048 */ unsigned long SupportedPacketFilters;
  /* 0x004c */ unsigned long MaxMulticastListSize;
  /* 0x0050 */ unsigned short MacAddressLength;
  /* 0x0052 */ unsigned char CurrentMacAddress[32];
  /* 0x0072 */ char Padding_72[2];
  /* 0x0074 */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
  /* 0x0078 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES* RcvScaleCapabilities;
  /* 0x007c */ long Padding_73;
  /* 0x0080 */ union _NET_LUID_LH BoundIfNetluid;
  /* 0x0088 */ unsigned long BoundIfIndex;
  /* 0x008c */ long Padding_74;
  /* 0x0090 */ union _NET_LUID_LH LowestIfNetluid;
  /* 0x0098 */ unsigned long LowestIfIndex;
  /* 0x009c */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x00a0 */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x00a4 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x00a8 */ unsigned short IfType;
  /* 0x00aa */ unsigned char IfConnectorPresent;
  /* 0x00ab */ char Padding_75;
  /* 0x00ac */ struct _NDIS_PORT* ActivePorts;
  /* 0x00b0 */ unsigned long DataBackFillSize;
  /* 0x00b4 */ unsigned long ContextBackFillSize;
  /* 0x00b8 */ unsigned long MacOptions;
  /* 0x00bc */ unsigned int CompartmentId;
  /* 0x00c0 */ struct _NDIS_OFFLOAD* DefaultOffloadConfiguration;
  /* 0x00c4 */ struct _NDIS_TCP_CONNECTION_OFFLOAD* TcpConnectionOffloadCapabilities;
  /* 0x00c8 */ struct _UNICODE_STRING* BoundAdapterName;
  /* 0x00cc */ struct _NDIS_HD_SPLIT_CURRENT_CONFIG* HDSplitCurrentConfig;
  /* 0x00d0 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterCapabilities;
  /* 0x00d4 */ struct _NDIS_PM_CAPABILITIES* PowerManagementCapabilitiesEx;
  /* 0x00d8 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchCapabilities;
  /* 0x00dc */ unsigned char NDKEnabled;
  /* 0x00dd */ char Padding_76[3];
  /* 0x00e0 */ struct _NDIS_NDK_CAPABILITIES* NDKCapabilities;
  /* 0x00e4 */ struct _NDIS_SRIOV_CAPABILITIES* SriovCapabilities;
  /* 0x00e8 */ struct _NDIS_NIC_SWITCH_INFO_ARRAY* NicSwitchArray;
  /* 0x00ec */ long __PADDING__[1];
} NDIS_BIND_PARAMETERS, *PNDIS_BIND_PARAMETERS; /* size: 0x00f0 */

struct sockaddr
{
  /* 0x0000 */ unsigned short sa_family;
  /* 0x0002 */ char sa_data[14];
}; /* size: 0x0010 */

struct wistd::unique_ptr<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >::__nat;

typedef struct _DOT11_ADDITIONAL_IE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uBeaconIEsOffset;
  /* 0x0008 */ unsigned long uBeaconIEsLength;
  /* 0x000c */ unsigned long uResponseIEsOffset;
  /* 0x0010 */ unsigned long uResponseIEsLength;
} DOT11_ADDITIONAL_IE, *PDOT11_ADDITIONAL_IE; /* size: 0x0014 */

typedef union _REFERENCE_OBJECT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Deleting : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ReferenceCount : 30; /* bit position: 1 */
      /* 0x0000 */ unsigned long Overflow : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ long Value;
  }; /* size: 0x0004 */
} REFERENCE_OBJECT, *PREFERENCE_OBJECT; /* size: 0x0004 */

typedef struct _NDIS_MINIPORT_INTERRUPT
{
  /* 0x0000 */ struct _KINTERRUPT* InterruptObject;
  union
  {
    /* 0x0004 */ volatile unsigned char IsDeregistered;
    /* 0x0004 */ unsigned long DpcCountLock;
  }; /* size: 0x0004 */
  /* 0x0008 */ void* Reserved;
  /* 0x000c */ void* MiniportIsr /* function */;
  /* 0x0010 */ void* MiniportDpc /* function */;
  /* 0x0014 */ struct _KDPC InterruptDpc;
  /* 0x0034 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0038 */ volatile long DpcCount;
  /* 0x003c */ struct _KEVENT DpcsCompletedEvent;
  /* 0x004c */ unsigned char SharedInterrupt;
  /* 0x004d */ unsigned char IsrRequested;
  /* 0x004e */ char __PADDING__[2];
} NDIS_MINIPORT_INTERRUPT, *PNDIS_MINIPORT_INTERRUPT; /* size: 0x0050 */

struct wistd::integral_constant<enum _EVENT_TYPE,1>
{
  /* 0x0000 */ enum _EVENT_TYPE value;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _EVENT_RECORD
{
  /* 0x0000 */ struct _EVENT_HEADER EventHeader;
  /* 0x0050 */ struct _ETW_BUFFER_CONTEXT BufferContext;
  /* 0x0054 */ unsigned short ExtendedDataCount;
  /* 0x0056 */ unsigned short UserDataLength;
  /* 0x0058 */ struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
  /* 0x005c */ void* UserData;
  /* 0x0060 */ void* UserContext;
  /* 0x0064 */ long __PADDING__[1];
} EVENT_RECORD, *PEVENT_RECORD; /* size: 0x0068 */

struct _IO_TIMER;

struct NDIS_REFCOUNT_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _DEVOBJ_EXTENSION
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ unsigned long PowerFlags;
  /* 0x000c */ struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;
  /* 0x0010 */ unsigned long ExtensionFlags;
  /* 0x0014 */ void* DeviceNode;
  /* 0x0018 */ struct _DEVICE_OBJECT* AttachedTo;
  /* 0x001c */ long StartIoCount;
  /* 0x0020 */ long StartIoKey;
  /* 0x0024 */ unsigned long StartIoFlags;
  /* 0x0028 */ struct _VPB* Vpb;
  /* 0x002c */ void* DependencyNode;
  /* 0x0030 */ void* InterruptContext;
  /* 0x0034 */ long InterruptCount;
  /* 0x0038 */ void* VerifierContext;
} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION; /* size: 0x003c */

typedef struct _NDIS_PORT_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0008 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0010 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0018 */ enum _NET_IF_DIRECTION_TYPE Direction;
  /* 0x001c */ enum _NDIS_PORT_CONTROL_STATE SendControlState;
  /* 0x0020 */ enum _NDIS_PORT_CONTROL_STATE RcvControlState;
  /* 0x0024 */ enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
  /* 0x0028 */ enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
  /* 0x002c */ unsigned long Flags;
} NDIS_PORT_STATE, *PNDIS_PORT_STATE; /* size: 0x0030 */

struct _DEVICE_OBJECT_POWER_EXTENSION;

typedef struct _NDIS_PD_FILTER_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MatchProfileId;
  /* 0x000c */ unsigned long Priority;
  /* 0x0010 */ struct NDIS_PD_COUNTER_HANDLE__* CounterHandle;
  /* 0x0014 */ struct _NDIS_PD_QUEUE* TargetReceiveQueue;
  /* 0x0018 */ unsigned __int64 RxFilterContext;
  /* 0x0020 */ unsigned char* HeaderGroupMatchArray;
  /* 0x0024 */ unsigned long HeaderGroupMatchArrayNumElements;
  /* 0x0028 */ unsigned long HeaderGroupMatchArrayElementSize;
  /* 0x002c */ unsigned long HeaderGroupMatchArrayTotalSize;
} NDIS_PD_FILTER_PARAMETERS, *PNDIS_PD_FILTER_PARAMETERS; /* size: 0x0030 */

typedef struct _NDIS_GFT_VPORT_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long VPortId;
  /* 0x000c */ unsigned long ExceptionVPortId;
  /* 0x0010 */ unsigned long SamplingRate;
  /* 0x0014 */ long Padding_77;
  /* 0x0018 */ unsigned __int64 DscpMask;
  /* 0x0020 */ unsigned long NumDscpMaskCounterObjects;
  /* 0x0024 */ unsigned long DscpMaskCounterIdArray[64];
  /* 0x0124 */ long Padding_78;
  /* 0x0128 */ unsigned __int64 PriorityMask;
  /* 0x0130 */ unsigned long NumPriorityMaskCounterObjects;
  /* 0x0134 */ unsigned long PriorityMaskCounterIdArray[8];
  /* 0x0154 */ unsigned short VxLanSrcPortBase;
  /* 0x0156 */ unsigned short VxLanSrcPortRange;
  /* 0x0158 */ unsigned long DscpFlags;
  /* 0x015c */ long __PADDING__[1];
} NDIS_GFT_VPORT_PARAMETERS, *PNDIS_GFT_VPORT_PARAMETERS; /* size: 0x0160 */

typedef struct _IO_SECURITY_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0004 */ struct _ACCESS_STATE* AccessState;
  /* 0x0008 */ unsigned long DesiredAccess;
  /* 0x000c */ unsigned long FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT; /* size: 0x0010 */

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ unsigned char ContextTrackingMode;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; /* size: 0x000c */

struct wil_StagingConfig;

typedef struct _INITIAL_PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET; /* size: 0x002c */

typedef struct _PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET; /* size: 0x0014 */

typedef struct _ACCESS_STATE
{
  /* 0x0000 */ struct _LUID OperationID;
  /* 0x0008 */ unsigned char SecurityEvaluated;
  /* 0x0009 */ unsigned char GenerateAudit;
  /* 0x000a */ unsigned char GenerateOnClose;
  /* 0x000b */ unsigned char PrivilegesAllocated;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long RemainingDesiredAccess;
  /* 0x0014 */ unsigned long PreviouslyGrantedAccess;
  /* 0x0018 */ unsigned long OriginalDesiredAccess;
  /* 0x001c */ struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  /* 0x002c */ void* SecurityDescriptor;
  /* 0x0030 */ void* AuxData;
  union
  {
    union
    {
      /* 0x0034 */ struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      /* 0x0034 */ struct _PRIVILEGE_SET PrivilegeSet;
    }; /* size: 0x002c */
  } /* size: 0x002c */ Privileges;
  /* 0x0060 */ unsigned char AuditPrivileges;
  /* 0x0061 */ char Padding_79[3];
  /* 0x0064 */ struct _UNICODE_STRING ObjectName;
  /* 0x006c */ struct _UNICODE_STRING ObjectTypeName;
} ACCESS_STATE, *PACCESS_STATE; /* size: 0x0074 */

typedef struct _NDIS_OPEN_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _UNICODE_STRING* AdapterName;
  /* 0x0008 */ enum _NDIS_MEDIUM* MediumArray;
  /* 0x000c */ unsigned int MediumArraySize;
  /* 0x0010 */ unsigned int* SelectedMediumIndex;
  /* 0x0014 */ unsigned short* FrameTypeArray;
  /* 0x0018 */ unsigned int FrameTypeArraySize;
} NDIS_OPEN_PARAMETERS, *PNDIS_OPEN_PARAMETERS; /* size: 0x001c */

typedef struct _NAMED_PIPE_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long NamedPipeType;
  /* 0x0004 */ unsigned long ReadMode;
  /* 0x0008 */ unsigned long CompletionMode;
  /* 0x000c */ unsigned long MaximumInstances;
  /* 0x0010 */ unsigned long InboundQuota;
  /* 0x0014 */ unsigned long OutboundQuota;
  /* 0x0018 */ union _LARGE_INTEGER DefaultTimeout;
  /* 0x0020 */ unsigned char TimeoutSpecified;
  /* 0x0021 */ char __PADDING__[7];
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS; /* size: 0x0028 */

typedef struct _NDIS_SHARED_MEMORY_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long QueueId;
  /* 0x000c */ void* SharedMemoryHandle;
  /* 0x0010 */ unsigned long PreferredNode;
  /* 0x0014 */ enum _NDIS_SHARED_MEMORY_USAGE Usage;
  /* 0x0018 */ unsigned long Length;
  /* 0x001c */ void* VirtualAddress;
  /* 0x0020 */ unsigned long SGListBufferLength;
  /* 0x0024 */ struct _SCATTER_GATHER_LIST* SGListBuffer;
  /* 0x0028 */ unsigned long VPortId;
} NDIS_SHARED_MEMORY_PARAMETERS, *PNDIS_SHARED_MEMORY_PARAMETERS; /* size: 0x002c */

typedef struct _NDIS_SHARED_MEMORY_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY MiniportLink;
  /* 0x0008 */ struct _LIST_ENTRY OpenLink;
  /* 0x0010 */ struct _LIST_ENTRY QueueLink;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0020 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0024 */ struct _NDIS_RECEIVE_QUEUE_BLOCK* ReceiveQueue;
  /* 0x0028 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x002c */ void* SharedMemoryHandlerContext;
  /* 0x0030 */ void* ProviderAllocationContext;
  /* 0x0034 */ long Padding_80;
  /* 0x0038 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0040 */ struct _NDIS_SHARED_MEMORY_PARAMETERS SharedMemoryParameters;
  /* 0x006c */ long __PADDING__[1];
} NDIS_SHARED_MEMORY_BLOCK, *PNDIS_SHARED_MEMORY_BLOCK; /* size: 0x0070 */

typedef struct _NDIS_QOS_OFFLOAD_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SupportedSqTypes;
  /* 0x000c */ unsigned char TransmitCapSupported[8];
  /* 0x0014 */ unsigned char TransmitReservationSupported[8];
  /* 0x001c */ unsigned char ReceiveCapSupported[8];
  /* 0x0024 */ unsigned char TransmitGftCapSupported[8];
  /* 0x002c */ unsigned char ReceiveGftCapSupported[8];
  /* 0x0034 */ unsigned char TcSupportedTable[8];
  /* 0x003c */ unsigned long NumStandardSqsSupported;
  /* 0x0040 */ unsigned long NumGftSqsSupported;
  /* 0x0044 */ unsigned long ReservationGranularitySupported;
  /* 0x0048 */ unsigned long MaxNumSqInputs;
  /* 0x004c */ unsigned char CrossTcTransmitMaxCapSupported;
  /* 0x004d */ char __PADDING__[3];
} NDIS_QOS_OFFLOAD_CAPABILITIES, *PNDIS_QOS_OFFLOAD_CAPABILITIES; /* size: 0x0050 */

typedef union __m128
{
  union
  {
    /* 0x0000 */ float m128_f32[4];
    /* 0x0000 */ unsigned __int64 m128_u64[2];
    /* 0x0000 */ char m128_i8[16];
    /* 0x0000 */ short m128_i16[8];
    /* 0x0000 */ int m128_i32[4];
    /* 0x0000 */ __int64 m128_i64[2];
    /* 0x0000 */ unsigned char m128_u8[16];
    /* 0x0000 */ unsigned short m128_u16[8];
    /* 0x0000 */ unsigned int m128_u32[4];
  }; /* size: 0x0010 */
} _m128, *P_m128; /* size: 0x0010 */

struct _SCSI_REQUEST_BLOCK;

typedef struct _NDK_QP
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_QP_DISPATCH* Dispatch;
} NDK_QP, *PNDK_QP; /* size: 0x001c */

struct wistd::__compressed_pair_elem<wistd::default_delete<NDIS_BIND_PROTOCOL_LINK>,1,1>
{
}; /* size: 0x0001 */

typedef struct _INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
} INTERFACE, *PINTERFACE; /* size: 0x0010 */

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  /* 0x0000 */ unsigned long ListSize;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long SlotNumber;
  /* 0x0010 */ unsigned long Reserved[3];
  /* 0x001c */ unsigned long AlternativeLists;
  /* 0x0020 */ struct _IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST; /* size: 0x0048 */

typedef struct _NDIS_SG_DMA_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0008 */ void* MiniportAdapterContext;
  /* 0x000c */ struct _DMA_ADAPTER* DmaAdapterObject;
  /* 0x0010 */ void* ProcessSGListHandler /* function */;
  /* 0x0014 */ void* SharedMemAllocateCompleteHandler /* function */;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long MaximumPhysicalMapping;
  /* 0x0020 */ unsigned long ScatterGatherListSize;
  /* 0x0024 */ void* SGListLookasideList;
  /* 0x0028 */ long DmaAdapterRefCount;
  /* 0x002c */ struct _KEVENT* DmaResourcesReleasedEvent;
  /* 0x0030 */ void* SharedMemoryPage[2];
  /* 0x0038 */ unsigned long SharedMemoryLeft[2];
  /* 0x0040 */ union _LARGE_INTEGER SharedMemoryAddress[2];
  /* 0x0050 */ struct _DMA_ADAPTER* SavedDmaAdapterObject;
  /* 0x0054 */ struct _MAP_REGISTER_ENTRY* MapRegisters;
  /* 0x0058 */ struct _KEVENT* AllocationEvent;
  /* 0x005c */ unsigned short CurrentMapRegister;
  /* 0x005e */ unsigned short BaseMapRegistersNeeded;
  /* 0x0060 */ unsigned short SGMapRegistersNeeded;
  /* 0x0062 */ char __PADDING__[6];
} NDIS_SG_DMA_BLOCK, *PNDIS_SG_DMA_BLOCK; /* size: 0x0068 */

struct wil_FeatureState
{
  /* 0x0000 */ enum wil_FeatureEnabledState enabledState;
  /* 0x0004 */ unsigned char variant;
  /* 0x0005 */ char Padding_81[3];
  /* 0x0008 */ enum wil_FeatureVariantPayloadKind payloadKind;
  /* 0x000c */ unsigned int payload;
  /* 0x0010 */ int hasNotification;
  /* 0x0014 */ int isVariantConfiguration;
}; /* size: 0x0018 */

struct KIrqlRegion
{
  /* 0x0000 */ unsigned char m_OldIrql;
}; /* size: 0x0001 */

typedef struct _NDIS_MINIPORT_TIMER
{
  /* 0x0000 */ struct _KTIMER Timer;
  /* 0x0028 */ struct _KDPC Dpc;
  /* 0x0048 */ void* MiniportTimerFunction /* function */;
  /* 0x004c */ void* MiniportTimerContext;
  /* 0x0050 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0054 */ struct _NDIS_MINIPORT_TIMER* NextTimer;
} NDIS_MINIPORT_TIMER, *PNDIS_MINIPORT_TIMER; /* size: 0x0058 */

typedef struct _MAP_REGISTER_ENTRY
{
  /* 0x0000 */ void* MapRegister;
  /* 0x0004 */ unsigned char WriteToDevice;
  /* 0x0005 */ char __PADDING__[3];
} MAP_REGISTER_ENTRY, *PMAP_REGISTER_ENTRY; /* size: 0x0008 */

struct DOT11_HRDSSS_PHY_ATTRIBUTES
{
  /* 0x0000 */ unsigned char bShortPreambleOptionImplemented;
  /* 0x0001 */ unsigned char bPBCCOptionImplemented;
  /* 0x0002 */ unsigned char bChannelAgilityPresent;
  /* 0x0003 */ char Padding_82;
  /* 0x0004 */ unsigned long uHRCCAModeSupported;
}; /* size: 0x0008 */

class KPushLockBase
{
  /* 0x0000 */ struct _EX_PUSH_LOCK m_Lock;
}; /* size: 0x0004 */

typedef struct _POWER_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceD1;
  /* 0x0004 */ unsigned long SequenceD2;
  /* 0x0008 */ unsigned long SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE; /* size: 0x000c */

struct _NDIS_TIMER_ENTRY;

struct sockaddr_in
{
  /* 0x0000 */ unsigned short sin_family;
  /* 0x0002 */ unsigned short sin_port;
  /* 0x0004 */ struct in_addr sin_addr;
  /* 0x0008 */ char sin_zero[8];
}; /* size: 0x0010 */

typedef struct _CO_PVC
{
  /* 0x0000 */ void* NdisAfHandle;
  /* 0x0004 */ struct _CO_SPECIFIC_PARAMETERS PvcParameters;
} CO_PVC, *PCO_PVC; /* size: 0x0010 */

typedef struct _NDIS_802_11_VARIABLE_IEs
{
  /* 0x0000 */ unsigned char ElementID;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ unsigned char data[1];
} NDIS_802_11_VARIABLE_IEs, *PNDIS_802_11_VARIABLE_IEs; /* size: 0x0003 */

typedef union _DL_EI48
{
  /* 0x0000 */ unsigned char Byte[3];
} DL_EI48, *PDL_EI48; /* size: 0x0003 */

typedef struct _NDIS_WATCHDOG_TRIAGE_BLOCK
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long TimeoutMilliseconds;
  /* 0x0008 */ unsigned __int64 GlobalTriage;
  /* 0x0010 */ unsigned __int64 TargetObject;
  /* 0x0018 */ unsigned __int64 StartTime;
  /* 0x0020 */ unsigned __int64 PrimaryThread;
  /* 0x0028 */ unsigned __int64 ExtraArgument;
  /* 0x0030 */ unsigned char Pending9FDetected;
  /* 0x0031 */ char Padding_83[7];
  /* 0x0038 */ unsigned __int64 TargetInstructionPointer;
} NDIS_WATCHDOG_TRIAGE_BLOCK, *PNDIS_WATCHDOG_TRIAGE_BLOCK; /* size: 0x0040 */

struct FEATURE_LOGGED_TRAITS
{
  /* 0x0000 */ unsigned short version;
  /* 0x0002 */ unsigned short baseVersion;
  /* 0x0004 */ unsigned char stage;
  /* 0x0005 */ char __PADDING__[1];
}; /* size: 0x0006 */

typedef struct _NDIS_NSI_INTERFACE_ENUM_ROD
{
  /* 0x0000 */ unsigned int CompartmentId;
  /* 0x0004 */ struct _GUID NetworkGuid;
  /* 0x0014 */ struct _IF_COUNTED_STRING_LH ifAlias;
  /* 0x0218 */ enum _NET_IF_OPER_STATUS ifOperStatus;
  /* 0x021c */ unsigned long ifOperStatusFlags;
  /* 0x0220 */ unsigned long ifMtu;
  /* 0x0224 */ struct _IF_PHYSICAL_ADDRESS_LH ifPhysAddress;
  /* 0x0246 */ struct _IF_PHYSICAL_ADDRESS_LH PermanentPhysAddress;
  /* 0x0268 */ enum _NET_IF_ADMIN_STATUS ifAdminStatus;
  /* 0x026c */ long Padding_84;
  /* 0x0270 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0278 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0280 */ unsigned char ifPromiscuousMode;
  /* 0x0281 */ unsigned char ifDeviceWakeUpEnable;
  /* 0x0282 */ unsigned char ifHideInterfaceInUi;
  /* 0x0283 */ char Padding_85;
  /* 0x0284 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0288 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x028c */ long __PADDING__[1];
} NDIS_NSI_INTERFACE_ENUM_ROD, *PNDIS_NSI_INTERFACE_ENUM_ROD; /* size: 0x0290 */

class wil::last_error_context
{
}; /* size: 0x0001 */

typedef struct _WWAN_PIN_DESC
{
  /* 0x0000 */ enum _WWAN_PIN_MODE PinMode;
  /* 0x0004 */ enum _WWAN_PIN_FORMAT PinFormat;
  /* 0x0008 */ unsigned long PinLengthMin;
  /* 0x000c */ unsigned long PinLengthMax;
} WWAN_PIN_DESC, *PWWAN_PIN_DESC; /* size: 0x0010 */

typedef struct _NDIS_PROTOCOL_DRIVER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char MajorNdisVersion;
  /* 0x0005 */ unsigned char MinorNdisVersion;
  /* 0x0006 */ unsigned char MajorDriverVersion;
  /* 0x0007 */ unsigned char MinorDriverVersion;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _UNICODE_STRING Name;
  /* 0x0014 */ void* SetOptionsHandler /* function */;
  /* 0x0018 */ void* BindAdapterHandlerEx /* function */;
  /* 0x001c */ void* UnbindAdapterHandlerEx /* function */;
  /* 0x0020 */ void* OpenAdapterCompleteHandlerEx /* function */;
  /* 0x0024 */ void* CloseAdapterCompleteHandlerEx /* function */;
  /* 0x0028 */ void* NetPnPEventHandler /* function */;
  /* 0x002c */ void* UninstallHandler /* function */;
  /* 0x0030 */ void* OidRequestCompleteHandler /* function */;
  /* 0x0034 */ void* StatusHandlerEx /* function */;
  /* 0x0038 */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x003c */ void* SendNetBufferListsCompleteHandler /* function */;
  /* 0x0040 */ void* DirectOidRequestCompleteHandler /* function */;
} NDIS_PROTOCOL_DRIVER_CHARACTERISTICS, *PNDIS_PROTOCOL_DRIVER_CHARACTERISTICS; /* size: 0x0044 */

typedef union _NET_BUFFER_LIST_HEADER
{
  union
  {
    /* 0x0000 */ struct _NET_BUFFER_LIST_DATA NetBufferListData;
    /* 0x0000 */ union _SLIST_HEADER Link;
  }; /* size: 0x0008 */
} NET_BUFFER_LIST_HEADER, *PNET_BUFFER_LIST_HEADER; /* size: 0x0008 */

struct _EJOB;

typedef struct _IO_DRIVER_CREATE_CONTEXT
{
  /* 0x0000 */ short Size;
  /* 0x0002 */ char Padding_86[2];
  /* 0x0004 */ struct _ECP_LIST* ExtraCreateParameter;
  /* 0x0008 */ void* DeviceObjectHint;
  /* 0x000c */ struct _TXN_PARAMETER_BLOCK* TxnParameters;
  /* 0x0010 */ struct _EJOB* SiloContext;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT; /* size: 0x0014 */

typedef struct _TXN_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short TxFsContext;
  /* 0x0004 */ void* TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK; /* size: 0x0008 */

typedef struct _IO_PRIORITY_INFO
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long ThreadPriority;
  /* 0x0008 */ unsigned long PagePriority;
  /* 0x000c */ enum _IO_PRIORITY_HINT IoPriority;
} IO_PRIORITY_INFO, *PIO_PRIORITY_INFO; /* size: 0x0010 */

typedef struct _NDIS_SG_DMA_DESCRIPTION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MaximumPhysicalMapping;
  /* 0x000c */ void* ProcessSGListHandler /* function */;
  /* 0x0010 */ void* SharedMemAllocateCompleteHandler /* function */;
  /* 0x0014 */ unsigned long ScatterGatherListSize;
} NDIS_SG_DMA_DESCRIPTION, *PNDIS_SG_DMA_DESCRIPTION; /* size: 0x0018 */

typedef struct _NDIS_CONNECTION_INFO
{
  /* 0x0000 */ unsigned char MacAddress[6];
  /* 0x0006 */ char Padding_87[2];
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long SourceIPv4Address;
      /* 0x000c */ unsigned long DestinationIPv4Address;
      /* 0x0010 */ unsigned char Protocol;
      /* 0x0011 */ char __PADDING__[3];
    } /* size: 0x000c */ IPv4Info;
    struct
    {
      /* 0x0008 */ unsigned char SourceIPv6Address[16];
      /* 0x0018 */ unsigned char DestinationIPv6Address[16];
      /* 0x0028 */ unsigned char Protocol;
    } /* size: 0x0021 */ IPv6Info;
  }; /* size: 0x0021 */
  /* 0x0029 */ char Padding_88[3];
  union
  {
    struct
    {
      /* 0x002c */ unsigned short SourceTcpPort;
      /* 0x002e */ unsigned short DestinationTcpPort;
    } /* size: 0x0004 */ TcpPortInfo;
    struct
    {
      /* 0x002c */ unsigned short SourceUdpPort;
      /* 0x002e */ unsigned short DestinationUdpPort;
    } /* size: 0x0004 */ UdpPortInfo;
  }; /* size: 0x0004 */
} NDIS_CONNECTION_INFO, *PNDIS_CONNECTION_INFO; /* size: 0x0030 */

typedef struct _DEVPROPCOMPKEY
{
  /* 0x0000 */ struct _DEVPROPKEY Key;
  /* 0x0014 */ enum _DEVPROPSTORE Store;
  /* 0x0018 */ const wchar_t* LocaleName;
} DEVPROPCOMPKEY, *PDEVPROPCOMPKEY; /* size: 0x001c */

typedef struct _OBJECT_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long HandleAttributes;
  /* 0x0004 */ unsigned long GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION; /* size: 0x0008 */

typedef struct _OBJECT_TYPE_INITIALIZER
{
  /* 0x0000 */ unsigned short Length;
  union
  {
    /* 0x0002 */ unsigned short ObjectTypeFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned char CaseInsensitive : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned char UnnamedObjectsOnly : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned char UseDefaultObject : 1; /* bit position: 2 */
        /* 0x0002 */ unsigned char SecurityRequired : 1; /* bit position: 3 */
        /* 0x0002 */ unsigned char MaintainHandleCount : 1; /* bit position: 4 */
        /* 0x0002 */ unsigned char MaintainTypeList : 1; /* bit position: 5 */
        /* 0x0002 */ unsigned char SupportsObjectCallbacks : 1; /* bit position: 6 */
        /* 0x0002 */ unsigned char CacheAligned : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0003 */ unsigned char UseExtendedParameters : 1; /* bit position: 0 */
        /* 0x0003 */ unsigned char Reserved : 7; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned long ObjectTypeCode;
  /* 0x0008 */ unsigned long InvalidAttributes;
  /* 0x000c */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x001c */ unsigned long ValidAccessMask;
  /* 0x0020 */ unsigned long RetainAccess;
  /* 0x0024 */ enum _POOL_TYPE PoolType;
  /* 0x0028 */ unsigned long DefaultPagedPoolCharge;
  /* 0x002c */ unsigned long DefaultNonPagedPoolCharge;
  /* 0x0030 */ void* DumpProcedure /* function */;
  /* 0x0034 */ void* OpenProcedure /* function */;
  /* 0x0038 */ void* CloseProcedure /* function */;
  /* 0x003c */ void* DeleteProcedure /* function */;
  union
  {
    /* 0x0040 */ void* ParseProcedure /* function */;
    /* 0x0040 */ void* ParseProcedureEx /* function */;
  }; /* size: 0x0004 */
  /* 0x0044 */ void* SecurityProcedure /* function */;
  /* 0x0048 */ void* QueryNameProcedure /* function */;
  /* 0x004c */ void* OkayToCloseProcedure /* function */;
  /* 0x0050 */ unsigned long WaitObjectFlagMask;
  /* 0x0054 */ unsigned short WaitObjectFlagOffset;
  /* 0x0056 */ unsigned short WaitObjectPointerOffset;
} OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER; /* size: 0x0058 */

typedef struct _OBJECT_TYPE
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0008 */ struct _UNICODE_STRING Name;
  /* 0x0010 */ void* DefaultObject;
  /* 0x0014 */ unsigned char Index;
  /* 0x0015 */ char Padding_89[3];
  /* 0x0018 */ unsigned long TotalNumberOfObjects;
  /* 0x001c */ unsigned long TotalNumberOfHandles;
  /* 0x0020 */ unsigned long HighWaterNumberOfObjects;
  /* 0x0024 */ unsigned long HighWaterNumberOfHandles;
  /* 0x0028 */ struct _OBJECT_TYPE_INITIALIZER TypeInfo;
  /* 0x0080 */ struct _EX_PUSH_LOCK TypeLock;
  /* 0x0084 */ unsigned long Key;
  /* 0x0088 */ struct _LIST_ENTRY CallbackList;
} OBJECT_TYPE, *POBJECT_TYPE; /* size: 0x0090 */

typedef struct _NDIS_WWAN_SMS_READ
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SMS_READ SmsRead;
} NDIS_WWAN_SMS_READ, *PNDIS_WWAN_SMS_READ; /* size: 0x0010 */

typedef struct _tlgTypeMapBase<long>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<long>, *PtlgTypeMapBase<long>; /* size: 0x0001 */

typedef struct _OBJECT_DUMP_CONTROL
{
  /* 0x0000 */ void* Stream;
  /* 0x0004 */ unsigned long Detail;
} OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL; /* size: 0x0008 */

typedef struct _NET_PHYSICAL_LOCATION_LH
{
  /* 0x0000 */ unsigned long BusNumber;
  /* 0x0004 */ unsigned long SlotNumber;
  /* 0x0008 */ unsigned long FunctionNumber;
} NET_PHYSICAL_LOCATION_LH, *PNET_PHYSICAL_LOCATION_LH; /* size: 0x000c */

typedef struct _NET_IF_INFORMATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _NET_PHYSICAL_LOCATION_LH PhysicalLocation;
  /* 0x0014 */ unsigned long WanTunnelType;
  /* 0x0018 */ unsigned long PortNumber;
  /* 0x001c */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x0020 */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x0024 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x0028 */ unsigned char ifConnectorPresent;
  /* 0x0029 */ char Padding_90;
  /* 0x002a */ unsigned short PhysAddressLength;
  /* 0x002c */ unsigned short PhysAddressOffset;
  /* 0x002e */ unsigned short PermanentPhysAddressOffset;
  /* 0x0030 */ unsigned short FriendlyNameLength;
  /* 0x0032 */ unsigned short FriendlyNameOffset;
  /* 0x0034 */ struct _GUID InterfaceGuid;
  /* 0x0044 */ struct _GUID NetworkGuid;
  /* 0x0054 */ unsigned long SupportedStatistics;
  /* 0x0058 */ enum _NDIS_MEDIUM MediaType;
  /* 0x005c */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
} NET_IF_INFORMATION, *PNET_IF_INFORMATION; /* size: 0x0060 */

typedef struct _NPI_MODULEID
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_91[2];
  /* 0x0004 */ enum _NPI_MODULEID_TYPE Type;
  union
  {
    /* 0x0008 */ struct _GUID Guid;
    struct
    {
      /* 0x0008 */ struct _LUID IfLuid;
      /* 0x0010 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} NPI_MODULEID, *PNPI_MODULEID; /* size: 0x0018 */

typedef struct _tlgWrapSid<_SID>
{
  union
  {
    /* 0x0000 */ const unsigned int DataDescCount;
    /* 0x0000 */ const struct _SID* const Sid;
  }; /* size: 0x0004 */
} tlgWrapSid<_SID>, *PtlgWrapSid<_SID>; /* size: 0x0004 */

struct _DMA_COMMON_BUFFER_VECTOR;

struct NONPAGED_OBJECT<1920226123>
{
}; /* size: 0x0001 */

typedef struct _NDIS_COMMON_OPEN_BLOCK::_QUEUED_CLOSE
{
  /* 0x0000 */ int Status;
  /* 0x0004 */ struct _WORK_QUEUE_ITEM WorkItem;
} NDIS_COMMON_OPEN_BLOCK::_QUEUED_CLOSE, *PNDIS_COMMON_OPEN_BLOCK::_QUEUED_CLOSE; /* size: 0x0014 */

typedef union _NET_BUFFER_DATA_LENGTH
{
  union
  {
    /* 0x0000 */ unsigned long DataLength;
    /* 0x0000 */ unsigned long stDataLength;
  }; /* size: 0x0004 */
} NET_BUFFER_DATA_LENGTH, *PNET_BUFFER_DATA_LENGTH; /* size: 0x0004 */

typedef struct _OB_EXTENDED_PARSE_PARAMETERS
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_92[2];
  /* 0x0004 */ unsigned long RestrictedAccessMask;
  /* 0x0008 */ struct _EJOB* Silo;
} OB_EXTENDED_PARSE_PARAMETERS, *POB_EXTENDED_PARSE_PARAMETERS; /* size: 0x000c */

typedef struct _tlgTypeMapBase<_SID const *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<_SID const *>, *PtlgTypeMapBase<_SID const *>; /* size: 0x0001 */

typedef struct _NDIS_802_11_AUTHENTICATION_REQUEST
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Bssid[6];
  /* 0x000a */ char Padding_93[2];
  /* 0x000c */ unsigned long Flags;
} NDIS_802_11_AUTHENTICATION_REQUEST, *PNDIS_802_11_AUTHENTICATION_REQUEST; /* size: 0x0010 */

typedef struct _NDK_CQ_DISPATCH
{
  /* 0x0000 */ void* NdkCloseCq /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkResizeCq /* function */;
  /* 0x000c */ void* NdkArmCq /* function */;
  /* 0x0010 */ void* NdkGetCqResults /* function */;
  /* 0x0014 */ void* NdkControlCqInterruptModeration /* function */;
  /* 0x0018 */ void* NdkGetCqResultsEx /* function */;
} NDK_CQ_DISPATCH, *PNDK_CQ_DISPATCH; /* size: 0x001c */

struct wil_details_StagingConfigHeader
{
  /* 0x0000 */ unsigned char version;
  /* 0x0001 */ unsigned char versionMinor;
  /* 0x0002 */ unsigned short headerSizeBytes;
  /* 0x0004 */ unsigned short featureCount;
  /* 0x0006 */ unsigned short featureUsageTriggerCount;
  /* 0x0008 */ struct wil_details_StagingConfigHeaderProperties sessionProperties;
  /* 0x000c */ struct wil_details_StagingConfigHeaderProperties properties;
}; /* size: 0x0010 */

typedef struct _tlgTypeMapBase<double>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<double>, *PtlgTypeMapBase<double>; /* size: 0x0001 */

union wil_details_FeatureStateCache
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int stateCached : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned int hasNotificationCached : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned int variantCached : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned int effectiveState : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int desiredState : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned int reservedForKernelModeSupport : 2; /* bit position: 5 */
        /* 0x0000 */ unsigned int hasNotification : 1; /* bit position: 7 */
        /* 0x0000 */ unsigned int isVariant : 1; /* bit position: 8 */
        /* 0x0000 */ unsigned int variant : 6; /* bit position: 9 */
        /* 0x0000 */ unsigned int unused : 17; /* bit position: 15 */
      }; /* bitfield */
      /* 0x0004 */ unsigned int payloadId;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 exchange64;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _OBJECT_NAME_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION; /* size: 0x0008 */

typedef struct _NDIS_GFP_ETHERNET_HEADER_FIELDS
{
  /* 0x0000 */ unsigned char DestinationMacAddress[6];
  /* 0x0006 */ unsigned char SourceMacAddress[6];
  /* 0x000c */ unsigned short EthType;
  /* 0x000e */ unsigned short CustomerVlanId;
  /* 0x0010 */ unsigned short ProviderVlanId;
  /* 0x0012 */ unsigned char Priority;
  /* 0x0013 */ char __PADDING__[1];
} NDIS_GFP_ETHERNET_HEADER_FIELDS, *PNDIS_GFP_ETHERNET_HEADER_FIELDS; /* size: 0x0014 */

typedef struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH
{
  /* 0x0000 */ struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH SourceIPv4Address;
  /* 0x000c */ struct _NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH DestinationIPv4Address;
} NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH, *PNDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH; /* size: 0x0018 */

struct in6_addr
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned char Byte[16];
      /* 0x0000 */ unsigned short Word[8];
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
}; /* size: 0x0010 */

typedef struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH
{
  /* 0x0000 */ enum _NDIS_GFP_WILDCARD_MATCH_TYPE MatchType;
  /* 0x0004 */ struct in6_addr IPAddress;
  union
  {
    union
    {
      /* 0x0014 */ unsigned long PrefixLength;
      /* 0x0014 */ unsigned long RangeSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ MatchValue;
} NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH, *PNDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH; /* size: 0x0018 */

typedef struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH
{
  /* 0x0000 */ struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH SourceIPv6Address;
  /* 0x0018 */ struct _NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH DestinationIPv6Address;
} NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH, *PNDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH; /* size: 0x0030 */

typedef union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH
{
  union
  {
    /* 0x0000 */ struct _NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPv4SrcAndDestAddress;
    /* 0x0000 */ struct _NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPv6SrcAndDestAddress;
  }; /* size: 0x0030 */
} NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH, *PNDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH; /* size: 0x0030 */

typedef struct _NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long ProfileId;
  /* 0x000c */ unsigned long HeadersPresent;
  /* 0x0010 */ unsigned __int64 MatchFields;
  /* 0x0018 */ struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
  /* 0x002c */ union _NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH IPSrcAndDestAddress;
  /* 0x005c */ unsigned char Dscp;
  /* 0x005d */ unsigned char IPProtocol;
  /* 0x005e */ char Padding_94[2];
  union
  {
    union
    {
      struct
      {
        /* 0x0060 */ struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH UdpSrcAndDestPort;
      } /* size: 0x0010 */ UdpHeader;
      struct
      {
        /* 0x0060 */ struct _NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH TcpSrcAndDestPort;
        /* 0x0070 */ unsigned char TcpFlags;
        /* 0x0071 */ char __PADDING__[3];
      } /* size: 0x0014 */ TcpHeader;
      struct
      {
        /* 0x0060 */ unsigned char Type;
        /* 0x0061 */ unsigned char Code;
      } /* size: 0x0002 */ IcmpHeader;
      struct
      {
        /* 0x0060 */ unsigned long TenantId;
        /* 0x0064 */ unsigned short GreProtocol;
        /* 0x0066 */ char __PADDING__[2];
      } /* size: 0x0008 */ Encapsulation;
    }; /* size: 0x0014 */
  } /* size: 0x0014 */ TransportOrEncapsulation;
  /* 0x0074 */ long __PADDING__[1];
} NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH, *PNDIS_GFP_HEADER_GROUP_WILDCARD_MATCH; /* size: 0x0078 */

typedef struct _tlgCharTraits<char16_t>
{
} tlgCharTraits<char16_t>, *PtlgCharTraits<char16_t>; /* size: 0x0001 */

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PlatformId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Timestamp : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PartitionId : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS; /* size: 0x0004 */

typedef union _WHEA_TIMESTAMP
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Seconds : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Minutes : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Hours : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Precise : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 Day : 8; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 Month : 8; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Year : 8; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 Century : 8; /* bit position: 56 */
    }; /* bitfield */
    /* 0x0000 */ union _LARGE_INTEGER AsLARGE_INTEGER;
  }; /* size: 0x0008 */
} WHEA_TIMESTAMP, *PWHEA_TIMESTAMP; /* size: 0x0008 */

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long DeviceDriver : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long CriticalEvent : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PersistPfn : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_RECORD_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ union _WHEA_REVISION Revision;
  /* 0x0006 */ unsigned long SignatureEnd;
  /* 0x000a */ unsigned short SectionCount;
  /* 0x000c */ enum _WHEA_ERROR_SEVERITY Severity;
  /* 0x0010 */ union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ union _WHEA_TIMESTAMP Timestamp;
  /* 0x0020 */ struct _GUID PlatformId;
  /* 0x0030 */ struct _GUID PartitionId;
  /* 0x0040 */ struct _GUID CreatorId;
  /* 0x0050 */ struct _GUID NotifyType;
  /* 0x0060 */ unsigned __int64 RecordId;
  /* 0x0068 */ union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  /* 0x006c */ union _WHEA_PERSISTENCE_INFO PersistenceInfo;
  /* 0x0074 */ unsigned char Reserved[12];
} WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER; /* size: 0x0080 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Primary : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ContainmentWarning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reset : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long ThresholdExceeded : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ResourceNotAvailable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long LatentError : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Propagated : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long Reserved : 25; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  /* 0x0000 */ unsigned long SectionOffset;
  /* 0x0004 */ unsigned long SectionLength;
  /* 0x0008 */ union _WHEA_REVISION Revision;
  /* 0x000a */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ struct _GUID SectionType;
  /* 0x0020 */ struct _GUID FRUId;
  /* 0x0030 */ enum _WHEA_ERROR_SEVERITY SectionSeverity;
  /* 0x0034 */ char FRUText[20];
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR; /* size: 0x0048 */

typedef struct _WHEA_ERROR_RECORD
{
  /* 0x0000 */ struct _WHEA_ERROR_RECORD_HEADER Header;
  /* 0x0080 */ struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
} WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD; /* size: 0x00c8 */

struct FEATURE_STATE_CHANGE_SUBSCRIPTION__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _DMA_TRANSFER_INFO_V2
{
  /* 0x0000 */ unsigned long MapRegisterCount;
  /* 0x0004 */ unsigned long ScatterGatherElementCount;
  /* 0x0008 */ unsigned long ScatterGatherListSize;
  /* 0x000c */ unsigned long LogicalPageCount;
} DMA_TRANSFER_INFO_V2, *PDMA_TRANSFER_INFO_V2; /* size: 0x0010 */

typedef struct _GEN_GET_TIME_CAPS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ClockPrecision;
} GEN_GET_TIME_CAPS, *PGEN_GET_TIME_CAPS; /* size: 0x0008 */

struct sockaddr_in6
{
  /* 0x0000 */ unsigned short sin6_family;
  /* 0x0002 */ unsigned short sin6_port;
  /* 0x0004 */ unsigned long sin6_flowinfo;
  /* 0x0008 */ struct in6_addr sin6_addr;
  union
  {
    /* 0x0018 */ unsigned long sin6_scope_id;
    /* 0x0018 */ struct SCOPE_ID sin6_scope_struct;
  }; /* size: 0x0004 */
}; /* size: 0x001c */

typedef struct _NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Unused : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long MSS : 20; /* bit position: 0 */
        /* 0x0000 */ unsigned long TcpHeaderOffset : 10; /* bit position: 20 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV1Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long TcpPayload : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV1TransmitComplete;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long MSS : 20; /* bit position: 0 */
        /* 0x0000 */ unsigned long TcpHeaderOffset : 10; /* bit position: 20 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long IPVersion : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV2Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Type : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Reserved2 : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ LsoV2TransmitComplete;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0004 */
} NDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO, *PNDIS_TCP_LARGE_SEND_OFFLOAD_NET_BUFFER_LIST_INFO; /* size: 0x0004 */

typedef struct _NDIS_PACKET
{
  /* 0x0000 */ struct _NDIS_PACKET_PRIVATE Private;
  union
  {
    struct
    {
      /* 0x0020 */ unsigned char MiniportReserved[8];
      /* 0x0028 */ unsigned char WrapperReserved[8];
    }; /* size: 0x0010 */
    struct
    {
      /* 0x0020 */ unsigned char MiniportReservedEx[12];
      /* 0x002c */ unsigned char WrapperReservedEx[4];
    }; /* size: 0x0010 */
    /* 0x0020 */ unsigned char MacReserved[16];
  }; /* size: 0x0010 */
  /* 0x0030 */ unsigned long Reserved[2];
  /* 0x0038 */ unsigned char ProtocolReserved[1];
  /* 0x0039 */ char __PADDING__[3];
} NDIS_PACKET, *PNDIS_PACKET; /* size: 0x003c */

typedef struct _NET_BUFFER_LIST
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _NET_BUFFER_LIST* Next;
      /* 0x0004 */ struct _NET_BUFFER* FirstNetBuffer;
    }; /* size: 0x0008 */
    /* 0x0000 */ union _SLIST_HEADER Link;
    /* 0x0000 */ union _NET_BUFFER_LIST_HEADER NetBufferListHeader;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _NET_BUFFER_LIST_CONTEXT* Context;
  /* 0x000c */ struct _NET_BUFFER_LIST* ParentNetBufferList;
  /* 0x0010 */ void* NdisPoolHandle;
  /* 0x0014 */ long Padding_95;
  /* 0x0018 */ void* NdisReserved[2];
  /* 0x0020 */ void* ProtocolReserved[4];
  /* 0x0030 */ void* MiniportReserved[2];
  /* 0x0038 */ void* Scratch;
  /* 0x003c */ void* SourceHandle;
  /* 0x0040 */ unsigned long NblFlags;
  /* 0x0044 */ long ChildRefCount;
  /* 0x0048 */ unsigned long Flags;
  union
  {
    /* 0x004c */ int Status;
    /* 0x004c */ unsigned long NdisReserved2;
  }; /* size: 0x0004 */
  /* 0x0050 */ void* NetBufferListInfo[29];
  /* 0x00c4 */ long __PADDING__[1];
} NET_BUFFER_LIST, *PNET_BUFFER_LIST; /* size: 0x00c8 */

struct KALLOCATION_TAG<1282164290,1>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _NET_BUFFER_DATA
{
  /* 0x0000 */ struct _NET_BUFFER* Next;
  /* 0x0004 */ struct _MDL* CurrentMdl;
  /* 0x0008 */ unsigned long CurrentMdlOffset;
  /* 0x000c */ union _NET_BUFFER_DATA_LENGTH NbDataLength;
  /* 0x0010 */ struct _MDL* MdlChain;
  /* 0x0014 */ unsigned long DataOffset;
} NET_BUFFER_DATA, *PNET_BUFFER_DATA; /* size: 0x0018 */

typedef union _NET_BUFFER_HEADER
{
  union
  {
    /* 0x0000 */ struct _NET_BUFFER_DATA NetBufferData;
    /* 0x0000 */ union _SLIST_HEADER Link;
  }; /* size: 0x0018 */
} NET_BUFFER_HEADER, *PNET_BUFFER_HEADER; /* size: 0x0018 */

typedef struct _NET_BUFFER
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _NET_BUFFER* Next;
      /* 0x0004 */ struct _MDL* CurrentMdl;
      /* 0x0008 */ unsigned long CurrentMdlOffset;
      union
      {
        /* 0x000c */ unsigned long DataLength;
        struct
        {
          /* 0x000c */ unsigned long stDataLength;
          /* 0x0010 */ struct _MDL* MdlChain;
          /* 0x0014 */ unsigned long DataOffset;
        }; /* size: 0x000c */
      }; /* size: 0x000c */
    }; /* size: 0x0018 */
    /* 0x0000 */ union _SLIST_HEADER Link;
    /* 0x0000 */ union _NET_BUFFER_HEADER NetBufferHeader;
  }; /* size: 0x0018 */
  /* 0x0018 */ unsigned short ChecksumBias;
  /* 0x001a */ unsigned short Reserved;
  /* 0x001c */ void* NdisPoolHandle;
  /* 0x0020 */ void* NdisReserved[2];
  /* 0x0028 */ void* ProtocolReserved[6];
  /* 0x0040 */ void* MiniportReserved[4];
  /* 0x0050 */ union _LARGE_INTEGER DataPhysicalAddress;
  union
  {
    /* 0x0058 */ struct _NET_BUFFER_SHARED_MEMORY* SharedMemoryInfo;
    /* 0x0058 */ struct _SCATTER_GATHER_LIST* ScatterGatherList;
  }; /* size: 0x0004 */
  /* 0x005c */ long __PADDING__[1];
} NET_BUFFER, *PNET_BUFFER; /* size: 0x0060 */

typedef struct _SCATTER_GATHER_ELEMENT
{
  /* 0x0000 */ union _LARGE_INTEGER Address;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long Reserved;
} SCATTER_GATHER_ELEMENT, *PSCATTER_GATHER_ELEMENT; /* size: 0x0010 */

typedef struct _SCATTER_GATHER_LIST
{
  /* 0x0000 */ unsigned long NumberOfElements;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ struct _SCATTER_GATHER_ELEMENT* Elements /* zero-length array */;
} SCATTER_GATHER_LIST, *PSCATTER_GATHER_LIST; /* size: 0x0008 */

typedef struct _BSSID_INFO
{
  /* 0x0000 */ unsigned char BSSID[6];
  /* 0x0006 */ unsigned char PMKID[16];
} BSSID_INFO, *PBSSID_INFO; /* size: 0x0016 */

typedef struct _NDIS_802_11_PMKID
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long BSSIDInfoCount;
  /* 0x0008 */ struct _BSSID_INFO BSSIDInfo[1];
  /* 0x001e */ char __PADDING__[2];
} NDIS_802_11_PMKID, *PNDIS_802_11_PMKID; /* size: 0x0020 */

typedef struct _NET_BUFFER_LIST_TIMESTAMP
{
  /* 0x0000 */ unsigned __int64 Timestamp;
} NET_BUFFER_LIST_TIMESTAMP, *PNET_BUFFER_LIST_TIMESTAMP; /* size: 0x0008 */

typedef struct _NDIS_FILTER_ATTACH_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long IfIndex;
  /* 0x0008 */ union _NET_LUID_LH NetLuid;
  /* 0x0010 */ struct _UNICODE_STRING* FilterModuleGuidName;
  /* 0x0014 */ unsigned long BaseMiniportIfIndex;
  /* 0x0018 */ struct _UNICODE_STRING* BaseMiniportInstanceName;
  /* 0x001c */ struct _UNICODE_STRING* BaseMiniportName;
  /* 0x0020 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0024 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0028 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0030 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0038 */ enum _NDIS_MEDIUM MiniportMediaType;
  /* 0x003c */ enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
  /* 0x0040 */ void* MiniportMediaSpecificAttributes;
  /* 0x0044 */ struct _NDIS_OFFLOAD* DefaultOffloadConfiguration;
  /* 0x0048 */ unsigned short MacAddressLength;
  /* 0x004a */ unsigned char CurrentMacAddress[32];
  /* 0x006a */ char Padding_96[6];
  /* 0x0070 */ union _NET_LUID_LH BaseMiniportNetLuid;
  /* 0x0078 */ unsigned long LowerIfIndex;
  /* 0x007c */ long Padding_97;
  /* 0x0080 */ union _NET_LUID_LH LowerIfNetLuid;
  /* 0x0088 */ unsigned long Flags;
  /* 0x008c */ struct _NDIS_HD_SPLIT_CURRENT_CONFIG* HDSplitCurrentConfig;
  /* 0x0090 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* ReceiveFilterCapabilities;
  /* 0x0094 */ struct _DEVICE_OBJECT* MiniportPhysicalDeviceObject;
  /* 0x0098 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* NicSwitchCapabilities;
  /* 0x009c */ unsigned char BaseMiniportIfConnectorPresent;
  /* 0x009d */ char Padding_98[3];
  /* 0x00a0 */ struct _NDIS_SRIOV_CAPABILITIES* SriovCapabilities;
  /* 0x00a4 */ struct _NDIS_NIC_SWITCH_INFO_ARRAY* NicSwitchArray;
} NDIS_FILTER_ATTACH_PARAMETERS, *PNDIS_FILTER_ATTACH_PARAMETERS; /* size: 0x00a8 */

typedef struct _NDIS_DRIVER_WRAPPER_HANDLE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* NdisWrapperHandle;
} NDIS_DRIVER_WRAPPER_HANDLE, *PNDIS_DRIVER_WRAPPER_HANDLE; /* size: 0x0008 */

typedef union _DL_OUI
{
  union
  {
    /* 0x0000 */ unsigned char Byte[3];
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Group : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Local : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0003 */
} DL_OUI, *PDL_OUI; /* size: 0x0003 */

typedef union _DL_EUI48
{
  union
  {
    /* 0x0000 */ unsigned char Byte[6];
    struct
    {
      /* 0x0000 */ union _DL_OUI Oui;
      /* 0x0003 */ union _DL_EI48 Ei48;
    }; /* size: 0x0006 */
  }; /* size: 0x0006 */
} DL_EUI48, *PDL_EUI48; /* size: 0x0006 */

typedef struct _NDIS_QOS_SQ_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SqId;
  /* 0x000c */ enum _NDIS_QOS_SQ_TYPE SqType;
  /* 0x0010 */ unsigned char TcEnabledTable[8];
  /* 0x0018 */ unsigned long TcTransmitBandwidthCapTable[8];
  /* 0x0038 */ unsigned long TcTransmitBandwidthReservationTable[8];
  /* 0x0058 */ unsigned long TcReceiveBandwidthCapTable[8];
  /* 0x0078 */ unsigned long CrossTcTransmitBandwidthCap;
  /* 0x007c */ unsigned long MaxNumSqInputs;
} NDIS_QOS_SQ_PARAMETERS, *PNDIS_QOS_SQ_PARAMETERS; /* size: 0x0080 */

class KRundown
{
}; /* size: 0x0004 */

typedef struct _NDIS_STATUS_INDICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* SourceHandle;
  /* 0x0008 */ unsigned long PortNumber;
  /* 0x000c */ int StatusCode;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ void* DestinationHandle;
  /* 0x0018 */ void* RequestId;
  /* 0x001c */ void* StatusBuffer;
  /* 0x0020 */ unsigned long StatusBufferSize;
  /* 0x0024 */ struct _GUID Guid;
  /* 0x0034 */ void* NdisReserved[4];
} NDIS_STATUS_INDICATION, *PNDIS_STATUS_INDICATION; /* size: 0x0044 */

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  /* 0x0000 */ unsigned short Reserved1;
  /* 0x0002 */ unsigned short ExtType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned short Linkage : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned short Reserved2 : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0006 */ unsigned short DataSize;
  /* 0x0008 */ unsigned __int64 DataPtr;
} EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM; /* size: 0x0010 */

typedef struct _PERFINFO_GROUPMASK
{
  /* 0x0000 */ unsigned long Masks[8];
} PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK; /* size: 0x0020 */

typedef struct _PPL_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _LOOKASIDE_LIST_EX List;
  /* 0x0048 */ struct _LOOKASIDE_LIST_EX* BackendList;
  /* 0x004c */ unsigned long Lock;
  /* 0x0050 */ unsigned char Initialized;
  /* 0x0051 */ char __PADDING__[47];
} PPL_LOOKASIDE_LIST, *PPPL_LOOKASIDE_LIST; /* size: 0x0080 */

typedef struct _PPL_LOOKASIDE_LIST_ARRAY
{
  /* 0x0000 */ unsigned long ValidEntryCount;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Tag;
  /* 0x000c */ unsigned long LookasideTag;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ enum _POOL_TYPE PoolType;
  /* 0x0018 */ unsigned short Depth;
  /* 0x001a */ char Padding_99[2];
  /* 0x001c */ struct _PPL_LOOKASIDE_LIST** LookasideLists;
  /* 0x0020 */ long __PADDING__[8];
} PPL_LOOKASIDE_LIST_ARRAY, *PPPL_LOOKASIDE_LIST_ARRAY; /* size: 0x0040 */

struct PNDIS_PER_PROCESSOR_SLOT__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY
{
  /* 0x0000 */ struct _NET_BUFFER_LIST* FirstNbl;
  /* 0x0004 */ struct _NET_BUFFER_LIST* LastNbl;
  /* 0x0008 */ unsigned char IterationInProgress;
  /* 0x0009 */ char __PADDING__[3];
} NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY, *PNDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY; /* size: 0x000c */

typedef struct _NDIS_IF_BLOCK
{
  /* 0x0000 */ long Padding_100[308];
  /* 0x04d0 */ struct _LIST_ENTRY Link;
  /* 0x04d8 */ struct _LIST_ENTRY ProviderLink;
  /* 0x04e0 */ struct _LIST_ENTRY NetworkLink;
  /* 0x04e8 */ struct _NDIS_IF_RCV_ADDRESS* ifRcvAddressTable;
  /* 0x04ec */ unsigned long ifRcvAddressCount;
  /* 0x04f0 */ unsigned long ifMaxRcvAddressCount;
  /* 0x04f4 */ unsigned long LowerLayerIfCount;
  /* 0x04f8 */ unsigned long HigherLayerIfCount;
  /* 0x04fc */ long Ref;
  /* 0x0500 */ union _NET_LUID_LH NetLuid;
  /* 0x0508 */ void* ProviderIfContext;
  /* 0x050c */ struct _NDIS_IF_PROVIDER_BLOCK* ProviderHandle;
  /* 0x0510 */ unsigned long Flags;
  /* 0x0514 */ unsigned long WanTunnelType;
  /* 0x0518 */ unsigned long PortNumber;
  /* 0x051c */ long Padding_101;
  /* 0x0520 */ unsigned __int64 ifLastChange;
  /* 0x0528 */ unsigned __int64 ifCounterDiscontinuityTime;
  /* 0x0530 */ struct _NDIS_IF_NETWORK_BLOCK* Network;
  /* 0x0534 */ struct _NDIS_IF_COMPARTMENT_BLOCK* Compartment;
  /* 0x0538 */ struct _KEVENT* AsyncEvent;
  /* 0x053c */ unsigned char AlreadyDeregistered;
  /* 0x053d */ unsigned char bNdisIsProvider;
  /* 0x053e */ unsigned char IsNdisFilter;
  /* 0x053f */ unsigned char MiniportAvailable;
  /* 0x0540 */ unsigned long MiniportLinkReference;
  /* 0x0544 */ enum NdisIfBlockSource Source;
  union
  {
    /* 0x0548 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
    /* 0x0548 */ struct _NDIS_FILTER_BLOCK* Filter;
  }; /* size: 0x0004 */
  /* 0x054c */ unsigned long SupportedStatistics;
  /* 0x0550 */ struct _IF_COUNTED_STRING_LH* ifL2NetworkInfo;
  /* 0x0554 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
  /* 0x0558 */ struct NDIS_REFCOUNT_HANDLE__* MpRefCountTracker;
  /* 0x055c */ unsigned long InterlockedFlags;
  /* 0x0560 */ enum _NDIS_MINIPORT_EVENT LastMiniportFatalErrorReason;
  /* 0x0562 */ char Padding_102[6];
  /* 0x0568 */ unsigned __int64 MiniportFatalErrorTimestamp[3];
  /* 0x0580 */ unsigned char MiniportFatalErrorTimestampIndex;
  /* 0x0581 */ unsigned char NetworkIdOverridden;
  /* 0x0582 */ unsigned char IsWDFMiniportInterface;
  /* 0x0583 */ char Padding_103;
  /* 0x0584 */ enum _NDIS_NSI_INTERFACE_PURPOSE ifPurpose;
  /* 0x0588 */ struct _NDIS_PCW_DATA_BLOCK* PcwDataBlock;
  /* 0x058c */ long __PADDING__[1];
} NDIS_IF_BLOCK, *PNDIS_IF_BLOCK; /* size: 0x0590 */

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char RemoteIPv4Address[4];
  /* 0x0008 */ unsigned char HostIPv4Address[4];
  /* 0x000c */ unsigned char MacAddress[6];
  /* 0x0012 */ char __PADDING__[2];
} NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS, *PNDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS; /* size: 0x0014 */

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char RemoteIPv6Address[16];
  /* 0x0014 */ unsigned char SolicitedNodeIPv6Address[16];
  /* 0x0024 */ unsigned char MacAddress[6];
  /* 0x002a */ unsigned char TargetIPv6Addresses[16][2];
  /* 0x004a */ char __PADDING__[2];
} NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS, *PNDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS; /* size: 0x004c */

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char KCK[16];
  /* 0x0014 */ unsigned char KEK[16];
  /* 0x0024 */ long Padding_104;
  /* 0x0028 */ unsigned __int64 KeyReplayCounter;
} NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS, *PNDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS; /* size: 0x0030 */

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS_V2
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_105;
  /* 0x0008 */ unsigned __int64 KeyReplayCounter;
  /* 0x0010 */ unsigned long AuthAlgo;
  /* 0x0014 */ unsigned long KCKLength;
  /* 0x0018 */ unsigned long KEKLength;
  /* 0x001c */ unsigned char KCK[32];
  /* 0x003c */ unsigned char KEK[32];
  /* 0x005c */ long __PADDING__[1];
} NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS_V2, *PNDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS_V2; /* size: 0x0060 */

typedef union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS
{
  union
  {
    /* 0x0000 */ struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV4_ARP_PARAMETERS IPv4ARPParameters;
    /* 0x0000 */ struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_IPV6_NS_PARAMETERS IPv6NSParameters;
    /* 0x0000 */ struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS Dot11RSNRekeyParameters;
    /* 0x0000 */ struct _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS::_DOT11_RSN_REKEY_PARAMETERS_V2 Dot11RSNRekeyParametersV2;
  }; /* size: 0x0060 */
} NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS, *PNDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS; /* size: 0x0060 */

struct NdisDebugBlock<1935819854>
{
}; /* size: 0x0001 */

typedef struct _NDIS_WDF_COMPLETE_ADD_PARAMS
{
  /* 0x0000 */ union _NET_LUID_LH NetLuid;
  /* 0x0008 */ enum _NDIS_MEDIUM MediaType;
  /* 0x000c */ struct _UNICODE_STRING BaseName;
  /* 0x0014 */ struct _UNICODE_STRING AdapterInstanceName;
  /* 0x001c */ long __PADDING__[1];
} NDIS_WDF_COMPLETE_ADD_PARAMS, *PNDIS_WDF_COMPLETE_ADD_PARAMS; /* size: 0x0020 */

typedef struct _NDIS_GUID
{
  /* 0x0000 */ struct _GUID Guid;
  union
  {
    /* 0x0010 */ unsigned long Oid;
    /* 0x0010 */ int Status;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long Size;
  /* 0x0018 */ unsigned long Flags;
} NDIS_GUID, *PNDIS_GUID; /* size: 0x001c */

union wil_details_RecordedState
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int recordedDeviceUsage : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int recordedDevicePotential : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int recordedDeviceOpportunity : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int recordedDevicePotentialOpportunity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int recordedVariantDeviceUsage : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int recordedVariant : 6; /* bit position: 5 */
      /* 0x0000 */ unsigned int unused : 21; /* bit position: 11 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct wil_details_FeatureReportingCache
{
  /* 0x0000 */ union wil_details_ReportedState reported;
  /* 0x0004 */ union wil_details_RecordedState recorded;
}; /* size: 0x0008 */

struct FEATURE_ERROR
{
  /* 0x0000 */ HRESULT hr;
  /* 0x0004 */ unsigned short lineNumber;
  /* 0x0006 */ char Padding_106[2];
  /* 0x0008 */ const char* file;
  /* 0x000c */ const char* process;
  /* 0x0010 */ const char* modulePath;
  /* 0x0014 */ unsigned int callerReturnAddressOffset;
  /* 0x0018 */ const char* callerModule;
  /* 0x001c */ const char* message;
  /* 0x0020 */ unsigned short originLineNumber;
  /* 0x0022 */ char Padding_107[2];
  /* 0x0024 */ const char* originFile;
  /* 0x0028 */ const char* originModule;
  /* 0x002c */ unsigned int originCallerReturnAddressOffset;
  /* 0x0030 */ const char* originCallerModule;
  /* 0x0034 */ const char* originName;
}; /* size: 0x0038 */

typedef struct _NDK_PD
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_PD_DISPATCH* Dispatch;
} NDK_PD, *PNDK_PD; /* size: 0x001c */

struct _NDIS_INTERRUPT_BLOCK;

struct _NDIS_IF_COMPARTMENT_BLOCK;

typedef struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS
{
  /* 0x0000 */ unsigned char PtpV2OverUdpIPv4EventMsgReceiveHw;
  /* 0x0001 */ unsigned char PtpV2OverUdpIPv4AllMsgReceiveHw;
  /* 0x0002 */ unsigned char PtpV2OverUdpIPv4EventMsgTransmitHw;
  /* 0x0003 */ unsigned char PtpV2OverUdpIPv4AllMsgTransmitHw;
  /* 0x0004 */ unsigned char PtpV2OverUdpIPv6EventMsgReceiveHw;
  /* 0x0005 */ unsigned char PtpV2OverUdpIPv6AllMsgReceiveHw;
  /* 0x0006 */ unsigned char PtpV2OverUdpIPv6EventMsgTransmitHw;
  /* 0x0007 */ unsigned char PtpV2OverUdpIPv6AllMsgTransmitHw;
  /* 0x0008 */ unsigned char AllReceiveHw;
  /* 0x0009 */ unsigned char AllTransmitHw;
  /* 0x000a */ unsigned char TaggedTransmitHw;
  /* 0x000b */ unsigned char AllReceiveSw;
  /* 0x000c */ unsigned char AllTransmitSw;
  /* 0x000d */ unsigned char TaggedTransmitSw;
} NDIS_TIMESTAMP_CAPABILITY_FLAGS, *PNDIS_TIMESTAMP_CAPABILITY_FLAGS; /* size: 0x000e */

typedef struct _NDIS_TIMESTAMP_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ long Padding_108;
  /* 0x0008 */ unsigned __int64 HardwareClockFrequencyHz;
  /* 0x0010 */ unsigned char CrossTimestamp;
  /* 0x0011 */ char Padding_109[7];
  /* 0x0018 */ unsigned __int64 Reserved1;
  /* 0x0020 */ unsigned __int64 Reserved2;
  /* 0x0028 */ struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
  /* 0x0036 */ char __PADDING__[2];
} NDIS_TIMESTAMP_CAPABILITIES, *PNDIS_TIMESTAMP_CAPABILITIES; /* size: 0x0038 */

typedef struct _RTL_FEATURE_CONFIGURATION
{
  /* 0x0000 */ unsigned int FeatureId;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int Priority : 4; /* bit position: 0 */
    /* 0x0004 */ unsigned int EnabledState : 2; /* bit position: 4 */
    /* 0x0004 */ unsigned int IsWexpConfiguration : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned int HasSubscriptions : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned int Variant : 6; /* bit position: 8 */
    /* 0x0004 */ unsigned int VariantPayloadKind : 2; /* bit position: 14 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int VariantPayload;
} RTL_FEATURE_CONFIGURATION, *PRTL_FEATURE_CONFIGURATION; /* size: 0x000c */

typedef struct _RTL_FEATURE_USAGE_REPORT
{
  /* 0x0000 */ unsigned int FeatureId;
  /* 0x0004 */ unsigned short ReportingKind;
  /* 0x0006 */ unsigned short ReportingOptions;
} RTL_FEATURE_USAGE_REPORT, *PRTL_FEATURE_USAGE_REPORT; /* size: 0x0008 */

struct wil_details_FeatureTestState
{
  /* 0x0000 */ enum wil_details_FeatureTestStateKind kind;
  /* 0x0004 */ unsigned int featureId;
  /* 0x0008 */ enum wil_FeatureEnabledState state;
  /* 0x000c */ unsigned char variant;
  /* 0x000d */ char Padding_110[3];
  /* 0x0010 */ unsigned int payload;
  /* 0x0014 */ enum wil_FeatureVariantPayloadKind payloadKind;
  /* 0x0018 */ struct wil_details_FeatureTestState* next;
}; /* size: 0x001c */

typedef struct _NDK_ADAPTER
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_ADAPTER_DISPATCH* Dispatch;
} NDK_ADAPTER, *PNDK_ADAPTER; /* size: 0x001c */

typedef struct _tlgProviderMetadata_t
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ struct _GUID ProviderId;
  /* 0x0011 */ unsigned short RemainingSize;
} tlgProviderMetadata_t, *PtlgProviderMetadata_t; /* size: 0x0013 */

typedef struct _tlgWrapperPtrSize
{
  union
  {
    /* 0x0000 */ const unsigned int DataDescCount;
    /* 0x0000 */ const void* const Ptr;
  }; /* size: 0x0004 */
  /* 0x0004 */ const unsigned long Size;
} tlgWrapperPtrSize, *PtlgWrapperPtrSize; /* size: 0x0008 */

typedef struct _NDK_RESULT_EX
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned long BytesTransferred;
  /* 0x0008 */ void* QPContext;
  /* 0x000c */ void* RequestContext;
  /* 0x0010 */ enum _NDK_OPERATION_TYPE Type;
  /* 0x0014 */ unsigned long TypeSpecificCompletionOutput;
} NDK_RESULT_EX, *PNDK_RESULT_EX; /* size: 0x0018 */

typedef struct _tlgWrapperPtrSizeType
{
  union
  {
    /* 0x0000 */ const unsigned int DataDescCount;
    /* 0x0000 */ const void* const Ptr;
  }; /* size: 0x0004 */
  /* 0x0004 */ const unsigned long Size;
  /* 0x0008 */ const unsigned long Reserved;
} tlgWrapperPtrSizeType, *PtlgWrapperPtrSizeType; /* size: 0x000c */

typedef struct _NDK_SHARED_ENDPOINT
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_SHARED_ENDPOINT_DISPATCH* Dispatch;
} NDK_SHARED_ENDPOINT, *PNDK_SHARED_ENDPOINT; /* size: 0x001c */

class KRundownManualConstruct
{
}; /* size: 0x0004 */

struct DOT11_QOS_PARAMS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char ucEnabledQoSProtocolFlags;
  /* 0x0005 */ char __PADDING__[1];
}; /* size: 0x0006 */

typedef struct _NDIS_RECEIVE_FILTER_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EnabledFilterTypes;
  /* 0x000c */ unsigned long EnabledQueueTypes;
  /* 0x0010 */ unsigned long NumQueues;
  /* 0x0014 */ unsigned long SupportedQueueProperties;
  /* 0x0018 */ unsigned long SupportedFilterTests;
  /* 0x001c */ unsigned long SupportedHeaders;
  /* 0x0020 */ unsigned long SupportedMacHeaderFields;
  /* 0x0024 */ unsigned long MaxMacHeaderFilters;
  /* 0x0028 */ unsigned long MaxQueueGroups;
  /* 0x002c */ unsigned long MaxQueuesPerQueueGroup;
  /* 0x0030 */ unsigned long MinLookaheadSplitSize;
  /* 0x0034 */ unsigned long MaxLookaheadSplitSize;
  /* 0x0038 */ unsigned long SupportedARPHeaderFields;
  /* 0x003c */ unsigned long SupportedIPv4HeaderFields;
  /* 0x0040 */ unsigned long SupportedIPv6HeaderFields;
  /* 0x0044 */ unsigned long SupportedUdpHeaderFields;
  /* 0x0048 */ unsigned long MaxFieldTestsPerPacketCoalescingFilter;
  /* 0x004c */ unsigned long MaxPacketCoalescingFilters;
  /* 0x0050 */ unsigned long NdisReserved;
} NDIS_RECEIVE_FILTER_CAPABILITIES, *PNDIS_RECEIVE_FILTER_CAPABILITIES; /* size: 0x0054 */

typedef struct _RECORDER_CONFIGURE_PARAMS
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned char CreateDefaultLog;
  /* 0x0005 */ char __PADDING__[3];
} RECORDER_CONFIGURE_PARAMS, *PRECORDER_CONFIGURE_PARAMS; /* size: 0x0008 */

struct wil::details::kspin_lock_saved_irql
{
  /* 0x0000 */ unsigned long* spinLock;
  /* 0x0004 */ unsigned char savedIrql;
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

typedef struct _NDIS_SRIOV_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SriovCapabilities;
} NDIS_SRIOV_CAPABILITIES, *PNDIS_SRIOV_CAPABILITIES; /* size: 0x000c */

class wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned int,2>,wil::details::kspin_lock_saved_irql,unsigned long *,0,std::nullptr_t> >
{
  /* 0x0000 */ struct wil::details::kspin_lock_saved_irql m_ptr;
}; /* size: 0x0008 */

class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<unsigned long *,void __stdcall(unsigned long *) noexcept,&wil::details::ReleaseSpinLockFromDpcLevel,wistd::integral_constant<unsigned int,2>,unsigned long *,unsigned long *,0,std::nullptr_t> > >
{
}; /* size: 0x0004 */

typedef struct _NDIS_FILTER_RESTART_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_MEDIUM MiniportMediaType;
  /* 0x0008 */ enum _NDIS_PHYSICAL_MEDIUM MiniportPhysicalMediaType;
  /* 0x000c */ struct _NDIS_RESTART_ATTRIBUTES* RestartAttributes;
  /* 0x0010 */ unsigned long LowerIfIndex;
  /* 0x0014 */ long Padding_111;
  /* 0x0018 */ union _NET_LUID_LH LowerIfNetLuid;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long __PADDING__[1];
} NDIS_FILTER_RESTART_PARAMETERS, *PNDIS_FILTER_RESTART_PARAMETERS; /* size: 0x0028 */

class wil::kernel_spin_lock
{
  /* 0x0000 */ unsigned long m_kSpinLock;
}; /* size: 0x0004 */

typedef struct _NDIS_FILTER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_FILTER_BLOCK* NextFilter;
  /* 0x0008 */ struct _NDIS_FILTER_DRIVER_BLOCK* FilterDriver;
  /* 0x000c */ void* FilterModuleContext;
  /* 0x0010 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0014 */ class wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> > FilterInstanceName;
  /* 0x0018 */ struct _UNICODE_STRING* FilterFriendlyName;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ unsigned long StackFlags;
  /* 0x0024 */ enum _NDIS_FILTER_STATE State;
  /* 0x0025 */ char Padding_112[3];
  /* 0x0028 */ struct _REFERENCE_EX Ref;
  /* 0x0034 */ int FakeStatus;
  /* 0x0038 */ struct _NDIS_FILTER_BLOCK* NextGlobalFilter;
  /* 0x003c */ struct _NDIS_FILTER_BLOCK* LowerFilter;
  /* 0x0040 */ struct _NDIS_FILTER_BLOCK* HigherFilter;
  /* 0x0044 */ struct _FILTER_PAUSE_RESTART_CONTEXT* AsyncOpContext;
  /* 0x0048 */ long NumOfPauseRestartRequests;
  /* 0x004c */ unsigned long Lock;
  /* 0x0050 */ void* LockThread;
  /* 0x0054 */ struct _LIST_ENTRY OidRequestList;
  /* 0x005c */ struct _NDIS_OID_REQUEST* PendingOidRequest;
  /* 0x0060 */ class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> > > PendingOidWatchdog;
  struct
  {
    /* 0x0064 */ struct _WORK_QUEUE_ITEM WorkItem;
    /* 0x0074 */ unsigned char WorkItemQueued;
    /* 0x0011 */ char Padding_113[3];
    /* 0x0078 */ struct _PENDING_STACK_EXPANSION_FALLBACK_WORK PendingWork;
  } /* size: 0x0030 */ StackExpansionFallback;
  /* 0x0094 */ volatile unsigned char StatusIndicationsQueued;
  /* 0x0095 */ char Padding_114[3];
  /* 0x0098 */ volatile long DroppedReceiveNbls;
  /* 0x009c */ volatile long DroppedSendNbls;
  /* 0x00a0 */ unsigned long DroppedStatusIndications;
  /* 0x00a4 */ unsigned long DroppedUncloneableStatusIndications;
  /* 0x00a8 */ struct _REFERENCE_EX PnPRef;
  /* 0x00b4 */ enum _NDIS_MEDIUM MediaType;
  /* 0x00b8 */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediaType;
  /* 0x00bc */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x00c0 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x00c4 */ long Padding_115;
  /* 0x00c8 */ unsigned __int64 XmitLinkSpeed;
  /* 0x00d0 */ unsigned __int64 RcvLinkSpeed;
  /* 0x00d8 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x00dc */ unsigned long AutoNegotiationFlags;
  /* 0x00e0 */ unsigned char XState;
  /* 0x00e1 */ unsigned char Reserved1;
  /* 0x00e2 */ unsigned char Reserved2;
  /* 0x00e3 */ unsigned char Reserved3;
  /* 0x00e4 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectStateIndicateUp;
  /* 0x00e8 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexStateIndicateUp;
  /* 0x00ec */ long Padding_116;
  /* 0x00f0 */ unsigned __int64 XmitLinkSpeedIndicateUp;
  /* 0x00f8 */ unsigned __int64 RcvLinkSpeedIndicateUp;
  /* 0x0100 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctionsIndicateUp;
  /* 0x0104 */ unsigned long AutoNegotiationFlagsIndicateUp;
  /* 0x0108 */ void* NextRequestHandle;
  /* 0x010c */ struct _NDIS_ITERATIVE_DATA_PATH_TRACKER_ENTRY* IterativeDataPathTracker[4];
  /* 0x0110 */ void* NextSendNetBufferListsHandler /* function */;
  /* 0x0114 */ void* NextSendNetBufferListsContext;
  /* 0x0118 */ struct NDIS_NBL_TRACKER_HANDLE__* NextSendNetBufferListsTracker;
  /* 0x011c */ struct _NDIS_OBJECT_HEADER* NextSendNetBufferListsObject;
  /* 0x0120 */ void* NextSendNetBufferListsCompleteHandler /* function */;
  /* 0x0124 */ void* NextSendNetBufferListsCompleteContext;
  /* 0x0128 */ struct NDIS_NBL_TRACKER_HANDLE__* NextSendNetBufferListsCompleteTracker;
  /* 0x012c */ struct _NDIS_OBJECT_HEADER* NextSendNetBufferListsCompleteObject;
  /* 0x0130 */ void* NextIndicateReceiveNetBufferListsHandler /* function */;
  /* 0x0134 */ void* NextIndicateReceiveNetBufferListsContext;
  /* 0x0138 */ struct NDIS_NBL_TRACKER_HANDLE__* NextIndicateReceiveNetBufferListsTracker;
  /* 0x013c */ struct _NDIS_OBJECT_HEADER* NextIndicateReceiveNetBufferListsObject;
  /* 0x0140 */ void* NextReturnNetBufferListsHandler /* function */;
  /* 0x0144 */ void* NextReturnNetBufferListsContext;
  /* 0x0148 */ struct NDIS_NBL_TRACKER_HANDLE__* NextReturnNetBufferListsTracker;
  /* 0x014c */ struct _NDIS_OBJECT_HEADER* NextReturnNetBufferListsObject;
  /* 0x0150 */ void* NextCancelSendNetBufferListsHandler /* function */;
  /* 0x0154 */ void* NextCancelSendNetBufferListsContext;
  /* 0x0158 */ struct _NDIS_FILTER_PARTIAL_CHARACTERISTICS Characteristics;
  /* 0x0174 */ void* FilterSendNetBufferListsHandler /* function */;
  /* 0x0178 */ void* FilterIndicateReceiveNetBufferListsHandler /* function */;
  /* 0x017c */ void* FilterCancelSendNetBufferListsHandler /* function */;
  /* 0x0180 */ void* TcpOffloadReceiveReturnHandler /* function */;
  /* 0x0184 */ struct NDIS_NBL_TRACKER_HANDLE__* NblTracker;
  /* 0x0188 */ struct _NDIS_FILTER_TASK_OFFLOAD* Offload;
  /* 0x018c */ struct _GUID InterfaceGuid;
  /* 0x019c */ unsigned long IfIndex;
  /* 0x01a0 */ struct _NDIS_IF_BLOCK* IfBlock;
  /* 0x01a4 */ void* NextDirectRequestHandle;
  /* 0x01a8 */ unsigned long DirectOidRequestCount;
  /* 0x01ac */ struct _SINGLE_LIST_ENTRY WOLPatternList;
  /* 0x01b0 */ struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
  /* 0x01b4 */ struct _NDIS_PM_PARAMETERS PMCurrentParameters;
  /* 0x01c8 */ struct NDIS_BIND_FILTER_LINK* Bind;
  /* 0x01cc */ struct _NDIS_TIMESTAMP_CAPABILITIES* HwTimestampCapabilities;
  /* 0x01d0 */ struct _NDIS_TIMESTAMP_CAPABILITIES* HwTimestampCurrentConfig;
  /* 0x01d4 */ void* VerifierContext;
  /* 0x01d8 */ struct _PKTMON_COMPONENT_CONTEXT PktMonComp;
  /* 0x01e4 */ struct _PKTMON_EDGE_CONTEXT PktMonEdgeLower;
  /* 0x01f0 */ struct _PKTMON_EDGE_CONTEXT PktMonEdgeUpper;
  /* 0x01fc */ long __PADDING__[1];
} NDIS_FILTER_BLOCK, *PNDIS_FILTER_BLOCK; /* size: 0x0200 */

class KWaitEventBase<wistd::integral_constant<enum _EVENT_TYPE,0> >
{
  /* 0x0000 */ struct _KEVENT m_event;
}; /* size: 0x0010 */

class KWaitEventManualConstruct
{
}; /* size: 0x0010 */

class KWaitEventBase<wistd::integral_constant<enum _EVENT_TYPE,1> >
{
  /* 0x0000 */ struct _KEVENT m_event;
}; /* size: 0x0010 */

struct _NDIS_PF_BLOCK;

class KLockHolder
{
  /* 0x0000 */ enum _TAG_UNNAMED_1 m_State;
  /* 0x0004 */ class KPushLockBase& m_Lock;
  /* 0x0008 */ class KCriticalRegion m_Region;
}; /* size: 0x000c */

class KLockThisShared
{
}; /* size: 0x000c */

class KLockThisExclusive
{
}; /* size: 0x000c */

typedef struct _NDIS_OID_REQUEST_RESERVED
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY Entry;
    struct
    {
      /* 0x0000 */ struct _NDIS_OID_REQUEST* NextRequest;
      /* 0x0004 */ int Status;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _NDIS_OID_REQUEST_FLAGS Flags;
  /* 0x000c */ unsigned long OidTableIndex;
  union
  {
    /* 0x0010 */ struct _NDIS_OID_REQUEST* OidRequest;
    /* 0x0010 */ struct _NDIS_REQUEST* Request;
  }; /* size: 0x0004 */
  /* 0x0014 */ void* SourceHandle;
  union
  {
    struct
    {
      /* 0x0018 */ struct _KEVENT Event;
      /* 0x0028 */ void* NdisVcHandle;
    }; /* size: 0x0014 */
    struct
    {
      /* 0x0018 */ void* PartyContext;
      /* 0x001c */ void* CallMgrContext;
      /* 0x0020 */ void* VcContext;
      /* 0x0024 */ void* AfContext;
    } /* size: 0x0010 */ CoNdis;
  }; /* size: 0x0014 */
  /* 0x002c */ long Padding_117;
  union
  {
    /* 0x0030 */ unsigned __int64 StartCycle;
    struct
    {
      /* 0x0030 */ struct _NDIS_REQUEST_XLATION_CONTEXT* pOidXlationContext;
      /* 0x0034 */ unsigned long OriginalBufferLength;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0030 */ unsigned long SavedOid;
      /* 0x0034 */ void* SavedInfoBuf;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0038 */ unsigned long SavedInfoBufLen;
  /* 0x003c */ unsigned long RequestBuffer;
  union
  {
    struct
    {
      /* 0x0030 */ struct _NDIS_VF_BLOCK* VFBlock;
      /* 0x0034 */ struct _NDIS_VPORT_BLOCK* VPortBlock;
    } /* size: 0x0008 */ IovContext;
    struct
    {
      /* 0x0030 */ struct _NDIS_WOL_XLATION_CONTEXT* WolXlationContext;
      /* 0x0034 */ unsigned long WolPatternId;
      /* 0x0038 */ struct _NDIS_PACKET_PATTERN_ENTRY* SourcePacketEntry;
    } /* size: 0x000c */ PMContext;
    struct
    {
      struct
      {
        /* 0x0030 */ unsigned char SkipRegistryUpdate : 1; /* bit position: 0 */
      } /* size: 0x0001 */ OffloadParamsContext;
      /* 0x0031 */ char __PADDING__[15];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} NDIS_OID_REQUEST_RESERVED, *PNDIS_OID_REQUEST_RESERVED; /* size: 0x0040 */

typedef struct _NDIS_MINIPORT_SYSPOWER_NOTIFY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _SYSTEM_POWER_STATE TargetSystemState;
  /* 0x0008 */ enum _SYSTEM_POWER_STATE EffectiveSystemState;
} NDIS_MINIPORT_SYSPOWER_NOTIFY, *PNDIS_MINIPORT_SYSPOWER_NOTIFY; /* size: 0x000c */

typedef struct _NDIS_REQUEST_XLATION_CONTEXT
{
  /* 0x0000 */ unsigned long OldOid;
  /* 0x0004 */ void* InfoBuf;
  /* 0x0008 */ unsigned int InfoBufLength;
  /* 0x000c */ long Padding_118;
  /* 0x0010 */ unsigned __int64 RcvErrorValue;
  /* 0x0018 */ unsigned __int64 RcvNoBufferValue;
  /* 0x0020 */ unsigned __int64 RcvDiscardsValue;
  /* 0x0028 */ unsigned __int64 XmitErrorValue;
  /* 0x0030 */ int Status;
  /* 0x0034 */ long __PADDING__[1];
} NDIS_REQUEST_XLATION_CONTEXT, *PNDIS_REQUEST_XLATION_CONTEXT; /* size: 0x0038 */

struct _NDIS_VF_BLOCK;

typedef struct _NDIS_NDK_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MaxQpCount;
  /* 0x000c */ unsigned long MaxCqCount;
  /* 0x0010 */ unsigned long MaxMrCount;
  /* 0x0014 */ unsigned long MaxPdCount;
  /* 0x0018 */ unsigned long MaxInboundReadLimit;
  /* 0x001c */ unsigned long MaxOutboundReadLimit;
  /* 0x0020 */ unsigned long MaxMwCount;
  /* 0x0024 */ unsigned long MaxSrqCount;
  /* 0x0028 */ unsigned __int64 MissingCounterMask;
  /* 0x0030 */ struct _NDK_ADAPTER_INFO* NdkInfo;
  /* 0x0034 */ long __PADDING__[1];
} NDIS_NDK_CAPABILITIES, *PNDIS_NDK_CAPABILITIES; /* size: 0x0038 */

typedef struct _NDIS_NDK_REQUEST_PARAMETERS
{
  /* 0x0000 */ unsigned char RdmaRequested;
  /* 0x0001 */ char Padding_119[3];
  /* 0x0004 */ unsigned int SwitchPortId;
  /* 0x0008 */ unsigned long IfIndex;
  /* 0x000c */ unsigned char MacAddress[32];
  /* 0x002c */ unsigned int VlanId;
  /* 0x0030 */ struct _NDIS_NDK_CAPABILITIES NdkReserved;
} NDIS_NDK_REQUEST_PARAMETERS, *PNDIS_NDK_REQUEST_PARAMETERS; /* size: 0x0068 */

typedef struct _NDIS_NDK_RESPONSE_PARAMETERS
{
  /* 0x0000 */ unsigned char CapabilitiesAvailable;
  /* 0x0001 */ char Padding_120[7];
  /* 0x0008 */ struct _NDIS_NDK_CAPABILITIES ReceivedCapabilities;
} NDIS_NDK_RESPONSE_PARAMETERS, *PNDIS_NDK_RESPONSE_PARAMETERS; /* size: 0x0040 */

typedef struct _NDIS_NDK_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_NDK_REQUEST_PARAMETERS NdkRequest;
  /* 0x0068 */ struct _NDIS_NDK_RESPONSE_PARAMETERS NdkResponse;
} NDIS_NDK_PARAMETERS, *PNDIS_NDK_PARAMETERS; /* size: 0x00a8 */

typedef struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long SwitchId;
  /* 0x000c */ unsigned long VPortId;
  /* 0x0010 */ struct _IF_COUNTED_STRING_LH VPortName;
  /* 0x0214 */ unsigned short AttachedFunctionId;
  /* 0x0216 */ char Padding_121[2];
  /* 0x0218 */ unsigned long NumQueuePairs;
  /* 0x021c */ enum _NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION InterruptModeration;
  /* 0x0220 */ enum _NDIS_NIC_SWITCH_VPORT_STATE VPortState;
  /* 0x0224 */ struct _GROUP_AFFINITY ProcessorAffinity;
  /* 0x0230 */ unsigned long LookaheadSize;
  /* 0x0234 */ long Padding_122;
  /* 0x0238 */ struct _NDIS_NDK_PARAMETERS NdkParams;
  /* 0x02e0 */ unsigned long QosSqId;
  /* 0x02e4 */ long __PADDING__[1];
} NDIS_NIC_SWITCH_VPORT_PARAMETERS, *PNDIS_NIC_SWITCH_VPORT_PARAMETERS; /* size: 0x02e8 */

typedef struct _NDIS_VPORT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0008 */ struct _LIST_ENTRY OpenLink;
  /* 0x0010 */ struct _LIST_ENTRY SwitchLink;
  /* 0x0018 */ struct _LIST_ENTRY FunctionLink;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0028 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x002c */ struct _NDIS_NIC_SWITCH_BLOCK* NicSwitch;
  /* 0x0030 */ void* AttachedFunction;
  /* 0x0034 */ long Reference;
  /* 0x0038 */ struct _NDIS_NIC_SWITCH_VPORT_PARAMETERS VPortParams;
  /* 0x0320 */ unsigned long NumFilters;
  /* 0x0324 */ struct _LIST_ENTRY FilterList;
  /* 0x032c */ struct _NDIS_MINIPORT_RSS_PARAMETERS_CACHE* RssParametersBuffer;
  /* 0x0330 */ struct _NDIS_RECEIVE_SCALE_PARAMETERS* CombinedNdisRSSParameters;
  /* 0x0334 */ long __PADDING__[1];
} NDIS_VPORT_BLOCK, *PNDIS_VPORT_BLOCK; /* size: 0x0338 */

typedef struct _NDIS_CLIENT_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorVersion;
  /* 0x0001 */ unsigned char MinorVersion;
  /* 0x0002 */ unsigned short Filler;
  /* 0x0004 */ unsigned int Reserved;
  /* 0x0008 */ void* ClCreateVcHandler /* function */;
  /* 0x000c */ void* ClDeleteVcHandler /* function */;
  /* 0x0010 */ void* ClRequestHandler /* function */;
  /* 0x0014 */ void* ClRequestCompleteHandler /* function */;
  /* 0x0018 */ void* ClOpenAfCompleteHandler /* function */;
  /* 0x001c */ void* ClCloseAfCompleteHandler /* function */;
  /* 0x0020 */ void* ClRegisterSapCompleteHandler /* function */;
  /* 0x0024 */ void* ClDeregisterSapCompleteHandler /* function */;
  /* 0x0028 */ void* ClMakeCallCompleteHandler /* function */;
  /* 0x002c */ void* ClModifyCallQoSCompleteHandler /* function */;
  /* 0x0030 */ void* ClCloseCallCompleteHandler /* function */;
  /* 0x0034 */ void* ClAddPartyCompleteHandler /* function */;
  /* 0x0038 */ void* ClDropPartyCompleteHandler /* function */;
  /* 0x003c */ void* ClIncomingCallHandler /* function */;
  /* 0x0040 */ void* ClIncomingCallQoSChangeHandler /* function */;
  /* 0x0044 */ void* ClIncomingCloseCallHandler /* function */;
  /* 0x0048 */ void* ClIncomingDropPartyHandler /* function */;
  /* 0x004c */ void* ClCallConnectedHandler /* function */;
} NDIS_CLIENT_CHARACTERISTICS, *PNDIS_CLIENT_CHARACTERISTICS; /* size: 0x0050 */

typedef struct _NDIS_CO_AF_BLOCK
{
  /* 0x0000 */ struct _NDIS_CO_AF_BLOCK* NextAf;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ long References;
  /* 0x000c */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0010 */ struct _NDIS_CALL_MANAGER_CHARACTERISTICS* CallMgrEntries;
  /* 0x0014 */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS* CallMgrChars;
  /* 0x0018 */ struct _NDIS_OPEN_BLOCK* CallMgrOpen;
  /* 0x001c */ void* CallMgrContext;
  /* 0x0020 */ struct _NDIS_CLIENT_CHARACTERISTICS ClientEntries;
  /* 0x0070 */ struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS ClientChars;
  /* 0x00c4 */ struct _NDIS_OPEN_BLOCK* ClientOpen;
  /* 0x00c8 */ void* ClientContext;
  /* 0x00cc */ unsigned long Lock;
  /* 0x00d0 */ unsigned long CmMajorNdisVersion;
  /* 0x00d4 */ unsigned long ClMajorNdisVersion;
  /* 0x00d8 */ struct _NDIS_REQUEST* Ndis5CmRequest;
  /* 0x00dc */ struct _NDIS_REQUEST Request;
  /* 0x0138 */ struct _NDIS_REQUEST* CloseAfNdisRequest;
  /* 0x013c */ unsigned char CloseAfRequested;
  /* 0x013d */ char __PADDING__[3];
} NDIS_CO_AF_BLOCK, *PNDIS_CO_AF_BLOCK; /* size: 0x0140 */

typedef struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION Action;
  /* 0x000c */ unsigned long HeadersPresent;
  /* 0x0010 */ unsigned __int64 HeaderFields;
  /* 0x0018 */ struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
  union
  {
    union
    {
      struct
      {
        /* 0x002c */ struct in_addr SourceIPAddress;
        /* 0x0030 */ struct in_addr DestinationIPAddress;
      } /* size: 0x0008 */ IPv4Address;
      struct
      {
        /* 0x002c */ struct in6_addr SourceIPAddress;
        /* 0x003c */ struct in6_addr DestinationIPAddress;
      } /* size: 0x0020 */ IPv6Address;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ IPAddress;
  /* 0x004c */ unsigned char Ttl;
  /* 0x004d */ unsigned char Dscp;
  /* 0x004e */ unsigned char IPProtocol;
  /* 0x004f */ char Padding_123;
  union
  {
    union
    {
      struct
      {
        /* 0x0050 */ unsigned short SourcePort;
        /* 0x0052 */ unsigned short DestinationPort;
      } /* size: 0x0004 */ Udp;
      struct
      {
        /* 0x0050 */ unsigned short SourcePort;
        /* 0x0052 */ unsigned short DestinationPort;
      } /* size: 0x0004 */ Tcp;
      struct
      {
        /* 0x0050 */ unsigned long TenantId;
        /* 0x0054 */ unsigned short GreProtocol;
        /* 0x0056 */ unsigned short Entropy;
      } /* size: 0x0008 */ Encapsulation;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ TransportOrEncapsulation;
} NDIS_GFT_HEADER_GROUP_TRANSPOSITION, *PNDIS_GFT_HEADER_GROUP_TRANSPOSITION; /* size: 0x0058 */

typedef struct _NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ void* OffloadHandle;
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short SaDeleteReq : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned short CryptoDone : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned short NextCryptoDone : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned short Pad : 13; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0002 */ unsigned short CryptoStatus;
    } /* size: 0x0004 */ Receive;
  }; /* size: 0x0004 */
} NDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V1_NET_BUFFER_LIST_INFO; /* size: 0x0004 */

struct CO_ADDRESS_FAMILY
{
  /* 0x0000 */ unsigned long AddressFamily;
  /* 0x0004 */ unsigned long MajorVersion;
  /* 0x0008 */ unsigned long MinorVersion;
}; /* size: 0x000c */

class KRegKey
{
}; /* size: 0x0004 */

struct CO_SAP
{
  /* 0x0000 */ unsigned long SapType;
  /* 0x0004 */ unsigned long SapLength;
  /* 0x0008 */ unsigned char Sap[1];
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::iterator;

struct DOT11_COUNTRY_OR_REGION_STRING_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned char CountryOrRegionStrings[3][1];
  /* 0x000f */ char __PADDING__[1];
}; /* size: 0x0010 */

typedef struct _CO_CALL_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _CO_CALL_MANAGER_PARAMETERS* CallMgrParameters;
  /* 0x0008 */ struct _CO_MEDIA_PARAMETERS* MediaParameters;
} CO_CALL_PARAMETERS, *PCO_CALL_PARAMETERS; /* size: 0x000c */

class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >,1>::const_iterator;

typedef struct _CO_MEDIA_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ReceivePriority;
  /* 0x0008 */ unsigned long ReceiveSizeHint;
  /* 0x000c */ struct _CO_SPECIFIC_PARAMETERS MediaSpecific;
} CO_MEDIA_PARAMETERS, *PCO_MEDIA_PARAMETERS; /* size: 0x0018 */

typedef struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* CmCreateVcHandler /* function */;
  /* 0x000c */ void* CmDeleteVcHandler /* function */;
  /* 0x0010 */ void* CmOpenAfHandler /* function */;
  /* 0x0014 */ void* CmCloseAfHandler /* function */;
  /* 0x0018 */ void* CmRegisterSapHandler /* function */;
  /* 0x001c */ void* CmDeregisterSapHandler /* function */;
  /* 0x0020 */ void* CmMakeCallHandler /* function */;
  /* 0x0024 */ void* CmCloseCallHandler /* function */;
  /* 0x0028 */ void* CmIncomingCallCompleteHandler /* function */;
  /* 0x002c */ void* CmAddPartyHandler /* function */;
  /* 0x0030 */ void* CmDropPartyHandler /* function */;
  /* 0x0034 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x0038 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x003c */ void* CmModifyCallQoSHandler /* function */;
  /* 0x0040 */ void* CmOidRequestHandler /* function */;
  /* 0x0044 */ void* CmOidRequestCompleteHandler /* function */;
  /* 0x0048 */ void* CmNotifyCloseAfCompleteHandler /* function */;
} NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS, *PNDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS; /* size: 0x004c */

struct _KINTERRUPT;

typedef struct _X_FILTER
{
  /* 0x0000 */ struct _NDIS_OPEN_BLOCK* OpenList;
  /* 0x0004 */ struct _NDIS_OPEN_BLOCK* NoFTypeOpenList;
  /* 0x0008 */ struct _NDIS_OPEN_BLOCK* FTypeOpenList;
  /* 0x000c */ struct _NDIS_FRAME_TYPE_RECORD FrameTypeRecord;
  /* 0x0090 */ struct _NDIS_RW_LOCK_EX* BindListLock;
  /* 0x0094 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0098 */ unsigned int CombinedPacketFilter;
  /* 0x009c */ unsigned int OldCombinedPacketFilter;
  /* 0x00a0 */ unsigned int MiniportPacketFilter;
  /* 0x00a4 */ unsigned int NumOpens;
  /* 0x00a8 */ unsigned int NumNoETypeOpens;
  /* 0x00ac */ struct _NDIS_OPEN_BLOCK* SingleActiveOpen;
  /* 0x00b0 */ unsigned char AdapterAddress[6];
  /* 0x00b6 */ char Padding_124[2];
  /* 0x00b8 */ unsigned int MaxMulticastAddresses;
  /* 0x00bc */ unsigned char* NextMCastAddressBuf[6];
  /* 0x00c0 */ unsigned char* NextOldMCastAddressBuf[6];
  /* 0x00c4 */ unsigned int NextNumAddresses;
  /* 0x00c8 */ unsigned int NextOldNumAddresses;
  /* 0x00cc */ unsigned char* MiniportMCastAddressBuf[6];
  /* 0x00d0 */ unsigned int MiniportNumAddresses;
  /* 0x00d4 */ unsigned char* MiniportOldMCastAddressBuf[6];
  /* 0x00d8 */ unsigned int MiniportOldNumAddresses;
} X_FILTER, *PX_FILTER; /* size: 0x00dc */

struct _NDIS_RW_LOCK_EX;

typedef struct _WWAN_PROVIDER
{
  /* 0x0000 */ wchar_t ProviderId[7];
  /* 0x000e */ char Padding_125[2];
  /* 0x0010 */ unsigned long ProviderState;
  /* 0x0014 */ wchar_t ProviderName[21];
  /* 0x003e */ char Padding_126[2];
  /* 0x0040 */ unsigned long WwanDataClass;
} WWAN_PROVIDER, *PWWAN_PROVIDER; /* size: 0x0044 */

typedef struct _NDIS_WWAN_HOME_PROVIDER
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_PROVIDER Provider;
} NDIS_WWAN_HOME_PROVIDER, *PNDIS_WWAN_HOME_PROVIDER; /* size: 0x004c */

typedef struct _DMA_OPERATIONS
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ void* PutDmaAdapter /* function */;
  /* 0x0008 */ void* AllocateCommonBuffer /* function */;
  /* 0x000c */ void* FreeCommonBuffer /* function */;
  /* 0x0010 */ void* AllocateAdapterChannel /* function */;
  /* 0x0014 */ void* FlushAdapterBuffers /* function */;
  /* 0x0018 */ void* FreeAdapterChannel /* function */;
  /* 0x001c */ void* FreeMapRegisters /* function */;
  /* 0x0020 */ void* MapTransfer /* function */;
  /* 0x0024 */ void* GetDmaAlignment /* function */;
  /* 0x0028 */ void* ReadDmaCounter /* function */;
  /* 0x002c */ void* GetScatterGatherList /* function */;
  /* 0x0030 */ void* PutScatterGatherList /* function */;
  /* 0x0034 */ void* CalculateScatterGatherList /* function */;
  /* 0x0038 */ void* BuildScatterGatherList /* function */;
  /* 0x003c */ void* BuildMdlFromScatterGatherList /* function */;
  /* 0x0040 */ void* GetDmaAdapterInfo /* function */;
  /* 0x0044 */ void* GetDmaTransferInfo /* function */;
  /* 0x0048 */ void* InitializeDmaTransferContext /* function */;
  /* 0x004c */ void* AllocateCommonBufferEx /* function */;
  /* 0x0050 */ void* AllocateAdapterChannelEx /* function */;
  /* 0x0054 */ void* ConfigureAdapterChannel /* function */;
  /* 0x0058 */ void* CancelAdapterChannel /* function */;
  /* 0x005c */ void* MapTransferEx /* function */;
  /* 0x0060 */ void* GetScatterGatherListEx /* function */;
  /* 0x0064 */ void* BuildScatterGatherListEx /* function */;
  /* 0x0068 */ void* FlushAdapterBuffersEx /* function */;
  /* 0x006c */ void* FreeAdapterObject /* function */;
  /* 0x0070 */ void* CancelMappedTransfer /* function */;
  /* 0x0074 */ void* AllocateDomainCommonBuffer /* function */;
  /* 0x0078 */ void* FlushDmaBuffer /* function */;
  /* 0x007c */ void* JoinDmaDomain /* function */;
  /* 0x0080 */ void* LeaveDmaDomain /* function */;
  /* 0x0084 */ void* GetDmaDomain /* function */;
  /* 0x0088 */ void* AllocateCommonBufferWithBounds /* function */;
  /* 0x008c */ void* AllocateCommonBufferVector /* function */;
  /* 0x0090 */ void* GetCommonBufferFromVectorByIndex /* function */;
  /* 0x0094 */ void* FreeCommonBufferFromVector /* function */;
  /* 0x0098 */ void* FreeCommonBufferVector /* function */;
} DMA_OPERATIONS, *PDMA_OPERATIONS; /* size: 0x009c */

struct wistd::integral_constant<bool,1>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

struct wistd::__numeric_type<void>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

struct KALLOCATION_TAG<1148473410,1>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char IPv4SourceAddress[4];
  /* 0x0008 */ unsigned char IPv4DestAddress[4];
  /* 0x000c */ unsigned short TCPSourcePortNumber;
  /* 0x000e */ unsigned short TCPDestPortNumber;
} NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS, *PNDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS; /* size: 0x0010 */

struct KALLOCATOR<1147946562,1>
{
}; /* size: 0x0001 */

typedef struct _DMA_ADAPTER_INFO_V1
{
  /* 0x0000 */ unsigned long ReadDmaCounterAvailable;
  /* 0x0004 */ unsigned long ScatterGatherLimit;
  /* 0x0008 */ unsigned long DmaAddressWidth;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long MinimumTransferUnit;
} DMA_ADAPTER_INFO_V1, *PDMA_ADAPTER_INFO_V1; /* size: 0x0014 */

typedef struct _DMA_ADAPTER_INFO
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _DMA_ADAPTER_INFO_V1 V1;
} DMA_ADAPTER_INFO, *PDMA_ADAPTER_INFO; /* size: 0x0018 */

typedef struct _NDK_SRQ_DISPATCH
{
  /* 0x0000 */ void* NdkCloseSrq /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkModifySrq /* function */;
  /* 0x000c */ void* NdkSrqReceive /* function */;
} NDK_SRQ_DISPATCH, *PNDK_SRQ_DISPATCH; /* size: 0x0010 */

struct KALLOCATION_TAG<1147946562,1>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _DMA_TRANSFER_INFO
{
  /* 0x0000 */ unsigned long Version;
  union
  {
    /* 0x0004 */ struct _DMA_TRANSFER_INFO_V1 V1;
    /* 0x0004 */ struct _DMA_TRANSFER_INFO_V2 V2;
  }; /* size: 0x0010 */
} DMA_TRANSFER_INFO, *PDMA_TRANSFER_INFO; /* size: 0x0014 */

typedef struct _RPC_BINDING_VECTOR
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ void* BindingH[1];
} RPC_BINDING_VECTOR, *PRPC_BINDING_VECTOR; /* size: 0x0008 */

class Rtl::KArray<unsigned char,1>
{
  /* 0x0000 */ unsigned long m_bufferSize;
  /* 0x0004 */ unsigned long m_numElements;
  /* 0x0008 */ unsigned char* _p;
}; /* size: 0x000c */

typedef struct _NDIS_RESTART_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_RESTART_ATTRIBUTES* Next;
  /* 0x0004 */ unsigned long Oid;
  /* 0x0008 */ unsigned long DataLength;
  /* 0x000c */ long Padding_127;
  /* 0x0010 */ unsigned char Data[1];
  /* 0x0011 */ char __PADDING__[7];
} NDIS_RESTART_ATTRIBUTES, *PNDIS_RESTART_ATTRIBUTES; /* size: 0x0018 */

typedef struct _NDIS_PROTOCOL_RESTART_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char* FilterModuleNameBuffer;
  /* 0x0008 */ unsigned long FilterModuleNameBufferLength;
  /* 0x000c */ struct _NDIS_RESTART_ATTRIBUTES* RestartAttributes;
  /* 0x0010 */ unsigned long BoundIfIndex;
  /* 0x0014 */ long Padding_128;
  /* 0x0018 */ union _NET_LUID_LH BoundIfNetluid;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ long __PADDING__[1];
} NDIS_PROTOCOL_RESTART_PARAMETERS, *PNDIS_PROTOCOL_RESTART_PARAMETERS; /* size: 0x0028 */

struct NDIS_RESTART_INFORMATION
{
  union
  {
    /* 0x0000 */ struct _NDIS_RESTART_ATTRIBUTES Attributes;
    struct
    {
      /* 0x0000 */ unsigned char Padding[16];
      /* 0x0010 */ struct _NDIS_RESTART_GENERAL_ATTRIBUTES General;
      /* 0x0060 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES RssCaps;
      /* 0x0074 */ long Padding_129;
      /* 0x0078 */ struct _NDIS_PROTOCOL_RESTART_PARAMETERS ProtocolParameters;
      /* 0x00a0 */ unsigned long MiniportMacOptionsToPreserve;
      /* 0x00a4 */ class Rtl::KArray<unsigned char,1> FilterInstanceBuffer;
    }; /* size: 0x00ac */
  }; /* size: 0x00ac */
}; /* size: 0x00b0 */

struct KALLOCATOR<1920226123,512>
{
}; /* size: 0x0001 */

class KRundownHolder
{
  /* 0x0000 */ class KRundown& m_rundown;
  /* 0x0004 */ unsigned long m_count;
}; /* size: 0x0008 */

class wil::details::unique_storage<wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t> >
{
  /* 0x0000 */ struct NDISWATCHDOG__* m_ptr;
}; /* size: 0x0004 */

struct KALLOCATION_TAG<1920226123,512>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _NDIS_AF_LIST
{
  /* 0x0000 */ struct _NDIS_AF_LIST* NextAf;
  /* 0x0004 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0008 */ struct CO_ADDRESS_FAMILY AddressFamily;
  /* 0x0014 */ struct _NDIS_CALL_MANAGER_CHARACTERISTICS CmChars;
  /* 0x005c */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
  /* 0x00a8 */ unsigned long NdisMajorVersion;
} NDIS_AF_LIST, *PNDIS_AF_LIST; /* size: 0x00ac */

typedef struct _NDIS_RECEIVE_SCALE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short BaseCpuNumber;
  /* 0x0008 */ unsigned long HashInformation;
  /* 0x000c */ unsigned short IndirectionTableSize;
  /* 0x000e */ char Padding_130[2];
  /* 0x0010 */ unsigned long IndirectionTableOffset;
  /* 0x0014 */ unsigned short HashSecretKeySize;
  /* 0x0016 */ char Padding_131[2];
  /* 0x0018 */ unsigned long HashSecretKeyOffset;
  /* 0x001c */ unsigned long ProcessorMasksOffset;
  /* 0x0020 */ unsigned long NumberOfProcessorMasks;
  /* 0x0024 */ unsigned long ProcessorMasksEntrySize;
  /* 0x0028 */ struct _PROCESSOR_NUMBER DefaultProcessorNumber;
} NDIS_RECEIVE_SCALE_PARAMETERS, *PNDIS_RECEIVE_SCALE_PARAMETERS; /* size: 0x002c */

typedef struct _NDK_LISTENER_DISPATCH
{
  /* 0x0000 */ void* NdkCloseListener /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkListen /* function */;
  /* 0x000c */ void* NdkGetLocalAddress /* function */;
  /* 0x0010 */ void* NdkControlConnectEvents /* function */;
} NDK_LISTENER_DISPATCH, *PNDK_LISTENER_DISPATCH; /* size: 0x0014 */

typedef struct _NDIS_802_11_STATISTICS
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_132;
  /* 0x0008 */ union _LARGE_INTEGER TransmittedFragmentCount;
  /* 0x0010 */ union _LARGE_INTEGER MulticastTransmittedFrameCount;
  /* 0x0018 */ union _LARGE_INTEGER FailedCount;
  /* 0x0020 */ union _LARGE_INTEGER RetryCount;
  /* 0x0028 */ union _LARGE_INTEGER MultipleRetryCount;
  /* 0x0030 */ union _LARGE_INTEGER RTSSuccessCount;
  /* 0x0038 */ union _LARGE_INTEGER RTSFailureCount;
  /* 0x0040 */ union _LARGE_INTEGER ACKFailureCount;
  /* 0x0048 */ union _LARGE_INTEGER FrameDuplicateCount;
  /* 0x0050 */ union _LARGE_INTEGER ReceivedFragmentCount;
  /* 0x0058 */ union _LARGE_INTEGER MulticastReceivedFrameCount;
  /* 0x0060 */ union _LARGE_INTEGER FCSErrorCount;
  /* 0x0068 */ union _LARGE_INTEGER TKIPLocalMICFailures;
  /* 0x0070 */ union _LARGE_INTEGER TKIPICVErrorCount;
  /* 0x0078 */ union _LARGE_INTEGER TKIPCounterMeasuresInvoked;
  /* 0x0080 */ union _LARGE_INTEGER TKIPReplays;
  /* 0x0088 */ union _LARGE_INTEGER CCMPFormatErrors;
  /* 0x0090 */ union _LARGE_INTEGER CCMPReplays;
  /* 0x0098 */ union _LARGE_INTEGER CCMPDecryptErrors;
  /* 0x00a0 */ union _LARGE_INTEGER FourWayHandshakeFailures;
  /* 0x00a8 */ union _LARGE_INTEGER WEPUndecryptableCount;
  /* 0x00b0 */ union _LARGE_INTEGER WEPICVErrorCount;
  /* 0x00b8 */ union _LARGE_INTEGER DecryptSuccessCount;
  /* 0x00c0 */ union _LARGE_INTEGER DecryptFailureCount;
} NDIS_802_11_STATISTICS, *PNDIS_802_11_STATISTICS; /* size: 0x00c8 */

typedef struct _NDIS_HD_SPLIT_CURRENT_CONFIG
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long HardwareCapabilities;
  /* 0x0008 */ unsigned long CurrentCapabilities;
  /* 0x000c */ unsigned long HDSplitFlags;
  /* 0x0010 */ unsigned long HDSplitCombineFlags;
  /* 0x0014 */ unsigned long BackfillSize;
  /* 0x0018 */ unsigned long MaxHeaderSize;
} NDIS_HD_SPLIT_CURRENT_CONFIG, *PNDIS_HD_SPLIT_CURRENT_CONFIG; /* size: 0x001c */

typedef struct _NDIS_NIC_SWITCH_INFO_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long FirstElementOffset;
  /* 0x0008 */ unsigned long NumElements;
  /* 0x000c */ unsigned long ElementSize;
} NDIS_NIC_SWITCH_INFO_ARRAY, *PNDIS_NIC_SWITCH_INFO_ARRAY; /* size: 0x0010 */

typedef struct _NDIS_FILTER_PAUSE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long PauseReason;
} NDIS_FILTER_PAUSE_PARAMETERS, *PNDIS_FILTER_PAUSE_PARAMETERS; /* size: 0x000c */

typedef struct _NET_DEVICE_PNP_EVENT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PortNumber;
  /* 0x0008 */ enum _NDIS_DEVICE_PNP_EVENT DevicePnPEvent;
  /* 0x000c */ void* InformationBuffer;
  /* 0x0010 */ unsigned long InformationBufferLength;
  /* 0x0014 */ unsigned char NdisReserved[8];
} NET_DEVICE_PNP_EVENT, *PNET_DEVICE_PNP_EVENT; /* size: 0x001c */

struct DOT11_MAC_FRAME_STATISTICS
{
  /* 0x0000 */ unsigned __int64 ullTransmittedFrameCount;
  /* 0x0008 */ unsigned __int64 ullReceivedFrameCount;
  /* 0x0010 */ unsigned __int64 ullTransmittedFailureFrameCount;
  /* 0x0018 */ unsigned __int64 ullReceivedFailureFrameCount;
  /* 0x0020 */ unsigned __int64 ullWEPExcludedCount;
  /* 0x0028 */ unsigned __int64 ullTKIPLocalMICFailures;
  /* 0x0030 */ unsigned __int64 ullTKIPReplays;
  /* 0x0038 */ unsigned __int64 ullTKIPICVErrorCount;
  /* 0x0040 */ unsigned __int64 ullCCMPReplays;
  /* 0x0048 */ unsigned __int64 ullCCMPDecryptErrors;
  /* 0x0050 */ unsigned __int64 ullWEPUndecryptableCount;
  /* 0x0058 */ unsigned __int64 ullWEPICVErrorCount;
  /* 0x0060 */ unsigned __int64 ullDecryptSuccessCount;
  /* 0x0068 */ unsigned __int64 ullDecryptFailureCount;
}; /* size: 0x0070 */

struct DOT11_STATISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ long Padding_133;
  /* 0x0008 */ unsigned __int64 ullFourWayHandshakeFailures;
  /* 0x0010 */ unsigned __int64 ullTKIPCounterMeasuresInvoked;
  /* 0x0018 */ unsigned __int64 ullReserved;
  /* 0x0020 */ struct DOT11_MAC_FRAME_STATISTICS MacUcastCounters;
  /* 0x0090 */ struct DOT11_MAC_FRAME_STATISTICS MacMcastCounters;
  /* 0x0100 */ struct DOT11_PHY_FRAME_STATISTICS PhyCounters[1];
}; /* size: 0x0190 */

struct _NDIS_IF_RCV_ADDRESS;

struct DOT11_MAC_ADDRESS_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned char MacAddrs[6][1];
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

typedef struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_MEDIUM MediaType;
  /* 0x000c */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
  /* 0x0010 */ unsigned long MtuSize;
  /* 0x0014 */ long Padding_134;
  /* 0x0018 */ unsigned __int64 MaxXmitLinkSpeed;
  /* 0x0020 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0028 */ unsigned __int64 MaxRcvLinkSpeed;
  /* 0x0030 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0038 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x003c */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x0040 */ unsigned long LookaheadSize;
  /* 0x0044 */ struct _NDIS_PNP_CAPABILITIES* PowerManagementCapabilities;
  /* 0x0048 */ unsigned long MacOptions;
  /* 0x004c */ unsigned long SupportedPacketFilters;
  /* 0x0050 */ unsigned long MaxMulticastListSize;
  /* 0x0054 */ unsigned short MacAddressLength;
  /* 0x0056 */ unsigned char PermanentMacAddress[32];
  /* 0x0076 */ unsigned char CurrentMacAddress[32];
  /* 0x0096 */ char Padding_135[2];
  /* 0x0098 */ struct _NDIS_RECEIVE_SCALE_CAPABILITIES* RecvScaleCapabilities;
  /* 0x009c */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x00a0 */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x00a4 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x00a8 */ unsigned short IfType;
  /* 0x00aa */ unsigned char IfConnectorPresent;
  /* 0x00ab */ char Padding_136;
  /* 0x00ac */ unsigned long SupportedStatistics;
  /* 0x00b0 */ unsigned long SupportedPauseFunctions;
  /* 0x00b4 */ unsigned long DataBackFillSize;
  /* 0x00b8 */ unsigned long ContextBackFillSize;
  /* 0x00bc */ unsigned long* SupportedOidList;
  /* 0x00c0 */ unsigned long SupportedOidListLength;
  /* 0x00c4 */ unsigned long AutoNegotiationFlags;
  /* 0x00c8 */ struct _NDIS_PM_CAPABILITIES* PowerManagementCapabilitiesEx;
  /* 0x00cc */ long __PADDING__[1];
} NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES; /* size: 0x00d0 */

struct PAGED_OBJECT<1147946562>
{
}; /* size: 0x0001 */

typedef struct _VAR_STRING
{
  /* 0x0000 */ unsigned long ulTotalSize;
  /* 0x0004 */ unsigned long ulNeededSize;
  /* 0x0008 */ unsigned long ulUsedSize;
  /* 0x000c */ unsigned long ulStringFormat;
  /* 0x0010 */ unsigned long ulStringSize;
  /* 0x0014 */ unsigned long ulStringOffset;
} VAR_STRING, *PVAR_STRING; /* size: 0x0018 */

typedef struct _CO_ADDRESS
{
  /* 0x0000 */ unsigned long AddressSize;
  /* 0x0004 */ unsigned char Address[1];
  /* 0x0005 */ char __PADDING__[3];
} CO_ADDRESS, *PCO_ADDRESS; /* size: 0x0008 */

typedef struct _CO_ADDRESS_LIST
{
  /* 0x0000 */ unsigned long NumberOfAddressesAvailable;
  /* 0x0004 */ unsigned long NumberOfAddresses;
  /* 0x0008 */ struct _CO_ADDRESS AddressList;
} CO_ADDRESS_LIST, *PCO_ADDRESS_LIST; /* size: 0x0010 */

struct wistd::default_delete<Rtl::KString>
{
}; /* size: 0x0001 */

struct NdisDebugBlock<1282164290>
{
}; /* size: 0x0001 */

typedef struct _NDIS_RW_LOCK
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long SpinLock;
      /* 0x0004 */ void* Context;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned char Reserved[16];
  }; /* size: 0x0010 */
  union
  {
    /* 0x0010 */ union _NDIS_RW_LOCK_REFCOUNT RefCount[32];
    /* 0x0010 */ unsigned long RefCountEx[128];
    struct
    {
      /* 0x0010 */ unsigned long RefCountLock;
      /* 0x0014 */ volatile unsigned long SharedRefCount;
      /* 0x0018 */ volatile unsigned char WriterWaiting;
      /* 0x0019 */ char __PADDING__[503];
    }; /* size: 0x0200 */
  }; /* size: 0x0200 */
} NDIS_RW_LOCK, *PNDIS_RW_LOCK; /* size: 0x0210 */

struct _NDIS_NIC_SWITCH_BLOCK;

typedef struct _NDIS_RECEIVE_HASH_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long HashInformation;
  /* 0x000c */ unsigned short HashSecretKeySize;
  /* 0x000e */ char Padding_137[2];
  /* 0x0010 */ unsigned long HashSecretKeyOffset;
} NDIS_RECEIVE_HASH_PARAMETERS, *PNDIS_RECEIVE_HASH_PARAMETERS; /* size: 0x0014 */

typedef struct _NDIS_WLAN_BSSID_EX
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char MacAddress[6];
  /* 0x000a */ unsigned char Reserved[2];
  /* 0x000c */ struct _NDIS_802_11_SSID Ssid;
  /* 0x0030 */ unsigned long Privacy;
  /* 0x0034 */ long Rssi;
  /* 0x0038 */ enum _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
  /* 0x003c */ struct _NDIS_802_11_CONFIGURATION Configuration;
  /* 0x005c */ enum _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
  /* 0x0060 */ unsigned char SupportedRates[16];
  /* 0x0070 */ unsigned long IELength;
  /* 0x0074 */ unsigned char IEs[1];
  /* 0x0075 */ char __PADDING__[3];
} NDIS_WLAN_BSSID_EX, *PNDIS_WLAN_BSSID_EX; /* size: 0x0078 */

typedef struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char MajorNdisVersion;
  /* 0x0005 */ unsigned char MinorNdisVersion;
  /* 0x0006 */ unsigned char MajorDriverVersion;
  /* 0x0007 */ unsigned char MinorDriverVersion;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ void* SetOptionsHandler /* function */;
  /* 0x0010 */ void* InitializeHandlerEx /* function */;
  /* 0x0014 */ void* HaltHandlerEx /* function */;
  /* 0x0018 */ void* UnloadHandler /* function */;
  /* 0x001c */ void* PauseHandler /* function */;
  /* 0x0020 */ void* RestartHandler /* function */;
  /* 0x0024 */ void* OidRequestHandler /* function */;
  /* 0x0028 */ void* SendNetBufferListsHandler /* function */;
  /* 0x002c */ void* ReturnNetBufferListsHandler /* function */;
  /* 0x0030 */ void* CancelSendHandler /* function */;
  /* 0x0034 */ void* CheckForHangHandlerEx /* function */;
  /* 0x0038 */ void* ResetHandlerEx /* function */;
  /* 0x003c */ void* DevicePnPEventNotifyHandler /* function */;
  /* 0x0040 */ void* ShutdownHandlerEx /* function */;
  /* 0x0044 */ void* CancelOidRequestHandler /* function */;
  /* 0x0048 */ void* DirectOidRequestHandler /* function */;
  /* 0x004c */ void* CancelDirectOidRequestHandler /* function */;
  /* 0x0050 */ void* SynchronousOidRequestHandler /* function */;
} NDIS_MINIPORT_DRIVER_CHARACTERISTICS, *PNDIS_MINIPORT_DRIVER_CHARACTERISTICS; /* size: 0x0054 */

typedef struct _NDIS50_MINIPORT_CHARACTERISTICS
{
  /* 0x0000 */ unsigned char MajorNdisVersion;
  /* 0x0001 */ unsigned char MinorNdisVersion;
  /* 0x0002 */ unsigned short Filler;
  /* 0x0004 */ unsigned int Reserved;
  /* 0x0008 */ void* CheckForHangHandler /* function */;
  /* 0x000c */ void* DisableInterruptHandler /* function */;
  /* 0x0010 */ void* EnableInterruptHandler /* function */;
  /* 0x0014 */ void* HaltHandler /* function */;
  /* 0x0018 */ void* HandleInterruptHandler /* function */;
  /* 0x001c */ void* InitializeHandler /* function */;
  /* 0x0020 */ void* ISRHandler /* function */;
  /* 0x0024 */ void* QueryInformationHandler /* function */;
  /* 0x0028 */ void* ReconfigureHandler /* function */;
  /* 0x002c */ void* ResetHandler /* function */;
  union
  {
    /* 0x0030 */ void* SendHandler /* function */;
    /* 0x0030 */ void* WanSendHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0034 */ void* SetInformationHandler /* function */;
  union
  {
    /* 0x0038 */ void* TransferDataHandler /* function */;
    /* 0x0038 */ void* WanTransferDataHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x003c */ void* ReturnPacketHandler /* function */;
  /* 0x0040 */ void* SendPacketsHandler /* function */;
  /* 0x0044 */ void* AllocateCompleteHandler /* function */;
  /* 0x0048 */ void* CoCreateVcHandler /* function */;
  /* 0x004c */ void* CoDeleteVcHandler /* function */;
  /* 0x0050 */ void* CoActivateVcHandler /* function */;
  /* 0x0054 */ void* CoDeactivateVcHandler /* function */;
  /* 0x0058 */ void* CoSendPacketsHandler /* function */;
  /* 0x005c */ void* CoRequestHandler /* function */;
} NDIS50_MINIPORT_CHARACTERISTICS, *PNDIS50_MINIPORT_CHARACTERISTICS; /* size: 0x0060 */

typedef struct _NDIS51_MINIPORT_CHARACTERISTICS
{
  union
  {
    /* 0x0000 */ struct _NDIS50_MINIPORT_CHARACTERISTICS Ndis50Chars;
    struct
    {
      /* 0x0000 */ unsigned char MajorNdisVersion;
      /* 0x0001 */ unsigned char MinorNdisVersion;
      /* 0x0002 */ unsigned short Filler;
      /* 0x0004 */ unsigned int Reserved;
      /* 0x0008 */ void* CheckForHangHandler /* function */;
      /* 0x000c */ void* DisableInterruptHandler /* function */;
      /* 0x0010 */ void* EnableInterruptHandler /* function */;
      /* 0x0014 */ void* HaltHandler /* function */;
      /* 0x0018 */ void* HandleInterruptHandler /* function */;
      /* 0x001c */ void* InitializeHandler /* function */;
      /* 0x0020 */ void* ISRHandler /* function */;
      /* 0x0024 */ void* QueryInformationHandler /* function */;
      /* 0x0028 */ void* ReconfigureHandler /* function */;
      /* 0x002c */ void* ResetHandler /* function */;
      union
      {
        /* 0x0030 */ void* SendHandler /* function */;
        /* 0x0030 */ void* WanSendHandler /* function */;
      }; /* size: 0x0004 */
      /* 0x0034 */ void* SetInformationHandler /* function */;
      union
      {
        /* 0x0038 */ void* TransferDataHandler /* function */;
        /* 0x0038 */ void* WanTransferDataHandler /* function */;
      }; /* size: 0x0004 */
      /* 0x003c */ void* ReturnPacketHandler /* function */;
      /* 0x0040 */ void* SendPacketsHandler /* function */;
      /* 0x0044 */ void* AllocateCompleteHandler /* function */;
      /* 0x0048 */ void* CoCreateVcHandler /* function */;
      /* 0x004c */ void* CoDeleteVcHandler /* function */;
      /* 0x0050 */ void* CoActivateVcHandler /* function */;
      /* 0x0054 */ void* CoDeactivateVcHandler /* function */;
      /* 0x0058 */ void* CoSendPacketsHandler /* function */;
      /* 0x005c */ void* CoRequestHandler /* function */;
    }; /* size: 0x0060 */
  }; /* size: 0x0060 */
  /* 0x0060 */ void* CancelSendPacketsHandler /* function */;
  /* 0x0064 */ void* PnPEventNotifyHandler /* function */;
  /* 0x0068 */ void* AdapterShutdownHandler /* function */;
  /* 0x006c */ void* Reserved1;
  /* 0x0070 */ void* Reserved2;
  /* 0x0074 */ void* Reserved3;
  /* 0x0078 */ void* Reserved4;
} NDIS51_MINIPORT_CHARACTERISTICS, *PNDIS51_MINIPORT_CHARACTERISTICS; /* size: 0x007c */

class wistd::__compressed_pair<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS *,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >
{
}; /* size: 0x0004 */

class wistd::unique_ptr<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >
{
  /* 0x0000 */ class wistd::__compressed_pair<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS *,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> > __ptr_;
}; /* size: 0x0004 */

typedef struct _KMUTANT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY MutantListEntry;
  /* 0x0018 */ struct _KTHREAD* OwnerThread;
  union
  {
    /* 0x001c */ unsigned char MutantFlags;
    struct /* bitfield */
    {
      /* 0x001c */ unsigned char Abandoned : 1; /* bit position: 0 */
      /* 0x001c */ unsigned char Spare1 : 7; /* bit position: 1 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x001c */ unsigned char Abandoned2 : 1; /* bit position: 0 */
      /* 0x001c */ unsigned char AbEnabled : 1; /* bit position: 1 */
      /* 0x001c */ unsigned char Spare2 : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x001d */ unsigned char ApcDisable;
  /* 0x001e */ char __PADDING__[2];
} KMUTANT, *PKMUTANT; /* size: 0x0020 */

typedef struct _NDIS_M_DRIVER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_M_DRIVER_BLOCK* NextDriver;
  /* 0x0008 */ struct _NDIS_MINIPORT_BLOCK* MiniportQueue;
  /* 0x000c */ unsigned char MajorNdisVersion;
  /* 0x000d */ unsigned char MinorNdisVersion;
  /* 0x000e */ unsigned short Flags;
  /* 0x0010 */ struct _NDIS_WRAPPER_HANDLE* NdisDriverInfo;
  /* 0x0014 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0018 */ struct _UNICODE_STRING ServiceRegPath;
  /* 0x0020 */ void* MiniportDriverContext;
  /* 0x0024 */ struct _NDIS_PROTOCOL_BLOCK* AssociatedProtocol;
  /* 0x0028 */ struct _LIST_ENTRY DeviceList;
  /* 0x0030 */ struct _NDIS_PENDING_IM_INSTANCE* PendingDeviceList;
  /* 0x0034 */ void* UnloadHandler /* function */;
  union
  {
    /* 0x0038 */ struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS MiniportDriverCharacteristics;
    /* 0x0038 */ struct _NDIS51_MINIPORT_CHARACTERISTICS MiniportCharacteristics;
  }; /* size: 0x007c */
  /* 0x00b4 */ class wistd::unique_ptr<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS,wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> > UnhookedCharacteristics;
  /* 0x00b8 */ struct _NDIS_WDF_CX_DRIVER_BLOCK* CxBlock;
  /* 0x00bc */ struct _KEVENT MiniportsRemovedEvent;
  /* 0x00cc */ struct _REFERENCE_EX Ref;
  /* 0x00d8 */ struct _KMUTANT IMStartRemoveMutex;
  /* 0x00f8 */ void* IMStartRemoveMutexOwnerThread;
  /* 0x00fc */ unsigned long DriverVersion;
  /* 0x0100 */ struct _UNICODE_STRING ServiceName;
  /* 0x0108 */ void* CoCreateVcHandler /* function */;
  /* 0x010c */ void* CoDeleteVcHandler /* function */;
  /* 0x0110 */ void* CoActivateVcHandler /* function */;
  /* 0x0114 */ void* CoDeactivateVcHandler /* function */;
  /* 0x0118 */ void* CoSendNetBufferListsHandler /* function */;
  /* 0x011c */ void* CoRequestHandler /* function */;
  /* 0x0120 */ void* CoOidRequestHandler /* function */;
  /* 0x0124 */ void* InitiateOffloadHandler /* function */;
  /* 0x0128 */ void* TerminateOffloadHandler /* function */;
  /* 0x012c */ void* UpdateOffloadHandler /* function */;
  /* 0x0130 */ void* InvalidateOffloadHandler /* function */;
  /* 0x0134 */ void* QueryOffloadHandler /* function */;
  /* 0x0138 */ void* TcpOffloadSendHandler /* function */;
  /* 0x013c */ void* TcpOffloadReceiveHandler /* function */;
  /* 0x0140 */ void* TcpOffloadDisconnectHandler /* function */;
  /* 0x0144 */ void* TcpOffloadForwardHandler /* function */;
  /* 0x0148 */ void* TcpOffloadReceiveReturnHandler /* function */;
  /* 0x014c */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
  /* 0x0198 */ void* AddDeviceHandler /* function */;
  /* 0x019c */ void* RemoveDeviceHandler /* function */;
  /* 0x01a0 */ void* FilterResourceRequirementsHandler /* function */;
  /* 0x01a4 */ void* StartDeviceHandler /* function */;
  /* 0x01a8 */ void* OpenNDKAdapterHandler /* function */;
  /* 0x01ac */ void* CloseNDKAdapterHandler /* function */;
  /* 0x01b0 */ void* SysPowerNotifyHandler /* function */;
  /* 0x01b4 */ void* IdleNotificationHandler /* function */;
  /* 0x01b8 */ void* CancelIdleNotificationHandler /* function */;
  /* 0x01bc */ void* DevicePowerNotifyHandler /* function */;
  /* 0x01c0 */ void* ReenumerateFailedAdapterHandler /* function */;
  /* 0x01c4 */ void* LiveDumpCallback /* function */;
  /* 0x01c8 */ struct _UNICODE_STRING ImageName;
  /* 0x01d0 */ struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__* HookDriverHandle;
  /* 0x01d4 */ enum _NDIS_MINIPORT_HOOK_DRIVER_TYPE HookType;
  /* 0x01d8 */ BOOL HookRegistered;
  /* 0x01d9 */ char Padding_138[3];
  /* 0x01dc */ void* AllocateNetBufferListForwardingContextHandler /* function */;
  /* 0x01e0 */ void* FreeNetBufferListForwardingContextHandler /* function */;
  /* 0x01e4 */ void* AddNetBufferListDestinationHandler /* function */;
  /* 0x01e8 */ void* SetNetBufferListSourceHandler /* function */;
  /* 0x01ec */ void* GrowNetBufferListDestinationsHandler /* function */;
  /* 0x01f0 */ void* GetNetBufferListDestinationsHandler /* function */;
  /* 0x01f4 */ void* UpdateNetBufferListDestinationsHandler /* function */;
  /* 0x01f8 */ void* CopyNetBufferListInfoHandler /* function */;
  /* 0x01fc */ void* ReferenceSwitchNicHandler /* function */;
  /* 0x0200 */ void* DereferenceSwitchNicHandler /* function */;
  /* 0x0204 */ void* ReferenceSwitchPortHandler /* function */;
  /* 0x0208 */ void* DereferenceSwitchPortHandler /* function */;
  /* 0x020c */ void* ReportFilteredNetBufferListsHandler /* function */;
  /* 0x0210 */ void* SetNetBufferListSwitchContextHandler /* function */;
  /* 0x0214 */ void* GetNetBufferListSwitchContextHandler /* function */;
} NDIS_M_DRIVER_BLOCK, *PNDIS_M_DRIVER_BLOCK; /* size: 0x0218 */

typedef struct _NDIS_WRAPPER_HANDLE
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0004 */ struct _UNICODE_STRING ServiceRegPath;
} NDIS_WRAPPER_HANDLE, *PNDIS_WRAPPER_HANDLE; /* size: 0x000c */

class KRef<NDIS_BIND_PROTOCOL_DRIVER>
{
  /* 0x0000 */ class KRef<NDIS_BIND_PROTOCOL_DRIVER>::KRefHolder* _p;
}; /* size: 0x0004 */

class KCoalescingWorkItem<_NDIS_PROTOCOL_BLOCK>
{
  /* 0x0000 */ long Padding_139[6];
  /* 0x0018 */ long m_queued;
}; /* size: 0x001c */

typedef struct _NDIS_PROTOCOL_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* ProtocolDriverContext;
  /* 0x0008 */ struct _NDIS_PROTOCOL_BLOCK* NextProtocol;
  /* 0x000c */ struct _NDIS_OPEN_BLOCK* OpenQueue;
  /* 0x0010 */ struct _REFERENCE_EX Ref;
  /* 0x001c */ unsigned char MajorNdisVersion;
  /* 0x001d */ unsigned char MinorNdisVersion;
  /* 0x001e */ unsigned char MajorDriverVersion;
  /* 0x001f */ unsigned char MinorDriverVersion;
  /* 0x0020 */ unsigned int Reserved;
  /* 0x0024 */ unsigned int Flags;
  /* 0x0028 */ struct _UNICODE_STRING Name;
  /* 0x0030 */ unsigned char IsIPv4;
  /* 0x0031 */ unsigned char IsIPv6;
  /* 0x0032 */ unsigned char IsNdisTest6;
  /* 0x0033 */ char Padding_140;
  /* 0x0034 */ void* BindAdapterHandlerEx /* function */;
  /* 0x0038 */ void* UnbindAdapterHandlerEx /* function */;
  /* 0x003c */ void* OpenAdapterCompleteHandlerEx /* function */;
  /* 0x0040 */ void* CloseAdapterCompleteHandlerEx /* function */;
  union
  {
    /* 0x0044 */ void* PnPEventHandler /* function */;
    /* 0x0044 */ void* NetPnPEventHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0048 */ void* UnloadHandler /* function */;
  /* 0x004c */ void* UninstallHandler /* function */;
  /* 0x0050 */ void* RequestCompleteHandler /* function */;
  union
  {
    /* 0x0054 */ void* StatusHandlerEx /* function */;
    /* 0x0054 */ void* StatusHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0058 */ void* StatusCompleteHandler /* function */;
  /* 0x005c */ void* ReceiveNetBufferListsHandler /* function */;
  /* 0x0060 */ void* SendNetBufferListsCompleteHandler /* function */;
  union
  {
    /* 0x0064 */ void* CoStatusHandlerEx /* function */;
    /* 0x0064 */ void* CoStatusHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0068 */ void* CoAfRegisterNotifyHandler /* function */;
  /* 0x006c */ void* CoReceiveNetBufferListsHandler /* function */;
  /* 0x0070 */ void* CoSendNetBufferListsCompleteHandler /* function */;
  /* 0x0074 */ void* OpenAdapterCompleteHandler /* function */;
  /* 0x0078 */ void* CloseAdapterCompleteHandler /* function */;
  union
  {
    /* 0x007c */ void* SendCompleteHandler /* function */;
    /* 0x007c */ void* WanSendCompleteHandler /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0080 */ void* TransferDataCompleteHandler /* function */;
    /* 0x0080 */ void* WanTransferDataCompleteHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0084 */ void* ResetCompleteHandler /* function */;
  union
  {
    /* 0x0088 */ void* ReceiveHandler /* function */;
    /* 0x0088 */ void* WanReceiveHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x008c */ void* ReceiveCompleteHandler /* function */;
  /* 0x0090 */ void* ReceivePacketHandler /* function */;
  /* 0x0094 */ void* BindAdapterHandler /* function */;
  /* 0x0098 */ void* UnbindAdapterHandler /* function */;
  /* 0x009c */ void* CoSendCompleteHandler /* function */;
  /* 0x00a0 */ void* CoReceivePacketHandler /* function */;
  /* 0x00a4 */ void* OidRequestCompleteHandler /* function */;
  /* 0x00a8 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x00b8 */ struct _KMUTANT Mutex;
  /* 0x00d8 */ void* MutexOwnerThread;
  /* 0x00dc */ unsigned long MutexOwnerCount;
  /* 0x00e0 */ struct _UNICODE_STRING* BindDeviceName;
  /* 0x00e4 */ struct _UNICODE_STRING* RootDeviceName;
  /* 0x00e8 */ struct _NDIS_M_DRIVER_BLOCK* AssociatedMiniDriver;
  /* 0x00ec */ struct _NDIS_MINIPORT_BLOCK* BindingAdapter;
  /* 0x00f0 */ struct _KEVENT* DeregEvent;
  /* 0x00f4 */ struct _NDIS_CO_CLIENT_OPTIONAL_HANDLERS ClientChars;
  /* 0x0148 */ struct _NDIS_CO_CALL_MANAGER_OPTIONAL_HANDLERS CallMgrChars;
  /* 0x0194 */ void* DirectOidRequestCompleteHandler /* function */;
  /* 0x0198 */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x019c */ void* FreeSharedMemoryHandler /* function */;
  /* 0x01a0 */ void* AllocateSharedMemoryContext;
  /* 0x01a4 */ struct _UNICODE_STRING ImageName;
  /* 0x01ac */ class KRef<NDIS_BIND_PROTOCOL_DRIVER> Bind;
  /* 0x01b0 */ class KCoalescingWorkItem<_NDIS_PROTOCOL_BLOCK> NotifyBindCompleteWorkItem;
} NDIS_PROTOCOL_BLOCK, *PNDIS_PROTOCOL_BLOCK; /* size: 0x01cc */

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char IPv6SourceAddress[16];
  /* 0x0014 */ unsigned char IPv6DestAddress[16];
  /* 0x0024 */ unsigned short TCPSourcePortNumber;
  /* 0x0026 */ unsigned short TCPDestPortNumber;
} NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS, *PNDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS; /* size: 0x0028 */

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
} NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS, *PNDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS; /* size: 0x0004 */

typedef struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long MaskOffset;
  /* 0x0008 */ unsigned long MaskSize;
  /* 0x000c */ unsigned long PatternOffset;
  /* 0x0010 */ unsigned long PatternSize;
} NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN, *PNDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN; /* size: 0x0014 */

typedef union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN
{
  union
  {
    /* 0x0000 */ struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV4_TCP_SYN_WOL_PACKET_PARAMETERS IPv4TcpSynParameters;
    /* 0x0000 */ struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_IPV6_TCP_SYN_WOL_PACKET_PARAMETERS IPv6TcpSynParameters;
    /* 0x0000 */ struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS EapolRequestIdMessageParameters;
    /* 0x0000 */ struct _NDIS_PM_WOL_PATTERN::_WOL_PATTERN::_WOL_BITMAP_PATTERN WoLBitMapPattern;
  }; /* size: 0x0028 */
} NDIS_PM_WOL_PATTERN::_WOL_PATTERN, *PNDIS_PM_WOL_PATTERN::_WOL_PATTERN; /* size: 0x0028 */

typedef struct _NDIS_PORT
{
  /* 0x0000 */ struct _NDIS_PORT* Next;
  /* 0x0004 */ void* NdisReserved;
  /* 0x0008 */ void* MiniportReserved;
  /* 0x000c */ void* ProtocolReserved;
  /* 0x0010 */ struct _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
} NDIS_PORT, *PNDIS_PORT; /* size: 0x0050 */

typedef struct _NDK_ADAPTER_INFO
{
  /* 0x0000 */ struct NDK_VERSION Version;
  /* 0x0004 */ unsigned int VendorId;
  /* 0x0008 */ unsigned int DeviceId;
  /* 0x000c */ unsigned long MaxRegistrationSize;
  /* 0x0010 */ unsigned long MaxWindowSize;
  /* 0x0014 */ unsigned long FRMRPageCount;
  /* 0x0018 */ unsigned long MaxInitiatorRequestSge;
  /* 0x001c */ unsigned long MaxReceiveRequestSge;
  /* 0x0020 */ unsigned long MaxReadRequestSge;
  /* 0x0024 */ unsigned long MaxTransferLength;
  /* 0x0028 */ unsigned long MaxInlineDataSize;
  /* 0x002c */ unsigned long MaxInboundReadLimit;
  /* 0x0030 */ unsigned long MaxOutboundReadLimit;
  /* 0x0034 */ unsigned long MaxReceiveQueueDepth;
  /* 0x0038 */ unsigned long MaxInitiatorQueueDepth;
  /* 0x003c */ unsigned long MaxSrqDepth;
  /* 0x0040 */ unsigned long MaxCqDepth;
  /* 0x0044 */ unsigned long LargeRequestThreshold;
  /* 0x0048 */ unsigned long MaxCallerData;
  /* 0x004c */ unsigned long MaxCalleeData;
  /* 0x0050 */ unsigned long AdapterFlags;
  /* 0x0054 */ enum _NDK_RDMA_TECHNOLOGY RdmaTechnology;
} NDK_ADAPTER_INFO, *PNDK_ADAPTER_INFO; /* size: 0x0058 */

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    /* 0x0000 */ unsigned long Count;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; /* size: 0x0004 */

class KRundownBase
{
  /* 0x0000 */ struct _EX_RUNDOWN_REF m_rundown;
}; /* size: 0x0004 */

struct DOT11_BYTE_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfBytes;
  /* 0x0008 */ unsigned long uTotalNumOfBytes;
  /* 0x000c */ unsigned char ucBuffer[1];
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

typedef struct _NDIS_GFT_HEADER_TRANSPOSITION_PROFILE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFP_TABLE_TYPE TableType;
  /* 0x000c */ unsigned long ProfileId;
  /* 0x0010 */ unsigned long HeaderGroupTranspositionProfileArrayOffset;
  /* 0x0014 */ unsigned long HeaderGroupTranspositionProfileArrayNumElements;
  /* 0x0018 */ unsigned long HeaderGroupTranspositionProfileArrayElementSize;
  /* 0x001c */ unsigned long CustomActionProfileOffset;
} NDIS_GFT_HEADER_TRANSPOSITION_PROFILE, *PNDIS_GFT_HEADER_TRANSPOSITION_PROFILE; /* size: 0x0020 */

typedef struct _NDIS_TASK_IPSEC
{
  struct
  {
    /* 0x0000 */ unsigned long AH_ESP_COMBINED;
    /* 0x0004 */ unsigned long TRANSPORT_TUNNEL_COMBINED;
    /* 0x0008 */ unsigned long V4_OPTIONS;
    /* 0x000c */ unsigned long RESERVED;
  } /* size: 0x0010 */ Supported;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0010 */ unsigned long MD5 : 1; /* bit position: 0 */
      /* 0x0010 */ unsigned long SHA_1 : 1; /* bit position: 1 */
      /* 0x0010 */ unsigned long Transport : 1; /* bit position: 2 */
      /* 0x0010 */ unsigned long Tunnel : 1; /* bit position: 3 */
      /* 0x0010 */ unsigned long Send : 1; /* bit position: 4 */
      /* 0x0010 */ unsigned long Receive : 1; /* bit position: 5 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4AH;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long DES : 1; /* bit position: 0 */
      /* 0x0014 */ unsigned long RESERVED : 1; /* bit position: 1 */
      /* 0x0014 */ unsigned long TRIPLE_DES : 1; /* bit position: 2 */
      /* 0x0014 */ unsigned long NULL_ESP : 1; /* bit position: 3 */
      /* 0x0014 */ unsigned long Transport : 1; /* bit position: 4 */
      /* 0x0014 */ unsigned long Tunnel : 1; /* bit position: 5 */
      /* 0x0014 */ unsigned long Send : 1; /* bit position: 6 */
      /* 0x0014 */ unsigned long Receive : 1; /* bit position: 7 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4ESP;
} NDIS_TASK_IPSEC, *PNDIS_TASK_IPSEC; /* size: 0x0018 */

struct std::nothrow_t
{
}; /* size: 0x0001 */

typedef struct _NDIS_GFP_HEADER_GROUP_EXACT_MATCH
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long HeadersPresent;
  /* 0x000c */ long Padding_141;
  /* 0x0010 */ unsigned __int64 MatchFields;
  /* 0x0018 */ struct _NDIS_GFP_ETHERNET_HEADER_FIELDS EthernetFields;
  union
  {
    union
    {
      struct
      {
        /* 0x002c */ struct in_addr SourceIPAddress;
        /* 0x0030 */ struct in_addr DestinationIPAddress;
      } /* size: 0x0008 */ IPv4Address;
      struct
      {
        /* 0x002c */ struct in6_addr SourceIPAddress;
        /* 0x003c */ struct in6_addr DestinationIPAddress;
      } /* size: 0x0020 */ IPv6Address;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ IPAddress;
  /* 0x004c */ unsigned char Dscp;
  /* 0x004d */ unsigned char IPProtocol;
  /* 0x004e */ char Padding_142[2];
  union
  {
    union
    {
      struct
      {
        /* 0x0050 */ unsigned short SourcePort;
        /* 0x0052 */ unsigned short DestinationPort;
      } /* size: 0x0004 */ Udp;
      struct
      {
        /* 0x0050 */ unsigned short SourcePort;
        /* 0x0052 */ unsigned short DestinationPort;
        /* 0x0054 */ unsigned char TcpFlags;
        /* 0x0055 */ char __PADDING__[1];
      } /* size: 0x0006 */ Tcp;
      struct
      {
        /* 0x0050 */ unsigned char Type;
        /* 0x0051 */ unsigned char Code;
      } /* size: 0x0002 */ Icmp;
      struct
      {
        /* 0x0050 */ unsigned long TenantId;
        /* 0x0054 */ unsigned short GreProtocol;
        /* 0x0056 */ char __PADDING__[2];
      } /* size: 0x0008 */ Encapsulation;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ TransportOrEncapsulation;
} NDIS_GFP_HEADER_GROUP_EXACT_MATCH, *PNDIS_GFP_HEADER_GROUP_EXACT_MATCH; /* size: 0x0058 */

struct FILTERDBS
{
  union
  {
    /* 0x0000 */ struct _X_FILTER* EthDB;
    /* 0x0000 */ struct _X_FILTER* NullDB;
  }; /* size: 0x0004 */
  /* 0x0004 */ struct _X_FILTER* TrDB;
  /* 0x0008 */ void* YYYDB;
  /* 0x000c */ void* XXXDB;
}; /* size: 0x0010 */

struct DOT11_EXTSTA_CAPABILITY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uScanSSIDListSize;
  /* 0x0008 */ unsigned long uDesiredBSSIDListSize;
  /* 0x000c */ unsigned long uDesiredSSIDListSize;
  /* 0x0010 */ unsigned long uExcludedMacAddressListSize;
  /* 0x0014 */ unsigned long uPrivacyExemptionListSize;
  /* 0x0018 */ unsigned long uKeyMappingTableSize;
  /* 0x001c */ unsigned long uDefaultKeyTableSize;
  /* 0x0020 */ unsigned long uWEPKeyValueMaxLength;
  /* 0x0024 */ unsigned long uPMKIDCacheSize;
  /* 0x0028 */ unsigned long uMaxNumPerSTADefaultKeyTables;
}; /* size: 0x002c */

typedef struct _NDIS_TCP_IP_CHECKSUM_PACKET_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NdisPacketChecksumV4 : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long NdisPacketChecksumV6 : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long NdisPacketTcpChecksum : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long NdisPacketUdpChecksum : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long NdisPacketIpChecksum : 1; /* bit position: 4 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NdisPacketTcpChecksumFailed : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long NdisPacketUdpChecksumFailed : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long NdisPacketIpChecksumFailed : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long NdisPacketTcpChecksumSucceeded : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long NdisPacketUdpChecksumSucceeded : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long NdisPacketIpChecksumSucceeded : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned long NdisPacketLoopback : 1; /* bit position: 6 */
      }; /* bitfield */
    } /* size: 0x0004 */ Receive;
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} NDIS_TCP_IP_CHECKSUM_PACKET_INFO, *PNDIS_TCP_IP_CHECKSUM_PACKET_INFO; /* size: 0x0004 */

class KWorkItemBase<_NDIS_PROTOCOL_BLOCK,KCoalescingWorkItem<_NDIS_PROTOCOL_BLOCK> >
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM m_workitem;
  /* 0x0010 */ struct _NDIS_PROTOCOL_BLOCK* m_context;
  /* 0x0014 */ void* m_callback /* function */;
}; /* size: 0x0018 */

typedef struct _NDIS_COMMON_OPEN_BLOCK
{
  union
  {
    /* 0x0000 */ void* MacHandle;
    /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  }; /* size: 0x0004 */
  /* 0x0004 */ void* BindingHandle;
  /* 0x0008 */ struct _NDIS_MINIPORT_BLOCK* MiniportHandle;
  /* 0x000c */ struct _NDIS_PROTOCOL_BLOCK* ProtocolHandle;
  /* 0x0010 */ void* ProtocolBindingContext;
  /* 0x0014 */ void* NextSendHandler /* function */;
  /* 0x0018 */ void* NextSendContext;
  /* 0x001c */ void* MiniportAdapterContext;
  /* 0x0020 */ unsigned char Reserved1;
  /* 0x0021 */ unsigned char CallingFromNdis6Protocol;
  /* 0x0022 */ unsigned char Reserved3;
  /* 0x0023 */ unsigned char Reserved4;
  /* 0x0024 */ void* NextReturnNetBufferListsHandler /* function */;
  /* 0x0028 */ unsigned long Reserved5;
  /* 0x002c */ void* NextReturnNetBufferListsContext;
  union
  {
    /* 0x0030 */ void* SendHandler /* function */;
    /* 0x0030 */ void* WanSendHandler /* function */;
  }; /* size: 0x0004 */
  /* 0x0034 */ void* TransferDataHandler /* function */;
  /* 0x0038 */ void* SendCompleteHandler /* function */;
  /* 0x003c */ void* TransferDataCompleteHandler /* function */;
  /* 0x0040 */ void* ReceiveHandler /* function */;
  /* 0x0044 */ void* ReceiveCompleteHandler /* function */;
  /* 0x0048 */ void* WanReceiveHandler /* function */;
  /* 0x004c */ void* RequestCompleteHandler /* function */;
  /* 0x0050 */ void* ReceivePacketHandler /* function */;
  /* 0x0054 */ void* SendPacketsHandler /* function */;
  /* 0x0058 */ void* ResetHandler /* function */;
  /* 0x005c */ void* RequestHandler /* function */;
  /* 0x0060 */ void* OidRequestHandler /* function */;
  /* 0x0064 */ void* ResetCompleteHandler /* function */;
  union
  {
    /* 0x0068 */ void* StatusHandler /* function */;
    /* 0x0068 */ void* StatusHandlerEx /* function */;
  }; /* size: 0x0004 */
  /* 0x006c */ void* StatusCompleteHandler /* function */;
  /* 0x0070 */ volatile unsigned long OpenFlags;
  /* 0x0074 */ long References;
  /* 0x0078 */ unsigned long SpinLock;
  /* 0x007c */ void* FilterHandle;
  /* 0x0080 */ unsigned int FrameTypeArraySize;
  /* 0x0084 */ unsigned short FrameTypeArray[4];
  /* 0x008c */ unsigned long ProtocolOptions;
  /* 0x0090 */ unsigned long CurrentLookahead;
  /* 0x0094 */ void* WSendHandler /* function */;
  /* 0x0098 */ void* WTransferDataHandler /* function */;
  /* 0x009c */ void* WSendPacketsHandler /* function */;
  /* 0x00a0 */ void* CancelSendPacketsHandler /* function */;
  /* 0x00a4 */ unsigned long WakeUpEnable;
  /* 0x00a8 */ struct _NDIS_PM_PARAMETERS PMCurrentParameters;
  /* 0x00bc */ struct _KEVENT* CloseCompleteEvent;
  /* 0x00c0 */ struct _NDIS_COMMON_OPEN_BLOCK::_QUEUED_CLOSE QC;
  /* 0x00d4 */ long AfReferences;
  /* 0x00d8 */ struct _NDIS_OPEN_BLOCK* NextGlobalOpen;
  /* 0x00dc */ struct _NDIS_OPEN_BLOCK* MiniportNextOpen;
  /* 0x00e0 */ struct _NDIS_OPEN_BLOCK* ProtocolNextOpen;
  /* 0x00e4 */ struct _UNICODE_STRING* BindDeviceName;
  /* 0x00e8 */ struct _UNICODE_STRING* RootDeviceName;
  /* 0x00ec */ struct _NDIS_OPEN_BLOCK* FilterNextOpen;
  /* 0x00f0 */ unsigned int PacketFilters;
  /* 0x00f4 */ unsigned int OldPacketFilters;
  /* 0x00f8 */ unsigned int MaxMulticastAddresses;
  /* 0x00fc */ struct _ETH_MULTICAST_WRAPPER* MCastAddressBuf;
  /* 0x0100 */ unsigned int NumAddresses;
  /* 0x0104 */ struct _ETH_MULTICAST_WRAPPER* OldMCastAddressBuf;
  /* 0x0108 */ unsigned int OldNumAddresses;
  /* 0x010c */ unsigned char* RssParametersBuffer;
  /* 0x0110 */ struct _NDIS_RECEIVE_SCALE_PARAMETERS* NdisRSSParameters;
  /* 0x0114 */ struct _SINGLE_LIST_ENTRY PatternList;
  /* 0x0118 */ struct _SINGLE_LIST_ENTRY WOLPatternList;
  /* 0x011c */ struct _SINGLE_LIST_ENTRY PMProtocolOffloadList;
  /* 0x0120 */ void* ProtSendNetBufferListsComplete /* function */;
  /* 0x0124 */ void* SendCompleteNdisPacketContext;
  /* 0x0128 */ void* SendCompleteNetBufferListsContext;
  /* 0x012c */ void* ReceiveNetBufferLists /* function */;
  /* 0x0130 */ void* ReceiveNetBufferListsContext;
  /* 0x0134 */ void* SavedSendPacketsHandler /* function */;
  /* 0x0138 */ void* SavedCancelSendPacketsHandler /* function */;
  /* 0x013c */ void* SavedSendHandler /* function */;
  /* 0x0140 */ struct NDIS_NBL_TRACKER_HANDLE__* NblTracker;
  /* 0x0144 */ struct NDIS_REFCOUNT_HANDLE__* RefCountTracker;
  /* 0x0148 */ unsigned long RefCountLock;
  /* 0x014c */ unsigned long ProtocolMajorVersion;
  /* 0x0150 */ void** IfBlock;
  /* 0x0154 */ struct _NDIS_SPIN_LOCK PnPStateLock;
  /* 0x015c */ enum NDIS_NDIS5_DRIVER_STATE PnPState;
  /* 0x0160 */ int OutstandingSends;
  /* 0x0164 */ struct _NDIS_EVENT PauseEvent;
  /* 0x0174 */ void* Ndis5WanSendHandler /* function */;
  /* 0x0178 */ void* ProtSendCompleteHandler /* function */;
  /* 0x017c */ void* OidRequestCompleteHandler /* function */;
  /* 0x0180 */ struct _NDIS_OPEN_OFFLOAD* Offload;
  /* 0x0184 */ struct _NDIS_STATUS_UNBIND_WORKITEM* StatusUnbindWorkItem;
  /* 0x0188 */ unsigned __int64 DpcStartCycle;
  /* 0x0190 */ struct PNDIS_PER_PROCESSOR_SLOT__* ReceivedAPacketSlot;
  /* 0x0194 */ void* DirectOidRequestHandler /* function */;
  /* 0x0198 */ struct _LIST_ENTRY ReceiveQueueList;
  /* 0x01a0 */ unsigned long NumReceiveQueues;
  /* 0x01a4 */ struct _LIST_ENTRY SharedMemoryBlockList;
  /* 0x01ac */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x01b0 */ void* FreeSharedMemoryHandler /* function */;
  /* 0x01b4 */ void* AllocateSharedMemoryContext;
  /* 0x01b8 */ unsigned long NumAllocatedVFs;
  /* 0x01bc */ struct _LIST_ENTRY VFList;
  /* 0x01c4 */ unsigned long NumActiveVPorts;
  /* 0x01c8 */ struct _LIST_ENTRY VPortList;
  /* 0x01d0 */ unsigned long AoAcReferences;
  /* 0x01d4 */ struct NDIS_BIND_PROTOCOL_LINK* Bind;
  /* 0x01d8 */ struct _WORK_QUEUE_ITEM UnsolicitedUnbindComplete;
  /* 0x01e8 */ struct _KEVENT* UnsolicitedUnbindEvent;
  /* 0x01ec */ BOOL PendingLegacyUnbind;
  /* 0x01ed */ char Padding_143[3];
  /* 0x01f0 */ struct _KEVENT* WaitNetPnpEvent;
  /* 0x01f4 */ struct _PKTMON_COMPONENT_CONTEXT PktMonComp;
  /* 0x0200 */ struct _PKTMON_EDGE_CONTEXT PktMonEdge;
  /* 0x020c */ long __PADDING__[1];
} NDIS_COMMON_OPEN_BLOCK, *PNDIS_COMMON_OPEN_BLOCK; /* size: 0x0210 */

typedef struct __vc_attributes::helper_attributes::v1_alttypeAttribute
{
  /* 0x0000 */ enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
} _vc_attributes::helper_attributes::v1_alttypeAttribute, *P_vc_attributes::helper_attributes::v1_alttypeAttribute; /* size: 0x0004 */

typedef struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY
{
  /* 0x0000 */ union _LARGE_INTEGER MessageAddress;
  /* 0x0008 */ unsigned long TargetProcessorSet;
  /* 0x000c */ struct _KINTERRUPT* InterruptObject;
  /* 0x0010 */ unsigned long MessageData;
  /* 0x0014 */ unsigned long Vector;
  /* 0x0018 */ unsigned char Irql;
  /* 0x0019 */ char Padding_144[3];
  /* 0x001c */ enum _KINTERRUPT_MODE Mode;
  /* 0x0020 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0024 */ long __PADDING__[1];
} IO_INTERRUPT_MESSAGE_INFO_ENTRY, *PIO_INTERRUPT_MESSAGE_INFO_ENTRY; /* size: 0x0028 */

struct NdisDebugBlock<1148473410>
{
}; /* size: 0x0001 */

typedef struct _NDIS_TASK_TCP_IP_CHECKSUM
{
  struct
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long IpChecksum : 1; /* bit position: 4 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4Transmit;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x0004 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
      /* 0x0004 */ unsigned long IpChecksum : 1; /* bit position: 4 */
    }; /* bitfield */
  } /* size: 0x0004 */ V4Receive;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0008 */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x0008 */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x0008 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x0008 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
    }; /* bitfield */
  } /* size: 0x0004 */ V6Transmit;
  struct
  {
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long IpOptionsSupported : 1; /* bit position: 0 */
      /* 0x000c */ unsigned long TcpOptionsSupported : 1; /* bit position: 1 */
      /* 0x000c */ unsigned long TcpChecksum : 1; /* bit position: 2 */
      /* 0x000c */ unsigned long UdpChecksum : 1; /* bit position: 3 */
    }; /* bitfield */
  } /* size: 0x0004 */ V6Receive;
} NDIS_TASK_TCP_IP_CHECKSUM, *PNDIS_TASK_TCP_IP_CHECKSUM; /* size: 0x0010 */

struct KALLOCATOR<1282691138,1>
{
}; /* size: 0x0001 */

struct NDIS_BIND_PROTOCOL_LINK
{
  /* 0x0000 */ long Padding_145[13];
  /* 0x0034 */ class KRef<NDIS_BIND_PROTOCOL_DRIVER> BindDriver;
}; /* size: 0x0038 */

typedef struct _NDIS_WAN_PACKET
{
  /* 0x0000 */ struct _LIST_ENTRY WanPacketQueue;
  /* 0x0008 */ unsigned char* CurrentBuffer;
  /* 0x000c */ unsigned long CurrentLength;
  /* 0x0010 */ unsigned char* StartBuffer;
  /* 0x0014 */ unsigned char* EndBuffer;
  /* 0x0018 */ void* ProtocolReserved1;
  /* 0x001c */ void* ProtocolReserved2;
  /* 0x0020 */ void* ProtocolReserved3;
  /* 0x0024 */ void* ProtocolReserved4;
  /* 0x0028 */ void* MacReserved1;
  /* 0x002c */ void* MacReserved2;
  /* 0x0030 */ void* MacReserved3;
  /* 0x0034 */ void* MacReserved4;
} NDIS_WAN_PACKET, *PNDIS_WAN_PACKET; /* size: 0x0038 */

typedef struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST* NextBlock;
  /* 0x0008 */ struct _NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST* DependentBlockList;
  /* 0x000c */ int Status;
  /* 0x0010 */ void* NdisReserved[3];
  /* 0x001c */ struct _NDIS_OFFLOAD_HANDLE* OffloadHandle;
  /* 0x0020 */ void* ProtocolReserved[2];
  /* 0x0028 */ void* MiniportReserved[2];
  /* 0x0030 */ void* ImReserved[2];
  /* 0x0038 */ void* Scratch[2];
  /* 0x0040 */ void* SourceHandle;
  /* 0x0044 */ unsigned long PortNumber;
  /* 0x0048 */ struct _NET_BUFFER_LIST* NetBufferListChain;
} NDIS_PROTOCOL_OFFLOAD_BLOCK_LIST, *PNDIS_PROTOCOL_OFFLOAD_BLOCK_LIST; /* size: 0x004c */

typedef struct _NDIS_GFT_DELETE_TABLE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
} NDIS_GFT_DELETE_TABLE_PARAMETERS, *PNDIS_GFT_DELETE_TABLE_PARAMETERS; /* size: 0x000c */

typedef struct _NDIS_GFT_OFFLOAD_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long ExceptionVPortId;
  /* 0x000c */ unsigned long CopyLookaheadLength;
  /* 0x0010 */ unsigned long SampleLookaheadLength;
} NDIS_GFT_OFFLOAD_PARAMETERS, *PNDIS_GFT_OFFLOAD_PARAMETERS; /* size: 0x0014 */

typedef struct _NDIS_PM_PACKET_PATTERN
{
  /* 0x0000 */ unsigned long Priority;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned long MaskSize;
  /* 0x000c */ unsigned long PatternOffset;
  /* 0x0010 */ unsigned long PatternSize;
  /* 0x0014 */ unsigned long PatternFlags;
} NDIS_PM_PACKET_PATTERN, *PNDIS_PM_PACKET_PATTERN; /* size: 0x0018 */

typedef struct _NDIS_PM_COUNTED_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ wchar_t String[65];
} NDIS_PM_COUNTED_STRING, *PNDIS_PM_COUNTED_STRING; /* size: 0x0084 */

typedef struct _NDIS_PM_WOL_PATTERN
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Priority;
  /* 0x000c */ enum _NDIS_PM_WOL_PACKET WoLPacketType;
  /* 0x0010 */ struct _NDIS_PM_COUNTED_STRING FriendlyName;
  /* 0x0094 */ unsigned long PatternId;
  /* 0x0098 */ unsigned long NextWoLPatternOffset;
  /* 0x009c */ union _NDIS_PM_WOL_PATTERN::_WOL_PATTERN WoLPattern;
} NDIS_PM_WOL_PATTERN, *PNDIS_PM_WOL_PATTERN; /* size: 0x00c4 */

typedef struct _NDIS_PM_PROTOCOL_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Priority;
  /* 0x000c */ enum _NDIS_PM_PROTOCOL_OFFLOAD_TYPE ProtocolOffloadType;
  /* 0x0010 */ struct _NDIS_PM_COUNTED_STRING FriendlyName;
  /* 0x0094 */ unsigned long ProtocolOffloadId;
  /* 0x0098 */ unsigned long NextProtocolOffloadOffset;
  /* 0x009c */ long Padding_146;
  /* 0x00a0 */ union _NDIS_PM_PROTOCOL_OFFLOAD::_PROTOCOL_OFFLOAD_PARAMETERS ProtocolOffloadParameters;
} NDIS_PM_PROTOCOL_OFFLOAD, *PNDIS_PM_PROTOCOL_OFFLOAD; /* size: 0x0100 */

typedef struct _NDIS_PACKET_PATTERN_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY DupLink;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ void* Source;
  /* 0x0010 */ unsigned long Priority;
  /* 0x0014 */ unsigned long EffectivePriority;
  /* 0x0018 */ unsigned long Id;
  /* 0x001c */ unsigned long PortNumber;
  union
  {
    /* 0x0020 */ struct _NDIS_PM_PACKET_PATTERN Pattern;
    /* 0x0020 */ struct _NDIS_PM_WOL_PATTERN WoLPattern;
    /* 0x0020 */ struct _NDIS_PM_PROTOCOL_OFFLOAD ProtocolOffload;
  }; /* size: 0x0100 */
} NDIS_PACKET_PATTERN_ENTRY, *PNDIS_PACKET_PATTERN_ENTRY; /* size: 0x0120 */

typedef struct _NDIS_OFFLOAD_HANDLE
{
  /* 0x0000 */ void* NdisReserved[1];
  /* 0x0004 */ void* MiniportOffloadContext;
} NDIS_OFFLOAD_HANDLE, *PNDIS_OFFLOAD_HANDLE; /* size: 0x0008 */

typedef struct _NDIS_OFFLOAD_HANDLE_PRIVATE
{
  /* 0x0000 */ struct _NDIS_OFFLOAD_HANDLE Handle;
  /* 0x0008 */ void* ProtocolBindingContext;
} NDIS_OFFLOAD_HANDLE_PRIVATE, *PNDIS_OFFLOAD_HANDLE_PRIVATE; /* size: 0x000c */

typedef struct _NDIS_SCATTER_GATHER_LIST_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long QueueId;
  /* 0x000c */ enum _NDIS_SHARED_MEMORY_USAGE SharedMemoryUsage;
  /* 0x0010 */ struct _MDL* Mdl;
  /* 0x0014 */ void* CurrentVa;
  /* 0x0018 */ unsigned long Length;
  /* 0x001c */ void* ProcessSGListHandler /* function */;
  /* 0x0020 */ void* Context;
  /* 0x0024 */ struct _SCATTER_GATHER_LIST* ScatterGatherListBuffer;
  /* 0x0028 */ unsigned long ScatterGatherListBufferSize;
  /* 0x002c */ unsigned long ScatterGatherListBufferSizeNeeded;
} NDIS_SCATTER_GATHER_LIST_PARAMETERS, *PNDIS_SCATTER_GATHER_LIST_PARAMETERS; /* size: 0x0030 */

typedef struct _NDIS_ENTRY_HEADER
{
  /* 0x0000 */ struct _NDIS_POOL_HEADER* PoolHeader;
  /* 0x0004 */ struct _LIST_ENTRY Linkage;
  /* 0x000c */ unsigned long LookasideProcIndex;
} NDIS_ENTRY_HEADER, *PNDIS_ENTRY_HEADER; /* size: 0x0010 */

class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>::iterator;

struct KALLOCATOR<1935819854,1>
{
}; /* size: 0x0001 */

typedef struct _NDIS_NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _LOOKASIDE_LIST_EX List;
  /* 0x0048 */ long Padding_147[14];
  /* 0x0080 */ union _SLIST_HEADER BackupList;
  /* 0x0088 */ long Padding_148[14];
  /* 0x00c0 */ union _SLIST_HEADER* AllocListPtr;
  /* 0x00c4 */ union _SLIST_HEADER* FreeListPtr;
  /* 0x00c8 */ unsigned long ListSwapLock;
  /* 0x00cc */ unsigned char Initialized;
  /* 0x00cd */ char __PADDING__[51];
} NDIS_NPAGED_LOOKASIDE_LIST, *PNDIS_NPAGED_LOOKASIDE_LIST; /* size: 0x0100 */

class KRef<NDIS_BIND_PROTOCOL_DRIVER>::KRefHolder
{
  /* 0x0000 */ struct NDIS_BIND_PROTOCOL_DRIVER _t;
  /* 0x0018 */ unsigned long RefCount;
}; /* size: 0x001c */

typedef struct _NDIS_PENDING_IM_INSTANCE
{
  /* 0x0000 */ struct _NDIS_PENDING_IM_INSTANCE* Next;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ struct _UNICODE_STRING Name;
} NDIS_PENDING_IM_INSTANCE, *PNDIS_PENDING_IM_INSTANCE; /* size: 0x0010 */

typedef struct _NDIS_MINIPORT_INIT_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST* AllocatedResources;
  /* 0x000c */ void* IMDeviceInstanceContext;
  /* 0x0010 */ void* MiniportAddDeviceContext;
  /* 0x0014 */ unsigned long IfIndex;
  /* 0x0018 */ union _NET_LUID_LH NetLuid;
  /* 0x0020 */ struct _NDIS_PORT_AUTHENTICATION_PARAMETERS* DefaultPortAuthStates;
  /* 0x0024 */ struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES* PciDeviceCustomProperties;
} NDIS_MINIPORT_INIT_PARAMETERS, *PNDIS_MINIPORT_INIT_PARAMETERS; /* size: 0x0028 */

typedef struct _NDIS_TASK_TCP_LARGE_SEND
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long MaxOffLoadSize;
  /* 0x0008 */ unsigned long MinSegmentCount;
  /* 0x000c */ unsigned char TcpOptions;
  /* 0x000d */ unsigned char IpOptions;
  /* 0x000e */ char __PADDING__[2];
} NDIS_TASK_TCP_LARGE_SEND, *PNDIS_TASK_TCP_LARGE_SEND; /* size: 0x0010 */

typedef struct _NDIS_PORT_AUTHENTICATION_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_PORT_CONTROL_STATE SendControlState;
  /* 0x0008 */ enum _NDIS_PORT_CONTROL_STATE RcvControlState;
  /* 0x000c */ enum _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
  /* 0x0010 */ enum _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
} NDIS_PORT_AUTHENTICATION_PARAMETERS, *PNDIS_PORT_AUTHENTICATION_PARAMETERS; /* size: 0x0014 */

typedef struct _NDIS_PD_QUEUE_DISPATCH
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* PDPostAndDrainBufferList /* function */;
  /* 0x000c */ void* PDQueryQueueDepth /* function */;
  /* 0x0010 */ void* PDFlushQueue /* function */;
  /* 0x0014 */ void* PDPostAndDrainBufferListEx /* function */;
} NDIS_PD_QUEUE_DISPATCH, *PNDIS_PD_QUEUE_DISPATCH; /* size: 0x0018 */

typedef struct _NDIS_MINIPORT_PAUSE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long PauseReason;
} NDIS_MINIPORT_PAUSE_PARAMETERS, *PNDIS_MINIPORT_PAUSE_PARAMETERS; /* size: 0x000c */

typedef struct _NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NextHeader : 8; /* bit position: 0 */
        /* 0x0000 */ unsigned long PadLength : 8; /* bit position: 8 */
        /* 0x0000 */ unsigned long AhHeaderOffset : 8; /* bit position: 16 */
        /* 0x0000 */ unsigned long EspHeaderOffset : 8; /* bit position: 24 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NextHeader : 8; /* bit position: 0 */
        /* 0x0000 */ unsigned long PadLength : 8; /* bit position: 8 */
        /* 0x0000 */ unsigned long HeaderInfoSet : 1; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ Receive;
  }; /* size: 0x0004 */
} NDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V2_HEADER_NET_BUFFER_LIST_INFO; /* size: 0x0004 */

typedef struct _NDIS_MINIPORT_RESTART_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_RESTART_ATTRIBUTES* RestartAttributes;
  /* 0x0008 */ unsigned long Flags;
} NDIS_MINIPORT_RESTART_PARAMETERS, *PNDIS_MINIPORT_RESTART_PARAMETERS; /* size: 0x000c */

struct NdisDebugBlock<1396859982>
{
}; /* size: 0x0001 */

struct NdisDebugBlock<1920090443>
{
}; /* size: 0x0001 */

typedef struct _tlgTypeMapBase<unsigned long>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<unsigned long>, *PtlgTypeMapBase<unsigned long>; /* size: 0x0001 */

typedef struct _TCP_OFFLOAD_STATE_DELEGATED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ enum TCP_OFFLOAD_CONNECTION_STATE State;
  /* 0x000c */ unsigned short Flags;
  /* 0x000e */ char Padding_149[2];
  /* 0x0010 */ unsigned long RcvNxt;
  /* 0x0014 */ unsigned long RcvWnd;
  /* 0x0018 */ unsigned long SndUna;
  /* 0x001c */ unsigned long SndNxt;
  /* 0x0020 */ unsigned long SndMax;
  /* 0x0024 */ unsigned long SndWnd;
  /* 0x0028 */ unsigned long MaxSndWnd;
  /* 0x002c */ unsigned long SendWL1;
  /* 0x0030 */ unsigned long CWnd;
  /* 0x0034 */ unsigned long SsThresh;
  /* 0x0038 */ unsigned short SRtt;
  /* 0x003a */ unsigned short RttVar;
  /* 0x003c */ unsigned long TsRecent;
  /* 0x0040 */ unsigned long TsRecentAge;
  /* 0x0044 */ unsigned long TsTime;
  /* 0x0048 */ unsigned long TotalRT;
  /* 0x004c */ unsigned char DupAckCount;
  /* 0x004d */ unsigned char SndWndProbeCount;
  /* 0x004e */ char Padding_150[2];
  struct
  {
    /* 0x0050 */ unsigned char ProbeCount;
    /* 0x0001 */ char Padding_151[3];
    /* 0x0054 */ unsigned long TimeoutDelta;
  } /* size: 0x0008 */ KeepAlive;
  struct
  {
    /* 0x0058 */ unsigned char Count;
    /* 0x0001 */ char Padding_152[3];
    /* 0x005c */ unsigned long TimeoutDelta;
  } /* size: 0x0008 */ Retransmit;
  union
  {
    struct
    {
      /* 0x0060 */ struct _NET_BUFFER_LIST* SendDataHead;
      /* 0x0064 */ struct _NET_BUFFER_LIST* SendDataTail;
    }; /* size: 0x0008 */
    /* 0x0060 */ unsigned long SendBacklogSize;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0068 */ struct _NET_BUFFER_LIST* BufferedData;
    /* 0x0068 */ unsigned long ReceiveBacklogSize;
  }; /* size: 0x0004 */
  /* 0x006c */ unsigned long DWnd;
} TCP_OFFLOAD_STATE_DELEGATED, *PTCP_OFFLOAD_STATE_DELEGATED; /* size: 0x0070 */

struct _NDIS_SELECTIVE_SUSPEND;

typedef struct _tlgTypeMapBase<unsigned short>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<unsigned short>, *PtlgTypeMapBase<unsigned short>; /* size: 0x0001 */

typedef struct _DOT11_EXTAP_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uScanSSIDListSize;
  /* 0x0008 */ unsigned long uDesiredSSIDListSize;
  /* 0x000c */ unsigned long uPrivacyExemptionListSize;
  /* 0x0010 */ unsigned long uAssociationTableSize;
  /* 0x0014 */ unsigned long uDefaultKeyTableSize;
  /* 0x0018 */ unsigned long uWEPKeyValueMaxLength;
  /* 0x001c */ unsigned char bStrictlyOrderedServiceClassImplemented;
  /* 0x001d */ char Padding_153[3];
  /* 0x0020 */ unsigned long uNumSupportedCountryOrRegionStrings;
  /* 0x0024 */ unsigned char* pSupportedCountryOrRegionStrings[3];
  /* 0x0028 */ unsigned long uInfraNumSupportedUcastAlgoPairs;
  /* 0x002c */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
  /* 0x0030 */ unsigned long uInfraNumSupportedMcastAlgoPairs;
  /* 0x0034 */ struct DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
} DOT11_EXTAP_ATTRIBUTES, *PDOT11_EXTAP_ATTRIBUTES; /* size: 0x0038 */

typedef struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char Enabled;
  /* 0x0005 */ char Padding_154[3];
  /* 0x0008 */ struct _NDIS_NDK_CAPABILITIES* NdkCapabilities;
} NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES; /* size: 0x000c */

struct NDISWATCHDOG__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NDIS_EVENT_LOG_ENTRY
{
  /* 0x0000 */ unsigned short EventId;
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned short Timestamp : 15; /* bit position: 0 */
      /* 0x0002 */ unsigned short TimestampScale : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0002 */ unsigned short TimestampValue;
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned long StackTrace;
  /* 0x0008 */ void* Context;
} NDIS_EVENT_LOG_ENTRY, *PNDIS_EVENT_LOG_ENTRY; /* size: 0x000c */

typedef struct _NDIS_PD_CONFIG
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned char Enabled;
  /* 0x0009 */ char Padding_155[3];
  /* 0x000c */ unsigned long CapabilitiesOffset;
  /* 0x0010 */ unsigned long CapabilitiesSize;
  /* 0x0014 */ long __PADDING__[1];
} NDIS_PD_CONFIG, *PNDIS_PD_CONFIG; /* size: 0x0018 */

struct BINARY_DATA
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_156[2];
  /* 0x0004 */ void* Buffer;
}; /* size: 0x0008 */

typedef struct _tlgTypeMapBase<char16_t const *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<char16_t const *>, *PtlgTypeMapBase<char16_t const *>; /* size: 0x0001 */

typedef struct _NDIS_CONFIGURATION_PARAMETER
{
  /* 0x0000 */ enum _NDIS_PARAMETER_TYPE ParameterType;
  union
  {
    union
    {
      /* 0x0004 */ unsigned long IntegerData;
      /* 0x0004 */ struct _UNICODE_STRING StringData;
      /* 0x0004 */ struct BINARY_DATA BinaryData;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ ParameterData;
} NDIS_CONFIGURATION_PARAMETER, *PNDIS_CONFIGURATION_PARAMETER; /* size: 0x000c */

typedef struct _NDIS_WDF_CX_DRIVER_BLOCK
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0008 */ struct _UNICODE_STRING* RegistryPath;
  /* 0x000c */ struct NDIS_WDF_CX_DRIVER_CONTEXT__* CxDriverContext;
  /* 0x0010 */ struct _NDIS_WDF_CX_CHARACTERISTICS Chars;
  /* 0x0050 */ unsigned long ClientCount;
  /* 0x0054 */ enum _NDIS_WDF_CX_DRIVER_STATE State;
  /* 0x0055 */ char __PADDING__[3];
} NDIS_WDF_CX_DRIVER_BLOCK, *PNDIS_WDF_CX_DRIVER_BLOCK; /* size: 0x0058 */

typedef struct _IPSEC_OFFLOAD_V2_ADD_SA
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _IPSEC_OFFLOAD_V2_ADD_SA* Next;
  /* 0x0008 */ unsigned long NumExtHdrs;
  /* 0x000c */ unsigned long Flags;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned long SrcAddr;
      /* 0x0014 */ unsigned long DestAddr;
    } /* size: 0x0008 */ IPv4Endpoints;
    struct
    {
      /* 0x0010 */ unsigned char SrcAddr[16];
      /* 0x0020 */ unsigned char DestAddr[16];
    } /* size: 0x0020 */ IPv6Endpoints;
  }; /* size: 0x0020 */
  /* 0x0030 */ void* OffloadHandle;
  /* 0x0034 */ unsigned long UdpEspEncapsulation;
  /* 0x0038 */ struct _IPSEC_OFFLOAD_V2_SECURITY_ASSOCIATION SecAssoc[2];
  /* 0x0098 */ unsigned long KeyLength;
  /* 0x009c */ unsigned char KeyData[1];
  /* 0x009d */ char __PADDING__[3];
} IPSEC_OFFLOAD_V2_ADD_SA, *PIPSEC_OFFLOAD_V2_ADD_SA; /* size: 0x00a0 */

struct NDIS_WDF_CX_DRIVER_CONTEXT__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _tlgTypeMapBase<char16_t>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned short _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<char16_t>, *PtlgTypeMapBase<char16_t>; /* size: 0x0001 */

typedef struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST* NextBlock;
  /* 0x0008 */ struct _NDIS_MINIPORT_OFFLOAD_BLOCK_LIST* DependentBlockList;
  /* 0x000c */ int Status;
  /* 0x0010 */ void* NdisReserved[2];
  /* 0x0018 */ void** MiniportOffloadContext;
  /* 0x001c */ void* NdisOffloadHandle;
  /* 0x0020 */ void* ProtocolReserved[2];
  /* 0x0028 */ void* MiniportReserved[2];
  /* 0x0030 */ void* ImReserved[2];
  /* 0x0038 */ void* Scratch[2];
  /* 0x0040 */ void* SourceHandle;
  /* 0x0044 */ unsigned long PortNumber;
  /* 0x0048 */ struct _NET_BUFFER_LIST* NetBufferListChain;
} NDIS_MINIPORT_OFFLOAD_BLOCK_LIST, *PNDIS_MINIPORT_OFFLOAD_BLOCK_LIST; /* size: 0x004c */

typedef struct _tlgTypeMapBase<__int64>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<__int64>, *PtlgTypeMapBase<__int64>; /* size: 0x0001 */

struct NDIS_EVENT_LOG_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION Action;
  /* 0x000c */ unsigned long HeadersPresent;
  /* 0x0010 */ unsigned long HeaderFields;
} NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE, *PNDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE; /* size: 0x0014 */

typedef struct _NDIS_PD_QUEUE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum NDIS_PD_QUEUE_TYPE QueueType;
  /* 0x000c */ unsigned long QueueSize;
  /* 0x0010 */ unsigned long ReceiveDataLength;
  /* 0x0014 */ struct _GROUP_AFFINITY Affinity;
  /* 0x0020 */ unsigned long TrafficClassId;
  /* 0x0024 */ unsigned long MaximumPartialBufferCount;
  /* 0x0028 */ struct NDIS_PD_COUNTER_HANDLE__* CounterHandle;
  /* 0x002c */ long __PADDING__[1];
} NDIS_PD_QUEUE_PARAMETERS, *PNDIS_PD_QUEUE_PARAMETERS; /* size: 0x0030 */

typedef struct _NDIS_GFT_COUNTER_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long CounterIdStart;
  /* 0x000c */ unsigned long NumCounters;
  /* 0x0010 */ enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
  /* 0x0014 */ enum _NDIS_GFT_COUNTER_TYPE CounterType;
  /* 0x0018 */ unsigned long UpdatePeriod;
} NDIS_GFT_COUNTER_INFO, *PNDIS_GFT_COUNTER_INFO; /* size: 0x001c */

typedef struct _NDIS_OPEN_NDK_ADAPTER_PARAMETERS
{
  /* 0x0000 */ struct NDK_VERSION Version;
  /* 0x0004 */ unsigned long SwitchId;
  /* 0x0008 */ unsigned long VPortId;
} NDIS_OPEN_NDK_ADAPTER_PARAMETERS, *PNDIS_OPEN_NDK_ADAPTER_PARAMETERS; /* size: 0x000c */

typedef struct _DOT11_ASSOCIATION_INFO_EX
{
  /* 0x0000 */ unsigned char PeerMacAddress[6];
  /* 0x0006 */ unsigned char BSSID[6];
  /* 0x000c */ unsigned short usCapabilityInformation;
  /* 0x000e */ unsigned short usListenInterval;
  /* 0x0010 */ unsigned char ucPeerSupportedRates[255];
  /* 0x010f */ char Padding_157;
  /* 0x0110 */ unsigned short usAssociationID;
  /* 0x0112 */ char Padding_158[2];
  /* 0x0114 */ enum _DOT11_ASSOCIATION_STATE dot11AssociationState;
  /* 0x0118 */ enum _DOT11_POWER_MODE dot11PowerMode;
  /* 0x011c */ long Padding_159;
  /* 0x0120 */ union _LARGE_INTEGER liAssociationUpTime;
  /* 0x0128 */ unsigned __int64 ullNumOfTxPacketSuccesses;
  /* 0x0130 */ unsigned __int64 ullNumOfTxPacketFailures;
  /* 0x0138 */ unsigned __int64 ullNumOfRxPacketSuccesses;
  /* 0x0140 */ unsigned __int64 ullNumOfRxPacketFailures;
} DOT11_ASSOCIATION_INFO_EX, *PDOT11_ASSOCIATION_INFO_EX; /* size: 0x0148 */

struct DOT11_ASSOCIATION_PARAMS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char BSSID[6];
  /* 0x000a */ char Padding_160[2];
  /* 0x000c */ unsigned long uAssocRequestIEsOffset;
  /* 0x0010 */ unsigned long uAssocRequestIEsLength;
}; /* size: 0x0014 */

typedef struct _NDK_ADAPTER_DISPATCH
{
  /* 0x0000 */ void* NdkQueryExtension /* function */;
  /* 0x0004 */ void* NdkQueryAdapterInfo /* function */;
  /* 0x0008 */ void* NdkCreateCq /* function */;
  /* 0x000c */ void* NdkCreatePd /* function */;
  /* 0x0010 */ void* NdkCreateSharedEndpoint /* function */;
  /* 0x0014 */ void* NdkCreateConnector /* function */;
  /* 0x0018 */ void* NdkCreateListener /* function */;
  /* 0x001c */ void* NdkBuildLAM /* function */;
  /* 0x0020 */ void* NdkReleaseLAM /* function */;
} NDK_ADAPTER_DISPATCH, *PNDK_ADAPTER_DISPATCH; /* size: 0x0024 */

typedef struct _NDIS_WWAN_PREFERRED_PROVIDERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_LIST_HEADER PreferredListHeader;
} NDIS_WWAN_PREFERRED_PROVIDERS, *PNDIS_WWAN_PREFERRED_PROVIDERS; /* size: 0x0010 */

typedef struct _NDIS_FILTER_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
} NDIS_FILTER_ATTRIBUTES, *PNDIS_FILTER_ATTRIBUTES; /* size: 0x0008 */

typedef struct _NDK_EXTENSION_INTERFACE
{
  /* 0x0000 */ const void* Dispatch;
} NDK_EXTENSION_INTERFACE, *PNDK_EXTENSION_INTERFACE; /* size: 0x0004 */

typedef struct _PD_BUFFER_VIRTUAL_SUBNET_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int VirtualSubnetId : 24; /* bit position: 0 */
    /* 0x0000 */ unsigned int Reserved : 8; /* bit position: 24 */
  }; /* bitfield */
} PD_BUFFER_VIRTUAL_SUBNET_INFO, *PPD_BUFFER_VIRTUAL_SUBNET_INFO; /* size: 0x0004 */

typedef struct _PD_BUFFER_8021Q_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short UserPriority : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned short CanonicalFormatId : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned short VlanId : 12; /* bit position: 4 */
  }; /* bitfield */
} PD_BUFFER_8021Q_INFO, *PPD_BUFFER_8021Q_INFO; /* size: 0x0002 */

typedef struct _PD_BUFFER
{
  /* 0x0000 */ struct _PD_BUFFER* NextPDBuffer;
  /* 0x0004 */ struct _PD_BUFFER* NextPartialPDBuffer;
  /* 0x0008 */ void* PDClientReserved;
  /* 0x000c */ void* PDClientContext;
  /* 0x0010 */ unsigned char* DataBufferVirtualAddress;
  /* 0x0014 */ long Padding_161;
  /* 0x0018 */ union _LARGE_INTEGER DataBufferDmaLogicalAddress;
  /* 0x0020 */ unsigned long DataBufferSize;
  /* 0x0024 */ unsigned short PDClientContextSize;
  /* 0x0026 */ unsigned short Attributes;
  /* 0x0028 */ unsigned short Flags;
  /* 0x002a */ unsigned short DataStart;
  /* 0x002c */ unsigned long DataLength;
  struct
  {
    union
    {
      /* 0x0030 */ unsigned __int64 RxFilterContext;
      /* 0x0030 */ unsigned __int64 GftFlowEntryId;
    }; /* size: 0x0008 */
    /* 0x0038 */ unsigned long RxHashValue;
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x003c */ unsigned long RxIPHeaderChecksumSucceeded : 1; /* bit position: 0 */
          /* 0x003c */ unsigned long RxTCPChecksumSucceeded : 1; /* bit position: 1 */
          /* 0x003c */ unsigned long RxUDPChecksumSucceeded : 1; /* bit position: 2 */
          /* 0x003c */ unsigned long RxIPHeaderChecksumFailed : 1; /* bit position: 3 */
          /* 0x003c */ unsigned long RxTCPChecksumFailed : 1; /* bit position: 4 */
          /* 0x003c */ unsigned long RxUDPChecksumFailed : 1; /* bit position: 5 */
          /* 0x003c */ unsigned long RxHashComputed : 1; /* bit position: 6 */
          /* 0x003c */ unsigned long RxHashWithL4PortNumbers : 1; /* bit position: 7 */
          /* 0x003c */ unsigned long RxGftDirectionIngress : 1; /* bit position: 8 */
          /* 0x003c */ unsigned long RxGftExceptionPacket : 1; /* bit position: 9 */
          /* 0x003c */ unsigned long RxGftCopyPacket : 1; /* bit position: 10 */
          /* 0x003c */ unsigned long RxGftSamplePacket : 1; /* bit position: 11 */
          /* 0x003c */ unsigned long RxReserved1 : 4; /* bit position: 12 */
          /* 0x003c */ unsigned long RxCoalescedSegCount : 16; /* bit position: 16 */
        }; /* bitfield */
        /* 0x0040 */ unsigned long RxRscTcpTimestampDelta;
      }; /* size: 0x0008 */
      /* 0x003c */ unsigned long RxOffloads[2];
    }; /* size: 0x0008 */
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0044 */ unsigned long TxIsIPv4 : 1; /* bit position: 0 */
          /* 0x0044 */ unsigned long TxIsIPv6 : 1; /* bit position: 1 */
          /* 0x0044 */ unsigned long TxTransportHeaderOffset : 10; /* bit position: 2 */
          /* 0x0044 */ unsigned long TxMSS : 20; /* bit position: 12 */
        }; /* bitfield */
        struct /* bitfield */
        {
          /* 0x0048 */ unsigned long TxComputeIPHeaderChecksum : 1; /* bit position: 0 */
          /* 0x0048 */ unsigned long TxComputeTCPChecksum : 1; /* bit position: 1 */
          /* 0x0048 */ unsigned long TxComputeUDPChecksum : 1; /* bit position: 2 */
          /* 0x0048 */ unsigned long TxIsEncapsulatedPacket : 1; /* bit position: 3 */
          /* 0x0048 */ unsigned long TxInnerPacketOffsetsValid : 1; /* bit position: 4 */
          /* 0x0048 */ unsigned long TxReserved1 : 11; /* bit position: 5 */
          /* 0x0048 */ unsigned long TxInnerFrameOffset : 8; /* bit position: 16 */
          /* 0x0048 */ unsigned long TxInnerIpHeaderRelativeOffset : 6; /* bit position: 24 */
          /* 0x0048 */ unsigned long TxInnerIsIPv6 : 1; /* bit position: 30 */
          /* 0x0048 */ unsigned long TxInnerTcpOptionsPresent : 1; /* bit position: 31 */
        }; /* bitfield */
      }; /* size: 0x0008 */
      /* 0x0044 */ unsigned long TxOffloads[2];
    }; /* size: 0x0008 */
    /* 0x004c */ struct _PD_BUFFER_VIRTUAL_SUBNET_INFO VirtualSubnetInfo;
    /* 0x0050 */ struct _PD_BUFFER_8021Q_INFO Ieee8021qInfo;
    /* 0x0052 */ unsigned short GftSourceVPortId;
    /* 0x0054 */ unsigned long Reserved;
    /* 0x0058 */ unsigned __int64 ProviderScratch;
  } /* size: 0x0030 */ MetaDataV0;
} PD_BUFFER, *PPD_BUFFER; /* size: 0x0060 */

typedef struct _NDIS_WAN_CO_SET_LINK_INFO
{
  /* 0x0000 */ unsigned long MaxSendFrameSize;
  /* 0x0004 */ unsigned long MaxRecvFrameSize;
  /* 0x0008 */ unsigned long SendFramingBits;
  /* 0x000c */ unsigned long RecvFramingBits;
  /* 0x0010 */ unsigned long SendCompressionBits;
  /* 0x0014 */ unsigned long RecvCompressionBits;
  /* 0x0018 */ unsigned long SendACCM;
  /* 0x001c */ unsigned long RecvACCM;
} NDIS_WAN_CO_SET_LINK_INFO, *PNDIS_WAN_CO_SET_LINK_INFO; /* size: 0x0020 */

typedef struct _PATH_OFFLOAD_STATE_CACHED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned long PathMtu;
} PATH_OFFLOAD_STATE_CACHED, *PPATH_OFFLOAD_STATE_CACHED; /* size: 0x000c */

struct wistd::__compressed_pair_elem<wistd::default_delete<NDIS_BIND_FILTER_LINK>,1,1>
{
}; /* size: 0x0001 */

typedef struct _NDIS_TASK_OFFLOAD
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ enum _NDIS_TASK Task;
  /* 0x000c */ unsigned long OffsetNextTask;
  /* 0x0010 */ unsigned long TaskBufferLength;
  /* 0x0014 */ unsigned char TaskBuffer[1];
  /* 0x0015 */ char __PADDING__[3];
} NDIS_TASK_OFFLOAD, *PNDIS_TASK_OFFLOAD; /* size: 0x0018 */

typedef struct _NDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long QueueId;
} NDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE, *PNDIS_RECEIVE_FILTER_QUEUE_STATE_CHANGE; /* size: 0x0008 */

struct wistd::integral_constant<unsigned int,1>;

typedef struct _NDK_CQ
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_CQ_DISPATCH* Dispatch;
} NDK_CQ, *PNDK_CQ; /* size: 0x001c */

typedef struct _NDIS_DMA_DESCRIPTION
{
  /* 0x0000 */ unsigned char DemandMode;
  /* 0x0001 */ unsigned char AutoInitialize;
  /* 0x0002 */ unsigned char DmaChannelSpecified;
  /* 0x0003 */ char Padding_162;
  /* 0x0004 */ enum _DMA_WIDTH DmaWidth;
  /* 0x0008 */ enum _DMA_SPEED DmaSpeed;
  /* 0x000c */ unsigned long DmaPort;
  /* 0x0010 */ unsigned long DmaChannel;
} NDIS_DMA_DESCRIPTION, *PNDIS_DMA_DESCRIPTION; /* size: 0x0014 */

struct DOT11_ASSOCIATION_INFO_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ long Padding_163;
  /* 0x0010 */ struct _DOT11_ASSOCIATION_INFO_EX dot11AssocInfo[1];
}; /* size: 0x0158 */

struct DOT11_AUTH_ALGORITHM_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ enum _DOT11_AUTH_ALGORITHM AlgorithmIds[1];
}; /* size: 0x0010 */

struct DOT11_OFDM_PHY_ATTRIBUTES
{
  /* 0x0000 */ unsigned long uFrequencyBandsSupported;
}; /* size: 0x0004 */

typedef struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_OFFLOAD* DefaultOffloadConfiguration;
  /* 0x0008 */ struct _NDIS_OFFLOAD* HardwareOffloadCapabilities;
  /* 0x000c */ struct _NDIS_TCP_CONNECTION_OFFLOAD* DefaultTcpConnectionOffloadConfiguration;
  /* 0x0010 */ struct _NDIS_TCP_CONNECTION_OFFLOAD* TcpConnectionOffloadHardwareCapabilities;
} NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES; /* size: 0x0014 */

typedef struct _NDIS_SRIOV_VF_CONFIG_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned short VFId;
  /* 0x0006 */ char Padding_164[2];
  /* 0x0008 */ unsigned long BlockId;
  /* 0x000c */ unsigned long Length;
} NDIS_SRIOV_VF_CONFIG_STATE, *PNDIS_SRIOV_VF_CONFIG_STATE; /* size: 0x0010 */

typedef struct _NDK_RESULT
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned long BytesTransferred;
  /* 0x0008 */ void* QPContext;
  /* 0x000c */ void* RequestContext;
} NDK_RESULT, *PNDK_RESULT; /* size: 0x0010 */

struct DOT11_DATA_RATE_MAPPING_ENTRY
{
  /* 0x0000 */ unsigned char ucDataRateIndex;
  /* 0x0001 */ unsigned char ucDataRateFlag;
  /* 0x0002 */ unsigned short usDataRateValue;
}; /* size: 0x0004 */

typedef struct _NDIS_802_11_STATUS_INDICATION
{
  /* 0x0000 */ enum _NDIS_802_11_STATUS_TYPE StatusType;
} NDIS_802_11_STATUS_INDICATION, *PNDIS_802_11_STATUS_INDICATION; /* size: 0x0004 */

struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<NDIS_BIND_FILTER_LINK> >;

typedef struct _NDIS_EVENT_LOG
{
  /* 0x0000 */ unsigned __int64 LastEventTime;
  /* 0x0008 */ unsigned long LastUsedEntry;
  /* 0x000c */ unsigned long NumEntries;
  /* 0x0010 */ unsigned long Lock;
  /* 0x0014 */ unsigned short Flags;
  /* 0x0016 */ unsigned short EntrySize;
} NDIS_EVENT_LOG, *PNDIS_EVENT_LOG; /* size: 0x0018 */

struct wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS>
{
}; /* size: 0x0001 */

typedef struct _NDK_PD_DISPATCH
{
  /* 0x0000 */ void* NdkClosePd /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkCreateMr /* function */;
  /* 0x000c */ void* NdkCreateMw /* function */;
  /* 0x0010 */ void* NdkCreateSrq /* function */;
  /* 0x0014 */ void* NdkCreateQp /* function */;
  /* 0x0018 */ void* NdkCreateQpWithSrq /* function */;
  /* 0x001c */ void* NdkGetPrivilegedMemoryRegionToken /* function */;
} NDK_PD_DISPATCH, *PNDK_PD_DISPATCH; /* size: 0x0020 */

typedef struct _NDIS_GFP_WILDCARD_MATCH_PROFILE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFP_TABLE_TYPE TableType;
  /* 0x000c */ unsigned long ProfileId;
  /* 0x0010 */ unsigned long NumSupportedEntries;
  /* 0x0014 */ unsigned long HeaderGroupWildcardMatchProfileArrayOffset;
  /* 0x0018 */ unsigned long HeaderGroupWildcardMatchProfileArrayNumElements;
  /* 0x001c */ unsigned long HeaderGroupWildcardMatchProfileArrayElementSize;
} NDIS_GFP_WILDCARD_MATCH_PROFILE, *PNDIS_GFP_WILDCARD_MATCH_PROFILE; /* size: 0x0020 */

typedef struct _NDIS_PROCESSOR_INFO
{
  /* 0x0000 */ unsigned long CpuNumber;
  /* 0x0004 */ unsigned long PhysicalPackageId;
  /* 0x0008 */ unsigned long CoreId;
  /* 0x000c */ unsigned long HyperThreadID;
} NDIS_PROCESSOR_INFO, *PNDIS_PROCESSOR_INFO; /* size: 0x0010 */

typedef struct _NDIS_SYSTEM_PROCESSOR_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_PROCESSOR_VENDOR ProcessorVendor;
  /* 0x000c */ unsigned long NumPhysicalPackages;
  /* 0x0010 */ unsigned long NumCores;
  /* 0x0014 */ unsigned long NumCoresPerPhysicalPackage;
  /* 0x0018 */ unsigned long MaxHyperThreadingCpusPerCore;
  /* 0x001c */ unsigned long RssBaseCpu;
  /* 0x0020 */ unsigned long RssCpuCount;
  /* 0x0024 */ unsigned char* RssProcessors;
  /* 0x0028 */ struct _NDIS_PROCESSOR_INFO CpuInfo[32];
} NDIS_SYSTEM_PROCESSOR_INFO, *PNDIS_SYSTEM_PROCESSOR_INFO; /* size: 0x0228 */

typedef struct _NDIS_RSC_STATISTICS_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ long Padding_165;
  /* 0x0008 */ unsigned __int64 CoalescedPkts;
  /* 0x0010 */ unsigned __int64 CoalescedOctets;
  /* 0x0018 */ unsigned __int64 CoalesceEvents;
  /* 0x0020 */ unsigned __int64 Aborts;
} NDIS_RSC_STATISTICS_INFO, *PNDIS_RSC_STATISTICS_INFO; /* size: 0x0028 */

typedef struct _NDK_MR
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_MR_DISPATCH* Dispatch;
} NDK_MR, *PNDK_MR; /* size: 0x001c */

typedef struct _NDK_MR_DISPATCH
{
  /* 0x0000 */ void* NdkCloseMr /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkRegisterMr /* function */;
  /* 0x000c */ void* NdkDeregisterMr /* function */;
  /* 0x0010 */ void* NdkInitializeFastRegisterMr /* function */;
  /* 0x0014 */ void* NdkGetRemoteTokenFromMr /* function */;
  /* 0x0018 */ void* NdkGetLocalTokenFromMr /* function */;
} NDK_MR_DISPATCH, *PNDK_MR_DISPATCH; /* size: 0x001c */

typedef struct _NDIS_GFP_EXACT_MATCH_PROFILE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFP_TABLE_TYPE TableType;
  /* 0x000c */ unsigned long ProfileId;
  /* 0x0010 */ unsigned long NumSupportedEntries;
  /* 0x0014 */ unsigned long HeaderGroupExactMatchProfileArrayOffset;
  /* 0x0018 */ unsigned long HeaderGroupExactMatchProfileArrayNumElements;
  /* 0x001c */ unsigned long HeaderGroupExactMatchProfileArrayElementSize;
} NDIS_GFP_EXACT_MATCH_PROFILE, *PNDIS_GFP_EXACT_MATCH_PROFILE; /* size: 0x0020 */

typedef struct _NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned int ElementSize;
  /* 0x0008 */ unsigned int NumElements;
  /* 0x000c */ unsigned int NumDestinations;
  /* 0x0010 */ void* FirstElement;
} NDIS_SWITCH_FORWARDING_DESTINATION_ARRAY, *PNDIS_SWITCH_FORWARDING_DESTINATION_ARRAY; /* size: 0x0014 */

typedef struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* MiniportAddDeviceContext;
  /* 0x0008 */ unsigned long Flags;
} NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES, *PNDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES; /* size: 0x000c */

typedef struct _NDIS_GFT_FLOW_ENTRY_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFT_FLOW_ENTRY_TYPE EntryType;
  /* 0x000c */ unsigned long FlowEntryArrayOffset;
  /* 0x0010 */ unsigned long FlowEntryArrayNumElements;
  /* 0x0014 */ unsigned long FlowEntryArrayElementSize;
} NDIS_GFT_FLOW_ENTRY_ARRAY, *PNDIS_GFT_FLOW_ENTRY_ARRAY; /* size: 0x0018 */

typedef struct _RTL_QUERY_REGISTRY_TABLE
{
  /* 0x0000 */ void* QueryRoutine /* function */;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ wchar_t* Name;
  /* 0x000c */ void* EntryContext;
  /* 0x0010 */ unsigned long DefaultType;
  /* 0x0014 */ void* DefaultData;
  /* 0x0018 */ unsigned long DefaultLength;
} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE; /* size: 0x001c */

typedef struct _NDIS_WRAPPER_CONFIGURATION_HANDLE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _RTL_QUERY_REGISTRY_TABLE ParametersQueryTable[2];
} NDIS_WRAPPER_CONFIGURATION_HANDLE, *PNDIS_WRAPPER_CONFIGURATION_HANDLE; /* size: 0x0044 */

typedef struct _DOT11_DISASSOCIATE_PEER_REQUEST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char PeerMacAddr[6];
  /* 0x000a */ unsigned short usReason;
} DOT11_DISASSOCIATE_PEER_REQUEST, *PDOT11_DISASSOCIATE_PEER_REQUEST; /* size: 0x000c */

typedef struct _NDK_MW
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_MW_DISPATCH* Dispatch;
} NDK_MW, *PNDK_MW; /* size: 0x001c */

typedef struct _NDK_MW_DISPATCH
{
  /* 0x0000 */ void* NdkCloseMw /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkGetRemoteTokenFromMw /* function */;
} NDK_MW_DISPATCH, *PNDK_MW_DISPATCH; /* size: 0x000c */

typedef struct _NDIS_IPSEC_PACKET_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ void* OffloadHandle;
      /* 0x0004 */ void* NextOffloadHandle;
    } /* size: 0x0008 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long SA_DELETE_REQ : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long CRYPTO_DONE : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long NEXT_CRYPTO_DONE : 1; /* bit position: 2 */
      }; /* bitfield */
      /* 0x0004 */ unsigned long CryptoStatus;
    } /* size: 0x0008 */ Receive;
  }; /* size: 0x0008 */
} NDIS_IPSEC_PACKET_INFO, *PNDIS_IPSEC_PACKET_INFO; /* size: 0x0008 */

typedef struct _WWAN_SET_CONTEXT
{
  /* 0x0000 */ unsigned long ContextId;
  /* 0x0004 */ enum _WWAN_CONTEXT_TYPE ContextType;
  /* 0x0008 */ wchar_t AccessString[101];
  /* 0x00d2 */ wchar_t UserName[256];
  /* 0x02d2 */ wchar_t Password[256];
  /* 0x04d2 */ char Padding_166[2];
  /* 0x04d4 */ enum _WWAN_COMPRESSION Compression;
  /* 0x04d8 */ enum _WWAN_AUTH_PROTOCOL AuthType;
  /* 0x04dc */ wchar_t ProviderId[7];
  /* 0x04ea */ char __PADDING__[2];
} WWAN_SET_CONTEXT, *PWWAN_SET_CONTEXT; /* size: 0x04ec */

typedef struct _NDIS_WWAN_SET_PROVISIONED_CONTEXT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_CONTEXT ProvisionedContext;
} NDIS_WWAN_SET_PROVISIONED_CONTEXT, *PNDIS_WWAN_SET_PROVISIONED_CONTEXT; /* size: 0x04f0 */

struct NDIS_MINIPORT_HOOK_DRIVER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct NdisDebugBlock<1920226123>
{
}; /* size: 0x0001 */

typedef struct _NDK_SRQ
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_SRQ_DISPATCH* Dispatch;
} NDK_SRQ, *PNDK_SRQ; /* size: 0x001c */

typedef struct _NDK_CONNECTOR_DISPATCH
{
  /* 0x0000 */ void* NdkCloseConnector /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkConnect /* function */;
  /* 0x000c */ void* NdkConnectWithSharedEndpoint /* function */;
  /* 0x0010 */ void* NdkCompleteConnect /* function */;
  /* 0x0014 */ void* NdkAccept /* function */;
  /* 0x0018 */ void* NdkReject /* function */;
  /* 0x001c */ void* NdkGetConnectionData /* function */;
  /* 0x0020 */ void* NdkGetLocalAddress /* function */;
  /* 0x0024 */ void* NdkGetPeerAddress /* function */;
  /* 0x0028 */ void* NdkDisconnect /* function */;
} NDK_CONNECTOR_DISPATCH, *PNDK_CONNECTOR_DISPATCH; /* size: 0x002c */

typedef struct _NEIGHBOR_OFFLOAD_STATE_CACHED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned char DlDestinationAddress[32];
  /* 0x0028 */ unsigned long HostReachabilityDelta;
} NEIGHBOR_OFFLOAD_STATE_CACHED, *PNEIGHBOR_OFFLOAD_STATE_CACHED; /* size: 0x002c */

typedef struct _NDIS_TCP_OFFLOAD_CLIENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0008 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x000c */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0010 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x0014 */ void* TcpOffloadEventHandler /* function */;
  /* 0x0018 */ void* TcpOffloadReceiveIndicateHandler /* function */;
} NDIS_TCP_OFFLOAD_CLIENT_HANDLERS, *PNDIS_TCP_OFFLOAD_CLIENT_HANDLERS; /* size: 0x001c */

struct wistd::integral_constant<enum _EVENT_TYPE,0>
{
  /* 0x0000 */ enum _EVENT_TYPE value;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _NDK_SGE
{
  union
  {
    /* 0x0000 */ void* VirtualAddress;
    /* 0x0000 */ union _LARGE_INTEGER LogicalAddress;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned int MemoryRegionToken;
} NDK_SGE, *PNDK_SGE; /* size: 0x0010 */

typedef struct _NDIS_TRIAGE_OBJECT_HEADER
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Revision;
  /* 0x0002 */ unsigned short Size;
} NDIS_TRIAGE_OBJECT_HEADER, *PNDIS_TRIAGE_OBJECT_HEADER; /* size: 0x0004 */

struct wistd::__compressed_pair_elem<NDIS_BIND_PROTOCOL_LINK *,0,0>
{
  /* 0x0000 */ struct NDIS_BIND_PROTOCOL_LINK* __value_;
}; /* size: 0x0004 */

typedef struct _NDK_QP_DISPATCH
{
  /* 0x0000 */ void* NdkCloseQp /* function */;
  /* 0x0004 */ void* NdkQueryExtension /* function */;
  /* 0x0008 */ void* NdkFlush /* function */;
  /* 0x000c */ void* NdkSend /* function */;
  /* 0x0010 */ void* NdkReceive /* function */;
  /* 0x0014 */ void* NdkBind /* function */;
  /* 0x0018 */ void* NdkFastRegister /* function */;
  /* 0x001c */ void* NdkInvalidate /* function */;
  /* 0x0020 */ void* NdkRead /* function */;
  /* 0x0024 */ void* NdkWrite /* function */;
  /* 0x0028 */ void* NdkSendAndInvalidate /* function */;
} NDK_QP_DISPATCH, *PNDK_QP_DISPATCH; /* size: 0x002c */

struct DOT11_PMKID_ENTRY
{
  /* 0x0000 */ unsigned char BSSID[6];
  /* 0x0006 */ unsigned char PMKID[16];
  /* 0x0016 */ char Padding_167[2];
  /* 0x0018 */ unsigned long uFlags;
}; /* size: 0x001c */

struct wil::details::resource_policy<unsigned long *,void __stdcall(wil::details::kspin_lock_saved_irql const &),&wil::details::kspin_lock_saved_irql::Release,wistd::integral_constant<unsigned int,2>,wil::details::kspin_lock_saved_irql,unsigned long *,0,std::nullptr_t>
{
}; /* size: 0x0001 */

struct wistd::integral_constant<unsigned int,2>;

struct DOT11_PMKID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct DOT11_PMKID_ENTRY PMKIDs[1];
}; /* size: 0x0028 */

struct wistd::__invokable_r<void,void (__stdcall*)(unsigned long *) noexcept,unsigned long * &>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

typedef struct _NDK_LOGICAL_ADDRESS_MAPPING
{
  /* 0x0000 */ void* AdapterContext;
  /* 0x0004 */ unsigned long AdapterPageCount;
  /* 0x0008 */ union _LARGE_INTEGER AdapterPageArray[1];
} NDK_LOGICAL_ADDRESS_MAPPING, *PNDK_LOGICAL_ADDRESS_MAPPING; /* size: 0x0010 */

typedef struct _WWAN_SET_SMS_CONFIGURATION
{
  /* 0x0000 */ char ScAddress[16];
  /* 0x0010 */ enum _WWAN_SMS_FORMAT SmsFormat;
} WWAN_SET_SMS_CONFIGURATION, *PWWAN_SET_SMS_CONFIGURATION; /* size: 0x0014 */

typedef struct _NDIS_WWAN_SET_SMS_CONFIGURATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_SMS_CONFIGURATION SetSmsConfiguration;
} NDIS_WWAN_SET_SMS_CONFIGURATION, *PNDIS_WWAN_SET_SMS_CONFIGURATION; /* size: 0x0018 */

typedef struct _IP_OFFLOAD_STATS
{
  /* 0x0000 */ unsigned __int64 InReceives;
  /* 0x0008 */ unsigned __int64 InOctets;
  /* 0x0010 */ unsigned __int64 InDelivers;
  /* 0x0018 */ unsigned __int64 OutRequests;
  /* 0x0020 */ unsigned __int64 OutOctets;
  /* 0x0028 */ unsigned long InHeaderErrors;
  /* 0x002c */ unsigned long InTruncatedPackets;
  /* 0x0030 */ unsigned long InDiscards;
  /* 0x0034 */ unsigned long OutDiscards;
  /* 0x0038 */ unsigned long OutNoRoutes;
  /* 0x003c */ long __PADDING__[1];
} IP_OFFLOAD_STATS, *PIP_OFFLOAD_STATS; /* size: 0x0040 */

typedef struct _NDIS_PD_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MaximumTxPartialBufferCount;
  /* 0x000c */ unsigned long MaximumRxPartialBufferCount;
  /* 0x0010 */ unsigned char RxFilterContextWidth;
  /* 0x0011 */ char Padding_168[3];
  /* 0x0014 */ unsigned long CapabilityFlags;
  /* 0x0018 */ unsigned long MaxNumberOfRxQueues;
  /* 0x001c */ unsigned long MaxNumberOfTxQueues;
  /* 0x0020 */ unsigned long MaxNumberOfRxQueuesForDefaultVport;
  /* 0x0024 */ unsigned long MaxNumberOfTxQueuesForDefaultVport;
  /* 0x0028 */ unsigned long MaxNumberOfRxQueuesPerNonDefaultVport;
  /* 0x002c */ unsigned long MaxNumberOfTxQueuesPerNonDefaultVport;
  /* 0x0030 */ unsigned long ExactMatchProfileArrayOffset;
  /* 0x0034 */ unsigned long ExactMatchProfileArrayNumElements;
  /* 0x0038 */ unsigned long ExactMatchProfileArrayElementSize;
  /* 0x003c */ unsigned long WildcardMatchProfileArrayOffset;
  /* 0x0040 */ unsigned long WildcardMatchProfileArrayNumElements;
  /* 0x0044 */ unsigned long WildcardMatchProfileArrayElementSize;
  /* 0x0048 */ unsigned long MinimumModerationInterval;
  /* 0x004c */ unsigned long MaximumModerationInterval;
  /* 0x0050 */ unsigned long ModerationIntervalGranularity;
  /* 0x0054 */ unsigned long MaxRxQueueSize;
  /* 0x0058 */ unsigned long MaxTxQueueSize;
  /* 0x005c */ long __PADDING__[1];
} NDIS_PD_CAPABILITIES, *PNDIS_PD_CAPABILITIES; /* size: 0x0060 */

typedef struct _NDIS_GFT_TABLE_INFO_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableArrayOffset;
  /* 0x000c */ unsigned long TableArrayNumElements;
  /* 0x0010 */ unsigned long TableArrayElementSize;
} NDIS_GFT_TABLE_INFO_ARRAY, *PNDIS_GFT_TABLE_INFO_ARRAY; /* size: 0x0014 */

typedef struct _NDIS_PD_FILTER_COUNTER
{
  /* 0x0000 */ unsigned __int64 PacketsMatched;
  /* 0x0008 */ unsigned __int64 BytesMatched;
} NDIS_PD_FILTER_COUNTER, *PNDIS_PD_FILTER_COUNTER; /* size: 0x0010 */

typedef struct _NDIS_RECEIVE_QUEUE_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long QueueId;
  /* 0x000c */ enum _NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE QueueState;
} NDIS_RECEIVE_QUEUE_STATE, *PNDIS_RECEIVE_QUEUE_STATE; /* size: 0x0010 */

typedef struct _tlgTypeMapBase<unsigned __int64>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<unsigned __int64>, *PtlgTypeMapBase<unsigned __int64>; /* size: 0x0001 */

typedef struct _tlgTypeMapBase<short>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<short>, *PtlgTypeMapBase<short>; /* size: 0x0001 */

struct wistd::__compressed_pair_elem<NDIS_BIND_FILTER_LINK *,0,0>
{
  /* 0x0000 */ struct NDIS_BIND_FILTER_LINK* __value_;
}; /* size: 0x0004 */

typedef struct _NET_BUFFER_POOL_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long PoolTag;
  /* 0x0008 */ unsigned long DataSize;
} NET_BUFFER_POOL_PARAMETERS, *PNET_BUFFER_POOL_PARAMETERS; /* size: 0x000c */

typedef struct _NDIS_LINK_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
  /* 0x0008 */ enum _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
  /* 0x000c */ long Padding_169;
  /* 0x0010 */ unsigned __int64 XmitLinkSpeed;
  /* 0x0018 */ unsigned __int64 RcvLinkSpeed;
  /* 0x0020 */ enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
  /* 0x0024 */ unsigned long AutoNegotiationFlags;
} NDIS_LINK_STATE, *PNDIS_LINK_STATE; /* size: 0x0028 */

typedef struct _tlgTypeMapBase<wchar_t const *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<wchar_t const *>, *PtlgTypeMapBase<wchar_t const *>; /* size: 0x0001 */

typedef struct _LOCK_STATE
{
  /* 0x0000 */ unsigned short LockState;
  /* 0x0002 */ unsigned char OldIrql;
  /* 0x0003 */ char __PADDING__[1];
} LOCK_STATE, *PLOCK_STATE; /* size: 0x0004 */

typedef struct __vc_attributes::aggregatableAttribute
{
  /* 0x0000 */ enum __vc_attributes::aggregatableAttribute::type_e type;
} _vc_attributes::aggregatableAttribute, *P_vc_attributes::aggregatableAttribute; /* size: 0x0004 */

typedef struct _NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_QOS_SQ_TYPE SqType;
  /* 0x000c */ unsigned long FirstSqId;
  /* 0x0010 */ unsigned long MaxSqsToReturn;
  union
  {
    /* 0x0014 */ unsigned long SqArrayOffset;
    /* 0x0014 */ unsigned long SqParamsArrayOffset;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ unsigned long SqArrayNumElements;
    /* 0x0018 */ unsigned long SqParamsArrayNumElements;
  }; /* size: 0x0004 */
  union
  {
    /* 0x001c */ unsigned long SqArrayElementSize;
    /* 0x001c */ unsigned long SqParamsArrayElementSize;
  }; /* size: 0x0004 */
} NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY, *PNDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY; /* size: 0x0020 */

typedef struct __vc_attributes::helper_attributes::usageAttribute
{
  /* 0x0000 */ unsigned int value;
} _vc_attributes::helper_attributes::usageAttribute, *P_vc_attributes::helper_attributes::usageAttribute; /* size: 0x0004 */

typedef struct _NEIGHBOR_OFFLOAD_STATE_DELEGATED
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned long NicReachabilityDelta;
} NEIGHBOR_OFFLOAD_STATE_DELEGATED, *PNEIGHBOR_OFFLOAD_STATE_DELEGATED; /* size: 0x000c */

typedef struct _NDIS_802_11_AUTHENTICATION_EVENT
{
  /* 0x0000 */ struct _NDIS_802_11_STATUS_INDICATION Status;
  /* 0x0004 */ struct _NDIS_802_11_AUTHENTICATION_REQUEST Request[1];
} NDIS_802_11_AUTHENTICATION_EVENT, *PNDIS_802_11_AUTHENTICATION_EVENT; /* size: 0x0014 */

class KWorkItemBase<Ndis::BindEngine,KWorkItem<Ndis::BindEngine> >
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM m_workitem;
  /* 0x0010 */ struct Ndis::BindEngine* m_context;
  /* 0x0014 */ void* m_callback /* function */;
}; /* size: 0x0018 */

typedef struct _WWAN_SERVICE_ACTIVATION
{
  /* 0x0000 */ unsigned long uVendorSpecificBufferSize;
} WWAN_SERVICE_ACTIVATION, *PWWAN_SERVICE_ACTIVATION; /* size: 0x0004 */

typedef struct _NDIS_WWAN_SERVICE_ACTIVATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SERVICE_ACTIVATION ServiceActivation;
} NDIS_WWAN_SERVICE_ACTIVATION, *PNDIS_WWAN_SERVICE_ACTIVATION; /* size: 0x0008 */

typedef struct _NDIS_WAN_FRAGMENT
{
  /* 0x0000 */ unsigned char RemoteAddress[6];
  /* 0x0006 */ unsigned char LocalAddress[6];
} NDIS_WAN_FRAGMENT, *PNDIS_WAN_FRAGMENT; /* size: 0x000c */

typedef struct _NDK_LISTENER
{
  /* 0x0000 */ struct _NDK_OBJECT_HEADER Header;
  /* 0x0018 */ const struct _NDK_LISTENER_DISPATCH* Dispatch;
} NDK_LISTENER, *PNDK_LISTENER; /* size: 0x001c */

typedef struct _tlgTypeMapBase<_SID *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<_SID *>, *PtlgTypeMapBase<_SID *>; /* size: 0x0001 */

typedef struct _NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* ProviderContext;
  /* 0x000c */ void* AllocateSharedMemoryHandler /* function */;
  /* 0x0010 */ void* FreeSharedMemoryHandler /* function */;
} NDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS, *PNDIS_SHARED_MEMORY_PROVIDER_CHARACTERISTICS; /* size: 0x0014 */

typedef struct _NDIS_HD_SPLIT_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long HardwareCapabilities;
  /* 0x0008 */ unsigned long CurrentCapabilities;
  /* 0x000c */ unsigned long HDSplitFlags;
  /* 0x0010 */ unsigned long BackfillSize;
  /* 0x0014 */ unsigned long MaxHeaderSize;
} NDIS_HD_SPLIT_ATTRIBUTES, *PNDIS_HD_SPLIT_ATTRIBUTES; /* size: 0x0018 */

struct wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >::__nat;

typedef struct _NDIS_PD_ACQUIRE_QUEUES_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
} NDIS_PD_ACQUIRE_QUEUES_PARAMETERS, *PNDIS_PD_ACQUIRE_QUEUES_PARAMETERS; /* size: 0x0008 */

typedef struct _DOT11_PEER_INFO_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ long Padding_170;
  /* 0x0010 */ struct _DOT11_PEER_INFO PeerInfo[1];
} DOT11_PEER_INFO_LIST, *PDOT11_PEER_INFO_LIST; /* size: 0x0170 */

typedef struct _NDIS_SWITCH_PORT_DESTINATION
{
  /* 0x0000 */ unsigned int PortId;
  /* 0x0004 */ unsigned short NicIndex;
  struct /* bitfield */
  {
    /* 0x0006 */ unsigned short IsExcluded : 1; /* bit position: 0 */
    /* 0x0006 */ unsigned short PreserveVLAN : 1; /* bit position: 1 */
    /* 0x0006 */ unsigned short PreservePriority : 1; /* bit position: 2 */
    /* 0x0006 */ unsigned short Reserved : 13; /* bit position: 3 */
  }; /* bitfield */
} NDIS_SWITCH_PORT_DESTINATION, *PNDIS_SWITCH_PORT_DESTINATION; /* size: 0x0008 */

struct wistd::__compressed_pair_elem<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS *,0,0>
{
  /* 0x0000 */ struct _NDIS_MINIPORT_DRIVER_CHARACTERISTICS* __value_;
}; /* size: 0x0004 */

typedef struct _NDIS_GFT_STATISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ unsigned long VPortId;
  /* 0x0010 */ unsigned long ProviderFlowEntryId;
  /* 0x0014 */ long Padding_171;
  /* 0x0018 */ unsigned __int64 Packets;
  /* 0x0020 */ unsigned __int64 Bytes;
  /* 0x0028 */ unsigned __int64 L1CacheHits;
  /* 0x0030 */ unsigned __int64 L2CacheHits;
  /* 0x0038 */ unsigned __int64 L3CacheHits;
  /* 0x0040 */ unsigned __int64 L1CacheMisses;
  /* 0x0048 */ unsigned __int64 L2CacheMisses;
  /* 0x0050 */ unsigned __int64 L3CacheMisses;
} NDIS_GFT_STATISTICS, *PNDIS_GFT_STATISTICS; /* size: 0x0058 */

struct NDIS_PD_PROVIDER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NDIS_GFT_DELETE_PROFILE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long ProfileId;
} NDIS_GFT_DELETE_PROFILE_PARAMETERS, *PNDIS_GFT_DELETE_PROFILE_PARAMETERS; /* size: 0x000c */

typedef struct _NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ char* ContextName;
  /* 0x0008 */ struct _GUID* ExtensionId;
} NDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO, *PNDIS_SWITCH_NET_BUFFER_LIST_CONTEXT_TYPE_INFO; /* size: 0x000c */

typedef struct _NDIS_BIND_PATHS
{
  /* 0x0000 */ unsigned int Number;
  /* 0x0004 */ struct _UNICODE_STRING Paths[1];
} NDIS_BIND_PATHS, *PNDIS_BIND_PATHS; /* size: 0x000c */

typedef struct _DEVICE_RESET_INTERFACE_STANDARD
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
  /* 0x0010 */ void* DeviceReset /* function */;
  /* 0x0014 */ unsigned long SupportedResetTypes;
  /* 0x0018 */ void* Reserved;
} DEVICE_RESET_INTERFACE_STANDARD, *PDEVICE_RESET_INTERFACE_STANDARD; /* size: 0x001c */

typedef struct _NDIS_PACKET_OOB_DATA
{
  union
  {
    /* 0x0000 */ unsigned __int64 TimeToSend;
    /* 0x0000 */ unsigned __int64 TimeSent;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 TimeReceived;
  /* 0x0010 */ unsigned int HeaderSize;
  /* 0x0014 */ unsigned int SizeMediaSpecificInfo;
  /* 0x0018 */ void* MediaSpecificInformation;
  /* 0x001c */ int Status;
} NDIS_PACKET_OOB_DATA, *PNDIS_PACKET_OOB_DATA; /* size: 0x0020 */

struct wil::details::resource_policy<NDISWATCHDOG__ *,void (__stdcall*)(NDISWATCHDOG__ *),&ndisFreeWatchdog,wistd::integral_constant<unsigned int,1>,NDISWATCHDOG__ *,int,-1,std::nullptr_t>
{
}; /* size: 0x0001 */

typedef struct _NDIS_DMA_BLOCK
{
  /* 0x0000 */ void* MapRegisterBase;
  /* 0x0004 */ struct _KEVENT AllocationEvent;
  /* 0x0014 */ void* SystemAdapterObject;
  /* 0x0018 */ void* Miniport;
  /* 0x001c */ unsigned char InProgress;
  /* 0x001d */ char __PADDING__[3];
} NDIS_DMA_BLOCK, *PNDIS_DMA_BLOCK; /* size: 0x0020 */

typedef struct _WWAN_SET_CONTEXT_STATE
{
  /* 0x0000 */ unsigned long ConnectionId;
  /* 0x0004 */ enum _WWAN_ACTIVATION_COMMAND ActivationCommand;
  /* 0x0008 */ wchar_t AccessString[101];
  /* 0x00d2 */ wchar_t UserName[256];
  /* 0x02d2 */ wchar_t Password[256];
  /* 0x04d2 */ char Padding_172[2];
  /* 0x04d4 */ enum _WWAN_COMPRESSION Compression;
  /* 0x04d8 */ enum _WWAN_AUTH_PROTOCOL AuthType;
  /* 0x04dc */ enum _WWAN_IP_TYPE IPType;
  /* 0x04e0 */ enum _WWAN_PSMEDIA_PREFERENCE MediaPreference;
  /* 0x04e4 */ enum _WWAN_CONFIGURATION_SOURCE ConnectionMediaSource;
} WWAN_SET_CONTEXT_STATE, *PWWAN_SET_CONTEXT_STATE; /* size: 0x04e8 */

struct _NDIS_MINIPORT_AOAC;

typedef struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long OpModeCapability;
  /* 0x0008 */ unsigned long NumOfTXBuffers;
  /* 0x000c */ unsigned long NumOfRXBuffers;
  /* 0x0010 */ unsigned char MultiDomainCapabilityImplemented;
  /* 0x0011 */ char Padding_173[3];
  /* 0x0014 */ unsigned long NumSupportedPhys;
  /* 0x0018 */ struct DOT11_PHY_ATTRIBUTES* SupportedPhyAttributes;
  /* 0x001c */ struct DOT11_EXTSTA_ATTRIBUTES* ExtSTAAttributes;
  /* 0x0020 */ struct DOT11_VWIFI_ATTRIBUTES* VWiFiAttributes;
  /* 0x0024 */ struct _DOT11_EXTAP_ATTRIBUTES* ExtAPAttributes;
  /* 0x0028 */ struct _DOT11_WFD_ATTRIBUTES* WFDAttributes;
} NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES; /* size: 0x002c */

typedef struct _NDIS_PHYSICAL_PERFORMANCE_COUNTERS
{
  /* 0x0000 */ unsigned long DevicePowerState;
  /* 0x0004 */ long Padding_174;
  /* 0x0008 */ unsigned __int64 TimeSuspended100ns;
  /* 0x0010 */ unsigned __int64 Uptime100ns;
  /* 0x0018 */ unsigned long LowPowerTransitions;
  /* 0x001c */ long __PADDING__[1];
} NDIS_PHYSICAL_PERFORMANCE_COUNTERS, *PNDIS_PHYSICAL_PERFORMANCE_COUNTERS; /* size: 0x0020 */

typedef struct _NDIS_QOS_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long MaxNumTrafficClasses;
  /* 0x000c */ unsigned long MaxNumEtsCapableTrafficClasses;
  /* 0x0010 */ unsigned long MaxNumPfcEnabledTrafficClasses;
} NDIS_QOS_CAPABILITIES, *PNDIS_QOS_CAPABILITIES; /* size: 0x0014 */

typedef struct _NDIS_QOS_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long NumTrafficClasses;
  /* 0x000c */ unsigned char PriorityAssignmentTable[8];
  /* 0x0014 */ unsigned char TcBandwidthAssignmentTable[8];
  /* 0x001c */ unsigned char TsaAssignmentTable[8];
  /* 0x0024 */ unsigned long PfcEnable;
  /* 0x0028 */ unsigned long NumClassificationElements;
  /* 0x002c */ unsigned long ClassificationElementSize;
  /* 0x0030 */ unsigned long FirstClassificationElementOffset;
} NDIS_QOS_PARAMETERS, *PNDIS_QOS_PARAMETERS; /* size: 0x0034 */

class wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >
{
  /* 0x0000 */ class wistd::__compressed_pair<NDIS_BIND_PROTOCOL_LINK *,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> > __ptr_;
}; /* size: 0x0004 */

class wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >
{
  /* 0x0000 */ class wistd::__compressed_pair<NDIS_BIND_FILTER_LINK *,wistd::default_delete<NDIS_BIND_FILTER_LINK> > __ptr_;
}; /* size: 0x0004 */

typedef struct _tlgTypeMapBase<void const *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<void const *>, *PtlgTypeMapBase<void const *>; /* size: 0x0001 */

struct NDIS_BIND_LINK_BASE
{
  /* 0x0000 */ class Ndis::BindState BindState;
  /* 0x002c */ struct _LIST_ENTRY DriverLinkage;
}; /* size: 0x0034 */

struct NDIS_MINIPORT_HOOK_ADAPTER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _tlgTypeMapBase<char16_t *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<char16_t *>, *PtlgTypeMapBase<char16_t *>; /* size: 0x0001 */

struct _NDIS_RSS_DPC_WORKER_CONTEXT;

typedef struct _NDIS_WOL_XLATION_CONTEXT
{
  /* 0x0000 */ unsigned long OriginalOid;
  /* 0x0004 */ void* InformationBuffer;
  /* 0x0008 */ unsigned long InformationBufferLength;
  union
  {
    /* 0x000c */ struct _NDIS_PM_WOL_PATTERN* WolPattern;
    /* 0x000c */ struct _NDIS_PM_PACKET_PATTERN* PacketPattern;
    /* 0x000c */ unsigned long PatternToRemove;
  }; /* size: 0x0004 */
} NDIS_WOL_XLATION_CONTEXT, *PNDIS_WOL_XLATION_CONTEXT; /* size: 0x0010 */

typedef struct _NDIS_REFCOUNT_TAGGED
{
  /* 0x0000 */ struct _NDIS_REFCOUNT_TAGGED_ENTRY* Tags;
  /* 0x0004 */ unsigned long RefMask[1];
} NDIS_REFCOUNT_TAGGED, *PNDIS_REFCOUNT_TAGGED; /* size: 0x0008 */

typedef struct _NDIS_IF_STACK_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ unsigned long HigherLayerIfIndex;
  /* 0x000c */ unsigned long LowerLayerIfIndex;
  /* 0x0010 */ struct _NDIS_IF_BLOCK* HigherLayerIf;
  /* 0x0014 */ struct _NDIS_IF_BLOCK* LowerLayerIf;
} NDIS_IF_STACK_ENTRY, *PNDIS_IF_STACK_ENTRY; /* size: 0x0018 */

typedef struct _NDIS_802_11_AI_REQFI
{
  /* 0x0000 */ unsigned short Capabilities;
  /* 0x0002 */ unsigned short ListenInterval;
  /* 0x0004 */ unsigned char CurrentAPAddress[6];
} NDIS_802_11_AI_REQFI, *PNDIS_802_11_AI_REQFI; /* size: 0x000a */

struct NDIS_BIND_DRIVER_BASE
{
  /* 0x0000 */ BOOL DriverReady;
  /* 0x0001 */ BOOL NeedsBindCompleteEvent;
  /* 0x0002 */ char Padding_175[2];
  /* 0x0004 */ struct _LIST_ENTRY BindLinks;
}; /* size: 0x000c */

struct NdisDebugBlock<1147946562>
{
}; /* size: 0x0001 */

typedef struct _tlgTypeMapBase<_SYSTEMTIME>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<_SYSTEMTIME>, *PtlgTypeMapBase<_SYSTEMTIME>; /* size: 0x0001 */

struct wistd::unique_ptr<Rtl::KString,wistd::default_delete<Rtl::KString> >::__nat;

struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<Rtl::KString> >;

struct KALLOCATOR<1282164290,1>
{
}; /* size: 0x0001 */

typedef struct _NDIS_GFT_CUSTOM_ACTION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long ProfileId;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned long Length;
  union
  {
    /* 0x0014 */ unsigned long Alignment;
    struct
    {
      /* 0x0014 */ unsigned char ActionData[1];
      /* 0x0015 */ char __PADDING__[3];
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} NDIS_GFT_CUSTOM_ACTION, *PNDIS_GFT_CUSTOM_ACTION; /* size: 0x0018 */

struct PAGED_OBJECT<1282164290>
{
}; /* size: 0x0001 */

typedef struct _NDIS_OPEN_OFFLOAD
{
  /* 0x0000 */ struct _NDIS_OFFLOAD_ENCAPSULATION SetEncapsulation;
  /* 0x001c */ unsigned char AlreadySetEncapsulation;
  /* 0x001d */ char Padding_176[3];
  /* 0x0020 */ struct _NDIS_OFFLOAD_ENCAPSULATION XlateEncap;
  struct
  {
    /* 0x003c */ unsigned long Oid;
    /* 0x0040 */ void* Buffer;
    /* 0x0044 */ unsigned long BufferLength;
  } /* size: 0x000c */ Encapsulation;
  struct
  {
    /* 0x0048 */ unsigned long Oid;
    /* 0x004c */ void* Buffer;
    /* 0x0050 */ unsigned long BufferLength;
  } /* size: 0x000c */ Task;
} NDIS_OPEN_OFFLOAD, *PNDIS_OPEN_OFFLOAD; /* size: 0x0054 */

struct KALLOCATOR<1148473410,1>
{
}; /* size: 0x0001 */

struct KALLOCATION_TAG<1282691138,1>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct PAGED_OBJECT<1282691138>
{
}; /* size: 0x0001 */

typedef struct _NDIS_MINIPORT_SS_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* IdleNotificationHandler /* function */;
  /* 0x000c */ void* CancelIdleNotificationHandler /* function */;
} NDIS_MINIPORT_SS_CHARACTERISTICS, *PNDIS_MINIPORT_SS_CHARACTERISTICS; /* size: 0x0010 */

class wil::unique_any_t<wil::details::unique_storage<wil::details::resource_policy<void *,long (__stdcall*)(void *),&ZwClose,wistd::integral_constant<unsigned int,0>,void *,void *,0,std::nullptr_t> > >
{
}; /* size: 0x0004 */

typedef struct _NDIS_STATISTICS_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long SupportedStatistics;
  /* 0x0008 */ unsigned __int64 ifInDiscards;
  /* 0x0010 */ unsigned __int64 ifInErrors;
  /* 0x0018 */ unsigned __int64 ifHCInOctets;
  /* 0x0020 */ unsigned __int64 ifHCInUcastPkts;
  /* 0x0028 */ unsigned __int64 ifHCInMulticastPkts;
  /* 0x0030 */ unsigned __int64 ifHCInBroadcastPkts;
  /* 0x0038 */ unsigned __int64 ifHCOutOctets;
  /* 0x0040 */ unsigned __int64 ifHCOutUcastPkts;
  /* 0x0048 */ unsigned __int64 ifHCOutMulticastPkts;
  /* 0x0050 */ unsigned __int64 ifHCOutBroadcastPkts;
  /* 0x0058 */ unsigned __int64 ifOutErrors;
  /* 0x0060 */ unsigned __int64 ifOutDiscards;
  /* 0x0068 */ unsigned __int64 ifHCInUcastOctets;
  /* 0x0070 */ unsigned __int64 ifHCInMulticastOctets;
  /* 0x0078 */ unsigned __int64 ifHCInBroadcastOctets;
  /* 0x0080 */ unsigned __int64 ifHCOutUcastOctets;
  /* 0x0088 */ unsigned __int64 ifHCOutMulticastOctets;
  /* 0x0090 */ unsigned __int64 ifHCOutBroadcastOctets;
} NDIS_STATISTICS_INFO, *PNDIS_STATISTICS_INFO; /* size: 0x0098 */

struct KALLOCATOR<1396859982,1>
{
}; /* size: 0x0001 */

typedef struct _tlgTypeMapBase<wchar_t>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned short _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<wchar_t>, *PtlgTypeMapBase<wchar_t>; /* size: 0x0001 */

struct PAGED_OBJECT<1396859982>
{
}; /* size: 0x0001 */

struct KALLOCATOR<1920090443,1>
{
}; /* size: 0x0001 */

typedef struct _NDIS_WWAN_SMS_DELETE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SMS_FILTER SmsFilter;
} NDIS_WWAN_SMS_DELETE, *PNDIS_WWAN_SMS_DELETE; /* size: 0x000c */

typedef struct _NDIS_WWAN_SET_CONTEXT_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_CONTEXT_STATE SetContextState;
} NDIS_WWAN_SET_CONTEXT_STATE, *PNDIS_WWAN_SET_CONTEXT_STATE; /* size: 0x04ec */

class Rtl::KArray<wistd::unique_ptr<NDIS_BIND_FILTER_LINK,wistd::default_delete<NDIS_BIND_FILTER_LINK> >,1>::const_iterator;

typedef struct _NDIS_DRIVER_OPTIONAL_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
} NDIS_DRIVER_OPTIONAL_HANDLERS, *PNDIS_DRIVER_OPTIONAL_HANDLERS; /* size: 0x0004 */

struct KALLOCATION_TAG<1935819854,1>
{
  union
  {
    /* 0x0000 */ const unsigned long AllocationTag;
    /* 0x0000 */ const unsigned long AllocationArena;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct PAGED_OBJECT<1935819854>
{
}; /* size: 0x0001 */

typedef struct _WWAN_READY_INFO
{
  /* 0x0000 */ enum _WWAN_READY_STATE ReadyState;
  /* 0x0004 */ enum _WWAN_EMERGENCY_MODE EmergencyMode;
  /* 0x0008 */ wchar_t SubscriberId[16];
  /* 0x0028 */ wchar_t SimIccId[21];
  /* 0x0052 */ unsigned char CdmaShortMsgSize;
  /* 0x0053 */ char Padding_177;
  /* 0x0054 */ unsigned long StatusFlags;
  /* 0x0058 */ struct _WWAN_LIST_HEADER TNListHeader;
} WWAN_READY_INFO, *PWWAN_READY_INFO; /* size: 0x0060 */

typedef struct _NDIS_WWAN_READY_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_READY_INFO ReadyInfo;
} NDIS_WWAN_READY_INFO, *PNDIS_WWAN_READY_INFO; /* size: 0x0064 */

struct NdisDebugBlock<1230455886>
{
}; /* size: 0x0001 */

class Rtl::KArray<unsigned char,1>::const_iterator;

class Rtl::KArray<unsigned char,1>::iterator;

typedef struct _STACK_INDEX
{
  /* 0x0000 */ unsigned long XferDataIndex;
  /* 0x0004 */ unsigned long Index;
} STACK_INDEX, *PSTACK_INDEX; /* size: 0x0008 */

typedef struct _NDIS_PACKET_WRAPPER
{
  union
  {
    /* 0x0000 */ unsigned __int64 Padding;
    /* 0x0000 */ unsigned long PvtFlags;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _STACK_INDEX StackIndex;
  /* 0x0010 */ struct _NDIS_PACKET Packet;
  /* 0x004c */ long __PADDING__[1];
} NDIS_PACKET_WRAPPER, *PNDIS_PACKET_WRAPPER; /* size: 0x0050 */

struct NDIS_MINIPORT_ADAPTER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NDIS_OFFLOAD_EVENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
} NDIS_OFFLOAD_EVENT_HANDLERS, *PNDIS_OFFLOAD_EVENT_HANDLERS; /* size: 0x0004 */

struct wistd::__compressed_pair_elem<wistd::default_delete<Rtl::KString>,1,1>
{
}; /* size: 0x0001 */

typedef struct _ETH_MULTICAST_WRAPPER
{
  /* 0x0000 */ unsigned long RefCount;
  /* 0x0004 */ unsigned char MCastAddress[6];
  /* 0x000a */ char __PADDING__[2];
} ETH_MULTICAST_WRAPPER, *PETH_MULTICAST_WRAPPER; /* size: 0x000c */

typedef struct _NDIS_STATUS_UNBIND_WORKITEM
{
  /* 0x0000 */ struct _NDIS_WORK_ITEM WorkItem;
  /* 0x0028 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
} NDIS_STATUS_UNBIND_WORKITEM, *PNDIS_STATUS_UNBIND_WORKITEM; /* size: 0x002c */

typedef struct _NDIS_PKT_POOL
{
  /* 0x0000 */ unsigned long Tag;
  /* 0x0004 */ unsigned short PacketLength;
  /* 0x0006 */ unsigned short PktsPerBlock;
  /* 0x0008 */ unsigned short MaxBlocks;
  /* 0x000a */ unsigned short StackSize;
  /* 0x000c */ long BlocksAllocated;
  /* 0x0010 */ unsigned long ProtocolId;
  /* 0x0014 */ unsigned long BlockSize;
  /* 0x0018 */ void* Allocator;
  /* 0x001c */ unsigned long Lock;
  /* 0x0020 */ struct _LIST_ENTRY FreeBlocks;
  /* 0x0028 */ struct _LIST_ENTRY UsedBlocks;
  /* 0x0030 */ struct _LIST_ENTRY AgingBlocks;
  /* 0x0038 */ struct _LIST_ENTRY GlobalPacketPoolList;
  /* 0x0040 */ union _LARGE_INTEGER NextScavengeTick;
} NDIS_PKT_POOL, *PNDIS_PKT_POOL; /* size: 0x0048 */

typedef struct _NDIS_CO_VC_BLOCK
{
  /* 0x0000 */ unsigned long References;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Lock;
  /* 0x000c */ struct _NDIS_OPEN_BLOCK* ClientOpen;
  /* 0x0010 */ void* ClientContext;
  /* 0x0014 */ struct _NDIS_CO_VC_PTR_BLOCK* pProxyVcPtr;
  /* 0x0018 */ struct _NDIS_CO_VC_PTR_BLOCK* pClientVcPtr;
  /* 0x001c */ void* CoSendCompleteHandler /* function */;
  /* 0x0020 */ void* CoReceivePacketHandler /* function */;
  /* 0x0024 */ void* CoSendNetBufferListsCompleteHandler /* function */;
  /* 0x0028 */ void* CoReceiveNetBufferListsHandler /* function */;
  /* 0x002c */ struct _NDIS_OPEN_BLOCK* CallMgrOpen;
  /* 0x0030 */ void* CallMgrContext;
  /* 0x0034 */ void* CmActivateVcCompleteHandler /* function */;
  /* 0x0038 */ void* CmDeactivateVcCompleteHandler /* function */;
  /* 0x003c */ void* CmModifyCallQoSHandler /* function */;
  /* 0x0040 */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0044 */ void* MiniportContext;
  /* 0x0048 */ unsigned __int64 VcId;
} NDIS_CO_VC_BLOCK, *PNDIS_CO_VC_BLOCK; /* size: 0x0050 */

struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<_NDIS_MINIPORT_DRIVER_CHARACTERISTICS> >;

struct wistd::default_delete<NDIS_BIND_FILTER_LINK>
{
}; /* size: 0x0001 */

struct wistd::unique_ptr<NDIS_BIND_PROTOCOL_LINK,wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >::__nat;

struct wistd::__unique_ptr_deleter_sfinae<wistd::default_delete<NDIS_BIND_PROTOCOL_LINK> >;

typedef struct __vc_attributes::threadingAttribute
{
  /* 0x0000 */ enum __vc_attributes::threadingAttribute::threading_e value;
} _vc_attributes::threadingAttribute, *P_vc_attributes::threadingAttribute; /* size: 0x0004 */

typedef struct _TCP_OFFLOAD_STATS
{
  /* 0x0000 */ unsigned __int64 InSegments;
  /* 0x0008 */ unsigned __int64 OutSegments;
  /* 0x0010 */ unsigned long CurrentlyEstablished;
  /* 0x0014 */ unsigned long ResetEstablished;
  /* 0x0018 */ unsigned long RetransmittedSegments;
  /* 0x001c */ unsigned long InErrors;
  /* 0x0020 */ unsigned long OutResets;
  /* 0x0024 */ long __PADDING__[1];
} TCP_OFFLOAD_STATS, *PTCP_OFFLOAD_STATS; /* size: 0x0028 */

typedef struct _NDIS50_PROTOCOL_CHARACTERISTICS
{
  union
  {
    /* 0x0000 */ struct _NDIS40_PROTOCOL_CHARACTERISTICS Ndis40Chars;
    struct
    {
      /* 0x0000 */ unsigned char MajorNdisVersion;
      /* 0x0001 */ unsigned char MinorNdisVersion;
      /* 0x0002 */ unsigned short Filler;
      union
      {
        /* 0x0004 */ unsigned int Reserved;
        /* 0x0004 */ unsigned int Flags;
      }; /* size: 0x0004 */
      /* 0x0008 */ void* OpenAdapterCompleteHandler /* function */;
      /* 0x000c */ void* CloseAdapterCompleteHandler /* function */;
      union
      {
        /* 0x0010 */ void* SendCompleteHandler /* function */;
        /* 0x0010 */ void* WanSendCompleteHandler /* function */;
      }; /* size: 0x0004 */
      union
      {
        /* 0x0014 */ void* TransferDataCompleteHandler /* function */;
        /* 0x0014 */ void* WanTransferDataCompleteHandler /* function */;
      }; /* size: 0x0004 */
      /* 0x0018 */ void* ResetCompleteHandler /* function */;
      /* 0x001c */ void* RequestCompleteHandler /* function */;
      union
      {
        /* 0x0020 */ void* ReceiveHandler /* function */;
        /* 0x0020 */ void* WanReceiveHandler /* function */;
      }; /* size: 0x0004 */
      /* 0x0024 */ void* ReceiveCompleteHandler /* function */;
      /* 0x0028 */ void* StatusHandler /* function */;
      /* 0x002c */ void* StatusCompleteHandler /* function */;
      /* 0x0030 */ struct _UNICODE_STRING Name;
      /* 0x0038 */ void* ReceivePacketHandler /* function */;
      /* 0x003c */ void* BindAdapterHandler /* function */;
      /* 0x0040 */ void* UnbindAdapterHandler /* function */;
      /* 0x0044 */ void* PnPEventHandler /* function */;
      /* 0x0048 */ void* UnloadHandler /* function */;
    }; /* size: 0x004c */
  }; /* size: 0x004c */
  /* 0x004c */ void* ReservedHandlers[4];
  /* 0x005c */ void* CoSendCompleteHandler /* function */;
  /* 0x0060 */ void* CoStatusHandler /* function */;
  /* 0x0064 */ void* CoReceivePacketHandler /* function */;
  /* 0x0068 */ void* CoAfRegisterNotifyHandler /* function */;
} NDIS50_PROTOCOL_CHARACTERISTICS, *PNDIS50_PROTOCOL_CHARACTERISTICS; /* size: 0x006c */

typedef struct _IPSEC_OFFLOAD_V2_DELETE_SA
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _IPSEC_OFFLOAD_V2_DELETE_SA* Next;
  /* 0x0008 */ void* OffloadHandle;
} IPSEC_OFFLOAD_V2_DELETE_SA, *PIPSEC_OFFLOAD_V2_DELETE_SA; /* size: 0x000c */

typedef struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum NDIS_CHIMNEY_OFFLOAD_TYPE OffloadType;
  /* 0x000c */ void* TcpOffloadSendCompleteHandler /* function */;
  /* 0x0010 */ void* TcpOffloadReceiveCompleteHandler /* function */;
  /* 0x0014 */ void* TcpOffloadDisconnectCompleteHandler /* function */;
  /* 0x0018 */ void* TcpOffloadForwardCompleteHandler /* function */;
  /* 0x001c */ void* TcpOffloadEventHandler /* function */;
  /* 0x0020 */ void* TcpOffloadReceiveIndicateHandler /* function */;
} NDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS, *PNDIS_CLIENT_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS; /* size: 0x0024 */

struct DOT11_PRIVACY_EXEMPTION_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct DOT11_PRIVACY_EXEMPTION PrivacyExemptionEntries[1];
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

typedef struct _NDIS_PD_POST_AND_DRAIN_ARG
{
  /* 0x0000 */ struct _PD_BUFFER* PostBufferListHead;
  /* 0x0004 */ struct _PD_BUFFER** DrainBufferListTail;
  /* 0x0008 */ unsigned long MaxDrainCount;
  /* 0x000c */ unsigned long DrainCount;
  /* 0x0010 */ unsigned long PostCount;
  /* 0x0014 */ unsigned char QueueDepthThresholdReached;
  /* 0x0015 */ char __PADDING__[3];
} NDIS_PD_POST_AND_DRAIN_ARG, *PNDIS_PD_POST_AND_DRAIN_ARG; /* size: 0x0018 */

typedef struct _NDIS_GENERIC_OBJECT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* Caller;
  /* 0x0008 */ void* CallersCaller;
  /* 0x000c */ struct _DRIVER_OBJECT* DriverObject;
} NDIS_GENERIC_OBJECT, *PNDIS_GENERIC_OBJECT; /* size: 0x0010 */

typedef struct _DOT11_AVAILABLE_FREQUENCY_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned long uFrequencyValue[1];
} DOT11_AVAILABLE_FREQUENCY_LIST, *PDOT11_AVAILABLE_FREQUENCY_LIST; /* size: 0x0010 */

typedef struct _NDIS_PACKET_8021Q_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int UserPriority : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned int CanonicalFormatId : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int VlanId : 12; /* bit position: 4 */
        /* 0x0000 */ unsigned int Reserved : 16; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ TagHeader;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0004 */
} NDIS_PACKET_8021Q_INFO, *PNDIS_PACKET_8021Q_INFO; /* size: 0x0004 */

typedef struct _NDIS_GFT_COUNTER_INFO_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ unsigned long CounterInfoArrayOffset;
  /* 0x0010 */ unsigned long CounterInfoArrayNumElements;
  /* 0x0014 */ unsigned long CounterInfoArrayElementSize;
} NDIS_GFT_COUNTER_INFO_ARRAY, *PNDIS_GFT_COUNTER_INFO_ARRAY; /* size: 0x0018 */

typedef struct _tlgTypeMapBase<float>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<float>, *PtlgTypeMapBase<float>; /* size: 0x0001 */

typedef struct _NDIS_ENUM_FILTERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long NumberOfFilters;
  /* 0x000c */ unsigned long OffsetFirstFilter;
  /* 0x0010 */ struct _NDIS_FILTER_INTERFACE Filter[1];
} NDIS_ENUM_FILTERS, *PNDIS_ENUM_FILTERS; /* size: 0x0040 */

struct wistd::integral_constant<unsigned int,0>
{
  /* 0x0000 */ const unsigned int value;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _NDIS_NET_BUFFER_LIST_POOL
{
  /* 0x0000 */ long Padding_178[4];
  /* 0x0010 */ unsigned char ProtocolId;
  /* 0x0011 */ char Padding_179;
  /* 0x0012 */ unsigned short ContextSize;
  /* 0x0014 */ void* OwnerHandle;
  /* 0x0018 */ void* Allocator;
  /* 0x001c */ unsigned long Tag;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long Lock;
  /* 0x0028 */ struct _LIST_ENTRY GlobalNetBufferListPoolList;
  /* 0x0030 */ unsigned long DataSize;
  /* 0x0034 */ unsigned long MdlSize;
  /* 0x0038 */ unsigned long ItemLength;
  /* 0x003c */ long Padding_180;
  /* 0x0040 */ struct _NDIS_NPAGED_LOOKASIDE_LIST NetBufferListPoolList[1];
} NDIS_NET_BUFFER_LIST_POOL, *PNDIS_NET_BUFFER_LIST_POOL; /* size: 0x0140 */

typedef struct _NDIS_WWAN_SET_PACKET_SERVICE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _WWAN_PACKET_SERVICE_ACTION PacketServiceAction;
} NDIS_WWAN_SET_PACKET_SERVICE, *PNDIS_WWAN_SET_PACKET_SERVICE; /* size: 0x0008 */

typedef struct _NDIS_PACKET_STACK
{
  /* 0x0000 */ unsigned long IMReserved[2];
  /* 0x0008 */ unsigned long NdisReserved[4];
} NDIS_PACKET_STACK, *PNDIS_PACKET_STACK; /* size: 0x0018 */

typedef union _NDIS_RSC_NBL_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short CoalescedSegCount;
      /* 0x0002 */ unsigned short DupAckCount;
    } /* size: 0x0004 */ Info;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0004 */
} NDIS_RSC_NBL_INFO, *PNDIS_RSC_NBL_INFO; /* size: 0x0004 */

typedef struct _NDIS_TRACK_MEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0008 */ unsigned long Tag;
  /* 0x000c */ unsigned int Length;
  /* 0x0010 */ void* Caller;
  /* 0x0014 */ void* CallersCaller;
} NDIS_TRACK_MEM, *PNDIS_TRACK_MEM; /* size: 0x0018 */

typedef struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER
{
  /* 0x0000 */ unsigned __int64 PacketsTransmitted;
  /* 0x0008 */ unsigned __int64 BytesTransmitted;
} NDIS_PD_TRANSMIT_QUEUE_COUNTER, *PNDIS_PD_TRANSMIT_QUEUE_COUNTER; /* size: 0x0010 */

typedef union _NDIS_PD_COUNTER_VALUE
{
  union
  {
    /* 0x0000 */ struct _NDIS_PD_RECEIVE_QUEUE_COUNTER ReceiveQueue;
    /* 0x0000 */ struct _NDIS_PD_TRANSMIT_QUEUE_COUNTER TransmitQueue;
    /* 0x0000 */ struct _NDIS_PD_FILTER_COUNTER Filter;
  }; /* size: 0x0018 */
} NDIS_PD_COUNTER_VALUE, *PNDIS_PD_COUNTER_VALUE; /* size: 0x0018 */

typedef struct _tlgTypeMapBase<signed char>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<signed char>, *PtlgTypeMapBase<signed char>; /* size: 0x0001 */

typedef struct _WWAN_PIN_LIST
{
  /* 0x0000 */ struct _WWAN_PIN_DESC WwanPinDescPin1;
  /* 0x0010 */ struct _WWAN_PIN_DESC WwanPinDescPin2;
  /* 0x0020 */ struct _WWAN_PIN_DESC WwanPinDescDeviceSimPin;
  /* 0x0030 */ struct _WWAN_PIN_DESC WwanPinDescDeviceFirstSimPin;
  /* 0x0040 */ struct _WWAN_PIN_DESC WwanPinDescNetworkPin;
  /* 0x0050 */ struct _WWAN_PIN_DESC WwanPinDescNetworkSubsetPin;
  /* 0x0060 */ struct _WWAN_PIN_DESC WwanPinDescSvcProviderPin;
  /* 0x0070 */ struct _WWAN_PIN_DESC WwanPinDescCorporatePin;
  /* 0x0080 */ struct _WWAN_PIN_DESC WwanPinDescSubsidyLock;
  /* 0x0090 */ struct _WWAN_PIN_DESC WwanPinDescCustom;
} WWAN_PIN_LIST, *PWWAN_PIN_LIST; /* size: 0x00a0 */

typedef struct _NDIS_WWAN_PIN_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_PIN_LIST PinList;
} NDIS_WWAN_PIN_LIST, *PNDIS_WWAN_PIN_LIST; /* size: 0x00a8 */

typedef struct _tlgTypeMapBase<char const *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<char const *>, *PtlgTypeMapBase<char const *>; /* size: 0x0001 */

typedef struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* MiniportAdapterContext;
  /* 0x0008 */ unsigned long AttributeFlags;
  /* 0x000c */ unsigned int CheckForHangTimeInSeconds;
  /* 0x0010 */ enum _NDIS_INTERFACE_TYPE InterfaceType;
} NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES; /* size: 0x0014 */

typedef struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_HD_SPLIT_ATTRIBUTES* HDSplitAttributes;
  /* 0x0008 */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* HardwareReceiveFilterCapabilities;
  /* 0x000c */ struct _NDIS_RECEIVE_FILTER_CAPABILITIES* CurrentReceiveFilterCapabilities;
  /* 0x0010 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* HardwareNicSwitchCapabilities;
  /* 0x0014 */ struct _NDIS_NIC_SWITCH_CAPABILITIES* CurrentNicSwitchCapabilities;
  /* 0x0018 */ struct _NDIS_SRIOV_CAPABILITIES* HardwareSriovCapabilities;
  /* 0x001c */ struct _NDIS_SRIOV_CAPABILITIES* CurrentSriovCapabilities;
  /* 0x0020 */ struct _NDIS_QOS_CAPABILITIES* HardwareQosCapabilities;
  /* 0x0024 */ struct _NDIS_QOS_CAPABILITIES* CurrentQosCapabilities;
  /* 0x0028 */ struct _NDIS_GFT_OFFLOAD_CAPABILITIES* HardwareGftOffloadCapabilities;
  /* 0x002c */ struct _NDIS_GFT_OFFLOAD_CAPABILITIES* CurrentGftOffloadCapabilities;
} NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES; /* size: 0x0030 */

typedef union _NDIS_MINIPORT_ADAPTER_ATTRIBUTES
{
  union
  {
    /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES AddDeviceRegistrationAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES RegistrationAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES GeneralAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES OffloadAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES Native_802_11_Attributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES HardwareAssistAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_NDK_ATTRIBUTES NDKAttributes;
    /* 0x0000 */ struct _NDIS_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES PacketDirectAttributes;
  }; /* size: 0x00d0 */
} NDIS_MINIPORT_ADAPTER_ATTRIBUTES, *PNDIS_MINIPORT_ADAPTER_ATTRIBUTES; /* size: 0x00d0 */

typedef struct _NDIS_GFT_PROFILE_INFO
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFT_PROFILE_TYPE ProfileType;
  /* 0x000c */ enum _NDIS_GFP_TABLE_TYPE TableType;
  /* 0x0010 */ unsigned long ProfileId;
  /* 0x0014 */ unsigned long NumSupportedFlowEntries;
  /* 0x0018 */ unsigned long NumCurrentFlowEntries;
  /* 0x001c */ unsigned long HeaderGroupArrayOffset;
  /* 0x0020 */ unsigned long HeaderGroupArrayNumElements;
  /* 0x0024 */ unsigned long HeaderGroupArrayElementSize;
} NDIS_GFT_PROFILE_INFO, *PNDIS_GFT_PROFILE_INFO; /* size: 0x0028 */

struct DOT11_ERP_PHY_ATTRIBUTES
{
  /* 0x0000 */ struct DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
  /* 0x0008 */ unsigned char bERPPBCCOptionImplemented;
  /* 0x0009 */ unsigned char bDSSSOFDMOptionImplemented;
  /* 0x000a */ unsigned char bShortSlotTimeOptionImplemented;
  /* 0x000b */ char __PADDING__[1];
}; /* size: 0x000c */

struct DOT11_PHY_ATTRIBUTES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _DOT11_PHY_TYPE PhyType;
  /* 0x0008 */ unsigned char bHardwarePhyState;
  /* 0x0009 */ unsigned char bSoftwarePhyState;
  /* 0x000a */ unsigned char bCFPollable;
  /* 0x000b */ char Padding_181;
  /* 0x000c */ unsigned long uMPDUMaxLength;
  /* 0x0010 */ enum _DOT11_TEMP_TYPE TempType;
  /* 0x0014 */ enum _DOT11_DIVERSITY_SUPPORT DiversitySupport;
  union
  {
    union
    {
      /* 0x0018 */ struct DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
      /* 0x0018 */ struct DOT11_OFDM_PHY_ATTRIBUTES OFDMAttributes;
      /* 0x0018 */ struct DOT11_ERP_PHY_ATTRIBUTES ERPAttributes;
    }; /* size: 0x000c */
  } /* size: 0x000c */ PhySpecificAttributes;
  /* 0x0024 */ unsigned long uNumberSupportedPowerLevels;
  /* 0x0028 */ unsigned long TxPowerLevels[8];
  /* 0x0048 */ unsigned long uNumDataRateMappingEntries;
  /* 0x004c */ struct DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[126];
  /* 0x0244 */ struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 SupportedDataRatesValue;
  /* 0x0442 */ char __PADDING__[2];
}; /* size: 0x0444 */

struct NDIS_PD_COUNTER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NDIS_PD_PROVIDER_DISPATCH
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* NdisPDAllocateQueue /* function */;
  /* 0x000c */ void* NdisPDFreeQueue /* function */;
  /* 0x0010 */ void* NdisPDAcquireReceiveQueues /* function */;
  /* 0x0014 */ void* NdisPDReleaseReceiveQueues /* function */;
  /* 0x0018 */ void* NdisPDAllocateCounter /* function */;
  /* 0x001c */ void* NdisPDFreeCounter /* function */;
  /* 0x0020 */ void* NdisPDQueryCounter /* function */;
  /* 0x0024 */ void* NdisPDSetReceiveFilter /* function */;
  /* 0x0028 */ void* NdisPDClearReceiveFilter /* function */;
  /* 0x002c */ void* NdisPDRequestDrainNotification /* function */;
  /* 0x0030 */ void* NdisPDQueueControl /* function */;
  /* 0x0034 */ void* NdisPDProviderControl /* function */;
} NDIS_PD_PROVIDER_DISPATCH, *PNDIS_PD_PROVIDER_DISPATCH; /* size: 0x0038 */

struct DOT11_AUTH_CIPHER_PAIR
{
  /* 0x0000 */ enum _DOT11_AUTH_ALGORITHM AuthAlgoId;
  /* 0x0004 */ enum _DOT11_CIPHER_ALGORITHM CipherAlgoId;
}; /* size: 0x0008 */

typedef struct _NDIS_PORT_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long NumberOfPorts;
  /* 0x0008 */ unsigned long OffsetFirstPort;
  /* 0x000c */ unsigned long ElementSize;
  /* 0x0010 */ struct _NDIS_PORT_CHARACTERISTICS Ports[1];
} NDIS_PORT_ARRAY, *PNDIS_PORT_ARRAY; /* size: 0x0050 */

typedef struct _NDIS_GFT_OFFLOAD_CAPABILITIES
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long CounterCapabilities;
  /* 0x000c */ unsigned long SupportedTableTypes;
  /* 0x0010 */ unsigned long SupportedEncapsulationTypes;
  /* 0x0014 */ unsigned long SupportedIngressExactMatchTableActions;
  /* 0x0018 */ unsigned long SupportedEgressExactMatchTableActions;
  /* 0x001c */ unsigned long SoftwareSupportedIngressExactMatchTableActions;
  /* 0x0020 */ unsigned long SoftwareSupportedEgressExactMatchTableActions;
  /* 0x0024 */ unsigned long SupportedIngressWildcardMatchTableActions;
  /* 0x0028 */ unsigned long SupportedEgressWildcardMatchTableActions;
  /* 0x002c */ unsigned long SoftwareSupportedIngressWildcardMatchTableActions;
  /* 0x0030 */ unsigned long SoftwareSupportedEgressWildcardMatchTableActions;
  /* 0x0034 */ unsigned long NumPacketCounterObjects;
  /* 0x0038 */ unsigned long NumByteCounterObjects;
  /* 0x003c */ unsigned long NumPacketByteCounterObjects;
  /* 0x0040 */ unsigned long NumPacketByteCounterAndStateObjects;
  /* 0x0044 */ unsigned long NumCounterObjectsPerIngressExactMatchFlowEntry;
  /* 0x0048 */ unsigned long NumCounterObjectsPerEgressExactMatchFlowEntry;
  /* 0x004c */ unsigned long NumCounterObjectsPerIngressWildcardMatchFlowEntry;
  /* 0x0050 */ unsigned long NumCounterObjectsPerEgressWildcardMatchFlowEntry;
} NDIS_GFT_OFFLOAD_CAPABILITIES, *PNDIS_GFT_OFFLOAD_CAPABILITIES; /* size: 0x0054 */

typedef struct _NDIS_GFT_FREE_COUNTER_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ unsigned long CounterIdStart;
  /* 0x0010 */ unsigned long NumCounters;
  /* 0x0014 */ unsigned long LastCounterValueAndStateArrayOffset;
  /* 0x0018 */ unsigned long LastCounterValueAndStateArrayNumElements;
  /* 0x001c */ unsigned long LastCounterValueAndStateArrayElementSize;
} NDIS_GFT_FREE_COUNTER_PARAMETERS, *PNDIS_GFT_FREE_COUNTER_PARAMETERS; /* size: 0x0020 */

typedef struct _NDIS_802_11_WEP
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long KeyIndex;
  /* 0x0008 */ unsigned long KeyLength;
  /* 0x000c */ unsigned char KeyMaterial[1];
  /* 0x000d */ char __PADDING__[3];
} NDIS_802_11_WEP, *PNDIS_802_11_WEP; /* size: 0x0010 */

typedef struct _NDIS_SWITCH_NIC_STATUS_INDICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned int SourcePortId;
  /* 0x000c */ unsigned short SourceNicIndex;
  /* 0x000e */ char Padding_182[2];
  /* 0x0010 */ unsigned int DestinationPortId;
  /* 0x0014 */ unsigned short DestinationNicIndex;
  /* 0x0016 */ char Padding_183[2];
  /* 0x0018 */ struct _NDIS_STATUS_INDICATION* StatusIndication;
} NDIS_SWITCH_NIC_STATUS_INDICATION, *PNDIS_SWITCH_NIC_STATUS_INDICATION; /* size: 0x001c */

typedef struct _tlgCharTraits<wchar_t>
{
} tlgCharTraits<wchar_t>, *PtlgCharTraits<wchar_t>; /* size: 0x0001 */

typedef struct _LOCK_STATE_EX
{
  /* 0x0000 */ unsigned char OldIrql;
  /* 0x0001 */ unsigned char LockState;
  /* 0x0002 */ unsigned char Flags;
} LOCK_STATE_EX, *PLOCK_STATE_EX; /* size: 0x0003 */

typedef struct _tlgTypeMapBase<_GUID>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<_GUID>, *PtlgTypeMapBase<_GUID>; /* size: 0x0001 */

typedef struct _NDIS_WWAN_VISIBLE_PROVIDERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_LIST_HEADER VisibleListHeader;
} NDIS_WWAN_VISIBLE_PROVIDERS, *PNDIS_WWAN_VISIBLE_PROVIDERS; /* size: 0x0010 */

typedef struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX* NextEntry;
  /* 0x0008 */ unsigned long Tag;
  /* 0x000c */ void* Data;
} NDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX, *PNDIS_NBL_MEDIA_SPECIFIC_INFORMATION_EX; /* size: 0x0010 */

typedef struct _NDIS_802_11_FIXED_IEs
{
  /* 0x0000 */ unsigned char Timestamp[8];
  /* 0x0008 */ unsigned short BeaconInterval;
  /* 0x000a */ unsigned short Capabilities;
} NDIS_802_11_FIXED_IEs, *PNDIS_802_11_FIXED_IEs; /* size: 0x000c */

typedef struct _tlgTypeMapBase<int>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<int>, *PtlgTypeMapBase<int>; /* size: 0x0001 */

typedef struct _NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum NDIS_CHIMNEY_OFFLOAD_TYPE OffloadType;
  /* 0x000c */ void* TcpOffloadSendHandler /* function */;
  /* 0x0010 */ void* TcpOffloadReceiveHandler /* function */;
  /* 0x0014 */ void* TcpOffloadDisconnectHandler /* function */;
  /* 0x0018 */ void* TcpOffloadForwardHandler /* function */;
  /* 0x001c */ void* TcpOffloadReceiveReturnHandler /* function */;
} NDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS, *PNDIS_PROVIDER_CHIMNEY_OFFLOAD_TCP_CHARACTERISTICS; /* size: 0x0020 */

struct __WIL__WNF_USER_SUBSCRIPTION;

typedef struct _NDIS_TCP_OFFLOAD_EVENT_HANDLERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* NdisTcpOffloadEventHandler /* function */;
  /* 0x0008 */ void* NdisTcpOffloadReceiveHandler /* function */;
  /* 0x000c */ void* NdisTcpOffloadSendComplete /* function */;
  /* 0x0010 */ void* NdisTcpOffloadReceiveComplete /* function */;
  /* 0x0014 */ void* NdisTcpOffloadDisconnectComplete /* function */;
  /* 0x0018 */ void* NdisTcpOffloadForwardComplete /* function */;
} NDIS_TCP_OFFLOAD_EVENT_HANDLERS, *PNDIS_TCP_OFFLOAD_EVENT_HANDLERS; /* size: 0x001c */

typedef struct _tlgTypeMapBase<char>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned short _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<char>, *PtlgTypeMapBase<char>; /* size: 0x0001 */

typedef struct _PATH_OFFLOAD_STATE_CONST
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ const unsigned char* SourceAddress;
  /* 0x000c */ const unsigned char* DestinationAddress;
} PATH_OFFLOAD_STATE_CONST, *PPATH_OFFLOAD_STATE_CONST; /* size: 0x0010 */

typedef struct _NDIS_NSI_INTERFACE_ENUM_ROS
{
  /* 0x0000 */ unsigned long ifIndex;
  /* 0x0004 */ struct _IF_COUNTED_STRING_LH ifDescr;
  /* 0x0208 */ unsigned short ifType;
  /* 0x020a */ char Padding_184[2];
  /* 0x020c */ enum _NET_IF_ACCESS_TYPE AccessType;
  /* 0x0210 */ enum _NET_IF_DIRECTION_TYPE DirectionType;
  /* 0x0214 */ enum _NET_IF_CONNECTION_TYPE ConnectionType;
  /* 0x0218 */ struct _GUID InterfaceGuid;
  /* 0x0228 */ unsigned char ifConnectorPresent;
  /* 0x0229 */ char Padding_185[3];
  /* 0x022c */ unsigned long ifFlags;
  /* 0x0230 */ enum _NDIS_MEDIUM MediaType;
  /* 0x0234 */ enum _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
} NDIS_NSI_INTERFACE_ENUM_ROS, *PNDIS_NSI_INTERFACE_ENUM_ROS; /* size: 0x0238 */

typedef struct _NDIS_GFT_TABLE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ enum _NDIS_GFP_TABLE_TYPE TableType;
  /* 0x0010 */ unsigned long NextTableId;
} NDIS_GFT_TABLE_PARAMETERS, *PNDIS_GFT_TABLE_PARAMETERS; /* size: 0x0014 */

typedef struct _NDIS_802_11_BSSID_LIST_EX
{
  /* 0x0000 */ unsigned long NumberOfItems;
  /* 0x0004 */ struct _NDIS_WLAN_BSSID_EX Bssid[1];
} NDIS_802_11_BSSID_LIST_EX, *PNDIS_802_11_BSSID_LIST_EX; /* size: 0x007c */

typedef struct _NDIS_RECEIVE_FILTER_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY AdapterLink;
  /* 0x0008 */ struct _LIST_ENTRY QueueLink;
  /* 0x0010 */ struct _LIST_ENTRY VPortLink;
  /* 0x0018 */ unsigned long FilterId;
  /* 0x001c */ struct _NDIS_MINIPORT_BLOCK* Miniport;
  /* 0x0020 */ struct _NDIS_OPEN_BLOCK* Open;
  /* 0x0024 */ struct _NDIS_RECEIVE_QUEUE_BLOCK* ReceiveQueue;
  /* 0x0028 */ long Reference;
  /* 0x002c */ struct _NDIS_CONNECTION_INFO ConnectionInfo;
  /* 0x005c */ struct _NDIS_RECEIVE_FILTER_PARAMETERS FilterParameters;
  /* 0x0088 */ struct _NDIS_VPORT_BLOCK* VPortBlock;
} NDIS_RECEIVE_FILTER_BLOCK, *PNDIS_RECEIVE_FILTER_BLOCK; /* size: 0x008c */

typedef struct _WWAN_SET_REGISTER_STATE
{
  /* 0x0000 */ wchar_t ProviderId[7];
  /* 0x000e */ char Padding_186[2];
  /* 0x0010 */ enum _WWAN_REGISTER_ACTION RegisterAction;
  /* 0x0014 */ unsigned long WwanDataClass;
} WWAN_SET_REGISTER_STATE, *PWWAN_SET_REGISTER_STATE; /* size: 0x0018 */

typedef struct _NDIS_WWAN_SET_REGISTER_STATE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_SET_REGISTER_STATE SetRegisterState;
} NDIS_WWAN_SET_REGISTER_STATE, *PNDIS_WWAN_SET_REGISTER_STATE; /* size: 0x001c */

struct DOT11_CIPHER_DEFAULT_KEY_VALUE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uKeyIndex;
  /* 0x0008 */ enum _DOT11_CIPHER_ALGORITHM AlgorithmId;
  /* 0x000c */ unsigned char MacAddr[6];
  /* 0x0012 */ unsigned char bDelete;
  /* 0x0013 */ unsigned char bStatic;
  /* 0x0014 */ unsigned short usKeyLength;
  /* 0x0016 */ unsigned char ucKey[1];
  /* 0x0017 */ char __PADDING__[1];
}; /* size: 0x0018 */

typedef struct _NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO
{
  struct
  {
    /* 0x0000 */ void* TunnelHandle;
  } /* size: 0x0004 */ Transmit;
} NDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V2_TUNNEL_NET_BUFFER_LIST_INFO; /* size: 0x0004 */

typedef struct _NDIS_REFCOUNT_BLOCK
{
  /* 0x0000 */ unsigned char Flags;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char NumRefTags;
  /* 0x0003 */ unsigned char NumOverflowTaggedEntries;
  union
  {
    /* 0x0004 */ struct _NDIS_REFCOUNT_TAGGED TaggedRefCounts;
    /* 0x0004 */ struct _NDIS_REFCOUNT_WITH_STACK RefWithStack[1];
  }; /* size: 0x0038 */
} NDIS_REFCOUNT_BLOCK, *PNDIS_REFCOUNT_BLOCK; /* size: 0x003c */

typedef struct _NDIS_WAN_GET_STATS
{
  /* 0x0000 */ unsigned char LocalAddress[6];
  /* 0x0006 */ char Padding_187[2];
  /* 0x0008 */ unsigned long BytesSent;
  /* 0x000c */ unsigned long BytesRcvd;
  /* 0x0010 */ unsigned long FramesSent;
  /* 0x0014 */ unsigned long FramesRcvd;
  /* 0x0018 */ unsigned long CRCErrors;
  /* 0x001c */ unsigned long TimeoutErrors;
  /* 0x0020 */ unsigned long AlignmentErrors;
  /* 0x0024 */ unsigned long SerialOverrunErrors;
  /* 0x0028 */ unsigned long FramingErrors;
  /* 0x002c */ unsigned long BufferOverrunErrors;
  /* 0x0030 */ unsigned long BytesTransmittedUncompressed;
  /* 0x0034 */ unsigned long BytesReceivedUncompressed;
  /* 0x0038 */ unsigned long BytesTransmittedCompressed;
  /* 0x003c */ unsigned long BytesReceivedCompressed;
} NDIS_WAN_GET_STATS, *PNDIS_WAN_GET_STATS; /* size: 0x0040 */

typedef struct _tlgTypeMapBase<bool>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned short _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<bool>, *PtlgTypeMapBase<bool>; /* size: 0x0001 */

typedef struct _NEIGHBOR_OFFLOAD_STATE_CONST
{
  /* 0x0000 */ struct _OFFLOAD_STATE_HEADER Header;
  /* 0x0008 */ unsigned char DlSourceAddress[32];
  /* 0x0028 */ unsigned long VlanId : 12; /* bit position: 0 */
} NEIGHBOR_OFFLOAD_STATE_CONST, *PNEIGHBOR_OFFLOAD_STATE_CONST; /* size: 0x002c */

typedef struct _NDIS_WAN_LINE_UP
{
  /* 0x0000 */ unsigned long LinkSpeed;
  /* 0x0004 */ unsigned long MaximumTotalSize;
  /* 0x0008 */ enum _NDIS_WAN_QUALITY Quality;
  /* 0x000c */ unsigned short SendWindow;
  /* 0x000e */ unsigned char RemoteAddress[6];
  /* 0x0014 */ unsigned char LocalAddress[6];
  /* 0x001a */ char Padding_188[2];
  /* 0x001c */ unsigned long ProtocolBufferLength;
  /* 0x0020 */ unsigned char* ProtocolBuffer;
  /* 0x0024 */ unsigned short ProtocolType;
  /* 0x0026 */ char Padding_189[2];
  /* 0x0028 */ struct _UNICODE_STRING DeviceName;
} NDIS_WAN_LINE_UP, *PNDIS_WAN_LINE_UP; /* size: 0x0030 */

struct DOT11_BSSID_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned char BSSIDs[6][1];
  /* 0x0012 */ char __PADDING__[2];
}; /* size: 0x0014 */

typedef struct _NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* InitiateOffloadCompleteHandler /* function */;
  /* 0x000c */ void* TerminateOffloadCompleteHandler /* function */;
  /* 0x0010 */ void* UpdateOffloadCompleteHandler /* function */;
  /* 0x0014 */ void* InvalidateOffloadCompleteHandler /* function */;
  /* 0x0018 */ void* QueryOffloadCompleteHandler /* function */;
  /* 0x001c */ void* IndicateOffloadEventHandler /* function */;
} NDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS, *PNDIS_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS; /* size: 0x0020 */

typedef struct _tlgTypeMapBase<char *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<char *>, *PtlgTypeMapBase<char *>; /* size: 0x0001 */

typedef struct _NDIS_GFT_CUSTOM_ACTION_PROFILE
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_GFP_TABLE_TYPE TableType;
  /* 0x000c */ unsigned long ProfileId;
  /* 0x0010 */ unsigned long Type;
  /* 0x0014 */ unsigned long Length;
  union
  {
    /* 0x0018 */ unsigned long Alignment;
    struct
    {
      /* 0x0018 */ unsigned char ActionProfileData[1];
      /* 0x0019 */ char __PADDING__[3];
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} NDIS_GFT_CUSTOM_ACTION_PROFILE, *PNDIS_GFT_CUSTOM_ACTION_PROFILE; /* size: 0x001c */

typedef struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION
{
  /* 0x0000 */ struct _NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION* NextEntry;
  /* 0x0004 */ unsigned long Tag;
  /* 0x0008 */ unsigned char Data[1];
  /* 0x0009 */ char __PADDING__[7];
} NDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION, *PNDIS_NBL_MEDIA_MEDIA_SPECIFIC_INFORMATION; /* size: 0x0010 */

typedef struct _NDIS_MINIPORT_CO_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* CoCreateVcHandler /* function */;
  /* 0x000c */ void* CoDeleteVcHandler /* function */;
  /* 0x0010 */ void* CoActivateVcHandler /* function */;
  /* 0x0014 */ void* CoDeactivateVcHandler /* function */;
  /* 0x0018 */ void* CoSendNetBufferListsHandler /* function */;
  /* 0x001c */ void* CoOidRequestHandler /* function */;
} NDIS_MINIPORT_CO_CHARACTERISTICS, *PNDIS_MINIPORT_CO_CHARACTERISTICS; /* size: 0x0020 */

typedef struct _tlgTypeMapBase<void *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<void *>, *PtlgTypeMapBase<void *>; /* size: 0x0001 */

typedef struct _NDIS_NET_BUFFER_POOL
{
  /* 0x0000 */ long Padding_190[4];
  /* 0x0010 */ unsigned long ItemLength;
  /* 0x0014 */ void* OwnerHandle;
  /* 0x0018 */ void* Allocator;
  /* 0x001c */ unsigned long Tag;
  /* 0x0020 */ unsigned long Lock;
  /* 0x0024 */ struct _LIST_ENTRY GlobalNetBufferPoolList;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ unsigned long DataSize;
  /* 0x0034 */ unsigned long MdlSize;
  /* 0x0038 */ long Padding_191[2];
  /* 0x0040 */ struct _NDIS_NPAGED_LOOKASIDE_LIST NetBufferPoolList[1];
} NDIS_NET_BUFFER_POOL, *PNDIS_NET_BUFFER_POOL; /* size: 0x0140 */

typedef struct _NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* InterruptHandler /* function */;
  /* 0x0008 */ void* InterruptDpcHandler /* function */;
  /* 0x000c */ void* DisableInterruptHandler /* function */;
  /* 0x0010 */ void* EnableInterruptHandler /* function */;
  /* 0x0014 */ unsigned char MsiSupported;
  /* 0x0015 */ unsigned char MsiSyncWithAllMessages;
  /* 0x0016 */ char Padding_192[2];
  /* 0x0018 */ void* MessageInterruptHandler /* function */;
  /* 0x001c */ void* MessageInterruptDpcHandler /* function */;
  /* 0x0020 */ void* DisableMessageInterruptHandler /* function */;
  /* 0x0024 */ void* EnableMessageInterruptHandler /* function */;
  /* 0x0028 */ enum _NDIS_INTERRUPT_TYPE InterruptType;
  /* 0x002c */ struct _IO_INTERRUPT_MESSAGE_INFO* MessageInfoTable;
} NDIS_MINIPORT_INTERRUPT_CHARACTERISTICS, *PNDIS_MINIPORT_INTERRUPT_CHARACTERISTICS; /* size: 0x0030 */

typedef struct _tlgTypeMapBase<_FILETIME>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<_FILETIME>, *PtlgTypeMapBase<_FILETIME>; /* size: 0x0001 */

typedef struct _NDIS_CONFIGURATION_OBJECT
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ void* NdisHandle;
  /* 0x0008 */ unsigned long Flags;
} NDIS_CONFIGURATION_OBJECT, *PNDIS_CONFIGURATION_OBJECT; /* size: 0x000c */

typedef struct _IO_INTERRUPT_MESSAGE_INFO
{
  /* 0x0000 */ unsigned char UnifiedIrql;
  /* 0x0001 */ char Padding_193[3];
  /* 0x0004 */ unsigned long MessageCount;
  /* 0x0008 */ struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY MessageInfo[1];
} IO_INTERRUPT_MESSAGE_INFO, *PIO_INTERRUPT_MESSAGE_INFO; /* size: 0x0030 */

typedef struct _NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long IsIPv4 : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long IsIPv6 : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long TcpChecksum : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long UdpChecksum : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long IpHeaderChecksum : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long Reserved : 11; /* bit position: 5 */
        /* 0x0000 */ unsigned long TcpHeaderOffset : 10; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long TcpChecksumFailed : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long UdpChecksumFailed : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long IpChecksumFailed : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long TcpChecksumSucceeded : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long UdpChecksumSucceeded : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long IpChecksumSucceeded : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned long Loopback : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned long TcpChecksumValueInvalid : 1; /* bit position: 7 */
        /* 0x0000 */ unsigned long IpChecksumValueInvalid : 1; /* bit position: 8 */
      }; /* bitfield */
    } /* size: 0x0004 */ Receive;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0004 */
} NDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO, *PNDIS_TCP_IP_CHECKSUM_NET_BUFFER_LIST_INFO; /* size: 0x0004 */

typedef struct _NDIS_GFT_FLOW_ENTRY_INFO_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ unsigned long VPortId;
  /* 0x0010 */ unsigned long ProviderFlowEntryIdStart;
  /* 0x0014 */ unsigned long FlowEntryIdCount;
  /* 0x0018 */ unsigned long FlowEntryInfoArrayOffset;
  /* 0x001c */ unsigned long FlowEntryInfoArrayNumElements;
  /* 0x0020 */ unsigned long FlowEntryInfoArrayElementSize;
} NDIS_GFT_FLOW_ENTRY_INFO_ARRAY, *PNDIS_GFT_FLOW_ENTRY_INFO_ARRAY; /* size: 0x0024 */

typedef struct _NDIS_TIMER_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long AllocationTag;
  /* 0x0008 */ void* TimerFunction /* function */;
  /* 0x000c */ void* FunctionContext;
} NDIS_TIMER_CHARACTERISTICS, *PNDIS_TIMER_CHARACTERISTICS; /* size: 0x0010 */

typedef struct _tlgTypeMapBase<wchar_t *>
{
  union
  {
    /* 0x0000 */ const BOOL _tlgIsSimple;
    /* 0x0000 */ const unsigned char _tlgType0;
    /* 0x0000 */ const unsigned short _tlgType1;
  }; /* size: 0x0002 */
  /* 0x0002 */ char __PADDING__[4294967295];
} tlgTypeMapBase<wchar_t *>, *PtlgTypeMapBase<wchar_t *>; /* size: 0x0001 */

typedef struct _NDIS_REFCOUNT_TAGGED_ENTRY
{
  /* 0x0000 */ unsigned char Tag;
  /* 0x0001 */ unsigned char RefCount;
} NDIS_REFCOUNT_TAGGED_ENTRY, *PNDIS_REFCOUNT_TAGGED_ENTRY; /* size: 0x0002 */

typedef struct _DOT11_INCOMING_ASSOC_DECISION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char PeerMacAddr[6];
  /* 0x000a */ unsigned char bAccept;
  /* 0x000b */ char Padding_194;
  /* 0x000c */ unsigned short usReasonCode;
  /* 0x000e */ char Padding_195[2];
  /* 0x0010 */ unsigned long uAssocResponseIEsOffset;
  /* 0x0014 */ unsigned long uAssocResponseIEsLength;
} DOT11_INCOMING_ASSOC_DECISION, *PDOT11_INCOMING_ASSOC_DECISION; /* size: 0x0018 */

typedef struct _TRANSPORT_HEADER_OFFSET
{
  /* 0x0000 */ unsigned short ProtocolType;
  /* 0x0002 */ unsigned short HeaderOffset;
} TRANSPORT_HEADER_OFFSET, *PTRANSPORT_HEADER_OFFSET; /* size: 0x0004 */

typedef struct _NDIS_PROTOCOL_PAUSE_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long PauseReason;
} NDIS_PROTOCOL_PAUSE_PARAMETERS, *PNDIS_PROTOCOL_PAUSE_PARAMETERS; /* size: 0x000c */

typedef struct _GEN_GET_NETCARD_TIME
{
  /* 0x0000 */ unsigned __int64 ReadTime;
} GEN_GET_NETCARD_TIME, *PGEN_GET_NETCARD_TIME; /* size: 0x0008 */

typedef struct _NDIS_WWAN_DEVICE_CAPS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uStatus;
  /* 0x0008 */ struct _WWAN_DEVICE_CAPS DeviceCaps;
} NDIS_WWAN_DEVICE_CAPS, *PNDIS_WWAN_DEVICE_CAPS; /* size: 0x0160 */

typedef struct _NDIS_802_11_TEST
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Type;
  union
  {
    /* 0x0008 */ struct _NDIS_802_11_AUTHENTICATION_EVENT AuthenticationEvent;
    struct
    {
      /* 0x0008 */ long RssiTrigger;
      /* 0x000c */ long __PADDING__[4];
    }; /* size: 0x0014 */
  }; /* size: 0x0014 */
} NDIS_802_11_TEST, *PNDIS_802_11_TEST; /* size: 0x001c */

typedef struct _NDIS_GLOBAL_TRIAGE_BLOCK
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned short Revision;
  /* 0x0006 */ unsigned short Size;
  /* 0x0008 */ unsigned short MiniportBlockSize;
  /* 0x000a */ unsigned short MiniportAdapterContextOffset;
  /* 0x000c */ unsigned short AdapterInstanceNameOffset;
  /* 0x000e */ unsigned short MiniportLowestFilterOffset;
  /* 0x0010 */ unsigned short MiniportOpenQueueOffset;
  /* 0x0012 */ unsigned short MiniportDriverHandleOffset;
  /* 0x0014 */ unsigned short MiniportPendingOidOffset;
  /* 0x0016 */ unsigned short MiniportSymbolicLinkOffset;
  /* 0x0018 */ unsigned short MDriverBlockSize;
  /* 0x001a */ unsigned short MiniportServiceNameOffset;
  /* 0x001c */ unsigned short MiniportImageNameOffset;
  /* 0x001e */ unsigned short FilterBlockSize;
  /* 0x0020 */ unsigned short FilterDriverOffset;
  /* 0x0022 */ unsigned short FilterModuleContextOffset;
  /* 0x0024 */ unsigned short FilterHigherFilterOffset;
  /* 0x0026 */ unsigned short FilterFriendlyNameOffset;
  /* 0x0028 */ unsigned short FilterPendingOidOffset;
  /* 0x002a */ unsigned short FilterMiniportOffset;
  /* 0x002c */ unsigned short FilterDriverBlockSize;
  /* 0x002e */ unsigned short FilterDriverFriendlyNameOffset;
  /* 0x0030 */ unsigned short FilterServiceNameOffset;
  /* 0x0032 */ unsigned short FilterImageNameOffset;
  /* 0x0034 */ unsigned short OpenBlockSize;
  /* 0x0036 */ unsigned short ProtocolHandleOffset;
  /* 0x0038 */ unsigned short ProtocolBindingContextOffset;
  /* 0x003a */ unsigned short MiniportNextOpenOffset;
  /* 0x003c */ unsigned short OpenMiniportOffset;
  /* 0x003e */ unsigned short ProtocolBlockSize;
  /* 0x0040 */ unsigned short ProtocolNameOffset;
  /* 0x0042 */ unsigned short ProtocolImageNameOffset;
  /* 0x0044 */ unsigned short NBLPoolListOffset;
  /* 0x0046 */ unsigned short AllocatedListOffset;
  /* 0x0048 */ unsigned short OwnerHandleOffset;
  /* 0x004a */ unsigned short LookasideListOffset;
  /* 0x004c */ unsigned short EntryLinkageOffset;
  /* 0x004e */ unsigned short EntryHeaderSize;
  /* 0x0050 */ unsigned short LookasideListSize;
  /* 0x0052 */ unsigned short SListHeadOffset;
  /* 0x0054 */ unsigned short BackupSListHeadOffset;
  /* 0x0056 */ unsigned short NblSize;
  /* 0x0058 */ unsigned short NblCurrentOwnerOffset;
  /* 0x005a */ unsigned short SourceHandleOffset;
  /* 0x005c */ unsigned short NdisOidRequestSize;
  /* 0x005e */ unsigned short NdisTrackNblOwner;
  /* 0x0060 */ unsigned short MaxNumberOfProcessors;
  /* 0x0062 */ char Padding_196[6];
  /* 0x0068 */ unsigned __int64 GlobalNetBufferListPoolList;
  /* 0x0070 */ unsigned __int64 BugcheckMiniport;
  /* 0x0078 */ unsigned __int64 PendingNBL[32];
  /* 0x0178 */ unsigned short PendingNBLCount[32];
  /* 0x01b8 */ unsigned short NblTrackerContextOffset;
  /* 0x01ba */ unsigned short MiniportPnPEventLogOffset;
  /* 0x01bc */ unsigned short MiniportSelectiveSuspendOffset;
  /* 0x01be */ unsigned short MiniportSelectiveSuspendSize;
  /* 0x01c0 */ unsigned short MiniportAoAcOffset;
  /* 0x01c2 */ unsigned short MiniportAoAcSize;
  struct
  {
    /* 0x01c4 */ unsigned short NumProtocolsOffset;
    /* 0x01c6 */ unsigned short ProtocolListOffset;
    /* 0x01c8 */ unsigned short NumFiltersOffset;
    /* 0x01ca */ unsigned short FilterListOffset;
  } /* size: 0x0008 */ MiniportBlockBindings;
  struct
  {
    /* 0x01cc */ unsigned short Size;
    /* 0x01ce */ unsigned short BindStateOffset;
    /* 0x01d0 */ unsigned short BindDriverOffset;
    /* 0x01d2 */ unsigned short BindDriverSize;
  } /* size: 0x0008 */ BindProtocolLink;
  struct
  {
    /* 0x01d4 */ unsigned short Size;
    /* 0x01d6 */ unsigned short BindStateOffset;
    /* 0x01d8 */ unsigned short BindDriverOffset;
    /* 0x01da */ unsigned short BindDriverSize;
  } /* size: 0x0008 */ BindFilterLink;
  struct
  {
    /* 0x01dc */ unsigned short NumContextsOffset;
    /* 0x01de */ unsigned short ContextListOffset;
  } /* size: 0x0004 */ BindState;
  struct
  {
    /* 0x01e0 */ unsigned short Size;
    /* 0x01e2 */ unsigned short NumEntriesOffset;
    /* 0x01e4 */ unsigned short EntrySizeOffset;
  } /* size: 0x0006 */ NdisEventLog;
  /* 0x01e6 */ unsigned short MiniportHookAdapterHandleOffset;
  /* 0x01e8 */ unsigned short MDriverHookDriverHandleOffset;
  /* 0x01ea */ unsigned short MDriverHookDriverTypeOffset;
  /* 0x01ec */ unsigned short MDriverHookRegisteredOffset;
  /* 0x01ee */ unsigned short NblTrackerSize;
} NDIS_GLOBAL_TRIAGE_BLOCK, *PNDIS_GLOBAL_TRIAGE_BLOCK; /* size: 0x01f0 */

typedef struct _NDIS_GFT_COUNTER_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
  /* 0x0010 */ enum _NDIS_GFT_COUNTER_TYPE CounterType;
  /* 0x0014 */ unsigned long CounterIdStart;
  /* 0x0018 */ unsigned long NumCounters;
  /* 0x001c */ unsigned long UpdatePeriod;
  union
  {
    union
    {
      /* 0x0020 */ volatile struct _NDIS_GFT_PACKET_COUNTER_VALUE* PacketCounters;
      /* 0x0020 */ volatile struct _NDIS_GFT_BYTE_COUNTER_VALUE* ByteCounters;
      /* 0x0020 */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE* PacketByteCounters;
      /* 0x0020 */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE_AND_STATE* PacketByteCountersAndState;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ CounterValuesBufferStart;
} NDIS_GFT_COUNTER_PARAMETERS, *PNDIS_GFT_COUNTER_PARAMETERS; /* size: 0x0024 */

typedef struct _NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EnabledFilterTypes;
  /* 0x000c */ unsigned long EnabledQueueTypes;
} NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS, *PNDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS; /* size: 0x0010 */

typedef struct _NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ void* OffloadHandle;
    } /* size: 0x0004 */ Transmit;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long SaDeleteReq : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long CryptoDone : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long NextCryptoDone : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long Reserved : 13; /* bit position: 3 */
        /* 0x0000 */ unsigned long CryptoStatus : 16; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ Receive;
  }; /* size: 0x0004 */
} NDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO, *PNDIS_IPSEC_OFFLOAD_V2_NET_BUFFER_LIST_INFO; /* size: 0x0004 */

typedef struct _MEDIA_SPECIFIC_INFORMATION
{
  /* 0x0000 */ unsigned int NextEntryOffset;
  /* 0x0004 */ enum _NDIS_CLASS_ID ClassId;
  /* 0x0008 */ unsigned int Size;
  /* 0x000c */ unsigned char ClassInformation[1];
  /* 0x000d */ char __PADDING__[3];
} MEDIA_SPECIFIC_INFORMATION, *PMEDIA_SPECIFIC_INFORMATION; /* size: 0x0010 */

typedef struct _WWAN_DRIVER_CAPS
{
  /* 0x0000 */ unsigned long ulMajorVersion;
  /* 0x0004 */ unsigned long ulMinorVersion;
  /* 0x0008 */ unsigned long ulDriverCaps;
} WWAN_DRIVER_CAPS, *PWWAN_DRIVER_CAPS; /* size: 0x000c */

typedef struct _NDIS_WWAN_DRIVER_CAPS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ struct _WWAN_DRIVER_CAPS DriverCaps;
} NDIS_WWAN_DRIVER_CAPS, *PNDIS_WWAN_DRIVER_CAPS; /* size: 0x0010 */

struct NDIS_PD_FILTER_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _NDIS_NET_BUFFER_LIST_FILTERING_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short FilterId;
      union
      {
        union
        {
          /* 0x0002 */ unsigned short QueueId;
          /* 0x0002 */ unsigned short VPortId;
        }; /* size: 0x0002 */
      } /* size: 0x0002 */ QueueVPortInfo;
    } /* size: 0x0004 */ FilteringInfo;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0004 */
} NDIS_NET_BUFFER_LIST_FILTERING_INFO, *PNDIS_NET_BUFFER_LIST_FILTERING_INFO; /* size: 0x0004 */

typedef struct _NDIS_STACK_TRACE_TABLE
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned char Allocated;
  /* 0x0005 */ unsigned char Collisions;
  /* 0x0006 */ unsigned char DroppedStacks;
  /* 0x0007 */ unsigned char NumStackFrames;
  /* 0x0008 */ struct _RTL_DYNAMIC_HASH_TABLE HashTable;
  /* 0x002c */ unsigned long AllocationFailures;
} NDIS_STACK_TRACE_TABLE, *PNDIS_STACK_TRACE_TABLE; /* size: 0x0030 */

struct DOT11_PORT_STATE_NOTIFICATION
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned char PeerMac[6];
  /* 0x000a */ unsigned char bOpen;
  /* 0x000b */ char __PADDING__[1];
}; /* size: 0x000c */

typedef struct _NDIS_NET_BUFFER_LIST_8021Q_INFO
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int UserPriority : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned int CanonicalFormatId : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int VlanId : 12; /* bit position: 4 */
        /* 0x0000 */ unsigned int Reserved : 16; /* bit position: 16 */
      }; /* bitfield */
    } /* size: 0x0004 */ TagHeader;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int UserPriority : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned int CanonicalFormatId : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int VlanId : 12; /* bit position: 4 */
        /* 0x0000 */ unsigned int WMMInfo : 4; /* bit position: 16 */
        /* 0x0000 */ unsigned int Reserved : 12; /* bit position: 20 */
      }; /* bitfield */
    } /* size: 0x0004 */ WLanTagHeader;
    /* 0x0000 */ void* Value;
  }; /* size: 0x0004 */
} NDIS_NET_BUFFER_LIST_8021Q_INFO, *PNDIS_NET_BUFFER_LIST_8021Q_INFO; /* size: 0x0004 */

class Rtl::KArray<void *,1>::iterator;

typedef struct __vc_attributes::moduleAttribute
{
  /* 0x0000 */ enum __vc_attributes::moduleAttribute::type_e type;
  /* 0x0004 */ const char* name;
  /* 0x0008 */ const char* version;
  /* 0x000c */ const char* uuid;
  /* 0x0010 */ int lcid;
  /* 0x0014 */ BOOL control;
  /* 0x0015 */ char Padding_197[3];
  /* 0x0018 */ const char* helpstring;
  /* 0x001c */ int helpstringcontext;
  /* 0x0020 */ const char* helpstringdll;
  /* 0x0024 */ const char* helpfile;
  /* 0x0028 */ int helpcontext;
  /* 0x002c */ BOOL hidden;
  /* 0x002d */ BOOL restricted;
  /* 0x002e */ char Padding_198[2];
  /* 0x0030 */ const char* custom;
  /* 0x0034 */ const char* resource_name;
} _vc_attributes::moduleAttribute, *P_vc_attributes::moduleAttribute; /* size: 0x0038 */

typedef struct _NDIS_802_11_NETWORK_TYPE_LIST
{
  /* 0x0000 */ unsigned long NumberOfItems;
  /* 0x0004 */ enum _NDIS_802_11_NETWORK_TYPE NetworkType[1];
} NDIS_802_11_NETWORK_TYPE_LIST, *PNDIS_802_11_NETWORK_TYPE_LIST; /* size: 0x0008 */

typedef struct _NDIS_GFT_EXACT_MATCH_FLOW_ENTRY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  /* 0x000c */ unsigned long VPortId;
  /* 0x0010 */ unsigned long MatchProfileId;
  /* 0x0014 */ int MatchRequestStatus;
  /* 0x0018 */ int ActionRequestStatus;
  /* 0x001c */ unsigned long CounterFlags;
  /* 0x0020 */ enum _NDIS_GFT_COUNTER_UPDATE_FREQUENCY CounterUpdateFrequency;
  /* 0x0024 */ enum _NDIS_GFT_COUNTER_TYPE CounterType;
  /* 0x0028 */ unsigned long UpdatePeriod;
  union
  {
    union
    {
      /* 0x002c */ volatile struct _NDIS_GFT_PACKET_COUNTER_VALUE* PacketCounterAddress;
      /* 0x002c */ volatile struct _NDIS_GFT_BYTE_COUNTER_VALUE* ByteCounterAddress;
      /* 0x002c */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE* PacketByteCounterAddress;
      /* 0x002c */ volatile struct _NDIS_GFT_PACKET_BYTE_COUNTER_VALUE_AND_STATE* PacketByteCounterAndStateAddress;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ CounterValueBuffer;
  /* 0x0030 */ unsigned long HeaderTranspositionProfileId;
  /* 0x0034 */ unsigned long RedirectionVPortId;
  /* 0x0038 */ unsigned long TtlIsOneRedirectionVPortId;
  /* 0x003c */ unsigned long NumCounterObjects;
  /* 0x0040 */ unsigned long CounterIdArray[8];
  /* 0x0060 */ enum _NDIS_GFT_FLOW_ENTRY_CACHE_HINT CacheHint;
  /* 0x0064 */ unsigned long ClientFlowEntryId;
  /* 0x0068 */ unsigned long ProviderFlowEntryId;
  /* 0x006c */ enum _NDIS_GFT_FLOW_ENTRY_STATE FlowEntryState;
  /* 0x0070 */ unsigned long TcpSequenceNumber;
  /* 0x0074 */ unsigned long HeaderGroupExactMatchArrayOffset;
  /* 0x0078 */ unsigned long HeaderGroupExactMatchArrayNumElements;
  /* 0x007c */ unsigned long HeaderGroupExactMatchArrayElementSize;
  /* 0x0080 */ unsigned long HeaderGroupTranspositionArrayOffset;
  /* 0x0084 */ unsigned long HeaderGroupTranspositionArrayNumElements;
  /* 0x0088 */ unsigned long HeaderGroupTranspositionArrayElementSize;
  /* 0x008c */ unsigned long CustomActionOffset;
} NDIS_GFT_EXACT_MATCH_FLOW_ENTRY, *PNDIS_GFT_EXACT_MATCH_FLOW_ENTRY; /* size: 0x0090 */

typedef struct _NDIS_802_11_ASSOCIATION_INFORMATION
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned short AvailableRequestFixedIEs;
  /* 0x0006 */ struct _NDIS_802_11_AI_REQFI RequestFixedIEs;
  /* 0x0010 */ unsigned long RequestIELength;
  /* 0x0014 */ unsigned long OffsetRequestIEs;
  /* 0x0018 */ unsigned short AvailableResponseFixedIEs;
  /* 0x001a */ struct _NDIS_802_11_AI_RESFI ResponseFixedIEs;
  /* 0x0020 */ unsigned long ResponseIELength;
  /* 0x0024 */ unsigned long OffsetResponseIEs;
} NDIS_802_11_ASSOCIATION_INFORMATION, *PNDIS_802_11_ASSOCIATION_INFORMATION; /* size: 0x0028 */

typedef struct _NDIS_802_11_REMOVE_KEY
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long KeyIndex;
  /* 0x0008 */ unsigned char BSSID[6];
  /* 0x000e */ char __PADDING__[2];
} NDIS_802_11_REMOVE_KEY, *PNDIS_802_11_REMOVE_KEY; /* size: 0x0010 */

struct DOT11_AUTH_CIPHER_PAIR_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ struct DOT11_AUTH_CIPHER_PAIR AuthCipherPairs[1];
}; /* size: 0x0014 */

typedef struct _PMKID_CANDIDATE
{
  /* 0x0000 */ unsigned char BSSID[6];
  /* 0x0006 */ char Padding_199[2];
  /* 0x0008 */ unsigned long Flags;
} PMKID_CANDIDATE, *PPMKID_CANDIDATE; /* size: 0x000c */

typedef struct _NDIS_802_11_PMKID_CANDIDATE_LIST
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long NumCandidates;
  /* 0x0008 */ struct _PMKID_CANDIDATE CandidateList[1];
} NDIS_802_11_PMKID_CANDIDATE_LIST, *PNDIS_802_11_PMKID_CANDIDATE_LIST; /* size: 0x0014 */

typedef struct _DOT11_AVAILABLE_CHANNEL_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ unsigned long uChannelNumber[1];
} DOT11_AVAILABLE_CHANNEL_LIST, *PDOT11_AVAILABLE_CHANNEL_LIST; /* size: 0x0010 */

typedef struct _NDIS_PROTOCOL_CO_CHARACTERISTICS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* CoStatusHandlerEx /* function */;
  /* 0x000c */ void* CoAfRegisterNotifyHandler /* function */;
  /* 0x0010 */ void* CoReceiveNetBufferListsHandler /* function */;
  /* 0x0014 */ void* CoSendNetBufferListsCompleteHandler /* function */;
} NDIS_PROTOCOL_CO_CHARACTERISTICS, *PNDIS_PROTOCOL_CO_CHARACTERISTICS; /* size: 0x0018 */

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD
{
  union
  {
    /* 0x0000 */ enum _NDIS_MAC_HEADER_FIELD MacHeaderField;
    /* 0x0000 */ enum _NDIS_ARP_HEADER_FIELD ArpHeaderField;
    /* 0x0000 */ enum _NDIS_IPV4_HEADER_FIELD IPv4HeaderField;
    /* 0x0000 */ enum _NDIS_IPV6_HEADER_FIELD IPv6HeaderField;
    /* 0x0000 */ enum _NDIS_UDP_HEADER_FIELD UdpHeaderField;
  }; /* size: 0x0004 */
} NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD, *PNDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD; /* size: 0x0004 */

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE
{
  union
  {
    /* 0x0000 */ unsigned char FieldByteValue;
    /* 0x0000 */ unsigned short FieldShortValue;
    /* 0x0000 */ unsigned long FieldLongValue;
    /* 0x0000 */ unsigned __int64 FieldLong64Value;
    /* 0x0000 */ unsigned char FieldByteArrayValue[16];
  }; /* size: 0x0010 */
} NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE, *PNDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE; /* size: 0x0010 */

typedef union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE
{
  union
  {
    /* 0x0000 */ unsigned char ResultByteValue;
    /* 0x0000 */ unsigned short ResultShortValue;
    /* 0x0000 */ unsigned long ResultLongValue;
    /* 0x0000 */ unsigned __int64 ResultLong64Value;
    /* 0x0000 */ unsigned char ResultByteArrayValue[16];
  }; /* size: 0x0010 */
} NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE, *PNDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE; /* size: 0x0010 */

typedef struct _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _NDIS_FRAME_HEADER FrameHeader;
  /* 0x000c */ enum _NDIS_RECEIVE_FILTER_TEST ReceiveFilterTest;
  /* 0x0010 */ union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_HEADER_FIELD HeaderField;
  /* 0x0014 */ long Padding_200;
  /* 0x0018 */ union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_FIELD_VALUE FieldValue;
  /* 0x0028 */ union _NDIS_RECEIVE_FILTER_FIELD_PARAMETERS::_RESULT_VALUE ResultValue;
} NDIS_RECEIVE_FILTER_FIELD_PARAMETERS, *PNDIS_RECEIVE_FILTER_FIELD_PARAMETERS; /* size: 0x0038 */

typedef struct _NDIS_WAN_CO_GET_STATS_INFO
{
  /* 0x0000 */ unsigned long BytesSent;
  /* 0x0004 */ unsigned long BytesRcvd;
  /* 0x0008 */ unsigned long FramesSent;
  /* 0x000c */ unsigned long FramesRcvd;
  /* 0x0010 */ unsigned long CRCErrors;
  /* 0x0014 */ unsigned long TimeoutErrors;
  /* 0x0018 */ unsigned long AlignmentErrors;
  /* 0x001c */ unsigned long SerialOverrunErrors;
  /* 0x0020 */ unsigned long FramingErrors;
  /* 0x0024 */ unsigned long BufferOverrunErrors;
  /* 0x0028 */ unsigned long BytesTransmittedUncompressed;
  /* 0x002c */ unsigned long BytesReceivedUncompressed;
  /* 0x0030 */ unsigned long BytesTransmittedCompressed;
  /* 0x0034 */ unsigned long BytesReceivedCompressed;
  /* 0x0038 */ unsigned long TunnelPacketsRecieved;
  /* 0x003c */ unsigned long TunnelRecievePacketsPending;
  /* 0x0040 */ unsigned long TunnelPacketsIndicatedUp;
  /* 0x0044 */ unsigned long TunnelRecievePacketsRejected;
  /* 0x0048 */ unsigned long TunnelPacketsSent;
  /* 0x004c */ unsigned long TunnelPacketsSentComplete;
  /* 0x0050 */ unsigned long TunnelTransmitPacketsPending;
  /* 0x0054 */ unsigned long TunnelPacketsTransmitError;
  /* 0x0058 */ unsigned long TunnelPacketsSentError;
  /* 0x005c */ unsigned long TunnelTransmitPacketsRejected;
  /* 0x0060 */ unsigned long TunnelAcksSent;
  /* 0x0064 */ unsigned long TunnelAcksSentComplete;
  /* 0x0068 */ unsigned long TunnelGeneric1;
  /* 0x006c */ unsigned long TunnelGeneric2;
  /* 0x0070 */ unsigned long TunnelGeneric3;
} NDIS_WAN_CO_GET_STATS_INFO, *PNDIS_WAN_CO_GET_STATS_INFO; /* size: 0x0074 */

typedef struct _NDIS_PKT_POOL_HDR
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0008 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0010 */ union _SLIST_HEADER FreeList;
  /* 0x0018 */ enum _POOL_BLOCK_TYPE State;
  /* 0x001c */ long __PADDING__[1];
} NDIS_PKT_POOL_HDR, *PNDIS_PKT_POOL_HDR; /* size: 0x0020 */

struct DOT11_CIPHER_ALGORITHM_LIST
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long uNumOfEntries;
  /* 0x0008 */ unsigned long uTotalNumOfEntries;
  /* 0x000c */ enum _DOT11_CIPHER_ALGORITHM AlgorithmIds[1];
}; /* size: 0x0010 */

typedef struct _NDIS_WAN_CO_INFO
{
  /* 0x0000 */ unsigned long MaxFrameSize;
  /* 0x0004 */ unsigned long MaxSendWindow;
  /* 0x0008 */ unsigned long FramingBits;
  /* 0x000c */ unsigned long DesiredACCM;
} NDIS_WAN_CO_INFO, *PNDIS_WAN_CO_INFO; /* size: 0x0010 */

typedef struct _NDIS_WAN_CO_SET_COMP_INFO
{
  /* 0x0000 */ struct _NDIS_WAN_COMPRESS_INFO SendCapabilities;
  /* 0x0034 */ struct _NDIS_WAN_COMPRESS_INFO RecvCapabilities;
} NDIS_WAN_CO_SET_COMP_INFO, *PNDIS_WAN_CO_SET_COMP_INFO; /* size: 0x0068 */

typedef struct _NDIS_MSIX_CONFIG_PARAMETERS
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ enum _NDIS_MSIX_TABLE_CONFIG ConfigOperation;
  /* 0x0008 */ unsigned long TableEntry;
  /* 0x000c */ unsigned long MessageNumber;
} NDIS_MSIX_CONFIG_PARAMETERS, *PNDIS_MSIX_CONFIG_PARAMETERS; /* size: 0x0010 */

typedef struct _NDIS_GFT_COUNTER_VALUE_ARRAY
{
  /* 0x0000 */ struct _NDIS_OBJECT_HEADER Header;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long TableId;
  union
  {
    union
    {
      /* 0x000c */ unsigned long FlowEntryId;
      /* 0x000c */ unsigned long CounterId;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ StartId;
  /* 0x0010 */ unsigned long NumCounters;
  /* 0x0014 */ unsigned long CounterValueArrayOffset;
  /* 0x0018 */ unsigned long CounterValueArrayNumElements;
  /* 0x001c */ unsigned long CounterValueArrayElementSize;
} NDIS_GFT_COUNTER_VALUE_ARRAY, *PNDIS_GFT_COUNTER_VALUE_ARRAY; /* size: 0x0020 */

/*
??$AddBindingToSet@UNDIS_BIND_PROTOCOL_LINK@@@BindRegistry@Ndis@@YG_NPAU_NDIS_MINIPORT_BLOCK@@AAV?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@IAAV?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@@Z
??$CopyPartialStringToBuffer@$0EA@@@YGXAAY0EA@_WPBU_UNICODE_STRING@@@Z
??$MakeExtendedPoolPtr@U_NDIS_PM_PACKET_PATTERN@@@@YG?AV?$unique_ptr@U_NDIS_PM_PACKET_PATTERN@@U?$KFreePool@U_NDIS_PM_PACKET_PATTERN@@@@@wistd@@KKPAK@Z
??$MakeExtendedPoolPtr@U_NDIS_PM_WOL_PATTERN@@@@YG?AV?$unique_ptr@U_NDIS_PM_WOL_PATTERN@@U?$KFreePool@U_NDIS_PM_WOL_PATTERN@@@@@wistd@@KKPAK@Z
??$MakePoolPtr@U_NDIS_WOL_XLATION_CONTEXT@@@@YG?AV?$unique_ptr@U_NDIS_WOL_XLATION_CONTEXT@@U?$KFreePool@U_NDIS_WOL_XLATION_CONTEXT@@@@@wistd@@K@Z
??$MakeSizedPoolPtr@U_MDL@@@@YG?AV?$unique_ptr@U_MDL@@U?$KFreePool@U_MDL@@@@@wistd@@KI@Z
??$MakeSizedPoolPtr@U_NDIS_PM_PACKET_PATTERN@@@@YG?AV?$unique_ptr@U_NDIS_PM_PACKET_PATTERN@@U?$KFreePool@U_NDIS_PM_PACKET_PATTERN@@@@@wistd@@KI@Z
??$MakeSizedPoolPtr@U_NDIS_PM_WOL_PATTERN@@@@YG?AV?$unique_ptr@U_NDIS_PM_WOL_PATTERN@@U?$KFreePool@U_NDIS_PM_WOL_PATTERN@@@@@wistd@@KI@Z
??$MakeSizedPoolPtr@U_UNICODE_STRING@@@@YG?AV?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@KI@Z
??$MakeSizedPoolPtr@_W@@YG?AV?$unique_ptr@_WU?$KFreePool@_W@@@wistd@@KI@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByRef@$07@@U?$_tlgWrapSz@_W@@U?$_tlgWrapperByVal@$00@@U2@U2@U?$_tlgWrapperByVal@$03@@U2@U2@U2@U2@U5@U5@U5@U2@U5@U5@U5@U2@U5@U5@U5@U2@U5@U5@U5@U2@U5@U5@U5@U2@U5@U5@U2@U5@U5@U2@U5@U5@U2@U5@U5@U2@U5@U5@U2@U5@U5@U2@U5@U5@U2@U5@U5@U2@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByRef@$07@@ABU?$_tlgWrapSz@_W@@ABU?$_tlgWrapperByVal@$00@@44ABU?$_tlgWrapperByVal@$03@@444477747774777477747774774774774774774774774774@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByRef@$07@@U?$_tlgWrapperByVal@$00@@U2@U2@U2@U2@U2@U2@U2@U2@U2@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByRef@$07@@ABU?$_tlgWrapperByVal@$00@@444444444@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$00@@U2@U2@U2@U?$_tlgWrapperByVal@$03@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$00@@444ABU?$_tlgWrapperByVal@$03@@@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$00@@U2@U2@U2@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapperByVal@$01@@U2@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$00@@444ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapperByVal@$01@@4@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$00@@U?$_tlgWrapperByVal@$03@@U3@U3@U3@U3@U3@U3@U3@U?$_tlgWrapperByRef@$07@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$00@@ABU?$_tlgWrapperByVal@$03@@5555555ABU?$_tlgWrapperByRef@$07@@@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$03@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$03@@@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$03@@U2@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$03@@4@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$03@@U2@U2@U2@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$03@@444@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$03@@U2@U2@U2@U2@U2@U?$_tlgWrapperByVal@$00@@U3@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$03@@44444ABU?$_tlgWrapperByVal@$00@@5@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$03@@U2@U2@U2@U_tlgWrapperPtrSize@@U3@U3@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$03@@444ABU_tlgWrapperPtrSize@@55@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapperByRef@$07@@U2@U3@U3@U3@U2@U3@U2@U2@U3@U?$_tlgWrapBuffer@U_UNICODE_STRING@@@@U3@U3@U3@U3@U3@U3@U3@U3@U3@U3@U3@U3@U_tlgWrapperPtrSize@@U5@U5@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapperByRef@$07@@455545445ABU?$_tlgWrapBuffer@U_UNICODE_STRING@@@@555555555555ABU_tlgWrapperPtrSize@@77@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapperByVal@$00@@U3@U3@U3@U3@U2@U3@U3@U3@U3@U3@U2@U3@U3@U3@U3@U2@U3@U3@U3@U3@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapperByVal@$00@@55554555554555545555@Z
??$Write@U?$_tlgWrapperByVal@$03@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@@Z
??$Write@U?$_tlgWrapperByVal@$03@@U1@U?$_tlgWrapperByRef@$0BA@@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@3ABU?$_tlgWrapperByRef@$0BA@@@@Z
??$Write@U?$_tlgWrapperByVal@$03@@U1@U?$_tlgWrapperByRef@$0BA@@@U1@U1@U?$_tlgWrapperByVal@$00@@U3@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@3ABU?$_tlgWrapperByRef@$0BA@@@33ABU?$_tlgWrapperByVal@$00@@5@Z
??$Write@U?$_tlgWrapperByVal@$03@@U1@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByRef@$07@@U?$_tlgWrapSz@_W@@U1@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@3ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByRef@$07@@ABU?$_tlgWrapSz@_W@@3@Z
??$Write@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapBuffer@U_UNICODE_STRING@@@@U?$_tlgWrapperByRef@$07@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapBuffer@U_UNICODE_STRING@@@@ABU?$_tlgWrapperByRef@$07@@@Z
??$Write@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapperByRef@$0BA@@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapperByRef@$0BA@@@@Z
??$Write@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapperByRef@$0BA@@@U1@U1@U?$_tlgWrapperByVal@$00@@U3@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapperByRef@$0BA@@@33ABU?$_tlgWrapperByVal@$00@@5@Z
??$Write@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapperByRef@$0BA@@@U_tlgWrapperBinary@@U3@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapperByRef@$0BA@@@ABU_tlgWrapperBinary@@5@Z
??$Write@U?$_tlgWrapperByVal@$03@@U?$_tlgWrapperByVal@$00@@U2@U?$_tlgWrapperByRef@$0BA@@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU?$_tlgWrapperByVal@$00@@4ABU?$_tlgWrapperByRef@$0BA@@@@Z
??$Write@U?$_tlgWrapperByVal@$03@@U_tlgWrapperBinary@@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU_tlgWrapperBinary@@@Z
??$Write@U?$_tlgWrapperByVal@$03@@U_tlgWrapperBinary@@U2@U1@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU_tlgWrapperBinary@@43@Z
??$Write@U?$_tlgWrapperByVal@$03@@U_tlgWrapperBinary@@U2@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByRef@$07@@U?$_tlgWrapSz@_W@@U1@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByVal@$03@@ABU_tlgWrapperBinary@@4ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByRef@$07@@ABU?$_tlgWrapSz@_W@@3@Z
??$WritePointerRelease@U_NDIS_PCW_DATA_BLOCK@@@mem@@YGXPAPAU_NDIS_PCW_DATA_BLOCK@@PAU1@@Z
??$_tlgCreate1Sz@_W@@YGXPAU_EVENT_DATA_DESCRIPTOR@@PB_W@Z
??$allocate@$$V@?$KRef@UNDIS_BIND_FILTER_DRIVER@@@@QAE_NXZ
??$allocate@$$V@?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@QAE_NXZ
??$attach_to_smart_pointer@V?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@X@wil@@YGXAAV?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@PAU_UNICODE_STRING@@@Z
??$attach_to_smart_pointer@V?$unique_ptr@_WU?$KFreePool@_W@@@wistd@@X@wil@@YGXAAV?$unique_ptr@_WU?$KFreePool@_W@@@wistd@@PA_W@Z
??$invoke@P6GJPAX@ZAAPAX@wistd@@YGJ$$QAP6GJPAX@ZAAPAX@Z
??$invoke@P6GXPAUNDISWATCHDOG__@@@ZAAPAU1@@wistd@@YGX$$QAP6GXPAUNDISWATCHDOG__@@@ZAAPAU1@@Z
??$invoke@P6GXPAX@ZAAPAX@wistd@@YGX$$QAP6GXPAX@ZAAPAX@Z
??$netsetupEnumerateObjectIds@P6GJABU_GUID@@@Z@@YGJW4_NETSETUP_OBJECT_TYPE@@W4NetSetupStoreType@@P6GJABU_GUID@@@Z@Z
??$out_param@V?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@@wil@@YG?AU?$out_param_t@V?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@@details@0@AAV?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@@Z
??$out_param@V?$unique_ptr@_WU?$KFreePool@_W@@@wistd@@@wil@@YG?AU?$out_param_t@V?$unique_ptr@_WU?$KFreePool@_W@@@wistd@@@details@0@AAV?$unique_ptr@_WU?$KFreePool@_W@@@wistd@@@Z
??$reset@PAE@?$unique_ptr@$$BY0A@EU?$default_delete@$$BY0A@E@wistd@@@wistd@@QAEXPAE@Z
??$swprintf_s@$0CI@@@YAHAAY0CI@_WPB_WZZ
??0?$KHashTableBase@$00@Rtl@@QAE@I@Z
??0?$KRundownPtr@$$CBUNDIS_MINIPORT_HOOK_PROVIDER_INFO@@@@QAE@PBUNDIS_MINIPORT_HOOK_PROVIDER_INFO@@AAVKRundown@@@Z
??0BindEngine@Ndis@@QAE@XZ
??0BindStack@Ndis@@QAE@XZ
??0BindState@Ndis@@QAE@XZ
??0KPushLock@@QAE@XZ
??0LwfBindProperties@@QAE@$$QAU0@@Z
??0MINIPORT_HOOK_DRIVER@@QAE@XZ
??0NDIS_PCW_CONTEXT@@QAE@PAU_NDIS_MINIPORT_BLOCK@@@Z
??0NDIS_RESTART_INFORMATION@@QAE@XZ
??0NdisBindBuilderGlobal@@QAE@XZ
??0NdisNetworkInterfacePersistedState@@QAE@XZ
??0NdisWatchdogState@@QAE@XZ
??0NetSetupPropertyBag@@QAE@AAVKRegKey@@@Z
??0ProtocolBindProperties@@QAE@$$QAU0@@Z
??0_NDIS_MINIPORT_BLOCK@@QAE@XZ
??1?$KStringAtomTableBase@$00@Rtl@@QAE@XZ
??1?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@QAE@XZ
??1?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@QAE@XZ
??1BindEngine@Ndis@@QAE@XZ
??1BindState@Ndis@@QAE@XZ
??1KLockHolder@@QAE@XZ
??1KLockThisExclusive@@QAE@XZ
??1KRegKey@@QAE@XZ
??1MINIPORT_HOOK_DRIVER@@QAE@XZ
??1MiniportSpinLock@@QAE@XZ
??1NDIS_BIND_LINK_BASE@@QAE@XZ
??1NDIS_MINIPORT_CREATION_CONFIG@@QAE@XZ
??1NDIS_RESTART_INFORMATION@@QAE@XZ
??1NdisBindBuilderGlobal@@QAE@XZ
??1NdisWatchdogState@@QAE@XZ
??1ProtocolBindProperties@@QAE@XZ
??1_NDIS_MINIPORT_BLOCK@@QAE@XZ
??3@YAXPAX@Z
??4?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@QAEAAV0@$$QAV0@@Z
??A?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@QAEAAV?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@I@Z
??R?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@QBEXPAUNDIS_BIND_FILTER_LINK@@@Z
??R?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@QBEXPAUNDIS_BIND_PROTOCOL_LINK@@@Z
??_EMINIPORT_HOOK_DRIVER@@QAEPAXI@Z
??_I@YGXPAXIIP6EX0@Z@Z
??_V@YAXPAX@Z
?Acquire@?$KNeutralLock@W4NDIS_MINIPORT_POLICY_OWNER@@@Rtl@@QAEXW4NDIS_MINIPORT_POLICY_OWNER@@@Z
?AcquireExclusive@KPushLockBase@@QAEXXZ
?AddAces@@YGJPAU_ACL@@EEPAPAU1@@Z
?AddBindContext@BindState@Ndis@@QAE_NPAX@Z
?AllocateAnyBit@IfIndexRange@@QAEJPAK@Z
?AllocateBuckets@?$KHashTableBase@$00@Rtl@@CGPAXKPAX@Z
?Apply@BindRules@Ndis@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ApplyBindChanges@BindEngine@Ndis@@QAEXW4CallRunMode@@_N@Z
?ApplyRules@BindEngine@Ndis@@AAEXXZ
?AtomCompare@?$KStringAtomTableBase@$00@Rtl@@CGKPAU_RTL_HASH_ENTRY@@PAX@Z
?BeginBindOperation@BindEngine@Ndis@@SGXXZ
?BeginPolicyUpdates@BindEngine@Ndis@@QAEXXZ
?BitScanForward64@@YGEPAK_K@Z
?BuildFilterLink@BindStack@Ndis@@AAE?AV?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@PBU_GUID@@K@Z
?BuildProtocolLink@BindStack@Ndis@@AAE?AV?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@AAV?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@@Z
?COMPARTMENTBLOCK_DECREMENT_REF@@YGXPAU_NDIS_IF_COMPARTMENT_BLOCK@@@Z
?CallbackThunk@?$KWorkItemBase@UBindEngine@Ndis@@V?$KWorkItem@UBindEngine@Ndis@@@@@@CGXPAX@Z
?CallbackThunk@?$KWorkItemBase@U_NDIS_PROTOCOL_BLOCK@@V?$KCoalescingWorkItem@U_NDIS_PROTOCOL_BLOCK@@@@@@CGXPAX@Z
?CallbackThunk@?$KWorkItemBase@VMINIPORT_HOOK_DRIVER@@V?$KCoalescingWorkItem@VMINIPORT_HOOK_DRIVER@@@@@@CGXPAX@Z
?CancelTimer@NdisWatchdogState@@QAE_NXZ
?CheckAllDriversRunning@Initmode@Ndis@@YG_NPAU_NDIS_MINIPORT_BLOCK@@@Z
?CheckForDriverLoaded@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?CheckForVBusDependency@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?CheckMissingMandatoryFilter@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?CheckMissingModifyingFilter@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?ClearHeldReadLock@@YGXPAU_NDIS_RW_LOCK@@@Z
?CoalesceFilterAttachDuringBoot@BindRules@Ndis@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUBindStack@2@@Z
?ComputeRoundedAverage@@YG_K_K0@Z
?CreateDeviceDriverSecurityDescriptor@@YGJPAXEEPAU_ACL@@@Z
?CreateDynamicBinding@BindStack@Ndis@@QAEPAUNDIS_BIND_PROTOCOL_LINK@@AAV?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@PAU_NDIS_MINIPORT_BLOCK@@W4Flags@BindSource@2@@Z
?DereferenceWdi@@YGXXZ
?Deregister@MINIPORT_HOOK_DRIVER@@QAEPAXXZ
?DeregisterAsync@MINIPORT_HOOK_DRIVER@@AAEXXZ
?DisableIfNeeded@Initmode@Ndis@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4CallRunMode@@@Z
?DisableMagicPacketKeyword@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?Disarm@NdisWatchdogState@@QAEXXZ
?DispatchPendingWork@BindEngine@Ndis@@AAEXW4CallRunMode@@AAVKLockThisExclusive@@@Z
?DuplicateUnicodeString@Rtl@@YG?AV?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@ABU_UNICODE_STRING@@K@Z
?EndBindOperation@BindEngine@Ndis@@SGXXZ
?EndPolicyUpdates@BindEngine@Ndis@@QAEXXZ
?EthCreateFilter@@YGEIPBEPAPAU_X_FILTER@@@Z
?EthDeleteFilter@@YGXPAU_X_FILTER@@@Z
?EthDeleteFilterOpenAdapter@@YGXPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@@Z
?EthFilterDprIndicateReceive@@YGXPAU_X_FILTER@@PAXPAD1I1II@Z
?EthFilterDprIndicateReceiveComplete@@YGXPAU_X_FILTER@@@Z
?EthIndicateReceive@@YGXPAU_X_FILTER@@PAXPAD1I1II@Z
?EthInitializeFilter@@YGEIPBEPAU_X_FILTER@@@Z
?EthQueryGlobalFilterAddresses@@YGXPAHPAU_X_FILTER@@IPAIPAY05E@Z
?EthQueryOpenFilterAddresses@@YGXPAHPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@IPAIPAY05E@Z
?EtwEx_tidActivityInfoTransfer@@YGK_KPBU_EVENT_DESCRIPTOR@@PBU_GUID@@2E2K@Z
?Feature_ScreenON_NAPS__private_IsEnabledPreCheck@@YGHXZ
?FillDefaultHandlers@MINIPORT_HOOK_DRIVER@@QAEXXZ
?ForEachLink@NDIS_BIND_DRIVER_BASE@@QAEXP6GXPAUNDIS_BIND_LINK_BASE@@@Z@Z
?FreeBit@IfIndexRange@@QAEXK@Z
?FreeBuckets@?$KHashTableBase@$00@Rtl@@CGXPAX0@Z
?GarbageCollectDeadBindings@BindStack@Ndis@@QAEXXZ
?GetActualBindingState@BindState@Ndis@@QAE?AW4BINDING_ENABLED_OR_DISABLED@@XZ
?GetAtom@?$KStringAtomTableBase@$00@Rtl@@QAEPAU_KStringAtom@2@PB_W@Z
?GetBindContext@BindState@Ndis@@QAEPAXXZ
?GetCurrentLink@BindEngine@Ndis@@QBEPAUNDIS_BIND_LINK_BASE@@XZ
?GetElapsedTimeInMilliseconds@KStopwatch@@QBE_KXZ
?GetMiniportFromReqTracker@@YGPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_REQ_TRACKER@@@Z
?GetSubkeyName@KRegKey@@QAEJKAAV?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@@Z
?Grow@IfIndexRange@@AAEJK@Z
?IFBLOCK_DECREMENT_REF@@YGXPAU_NDIS_IF_BLOCK@@W4_NDIS_IF_REFTAG@@@Z
?IFBLOCK_DEREFERENCE_MINIPORT_LINK@@YGXPAU_NDIS_IF_BLOCK@@W4_NDIS_MPIF_REFTAG@@@Z
?IncrementReadConcurrency@@YGXPAUNDIS_VERIFY_RW_LOCK_EX@@@Z
?Initialize@BindEngine@Ndis@@QAEXPAU_NDIS_MINIPORT_BLOCK@@@Z
?Initialize@KPushLockManualConstruct@@QAEXXZ
?Initialize@KString@Rtl@@SGPAU12@PBU_UNICODE_STRING@@@Z
?Initialize@KString@Rtl@@SGPAU12@PB_W@Z
?InitializeNetBuffer@@YGXPAU_NET_BUFFER@@PAXPAU_MDL@@K@Z
?IsAlive@BindState@Ndis@@QBE_NXZ
?IsBlameCandidate@NdisWatchdogState@@QAE_NPAU_KTHREAD@@@Z
?IsEqualGUID@@YGHABU_GUID@@0@Z
?IsIfBlockAvailable@@YG_NABU_GUID@@@Z
?IsOidRequestDirectOid@@YGEK@Z
?IsReadLockAlreadyHeldByCurrentThread@@YGHPAU_NDIS_RW_LOCK@@@Z
?IsReportingEnabled@NdisWatchdogState@@AAE_NXZ
?IsRscSupportedVersion@@YG_NKK@Z
?Iterate@BindEngine@Ndis@@AAE_NXZ
?LinkToDriver@NDIS_BIND_LINK_BASE@@QAEXPAUNDIS_BIND_DRIVER_BASE@@@Z
?MakeOptionalFiltersMandatoryDuringBoot@BindRules@Ndis@@YGXPAUBindStack@2@_N@Z
?MiniportSupportsReceiveThrottle@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?NDISM_SEND_PACKET_STATS@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PACKET@@@Z
?NDIS_ACQUIRE_MINIPORT_SPIN_LOCK@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAE@Z
?NDIS_COUNT_POWER_TRANSITION@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_DEVICE_POWER_STATE@@@Z
?NDIS_FREE_XFER_DATA_PACKET@@YGXPAU_NDIS_PACKET@@@Z
?NDIS_RELEASE_MINIPORT_SPIN_LOCK@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?NDIS_STACK_RESERVED_FROM_PACKET@@YGXPAU_NDIS_PACKET@@PAPAU_NDIS_STACK_RESERVED@@@Z
?NETWORKBLOCK_DECREMENT_REF@@YGXPAU_NDIS_IF_NETWORK_BLOCK@@@Z
?NdisBufferLength@@YGKPAU_MDL@@@Z
?NdisGetVersion640Shim@@YGIXZ
?NdisIMInitializeDeviceInstance@@YGHPAXPAU_UNICODE_STRING@@@Z
?NdisMQueryInformationComplete@@YGXPAXH@Z
?NdisMRemoveMiniportInternal@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MINIPORT_EVENT@@@Z
?NdisMSendResourcesAvailable@@YGXPAX@Z
?NdisMSetInformationComplete@@YGXPAXH@Z
?NdisMSetTimer@@YGXPAU_NDIS_MINIPORT_TIMER@@I@Z
?NdisMTransferDataComplete@@YGXPAXPAU_NDIS_PACKET@@HI@Z
?NdisReadEisaSlotInformation@@YGXPAHPAXPAIPAU_CM_EISA_FUNCTION_INFORMATION@@@Z
?NdisReadEisaSlotInformationEx@@YGXPAHPAXPAIPAPAU_CM_EISA_FUNCTION_INFORMATION@@2@Z
?NdisSend@@YGXPAHPAXPAU_NDIS_PACKET@@@Z
?NdisSetJobObjectCompartmentId@@YGJPAU_EJOB@@I@Z
?NdisTraceLoggingChecksumConfigOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingChecksumHardwareOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingCsStateChange@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_AOAC@@_KPAU_NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS@@PAU_NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS_EX@@PAU_NDIS_MINIPORT_CS_TRAFFIC_STATS@@5@Z
?NdisTraceLoggingDeviceAdded@@YGXPAU_NDIS_IF_BLOCK@@W4_NDIS_TRACEFORMAT_FAILURE_REASON@@PBUNDIS_MINIPORT_CREATION_CONFIG@@JPB_WE@Z
?NdisTraceLoggingDeviceInitialized@@YGXPAU_NDIS_MINIPORT_BLOCK@@ABVKStopwatch@@W4_NDIS_TRACEFORMAT_FAILURE_REASON@@H@Z
?NdisTraceLoggingDeviceRemoved@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_TRACEFORMAT_REMOVAL_REASON@@@Z
?NdisTraceLoggingDeviceStarted@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_TRACEFORMAT_FAILURE_REASON@@J@Z
?NdisTraceLoggingDiscoverOperationalStatus@@YG?AW4_NDIS_TRACEFORMAT_OPERATIONAL_STATUS@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?NdisTraceLoggingGreTaskHardwareOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingGreTaskeConfigOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingLogoFailure@@YGXW4NdisTLLogoFailureReason@@PBU_UNICODE_STRING@@_K@Z
?NdisTraceLoggingLsoV2ConfigOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingLsoV2HardwareOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingMiniportWakeBufferTooLarge@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?NdisTraceLoggingNDKCapabilities@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAT_NDIS_MINIPORT_ADAPTER_ATTRIBUTES@@@Z
?NdisTraceLoggingNicAutoPowerSaver@@YGXPAU_NDIS_MINIPORT_BLOCK@@E_K1K11KPAU_NDIS_NAPS_TELEMETRY_REASON_DATA@@KPAU_NDIS_NAPS_TELEMETRY_OID_DATA@@@Z
?NdisTraceLoggingOffloadConfigRead@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?NdisTraceLoggingOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@1@Z
?NdisTraceLoggingPowerOnStatistics@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?NdisTraceLoggingQosConfigOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAT_NDIS_MINIPORT_ADAPTER_ATTRIBUTES@@@Z
?NdisTraceLoggingQosHardwareOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAT_NDIS_MINIPORT_ADAPTER_ATTRIBUTES@@@Z
?NdisTraceLoggingQosOperationalStatus@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?NdisTraceLoggingRareFeaturePath@@YGXW4NdisTLRareFeature@@@Z
?NdisTraceLoggingRareFilterPath@@YGXPAU_NDIS_FILTER_DRIVER_BLOCK@@W4NdisTLFilterEvent@@H@Z
?NdisTraceLoggingRareMiniportPath@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4NdisTLMiniportEvent@@H@Z
?NdisTraceLoggingRscConfigOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingRscHardwareOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingRssConfiguration@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_CONFIGURATION_PARAMETER@@H@Z
?NdisTraceLoggingStuckNbl@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?NdisTraceLoggingTemporarilyScribbleNetLuidIndex@@YGXAAT_NET_LUID_LH@@@Z
?NdisTraceLoggingUnexpectedAoAcError@@YGXPAU_NDIS_MINIPORT_BLOCK@@GJ@Z
?NdisTraceLoggingUnexpectedSelectiveSuspendError@@YGXPAU_NDIS_MINIPORT_BLOCK@@GJ@Z
?NdisTraceLoggingVxLanConfigOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisTraceLoggingVxLanHardwareOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?NdisUnexpectedAoAcError@@YGXPAU_NDIS_MINIPORT_BLOCK@@GJ@Z
?NdispRegisterShim@@YGXXZ
?NetDmaDeregisterProvider@@YGXPAX@Z
?NetDmaGetVersion@@YGIXZ
?NetDmaInterruptDpc@@YGXPAXT_LARGE_INTEGER@@@Z
?NetDmaIsr@@YGXPAXT_LARGE_INTEGER@@PAK@Z
?NetDmaPnPEventNotify@@YGXPAXPAU_NET_DMA_PNP_NOTIFICATION@@@Z
?NetDmaProviderStart@@YGXPAXPAU_NET_DMA_PROVIDER_ATTRIBUTES@@@Z
?NetDmaProviderStop@@YGXPAX@Z
?NetDmaRegisterProvider@@YGJPAXPAPAXPAU_NET_DMA_PROVIDER_CHARACTERISTICS@@@Z
?NetTrcIsNetBufferListCorrelationIdValid@@YGEPAU_NET_BUFFER_LIST@@@Z
?NetTrcRegisterCorrelationProviderEx@@YGJPBU_GUID@@PA_K@Z
?NotifyBindComplete@_NDIS_PROTOCOL_BLOCK@@QAEXXZ
?Open@KRegKey@@QAEJKPBU_UNICODE_STRING@@PAX@Z
?Open@KRegKey@@QAEJKPB_WPAX@Z
?OpenPropertyKey@NetSetupPropertyBag@@AAEJABU_NETSETUPPROPKEY@@AAVKRegKey@@@Z
?PauseMiniportStack@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?PauseNeededForBind@BindRules@Ndis@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUBindStack@2@@Z
?QueryValueBoolean@KRegKey@@QAEJPBU_UNICODE_STRING@@PAEW4BooleanDisposition@1@@Z
?QueryValueBoolean@KRegKey@@QAEJPB_WPAEW4BooleanDisposition@1@@Z
?QueryValueString@KRegKey@@QAEJPBU_UNICODE_STRING@@AAV?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@@Z
?QueryValueString@KRegKey@@QAEJPB_WAAV?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@@Z
?QueryValueUlong@KRegKey@@QAEJPBU_UNICODE_STRING@@PAK@Z
?QueryValueUlong@KRegKey@@QAEJPB_WPAK@Z
?QueryValueUshort@KRegKey@@QAEJPBU_UNICODE_STRING@@PAG@Z
?Queue@?$KCoalescingWorkItem@U_NDIS_PROTOCOL_BLOCK@@@@QAE_NXZ
?Queue@?$KCoalescingWorkItem@VMINIPORT_HOOK_DRIVER@@@@QAE_NXZ
?RELEASE_PROT_MUTEX@@YGXPAU_NDIS_PROTOCOL_BLOCK@@@Z
?ReEnableTemporaryUnbind@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?ReStartTemporaryPause@BindRules@Ndis@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ReadBoolean@NetSetupPropertyBag@@QAEJABU_NETSETUPPROPKEY@@AA_N@Z
?ReadGuid@NetSetupPropertyBag@@QAEJABU_NETSETUPPROPKEY@@AAU_GUID@@@Z
?ReadNetworkInterfaceListV2@BindRegistry@Ndis@@YGJXZ
?ReadNetworkInterfaceV2@BindRegistry@Ndis@@YGJAAVKRegKey@@0AAUNdisNetworkInterfacePersistedState@@@Z
?ReadString@NetSetupPropertyBag@@QAEJABU_NETSETUPPROPKEY@@AAV?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@@Z
?ReadStringArray@NetSetupPropertyBag@@QAEJABU_NETSETUPPROPKEY@@AAV?$KArray@V?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@$00@Rtl@@@Z
?ReadUint32@NetSetupPropertyBag@@QAEJABU_NETSETUPPROPKEY@@AAI@Z
?ReadUint64@NetSetupPropertyBag@@QAEJABU_NETSETUPPROPKEY@@AA_K@Z
?ReadV2InterfaceBindings@BindStack@Ndis@@AAE_NPBU_GUID@@@Z
?ReferenceWdi@@YG_NXZ
?Register@MINIPORT_HOOK_DRIVER@@QAEJPAXPBU_NDIS_MINIPORT_HOOK_DRIVER_PROVIDER_CHARACTERISTICS@@@Z
?Release@?$KNeutralLock@W4NDIS_MINIPORT_POLICY_OWNER@@@Rtl@@QAEXW4NDIS_MINIPORT_POLICY_OWNER@@@Z
?Reload@BindRegistry@Ndis@@YGJPAU_NDIS_MINIPORT_BLOCK@@W4Flags@ReadBindingsOptions@2@@Z
?RemoveBindContext@BindState@Ndis@@QAEXPAX@Z
?ReportTimeout@NdisWatchdogState@@QAEXXZ
?RetryProtocolBindingsAfterMiniportChange@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?RtlCopyBufferToMdl@@YGJPAXPAU_MDL@@KKPAK@Z
?RtlCopyMdlToBuffer@@YGJPAU_MDL@@KPAXKPAK@Z
?RtlCopyMdlToMdl@@YGJPAU_MDL@@K0KKPAK@Z
?RtlSizeTAdd@@YGJIIPAI@Z
?RtlStringCbPrintfW@@YAJPA_WIPB_WZZ
?RtlStringCchPrintfW@@YAJPA_WIPB_WZZ
?RtlUIntAdd@@YGJIIPAI@Z
?RtlULongAdd@@YGJKKPAK@Z
?RtlULongLongToULong@@YGJ_KPAK@Z
?RtlUShortAdd@@YGJGGPAG@Z
?RtlUnicodeStringCat@@YGJPAU_UNICODE_STRING@@PBU1@@Z
?RtlUnicodeStringCopy@@YGJPAU_UNICODE_STRING@@PBU1@@Z
?RtlUnicodeStringCopyString@@YGJPAU_UNICODE_STRING@@PB_W@Z
?RtlUnicodeStringPrintf@@YAJPAU_UNICODE_STRING@@PB_WZZ
?SetBinding@BindState@Ndis@@QAE_NW4BINDING_ENABLED_OR_DISABLED@@W4NDIS_DO_NOT_BIND_REASON@@@Z
?SetDirty@BindEngine@Ndis@@QAEXXZ
?SetPause@BindState@Ndis@@QAE_NW4PAUSE_OR_RESTART@@W4NDIS_PAUSE_REASON@@@Z
?SetRunningDriver@NDIS_BIND_FILTER_DRIVER@@QAEXPAU_NDIS_FILTER_DRIVER_BLOCK@@W4CallRunMode@@@Z
?SetRunningDriver@NDIS_BIND_PROTOCOL_DRIVER@@QAEXPAU_NDIS_PROTOCOL_BLOCK@@W4CallRunMode@@@Z
?SetRunningDriverIsReady@NDIS_BIND_DRIVER_BASE@@IAEX_NW4CallRunMode@@@Z
?SetSource@BindState@Ndis@@QAE_NW4BIND_SOURCE_STATE@@W4Flags@BindSource@2@@Z
?SetValueBlob@KRegKey@@QAEJPB_WKPBE@Z
?SetValueUlong@KRegKey@@QAEJPB_WK@Z
?TryAcquire@?$KNeutralLock@W4NDIS_MINIPORT_POLICY_OWNER@@@Rtl@@QAE_NW4NDIS_MINIPORT_POLICY_OWNER@@@Z
?TryAllocateSpecificBit@IfIndexRange@@QAEJK@Z
?UnbindIncompatibleDriversForMacChange@BindRules@Ndis@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?UnbindMiniportStack@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?UnbindOnAttach@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?UnbindOnDetach@BindRules@Ndis@@YGXPAUBindStack@2@@Z
?UpdateBindings@BindEngine@Ndis@@AAEXAAVKLockThisExclusive@@@Z
?UpdateBindingsWorkItem@BindEngine@Ndis@@AAEXXZ
?UpdateFilters@BindRegistry@Ndis@@YG_NPAU_NDIS_MINIPORT_BLOCK@@AAV?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@1W4Flags@ReadBindingsOptions@2@@Z
?UpdateProtocols@BindRegistry@Ndis@@YG_NPAU_NDIS_MINIPORT_BLOCK@@AAV?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@1W4Flags@ReadBindingsOptions@2@@Z
?WAIT_FOR_PROTO_MUTEX@@YGXPAU_NDIS_PROTOCOL_BLOCK@@@Z
?Wait@?$KWaitEventBase@U?$integral_constant@W4_EVENT_TYPE@@$0A@@wistd@@@@QAEXXZ
?WaitForAllHookedDriversToDeregister@MINIPORT_HOOK_DRIVER@@AAEXXZ
?WaitSynchronously@NdisWatchdogState@@QAEXPAU_KEVENT@@@Z
?WatchdogFromHandle@@YGPAUNdisWatchdogState@@PAUNDISWATCHDOG__@@@Z
?XFilterAdjust@@YGHPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@I@Z
?XNoteFilterOpenAdapter@@YGXPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@@Z
?XRemoveBindingFromLists@@YGXPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@@Z
?XSetupFrameTypeInFilter@@_Y2PAGENPNP@@GXPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@@Z
?XUndoFilterAdjust@@YGXPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@@Z
?XlateReceivePacketStats@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAEK@Z
?append@?$KArray@PAU_KStringAtom@Rtl@@$00@Rtl@@QAE_NABQAU_KStringAtom@2@@Z
?append@?$KArray@UProtocolBindProperties@@$00@Rtl@@QAE_N$$QAUProtocolBindProperties@@@Z
?append@?$KArray@V?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@$00@Rtl@@QAE_NABV?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@@Z
?append@?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_N$$QAV?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@@Z
?append@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_N$$QAV?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@@Z
?eraseAt@?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@QAEXI@Z
?ethAddOneOpenMulticastAddress@@YGHPAU_NDIS_OPEN_BLOCK@@PAE1@Z
?ethAllocateOpenMulticastBuffer@@YGHPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@@Z
?ethDeleteOneOpenMulticastAddress@@YGHPAU_NDIS_OPEN_BLOCK@@PAE1@Z
?ethFilterDprIndicateReceivePacket@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ethFilterReceivePacketStats@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAEK@Z
?ethFindMulticast@@YGEIPAU_ETH_MULTICAST_WRAPPER@@PAY05EQAE@Z
?ethFreeOpenMulticastBuffer@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?grow@?$KArray@PAU_KStringAtom@Rtl@@$00@Rtl@@AAE_NI@Z
?grow@?$KArray@PAX$00@Rtl@@AAE_NI@Z
?grow@?$KArray@ULwfBindProperties@@$00@Rtl@@AAE_NI@Z
?grow@?$KArray@UProtocolBindProperties@@$00@Rtl@@AAE_NI@Z
?grow@?$KArray@V?$KRef@UNDIS_BIND_FILTER_DRIVER@@@@$00@Rtl@@AAE_NI@Z
?grow@?$KArray@V?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@$00@Rtl@@AAE_NI@Z
?grow@?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@AAE_NI@Z
?grow@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@AAE_NI@Z
?insertAt@?$KArray@ULwfBindProperties@@$00@Rtl@@QAE_NI$$QAULwfBindProperties@@@Z
?insertAt@?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_NI$$QAV?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@@Z
?insertAt@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_NI$$QAV?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@@Z
?insertSorted@?$KArray@ULwfBindProperties@@$00@Rtl@@QAE_N$$QAULwfBindProperties@@P6G_NABU3@1@Z@Z
?insertSorted@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_N$$QAV?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@P6G_NABV34@1@Z@Z
?insertSortedUnique@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_N$$QAV?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@P6G_NABV34@1@Z@Z
?moveElements@?$KArray@ULwfBindProperties@@$00@Rtl@@AAEXKKK@Z
?moveElements@?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@AAEXKKK@Z
?moveElements@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@AAEXKKK@Z
?ndis6DummyReceiveComplete@@YGXPAX@Z
?ndisAcquireMiniportPnPEventLock@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_KEVENT@@@Z
?ndisAcquireReadLockPerCpuRefCnt@@YGXPAU_NDIS_RW_LOCK@@PAK@Z
?ndisAcquireReadLockSharedRefCnt@@YGHPAU_NDIS_RW_LOCK@@@Z
?ndisAcquireReadWriteLockX@@YGXPAU_NDIS_RW_LOCK@@EPAU_LOCK_STATE@@E@Z
?ndisAcquireWriteLockPerCpuRefCnt@@YGXPAU_NDIS_RW_LOCK@@PAKK@Z
?ndisAcquireWriteLockSharedRefCnt@@YGHPAU_NDIS_RW_LOCK@@@Z
?ndisAddDevice@@_Y2PAGENPNP@@GJPAUNDIS_MINIPORT_CREATION_CONFIG@@PAPAX@Z
?ndisAddMediaTypeToArray@@_Y2INIT@@GJPA_WKPAXK11@Z
?ndisAddPortToList@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PORT_BLOCK@@@Z
?ndisAddReceiveFilterToList@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_RECEIVE_FILTER_BLOCK@@@Z
?ndisAddReceiveQueueToList@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_RECEIVE_QUEUE_BLOCK@@@Z
?ndisAddWoLDirectedMAC@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAddWoLMagicPacket@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAllocOrFreeIterativeDataPathTrackerIfNeeded@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_FILTER_PARTIAL_CHARACTERISTICS@@_N@Z
?ndisAllocateAndInitializeTimestampForFilter@@YGPAU_NDIS_TIMESTAMP_CAPABILITIES@@PAU1@@Z
?ndisAllocateCombinedRSSParameters@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAPAU_NDIS_VPORT_BLOCK@@PAPAU_NDIS_RECEIVE_SCALE_PARAMETERS@@33@Z
?ndisAllocateDefaultQueue@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAllocateEventLog@@YGPAUNDIS_EVENT_LOG_HANDLE__@@W4_NDIS_EVENT_LOG_SIZE@@G@Z
?ndisAllocateIterativeDataPathTracker@@YGHPAU_NDIS_FILTER_BLOCK@@@Z
?ndisAllocateMdlInternal@@YGPAU_MDL@@PAK@Z
?ndisAllocateNetBufferInternal@@YGPAU_NET_BUFFER@@PAXPAK@Z
?ndisAllocateNumaStripedPages@@YGPAXXZ
?ndisAllocateOpenBlock@@YGPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@E@Z
?ndisAllocateOpenOffload@@YGHPAU_NDIS_OPEN_BLOCK@@@Z
?ndisAllocatePerProcessorSlot@@YGPAUPNDIS_PER_PROCESSOR_SLOT__@@K@Z
?ndisAllocateReceiveQueue@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisAllocateWatchdog@@YGPAUNDISWATCHDOG__@@XZ
?ndisAllocationExecutionRoutine@@YG?AW4_IO_ALLOCATION_ACTION@@PAU_DEVICE_OBJECT@@PAU_IRP@@PAX2@Z
?ndisAoAcActiveRefIncrement@@YGJPAU_NDIS_MINIPORT_AOAC@@W4_NDIS_PM_COMPONENT_ID@@@Z
?ndisAoAcActiveRefSubtract@@YGJPAU_NDIS_MINIPORT_AOAC@@W4_NDIS_PM_COMPONENT_ID@@K@Z
?ndisAoAcCalculateClearStopTimeout@@YGKPAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAoAcCleanup@@YGXPAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAoAcClearStop@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_STOP_REASON@@@Z
?ndisAoAcCompleteQueuedIrps@@YGXPAU_NDIS_MINIPORT_BLOCK@@J@Z
?ndisAoAcEnableRemoteWake@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PM_NIC_ACTIVE@@E@Z
?ndisAoAcFree@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcIdleRequestConfirm@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcInitDisconnectedStandby@@YGXXZ
?ndisAoAcInitialize@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcInitializeSubsystem@@YGJXZ
?ndisAoAcIsControlPathAoAcNicReferencePresent@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcIsDataPathPdcActivatorPresent@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcIsTempRefNeededAfterDeref@@YGEPAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAoAcPauseRefTimeAccumulation@@YGXPAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAoAcPauseRefTimeStats@@YGXPAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAoAcPmInitTempRef@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcRefMiniportForIoctl@@YGEPAU_NDIS_DEVICE_OBJECT_OPEN_CONTEXT@@KPAU_NDIS_PM_NIC_ACTIVE@@EW4_NDIS_MP_REFTAG@@PAJPAPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcResumeRefTimeAccumulation@@YGXPAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAoAcScheduleWakeWorkItem@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MINIPORT_EVENT@@@Z
?ndisAoAcStart@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcStartRefTimeStats@@YGXPAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAoAcStop@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_STOP_REASON@@W4CallRunMode@@@Z
?ndisAoAcTakeInternalRef@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisAoAcTempRefWorkItem@@YGXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisAoAcWakeWorkItem@@YGXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisAoAcWriteRefcountRundown@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_AOAC@@@Z
?ndisAreProcessorsEqual@@YGEU_PROCESSOR_NUMBER@@0@Z
?ndisArmWatchdog@@YGXPAUNDISWATCHDOG__@@PAXK1KK@Z
?ndisAttachFilter@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_FILTER_LINK@@@Z
?ndisAttachFilterInner@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_DRIVER_BLOCK@@KPAUNDIS_BIND_FILTER_LINK@@@Z
?ndisBindBuilderCleanup@@YGXXZ
?ndisBindBuilderInitialize@@YGJXZ
?ndisBindEnumerateProtocolDrivers@@YGXP6GXPAXV?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@@Z0@Z
?ndisBindGetFilterDriver@@YG?AV?$KRef@UNDIS_BIND_FILTER_DRIVER@@@@PBU_GUID@@_N@Z
?ndisBindGetProtocolDriver@@YG?AV?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@PAU_UNICODE_STRING@@_N1@Z
?ndisBindInitialize@@YGJXZ
?ndisBindLegacyProtocol@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@PAUNDIS_BIND_PROTOCOL_LINK@@@Z
?ndisBindNdis6Protocol@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@@Z
?ndisBindProtocol@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_PROTOCOL_LINK@@@Z
?ndisBindReadFilterDriverConfiguration@@YG_NPAUNDIS_BIND_FILTER_DRIVER@@@Z
?ndisBindReadFilterDriverFromV2Registry@@YG_NPAUNDIS_BIND_FILTER_DRIVER@@@Z
?ndisBindReadFilterDriverSettingsFromV2Registry@@YG_NPAUNDIS_BIND_FILTER_DRIVER@@AAVKRegKey@@@Z
?ndisBindReadProtocolDriverConfiguration@@YG_NPAUNDIS_BIND_PROTOCOL_DRIVER@@_N@Z
?ndisBindReadProtocolDriverFromV2Registry@@YG_NPAUNDIS_BIND_PROTOCOL_DRIVER@@@Z
?ndisBindReadProtocolDriverFromV3Registry@@YG_NPAUNDIS_BIND_PROTOCOL_DRIVER@@@Z
?ndisBindRequest@@YGXPAXAAUBindEngine@Ndis@@AAVBindState@2@PBU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisBindUnbindPeriodicReceives@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_M_PERIODIC_RECEIVE_ACTION@@@Z
?ndisBugCheckEx@@YGXKKKK@Z
?ndisBugcheckHandler@@YGXPAXK@Z
?ndisBuildBindings@@YGJPBU_GUID@@AAUBindStack@Ndis@@@Z
?ndisBuildDeviceAcl@@YGJPAPAU_ACL@@K@Z
?ndisCalculateIdealNblTrackerHistoryBufferSize@@YGXXZ
?ndisCalculateRssParametersSize@@YGHPAU_NDIS_RECEIVE_SCALE_PARAMETERS@@PAK@Z
?ndisCalculateRssProcessorCount@@YGKPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCalculateRssV1Flags@@YGGPAU_NDIS_RECEIVE_SCALE_PARAMETERS_V2@@@Z
?ndisCalculateRssV2ParametersFlags@@YGKPAU_NDIS_RECEIVE_SCALE_PARAMETERS@@@Z
?ndisCalculateRssV2ParametersSize@@YGHPAU_NDIS_RECEIVE_SCALE_PARAMETERS_V2@@PAK@Z
?ndisCalculateRssV2ParametersSizeFromV1@@YGHPAU_NDIS_RECEIVE_SCALE_PARAMETERS@@PAK@Z
?ndisCallReceiveCompleteHandler@@YGXPAXP6GXXZ0PAU_NET_BUFFER_LIST@@KKK@Z
?ndisCallReceiveHandler@@YGXPAXP6GXXZ0PAU_NET_BUFFER_LIST@@KKK@Z
?ndisCallSendCompleteHandler@@YGXPAXP6GXXZ0PAU_NET_BUFFER_LIST@@KKK@Z
?ndisCallSendHandler@@YGXPAXP6GXXZ0PAU_NET_BUFFER_LIST@@KKK@Z
?ndisCancelDequeuedDirectOidRequests@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_LIST_ENTRY@@@Z
?ndisCancelIdleRequest@@YGEPAU_NDIS_MINIPORT_BLOCK@@KK@Z
?ndisCancelIdleRequestSync@@YGXPAU_NDIS_MINIPORT_BLOCK@@KKE@Z
?ndisCancelInitModeTimeoutTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisCancelLogIrp@@YGXPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisCancelMediaDisconnectTimer@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCancelOidRequestInternal@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAXE@Z
?ndisCancelOidRequestOnFilter@@YGXPAU_NDIS_FILTER_BLOCK@@PAXE@Z
?ndisCancelOidRequestOnMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAXE@Z
?ndisCancelWaitWake@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCancelWakeUpDpcTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCaptureStackTrace@@YGKK@Z
?ndisCheckAccess@@YGEPAU_IRP@@PAU_IO_STACK_LOCATION@@PAX@Z
?ndisCheckAlwaysStartFlag@@YGJAAVKRegKey@@AA_N@Z
?ndisCheckDeviceNeedReinstallWithNewIfType@@YGEPAU_NDIS_MINIPORT_BLOCK@@PBU_NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES@@@Z
?ndisCheckForHangSupported@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCheckForNdisTestBindingsOnAllMiniports@@YGXXZ
?ndisCheckIfDeviceNeedsFullMigration@@YGJAAVKRegKey@@AAV?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@AA_N@Z
?ndisCheckIfDeviceNeedsInstallation@@YGJAAVKRegKey@@AAV?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@AA_N@Z
?ndisCheckIfDeviceNeedsPseudoMigration@@YGJAAVKRegKey@@AAV?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@AA_N@Z
?ndisCheckIfDeviceNeedsUpdates@@YGJAAVKRegKey@@AA_N@Z
?ndisCheckMiniportWakeUpCapable@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCheckNetworkInterfaceDataMismatch@@YGJPAU_NDIS_MINIPORT_BLOCK@@PBU_NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES@@@Z
?ndisCheckWatchdogTimer@@YGEXZ
?ndisCleanUpForProtocol@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisCleanupUserOpenContext@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_USER_OPEN_CONTEXT@@@Z
?ndisClearBusy@@YGXPAU_NDIS_MINIPORT_BLOCK@@KW4_NDIS_SS_BUSY_REASON@@@Z
?ndisClearIdleTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisClearReceiveFilter@@YGHPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisClearReceiveFiltersForProtocol@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisClearTransientBindFailuresAboveThisFilter@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_FILTER_LINK@@@Z
?ndisClonePMPatternList@@YGHPAU_SINGLE_LIST_ENTRY@@0@Z
?ndisCloseHandler@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisCloseIrpHandler@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisCloseRef@@YGEPAU_REFERENCE_EX@@@Z
?ndisCloseTimeInterval@@YGXPA_K0@Z
?ndisCloseULongRef@@YGEPAU_ULONG_REFERENCE@@@Z
?ndisCmAssignCompartmentHandleToCmState@@YGXPAU_NDIS_CM_STATE@@PAX@Z
?ndisCmCreateStateObject@@YGJPAPAU_NDIS_CM_STATE@@@Z
?ndisCmDereferenceCompartment@@YGXPAX@Z
?ndisCmGetThreadSessionId@@YGKPAU_ETHREAD@@@Z
?ndisCmLazyInitializeCleanup@@YGXXZ
?ndisCmValidateCompartmentChange@@YGPAXII@Z
?ndisCoIndicatePromiscNetBuffer@@YGXPAXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAU_NET_BUFFER_LIST@@KKE@Z
?ndisCoIndicatePromiscPacket@@YGXPAXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAU_NDIS_PACKET@@EE@Z
?ndisCoSendNetBufferListsToNdisPacket@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisCoSendNetBufferListsToNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisCoSendPacketsToNdisPackets@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisCoSendPacketsToNetBufferLists@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisComparePMProtocolOffloads@@YGEPAU_NDIS_PM_PROTOCOL_OFFLOAD@@0@Z
?ndisCompareProcNum@@YGHU_PROCESSOR_NUMBER@@0@Z
?ndisCompareStatusCodes@@YAHPBX0@Z
?ndisCompareWoLPatterns@@YGEPAU_NDIS_PM_WOL_PATTERN@@0@Z
?ndisCompleteLegacyRequest@@YGXPAXHPAU_NDIS_REQUEST@@@Z
?ndisCompleteOidRequestToRequest@@YGXPAXPAU_NDIS_OID_REQUEST@@H@Z
?ndisCompleteUnsolicitedUnbind@@YGXPAX@Z
?ndisCompleteWaitWake@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCompletionRoutine@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?ndisConfigurePeriodicReceives@@YGXPAU_NDIS_SET_RECEIVE_RATE@@@Z
?ndisConvertIdentifier@@YGJPAU_ETHREAD@@PBU_NDIS_CONVERT_IDENTIFIER_IN@@PAU_NDIS_CONVERT_IDENTIFIER_OUT@@@Z
?ndisConvertInterruptTimeToLocalTime@@YGX_KPAT_LARGE_INTEGER@@@Z
?ndisConvertOffloadValueToString@@YGHPAU_UNICODE_STRING@@K@Z
?ndisConvertPMCapabilitiesToPnp@@YGXPAU_NDIS_PM_CAPABILITIES@@PAU_NDIS_PNP_CAPABILITIES@@@Z
?ndisConvertPnpCapabilitiesToPM@@YGXPAU_NDIS_PNP_CAPABILITIES@@PAU_NDIS_PM_CAPABILITIES@@@Z
?ndisConvertWakeUpEnableToPMConfig@@YGXKPAU_NDIS_PM_PARAMETERS@@G@Z
?ndisCopyNBLInfoToPacket@@YGXPAU_NET_BUFFER_LIST@@PAU_NDIS_PACKET@@W4_NDIS_XLATE_TYPE@@@Z
?ndisCopyNdisOffload@@YGXPAU_NDIS_OFFLOAD@@0IPAIE@Z
?ndisCopyPacketInfoToNBL@@YGXPAU_NDIS_PACKET@@PAU_NET_BUFFER_LIST@@W4_NDIS_XLATE_TYPE@@@Z
?ndisCopyReceiveQueueInfo@@YGXPAU_NDIS_RECEIVE_QUEUE_INFO@@PAU_NDIS_RECEIVE_QUEUE_BLOCK@@@Z
?ndisCpuInitializeSubsystemPhase1@@YGXXZ
?ndisCpuInitializeSubsystemPhase2@@YGJXZ
?ndisCreateAcl@@YGPAU_ACL@@EEEEEEK@Z
?ndisCreateAdapterInstanceName@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAPAU_UNICODE_STRING@@1@Z
?ndisCreateFilterAdapterRegistry@@YGHPBU_UNICODE_STRING@@PAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisCreateFilterDriverRegistry@@YGHPBU_UNICODE_STRING@@E@Z
?ndisCreateFilterInstanceRegistry@@YGHPBU_UNICODE_STRING@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCreateGenericSD@@YGJPAU_ACL@@PAD@Z
?ndisCreateHandler@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisCreateIrpHandler@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisCreateNdisSupportedOidList@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCreateNotifyQueue@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAUCO_ADDRESS_FAMILY@@PAPAU_NDIS_AF_NOTIFY@@@Z
?ndisCreatePMAddRemoveWorkItem@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisCreatePMPacketPattern@@YGPAU_NDIS_PM_PACKET_PATTERN@@PAU_NDIS_PM_WOL_PATTERN@@PAK@Z
?ndisCreatePMPdcTaskClientWorkItem@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisCreatePMProtocolOffloadEntry@@YGPAU_NDIS_PACKET_PATTERN_ENTRY@@PAU_NDIS_PM_PROTOCOL_OFFLOAD@@K@Z
?ndisCreateRssV1Parameters@@YGXPAU_NDIS_RECEIVE_SCALE_PARAMETERS@@KK@Z
?ndisCreateSecurityDescriptor@@YGJPAU_DEVICE_OBJECT@@PAPAXK@Z
?ndisCreateSecurityDescriptorEx@@YGJPAXK@Z
?ndisCreateWakeUpPatternEntry@@YGPAU_NDIS_PACKET_PATTERN_ENTRY@@PAU_NDIS_PM_PACKET_PATTERN@@K@Z
?ndisCreateWoLPatternEntry@@YGPAU_NDIS_PACKET_PATTERN_ENTRY@@PAU_NDIS_PM_WOL_PATTERN@@K@Z
?ndisCsResiliencyChange@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisCsStateChange@@YGXPAU_NDIS_MINIPORT_BLOCK@@E_K@Z
?ndisDataPathExpandStackCallback@@YGXPAX@Z
?ndisDeQueueMiniportOnDriver@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_M_DRIVER_BLOCK@@@Z
?ndisDeQueueOpenOnMiniport@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisDeQueueOpenOnProtocol@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@@Z
?ndisDeinitializeZeroBasedRef@@YGXPAU_REFERENCE_EX@@@Z
?ndisDeletePatternEntry@@YGEPAU_SINGLE_LIST_ENTRY@@K@Z
?ndisDeliverBindCompleteEvent@@YGXPAUNDIS_BIND_PROTOCOL_DRIVER@@@Z
?ndisDeliverNetPnPEventSynchronously@@YGHPAU_NDIS_PROTOCOL_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisDequeueDirectOidsByRequestId@@YGXPAU_NDIS_SELECTIVE_SUSPEND@@PAXPAU_LIST_ENTRY@@@Z
?ndisDereferenceAf@@YGXPAU_NDIS_CO_AF_BLOCK@@@Z
?ndisDereferenceAfNotification@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisDereferenceDmaAdapter@@YGXPAU_NDIS_SG_DMA_BLOCK@@@Z
?ndisDereferenceDriver@@YGXPAU_NDIS_M_DRIVER_BLOCK@@EW4_NDIS_MDRV_REFTAG@@@Z
?ndisDereferenceFilter@@YGXPAU_NDIS_FILTER_BLOCK@@W4_NDIS_LWF_REFTAG@@@Z
?ndisDereferenceFilterDriver@@YGXPAU_NDIS_FILTER_DRIVER_BLOCK@@EW4_NDIS_LWFDRV_REFTAG@@@Z
?ndisDereferenceMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MP_REFTAG@@@Z
?ndisDereferenceMiniportForNsi@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_NSI_REFTAG@@W4_NDIS_MP_REFTAG@@@Z
?ndisDereferenceMiniportRef@@YGEPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MP_REFTAG@@@Z
?ndisDereferencePackage@@YGXPAU_PKG_REF@@@Z
?ndisDereferenceProtocol@@YGXPAU_NDIS_PROTOCOL_BLOCK@@EW4_NDIS_PT_REFTAG@@@Z
?ndisDereferenceReceiveFilter@@YGKPAU_NDIS_RECEIVE_FILTER_BLOCK@@@Z
?ndisDereferenceReceiveQueue@@YGKPAU_NDIS_RECEIVE_QUEUE_BLOCK@@@Z
?ndisDereferenceRef@@YGEPAU_REFERENCE_EX@@E@Z
?ndisDereferenceSap@@YGXPAU_NDIS_CO_SAP_BLOCK@@@Z
?ndisDereferenceVcPtr@@YGXPAU_NDIS_CO_VC_PTR_BLOCK@@@Z
?ndisDetachFilter@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_FILTER_LINK@@@Z
?ndisDetachFilterInner@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@@Z
?ndisDeviceControlHandler@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisDeviceControlIrpHandler@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisDeviceInternalDispatch@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisDeviceInternalIrpDispatch@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisDevicePnPEventNotifyFiltersAndAllTransports@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisDevicePnPEventNotifyMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_DEVICE_PNP_EVENT@@PAXK@Z
?ndisDevicePowerDown@@YGXPAX@Z
?ndisDevicePowerOn@@YGXPAX@Z
?ndisDisableRsc@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisDisarmWatchdog@@YGXPAUNDISWATCHDOG__@@@Z
?ndisDisarmWatchdogAsync@@YGXPAUNDISWATCHDOG__@@@Z
?ndisDisconnectInStandby@@YG_NXZ
?ndisDispatchIoWorkItem@@YGXPAU_DEVICE_OBJECT@@PAX@Z
?ndisDmaAddCpuNotify@@YGJEKJ@Z
?ndisDmaExecutionRoutine@@YG?AW4_IO_ALLOCATION_ACTION@@PAU_DEVICE_OBJECT@@PAU_IRP@@PAX2@Z
?ndisDoDirectOidRequest@@YGHPAU_NDIS_OID_REQUEST@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@2@Z
?ndisDoLoopbackNetBufferList@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_BUFFER@@PAU_NET_BUFFER_LIST@@KK@Z
?ndisDoOidRequests@@YGXPAX@Z
?ndisDoesSystemSupportSriov@@YGXXZ
?ndisDpcTimeoutInitializeSubsystem@@YGXXZ
?ndisDrainWatchdog@@YGXPAUNDISWATCHDOG__@@@Z
?ndisDummyHandler@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_OBJECT_HEADER@@PAU_IRP@@@Z
?ndisDummyIrpHandler@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisEmulateRSSv1Dpc@@YGXPAU_KDPC@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAU_NDIS_RSS_DPC_WORKER_CONTEXT@@@Z
?ndisEnablePMParamForPattern@@YGXPAU_NDIS_PM_WOL_PATTERN@@PAU_NDIS_PM_PARAMETERS@@@Z
?ndisEnablePMParamForProtocolOffload@@YGXPAU_NDIS_PM_PROTOCOL_OFFLOAD@@PAU_NDIS_PM_PARAMETERS@@@Z
?ndisEnableRsc@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisEnableWppTracingCallback@@YGXPBU_GUID@@_JEKE@Z
?ndisEntrySetPrime@@YGXPAU_NDIS_RSS_ENTRY_SET@@G@Z
?ndisEntrySetScanForward@@YGEPAGPAU_NDIS_RSS_ENTRY_SET@@@Z
?ndisEnumerateFilterInstances@@YG_NPAU_NDIS_MINIPORT_BLOCK@@AAV?$KArray@E$00@Rtl@@@Z
?ndisEnumeratePorts@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PORT_ARRAY@@KPAI2@Z
?ndisEqualUnicodeStringDispatchLevel@@YG_NPBU_UNICODE_STRING@@0@Z
?ndisEventEntryCount@@YGKW4_NDIS_EVENT_LOG_SIZE@@@Z
?ndisEventEntrySize@@YGGK@Z
?ndisEventLogFromHandle@@YGPAU_NDIS_EVENT_LOG@@PAUNDIS_EVENT_LOG_HANDLE__@@@Z
?ndisExecuteRSSv2DirectOid@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAU_NDIS_RSS_DPC_WORKER_CONTEXT@@U_PROCESSOR_NUMBER@@@Z
?ndisExpandStackTrace@@YGEPAPAU_NDIS_STACK_TRACE@@PAU_RTL_DYNAMIC_HASH_TABLE_CONTEXT@@PAK@Z
?ndisFAllocateFilterOffload@@YGHPAU_NDIS_FILTER_BLOCK@@@Z
?ndisFBindRequest@@YGHPAU_NDIS_FILTER_BLOCK@@PBU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisFCancelOidRequestInternal@@YGXPAX@Z
?ndisFDevicePnPEventNotifyInternal@@YGXPAX@Z
?ndisFDirectOidRequestCompleteInternal@@YGXPAX@Z
?ndisFDoDirectOidRequestInternal@@YGXPAX@Z
?ndisFDoLoopbackNetBufferList@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NET_BUFFER@@PAU_NET_BUFFER_LIST@@KK@Z
?ndisFDoOidRequest@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisFDoOidRequestInternal@@YGXPAX@Z
?ndisFForwardNetPnPEventToFilter@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisFIndicateOffloadChange@@YGEPAU_NDIS_FILTER_BLOCK@@PAXK@Z
?ndisFIndicateStatusInternal@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisFIndicateStatusWrapper@@YGXPAX@Z
?ndisFIndicateTimestampChange@@YGEPAU_NDIS_FILTER_BLOCK@@HPAXK@Z
?ndisFInitializeOffload@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAXK@Z
?ndisFInvokeAttach@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_FILTER_ATTACH_PARAMETERS@@@Z
?ndisFInvokeCancelOidRequest@@YGXPAU_NDIS_FILTER_BLOCK@@PAX@Z
?ndisFInvokeDetach@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisFInvokeDevicePnPEventNotify@@_Y2PAGE@@GXPAU_NDIS_FILTER_BLOCK@@PAU_NET_DEVICE_PNP_EVENT@@@Z
?ndisFInvokeNetPnPEvent@@_Y2PAGE@@GHPAU_NDIS_FILTER_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisFInvokePause@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_FILTER_PAUSE_PARAMETERS@@@Z
?ndisFInvokeRestart@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_FILTER_RESTART_PARAMETERS@@@Z
?ndisFInvokeSetFilterModuleOptions@@YGHPAU_NDIS_FILTER_BLOCK@@@Z
?ndisFInvokeSetOptions@@_Y2PAGE@@GHPAU_NDIS_FILTER_DRIVER_BLOCK@@@Z
?ndisFInvokeStatus@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisFIsLoopbackNetBuffer@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NET_BUFFER@@PAU_NET_BUFFER_LIST@@PAE3@Z
?ndisFLoopbackNetBufferLists@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NET_BUFFER_LIST@@KKPAPAU2@@Z
?ndisFNetPnPEventInternal@@YGXPAX@Z
?ndisFNotifyDetach@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisFOidRequestCompleteInternal@@YGXPAX@Z
?ndisFQueueOidRequest@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisFSetRestartAttributes@@YGHPAXPAU_NDIS_FILTER_PARTIAL_CHARACTERISTICS@@@Z
?ndisFakeFilterReceiveHandler@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisFakeFilterSendHandler@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisFakeMiniportCancelSendPackets@@YGXPAX0@Z
?ndisFdoInitializeSubsystem@@YGJXZ
?ndisFillEventLogEntry@@YGXPAU_NDIS_EVENT_LOG@@KGPAX@Z
?ndisFillOffloadCapsInTasks@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisFilterAttachCleanUp@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisFilterCancelSendNetBufferLists@@YGXPAX0@Z
?ndisFilterCancelSendNetBufferListsInternal@@YGXPAX@Z
?ndisFilterFakeCancelSendNetBufferLists@@YGXPAX0@Z
?ndisFilterIndicatePMCapabilities@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisFilterIndicatePMOffloadReject@@YGEPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisFilterIndicateReceiveNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisFilterIndicateWoLPatternReject@@YGEPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisFilterSendNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisFilterWaitForPnPComplete@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisFilterXStateClearFlag@@YGEPAU_NDIS_FILTER_BLOCK@@E@Z
?ndisFilterXStateSetFlag@@YGXPAU_NDIS_FILTER_BLOCK@@E@Z
?ndisFindAdjacentFilters@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_FILTER_LINK@@PAPAU_NDIS_FILTER_BLOCK@@2@Z
?ndisFindFirstReceiveFilterByOpen@@YGPAU_NDIS_RECEIVE_FILTER_BLOCK@@PAU_NDIS_OPEN_BLOCK@@@Z
?ndisFindMinimumVersionDrivers@@YGXPAU_NDIS_MINIPORT_BLOCK@@KK@Z
?ndisFindMiniportOnGlobalList@@YGPAU_NDIS_MINIPORT_BLOCK@@PBU_UNICODE_STRING@@@Z
?ndisFindPortByPortNumber@@YGPAU_NDIS_PORT_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisFindReceiveFilterByFilterId@@YGPAU_NDIS_RECEIVE_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@KKPAK@Z
?ndisFindReceiveQueueByQueueId@@YGPAU_NDIS_RECEIVE_QUEUE_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@KKPAK@Z
?ndisFreeConvertedPacket@@YGXPAU_NDIS_PACKET@@PAU_NET_BUFFER@@E@Z
?ndisFreeEventLog@@YGXPAUNDIS_EVENT_LOG_HANDLE__@@@Z
?ndisFreeMappingAddress@@YGXPAX@Z
?ndisFreeMdlInternal@@YGXPAU_MDL@@@Z
?ndisFreeOpenBlock@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisFreePacketPoolHdr@@YGXPAU_NDIS_PKT_POOL_HDR@@PAU_NDIS_PKT_POOL@@@Z
?ndisFreePacketPoolInternal@@YGXPAXE@Z
?ndisFreePaddedMdl@@YGXPAU_NDIS_PACKET@@@Z
?ndisFreePerProcessorSlot@@YGXPAUPNDIS_PER_PROCESSOR_SLOT__@@K@Z
?ndisFreeReceiveQueue@@YGHPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisFreeRefCountAuxiliaryMemory@@YGXPAU_NDIS_REFCOUNT_BLOCK@@@Z
?ndisFreeRefCountStackChain@@YGXPAU_NDIS_REFCOUNT_STACK_BLOCK@@@Z
?ndisFreeRefCountStacksInBlock@@YGXPAU_NDIS_REFCOUNT_STACK_BLOCK@@@Z
?ndisFreeWatchdog@@YGXPAUNDISWATCHDOG__@@@Z
?ndisGenerateNetBufferListCorrelationIds@@YGXPAU_NET_BUFFER_LIST@@K@Z
?ndisGenericWaitWakeCallback@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisGetAdapterHardwareInfo@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAH@Z
?ndisGetAdapterRssInfo@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAH@Z
?ndisGetAnyActiveRefTag@@YGKPAUNDIS_REFCOUNT_HANDLE__@@@Z
?ndisGetAnyProcInsideNode@@YG?AU_PROCESSOR_NUMBER@@G@Z
?ndisGetBindLinkNameForTracing@@YGX$$TPAUNDIS_PNPTRACE_LOCALS@@@Z
?ndisGetBindLinkNameForTracing@@YGXPAUNDIS_BIND_FILTER_LINK@@PAUNDIS_PNPTRACE_LOCALS@@@Z
?ndisGetBindLinkNameForTracing@@YGXPAUNDIS_BIND_PROTOCOL_LINK@@PAUNDIS_PNPTRACE_LOCALS@@@Z
?ndisGetBindLinkNameForTracing@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_PNPTRACE_LOCALS@@@Z
?ndisGetCombinedPMConfig@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PM_PARAMETERS@@@Z
?ndisGetCombinedRSSParameters@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAPAU_NDIS_VPORT_BLOCK@@PAPAU_NDIS_RECEIVE_SCALE_PARAMETERS@@33@Z
?ndisGetDefaultNumRssProcessors@@YGKPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisGetEncapsulationFromTask@@YGHPAU_NDIS_TASK_OFFLOAD_HEADER@@KPAU_NDIS_OFFLOAD_ENCAPSULATION@@@Z
?ndisGetFilterAltitude@@YGJAAVNetSetupPropertyBag@@AAK@Z
?ndisGetHardwareInfo@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAH@Z
?ndisGetHigherFilterWithPnpRef@@YGPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PAU1@W4_NDIS_FPNP_REFTAG@@@Z
?ndisGetListEntriesCount@@YGKPAU_SINGLE_LIST_ENTRY@@@Z
?ndisGetLowerFilterWithPnpRef@@YGPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PAU1@W4_NDIS_FPNP_REFTAG@@@Z
?ndisGetMaxNumRssProcessors@@YGKPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisGetMiniDriverFromMiniDriverContext@@YGPAU_NDIS_M_DRIVER_BLOCK@@PAUNDIS_MINIPORT_DRIVER_CONTEXT__@@@Z
?ndisGetMiniportFromAdapterContext@@YGPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_MINIPORT_ADAPTER_CONTEXT__@@@Z
?ndisGetMiniportIfBlock@@YGPAU_NDIS_IF_BLOCK@@PAU1@@Z
?ndisGetMiniportInfo@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES@@PAJPAE2@Z
?ndisGetMiniportOffloadCapability@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisGetNDKBlock@@YGPAU_NDIS_NDK_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisGetNewPatternEntryId@@YGKPAU_SINGLE_LIST_ENTRY@@@Z
?ndisGetNsiClientInfo@@YGXPAU_NDIS_NSI_CLIENT_INFO@@@Z
?ndisGetNsiClientInfoForThread@@YGXPAU_ETHREAD@@PAU_NDIS_NSI_CLIENT_INFO@@@Z
?ndisGetNthEntry@@YGPAU_NDIS_EVENT_LOG_ENTRY@@PAU_NDIS_EVENT_LOG@@K@Z
?ndisGetOidSourceHandle@@YGPAXPAU_NDIS_OID_REQUEST@@@Z
?ndisGetOrCreateFilterInstanceKey@@YGHPBU_UNICODE_STRING@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@EPAEPAU1@@Z
?ndisGetPatternEffectivePriority@@YGKPAU_NDIS_PACKET_PATTERN_ENTRY@@@Z
?ndisGetPciDeviceCustomProperties@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PCI_DEVICE_CUSTOM_PROPERTIES@@@Z
?ndisGetPerformanceCounters@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAH@Z
?ndisGetPortList@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAPAU_NDIS_PORT@@@Z
?ndisGetPowerInfo@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAH@Z
?ndisGetRWLockVerifierContext@@YGPAUNDIS_VERIFY_RW_LOCK_EX@@PAU_NDIS_RW_LOCK_EX@@@Z
?ndisGetRdmaCapabilities@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisGetServiceNameFromRegPath@@YGXPAU_UNICODE_STRING@@0@Z
?ndisGetTaskBytes@@YGKPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisGetTimeInterval@@YG_KPAT_LARGE_INTEGER@@@Z
?ndisGetVPortBlockForRequest@@YGPAU_NDIS_VPORT_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PBU_NDIS_OID_REQUEST@@@Z
?ndisGetWakeUpPatternSize@@YGIPAU_NDIS_PM_PACKET_PATTERN@@@Z
?ndisGetWoLPatternSize@@YGIPAU_NDIS_PM_WOL_PATTERN@@@Z
?ndisGrabOidCancellationList@@YGXPAU_LIST_ENTRY@@0PAXE@Z
?ndisHandleFilterHandlersChange@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisHandleLegacyTransport@@YGJPBU_UNICODE_STRING@@@Z
?ndisHandlePnPRequest@@_Y2PAGENPNP@@GJPAU_IRP@@@Z
?ndisHashCallstack@@YGKPAKK@Z
?ndisIMCheckDeviceInstance@@YGEPAU_NDIS_M_DRIVER_BLOCK@@PAU_UNICODE_STRING@@PAPAX@Z
?ndisIMDeleteIfStackEntry@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIMInitializeDeviceInstanceInternal@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAX@Z
?ndisIMQueueDeviceInstance@@YGHPAU_NDIS_M_DRIVER_BLOCK@@PBU_UNICODE_STRING@@PAX@Z
?ndisIMVBusIsValidInput@@YGEPAXPAU_NDIS_VBUS_DEVICE_CHARACTERISTICS@@@Z
?ndisIdleCancelWorkItem@@YGXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisIdleWaitWakeCallback@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisIfAliasChange@@YGJPBU_UNICODE_STRING@@0@Z
?ndisIfAllocateAndVerifyNetLuidIndex@@YGHGPAIEE@Z
?ndisIfCompartmentStateSubsystemInitialize@@YGJXZ
?ndisIfCompartmentSubsystemInitializePhase2@@YGJXZ
?ndisIfCompartmentSubsystemInitializePhase3@@YGJXZ
?ndisIfCreateFilterInterface@@YGHPAU_NDIS_FILTER_BLOCK@@@Z
?ndisIfCreateInterface@@YGJPAU_NDIS_IF_NETWORK_BLOCK@@EPAU_NDIS_NSI_COMPARTMENT_RW@@PBT_NET_LUID_LH@@PBU_GUID@@PBUNdisNetworkInterfacePersistedState@@PAU_NDIS_FILTER_BLOCK@@W4NdisIfBlockSource@@@Z
?ndisIfCreateNetwork@@YGJPAU_GUID@@I@Z
?ndisIfCreateOrUpdateInterface@@YGXABU_GUID@@@Z
?ndisIfDeleteStackEntries@@YGXPAU_NDIS_IF_BLOCK@@@Z
?ndisIfDereferenceCompartmentForUser@@YGJPAX@Z
?ndisIfDereferenceMiniport@@YGXPAU_NDIS_IF_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MPIF_REFTAG@@@Z
?ndisIfDeregisterInterfaceEx@@YGXKW4CallRunMode@@@Z
?ndisIfEnsureNsiInitialized@@YGJXZ
?ndisIfEnumerateNsiObjects@@YGJPAU_NDIS_ENUM_NSI_OBJECTS@@IPAI@Z
?ndisIfExternalProvidedInterfaceSubsystemInitialize@@YGXXZ
?ndisIfFindCompartmentBlock@@YGPAU_NDIS_IF_COMPARTMENT_BLOCK@@I@Z
?ndisIfFindCompartmentBlockByGuid@@YGPAU_NDIS_IF_COMPARTMENT_BLOCK@@PBU_GUID@@@Z
?ndisIfFindInterface@@YGPAU_NDIS_IF_BLOCK@@K@Z
?ndisIfFindInterfaceByInterfaceGuid@@YGPAU_NDIS_IF_BLOCK@@PBU_GUID@@@Z
?ndisIfFindInterfaceByNetLuid@@YGPAU_NDIS_IF_BLOCK@@T_NET_LUID_LH@@@Z
?ndisIfFindNetworkBlock@@YGPAU_NDIS_IF_NETWORK_BLOCK@@PBU_GUID@@@Z
?ndisIfFindNextInterfaceByNetLuid@@YGPAU_NDIS_IF_BLOCK@@T_NET_LUID_LH@@@Z
?ndisIfFreeIfIndex@@YGXK@Z
?ndisIfGetCompartmentNamespaceGuid@@YGJIPAU_GUID@@@Z
?ndisIfGetDefaultNetworkGuid@@YG?AU_GUID@@XZ
?ndisIfGetFilterIfAlias@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_IF_COUNTED_STRING_LH@@@Z
?ndisIfGetRcvAddressFromMiniport@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIfIndexAllocatorSubsystemInitialize@@YGXXZ
?ndisIfInitializePhase1@@YGJXZ
?ndisIfInterfaceSubsystemInitialize@@YGJXZ
?ndisIfLuidAllocatorSubsystemInitialize@@YGJXZ
?ndisIfNdisProvidedInterfaceSubsystemInitialize@@YGJXZ
?ndisIfNdisProviderGetHandle@@YGPAX_N@Z
?ndisIfNetworkSubsystemInitializePhase2@@YGJXZ
?ndisIfNsiClientSubsystemInitialize@@YGJXZ
?ndisIfOpenInterfacePersistedStorage@@YGJABU_GUID@@AAVKRegKey@@K@Z
?ndisIfQueryBindingMiniportIfIndex@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAKPAT_NET_LUID_LH@@12@Z
?ndisIfQueryProvider@@YGHPAU_NDIS_IF_BLOCK@@IKPAX@Z
?ndisIfReadInterfaceAddDeviceParameters@@YGJAAUNDIS_MINIPORT_CREATION_CONFIG@@PAU_DEVICE_OBJECT@@@Z
?ndisIfReadNetworkGuidFromKey@@YGJAAVKRegKey@@PAU_GUID@@@Z
?ndisIfReferenceCompartmentForUser@@YGJPAU_GUID@@IPAPAX@Z
?ndisIfReferenceMiniport@@YGPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_IF_BLOCK@@W4_NDIS_MPIF_REFTAG@@@Z
?ndisIfRegisterProviderInternal@@YGHPAU_NDIS_IF_PROVIDER_CHARACTERISTICS@@PAXPAPAX@Z
?ndisIfRemoveIfBlockMiniportAssociation@@YGXPAU_NDIS_IF_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@W4_NET_IF_ADMIN_STATUS@@@Z
?ndisIfScheduleTimestampCapabilityChangeNotification@@YGEPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisIfSessionObjectSubsystemInitialize@@YGXXZ
?ndisIfSetIfDescr@@YGHPAU_NDIS_IF_DESCR_INFORMATION@@@Z
?ndisIfSetInterfaceState@@YGEPAU_NDIS_MINIPORT_BLOCK@@EE@Z
?ndisIfStackTableSubsystemInitialize@@YGXXZ
?ndisIfThreadObjectSubsystemInitialize@@YGJXZ
?ndisIfUpdateCurrentMacAddress@@YG_NPAU_NDIS_IF_BLOCK@@PBU_IF_PHYSICAL_ADDRESS_LH@@@Z
?ndisIfUpdateCurrentMacAddressAndNotify@@YGXPAU_NDIS_IF_BLOCK@@PBU_IF_PHYSICAL_ADDRESS_LH@@@Z
?ndisIfUpdateFilterIfStack@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIfUpdateInterfaceHiddenFlag@@YGXPAU_NDIS_IF_BLOCK@@_N@Z
?ndisIfUpdateInterfaceIsolationNetworkId@@YGJPAU_NDIS_IF_BLOCK@@ABU_GUID@@E@Z
?ndisIfUpdateInterfaceIsolationNetworkIdLocked@@YGJPAU_NDIS_IF_BLOCK@@ABU_GUID@@E@Z
?ndisIfUpdateInterfaceOnAddDevice@@YGHPAU_NDIS_IF_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIfUpdateInterfaceOnInitialize@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_IF_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES@@@Z
?ndisIfUpdateL2MtuSize@@YG_NPAU_NDIS_IF_BLOCK@@K@Z
?ndisIfUpdateL2MtuSizeAndNotify@@YGXPAU_NDIS_IF_BLOCK@@K@Z
?ndisIfUpdatePersistedInterfaceInfo@@YGHPAEKK0@Z
?ndisIfWriteBackPersistedInterface@@YGJPAU_NDIS_IF_BLOCK@@@Z
?ndisImmediateReadWriteSharedMemory@@YGXPAXKPAEKE@Z
?ndisIncrementAsyncIdleCountersLocked@@YGEPAU_NDIS_SELECTIVE_SUSPEND@@KW4_NDIS_SS_BUSY_REASON@@@Z
?ndisIncrementSyncIdleCountersLocked@@YGXPAU_NDIS_SELECTIVE_SUSPEND@@W4_NDIS_SS_BUSY_REASON@@K@Z
?ndisIndicateAllNetBufferLists@@YGXPAU_NDIS_NBL_RCV_TRACKER@@PAU_NDIS_OPEN_BLOCK@@@Z
?ndisIndicateInitialStateToBinding@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisIndicateInitialStateToFilter@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisIndicateOffloadChangeInternal@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAXK@Z
?ndisIndicatePMCapabilities@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIndicateStatusInternal@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@E@Z
?ndisIndicateToPmodeOpens@@YGXPAU_NDIS_NBL_RCV_TRACKER@@@Z
?ndisIndicateXlatedPacketsToNdis5Protocols@@YGXPAU_NDIS_NBL_RCV_TRACKER@@@Z
?ndisInitModeTimeoutDpc@@YGXPAX000@Z
?ndisInitModeTimeoutWorkItem@@_Y2PAGE@@GXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisInitialBindCompleted@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisInitializeAdapter@@YGHPAU_NDIS_M_DRIVER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PBU_UNICODE_STRING@@PAX@Z
?ndisInitializeConfiguration@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAX@Z
?ndisInitializeDirectedWolPattern@@YGXPAEKPAU_RTL_BITMAP@@PAPAE@Z
?ndisInitializeMiniportRestartAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisInitializeNdisOffload@@YGXPAU_NDIS_OFFLOAD@@KK@Z
?ndisInitializeNetPnPEvent@@YGXPAU_NET_PNP_EVENT_NOTIFICATION@@PAU_KEVENT@@@Z
?ndisInitializePerProcRcvTracker@@YGXXZ
?ndisInitializePerProcessorSlotAllocator@@YGXXZ
?ndisInitializePeriodicReceives@@YGHXZ
?ndisInitializeRWLock@@YGEPAU_NDIS_RW_LOCK_EX@@PAX@Z
?ndisInitializeRef@@YGXPAU_REFERENCE_EX@@E@Z
?ndisInitializeStackTraces@@YGXXZ
?ndisInitializeULongRef@@YGXPAU_ULONG_REFERENCE@@@Z
?ndisInitializeWolPatternMetadata@@YGXPAU_NDIS_PM_WOL_PATTERN@@KKKK@Z
?ndisInitializeZeroBasedRef@@YGXPAU_REFERENCE_EX@@E@Z
?ndisInsertInWorkQueue@@YGXPAU_NDIS_WORK_QUEUE@@PAU_WORK_QUEUE_ITEM@@E@Z
?ndisInsertPatternListEntry@@YGXPAU_SINGLE_LIST_ENTRY@@PAU_NDIS_PACKET_PATTERN_ENTRY@@@Z
?ndisInternalAddRSSv2Entry@@YGXPAU_NDIS_RSS_DPC_WORKER_CONTEXT@@KKGKU_PROCESSOR_NUMBER@@@Z
?ndisInternalDeregisterMiniportDriver@@YGXPAX@Z
?ndisInternalRegisterMiniportDriver@@YGHPAU_DRIVER_OBJECT@@PAU_UNICODE_STRING@@PAXPAU_NDIS_MINIPORT_DRIVER_CHARACTERISTICS@@PAPAX@Z
?ndisInternalSetRSSInitialize@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@K@Z
?ndisInternalSetRSSv2IndirectionTable@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@GPAU_PROCESSOR_NUMBER@@U3@G22@Z
?ndisInternalSetRSSv2Parameters@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@KKGKKPAX@Z
?ndisInvokeBindAdapter@@YGHPAU_NDIS_PROTOCOL_BLOCK@@PAXPAU_NDIS_BIND_PARAMETERS@@@Z
?ndisInvokeCloseAdapterComplete@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisInvokeDeviceReset@@YGJPAU_NDIS_DEVICE_OBJECT_OPEN_CONTEXT@@KPAU_NDIS_INVOKE_DEVICE_RESET@@W4_NDIS_MP_REFTAG@@@Z
?ndisInvokeMiniportSysPowerNotify@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_SYSTEM_POWER_STATE@@1@Z
?ndisInvokeNetPnPEvent@@YGHPAU_NDIS_PROTOCOL_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisInvokeNextReceiveCompleteHandler@@YGXPAU_NET_BUFFER_LIST@@KPAU_NDIS_OBJECT_HEADER@@1PAXP6GX20K@Z@Z
?ndisInvokeNextReceiveHandler@@YGXPAU_NET_BUFFER_LIST@@KKKPAU_NDIS_OBJECT_HEADER@@PAXP6GX20KKK@Z@Z
?ndisInvokeNextSendCompleteHandler@@YGXPAU_NET_BUFFER_LIST@@KPAU_NDIS_OBJECT_HEADER@@1PAXP6GX20K@Z@Z
?ndisInvokeNextSendHandler@@YGXPAU_NET_BUFFER_LIST@@KKPAU_NDIS_OBJECT_HEADER@@PAXP6GX20KK@Z@Z
?ndisInvokeOidRequestComplete@@YGXPAXPAU_NDIS_OID_REQUEST@@H@Z
?ndisInvokeOpenAdapterComplete@@_Y2PAGE@@GXPAU_NDIS_OPEN_BLOCK@@H@Z
?ndisInvokeSetOptions@@_Y2PAGE@@GHPAU_NDIS_PROTOCOL_BLOCK@@PAU_NDIS_PROTOCOL_DRIVER_CHARACTERISTICS@@@Z
?ndisInvokeStatus@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisInvokeUnbindAdapter@@YGHPAU_NDIS_PROTOCOL_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAU_NDIS_BIND_CONTEXT@@@Z
?ndisInvokeUninstall@@YGXPAU_NDIS_PROTOCOL_BLOCK@@@Z
?ndisIovAddSwitchToList@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_NIC_SWITCH_BLOCK@@@Z
?ndisIovAddVFToMiniportList@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_VF_BLOCK@@@Z
?ndisIovAddVFToOpenList@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_VF_BLOCK@@@Z
?ndisIovAddVFToSwitchList@@YGXPAU_NDIS_NIC_SWITCH_BLOCK@@PAU_NDIS_VF_BLOCK@@@Z
?ndisIovAddVPortToMiniportList@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovAddVPortToOpenList@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovAddVPortToPFList@@YGXPAU_NDIS_PF_BLOCK@@PAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovAddVPortToSwitchList@@YGXPAU_NDIS_NIC_SWITCH_BLOCK@@PAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovAddVPortToVFList@@YGXPAU_NDIS_VF_BLOCK@@PAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovAllocateVF@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisIovCancelIoctlInvalidate@@YGXPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisIovCancelIoctlNotification@@YGXPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisIovCopyNicSwitchInfo@@YGXPAU_NDIS_NIC_SWITCH_INFO@@PAU_NDIS_NIC_SWITCH_BLOCK@@@Z
?ndisIovCopyVFInfo@@YGXPAU_NDIS_NIC_SWITCH_VF_INFO@@PAU_NDIS_VF_BLOCK@@@Z
?ndisIovCopyVPortInfo@@YGXPAU_NDIS_NIC_SWITCH_VPORT_INFO@@PAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovCreateDefaultNicSwitch@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIovCreateVPort@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisIovDeleteDefaultNicSwitch@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIovDeleteNicSwitch@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisIovDeleteNicSwitchDefaultVPortAndPFBlock@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisIovDeleteVPort@@YGHPAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovFinalizeNicSwitch@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_NIC_SWITCH_PARAMETERS@@PAU_NDIS_NIC_SWITCH_BLOCK@@PAU_NDIS_PF_BLOCK@@PAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovFindSwitchBySwitchId@@YGPAU_NDIS_NIC_SWITCH_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisIovFindVFByVFId@@YGPAU_NDIS_VF_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@G@Z
?ndisIovFindVPortByVPortId@@YGPAU_NDIS_VPORT_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisIovFindVPortByVPortIdInternal@@YGPAU_NDIS_VPORT_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisIovFreeVF@@YGHPAU_NDIS_VF_BLOCK@@@Z
?ndisIovGetNicSwitchList@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAPAU_NDIS_NIC_SWITCH_INFO_ARRAY@@@Z
?ndisIovGetNumberOfQueuesForDefaultVPort@@YGKPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIovHWvRSSSupported@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIovInitVf@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIovInitializeNicSwitch@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_NIC_SWITCH_PARAMETERS@@PAPAU_NDIS_NIC_SWITCH_BLOCK@@PAPAU_NDIS_PF_BLOCK@@PAPAU_NDIS_VPORT_BLOCK@@@Z
?ndisIovIoctlAttach@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisIovIoctlDetach@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisIovIoctlEventComplete@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisIovIoctlInvalidate@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisIovIoctlNotification@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisIovNicSwitchWithoutIovSupported@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIovReadSwitchConfiguration@@YGHPAXPAU_NDIS_NIC_SWITCH_PARAMETERS@@@Z
?ndisIovTeardownVf@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsCompartmentAccessibleByClient@@YGEPBU_NDIS_IF_COMPARTMENT_BLOCK@@PBU_NDIS_NSI_CLIENT_INFO@@E@Z
?ndisIsCompartmentEnumerable@@YGEPBU_NDIS_IF_COMPARTMENT_BLOCK@@@Z
?ndisIsDefaultPortStateOperational@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsFilterVerified@@YG_NPAU_NDIS_FILTER_BLOCK@@@Z
?ndisIsMiniportReady@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsMiniportStarted@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsMiniportVerified@@YGEPAU_NDIS_M_DRIVER_BLOCK@@@Z
?ndisIsNetSetupV1Interface@@YG_NABU_UNICODE_STRING@@@Z
?ndisIsNetSetupV2Interface@@YG_NABU_UNICODE_STRING@@@Z
?ndisIsPMProtocolOffloadSupported@@YGEW4_NDIS_PM_PROTOCOL_OFFLOAD_TYPE@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsPossibleSmuggling@@YGET_NDIS_NBL_TRACKER_OWNER@@0PAX@Z
?ndisIsPowerOfTwo@@YGE_K@Z
?ndisIsPowerReferencedForSelectiveSuspend@@YGEPAU_NDIS_SELECTIVE_SUSPEND@@E@Z
?ndisIsQueryAllStatsOid@@YGEK@Z
?ndisIsRssEnabledForMiniport@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsRssEnabledForRequest@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisIsRssV1Enabled@@YGEPAU_NDIS_RECEIVE_SCALE_PARAMETERS@@@Z
?ndisIsSatisfiedByOidGenStatistics@@YGKK@Z
?ndisIsSystemBooting@@YGEXZ
?ndisIsTargetNonDefaultVPort@@YGEPBU_NDIS_OID_REQUEST@@PAK@Z
?ndisIsTargetTheMiniport@@YGEPBU_NDIS_OID_REQUEST@@@Z
?ndisIsValidIfString@@YGEPBU_IF_COUNTED_STRING_LH@@@Z
?ndisIsValidIfStringParts@@YGEPB_WK@Z
?ndisIsValidMulticastFilter@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisIsValidNblTrackerHistoryBufferSize@@YG_NKK@Z
?ndisIsValidPMAdminConfigState@@YGHW4_NDIS_PM_ADMIN_CONFIG_STATE@@0@Z
?ndisIsValidPMConfig@@YGEPAU_NDIS_PM_PARAMETERS@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsValidPMProtocolOffload@@YGEPAU_NDIS_PM_PROTOCOL_OFFLOAD@@@Z
?ndisIsValidPmCountedString@@YGEPAU_NDIS_PM_COUNTED_STRING@@@Z
?ndisIsValidWakeupEnableConfig@@YGEKPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIsValidWoLPattern@@YGEPAU_NDIS_PM_WOL_PATTERN@@I@Z
?ndisIsWoLPacketTypeSupported@@YGEW4_NDIS_PM_WOL_PACKET@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisIssueNetEventSetPowerEvent@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_DEVICE_POWER_STATE@@E@Z
?ndisLWM5PauseMiniport@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_PAUSE_PARAMETERS@@@Z
?ndisLWM5RestartMinport@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_RESTART_PARAMETERS@@@Z
?ndisLWMCreateMiniport@@YGHPAU_NDIS_M_DRIVER_BLOCK@@PBU_GUID@@PAPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisLWMGetServiceKeyFromServiceName@@YGJPBU_UNICODE_STRING@@AAV?$unique_ptr@U_UNICODE_STRING@@U?$KFreePool@U_UNICODE_STRING@@@@@wistd@@@Z
?ndisLWMInitializeHandler@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisLWMOpenConfigurationKey@@YGJABU_GUID@@W4NetSetupStoreType@@AAVKRegKey@@@Z
?ndisLegacyProtocolPauseRestartHandler@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NET_PNP_EVENT@@@Z
?ndisLegacyRequest@@YGHPAXPAU_NDIS_REQUEST@@@Z
?ndisLiveBugCheck@@YGXKKKK@Z
?ndisLoadNetworkInterfaceFromPersistedState@@YGJABU_GUID@@AAVKRegKey@@1@Z
?ndisLogMiniportEvent@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MINIPORT_EVENT@@@Z
?ndisMAbortPackets@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAX@Z
?ndisMAbortRequests@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMAcquireStInLockWithSpinLock@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAE@Z
?ndisMAllocSGList@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PACKET@@@Z
?ndisMAllocSGListS@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PACKET@@@Z
?ndisMAllocateMiniportOffload@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMAllocateRequest@@YGPAU_NDIS_OID_REQUEST@@PAXKW4_NDIS_REQUEST_TYPE@@0K@Z
?ndisMAllowSilentReenumerate@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMApplyInterfaceChange@@YGXPAU_NDIS_MINIPORT_BLOCK@@KPAU_NDIS_STATUS_INDICATION@@@Z
?ndisMBeginNormalMode@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMBindRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PBU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisMCancelSendNetBufferListsOnMiniport@@YGXPAX0@Z
?ndisMCheckForInitModeExit@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMCheckPacketAndPad@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PACKET@@@Z
?ndisMCleanupMiniportBlockOnStop@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMClearStopPowerSavingsForBindings@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMCoFreeResources@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisMCoIndicateReceiveNdisPacketToNdisPacket@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMCoIndicateReceiveNdisPacketToNetBufferLists@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMCoIndicateReceiveNetBufferListsToNdisPacket@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisMCoIndicateReceiveNetBufferListsToNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisMCoOidRequestToRequest@@YGHPAX0PAU_NDIS_OID_REQUEST@@@Z
?ndisMCoSendCompleteToNdisPacket@@YGXHPAXPAU_NDIS_PACKET@@@Z
?ndisMCoSendCompleteToNetBufferLists@@YGXHPAXPAU_NDIS_PACKET@@@Z
?ndisMCoSendNetBufferListsCompleteToNdisPackets@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisMCoSendNetBufferListsCompleteToNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisMCommonHaltMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisMCopyFromPacketToBuffer@@YGXPAU_NDIS_PACKET@@IIPAEPAI@Z
?ndisMDeQueueWorkItem@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_WORK_ITEM_TYPE@@PAPAXPAP6GXPAX3@Z@Z
?ndisMDeRegisterPDCTaskClient@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDeferredDpc@@YGXPAU_KDPC@@PAX11@Z
?ndisMDeferredReturnPackets@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDeferredSend@@YIEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDeferredSendPackets@@YIEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDeferredSendPacketsSG@@YIEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDeferredSendSG@@YIEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDeleteMiniportBlockOnRemove@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDereferenceIfBlock@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MPIF_REFTAG@@@Z
?ndisMDereferenceOpenLocked@@YGXPAU_NDIS_OPEN_BLOCK@@W4_NDIS_OPEN_REFTAG@@@Z
?ndisMDereferenceOpenUnlocked@@YGXPAU_NDIS_OPEN_BLOCK@@W4_NDIS_OPEN_REFTAG@@@Z
?ndisMDeregisterBugCheckHandler@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDirectOidRequest@@YGHPAXPAU_NDIS_OID_REQUEST@@@Z
?ndisMDispatchReceiveNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisMDispatchReceiveNetBufferListsWithLock@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisMDoDirectOidRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@E@Z
?ndisMDoMiniportOp@@YGJPAU_NDIS_MINIPORT_BLOCK@@EKPAXJJE@Z
?ndisMDoOidRequest@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDoProtocolRequest@@YGKPAU_NDIS_OPEN_BLOCK@@EKPAXJJE@Z
?ndisMDoesCurrentChangeNotificationRequireUnbind@@YG_NPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_DRIVER_BLOCK@@@Z
?ndisMDoesMiniportNeedCoNdisNdProxy@@YG_NPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMDummyIndicatePacket@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMDummyReceiveNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisMEvaluateMagicPacketWake@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PM_WAKE_PACKET@@@Z
?ndisMExitInitMode@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4CallRunMode@@@Z
?ndisMFakeDirectOidRequest@@YGHPAXPAU_NDIS_OID_REQUEST@@@Z
?ndisMFakeOidRequest@@YGHPAXPAU_NDIS_OID_REQUEST@@@Z
?ndisMFakeRequest@@YGHPAXPAU_NDIS_REQUEST@@@Z
?ndisMFakeReset@@YGHPAX@Z
?ndisMFakeSend@@YGHPAXPAU_NDIS_PACKET@@@Z
?ndisMFakeSendNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisMFakeSendPackets@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMFakeWanSend@@YGHPAX00@Z
?ndisMFindNumaDistances@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMFindNumaNode@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMFinishClose@@_Y2PAGENPNP@@GXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisMFinishQueuedPendingOpen@@YGXPAX@Z
?ndisMFlushInterfaceChanges@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMFreeSGList@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PACKET@@@Z
?ndisMGetLogData@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisMHaltMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMHandleNDKPnPEvents@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisMIndicateHDSplitChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAXK@Z
?ndisMIndicateHwTimestampCapabilitiesChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@HPAXKEPAE@Z
?ndisMIndicateNetBufferListsToOpen@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NET_BUFFER_LIST@@KKK@Z
?ndisMIndicateNicSwitchCapsChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@HPAXKE@Z
?ndisMIndicateOffloadChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@KPAXK@Z
?ndisMIndicatePMCapabilities@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMIndicatePMHardwareCapabilities@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMIndicatePMOffloadReject@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMIndicatePacket@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMIndicatePacketsToNetBufferLists@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMIndicateQosParametersChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@HPAXK@Z
?ndisMIndicateReceiveFilterCapsChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@HPAXKE@Z
?ndisMIndicateReceiveNblsWithThrottling@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisMIndicateTcpConnectionOffloadChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@KPAXK@Z
?ndisMIndicateVswitchIndirectionTableChange@@YGEPAU_NDIS_MINIPORT_BLOCK@@HPAXK@Z
?ndisMIndicateWoLPatternReject@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMInitializeAdapter@@YGHPAU_NDIS_M_DRIVER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_WRAPPER_CONFIGURATION_HANDLE@@PAU_UNICODE_STRING@@PAX@Z
?ndisMInitializeInitMode@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMInitializeMiniportBlock@@YGXPAU_NDIS_M_DRIVER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@J@Z
?ndisMInitializeMiniportBlockFront@@YGXPAU_NDIS_MINIPORT_BLOCK@@J@Z
?ndisMInitializePDCTaskClient@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMInitializePmParametersForAoAc@@YG?AU_NDIS_PM_PARAMETERS@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMInitializePmParametersForSuspend@@YG?AU_NDIS_PM_PARAMETERS@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMInitializeScatterGatherDmaInternal@@YGHPAXEKK@Z
?ndisMInvokeAddDevice@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMInvokeBlockingOidRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMInvokeCancelDirectOidRequest@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAX@Z
?ndisMInvokeCancelOidRequest@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAX@Z
?ndisMInvokeCheckForHang@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMInvokeDevicePnPEventNotifyHandler@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_DEVICE_PNP_EVENT@@@Z
?ndisMInvokeDevicePowerNotify@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_DEVICE_POWER_STATE@@@Z
?ndisMInvokeDriverUnload@@YGXPAU_NDIS_M_DRIVER_BLOCK@@PAU_DRIVER_OBJECT@@@Z
?ndisMInvokeFilterResourceRequirements@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisMInvokeHalt@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_HALT_ACTION@@@Z
?ndisMInvokeInitialize@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_INIT_PARAMETERS@@@Z
?ndisMInvokeOidRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMInvokePause@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_PAUSE_PARAMETERS@@@Z
?ndisMInvokeRemoveDevice@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMInvokeRestart@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_RESTART_PARAMETERS@@@Z
?ndisMInvokeSetOptions@@YGHPAU_NDIS_M_DRIVER_BLOCK@@@Z
?ndisMInvokeShutdown@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SHUTDOWN_ACTION@@@Z
?ndisMInvokeStartDevice@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisMIsCompartmentAccessibleByClient@@YG_NPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMIsLoopbackNetBuffer@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_BUFFER@@PAU_NET_BUFFER_LIST@@PAE3@Z
?ndisMKillOpen@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisMLiveBugCheck@@YGXPAU_NDIS_MINIPORT_BLOCK@@KKKK@Z
?ndisMLoopbackNetBufferLists@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_BUFFER_LIST@@KKPAPAU2@@Z
?ndisMLoopbackPacketX@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PACKET@@@Z
?ndisMNotifyMachineName@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMOidRequest@@YGHPAXPAU_NDIS_OID_REQUEST@@@Z
?ndisMOidRequestCompleteInternal@@YGXPAXPAU_NDIS_OID_REQUEST@@H1@Z
?ndisMOidRequestToRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMOpenAdapter@@YGXPAHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMPauseMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMPauseMiniportInner@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisMPowerPolicy@@_Y2PAGENPNP@@GJPAU_NDIS_MINIPORT_BLOCK@@W4_SYSTEM_POWER_STATE@@1PAW4_DEVICE_POWER_STATE@@E@Z
?ndisMProcessDeferred@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMProcessResetRequested@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAE@Z
?ndisMProcessSGList@@YGXPAU_DEVICE_OBJECT@@PAU_IRP@@PAU_SCATTER_GATHER_LIST@@PAX@Z
?ndisMProcessSGListS@@YGXPAU_DEVICE_OBJECT@@PAU_IRP@@PAU_SCATTER_GATHER_LIST@@PAX@Z
?ndisMQueueNewWorkItem@@YGHPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_WORK_ITEM_TYPE@@PAXP6GX22@Z@Z
?ndisMQueueOidRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMQueueWorkItem@@YGHPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_WORK_ITEM_TYPE@@PAX@Z
?ndisMQueuedAllocateSharedHandler@@YGXPAX@Z
?ndisMQueuedFinishClose@@YGXPAX@Z
?ndisMQueuedFreeSharedHandler@@YGXPAX@Z
?ndisMQueuedPromoteMiniport@@YGXPAX@Z
?ndisMRawDirectOidRequestComplete@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisMRawIndicateStatusEx@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMRawInvokeCancelDirectOidRequest@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAX@Z
?ndisMRawInvokeCancelOidRequest@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAX@Z
?ndisMRawInvokeDirectOidRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMRawInvokeOidRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMRawOidRequestComplete@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisMReadPciPropertiesFromConfigSpace@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMReenumerateFailedAdapterInternal@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMReferenceIfBlock@@YGPAU_NDIS_IF_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MPIF_REFTAG@@@Z
?ndisMReferenceOpen@@YGXPAU_NDIS_OPEN_BLOCK@@W4_NDIS_OPEN_REFTAG@@@Z
?ndisMRegisterBugCheckHandler@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMRegisterPDCTaskClient@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMRejectSend@@YGHPAXPAU_NDIS_PACKET@@@Z
?ndisMRejectSendPackets@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMReset@@YGHPAX@Z
?ndisMResetCompleteStage1@@YGHPAU_NDIS_MINIPORT_BLOCK@@HE@Z
?ndisMResetCompleteStage2@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMResetMiniportInternal@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MINIPORT_RESET_REASON@@@Z
?ndisMRestartMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisMRestartMiniportInner@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_RESTART_ATTRIBUTES@@@Z
?ndisMRestoreFilterSettings@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@E@Z
?ndisMRestoreOpenHandlers@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisMSend@@YGHPAXPAU_NDIS_PACKET@@@Z
?ndisMSendCompleteNetBufferListsInternal@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisMSendCompleteNetBufferListsToOpen@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NET_BUFFER_LIST@@KPAUNDIS_PCW_CONTEXT@@@Z
?ndisMSendCompletePacketToNetBufferLists@@YGXPAXPAU_NDIS_PACKET@@H@Z
?ndisMSendCompleteSG@@YGXPAXPAU_NDIS_PACKET@@H@Z
?ndisMSendCompleteX@@YGXPAXPAU_NDIS_PACKET@@H@Z
?ndisMSendNBLToMiniport@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisMSendNBLToMiniportInternal@@YGXPAXPAU_NET_BUFFER_LIST@@KKE@Z
?ndisMSendNetBufferListsCompleteInternal@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_BUFFER_LIST@@KE@Z
?ndisMSendNetBufferListsCompleteToNdisPackets@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisMSendNetBufferListsToPackets@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisMSendPacketCompleteToOpen@@YGXPAXPAU_NDIS_PACKET@@H@Z
?ndisMSendPackets@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMSendPacketsSGToMiniport@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMSendPacketsToMiniport@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMSendPacketsToNetBufferLists@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMSendPacketsXToMiniport@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisMSetGeneralAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES@@@Z
?ndisMSetHDSplitAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_HD_SPLIT_ATTRIBUTES@@@Z
?ndisMSetIndicatePacketHandler@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMSetMiniportReadyForBinding@@YGXPAU_NDIS_MINIPORT_BLOCK@@_NW4NDIS_DO_NOT_BIND_REASON@@W4CallRunMode@@@Z
?ndisMSetNDKAttributes@@YGHPAXPAT_NDIS_MINIPORT_ADAPTER_ATTRIBUTES@@@Z
?ndisMSetNative802_11Attributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES@@@Z
?ndisMSetNicSwitchAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES@@@Z
?ndisMSetOffloadAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@1PAU_NDIS_TCP_CONNECTION_OFFLOAD@@2@Z
?ndisMSetQosAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES@@@Z
?ndisMSetReceiveFilterAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES@@@Z
?ndisMSetRssCapabilities@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_RECEIVE_SCALE_CAPABILITIES@@@Z
?ndisMSetSriovAttributes@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES@@@Z
?ndisMShutdownMiniport@@_Y2PAGENPNP@@GJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMStartInitMode@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMStartWanSends@@YIEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMStopPowerSavingsForBindings@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisMSwapOpenHandlers@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisMTimerDpc@@YGXPAU_KDPC@@PAX11@Z
?ndisMTimerDpcX@@YGXPAU_KDPC@@PAX11@Z
?ndisMTopReceiveNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisMTransferData@@YGHPAX0IIPAU_NDIS_PACKET@@PAI@Z
?ndisMUnload@@YGXPAU_DRIVER_OBJECT@@@Z
?ndisMUnloadEx@@YGXPAU_DRIVER_OBJECT@@@Z
?ndisMUpdateHiddenFlag@@YGXPAU_NDIS_MINIPORT_BLOCK@@_N@Z
?ndisMUpdateInterfaceWorker@@YGXPAX@Z
?ndisMUpdateNameOnPMWakePacket@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PM_WAKE_PACKET@@@Z
?ndisMUpdateRcvFilterQueueParameters@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAXK@Z
?ndisMValidatePMWakePacket@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMValidatePMWakePacketForMagicPacket@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PM_WAKE_PACKET@@@Z
?ndisMValidatePMWakeReason@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMWakeUpDpc@@YGXPAX000@Z
?ndisMWakeUpDpcX@@YGXPAX000@Z
?ndisMWanSend@@YGHPAX00@Z
?ndisMWanSendCompleteInternal@@YGXPAX0H@Z
?ndisMakeWatchdog@@YG?AV?$unique_any_t@V?$unique_storage@U?$resource_policy@PAUNDISWATCHDOG__@@P6GXPAU1@@Z$1?ndisFreeWatchdog@@YGX0@ZU?$integral_constant@I$00@wistd@@PAU1@H$0?0$$T@details@wil@@@details@wil@@@wil@@PAXK0KK@Z
?ndisMarkNetBufferListCorrelationIdsAsUsed@@YGXPAU_NET_BUFFER_LIST@@@Z
?ndisMediaDisconnectComplete@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisMediaDisconnectTimeout@@YGXPAX000@Z
?ndisMediaDisconnectWorker@@YGXPAX@Z
?ndisMergeEncapsulations@@YGHPAU_NDIS_OFFLOAD_ENCAPSULATION@@0@Z
?ndisMergeOffloadCapsAndRegistry@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD@@@Z
?ndisMergeRSSv2DirectOidResults@@YGXPAU_NDIS_RSS_SET_INDIRECTION_ENTRIES@@KPAU_PROCESSOR_NUMBER@@U2@K11PAH@Z
?ndisMethodDeviceOid@@YGHPAU_NDIS_USER_OPEN_CONTEXT@@PAU_NDIS_OID_REQUEST@@PAEII@Z
?ndisMiniportFatalError@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MINIPORT_EVENT@@@Z
?ndisMiniportPostAddWOLPattern@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMiniportPostAddWakeUpPattern@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMiniportPostRemoveWoLPattern@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMiniportPreAddProtocolOffload@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisMiniportPreAddWoLPattern@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisMiniportPreRemoveWOLPattern@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisMiniportQueryDevicePropertyData@@YGJPAU_NDIS_MINIPORT_BLOCK@@ABU_DEVPROPKEY@@PAPA_W@Z
?ndisMiniportXStateClearFlag@@YGEPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisMoveLinkedList@@YGXPAU_LIST_ENTRY@@0@Z
?ndisMpHookDefaultDirectOidRequestComplete@@YGXPAXPAUNDIS_MINIPORT_HOOK_ADAPTER_HANDLE__@@PAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisMpHookDefaultIndicateStatus@@YGXPAXPAUNDIS_MINIPORT_HOOK_ADAPTER_HANDLE__@@PAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMpHookDefaultOidRequestComplete@@YGXPAXPAUNDIS_MINIPORT_HOOK_ADAPTER_HANDLE__@@PAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisMpHookGetHook@@YG?AV?$KRundownPtr@$$CBUNDIS_MINIPORT_HOOK_PROVIDER_INFO@@@@W4_NDIS_MINIPORT_HOOK_DRIVER_TYPE@@@Z
?ndisMpHookGetHookAdapterHandle@@YGPAUNDIS_MINIPORT_HOOK_ADAPTER_HANDLE__@@PAUNDIS_MINIPORT_ADAPTER_CONTEXT__@@@Z
?ndisMpHookGetHookDriverHandle@@YGPAUNDIS_MINIPORT_HOOK_DRIVER_HANDLE__@@PAUNDIS_MINIPORT_DRIVER_CONTEXT__@@@Z
?ndisMpHookGetHookUnsafe@@YGPBUNDIS_MINIPORT_HOOK_PROVIDER_INFO@@W4_NDIS_MINIPORT_HOOK_DRIVER_TYPE@@@Z
?ndisMpHookInvokeCancelDirectOidRequestHandler@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAX@Z
?ndisMpHookInvokeCancelOidRequestHandler@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAX@Z
?ndisMpHookInvokeDirectOidRequestHandler@@YGHPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMpHookInvokeOidRequestHandler@@YGHPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@@Z
?ndisMpHookNmrClientAttachProvider@@YGJPAX0PBU_NPI_REGISTRATION_INSTANCE@@@Z
?ndisMpHookNmrClientDetachProvider@@YGJPAX@Z
?ndisMpHookNmrInitializeClient@@YGJXZ
?ndisMpHookRawDirectOidRequestComplete@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisMpHookRawIndicateStatus@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisMpHookRawOidRequestComplete@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisMpHookSetAdapterContext@@YGXPAUNDIS_MINIPORT_ADAPTER_HANDLE__@@PAUNDIS_MINIPORT_HOOK_ADAPTER_HANDLE__@@@Z
?ndisMpHookSetDriverContext@@YGXPAUNDIS_MINIPORT_DRIVER_HANDLE__@@PAUNDIS_MINIPORT_HOOK_DRIVER_HANDLE__@@@Z
?ndisNDKCheckIfEnabledOnMiniport@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNDKCleanup@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNDKGlobalDisabled@@YGEXZ
?ndisNDKHandleWmiChangeRequest@@YGJPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisNDKWmiGetAdapterCapabilities@@YGXPAU_NDIS_MINIPORT_BLOCK@@KPAU_NDIS_WMI_NDK_CAPABILITIES@@@Z
?ndisNblTrackerDebugBreak@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?ndisNblTrackerDeleteTracker@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?ndisNblTrackerHandleFromNdisObjectHandle@@YGPAUNDIS_NBL_TRACKER_HANDLE__@@PAU1@@Z
?ndisNblTrackerInitialize@@YGXXZ
?ndisNblTrackerNotifyStuckNbl@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?ndisNblTrackerPrintComponentNameToDebugger@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?ndisNblTrackerReadConfiguration@@YGXXZ
?ndisNblTrackerRecordEventInternal@@YGXPAU_NET_BUFFER_LIST@@PAUNDIS_NBL_TRACKER_HANDLE__@@KPAXK@Z
?ndisNblTrackerReportStuckNbl@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?ndisNblTrackerSetSqmFlag@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?ndisNblTrackerTransferOneNbl@@YGXPAU_NET_BUFFER_LIST@@T_NDIS_NBL_TRACKER_OWNER@@PAUNDIS_NBL_TRACKER_HANDLE__@@1PAXPAJ4@Z
?ndisNblTrackerTransferOwnershipInternal@@YGXPAU_NET_BUFFER_LIST@@PAUNDIS_NBL_TRACKER_HANDLE__@@1W4_NDIS_NBL_TRACKER_OWNERSHIP_EVENT@@K@Z
?ndisNblTrackerTransferOwnershipSingleNbl@@YGXPAU_NET_BUFFER_LIST@@PAUNDIS_NBL_TRACKER_HANDLE__@@1E@Z
?ndisNblTrackerUpdateOwnershipCount@@YGXT_NDIS_NBL_TRACKER_OWNER@@JPAE1@Z
?ndisNblTrackerVerifyNoNblsHeld@@YGXPAU_NDIS_NBL_TRACKER@@@Z
?ndisNblTrackerWatchdogTimer@@YGXPAU_EX_TIMER@@PAX@Z
?ndisNblVerifyRxCompletion@@YGXPBU_NET_BUFFER_LIST@@KPBU_NDIS_OBJECT_HEADER@@@Z
?ndisNblVerifyRxIndication@@YGXPBU_NET_BUFFER_LIST@@KKKPBU_NDIS_OBJECT_HEADER@@W4_NDIS_MEDIUM@@@Z
?ndisNblVerifyTxCompletion@@YGXPBU_NET_BUFFER_LIST@@KPBU_NDIS_OBJECT_HEADER@@@Z
?ndisNblVerifyTxIndication@@YGXPBU_NET_BUFFER_LIST@@KKPBU_NDIS_OBJECT_HEADER@@@Z
?ndisNdkPcwMiniportCleanup@@YGXPAX@Z
?ndisNdkPcwProviderCallback@@YGJW4_PCW_CALLBACK_TYPE@@PAT_PCW_CALLBACK_INFORMATION@@PAX@Z
?ndisNetBufferToPacket@@YGHPAU_NET_BUFFER@@EPAPAU_NDIS_PACKET@@@Z
?ndisNicActiveAcquire@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_DEVICE_OBJECT_OPEN_CONTEXT@@PAU_NDIS_PM_NIC_ACTIVE@@PAU_IRP@@@Z
?ndisNicActiveRelease@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_DEVICE_OBJECT_OPEN_CONTEXT@@PAU_NDIS_PM_NIC_ACTIVE@@@Z
?ndisNicActiveRequestComplete@@YGXPAU_NDIS_MINIPORT_BLOCK@@J@Z
?ndisNicAutoPowerSaverControlIdleTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNicAutoPowerSaverResetTelemetryData@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNicQuietCheckRef@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNicQuietRequestComplete@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisNicQuietWaitWakeCallback@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisNotifyAfRegistration@@YGXPAX@Z
?ndisNotifyBindFailure@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@@Z
?ndisNotifyBindFailureOnUnboundProtocols@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNotifyMiniports@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_DEVICE_PNP_EVENT@@PAXK@Z
?ndisNotifyWmiBindUnbind@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@E@Z
?ndisNsiChangeInterfaceInfo@@YGJPAU_NDIS_IF_BLOCK@@PAU_NDIS_NSI_INTERFACE_INFORMATION_RW@@KKPAK@Z
?ndisNsiEnumerateAllCompartments@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiEnumerateAllIfRcvAddresses@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiEnumerateAllIfStackEntries@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiEnumerateAllIfStackEntriesFull@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiEnumerateAllInterfaceInformation@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiEnumerateAllInvertedIfStackEntries@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiEnumerateAllNetworks@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiEnumerateAllSessionInformation@@YGJPAU_NM_REQUEST_ENUMERATE_OBJECTS_ALL_PARAMETERS@@@Z
?ndisNsiGetAllIfRcvAddress@@YGJPAU_NM_REQUEST_GET_ALL_PARAMETERS@@@Z
?ndisNsiGetAllInterfaceInformation@@YGJPAU_NM_REQUEST_GET_ALL_PARAMETERS@@@Z
?ndisNsiGetAllJobInformation@@YGJPAU_NM_REQUEST_GET_ALL_PARAMETERS@@@Z
?ndisNsiGetAllSessionInformation@@YGJPAU_NM_REQUEST_GET_ALL_PARAMETERS@@@Z
?ndisNsiGetAllThreadInformation@@YGJPAU_NM_REQUEST_GET_ALL_PARAMETERS@@@Z
?ndisNsiGetAllTimestampingInformation@@YGJPAU_NM_REQUEST_GET_ALL_PARAMETERS@@@Z
?ndisNsiGetCompartmentIdForGuid@@YGJPAU_NM_REQUEST_GET_PARAMETER@@@Z
?ndisNsiGetCompartmentInfo@@YGJPAU_NM_REQUEST_GET_PARAMETER@@@Z
?ndisNsiGetIfNameForIfIndex@@YGJPAU_NM_REQUEST_GET_PARAMETER@@@Z
?ndisNsiGetIfRcvAddress@@YGJPAU_NM_REQUEST_GET_PARAMETER@@@Z
?ndisNsiGetInterfaceInformation@@YGJPAU_NM_REQUEST_GET_PARAMETER@@@Z
?ndisNsiGetNetworkInfo@@YGJPAU_NM_REQUEST_GET_PARAMETER@@@Z
?ndisNsiGetTopIfBlockFromMiniport@@YGPAU_NDIS_IF_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNsiNotifyClientCompartmentChange@@YGXPAU_NDIS_IF_COMPARTMENT_BLOCK@@W4_NSI_NOTIFICATION@@@Z
?ndisNsiNotifyClientInterfaceChange@@YGXPAU_NDIS_IF_BLOCK@@W4_NSI_NOTIFICATION@@PAU_NSI_SINGLE_PARAM_DESC@@W4_NDIS_NSI_OBJECT_INDEX@@@Z
?ndisNsiPostGetInterfaceRodInformation@@YGXPAU_NDIS_IF_BLOCK@@IKPAX@Z
?ndisNsiScheduleIfBlockRodChangeNotification@@YGJPAU_NDIS_IF_BLOCK@@PAEKK@Z
?ndisNsiSetAllCompartment@@YGJPAU_NM_REQUEST_SET_ALL_PARAMETERS@@@Z
?ndisNsiSetAllJobInformation@@YGJPAU_NM_REQUEST_SET_ALL_PARAMETERS@@@Z
?ndisNsiSetAllNetworkInfo@@YGJPAU_NM_REQUEST_SET_ALL_PARAMETERS@@@Z
?ndisNsiSetAllSessionInformation@@YGJPAU_NM_REQUEST_SET_ALL_PARAMETERS@@@Z
?ndisNsiSetAllThreadInformation@@YGJPAU_NM_REQUEST_SET_ALL_PARAMETERS@@@Z
?ndisNsiSetInterfaceInformation@@YGJPAU_NM_REQUEST_SET_PARAMETER@@@Z
?ndisNsiSetNetworkInfo@@YGJPAU_NM_REQUEST_SET_PARAMETER@@@Z
?ndisNsiSetThreadInformation@@YGJPAU_NM_REQUEST_SET_PARAMETER@@@Z
?ndisNsiSyncMiniportOperStatusNotification@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisNumNbsInNblChain@@YGKPBU_NET_BUFFER_LIST@@@Z
?ndisOidCloneForCompatibility@@YGHPAU_NDIS_OBJECT_HEADER@@PAU_NDIS_OID_REQUEST@@EPAPAU2@@Z
?ndisOidFreeInternalCloneRequest@@YGXPAU_NDIS_OBJECT_HEADER@@PAU_NDIS_OID_REQUEST@@EPAPAU2@@Z
?ndisOidGetStatisticAllProcessors@@YGEPAU_NDIS_MINIPORT_STATS@@KPA_K@Z
?ndisOidPMAddRemove@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisOidPMRemove@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisOidPostAddPMProtocolOffload@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostCurrentLookahead@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostEnableWakeUp@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostEthMulticastList@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostEthMulticastOid@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovAllocateVF@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovCreateNicSwitch@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovCreateVPort@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovDeleteNicSwitch@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovDeleteVPort@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovFreeVF@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovNicSwitchParameters@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostIovVPortParameters@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostLinkSpeed@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostMaxLookahead@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostMediaState@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostMiniportSetEncapsulation@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostMiniportStats@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostOffloadEncapsulation@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostOpenSetEncapsulation@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostPMAddWOLPattern@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostPMParameters@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostPMRemoveWOLPattern@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostPacketFilter@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRSSParameters@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRSSv2Parameters@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRcvFilterAllocateQueue@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRcvFilterClearFilter@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRcvFilterFreeQueue@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRcvFilterMoveFilter@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRcvFilterQueueParameters@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRcvFilterSetFilter@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostRemovePMProtocolOffload@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostStatistics@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostTaskOffload@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostTcpConnectionOffloadParameters@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostWakeUpPatternList@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPostWolPatternList@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreAddPMProtocolOffload@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreAddWakeUpPattern@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreCrossTimestamp@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreCurrentLookahead@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreDriverVersion@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreEnableWakeUp@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreEnumeratePorts@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreEthAddress@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreEthMulticastList@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreEthMulticastOid@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreFriendlyName@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreGenReceiveScale@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreGenStats@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreGetPMProtocolOffload@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreGetPciDeviceCustomProperties@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreHDSplitCurrentConfig@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovAllocateVF@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovBarResources@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovCaps@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovCreateNicSwitch@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovCreateVPort@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovDeleteNicSwitch@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovDeleteVPort@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovEnumNicSwitches@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovEnumVFs@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovEnumVPorts@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovFreeVF@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovGetVFVendorDeviceId@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovInvalidateConfigBlock@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovNicSwitchParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovOverlyingAdapterInfo@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovPfLuid@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovProbedBars@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovReadVFConfigBlock@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovReadVFConfigSpace@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovResetVF@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovSetVFPowerState@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovVFParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovVPortParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovVfSerialNumber@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovWriteVFConfigBlock@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreIovWriteVFConfigSpace@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreLinkSpeedAndMediaState@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreLinkState@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMacAddress@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMacOptions@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMaxFrameOrTotalSize@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMaxLinkSpeed@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMaxListSize@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMaxLookahead@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMediaInUse@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreMiniportSetEncapsulation@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisOidPreMiniportStats@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreNdisIfOidQuery@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreNicSwitchCaps@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreOffloadCaps@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreOffloadEncapsulation@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreOffloadHwCaps@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreOpenSetEncapsulation@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisOidPrePMAddWOLPattern@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePMCapabilities@@YGEPAU_NDIS_REQ_TRACKER@@E@Z
?ndisOidPrePMCurrentCapabilities@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePMHaltOnSuspend@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePMHardwareCapabilities@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePMParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePMProtocolOffloadList@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePMRemoveWOLPattern@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePMWOLPatternList@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePacketFilter@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePhysicalMedium@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePnPCapabilities@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPrePortState@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreProtocolOptions@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreQosCapabilities@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreQosGetParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreQosSetParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreQueryOffloadEncapsulation@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreQueryTcpConnectionParameters@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisOidPreRSSCaps@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRSSParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRSSv2Parameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterAllocateQueue@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterAllocationComplete@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterClearFilter@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterEnumFilters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterEnumQueues@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterFreeQueue@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterGlobalParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterMoveFilter@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterQueueParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRcvFilterSetFilter@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreReceiveFilterCaps@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRemovePMProtocolOffload@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreRemoveWakeUpPattern@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreSetHDSplitParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreSetOffloadEncapsulation@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreSetPortAuthentication@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreStatistics@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreSupportedList@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreTaskOffload@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreTcpConnectionOffload@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreTcpConnectionOffloadHwCaps@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreTcpConnectionOffloadParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreTimestampCapability@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidPreWakeUpPatternList@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidRequestComplete@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisOidTranslateBetweenOids@@YGXPAU_NDIS_MINIPORT_BLOCK@@EPAU_NDIS_OID_REQUEST@@@Z
?ndisOpenAdapterLegacyProtocol@@YGXPAH0PAPAXPAIPAW4_NDIS_MEDIUM@@IPAX4PAU_UNICODE_STRING@@IPAU_STRING@@0@Z
?ndisOpenCancelSendNetBufferLists@@YGXPAX0@Z
?ndisOpenIndicatePMCapabilities@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisOpenIndicatePMOffloadReject@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisOpenIndicateWoLPatternReject@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisOpenRef@@YGXPAU_REFERENCE_EX@@@Z
?ndisOpenULongRef@@YGXPAU_ULONG_REFERENCE@@@Z
?ndisPMAddProtocolOffload@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisPMAddRemoveAsync@@YGXPAX@Z
?ndisPMAddWOLPattern@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisPMPDCTaskClient@@YGXPAX@Z
?ndisPMPatternIdExist@@YGEPAU_SINGLE_LIST_ENTRY@@K@Z
?ndisPMRejectAsync@@YGXPAX@Z
?ndisPacketToNetBuffer@@YGXPAU_NDIS_PACKET@@PAU_NET_BUFFER@@@Z
?ndisParseReceivedNBL@@YGEW4_NDIS_MEDIUM@@PBU_NET_BUFFER_LIST@@PAGPAE@Z
?ndisPauseFilter@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_FILTER_LINK@@@Z
?ndisPauseFilterInner@@YGXPAU_NDIS_FILTER_BLOCK@@K@Z
?ndisPauseProtocol@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_PROTOCOL_LINK@@@Z
?ndisPauseProtocolInner@@YGXPAU_NDIS_OPEN_BLOCK@@K@Z
?ndisPcwAddCounter@@YGJW4_NDIS_COUNTER_SET_ID@@PAU_PCW_COUNTER_INFORMATION@@@Z
?ndisPcwAddCyclesToCycleCounter@@YGXPAUNDIS_PCW_CONTEXT@@KK_K@Z
?ndisPcwAddEvent@@YGXPAUNDIS_PCW_CONTEXT@@K_K@Z
?ndisPcwAddSinglePhysicalInstance@@YGJPAU_PCW_BUFFER@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwCollectData@@YGJPAU_PCW_BUFFER@@@Z
?ndisPcwCollectPhysicalData@@YGJPAU_PCW_BUFFER@@@Z
?ndisPcwDeleteConsumer@@YGXPAU_NDIS_PCW_CONSUMER_BLOCK@@@Z
?ndisPcwEnableAlwaysOnCounters@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwEndCycleCounter@@YGXPAUNDIS_PCW_CONTEXT@@KK@Z
?ndisPcwEnumerateInstances@@YGJPAU_PCW_BUFFER@@@Z
?ndisPcwEnumerateSingleInstance@@YGJPAU_PCW_BUFFER@@PAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisPcwGetInstanceName@@YGJPAU_NDIS_MINIPORT_BLOCK@@KPAU_UNICODE_STRING@@@Z
?ndisPcwGetMiniportDataBlock@@YGPAU_NDIS_PCW_DATA_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwGetMiniportDataBlockInternal@@YGPAU_NDIS_PCW_DATA_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwGetMiniportInstanceId@@YGKPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisPcwGetMiniportName@@YGPBU_UNICODE_STRING@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwGetPerCpuDataForProcessor@@YGPAU_NDIS_PCW_PER_CPU_DATA_BLOCK@@PAU_NDIS_PCW_DATA_BLOCK@@K@Z
?ndisPcwGetReferencesForConsumer@@YGJW4_NDIS_COUNTER_SET_ID@@PAU_PCW_COUNTER_INFORMATION@@PAU_NDIS_PCW_CONSUMER_BLOCK@@@Z
?ndisPcwInitialize@@YGJXZ
?ndisPcwMatchConsumer@@YGEPAU_NDIS_PCW_CONSUMER_BLOCK@@W4_NDIS_COUNTER_SET_ID@@PAU_PCW_COUNTER_INFORMATION@@@Z
?ndisPcwMatchInstance@@YGEPAU_NDIS_MINIPORT_BLOCK@@KPBU_UNICODE_STRING@@@Z
?ndisPcwNotifyIfBlockRemoval@@YGXPAU_NDIS_IF_BLOCK@@@Z
?ndisPcwNotifyMiniportCreation@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwNotifyMiniportRemoval@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwQueryPcfMatchCount@@YG_KPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPcwReferenceMiniportDataBlock@@YGXPAU_NDIS_PCW_DATA_BLOCK@@W4_NDIS_COUNTER_SET_ID@@_K@Z
?ndisPcwRemoveCounter@@YGJW4_NDIS_COUNTER_SET_ID@@PAU_PCW_COUNTER_INFORMATION@@@Z
?ndisPcwStartCycleCounter@@YGXPAUNDIS_PCW_CONTEXT@@K@Z
?ndisPcwUpdateMiniportDataBlock@@YGXPAU_NDIS_PCW_DATA_BLOCK@@W4_NDIS_COUNTER_SET_ID@@_KJ@Z
?ndisPcwUpdatePhysicalMiniportCounters@@YGXPAU_NDIS_MINIPORT_BLOCK@@_K@Z
?ndisPdcTaskClientDisableTimeoutDpc@@YGXPAX000@Z
?ndisPdcTaskClientDisableTimeoutWorkItem@@YGXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisPendWorkOnSetBusyAsyncLocked@@YGXPAU_NDIS_SELECTIVE_SUSPEND@@W4_NDIS_SS_BUSY_REASON@@PAXKPAPAU_NET_BUFFER_LIST@@PAU_LIST_ENTRY@@PAE@Z
?ndisPeriodicReceivesAddCpu@@YGXK@Z
?ndisPeriodicReceivesGetMaxNblCount@@YGKPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPeriodicReceivesLearning@@YGXPAU_NDIS_MINIPORT_BLOCK@@KPAT_LARGE_INTEGER@@@Z
?ndisPeriodicReceivesWorker@@YGXPAX@Z
?ndisPktMonFilterRegister@@YGJPAU_NDIS_FILTER_BLOCK@@@Z
?ndisPktMonMiniportRegister@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPktMonOpenRegister@@YGJPAU_NDIS_OPEN_BLOCK@@@Z
?ndisPktMonRegisterComponentsCallback@@YGXXZ
?ndisPmHaltMiniport@@_Y2PAGENPNP@@GXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPmInitializeMiniport@@_Y2PAGENPNP@@GHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPnPAddDevice@@YGJPAU_DRIVER_OBJECT@@PAU_DEVICE_OBJECT@@PAXPAPAX@Z
?ndisPnPCancelRemoveDevice@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPnPCancelStopDevice@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPnPCompleteRemoveDevice@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPnPDispatch@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisPnPHandlePagingIrp@@YGXPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisPnPIrpCancelRemove@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpCancelStop@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpDeviceUsageNotification@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpFilterResourceRequirements@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpQueryCapabilities@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpQueryInterface@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpQueryPnPDeviceState@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpQueryRemove@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpQueryStop@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpRemoveDevice@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpStartDevice@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpStopDevice@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpSurpriseRemoval@@YGJPAU_DEVICE_OBJECT@@PAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAE3@Z
?ndisPnPIrpSurpriseRemovalInner@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPnPNotifyAllTransports@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisPnPNotifyBinding@@_Y2PAGENPNP@@GHPAU_NDIS_OPEN_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisPnPNotifyBindingUnlocked@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisPnPPortActivation@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisPnPPortDeactivation@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_PNP_EVENT_NOTIFICATION@@@Z
?ndisPnPQueryRemoveDevice@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisPnPQuerySriovInterface@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisPnPQueryStopDevice@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisPnPRemoveDevice@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisPnPRemoveDeviceEx@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPnPStartDevice@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisPnPStopDevice@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisPnpInvokeTdi@@YGJW4_NDIS_TDI_VERB@@PBU_UNICODE_STRING@@1PAXK@Z
?ndisPopulateRssProcessorSet@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_RSS_PROCESSOR_INFO@@@Z
?ndisPostOffloadAdminSettings@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisPostOpenSetMulticastList@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisPostProcessRestartParametersAfterFilters@@YG_NPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisPostProcessRestartParametersAfterMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisPostProcessRestartParametersAfterProtocols@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisPostRemoveMiniportWakeUpPattern@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisPostSetAddWakeUpPattern@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisPostSetMiniportRSSParameters@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisPostSetMiniportRSSv2Parameters@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisPostSetOpenPacketFilter@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisPostSetOpenRSSParameters@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisPostSetOpenRSSParametersHelper@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@PAU_NDIS_RECEIVE_SCALE_PARAMETERS@@@Z
?ndisPostSetOpenRSSv2Parameters@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisPostSetRemoveWakeUpPattern@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisPowerDispatch@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisPowerIrpWorker@@YGXPAX@Z
?ndisPowerSaveClearStop@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_STOP_REASON@@@Z
?ndisPowerSaveStop@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_STOP_REASON@@@Z
?ndisPowerStateCallback@@YGJPBU_GUID@@PAXK1@Z
?ndisPowerSuspendRequestComplete@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisPplAllocate@@YGPAXPAUPPL_POOL_HANDLE__@@KPAK@Z
?ndisPplCreatePool@@YGPAUPPL_POOL_HANDLE__@@KKKGE@Z
?ndisPplDestroyPool@@YGXPAUPPL_POOL_HANDLE__@@K@Z
?ndisPplFree@@YGXPAUPPL_POOL_HANDLE__@@KPAX@Z
?ndisPreOffloadAdminSettings@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisPreQueryPMParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisPreRemoveMiniportWakeUpPattern@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisPreRemoveOpenWakeUpPattern@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisPreSetPMParameters@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisPreTaskOffloadQuery@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_REQ_TRACKER@@@Z
?ndisPreTaskOffloadSet@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisPrepForLowPower@@YGJPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_DEVICE_POWER_STATE@@@Z
?ndisPrepForLowPowerCommon@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_DEVICE_POWER_STATE@@@Z
?ndisProcessRequestAsync@@YGXPAX@Z
?ndisPublishSleepStudyCustomData@@YGX_KPBU_GUID@@PB_W0@Z
?ndisPublishSleepStudyCustomDataCsSpuriousWakeStats@@YGX_KPBU_GUID@@PAU_NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS@@PAU_NDIS_MINIPORT_CS_SPURIOUS_WAKE_STATS_EX@@@Z
?ndisPublishSleepStudyCustomDataCsTraffic@@YGX_KPBU_GUID@@PAU_NDIS_MINIPORT_CS_TRAFFIC_STATS@@2@Z
?ndisPublishSleepStudyNicAutoPowerSaverStats@@YGXPAU_NDIS_MINIPORT_BLOCK@@_KPBU_GUID@@@Z
?ndisQueryBusInterface@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisQueryDeviceFlags@@YGXPB_WPA_K@Z
?ndisQueryDeviceOid@@YGHPAU_NDIS_USER_OPEN_CONTEXT@@PAU_NDIS_OID_REQUEST@@KPAXI@Z
?ndisQueryDeviceReset@@YGJPAU_NDIS_DEVICE_OBJECT_OPEN_CONTEXT@@KKPAU_NDIS_QUERY_DEVICE_RESET@@@Z
?ndisQueryDriverImageName@@YGXPAU_UNICODE_STRING@@0@Z
?ndisQueryDriverInterface@@YGJPAU_DEVICE_OBJECT@@PBU_GUID@@GGPAU_INTERFACE@@@Z
?ndisQueryEnableWakeUp@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisQueryFilterInstanceHandlers@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisQueryFilterOffloadCaps@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryMediaStatus@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisQueryMiniportEthMulticastList@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryMiniportOffloadCaps@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryMiniportPacketFilter@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryMiniportRSSParameters@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryMiniportRSSv2Parameters@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryOidList@@YGHPAU_NDIS_USER_OPEN_CONTEXT@@@Z
?ndisQueryOpenEnableWakeUp@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryOpenEthMulticastList@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryOpenPacketFilter@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryOpenRSSParameters@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryOpenRSSv2Parameters@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryPower@@_Y2PAGENPNP@@GJPAU_IRP@@PAU_IO_STACK_LOCATION@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisQueryPowerCapabilities@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisQueryPowerComplete@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisQueryPowerCompleteSystemState@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?ndisQueryRSSv2ParametersHelper@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@K@Z
?ndisQueryReenumerateSelfInterface@@YGJPAU_DEVICE_OBJECT@@PAPAU_DEVICE_RESET_INTERFACE_STANDARD@@@Z
?ndisQueryReferenceBusInterface@@YGJPAU_DEVICE_OBJECT@@PAPAUBUS_INTERFACE_REFERENCE@@@Z
?ndisQuerySetMiniport@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_CO_VC_PTR_BLOCK@@PAU_NDIS_OID_REQUEST@@EPAU_NDIS_FILTER_BLOCK@@@Z
?ndisQuerySetMiniportDeviceState@@YGHPAU_NDIS_MINIPORT_BLOCK@@W4_DEVICE_POWER_STATE@@KE@Z
?ndisQuerySetMiniportEx2@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_CO_VC_PTR_BLOCK@@PAU_NDIS_OID_REQUEST@@EPAU_NDIS_FILTER_BLOCK@@3KPAPAXPAI5@Z
?ndisQuerySetMiniportEx@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_CO_VC_PTR_BLOCK@@PAU_NDIS_OID_REQUEST@@EPAU_NDIS_FILTER_BLOCK@@3@Z
?ndisQueryStatisticsOids@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_USER_OPEN_CONTEXT@@PAKIPAEK2E3@Z
?ndisQueryWakeUpPatternList@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueryWolPatternList@@YGHPAU_SINGLE_LIST_ENTRY@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueueFilterOnDriver@@YGEPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_FILTER_DRIVER_BLOCK@@@Z
?ndisQueueFilterRestart@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisQueueMiniportOnDriver@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_M_DRIVER_BLOCK@@@Z
?ndisQueueOidRequest@@YGHPAU_NDIS_OID_REQUEST@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@2@Z
?ndisQueueOpenOnMiniport@@_Y2PAGENPNP@@GEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@@Z
?ndisQueueOpenOnProtocol@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@@Z
?ndisQueuePeriodicReceivesTimer@@YGXXZ
?ndisQueuePowerIrp@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisQueueReceiveNblsOnMiniport@@YGXPAU_NDIS_SELECTIVE_SUSPEND@@PAU_NET_BUFFER_LIST@@@Z
?ndisQueueRequestOnTopAsync@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisQueueRequestWorkItem@@YGHPAXPAU_NDIS_OID_REQUEST@@I@Z
?ndisQueueRestoreRequestsOnTop@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_LIST_ENTRY@@IE@Z
?ndisQueueSendNblsOnMiniport@@YGXPAU_NDIS_SELECTIVE_SUSPEND@@PAU_NET_BUFFER_LIST@@K@Z
?ndisQueueStackExpansionFallbackNbls@@YGXPAU_NDIS_FILTER_BLOCK@@PAU_NET_BUFFER_LIST@@E@Z
?ndisQueueStackExpansionFallbackWorkItem@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisQueueWorkitem@@YGXPAU_WORK_QUEUE_ITEM@@@Z
?ndisQueuedCheckForHang@@YGXPAX@Z
?ndisQueuedPnPIrpSurpriseRemoval@@YGXPAX@Z
?ndisQueuedReenumerateFailedAdapter@@YGXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisQueuedRestartFilter@@YGXPAX@Z
?ndisQueuedStatusUnbindAdapter@@YGXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisQueuedUpdatePMCapabilities@@_Y2PAGE@@GXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisReadBindPaths@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_RTL_QUERY_REGISTRY_TABLE@@PAX@Z
?ndisReadDataLinkLayerKeywords@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadLwfById@@YGJABU_GUID@@@Z
?ndisReadMiniportDefaultPortAuthStates@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadMiniportMediaSpecificPortAuthStates@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadMiniportSpecificPortAuthStates@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_CONFIGURATION_HANDLE@@@Z
?ndisReadModernStandyWoLMagicPacketKeywords@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadNDKGlobalFlags@@YGKXZ
?ndisReadNicAutoPowerSaverTimeoutKeywords@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadOffloadRegistry@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadPMAdminConfigState@@YG?AW4_NDIS_PM_ADMIN_CONFIG_STATE@@PAU_NDIS_CONFIGURATION_HANDLE@@PAU_UNICODE_STRING@@@Z
?ndisReadPMRegistry@@YGXPAU_NDIS_CONFIGURATION_HANDLE@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadParameter@@YGJPA_WKPAXK11@Z
?ndisReadProtocolById@@YGJABU_GUID@@@Z
?ndisReadRegistry@@YGXXZ
?ndisReadRegistryKnobs@@YGJPAU_DRIVER_OBJECT@@PBUNDIS_REGISTRY_KNOB@@I@Z
?ndisReadRssKeywords@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadSSTimeoutKeywords@@_Y2PAGE@@GXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReadSoftwareTimestampSettings@@YGXPAU_NDIS_CONFIGURATION_HANDLE@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReceiveQueueingPaused@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReceiveQueueingRestart@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisRecordEvent@@YGXPAUNDIS_EVENT_LOG_HANDLE__@@GPAX@Z
?ndisRefCountBlockFromRefCountHandle@@YGPAU_NDIS_REFCOUNT_BLOCK@@PAUNDIS_REFCOUNT_HANDLE__@@@Z
?ndisRefNextFilterForOidCancellation@@YGPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PAU1@PAE@Z
?ndisReferenceAf@@YGEPAU_NDIS_CO_AF_BLOCK@@@Z
?ndisReferenceDriver@@YGEPAU_NDIS_M_DRIVER_BLOCK@@W4_NDIS_MDRV_REFTAG@@@Z
?ndisReferenceFilterByHandle@@YGEPAU_NDIS_FILTER_BLOCK@@W4_NDIS_LWF_REFTAG@@@Z
?ndisReferenceFilterDriver@@YGEPAU_NDIS_FILTER_DRIVER_BLOCK@@W4_NDIS_LWFDRV_REFTAG@@@Z
?ndisReferenceMiniport@@YGEPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MP_REFTAG@@@Z
?ndisReferenceMiniportByGuid@@YGPAU_NDIS_MINIPORT_BLOCK@@ABU_GUID@@W4_NDIS_MP_REFTAG@@@Z
?ndisReferenceMiniportByHandle@@YGEPAU_NDIS_MINIPORT_BLOCK@@EW4_NDIS_MP_REFTAG@@@Z
?ndisReferenceMiniportByHandleForNsi@@YGEPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_NSI_REFTAG@@W4_NDIS_MP_REFTAG@@@Z
?ndisReferenceMiniportByName@@YGXPBU_UNICODE_STRING@@PAPAU_NDIS_MINIPORT_BLOCK@@EW4_NDIS_MP_REFTAG@@@Z
?ndisReferenceMiniportByNetLuid@@YGPAU_NDIS_MINIPORT_BLOCK@@T_NET_LUID_LH@@W4_NDIS_MP_REFTAG@@@Z
?ndisReferenceMiniportNoCheck@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MP_REFTAG@@@Z
?ndisReferenceNextUnprocessedOpenEx@@YGPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisReferenceOpenByHandle@@YGEPAU_NDIS_OPEN_BLOCK@@W4_NDIS_OPEN_REFTAG@@@Z
?ndisReferencePackage@@YGXPAU_PKG_REF@@@Z
?ndisReferenceProtocol@@YGEPAU_NDIS_PROTOCOL_BLOCK@@W4_NDIS_PT_REFTAG@@@Z
?ndisReferenceProtocolByName@@YGJPBU_UNICODE_STRING@@PAPAU_NDIS_PROTOCOL_BLOCK@@EW4_NDIS_PT_REFTAG@@@Z
?ndisReferenceRef@@YGEPAU_REFERENCE_EX@@E@Z
?ndisReferenceRefEx@@YGEPAU_REFERENCE_EX@@EPAW4_NDIS_REFERENCE_STATUS@@@Z
?ndisReferenceRefNoCheck@@YGXPAU_REFERENCE_EX@@E@Z
?ndisReferenceTopMiniportByNameForNsi@@YGPAU_NDIS_MINIPORT_BLOCK@@PAU1@KKEW4_NDIS_NSI_REFTAG@@W4_NDIS_MP_REFTAG@@@Z
?ndisReferenceVcPtr@@YGEPAU_NDIS_CO_VC_PTR_BLOCK@@@Z
?ndisReferenceWithTagStackTrace@@YGXPAU_NDIS_REFCOUNT_WITH_STACK@@E@Z
?ndisRegisterMiniportDriver@@_Y2PAGENPNP@@GHPAXPAU_NDIS51_MINIPORT_CHARACTERISTICS@@IPAPAX@Z
?ndisRegisterProtocolDriverCommon@@YGXPAU_NDIS_PROTOCOL_BLOCK@@@Z
?ndisReinitializeMiniportBlock@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisRejectUnsupportedPMOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisRejectUnsupportedWoLPatterns@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReleaseMiniportPnPEventLock@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReleaseReadLockSharedRefCnt@@YGXPAU_NDIS_RW_LOCK@@@Z
?ndisReleaseReadWriteLockX@@YGXPAU_NDIS_RW_LOCK@@PAU_LOCK_STATE@@E@Z
?ndisReleaseStackTrace@@YGXK@Z
?ndisRemoveFromNblQueueByCancelId@@YGPAU_NET_BUFFER_LIST@@PAU_NBL_QUEUE@@PAX@Z
?ndisRemoveMiniportFromGlobalList@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisRemoveOpenFromGlobalList@@YGEPAU_NDIS_OPEN_BLOCK@@@Z
?ndisRemoveOpenWakeUpPattern@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@H@Z
?ndisRemovePMLowestPriorityEntry@@YGPAU_NDIS_PACKET_PATTERN_ENTRY@@PAU_SINGLE_LIST_ENTRY@@K@Z
?ndisRemoveWoLDirectedMAC@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisReplayDirectOids@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_LIST_ENTRY@@E@Z
?ndisReplayRecvNbls@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_BUFFER_LIST@@@Z
?ndisReplaySendNbls@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NET_BUFFER_LIST@@E@Z
?ndisReportRefcountImbalance@@YGXPAU_NDIS_REFCOUNT_BLOCK@@E@Z
?ndisRequestDeviceLowPower@@YGJPAU_NDIS_MINIPORT_BLOCK@@W4_DEVICE_POWER_STATE@@P6GXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z4W4_NDIS_MINIPORT_EVENT@@@Z
?ndisRequestDevicePowerD0@@YGJPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_MINIPORT_EVENT@@@Z
?ndisRequestNicActive@@YGJPAU_NDIS_MINIPORT_BLOCK@@W4CallRunMode@@@Z
?ndisRequestNicQuiet@@YGJPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisRequestPowerResume@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisRequestWaitWake@@YGJPAU_NDIS_MINIPORT_BLOCK@@P6GXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z@Z
?ndisRequestedDevicePowerIrpComplete@@YGXPAU_DEVICE_OBJECT@@ET_POWER_STATE@@PAXPAU_IO_STATUS_BLOCK@@@Z
?ndisResizeRefCountBlock@@YGXPAU_NDIS_REFCOUNT_BLOCK@@@Z
?ndisResizeRefCountBlockTagged@@YGXPAU_NDIS_REFCOUNT_BLOCK@@E@Z
?ndisRestartFilter@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_FILTER_LINK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisRestartFilterInner@@YGHPAU_NDIS_FILTER_BLOCK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisRestartProtocol@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_PROTOCOL_LINK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisRestartProtocolInner@@YGXPAU_NDIS_OPEN_BLOCK@@PAUNDIS_RESTART_INFORMATION@@@Z
?ndisRestoreFilterHandlersForMediaDisconnect@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@1@Z
?ndisReturnNblWithPowerQueue@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisReturnNetBufferListsInternal@@YGXPAXPAU_NET_BUFFER_LIST@@KPAU_NDIS_OPEN_BLOCK@@@Z
?ndisReturnNetBufferListsToPackets@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisReturnPacketToMiniport@@YGXPAXPAU_NDIS_PACKET@@@Z
?ndisReturnPacketsForTranslation@@YGXPAXPAU_NDIS_PACKET@@@Z
?ndisReturnPeriodicReceives@@YGPAU_NET_BUFFER_LIST@@PAU_NDIS_MINIPORT_BLOCK@@PAU1@@Z
?ndisReturnQueuedLowPowerNbls@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisRollbackPortActivation@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_PORT@@1@Z
?ndisRollbackPortDeactivation@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAKI@Z
?ndisRssV2Initialize@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisRssV2InitializeDpcWorkerContext@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAPAU_NDIS_RSS_DPC_WORKER_CONTEXT@@@Z
?ndisRssV2UpdateIndirectionTable@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisSSGetCachedOidValue@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisSSGetOidCacheEntry@@YGPAU_NDIS_OID_CACHE_ENTRY@@PAU_NDIS_SELECTIVE_SUSPEND@@K@Z
?ndisSSIdleTimerDpc@@YGXPAX000@Z
?ndisSSIdleTimerWorkItem@@YGXPAU_NDIS_WORK_ITEM@@PAX@Z
?ndisSSUpdateCounters@@YGXPAU_NDIS_MINIPORT_BLOCK@@_K@Z
?ndisSSUpdateOidCacheValue@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisSaveParameters@@YGJPA_WKPAXK11@Z
?ndisScheduleD0CompleteSignalWorkItem@@YGXPAU_NDIS_MINIPORT_BLOCK@@J@Z
?ndisScheduleStartDeviceWorkItem@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisSelectiveSuspendClearStop@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_STOP_REASON@@@Z
?ndisSelectiveSuspendFree@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSelectiveSuspendInitialize@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSelectiveSuspendResumeOperations@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisSelectiveSuspendStop@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_STOP_REASON@@@Z
?ndisSendCompleteWithPause@@YGXPAXPAU_NDIS_PACKET@@H@Z
?ndisSendNBLToFilter@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisSendPacketsWithPause@@YGXPAXPAPAU_NDIS_PACKET@@I@Z
?ndisSendSystemPowerStateIndication@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_SYSTEM_POWER_STATE@@@Z
?ndisSendWithPause@@YGHPAXPAU_NDIS_PACKET@@@Z
?ndisSetAddWakeUpPattern@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisSetAllFilterDefaultParameters@@YGHPBU_UNICODE_STRING@@00E@Z
?ndisSetBusyAsync@@YGEPAU_NDIS_MINIPORT_BLOCK@@KW4_NDIS_SS_BUSY_REASON@@PAXK@Z
?ndisSetBusySync@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_BUSY_REASON@@K@Z
?ndisSetCombinedRSSParameters@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAU_NDIS_VPORT_BLOCK@@PAU_NDIS_RECEIVE_SCALE_PARAMETERS@@@Z
?ndisSetDeviceInterfaceState@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisSetDeviceNames@@YGXPAU_UNICODE_STRING@@00PAE@Z
?ndisSetDevicePower@@YGJPAU_IRP@@PAU_IO_STACK_LOCATION@@W4_DEVICE_POWER_STATE@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetDevicePowerDownComplete@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?ndisSetDevicePowerNotificationHandlers@@YGHPAXPAU_NDIS_DRIVER_OPTIONAL_HANDLERS@@@Z
?ndisSetDevicePowerOnComplete@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?ndisSetEnableWakeUp@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisSetFilterDefaultParameter@@YGHPBU_UNICODE_STRING@@PAX0E@Z
?ndisSetIdleTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetMediaDisconnectTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetMiniportEnableWakeUp@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisSetMiniportEthMulticastList@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetMiniportHandlers@@_Y2PAGENPNP@@GXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetMiniportPacketFilter@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetMiniportRSSParameters@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetMiniportRSSv1ParametersForMiniportV2@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetMiniportRSSv2Parameters@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetMiniportRSSv2ParametersHelper@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisSetMiniportReenumerateHandlers@@YGHPAXPAU_NDIS_DRIVER_OPTIONAL_HANDLERS@@@Z
?ndisSetNDKHandlers@@YGHPAXPAU_NDIS_DRIVER_OPTIONAL_HANDLERS@@@Z
?ndisSetOpenAddWakeUpPattern@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisSetOpenEnableWakeUp@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisSetOpenEthAddDeleteMulticast@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetOpenEthMulticastList@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetOpenPacketFilter@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetOpenRSSParameters@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetOpenRSSv2Parameters@@YGEPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetOpenToTranslationMode@@_Y2PAGENPNP@@GXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisSetPdcTaskClientExpiryTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisSetPerfTrackParameters@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@PAH@Z
?ndisSetPower@@YGJPAU_IRP@@PAU_IO_STACK_LOCATION@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetPowerResume@@YGJPAU_IRP@@PAU_IO_STACK_LOCATION@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetPowerResumeComplete@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?ndisSetPowerResumeCompleteWorkItem@@YGXPAX@Z
?ndisSetPowerSuspend@@YGJPAU_IRP@@PAU_IO_STACK_LOCATION@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetReceiveFilter@@YGEPAU_NDIS_REQ_TRACKER@@@Z
?ndisSetRemoveWakeUpPattern@@YGHPAU_NDIS_OID_REQUEST@@PAE@Z
?ndisSetRestoreMulticastList@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisSetRestorePacketFilter@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAH@Z
?ndisSetSSHandlers@@YGHPAXPAU_NDIS_DRIVER_OPTIONAL_HANDLERS@@@Z
?ndisSetSystemPower@@YGJPAU_IRP@@PAU_IO_STACK_LOCATION@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetSystemPowerNotificationHandlers@@YGHPAXPAU_NDIS_DRIVER_OPTIONAL_HANDLERS@@@Z
?ndisSetSystemPowerOnComplete@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?ndisSetTaskOffloadValidate@@YGHPAU_NDIS_FILTER_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisSetTempRefTimer@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisSetWakeUpTimer@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetupDownwardHandlers@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetupLwfMiniportHandlers@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetupMiniportProtocolHandlers@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetupNdis6OpenHandlers@@YGXPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_PROTOCOL_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetupNoFilterHandlers@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetupUpwardHandlers@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisSetupWmiNode@@YGXPAU_NDIS_MINIPORT_BLOCK@@PBU_UNICODE_STRING@@KPAXPAPAUtagWNODE_SINGLE_INSTANCE@@@Z
?ndisShallowCopyNetPnPEvent@@YGXPAU_NET_PNP_EVENT_NOTIFICATION@@PBU1@@Z
?ndisShouldCacheRSSParameters@@YGEPBU_NDIS_OID_REQUEST@@@Z
?ndisShouldCacheRSSv2ParametersInMiniport@@YGEPBU_NDIS_OID_REQUEST@@@Z
?ndisShouldEngageNicAutoPowerSaver@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisShouldSuppressReceiveFilterCapabilities@@YGEPAU_NDIS_RECEIVE_FILTER_CAPABILITIES@@@Z
?ndisSignalD0CompleteWorkItem@@YGXPAU_NDIS_D0_SIGNAL_WORK_ITEM@@PAX@Z
?ndisSignalD0RequestComplete@@YGXPAU_NDIS_MINIPORT_BLOCK@@J@Z
?ndisSortNetBufferLists@@YGXPAU_NDIS_NBL_RCV_TRACKER@@@Z
?ndisSortRssProcessors@@YGXPAU_NDIS_RSS_PROCESSOR@@K@Z
?ndisSourcePreAddProtocolOffload@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisSourcePreAddWoLPattern@@YGHPAU_NDIS_OPEN_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisSplitStatisticsOids@@YGHPAU_NDIS_USER_OPEN_CONTEXT@@PAKK@Z
?ndisSriovInterfaceDereference@@YGXPAX@Z
?ndisSriovInterfaceReference@@YGXPAX@Z
?ndisStackExpansionFallbackWorker@@YGXPAX@Z
?ndisStartDeviceSynchronous@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_IRP@@@Z
?ndisStartDeviceWorkItem@@YGXPAX@Z
?ndisStartNsiProvider@@YGJXZ
?ndisStopNsiProvider@@YGXXZ
?ndisSubmitIdleRequest@@YGHPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisSumDataBlock@@YGXPA_K0@Z
?ndisSwapFilterHandlersForMediaDisconnect@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@1@Z
?ndisSynchReturnPacketsForTranslation@@YGXPAXPAU_NDIS_PACKET@@@Z
?ndisSynchronousOidRequestInternal@@YGHPAU_NDIS_OBJECT_HEADER@@PAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_FILTER_BLOCK@@PAU_NDIS_OID_REQUEST@@@Z
?ndisTempRefTimerDpc@@YGXPAX000@Z
?ndisTemporarilyScribbleNetLuidIndex@@YGXAAVKRegKey@@AAT_NET_LUID_LH@@@Z
?ndisTopTcpConnectionOffloadStatus@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisTraceDpcEnd@@YGXPAU_NDIS_MINIPORT_BLOCK@@K_K@Z
?ndisTraceDpcStart@@YGXPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisTraceNicAutoPowerSaver@@YGXPAU_NDIS_MINIPORT_BLOCK@@E@Z
?ndisTraceRcv@@YGXPAU_NDIS_MINIPORT_BLOCK@@_KI@Z
?ndisTranslateOffloadSetsToTasks@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD_ENCAPSULATION@@PAU_NDIS_OFFLOAD@@@Z
?ndisTranslateResources@@YGHPAU_NDIS_MINIPORT_BLOCK@@HT_LARGE_INTEGER@@PAT2@PAPAU_CM_PARTIAL_RESOURCE_DESCRIPTOR@@@Z
?ndisUnbindAdapterInner@@YGXPAU_NDIS_OPEN_BLOCK@@@Z
?ndisUnbindAdapterWorkItem@@YGXPAX@Z
?ndisUnbindEachProtocolOpenOnMiniport@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_PROTOCOL_LINK@@@Z
?ndisUnbindProtocol@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAUNDIS_BIND_PROTOCOL_LINK@@@Z
?ndisUnbindProtocolOpen@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OPEN_BLOCK@@@Z
?ndisUnprocessAllOpens@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUnsetNdis6OpenHandlers@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdateAndIndicatePMCapabilities@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdateCheckForLoopbackFlag@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdateCsSpuriousWakeStats@@YGXPAU_NDIS_MINIPORT_AOAC@@W4_NDIS_PM_WAKE_REASON_TYPE@@@Z
?ndisUpdateFilterFakeStatus@@YGXPAU_NDIS_FILTER_BLOCK@@@Z
?ndisUpdateHDSplitKeyword@@YGHPAU_NDIS_MINIPORT_BLOCK@@K@Z
?ndisUpdateLoopbackOpens@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdateMinimumStackVersion@@YGXPAU_NDIS_MINIPORT_BLOCK@@KK@Z
?ndisUpdateMiniportCsTrafficStatistics@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_CS_TRAFFIC_STATS@@@Z
?ndisUpdateMiniportFakeStatus@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdateMiniportPortStates@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_STATUS_INDICATION@@@Z
?ndisUpdateNoPauseOnSuspend@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdateOffloadKeywords@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OFFLOAD_PARAMETERS@@@Z
?ndisUpdateOperationalStatus@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdatePMCurrentCapabilities@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdatePMCurrentParameters@@YGXPAU_NDIS_PM_CAPABILITIES@@PAU_NDIS_PM_PARAMETERS@@@Z
?ndisUpdateRcvFilterQueueParameters@@YGEPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_RECEIVE_QUEUE_PARAMETERS@@@Z
?ndisUpdateRssV1ParametersFromV2@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_VPORT_BLOCK@@PAU_NDIS_RECEIVE_SCALE_PARAMETERS@@PAU_NDIS_RECEIVE_SCALE_PARAMETERS_V2@@2@Z
?ndisUpdateWmiPMParamsForPatterns@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisUpdateWmiPMParamsForProtocolOffloads@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisVBusDetachComplete@@YGXPAX@Z
?ndisVBusNmrClientAttachProvider@@YGJPAX0PBU_NPI_REGISTRATION_INSTANCE@@@Z
?ndisVBusNmrClientCleanupBindingContext@@YGXPAX@Z
?ndisVBusNmrClientDetachProvider@@YGJPAX@Z
?ndisVBusNmrInitializeClient@@YGJXZ
?ndisVBusVirtMiniAdd@@YGJPBU_UNICODE_STRING@@00@Z
?ndisVBusVirtMiniRemove@@YGJPBU_UNICODE_STRING@@0@Z
?ndisValidOid@@YGEPAU_NDIS_USER_OPEN_CONTEXT@@K@Z
?ndisValidate60Protocol@@YGHPAU_NDIS_PROTOCOL_DRIVER_CHARACTERISTICS@@@Z
?ndisValidateConnectionOffload@@YGEPAU_NDIS_TCP_CONNECTION_OFFLOAD@@@Z
?ndisValidateFilterDriverCharacteristicsHeader@@YGHPBU_NDIS_FILTER_DRIVER_CHARACTERISTICS@@PAK@Z
?ndisValidateL2MtuSizeChange@@YG_NPAU_NDIS_MINIPORT_BLOCK@@PBU_NDIS_STATUS_INDICATION@@@Z
?ndisValidateLWMiniportDriverCharacteristicsHeader@@YGHPBU_NDIS_LWM_DRIVER_CHARACTERISTICS@@PAE@Z
?ndisValidateLegacyProtocols@@YGEPAU_NDIS50_PROTOCOL_CHARACTERISTICS@@@Z
?ndisValidateMacAddressChange@@YG_NPAU_NDIS_MINIPORT_BLOCK@@PBU_NDIS_STATUS_INDICATION@@@Z
?ndisValidateMiniportDriverCharacteristicsEntryPoints@@YGHPAU_NDIS_MINIPORT_DRIVER_CHARACTERISTICS@@PAU_DRIVER_OBJECT@@KK@Z
?ndisValidateMiniportDriverCharacteristicsHeader@@YGHPBU_NDIS_MINIPORT_DRIVER_CHARACTERISTICS@@PBU_UNICODE_STRING@@PAK22@Z
?ndisValidateOffloadCapability@@YGEPAU_NDIS_OFFLOAD@@@Z
?ndisValidateProtocolDriverCharacteristicsHeader@@YGHPBU_NDIS_PROTOCOL_DRIVER_CHARACTERISTICS@@PAK@Z
?ndisValidateQosParameters@@YGHPAU_NDIS_MINIPORT_BLOCK@@EPAU_NDIS_QOS_PARAMETERS@@KPAK@Z
?ndisVerifierAllocateMemory@@YGHPAPAXIIT_LARGE_INTEGER@@@Z
?ndisVerifierAllocateMemoryWithTag@@YGHPAPAXIK@Z
?ndisVerifierAllocateMemoryWithTagPriority@@YGPAXPAXIKW4_EX_POOL_PRIORITY@@@Z
?ndisVerifierAllocatePacketPool@@YGXPAHPAPAXII@Z
?ndisVerifierAllocatePacketPoolEx@@YGXPAHPAPAXIII@Z
?ndisVerifierFreeMemory@@YGXPAXII@Z
?ndisVerifierFreePacketPool@@YGXPAX@Z
?ndisVerifierGetRoutineAddress@@YGPAXPAU_UNICODE_STRING@@@Z
?ndisVerifierInitialization@@YGEXZ
?ndisVerifierInjectResourceFailure@@YGEE@Z
?ndisVerifierNdisFIndicateReceiveNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KKK@Z
?ndisVerifierNdisFPauseComplete@@YGXPAX@Z
?ndisVerifierNdisFReturnNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisVerifierNdisFSendNetBufferLists@@YGXPAXPAU_NET_BUFFER_LIST@@KK@Z
?ndisVerifierNdisFSendNetBufferListsComplete@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisVerifierNdisMIndicateStatusEx@@YGXPAXPAU_NDIS_STATUS_INDICATION@@@Z
?ndisVerifierNdisMOidRequestComplete@@YGXPAXPAU_NDIS_OID_REQUEST@@H@Z
?ndisVerifierNdisMSendNetBufferListsComplete@@YGXPAXPAU_NET_BUFFER_LIST@@K@Z
?ndisVerifierQueryMapRegisterCount@@_Y2PAGENPNP@@GHW4_NDIS_INTERFACE_TYPE@@PAI@Z
?ndisVerifyNdisAcquireRWLockRead@@YGXPAU_NDIS_RW_LOCK_EX@@PAU_LOCK_STATE_EX@@E@Z
?ndisVerifyNdisAcquireRWLockWrite@@YGXPAU_NDIS_RW_LOCK_EX@@PAU_LOCK_STATE_EX@@E@Z
?ndisVerifyNdisAllocateRWLock@@YGPAU_NDIS_RW_LOCK_EX@@PAX@Z
?ndisVerifyNdisFreeRWLock@@YGXPAU_NDIS_RW_LOCK_EX@@@Z
?ndisVerifyNdisReleaseRWLock@@YGXPAU_NDIS_RW_LOCK_EX@@PAU_LOCK_STATE_EX@@@Z
?ndisVerifyNdisTryAcquireRWLockRead@@YGEPAU_NDIS_RW_LOCK_EX@@PAU_LOCK_STATE_EX@@E@Z
?ndisVerifyNdisTryAcquireRWLockWrite@@YGEPAU_NDIS_RW_LOCK_EX@@PAU_LOCK_STATE_EX@@E@Z
?ndisVerifyNdisTryPromoteRWLockFromReadToWrite@@YGEPAU_NDIS_RW_LOCK_EX@@PAU_LOCK_STATE_EX@@@Z
?ndisVerifyValidRWLockFlags@@YGXE@Z
?ndisWMIIrpDispatch@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@@Z
?ndisWaitForDpcCompletion@@YGXPCJPCEPAU_KEVENT@@@Z
?ndisWaitForEventThenDisarmWatchdog@@YGXPAUNDISWATCHDOG__@@PAU_KEVENT@@@Z
?ndisWaitForKernelObject@@YGXPAX@Z
?ndisWaitForKernelObject@@YG_NPAX_J@Z
?ndisWaitForPendingNblReturnLock@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWaitForResetCompletion@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWaitWakeIoCompletion@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?ndisWakeUpDevice@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfAcquirePowerReferenceHelper@@YGXPAU_NDIS_MINIPORT_BLOCK@@EE@Z
?ndisWdfAoAcDisengageComplete@@YGXPAU_NDIS_MINIPORT_BLOCK@@J@Z
?ndisWdfDeviceObjectCleanup@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfGetGuidToOidList@@YGXPBKGPAU_NDIS_GUID@@PAG@Z
?ndisWdfIsAoAcPowerTransition@@YGEPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfNotifyDevicePower@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4POWER_ACTION@@W4_DEVICE_POWER_STATE@@@Z
?ndisWdfNotifySystemPower@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4POWER_ACTION@@W4_DEVICE_POWER_STATE@@@Z
?ndisWdfPostReleaseHardware@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfPowerResumeComplete@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfPreReleaseHardware@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfRequestNicActive@@YGJPAU_NDIS_MINIPORT_BLOCK@@W4CallRunMode@@W4_NDIS_TMP_REF_REASON@@@Z
?ndisWdfRequestNicQuiet@@YGJPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfSelectiveSuspendResumeOperations@@YGXPAU_NDIS_MINIPORT_BLOCK@@EE@Z
?ndisWdfSendPmParametersForSuspend@@YGXPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdfSetBusyAsync@@YGEPAU_NDIS_MINIPORT_BLOCK@@KW4_NDIS_SS_BUSY_REASON@@PAXK@Z
?ndisWdfSetBusySync@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_BUSY_REASON@@K@Z
?ndisWdfUpdateAddDeviceParameters@@YGJAAVKRegKey@@AAUNDIS_MINIPORT_CREATION_CONFIG@@@Z
?ndisWdmPnPAddDevice@@YGJPAU_DRIVER_OBJECT@@PAU_DEVICE_OBJECT@@@Z
?ndisWdmSendOidPmParametersForAoAc@@YGHPAU_NDIS_MINIPORT_BLOCK@@@Z
?ndisWdmSendPmOidsForSuspend@@YGHPAU_NDIS_MINIPORT_BLOCK@@W4_DEVICE_POWER_STATE@@@Z
?ndisWdmSetBusyAsync@@YGEPAU_NDIS_MINIPORT_BLOCK@@KW4_NDIS_SS_BUSY_REASON@@PAXK@Z
?ndisWdmSetBusySync@@YGXPAU_NDIS_MINIPORT_BLOCK@@W4_NDIS_SS_BUSY_REASON@@K@Z
?ndisWildCardStringMatch@@YGEPBU_UNICODE_STRING@@0E@Z
?ndisWmiChangeSingleInstance@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_GUID@@QAUtagWNODE_SINGLE_INSTANCE@@@Z
?ndisWmiExecuteMethod@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_GUID@@PAUtagWNODE_METHOD_ITEM@@KPAK@Z
?ndisWmiFindInstanceName@@YGJPAPAU_NDIS_CO_VC_PTR_BLOCK@@PAU_NDIS_MINIPORT_BLOCK@@PA_WG@Z
?ndisWmiGetGuid@@YGJPAPAU_NDIS_GUID@@PAU_NDIS_MINIPORT_BLOCK@@PAU_GUID@@H@Z
?ndisWmiQueryAllData@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_GUID@@PAU_GUID@@PAUtagWNODE_ALL_DATA@@KPAK@Z
?ndisWmiQueryPMActiveCapabilities@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_WMI_PM_ACTIVE_CAPABILITIES@@@Z
?ndisWmiQueryPMAdminConfig@@YGXPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_WMI_PM_ADMIN_CONFIG@@@Z
?ndisWmiQuerySingleInstance@@YGJPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_GUID@@PAUtagWNODE_SINGLE_INSTANCE@@KPAK@Z
?ndisWmiSetPMAdminConfig@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_WMI_PM_ADMIN_CONFIG@@@Z
?ndisWppFastTraceMessage@@YAXPBU_GUID@@GZZ
?ndisWppInitTracingEx@@YGXPAU_DRIVER_OBJECT@@PAU_UNICODE_STRING@@@Z
?ndisWriteConfigurationIfPresent@@YGXPAHPAXPAU_UNICODE_STRING@@PAU_NDIS_CONFIGURATION_PARAMETER@@@Z
?ndisWriteDriverNDISVersionToServiceKey@@YGXKKEKKPAU_UNICODE_STRING@@@Z
?ndisWritePMAdminConfigState@@YGHPAXPAU_UNICODE_STRING@@W4_NDIS_PM_ADMIN_CONFIG_STATE@@@Z
?ndisWriteWmiStatusIndication@@YGJPAU_NDIS_MINIPORT_BLOCK@@PBU_UNICODE_STRING@@PBU_NDIS_STATUS_INDICATION@@HPBXK@Z
?ndisXlateAddPacketPatternToWolPatternOid@@YGHPAU_NDIS_OID_REQUEST@@PAE@Z
?ndisXlateAddWolPatternToPacketPatternOid@@YGHPAU_NDIS_OID_REQUEST@@PAE@Z
?ndisXlateMiniportFlags@@YGKK@Z
?ndisXlatePMParametersToWakeUpEnableOid@@YGXPAU_NDIS_OID_REQUEST@@@Z
?ndisXlatePnPFlags@@YGKK@Z
?ndisXlateRecvNetBufferListsToPacketArray@@YGEPAU_NDIS_NBLS_TO_PKT_ARRAY@@@Z
?ndisXlateRecvPacketArrayToNetBufferLists@@YGEPAU_NDIS_PKT_ARRAY_TO_NBLS@@@Z
?ndisXlateRemovePacketPatternToWolPatternOid@@YGHPAU_NDIS_OID_REQUEST@@PAE@Z
?ndisXlateRemoveWolPatternToPacketPatternOid@@YGHPAU_NDIS_MINIPORT_BLOCK@@PAU_NDIS_OID_REQUEST@@PAE@Z
?ndisXlateReturnNetBufferListToPacket@@YGPAU_NDIS_PACKET@@PAU_NET_BUFFER_LIST@@@Z
?ndisXlateReturnPacketToNetBufferList@@YGPAU_NET_BUFFER_LIST@@PAU_NDIS_PACKET@@@Z
?ndisXlateSSResume@@YG?AW4_NDIS_USER_RESUME_REASON@@T_NDIS_SS_RESUME_REASON@@@Z
?ndisXlateSendCompleteNetBufferListToPacket@@YGXPAU_NET_BUFFER_LIST@@PAPAU_NDIS_PACKET@@PAH@Z
?ndisXlateSendCompletePacketToNetBufferList@@YGPAU_NET_BUFFER_LIST@@PAU_NDIS_PACKET@@H@Z
?ndisXlateSendNetBufferListsToPacketArray@@YGEPAU_NDIS_NBLS_TO_PKT_ARRAY@@E@Z
?ndisXlateSendPacketArrayToNetBufferLists@@YGEPAU_NDIS_PKT_ARRAY_TO_NBLS@@@Z
?ndisXlateWakeUpEnableToPMParametersOid@@YGHPAU_NDIS_OID_REQUEST@@@Z
?ndisXlateWakeUpPatternListToWolPatternList@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?ndisXlateWolPatternListToWakeUpPatternList@@YGXPAU_NDIS_REQ_TRACKER@@@Z
?netsetupBuildBindingRegistryPath@@YGXW4NetSetupStoreType@@W4NetSetupSubkeyType@@ABU_GUID@@PBU3@33PA_W@Z
?netsetupBuildObjectPath@@YGXW4_NETSETUP_OBJECT_TYPE@@ABU_GUID@@W4NetSetupStoreType@@W4NetSetupSubkeyType@@PA_W@Z
?netsetupBuildStorePath@@YGXW4_NETSETUP_OBJECT_TYPE@@W4NetSetupStoreType@@PA_W@Z
?netsetupGetSubkeyPath@@YGPB_WW4NetSetupStoreType@@W4NetSetupSubkeyType@@@Z
?nullCreateFilter@@YGEPAPAU_X_FILTER@@@Z
?nullDeleteFilterOpenAdapter@@YGXPAU_X_FILTER@@PAU_NDIS_OPEN_BLOCK@@@Z
?reserve@?$KArray@E$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@PAU_KStringAtom@Rtl@@$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@PAX$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@ULwfBindProperties@@$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@UProtocolBindProperties@@$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@V?$KRef@UNDIS_BIND_FILTER_DRIVER@@@@$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@V?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@V?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_NI@Z
?reserve@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@QAE_NI@Z
?reset@?$KArray@ULwfBindProperties@@$00@Rtl@@AAEXXZ
?reset@?$KArray@UProtocolBindProperties@@$00@Rtl@@AAEXXZ
?reset@?$KArray@V?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@$00@Rtl@@AAEXXZ
?reset@?$KArray@V?$unique_ptr@UNDIS_BIND_FILTER_LINK@@U?$default_delete@UNDIS_BIND_FILTER_LINK@@@wistd@@@wistd@@$00@Rtl@@AAEXXZ
?reset@?$KArray@V?$unique_ptr@UNDIS_BIND_PROTOCOL_LINK@@U?$default_delete@UNDIS_BIND_PROTOCOL_LINK@@@wistd@@@wistd@@$00@Rtl@@AAEXXZ
?reset@?$KRef@UNDIS_BIND_FILTER_DRIVER@@@@AAEXPAVKRefHolder@1@@Z
?reset@?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@AAEXPAVKRefHolder@1@@Z
?reset@?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@QAEXPAUKString@Rtl@@@Z
?reset@?$unique_storage@U?$resource_policy@PAUNDISWATCHDOG__@@P6GXPAU1@@Z$1?ndisFreeWatchdog@@YGX0@ZU?$integral_constant@I$00@wistd@@PAU1@H$0?0$$T@details@wil@@@details@wil@@QAEXPAUNDISWATCHDOG__@@@Z
?reset@?$unique_storage@U?$resource_policy@PAXP6GJPAX@Z$1?ZwClose@@YGJ0@ZU?$integral_constant@I$0A@@wistd@@PAXPAX$0A@$$T@details@wil@@@details@wil@@QAEXPAX@Z
?resize@?$KArray@PAU_KStringAtom@Rtl@@$00@Rtl@@QAE_NI@Z
?resize@?$KArray@PAX$00@Rtl@@QAE_NI@Z
?resize@?$KArray@V?$unique_ptr@UKString@Rtl@@U?$default_delete@UKString@Rtl@@@wistd@@@wistd@@$00@Rtl@@QAE_NI@Z
?unref@?$KRef@UNDIS_BIND_PROTOCOL_DRIVER@@@@AAEXXZ
?wil_details_FeatureReporting_IncrementOpportunityInCache@@YGXPAUwil_details_FeatureReportingCache@@W4wil_details_ServiceReportingKind@@IPAUwil_details_RecordUsageResult@@@Z
?wil_details_FeatureReporting_IncrementUsageInCache@@YGXPAUwil_details_FeatureReportingCache@@W4wil_details_ServiceReportingKind@@IPAUwil_details_RecordUsageResult@@@Z
?wil_details_FeatureReporting_RecordUsageInCache@@YG?AUwil_details_RecordUsageResult@@PAUwil_details_FeatureReportingCache@@W4wil_details_ServiceReportingKind@@II@Z
?wil_details_FeatureReporting_ReportUsageToService@@YGXPAUwil_details_FeatureReportingCache@@IHHPBUFEATURE_LOGGED_TRAITS@@HW4wil_ReportingKind@@K@Z
?wil_details_FeatureReporting_ReportUsageToServiceDirect@@YGHPAUwil_details_FeatureReportingCache@@IHHW4wil_details_ServiceReportingKind@@IK@Z
?wil_details_MapReportingKind@@YG?AW4wil_details_ServiceReportingKind@@W4wil_ReportingKind@@H@Z
@_EH4_CallFilterFunc@8
@_EH4_GlobalUnwind@4
@_EH4_LocalUnwind@16
@_EH4_TransferToHandler@8
@__security_check_cookie@4
@_guard_check_icall_nop@4
_CmRegUtilCreateUcKey@28
_CmRegUtilCreateWstrKey@28
_CmRegUtilOpenExistingUcKey@16
_CmRegUtilOpenExistingWstrKey@16
_CmRegUtilUcValueGetDword@16
_CmRegUtilUcValueGetFullBuffer@20
_CmRegUtilUcValueSetUcString@12
_CmRegUtilWstrValueGetDword@16
_CmRegUtilWstrValueSetFullBuffer@20
_CmRegUtilWstrValueSetWstrString@12
_CmpRegUtilAllocateUnicodeString@8
_DriverEntry@8
_Duplicate802_11AttachAttributesCommon@36
_ExAllocateFromNPagedLookasideList@4
_ExFreeToNPagedLookasideList@8
_GsDriverEntry@8
_InitializeTelemetryAssertsKM@4
_IoDevObjCreateDeviceSecure@36
_IopDevObjApplyPostCreationSettings@8
_McGenControlCallbackV2@36
_McGenEventRegister_EtwRegister@16
_McGenEventWrite_EtwWriteTransfer@20
_McTemplateK0_EtwWriteTransfer@12
_McTemplateK0j_EtwWriteTransfer@16
_McTemplateK0jqbr1_EtwWriteTransfer@24
_McTemplateK0jqx_EtwWriteTransfer@28
_McTemplateK0jqxb6_EtwWriteTransfer@32
_McTemplateK0jqxd_EtwWriteTransfer@32
_McTemplateK0jqxdd_EtwWriteTransfer@36
_McTemplateK0jqxddq_EtwWriteTransfer@40
_McTemplateK0jqxjqxdd_EtwWriteTransfer@52
_McTemplateK0jqxptdq_EtwWriteTransfer@44
_McTemplateK0jqxq_EtwWriteTransfer@32
_McTemplateK0jqxqd_EtwWriteTransfer@36
_McTemplateK0jqxqdq_EtwWriteTransfer@40
_McTemplateK0jqxqq_EtwWriteTransfer@36
_McTemplateK0jqxqqq_EtwWriteTransfer@40
_McTemplateK0jqxqqt_EtwWriteTransfer@40
_McTemplateK0jqxtpp_EtwWriteTransfer@40
_McTemplateK0jqxz_EtwWriteTransfer@32
_McTemplateK0jqxzd_EtwWriteTransfer@36
_McTemplateK0jqxzdd_EtwWriteTransfer@40
_McTemplateK0jqxzq_EtwWriteTransfer@36
_McTemplateK0jqxzqqQR5_EtwWriteTransfer@44
_McTemplateK0jqxzqq_EtwWriteTransfer@40
_McTemplateK0juqjzzz_EtwWriteTransfer@40
_McTemplateK0pp_EtwWriteTransfer@20
_McTemplateK0q_EtwWriteTransfer@16
_McTemplateK0qq_EtwWriteTransfer@20
_McTemplateK0qqq_EtwWriteTransfer@24
_McTemplateK0qqqqqqqq_EtwWriteTransfer@44
_McTemplateK0qqx_EtwWriteTransfer@28
_McTemplateK0qx_EtwWriteTransfer@24
_McTemplateK0qxq_EtwWriteTransfer@28
_McTemplateK0qxqqq_EtwWriteTransfer@36
_McTemplateK0qxxq_EtwWriteTransfer@36
_McTemplateK0qxzzxxxxxx_EtwWriteTransfer@80
_McTemplateK0qzz_EtwWriteTransfer@24
_McTemplateK0ujjpx_EtwWriteTransfer@36
_McTemplateK0ujqzr2jxx_EtwWriteTransfer@48
_McTemplateK0x_EtwWriteTransfer@20
_McTemplateK0xq_EtwWriteTransfer@24
_McTemplateK0xqq_EtwWriteTransfer@28
_McTemplateK0xqqq_EtwWriteTransfer@32
_McTemplateK0xqx_EtwWriteTransfer@32
_McTemplateK0z_EtwWriteTransfer@16
_McTemplateK0zq_EtwWriteTransfer@20
_MicrosoftTelemetryAssertTriggeredNoArgsKM@0
_MicrosoftTelemetryAssertTriggeredWorker@24
_Microsoft_Windows_Networking_Correlation_EtwEnableCallback@36
_NDIS_BUFFER_TO_SPAN_PAGES@4
_NDIS_NDK_PCW_NUM_COUNTERS_SET_IN_MASK@8
_NdisAcquireRWLockRead@12
_NdisAcquireRWLockWrite@12
_NdisAcquireReadWriteLock@12
_NdisAcquireSpinLock@4
_NdisActiveGroupCount@0
_NdisAdjustBufferLength@8
_NdisAdjustNetBufferCurrentMdl@4
_NdisAdvanceNetBufferDataStart@16
_NdisAdvanceNetBufferListDataStart@16
_NdisAllocateBuffer@20
_NdisAllocateBufferPool@12
_NdisAllocateCloneNetBufferList@16
_NdisAllocateCloneOidRequest@16
_NdisAllocateFragmentNetBufferList@32
_NdisAllocateGenericObject@12
_NdisAllocateIoWorkItem@4
_NdisAllocateMdl@12
_NdisAllocateMemory@20
_NdisAllocateMemoryWithTag@12
_NdisAllocateMemoryWithTagPriority@16
_NdisAllocateNetBuffer@16
_NdisAllocateNetBufferAndNetBufferList@24
_NdisAllocateNetBufferList@12
_NdisAllocateNetBufferListContext@16
_NdisAllocateNetBufferListPool@8
_NdisAllocateNetBufferMdlAndData@4
_NdisAllocateNetBufferPool@8
_NdisAllocatePacket@12
_NdisAllocatePacketPool@16
_NdisAllocatePacketPoolEx@20
_NdisAllocateRWLock@4
_NdisAllocateReassembledNetBufferList@24
_NdisAllocateRefCount@8
_NdisAllocateSharedMemory@12
_NdisAllocateSpinLockExported@4
_NdisAllocateTimerObject@12
_NdisAnsiStringToUnicodeString@8
_NdisBufferVirtualAddress@4
_NdisBuildScatterGatherList@8
_NdisCancelDirectOidRequest@8
_NdisCancelOidRequest@8
_NdisCancelSendNetBufferLists@8
_NdisCancelSendPackets@8
_NdisCancelTimer@8
_NdisCancelTimerObject@4
_NdisClAddParty@16
_NdisClCloseAddressFamily@4
_NdisClCloseCall@16
_NdisClDeregisterSap@4
_NdisClDropParty@12
_NdisClGetProtocolVcContextFromTapiCallId@12
_NdisClIncomingCallComplete@12
_NdisClMakeCall@16
_NdisClModifyCallQoS@8
_NdisClNotifyCloseAddressFamilyComplete@8
_NdisClOpenAddressFamily@24
_NdisClOpenAddressFamilyEx@16
_NdisClRegisterSap@16
_NdisCloseAdapter@8
_NdisCloseAdapterEx@4
_NdisCloseConfiguration@4
_NdisCloseFile@4
_NdisCloseNDKAdapter@8
_NdisCmActivateVc@8
_NdisCmAddPartyComplete@16
_NdisCmCloseAddressFamilyComplete@8
_NdisCmCloseCallComplete@12
_NdisCmDeactivateVc@4
_NdisCmDeregisterSapComplete@8
_NdisCmDispatchCallConnected@4
_NdisCmDispatchIncomingCall@12
_NdisCmDispatchIncomingCallQoSChange@8
_NdisCmDispatchIncomingCloseCall@16
_NdisCmDispatchIncomingDropParty@16
_NdisCmDropPartyComplete@8
_NdisCmMakeCallComplete@20
_NdisCmModifyCallQoSComplete@12
_NdisCmNotifyCloseAddressFamily@4
_NdisCmOpenAddressFamilyComplete@12
_NdisCmRegisterAddressFamily@16
_NdisCmRegisterAddressFamilyEx@8
_NdisCmRegisterSapComplete@12
_NdisCoAssignInstanceName@12
_NdisCoCreateVc@16
_NdisCoDeleteVc@4
_NdisCoGetTapiCallId@8
_NdisCoOidRequest@20
_NdisCoOidRequestComplete@20
_NdisCoRequest@20
_NdisCoRequestComplete@20
_NdisCoSendNetBufferLists@12
_NdisCoSendPackets@12
_NdisCompleteBindAdapter@12
_NdisCompleteBindAdapterEx@8
_NdisCompleteDmaTransfer@24
_NdisCompleteNetPnPEvent@12
_NdisCompletePnPEvent@12
_NdisCompleteUnbindAdapter@8
_NdisCompleteUnbindAdapterEx@4
_NdisConvertNdisStatusToNtStatus@4
_NdisConvertNtStatusToNdisStatus@4
_NdisCopyBuffer@24
_NdisCopyFromNetBufferToNetBuffer@24
_NdisCopyFromPacketToPacket@24
_NdisCopyFromPacketToPacketSafe@28
_NdisCopyReceiveNetBufferListInfo@8
_NdisCopySendNetBufferListInfo@8
_NdisCurrentGroupAndProcessor@0
_NdisCurrentProcessorIndexExported@0
_NdisDereferenceWithTag@8
_NdisDeregisterDeviceEx@4
_NdisDeregisterProtocol@8
_NdisDeregisterProtocolDriver@4
_NdisDeregisterTdiCallBack@0
_NdisDirectOidRequest@8
_NdisDllInitialize@0
_NdisDprAcquireReadWriteLock@12
_NdisDprAcquireSpinLock@4
_NdisDprReleaseReadWriteLock@8
_NdisDprReleaseSpinLock@4
_NdisEnumerateFilterModules@20
_NdisFCancelDirectOidRequest@8
_NdisFCancelOidRequest@8
_NdisFCancelSendNetBufferLists@8
_NdisFDeregisterFilterDriver@4
_NdisFDevicePnPEventNotify@8
_NdisFDirectOidRequest@8
_NdisFDirectOidRequestComplete@12
_NdisFGetOptionalSwitchHandlers@12
_NdisFIndicateReceiveNetBufferLists@20
_NdisFIndicateStatus@8
_NdisFNetPnPEvent@8
_NdisFOidRequest@8
_NdisFOidRequestComplete@12
_NdisFPauseComplete@4
_NdisFRegisterFilterDriver@16
_NdisFRestartComplete@8
_NdisFRestartFilter@4
_NdisFRetryAttach@8
_NdisFReturnNetBufferLists@12
_NdisFSendNetBufferLists@16
_NdisFSendNetBufferListsComplete@12
_NdisFSetAttributes@12
_NdisFSynchronousOidRequest@8
_NdisFreeBuffer@4
_NdisFreeBufferPool@4
_NdisFreeCloneNetBufferList@8
_NdisFreeCloneOidRequest@8
_NdisFreeFragmentNetBufferList@12
_NdisFreeGenericObject@4
_NdisFreeIoWorkItem@4
_NdisFreeMdl@4
_NdisFreeMemory@12
_NdisFreeMemoryWithTag@8
_NdisFreeMemoryWithTagPriority@12
_NdisFreeNetBuffer@4
_NdisFreeNetBufferList@4
_NdisFreeNetBufferListContext@8
_NdisFreeNetBufferListPool@4
_NdisFreeNetBufferPool@4
_NdisFreePacket@4
_NdisFreePacketPool@4
_NdisFreeRWLock@4
_NdisFreeReassembledNetBufferList@12
_NdisFreeRefCount@4
_NdisFreeScatterGatherList@12
_NdisFreeSharedMemory@8
_NdisFreeSpinLockExported@4
_NdisFreeTimerObject@4
_NdisGeneratePartialCancelId@0
_NdisGetAndReferenceCompartmentJobObject@12
_NdisGetBufferPhysicalArraySize@8
_NdisGetCurrentProcessorCounts@12
_NdisGetCurrentProcessorCpuUsage@4
_NdisGetCurrentSystemTime@4
_NdisGetDataBuffer@20
_NdisGetDeviceReservedExtension@4
_NdisGetDriverHandle@8
_NdisGetFirstBufferFromPacket@20
_NdisGetFirstBufferFromPacketSafe@24
_NdisGetHypervisorInfo@4
_NdisGetJobObjectCompartmentId@4
_NdisGetNetBufferListProtocolId@4
_NdisGetPacketCancelId@4
_NdisGetPacketFromNetBufferList@8
_NdisGetPoolFromNetBuffer@4
_NdisGetPoolFromNetBufferList@4
_NdisGetPoolFromPacket@4
_NdisGetProcessObjectCompartmentId@4
_NdisGetProcessorInformation@4
_NdisGetProcessorInformationEx@12
_NdisGetReceivedPacket@8
_NdisGetRefCount@4
_NdisGetRoutineAddress@4
_NdisGetRssProcessorInformation@12
_NdisGetSessionCompartmentId@4
_NdisGetSessionToCompartmentMappingEpochAndZero@0
_NdisGetSharedDataAlignment@0
_NdisGetSystemUpTime@4
_NdisGetSystemUpTimeEx@4
_NdisGetThreadObjectCompartmentId@4
_NdisGetThreadObjectCompartmentScope@12
_NdisGetVersion@0
_NdisGroupActiveProcessorCount@4
_NdisGroupActiveProcessorMask@4
_NdisGroupMaxProcessorCount@4
_NdisIMAssociateMiniport@8
_NdisIMCancelInitializeDeviceInstance@8
_NdisIMCopySendCompletePerPacketInfo@8
_NdisIMCopySendPerPacketInfo@8
_NdisIMDeInitializeDeviceInstance@4
_NdisIMDeregisterLayeredMiniport@4
_NdisIMGetBindingContext@4
_NdisIMGetCurrentPacketStack@8
_NdisIMGetDeviceContext@4
_NdisIMInitializeDeviceInstanceEx@12
_NdisIMNotifyPnPEvent@8
_NdisIMQueueMiniportCallback@12
_NdisIMRegisterLayeredMiniport@16
_NdisIMRevertBack@8
_NdisIMSwitchToMiniport@8
_NdisIMVBusDeviceAdd@8
_NdisIMVBusDeviceRemove@8
_NdisIfAddIfStackEntry@8
_NdisIfAllocateNetLuidIndex@8
_NdisIfAllocateNetLuidIndexEx@12
_NdisIfDeleteIfStackEntry@8
_NdisIfDeregisterInterface@4
_NdisIfDeregisterProvider@4
_NdisIfFreeNetLuidIndex@8
_NdisIfGetInterfaceIndexFromNetLuid@12
_NdisIfGetNetLuidFromInterfaceIndex@8
_NdisIfQueryBindingIfIndex@20
_NdisIfRegisterInterface@24
_NdisIfRegisterProvider@12
_NdisImmediateReadPciSlotInformation@20
_NdisImmediateReadPortUchar@12
_NdisImmediateReadPortUlong@12
_NdisImmediateReadPortUshort@12
_NdisImmediateReadSharedMemory@16
_NdisImmediateWritePciSlotInformation@20
_NdisImmediateWritePortUchar@12
_NdisImmediateWritePortUlong@12
_NdisImmediateWritePortUshort@12
_NdisImmediateWriteSharedMemory@16
_NdisInitializeEvent@4
_NdisInitializeReadWriteLock@4
_NdisInitializeString@8
_NdisInitializeTimer@12
_NdisInitializeWrapper@16
_NdisInitiateOffload@8
_NdisInterlockedAddUlong@12
_NdisInterlockedDecrement@4
_NdisInterlockedIncrement@4
_NdisInterlockedInsertHeadList@12
_NdisInterlockedInsertTailList@12
_NdisInterlockedPopEntryList@8
_NdisInterlockedPushEntryList@12
_NdisInterlockedRemoveHeadList@8
_NdisInvalidateOffload@8
_NdisIsStatusIndicationCloneable@4
_NdisLWMDeregisterMiniportDriver@4
_NdisLWMInitializeNetworkInterface@16
_NdisLWMRegisterMiniportDriver@12
_NdisLWMStartNetworkInterface@4
_NdisLWMUninitializeNetworkInterface@4
_NdisMAllocateMapRegisters@20
_NdisMAllocateNetBufferSGList@24
_NdisMAllocatePort@8
_NdisMAllocateSharedMemory@20
_NdisMAllocateSharedMemoryAsync@16
_NdisMAllocateSharedMemoryAsyncEx@16
_NdisMCancelTimer@8
_NdisMCloseLog@4
_NdisMCmActivateVc@8
_NdisMCmCreateVc@16
_NdisMCmDeactivateVc@4
_NdisMCmDeleteVc@4
_NdisMCmOidRequest@16
_NdisMCmRegisterAddressFamily@16
_NdisMCmRegisterAddressFamilyEx@8
_NdisMCmRequest@16
_NdisMCoActivateVcComplete@12
_NdisMCoDeactivateVcComplete@8
_NdisMCoIndicateReceiveNetBufferLists@16
_NdisMCoIndicateReceivePacket@12
_NdisMCoIndicateStatus@20
_NdisMCoIndicateStatusEx@12
_NdisMCoOidRequestComplete@16
_NdisMCoReceiveComplete@4
_NdisMCoRequestComplete@12
_NdisMCoSendComplete@12
_NdisMCoSendNetBufferListsComplete@12
_NdisMCompleteBufferPhysicalMapping@12
_NdisMConfigMSIXTableEntry@8
_NdisMCreateLog@12
_NdisMDeregisterAdapterShutdownHandler@4
_NdisMDeregisterDevice@4
_NdisMDeregisterDmaChannel@4
_NdisMDeregisterInterrupt@4
_NdisMDeregisterInterruptEx@4
_NdisMDeregisterIoPortRange@16
_NdisMDeregisterMiniportDriver@4
_NdisMDeregisterScatterGatherDma@4
_NdisMDeregisterWdiMiniportDriver@4
_NdisMDirectOidRequestComplete@12
_NdisMEnableVirtualization@20
_NdisMFlushLog@4
_NdisMFreeMapRegisters@4
_NdisMFreeNetBufferSGList@12
_NdisMFreePort@8
_NdisMFreeSharedMemory@24
_NdisMGetBusData@20
_NdisMGetDeviceProperty@24
_NdisMGetDmaAlignment@4
_NdisMGetMiniportInitAttributes@8
_NdisMGetOffloadHandlers@12
_NdisMGetVirtualDeviceLocation@24
_NdisMGetVirtualFunctionBusData@20
_NdisMGetVirtualFunctionLocation@20
_NdisMIdleNotificationComplete@4
_NdisMIdleNotificationCompleteEx@8
_NdisMIdleNotificationConfirm@8
_NdisMIndicateReceiveNetBufferLists@20
_NdisMIndicateStatus@16
_NdisMIndicateStatusComplete@4
_NdisMIndicateStatusEx@8
_NdisMInitializeScatterGatherDma@12
_NdisMInitializeTimer@16
_NdisMInitiateOffloadComplete@8
_NdisMInvalidateConfigBlock@16
_NdisMInvalidateOffloadComplete@8
_NdisMMapIoSpace@20
_NdisMNetPnPEvent@8
_NdisMOffloadEventIndicate@12
_NdisMOidRequestComplete@12
_NdisMPauseComplete@4
_NdisMPciAssignResources@12
_NdisMPromoteMiniport@4
_NdisMQueryAdapterInstanceName@8
_NdisMQueryAdapterResources@16
_NdisMQueryOffloadStateComplete@8
_NdisMQueryProbedBars@8
_NdisMQueueDpc@16
_NdisMQueueDpcEx@16
_NdisMReadConfigBlock@16
_NdisMReadDmaCounter@4
_NdisMReenumerateFailedAdapter@4
_NdisMRegisterAdapterShutdownHandler@12
_NdisMRegisterDevice@24
_NdisMRegisterDmaChannel@24
_NdisMRegisterInterrupt@28
_NdisMRegisterInterruptEx@16
_NdisMRegisterIoPortRange@16
_NdisMRegisterMiniport@12
_NdisMRegisterMiniportDriver@20
_NdisMRegisterScatterGatherDma@12
_NdisMRegisterUnloadHandler@8
_NdisMRegisterWdiMiniportDriver@24
_NdisMRemoveMiniport@4
_NdisMRequestDpc@8
_NdisMResetComplete@12
_NdisMResetMiniport@4
_NdisMRestartComplete@8
_NdisMSendComplete@12
_NdisMSendNetBufferListsComplete@12
_NdisMSetAttributes@16
_NdisMSetAttributesEx@20
_NdisMSetBusData@20
_NdisMSetMiniportAttributes@8
_NdisMSetMiniportSecondary@8
_NdisMSetPeriodicTimer@8
_NdisMSetVirtualFunctionBusData@20
_NdisMSleep@4
_NdisMStartBufferPhysicalMapping@24
_NdisMSynchronizeWithInterrupt@12
_NdisMSynchronizeWithInterruptEx@16
_NdisMTerminateOffloadComplete@8
_NdisMUnmapIoSpace@12
_NdisMUpdateOffloadComplete@8
_NdisMWanIndicateReceive@20
_NdisMWanIndicateReceiveComplete@8
_NdisMWanSendComplete@12
_NdisMWriteConfigBlock@16
_NdisMWriteLogData@12
_NdisMapFile@12
_NdisMatchPdoWithPacket@8
_NdisMaxGroupCount@0
_NdisNblTrackerDeregisterComponent@4
_NdisNblTrackerQueryNblCurrentOwner@4
_NdisNblTrackerRecordEvent@16
_NdisNblTrackerRegisterComponent@12
_NdisNblTrackerTransferOwnership@20
_NdisOffloadTcpDisconnect@12
_NdisOffloadTcpForward@8
_NdisOffloadTcpReceive@8
_NdisOffloadTcpReceiveReturn@8
_NdisOffloadTcpSend@8
_NdisOidRequest@8
_NdisOpenAdapter@44
_NdisOpenAdapterEx@20
_NdisOpenConfiguration@12
_NdisOpenConfigurationEx@8
_NdisOpenConfigurationKeyByIndex@20
_NdisOpenConfigurationKeyByName@16
_NdisOpenFile@24
_NdisOpenNDKAdapter@12
_NdisOpenProtocolConfiguration@12
_NdisOverrideBusNumber@12
_NdisPacketPoolUsage@4
_NdisPacketSize@4
_NdisProcessorIndexToNumber@8
_NdisProcessorNumberToIndex@4
_NdisQueryAdapterInstanceName@8
_NdisQueryBindInstanceName@8
_NdisQueryBuffer@12
_NdisQueryBufferOffset@12
_NdisQueryBufferSafe@16
_NdisQueryDiagnosticSetting@8
_NdisQueryMapRegisterCount@8
_NdisQueryNetBufferPhysicalCount@4
_NdisQueryOffloadState@8
_NdisQueryPacket@20
_NdisQueryPendingIOCount@8
_NdisQueueIoWorkItem@12
_NdisReEnumerateProtocolBindings@4
_NdisReadConfiguration@20
_NdisReadMcaPosInformation@16
_NdisReadNetworkAddress@16
_NdisReadPciSlotInformation@20
_NdisReadPcmciaAttributeMemory@16
_NdisReferenceWithTag@8
_NdisRegisterDeviceEx@16
_NdisRegisterProtocol@16
_NdisRegisterProtocolDriver@12
_NdisRegisterTdiCallBack@8
_NdisReleaseNicActive@8
_NdisReleaseRWLock@8
_NdisReleaseReadWriteLock@8
_NdisReleaseSpinLock@4
_NdisRequest@12
_NdisReset@8
_NdisResetEvent@4
_NdisRetreatNetBufferDataStart@16
_NdisRetreatNetBufferListDataStart@20
_NdisReturnNetBufferLists@12
_NdisReturnPackets@8
_NdisScheduleWorkItem@4
_NdisSendNetBufferLists@16
_NdisSendPackets@12
_NdisSetAoAcOptions@8
_NdisSetCoalescableTimerObject@24
_NdisSetEvent@4
_NdisSetOptionalHandlers@8
_NdisSetPacketCancelId@8
_NdisSetPacketPoolProtocolId@8
_NdisSetPacketStatus@16
_NdisSetPeriodicTimer@8
_NdisSetProtocolFilter@32
_NdisSetSessionCompartmentId@8
_NdisSetThreadObjectCompartmentId@8
_NdisSetThreadObjectCompartmentScope@8
_NdisSetTimer@8
_NdisSetTimerEx@12
_NdisSetTimerObject@20
_NdisSetupDmaTransfer@24
_NdisSynchronousOidRequest@8
_NdisSystemActiveProcessorCount@4
_NdisSystemProcessorCount@0
_NdisTerminateOffload@8
_NdisTerminateWrapper@8
_NdisTestRWLockHeldByCurrentProcessorRead@4
_NdisTestRWLockHeldByCurrentProcessorWrite@4
_NdisTransferData@28
_NdisTryAcquireNicActive@8
_NdisTryAcquireRWLockRead@12
_NdisTryAcquireRWLockWrite@12
_NdisTryPromoteRWLockFromReadToWrite@8
_NdisUnbindAdapter@4
_NdisUnchainBufferAtBack@8
_NdisUnchainBufferAtFront@8
_NdisUnicodeStringToAnsiString@8
_NdisUnmapFile@4
_NdisUpcaseUnicodeString@8
_NdisUpdateOffload@8
_NdisUpdateSharedMemory@20
_NdisWaitEvent@8
_NdisWdfAsyncPowerReferenceCompleteNotification@12
_NdisWdfChangeSingleInstance@12
_NdisWdfCloseIrpHandler@4
_NdisWdfCreateIrpHandler@8
_NdisWdfDeregisterCx@4
_NdisWdfDeviceControlIrpHandler@4
_NdisWdfDeviceInternalControlIrpHandler@4
_NdisWdfExecuteMethod@20
_NdisWdfGenerateFdoNameIndex@0
_NdisWdfGetAdapterContextFromAdapterHandle@4
_NdisWdfGetGuidToOidMap@16
_NdisWdfMiniportDataPathPause@4
_NdisWdfMiniportDataPathStart@4
_NdisWdfMiniportDereference@4
_NdisWdfMiniportSetPower@12
_NdisWdfMiniportStarted@4
_NdisWdfMiniportTryReference@4
_NdisWdfPnPAddDevice@16
_NdisWdfPnpPowerEventHandler@12
_NdisWdfQueryAllData@24
_NdisWdfQuerySingleInstance@20
_NdisWdfReadConfiguration@20
_NdisWdfRegisterCx@20
_NdisWdfRegisterMiniportDriver@24
_NdisWriteConfiguration@16
_NdisWriteErrorLogEntry
_NdisWriteEventLogEntry@28
_NdisWritePciSlotInformation@20
_NdisWritePcmciaAttributeMemory@16
_NetioCopyOpaqueNetBufferListInformation@8
_PdcAllocate@12
_PdcFree@4
_PdcPortClose@4
_PdcPortOpenCommon@36
_PdcPortSendMessageSynchronously@12
_PdcTaskClientRegister@8
_PdcTaskClientRequest@8
_PdcTaskClientUnregister@4
_PdcpPortReleaseResources@4
_PiRegStateOpenClassKey@20
_PiRegStateReadStackCreationSettingsFromKey@8
_PktMonAttachProvider@12
_PktMonCleanupBindingContext@4
_PktMonClientAddEdge@24
_PktMonClientAddEdgeEx@24
_PktMonClientComponentRegister@28
_PktMonClientComponentRegisterEx@28
_PktMonClientComponentUnregister@4
_PktMonClientEnableCallback@4
_PktMonClientNblDrop@24
_PktMonClientNblDropNdis@24
_PktMonClientNblLogNdis@16
_PktMonClientSetCompProperty@16
_PktMonCompCloseCallback@4
_PktMonCompEnableCallback@4
_PktMonDetachProvider@4
_PpRegStateReadCreateClassCreationSettings@12
_PpRegStateUpdateStackCreationSettings@8
_PplCreateLookasideList@32
_PplDestroyLookasideList@8
_PplGenericAllocateFunction@16
_PplGenericFreeFunction@8
_PplHotAddProcCompleteNotify@8
_PplHotAddProcStartNotify@8
_PplpCreateOneLookasideList@40
_PplpFreeOneLookasideList@8
_PplpLazyInitializeLookasideList@8
_PrivateULongMult@12
_RtlULongAdd@12
_RtlUnwind@16
_SeSddlSecurityDescriptorFromSDDL@12
_SeSetSecurityAccessMask@8
_SeUtilSecurityInfoFromSecurityDescriptor@12
_SepSddlAddAceToAcl@28
_SepSddlDaclFromSDDLString@16
_SepSddlGetAclForString@12
_SepSddlGetSidForString@12
_SepSddlLookupAccessMaskInTable@12
_SepSddlParseWideStringUlong@12
_SepSddlSecurityDescriptorFromSDDLString@12
_TraceLoggingRegisterEx_EtwRegister_EtwSetInformation@12
_WPP_INIT_CONTROL_ARRAY@4
_WPP_RECORDER_SF_@20
_WPP_RECORDER_SF_D@24
_WPP_RECORDER_SF_DD@28
_WPP_RECORDER_SF_DDD@32
_WPP_RECORDER_SF_DDDD@36
_WPP_RECORDER_SF_DDDDD@40
_WPP_RECORDER_SF_DDDDDDDD@52
_WPP_RECORDER_SF_DDDDDDDDDDD@64
_WPP_RECORDER_SF_DDL@32
_WPP_RECORDER_SF_DDLc@36
_WPP_RECORDER_SF_DDLcD@40
_WPP_RECORDER_SF_DDLqdL@44
_WPP_RECORDER_SF_DDZ@32
_WPP_RECORDER_SF_DL@28
_WPP_RECORDER_SF_DZq@32
_WPP_RECORDER_SF_Dd@28
_WPP_RECORDER_SF_Ddd@32
_WPP_RECORDER_SF_Dq@28
_WPP_RECORDER_SF_DqL@32
_WPP_RECORDER_SF_DqLL@36
_WPP_RECORDER_SF_DqZ@32
_WPP_RECORDER_SF_Dql@32
_WPP_RECORDER_SF_DqlD@36
_WPP_RECORDER_SF_Dqq@32
_WPP_RECORDER_SF_DqqZZ@40
_WPP_RECORDER_SF_Dqqd@36
_WPP_RECORDER_SF_Dqqqqd@44
_WPP_RECORDER_SF_I@28
_WPP_RECORDER_SF_IL@32
_WPP_RECORDER_SF_L@24
_WPP_RECORDER_SF_LDD@32
_WPP_RECORDER_SF_LL@28
_WPP_RECORDER_SF_LLL@32
_WPP_RECORDER_SF_LLLL@36
_WPP_RECORDER_SF_LLLLLLLL@52
_WPP_RECORDER_SF_LLLLLLq@48
_WPP_RECORDER_SF_LZq@32
_WPP_RECORDER_SF_Ld@28
_WPP_RECORDER_SF_Ll@28
_WPP_RECORDER_SF_Llq@32
_WPP_RECORDER_SF_Lq@28
_WPP_RECORDER_SF_LqDLqD@44
_WPP_RECORDER_SF_LqL@32
_WPP_RECORDER_SF_LqZ@32
_WPP_RECORDER_SF_LqqZZ@40
_WPP_RECORDER_SF_PP@28
_WPP_RECORDER_SF_S@24
_WPP_RECORDER_SF_SD@28
_WPP_RECORDER_SF_Sd@28
_WPP_RECORDER_SF_Si@32
_WPP_RECORDER_SF_SqZ@32
_WPP_RECORDER_SF_Z@24
_WPP_RECORDER_SF_ZL@28
_WPP_RECORDER_SF_ZLqL@36
_WPP_RECORDER_SF_ZZ@28
_WPP_RECORDER_SF_ZZL@32
_WPP_RECORDER_SF_Zd@28
_WPP_RECORDER_SF_Zq@28
_WPP_RECORDER_SF_ZqD@32
_WPP_RECORDER_SF_Zqq@32
_WPP_RECORDER_SF__guid_@24
_WPP_RECORDER_SF__guid_D@28
_WPP_RECORDER_SF__guid_Dd@32
_WPP_RECORDER_SF__guid_Dq@32
_WPP_RECORDER_SF__guid_DqD@36
_WPP_RECORDER_SF__guid_L@28
_WPP_RECORDER_SF__guid_LL@32
_WPP_RECORDER_SF__guid_ZDDDDDDDDDDDDDDDDDDDDDDDD@124
_WPP_RECORDER_SF__guid_ZDDDIDDDIDDDIDDDIDDDIDDDIDDDI@168
_WPP_RECORDER_SF__guid_ZDIDIII@68
_WPP_RECORDER_SF__guid__guid__guid_@32
_WPP_RECORDER_SF__guid_d@28
_WPP_RECORDER_SF_d@24
_WPP_RECORDER_SF_dD@28
_WPP_RECORDER_SF_dDq@32
_WPP_RECORDER_SF_dL@28
_WPP_RECORDER_SF_dd@28
_WPP_RECORDER_SF_ddLLL@40
_WPP_RECORDER_SF_dddD@36
_WPP_RECORDER_SF_dddDL@40
_WPP_RECORDER_SF_dddd@36
_WPP_RECORDER_SF_dl@28
_WPP_RECORDER_SF_dlL@32
_WPP_RECORDER_SF_dllL@36
_WPP_RECORDER_SF_dq@28
_WPP_RECORDER_SF_dqZ@32
_WPP_RECORDER_SF_dqqL@36
_WPP_RECORDER_SF_i@28
_WPP_RECORDER_SF_i_guid_@32
_WPP_RECORDER_SF_l@24
_WPP_RECORDER_SF_ll@28
_WPP_RECORDER_SF_llL@32
_WPP_RECORDER_SF_q@24
_WPP_RECORDER_SF_qD@28
_WPP_RECORDER_SF_qDD@32
_WPP_RECORDER_SF_qDDDDDD@48
_WPP_RECORDER_SF_qDDLq@40
_WPP_RECORDER_SF_qDDqq@40
_WPP_RECORDER_SF_qDL@32
_WPP_RECORDER_SF_qDLLq@40
_WPP_RECORDER_SF_qDd@32
_WPP_RECORDER_SF_qDdZ@36
_WPP_RECORDER_SF_qDq@32
_WPP_RECORDER_SF_qDqD@36
_WPP_RECORDER_SF_qDqL@36
_WPP_RECORDER_SF_qDqLLLL@48
_WPP_RECORDER_SF_qDqLq@40
_WPP_RECORDER_SF_qDqLqD@44
_WPP_RECORDER_SF_qDqd@36
_WPP_RECORDER_SF_qDqqd@40
_WPP_RECORDER_SF_qL@28
_WPP_RECORDER_SF_qLDDDDDDDDDD@68
_WPP_RECORDER_SF_qLDDDDDDDDDDD@72
_WPP_RECORDER_SF_qLL@32
_WPP_RECORDER_SF_qLLDDDDDDDDDD@72
_WPP_RECORDER_SF_qLLL@36
_WPP_RECORDER_SF_qLLLL@40
_WPP_RECORDER_SF_qLLq@36
_WPP_RECORDER_SF_qLLqD@40
_WPP_RECORDER_SF_qLLqL@40
_WPP_RECORDER_SF_qLd@32
_WPP_RECORDER_SF_qLl@32
_WPP_RECORDER_SF_qLq@32
_WPP_RECORDER_SF_qLqL@36
_WPP_RECORDER_SF_qSd@32
_WPP_RECORDER_SF_qZ@28
_WPP_RECORDER_SF_qZD@32
_WPP_RECORDER_SF_qZDLd@40
_WPP_RECORDER_SF_qZL@32
_WPP_RECORDER_SF_qZZ@32
_WPP_RECORDER_SF_qZddD@40
_WPP_RECORDER_SF_qZq@32
_WPP_RECORDER_SF_q_guid_@28
_WPP_RECORDER_SF_q_guid_d@32
_WPP_RECORDER_SF_qd@28
_WPP_RECORDER_SF_qdD@32
_WPP_RECORDER_SF_qdDd@36
_WPP_RECORDER_SF_qdL@32
_WPP_RECORDER_SF_qdq@32
_WPP_RECORDER_SF_ql@28
_WPP_RECORDER_SF_qlL@32
_WPP_RECORDER_SF_qll@32
_WPP_RECORDER_SF_qlll@36
_WPP_RECORDER_SF_qllq@36
_WPP_RECORDER_SF_qq@28
_WPP_RECORDER_SF_qqD@32
_WPP_RECORDER_SF_qqDD@36
_WPP_RECORDER_SF_qqDL@36
_WPP_RECORDER_SF_qqDd@36
_WPP_RECORDER_SF_qqL@32
_WPP_RECORDER_SF_qqLd@36
_WPP_RECORDER_SF_qqZ@32
_WPP_RECORDER_SF_qqZZ@36
_WPP_RECORDER_SF_qqZddZ@44
_WPP_RECORDER_SF_qqZddZD@48
_WPP_RECORDER_SF_qq_guid_@32
_WPP_RECORDER_SF_qq_guid_qd@40
_WPP_RECORDER_SF_qqd@32
_WPP_RECORDER_SF_qqil@40
_WPP_RECORDER_SF_qqill@44
_WPP_RECORDER_SF_qql@32
_WPP_RECORDER_SF_qqq@32
_WPP_RECORDER_SF_qqqD@36
_WPP_RECORDER_SF_qqqDD@40
_WPP_RECORDER_SF_qqqL@36
_WPP_RECORDER_SF_qqqd@36
_WPP_RECORDER_SF_qqqq@36
_WPP_RECORDER_SF_qqqqD@40
_WPP_RECORDER_SF_qqqqL@40
_WPP_RECORDER_SF_qs@28
_WPP_RECORDER_SF_qsD@32
_WPP_RECORDER_SF_qsDDs@40
_WPP_RECORDER_SF_sL@28
_WPP_RECORDER_SF_sZZ@32
_WdmlibInit@0
_WdmlibIoCreateDeviceSecure@36
_WdmlibRtlInitUnicodeStringEx@8
_WppClassicProviderCallback@16
_WppInitKm@8
_WppIsEqualGuid@8
_WppLoadTracingSupport@0
_WppTraceCallback@24
__NLG_Call
__NLG_Notify
__NLG_Notify1
__SEH_epilog4
__SEH_epilog4_GS
__SEH_prolog4
__SEH_prolog4_GS
___report_gsfailure
___report_rangecheckfailure
___security_init_cookie
__alldiv
__allmul
__allshl
__aulldiv
__except_handler4
__local_unwind4
__seh_longjmp_unwind4@4
__tlgCreate1Sz_char@8
__tlgDefineProvider_annotation__Tlgg_ndisTraceLogProviderProv
__tlgDefineProvider_annotation__Tlgmtakm_hTelemetryAssertDiagTrackProv
__tlgDefineProvider_annotation__Tlgmtakm_hTelemetryAssertDiagTrack_KMProv
__tlgDefineProvider_annotation__Tlgmtakm_hTelemetryAssertProv
__tlgEnableCallback@36
__tlgKeywordOn@12
__tlgWriteTransfer_EtwWriteTransfer@24
_memcmp
_memcpy
_memmove
_memset
_ndisIovInvalidateBlockCompletion@12
_ndisNdkPcwAddCounter@4
_ndisNdkPcwCollectData@4
_ndisNdkPcwCollectMiniportStats@8
_ndisNdkPcwEnumerateInstances@4
_ndisNdkPcwRemoveCounter@4
_ndisSriovGetResourceForBar@16
_ndisSriovInterfaceGetDeviceLocation@20
_ndisSriovInterfaceGetVendorAndDeviceIds@16
_ndisSriovInterfaceQueryProbedBars@8
_ndisSriovInterfaceReadVFConfig@20
_ndisSriovInterfaceReadVfConfigBlock@20
_ndisSriovInterfaceResetVF@8
_ndisSriovInterfaceSetVfPowerState@16
_ndisSriovInterfaceWriteVFConfig@20
_ndisSriovInterfaceWriteVfConfigBlock@20
_ndisSriovQueryLuid@8
_wil_atomic_uint32_compare_exchange_relaxed@12
*/

enum _EX_POOL_PRIORITY;
enum _INTERFACE_TYPE;
struct _LIST_ENTRY;
struct _KDEVICE_QUEUE_ENTRY;
struct _WAIT_CONTEXT_BLOCK;
enum SE_WS_APPX_SIGNATURE_ORIGIN;
enum _MMLISTS;
struct _MMPFNLIST;
struct _DISPATCHER_HEADER;
struct _KEVENT;
struct _MI_DECAY_TIMER_LINKAGE;
struct _MI_DECAY_TIMER_LINK;
struct _WORK_QUEUE_ITEM;
struct _MI_LDW_WORK_CONTEXT;
struct _MI_AVAILABLE_PAGE_WAIT_STATES;
struct _RTL_BITMAP;
struct _RTL_RB_TREE;
enum _MI_SLAB_ALLOCATOR_TYPE;
enum _MI_SLAB_ALLOCATOR_PROTECTION;
struct _MI_SLAB_ALLOCATOR_CONTEXT;
struct _MI_PARTITION_PAGE_LISTS;
enum _PS_MITIGATION_OPTION;
struct _ASSEMBLY_STORAGE_MAP;
enum _NT_PRODUCT_TYPE;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _TP_CALLBACK_PRIORITY;
enum _KSPIN_LOCK_QUEUE_NUMBER;
enum _POOL_TYPE;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
enum _EVENT_TYPE;
enum _PP_NPAGED_LOOKASIDE_NUMBER;
struct _KSEMAPHORE;
enum _EX_GEN_RANDOM_DOMAIN;
enum _FILE_INFORMATION_CLASS;
struct _GDI_TEB_BATCH;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum _FSINFOCLASS;
struct _SINGLE_LIST_ENTRY;
struct _ETW_BUFFER_QUEUE;
struct _PROCESSOR_NUMBER;
enum _DEVICE_RELATION_TYPE;
enum BUS_QUERY_ID_TYPE;
struct _GUID;
struct _ETW_DECODE_CONTROL_ENTRY;
enum DEVICE_TEXT_TYPE;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
enum _SYSTEM_POWER_STATE;
enum _POWER_STATE_TYPE;
enum POWER_ACTION;
enum _IO_PRIORITY_HINT;
enum _MEMORY_CACHING_TYPE;
enum _MM_PAGE_ACCESS_TYPE;
struct _KAPC_STATE;
enum _PF_FILE_ACCESS_TYPE;
struct _MMSECTION_FLAGS;
struct _EX_FAST_REF;
struct _EX_PUSH_LOCK;
struct _CONTROL_AREA;
enum _DEVICE_POWER_STATE;
union _LARGE_INTEGER;
enum _DEVICE_WAKE_DEPTH;
struct _KGDTENTRY;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
enum _WHEA_ERROR_SOURCE_TYPE;
enum _WHEA_ERROR_SOURCE_STATE;
struct _SID_AND_ATTRIBUTES;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
enum _WHEA_EVENT_LOG_ENTRY_TYPE;
enum _WHEA_EVENT_LOG_ENTRY_ID;
enum _WHEA_ERROR_TYPE;
struct _NON_PAGED_DEBUG_INFO;
struct __WIL__WNF_STATE_NAME;
enum _WHEA_ERROR_SEVERITY;
struct _REMOTE_PORT_VIEW;
struct _EVENT_DESCRIPTOR;
struct _TEB_ACTIVE_FRAME_CONTEXT;
enum _WHEA_ERROR_PACKET_DATA_FORMAT;
struct _GENERIC_MAPPING;
enum _EVENT_INFO_CLASS;
struct _RTL_DYNAMIC_HASH_TABLE;
enum wil_ReportingKind;
enum wil_details_ServiceReportingKind;
struct _IMAGE_DOS_HEADER;
enum wil_VariantReportingKind;
struct _KSPIN_LOCK_QUEUE;
struct _KLOCK_QUEUE_HANDLE;
union _MM_PAGE_ACCESS_INFO_FLAGS;
struct _MM_PAGE_ACCESS_INFO;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
enum wil_FeatureStore;
struct _IO_PRIORITY_INFO;
enum wil_FeatureEnabledState;
struct _FILE_BASIC_INFORMATION;
struct _IMAGE_DATA_DIRECTORY;
struct _ACCESS_REASONS;
struct _SCSI_REQUEST_BLOCK;
enum wil_FeatureVariantPayloadKind;
enum wil_FeatureChangeTime;
struct _PS_PROPERTY_SET;
struct _NT_TIB;
struct _FLOATING_SAVE_AREA;
struct _CONTEXT;
struct _DESCRIPTOR;
struct _KSPECIAL_REGISTERS;
struct _KPROCESSOR_STATE;
union _KPRCBFLAG;
struct _PP_LOOKASIDE_LIST;
union _SLIST_HEADER;
struct _GENERAL_LOOKASIDE_POOL;
struct _KDPC_LIST;
struct _KDPC_DATA;
struct _KGATE;
struct _KAFFINITY_EX;
struct _KSOFTWARE_INTERRUPT_BATCH;
union _ULARGE_INTEGER;
struct _KTIMER_TABLE_ENTRY;
struct _KTIMER_TABLE_STATE;
struct _KTIMER_TABLE;
struct _KDPC;
struct _PROC_IDLE_POLICY;
union _PPM_IDLE_SYNCHRONIZATION_STATE;
struct _PROC_FEEDBACK;
enum _PROC_HYPERVISOR_STATE;
struct _PPM_FFH_THROTTLE_STATE_INFO;
struct _PROC_IDLE_SNAP;
struct _PROC_PERF_CHECK_CONTEXT;
enum _KHETERO_CPU_QOS;
struct _PROCESSOR_POWER_STATE;
struct _KTIMER;
enum _PROCESSOR_CACHE_TYPE;
struct _CACHE_DESCRIPTOR;
struct _SYNCH_COUNTERS;
struct _FILESYSTEM_DISK_COUNTERS;
struct _KENTROPY_TIMING_STATE;
struct _IOP_IRP_STACK_PROFILER;
struct _KTIMER_EXPIRATION_TRACE;
struct _KSHARED_READY_QUEUE;
struct _KREQUEST_PACKET;
struct _REQUEST_MAILBOX;
struct _KPRCB;
struct _KPCR;
enum _RTL_FEATURE_CONFIGURATION_TYPE;
enum wil_details_FeatureTestStateKind;
union _TIMELINE_BITMAP;
struct _THREAD_ENERGY_VALUES;
enum wil_UsageReportingMode;
struct _MMPAGE_FILE_EXPANSION_FLAGS;
struct _IMAGE_FILE_HEADER;
struct _EVENT_HEADER;
struct _ETW_BUFFER_CONTEXT;
struct _EVENT_RECORD;
enum _MI_PFN_CACHE_ATTRIBUTE;
struct _LOADER_RESET_REASON;
struct _EVENT_DATA_DESCRIPTOR;
enum _MI_SYSTEM_VA_TYPE;
enum _SECURITY_IMPERSONATION_LEVEL;
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
enum POWER_POLICY_DEVICE_TYPE;
struct _UNICODE_STRING;
struct _POP_POLICY_DEVICE;
struct _PROCESS_DISK_COUNTERS;
enum _CM_LOAD_FAILURE_TYPE;
union _FILE_SEGMENT_ELEMENT;
enum UoWActionType;
struct _MI_NODE_NUMBER_ZERO_BASED;
struct _PS_JOB_WAKE_INFORMATION;
struct _ACTIVATION_CONTEXT_DATA;
enum HSTORAGE_TYPE;
struct _MI_PARTITION_STORES;
enum _CMP_FAILURE_INJECTION_POINT;
struct _LOADER_FEATURE_CONFIGURATION_INFORMATION;
enum _PCW_CALLBACK_TYPE;
union _XPF_MCE_FLAGS;
union _XPF_MC_BANK_FLAGS;
struct _WHEA_XPF_MC_BANK_DESCRIPTOR;
struct _WHEA_XPF_MCE_DESCRIPTOR;
union _WHEA_NOTIFICATION_FLAGS;
struct _WHEA_NOTIFICATION_DESCRIPTOR;
struct _WHEA_XPF_CMC_DESCRIPTOR;
struct _WHEA_XPF_NMI_DESCRIPTOR;
struct _WHEA_IPF_MCA_DESCRIPTOR;
struct _WHEA_IPF_CMC_DESCRIPTOR;
struct _WHEA_IPF_CPE_DESCRIPTOR;
struct _WHEA_PCI_SLOT_NUMBER;
union _AER_ROOTPORT_DESCRIPTOR_FLAGS;
struct _WHEA_AER_ROOTPORT_DESCRIPTOR;
union _AER_ENDPOINT_DESCRIPTOR_FLAGS;
struct _WHEA_AER_ENDPOINT_DESCRIPTOR;
union _AER_BRIDGE_DESCRIPTOR_FLAGS;
struct _WHEA_AER_BRIDGE_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR;
struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2;
struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD;
struct _WHEA_DEVICE_DRIVER_DESCRIPTOR;
enum PCW_REGISTRATION_FLAGS;
struct _MM_PAGE_ACCESS_INFO_HEADER;
enum _KHETERO_CPU_POLICY;
enum _IPI_TYPE;
enum _PNP_DEVNODE_STATE;
struct _EVENT_PAYLOAD_PREDICATE;
struct _AGGREGATED_PAYLOAD_FILTER;
struct _M128A;
enum PROFILE_STATUS;
struct _MIPFNBLINK;
enum _ARBITER_REQUEST_SOURCE;
enum _POWER_REQUEST_TYPE;
enum _POWER_REQUEST_TYPE_INTERNAL;
struct _KSCHEDULING_GROUP_POLICY;
struct _RTL_BALANCED_NODE;
struct _KSCB;
struct _KSCHEDULING_GROUP;
struct _WNF_STATE_NAME_REGISTRATION;
enum _PNP_REBALANCE_REASON;
enum _PNP_REBALANCE_FAILURE;
enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;
struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT;
struct _PNP_REBALANCE_TRACE_CONTEXT;
enum _PEP_ACPI_RESOURCE_TYPE;
enum _KINTERRUPT_MODE;
struct _EX_TIMER;
enum _KINTERRUPT_POLARITY;
enum _GPIO_PIN_CONFIG_TYPE;
struct _KDEVICE_QUEUE;
struct _ETW_SOFT_RESTART_CONTEXT;
enum _GPIO_PIN_IORESTRICTION_TYPE;
struct _MMVAD_FLAGS;
struct _MM_PRIVATE_VAD_FLAGS;
struct _MM_GRAPHICS_VAD_FLAGS;
struct _MM_SHARED_VAD_FLAGS;
struct _MMVAD_FLAGS1;
struct _MMVAD_SHORT;
enum SYSTEM_POWER_CONDITION;
enum _SERVERSILO_STATE;
enum _OPENCOUNT_REASON;
enum _POP_DEVICE_IDLE_TYPE;
struct _DEVICE_OBJECT_POWER_EXTENSION;
struct _DEVICE_NODE_IOMMU_EXTENSION;
enum RTLP_CSPARSE_BITMAP_STATE;
enum _RTLP_HP_ADDRESS_SPACE_TYPE;
struct _EPARTITION;
enum _RTLP_HP_LOCK_TYPE;
struct _FILE_OBJECT;
union _KE_PROCESS_CONCURRENCY_COUNT;
struct _KE_IDEAL_PROCESSOR_SET_BREAKPOINTS;
struct _KE_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK;
enum _HEAP_LFH_LOCKMODE;
struct _ETW_HASH_BUCKET;
enum _HEAP_SEG_RANGE_TYPE;
enum _RTLP_HP_ALLOCATOR;
enum _HEAP_FAILURE_TYPE;
enum _BLOB_ID;
struct _STACK_TABLE;
struct _POP_FX_WORK_POOL_ITEM;
enum _KWAIT_REASON;
struct _EXCEPTION_POINTERS;
enum _LOCK_OPERATION;
enum _IOP_PRIORITY_HINT;
enum _FS_FILTER_SECTION_SYNC_TYPE;
union _FS_FILTER_PARAMETERS;
enum _HAL_CLOCK_TIMER_MODE;
enum _TRANSFER_TYPE;
enum _CREATE_FILE_TYPE;
struct _MI_SLAB_ALLOCATOR_ENTRY;
enum _ETW_BUFFER_STATE;
enum _ETW_RT_EVENT_LOSS;
enum _ETW_PERIODIC_TIMER_STATE;
struct _DEVICE_RELATIONS;
enum ETW_COMPRESSION_RESUMPTION_MODE;
enum _KPROFILE_SOURCE;
struct _LUID;
struct _TOKEN_SOURCE;
enum _TOKEN_TYPE;
enum _WNF_STATE_NAME_LIFETIME;
struct _KIDTENTRY;
enum _WNF_DATA_SCOPE;
struct _MI_PROTOTYPE_PTES_NODE;
struct _IMAGE_SECURITY_CONTEXT;
struct _MI_IMAGE_SECURITY_REFERENCE;
enum _WNF_SUBSCRIPTION_STATE;
enum _IO_RATE_CONTROL_TYPE;
enum _JOBOBJECTINFOCLASS;
enum _OBJECT_INFORMATION_CLASS;
enum PPM_IDLE_BUCKET_TIME_TYPE;
struct _CI_NGEN_PATHS;
enum _FILE_OBJECT_EXTENSION_TYPE;
enum _IO_SESSION_STATE;
enum _PROCESS_SECTION_TYPE;
enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;
struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION;
enum FEATURE_CHANGE_TIME;
enum _EX_HEAP_TYPE;
struct _KWAIT_BLOCK;
enum _OB_OPEN_REASON;
enum _SECURITY_OPERATION_CODE;
struct _XSTATE_CONTEXT;
struct _XSTATE_SAVE;
enum _RTL_FEATURE_ENABLED_STATE_OPTIONS;
enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON;
enum _RTLP_HP_MEMORY_TYPE;
struct _MMSUPPORT_FLAGS;
struct _MMSUPPORT_INSTANCE;
enum _DEVPROP_OPERATOR;
enum _DEVICE_RELATION_LEVEL;
struct _DEVICE_OBJECT_LIST_ENTRY;
enum _KWAIT_BLOCK_STATE;
enum _VI_DEADLOCK_RESOURCE_TYPE;
enum _MI_ALTERNATE_LOCK_VA_TYPE;
enum _POP_SLEEP_CHECKPOINT;
struct _RTL_LOOKASIDE;
struct _RTL_DYNAMIC_LOOKASIDE;
struct _EX_HEAP_POOL_NODE;
struct _ETW_FILTER_STRING_TOKEN_ELEMENT;
enum PDC_CS_PHASE;
enum _MI_MEMORY_EVENT_TYPES;
struct _ETW_PERFECT_HASH_FUNCTION;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
enum _KOBJECTS;
enum _HARDWARE_COUNTER_TYPE;
struct _COUNTER_READING;
enum _POP_SLEEP_CHECKPOINT_STATUS;
enum PDC_RESOURCE;
struct DOCK_INTERFACE;
enum TlgIn_t;
enum _POWER_INFORMATION_LEVEL_INTERNAL;
enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
struct _ACTIVATION_CONTEXT;
struct _SE_AUDIT_PROCESS_CREATION_INFO;
enum _PS_WAKE_REASON;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;
enum _RTL_MEMORY_TYPE;
enum _LDR_DDAG_STATE;
enum wil_FeatureStage;
enum _KHETERO_RUNNING_TYPE;
struct _RTL_AVL_TREE;
struct _MMPAGING_FILE;
struct _ETW_EVENT_CALLBACK_CONTEXT;
struct _TP_CALLBACK_ENVIRON_V3;
enum _REG_NOTIFY_CLASS;
struct _EX_RUNDOWN_REF;
struct _MI_ENCLAVE_STATE;
struct _TP_POOL;
struct _DEBUG_TRANSPORT_DATA;
struct _CLIENT_ID;
struct _HANDLE_TRACE_DB_ENTRY;
enum _KTHREAD_TAG;
enum _KTRANSACTION_STATE;
enum _ETW_PERFECT_HASH_FUNCTION_TYPE;
enum _MI_ENCLAVE_TYPE;
enum _TAG_UNNAMED_1;
enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;
struct _EXT_IOMMU_DEVICE_ID_GIC;
enum _TYPE_OF_MEMORY;
struct _ETW_PRIV_HANDLE_DEMUX_TABLE;
enum _PLUGPLAY_EVENT_CATEGORY;
enum _VRF_RULE_CLASS_ID;
enum _KSOFTWARE_INTERRUPT_TARGET;
enum _IRQ_PRIORITY;
enum _KE_WAKE_SOURCE_TYPE;
enum _MI_WORKING_SET_TYPE;
enum _CONFIGURATION_CLASS;
enum _KTIMER2_COLLECTION_INDEX;
enum CPU_VENDORS;
enum _BUS_DATA_TYPE;
enum KD_CALLBACK_ACTION;
struct _FILE_STANDARD_INFORMATION;
struct _EX_WNF_SUBSCRIPTION;
enum _PO_FX_PERF_STATE_UNIT;
enum _HAL_PROCESSOR_STAT_TYPE;
enum _DUMP_EVENTS;
enum _MI_CFG_BITMAP_TYPE;
enum _PROCESS_VA_TYPE;
enum _PS_RESOURCE_TYPE;
struct _MI_FREE_LARGE_PAGES;
enum _HEAP_SEGMGR_LARGE_PAGE_POLICY;
enum _RTL_FEATURE_CONFIGURATION_PRIORITY;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
enum FEATURE_ENABLED_STATE;
enum IRPLOCK;
enum _BOOT_ENTROPY_SOURCE_ID;
struct _IO_RESOURCE_DESCRIPTOR;
enum _PNP_DEVICE_DELETE_TYPE;
enum _IO_ALLOCATION_ACTION;
struct _SYSTEM_POWER_STATE_CONTEXT;
union _POWER_STATE;
enum _MI_MEMORY_HIGHLOW;
enum _PS_PROTECTED_SIGNER;
struct _MI_COMBINE_PAGE_LISTHEAD;
enum _PNP_VETO_TYPE;
enum _PCI_BUSMASTER_RID_TYPE;
enum _WORKING_SET_TYPE;
struct _ARBITER_TEST_ALLOCATION_PARAMETERS;
struct _ARBITER_RETEST_ALLOCATION_PARAMETERS;
struct _ARBITER_BOOT_ALLOCATION_PARAMETERS;
struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;
struct _ARBITER_QUERY_CONFLICT_PARAMETERS;
struct _ARBITER_QUERY_ARBITRATE_PARAMETERS;
struct _ARBITER_ADD_RESERVED_PARAMETERS;
enum _ETW_STRING_TOKEN_TYPE;
enum _PNP_DEVICE_ACTION_REQUEST;
struct _PNP_DEVICE_ACTION_ENTRY;
enum _POP_FX_WORK_POOL_QUEUE;
struct _LUID_AND_ATTRIBUTES;
struct _INITIAL_PRIVILEGE_SET;
struct _PRIVILEGE_SET;
enum _MODE;
enum _POP_SYSTEM_IDLE_EVENT_TYPE;
enum _MI_DYNAMICBASE_BITMAP;
enum _KTHREAD_PPM_POLICY;
enum _KPROCESS_PPM_POLICY;
enum _MEMORY_CACHING_TYPE_ORIG;
struct _SECURITY_SUBJECT_CONTEXT;
struct _ACCESS_STATE;
enum _MI_SHARED_USER_PAGE_TYPES;
enum _TlgBlob_t;
struct _MDL;
struct _EPROCESS_QUOTA_BLOCK;
enum _KTHREAD_STATE;
union _WHEA_EVENT_LOG_ENTRY_FLAGS;
struct _WHEA_EVENT_LOG_ENTRY_HEADER;
struct _WHEA_EVENT_LOG_ENTRY;
enum _CM_DIRTY_VECTOR_OPERATION;
struct DEBUG_DEVICE_ADDRESS;
struct DEBUG_MEMORY_REQUIREMENTS;
enum KD_NAMESPACE_ENUM;
struct _DEBUG_IOMMU_EFI_DATA;
struct _DEBUG_DEVICE_DESCRIPTOR;
enum _SYSTEM_PROCESS_CLASSIFICATION;
struct _RTL_HASH_TABLE;
enum _PO_HIBER_FORCE_DISABLE_REASON;
enum _WOW64_SHARED_INFORMATION;
struct _MI_ACCESS_LOG_STATE;
enum _MI_KSTACK_TYPE;
struct _XSTATE_FEATURE;
struct _HANDLE_TABLE_ENTRY_INFO;
enum _ETW_GUID_TYPE;
union _WHEA_ERROR_RECORD_HEADER_VALIDBITS;
enum _EXT_IOMMU_DEVICE_TYPE;
enum _POP_DEEP_SLEEP_DISENGAGE_REASON;
enum _KI_CALLBACK;
struct _MI_COMBINE_WORKITEM;
enum INTERRUPT_CONNECTION_TYPE;
enum HAL_APIC_DESTINATION_MODE;
struct _EXHANDLE;
union _HANDLE_TABLE_ENTRY;
enum _KWAIT_STATE;
enum _MI_SUBVAD_LISTS;
enum _POLICY_AUDIT_EVENT_TYPE;
struct _wil_details_UsageSubscriptionData;
enum _USER_ACTIVITY_PRESENCE;
struct _MMPTE_SUBSECTION;
enum _PO_CS_DEVICE_NOTIFICATION_TYPE;
enum _MI_VAD_64K_TYPES;
enum _EXQUEUEINDEX;
struct _HEAP_EXTENDED_ENTRY;
struct _ACPI_METHOD_ARGUMENT_V1;
enum _KPROCESS_STATE;
struct _POP_FX_ACTIVE_TIME_ACCOUNTING;
struct _POP_FX_ACCOUNTING;
enum _KENLISTMENT_STATE;
struct _SID_IDENTIFIER_AUTHORITY;
enum _ADD_DRIVER_STAGE;
enum _CS_OVERRIDE_SETTING;
struct _HEAP_TAG_ENTRY;
struct _MI_SYSTEM_PTE_TYPE;
enum TlgOut_t;
enum _MI_IO_PFN_TYPE;
struct _MMPTE_HIGHLOW;
enum _TRACE_INFORMATION_CLASS;
struct _HEAP_UNPACKED_ENTRY;
enum _EXCEPTION_DISPOSITION;
struct _PEP_CRASHDUMP_INFORMATION;
struct _SID;
struct _FILE_GET_QUOTA_INFORMATION;
enum _MI_PARTITION_THREAD;
struct _POP_FX_IDLE_STATE;
enum _PERFINFO_MM_STAT;
struct _FILE_NETWORK_OPEN_INFORMATION;
enum _MI_WRITE_TYPES;
struct _HEAP_ENTRY_EXTRA;
struct _HEAP_ENTRY;
struct _HEAP_VIRTUAL_ALLOC_ENTRY;
struct _WNF_LOCK;
enum PDCCLIENTID;
enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT;
enum PROFILE_DEPARTURE_STYLE;
struct _THERMAL_INFORMATION_EX;
enum LSA_FOREST_TRUST_RECORD_TYPE;
struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE;
union _POP_FX_DEVICE_STATUS;
enum _KRESOURCEMANAGER_STATE;
enum _THREAD_WORKLOAD_CLASS;
enum _SEP_CACHED_HANDLES_ENTRY_TYPE;
struct _WNF_SILODRIVERSTATE;
enum _MI_CROSS_PARTITION_CHARGE_TYPE;
struct _EXCEPTION_REGISTRATION_RECORD;
enum _HV_EXT_EPF_MODE;
struct _KSYSTEM_TIME;
struct _PEB_LDR_DATA;
enum _POP_POWER_ACTION_WATCHDOG_STATE;
enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;
enum _PPM_PERF_QOS_DISABLE_REASON;
enum _MI_VAD_ALLOCATION_CELL_TYPE;
enum _ConnectionResourceConsumerDesc;
enum _PROCESS_TERMINATE_REQUEST_REASON;
struct _PEB;
enum _VRF_TRIAGE_CONTEXT;
enum _REQUESTER_TYPE;
struct _STRING;
struct _RTL_DRIVE_LETTER_CURDIR;
enum _KERNEL_STACK_LIMITS;
enum ReplacesCorHdrNumericDefines;
enum _ARBITER_RESULT;
enum PDC_ACTIVITY_TYPE;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
enum _MI_INPAGE_SUPPORT_TYPES;
enum _MI_MIRROR_BITMAP_TYPES;
union wil_details_ReportedState;
enum _POP_IO_STATUS;
struct _MM_PAGED_POOL_INFO;
enum KTM_STATE;
enum _LDR_DLL_LOAD_REASON;
enum _KCONTINUE_TYPE;
enum _RTL_GENERIC_COMPARE_RESULTS;
struct _CURDIR;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _NAMED_PIPE_CREATE_PARAMETERS;
enum _PO_MODERN_SLEEP_ACTION;
enum _FAULT_INFORMATION_ARCH;
enum _DMA_WIDTH;
struct wil_FeatureState;
enum _DMA_SPEED;
struct _MMPTE_HARDWARE;
struct _MMPTE_PROTOTYPE;
struct _MMPTE_SOFTWARE;
struct _MMPTE_TIMESTAMP;
struct _MMPTE_TRANSITION;
struct _MMPTE_LIST;
struct _MMPTE;
enum _MI_AVAILABLE_PAGE_WAIT_TYPES;
enum _DOMAIN_CONFIGURATION_ARCH;
enum _ETW_HEADER_TYPE;
enum _CM_SHARE_DISPOSITION;
enum _ARBITER_ACTION;
enum _FAULT_INFORMATION_ARM64_TYPE;
union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
struct _PS_TRUSTLET_ATTRIBUTE_TYPE;
enum _KTRANSACTION_OUTCOME;
enum _PNP_WATCHDOG_TYPE;
struct _PPM_SELECTION_STATISTICS;
enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE;
enum _PEP_WORK_TYPE;
struct _GENERAL_LOOKASIDE;
struct _FAST_MUTEX;
struct _PAGED_LOOKASIDE_LIST;
enum _CONFIGURATION_TYPE;
enum _ETW_NOTIFICATION_TYPE;
enum _PO_FX_PERF_STATE_TYPE;
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE;
struct LIST_ENTRY64;
struct LIST_ENTRY32;
struct _PS_MITIGATION_OPTIONS_MAP;
struct _DOMAIN_CONFIGURATION_ARM64;
struct _DOMAIN_CONFIGURATION;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _XSTATE_CONFIGURATION;
struct _KUSER_SHARED_DATA;
struct _POP_FX_LOG_ENTRY;
struct _MI_PAGE_COMBINE_STATISTICS;
struct _MI_PAGE_COMBINING_SUPPORT;
struct _KiIoAccessMap;
struct _PERFINFO_PPM_STATE_SELECTION;
struct _TP_CLEANUP_GROUP;
struct _IO_WORKITEM;
struct _PS_TRUSTLET_ATTRIBUTE_HEADER;
struct _PS_TRUSTLET_ATTRIBUTE_DATA;
struct _PS_TRUSTLET_CREATE_ATTRIBUTES;
struct _TP_CALLBACK_INSTANCE;
struct _MI_PAGING_FILE_SPACE_BITMAPS;
struct _PPM_VETO_ACCOUNTING;
struct _PPM_IDLE_STATE;
struct _PERF_CONTROL_STATE_SELECTION;
struct _MI_WSLE;
struct _PROC_PERF_HISTORY_ENTRY;
struct _ACTIVATION_CONTEXT_STACK;
struct _TEB;
struct _EXT_DELETE_PARAMETERS;
struct _EXCEPTION_RECORD;
struct _IO_DRIVER_CREATE_CONTEXT;
struct _PROC_PERF_QOS_CLASS_POLICY;
struct _PROC_PERF_DOMAIN;
struct _WNF_SCOPE_MAP_ENTRY;
struct _OBJECT_DIRECTORY;
struct _RTL_CRITICAL_SECTION;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _HAL_NODE_RANGE;
struct _POP_FX_WORK_ORDER;
struct _LEAP_SECOND_DATA;
struct POHANDLE__;
struct _IO_MINI_COMPLETION_PACKET_USER;
struct _KHETERO_PROCESSOR_SET;
struct _SEP_CACHED_HANDLES_TABLE;
struct _OB_HANDLE_REVOCATION_BLOCK;
struct _SEP_LOGON_SESSION_REFERENCES;
struct _TEB_ACTIVE_FRAME;
union _POP_FX_COMPONENT_FLAGS;
struct _POP_FX_COMPONENT;
union _ENERGY_STATE_DURATION;
struct _PROCESS_ENERGY_VALUES;
struct _DMA_IOMMU_INTERFACE;
struct _SEP_SILOSTATE;
struct _PAE_PAGEINFO;
struct _PAE_ENTRY;
struct _RTL_SPLAY_LINKS;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
union _JOBOBJECT_ENERGY_TRACKING_STATE;
struct _XSAVE_FORMAT;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_AREA;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_NT_HEADERS;
struct _POP_POWER_PLANE;
union _KWAIT_STATUS_REGISTER;
struct _GROUP_AFFINITY;
struct _KAPC;
struct _KTHREAD;
struct _tlgProvider_t;
struct _POP_FX_DRIPS_WATCHDOG_CONTEXT;
struct _WNF_NODE_HEADER;
struct _WNF_STATE_DATA;
struct _VF_AVL_TREE;
union __m128;
struct _PPM_SELECTION_MENU;
union wil_details_FeatureStateCache;
struct _PPM_SELECTION_DEPENDENCY;
struct _VI_DEADLOCK_RESOURCE;
struct _KTRAP_FRAME;
union _KEXECUTE_OPTIONS;
union _KSTACK_COUNT;
struct _KPROCESS;
struct _PROCESSOR_IDLE_CONSTRAINTS;
struct _PROCESSOR_IDLE_PREPARE_INFO;
struct _PPM_COORDINATED_SELECTION;
struct _PPM_IDLE_STATES;
struct _PROCESSOR_IDLE_DEPENDENCY;
union _POP_FX_PERF_FLAGS;
struct _KQUEUE;
struct _KTHREAD_COUNTERS;
struct _THREAD_PERFORMANCE_DATA;
struct _VF_TRACKER_STAMP;
struct _POP_FX_WORK_POOL;
struct _POP_FX_PLUGIN;
struct _MI_CROSS_PARTITION_CHARGES;
struct _POWER_SEQUENCE;
struct _PHYSICAL_MEMORY_RUN;
struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE;
struct _EX_PUSH_LOCK_AUTO_EXPAND;
struct _CM_INTENT_LOCK;
struct _EXP_LICENSE_STATE;
struct _KLOCK_ENTRY_LOCK_STATE;
union _KLOCK_ENTRY_BOOST_BITMAP;
struct _KLOCK_ENTRY;
struct _MI_CLONE_BLOCK_FLAGS;
struct _MMCLONE_BLOCK;
struct _MI_CACHED_PTE;
struct _flags;
union _KQOS_GROUPING_SETS;
struct _KNODE;
struct _POP_IRP_DATA;
union _MI_RESERVATION_CLUSTER_INFO;
struct tagSWITCH_CONTEXT_ATTRIBUTE;
struct _MI_EXTRA_IMAGE_INFORMATION;
struct _PSP_STORAGE;
struct _MI_PTE_CHAIN_HEAD;
struct _MI_RESTRICTED_MODWRITES;
struct _MI_ACTIVE_PFN;
struct _MMPFNENTRY1;
struct _MMPFNENTRY3;
struct _MMPFN;
struct _LOOKASIDE_LIST_EX;
struct _VF_AVL_TREE_NODE;
struct _VF_AVL_TREE_NODE_EX;
struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS;
struct _VF_TARGET_DRIVER;
struct _PO_DIRECTED_DRIPS_STATE;
struct _MMSECURE_FLAGS;
struct _ARBITER_ORDERING_LIST;
struct _ARBITER_INSTANCE;
struct _EVENT_FILTER_DESCRIPTOR;
struct _VF_POOL_TRACE;
struct _SECTION_IMAGE_INFORMATION;
struct _MI_SECTION_IMAGE_INFORMATION;
struct _SEGMENT_FLAGS;
struct _EX_PARTITION;
struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY;
struct _KPRIQUEUE;
struct _EX_WORK_QUEUE;
struct _EXT_IOMMU_DEVICE_ID_TEST;
struct _RTL_CHASH_ENTRY;
struct _PO_DIAG_STACK_RECORD;
struct _RTL_CHASH_TABLE;
struct _MI_PARTITION_FLAGS;
struct _MI_PARTITION_CORE;
struct _MMPAGE_FILE_EXPANSION;
struct _MMMOD_WRITER_LISTHEAD;
struct _MI_MODWRITE_DATA;
struct _MI_PARTITION_MODWRITES;
struct _MMDEREFERENCE_SEGMENT_HEADER;
struct _MI_PARTITION_SEGMENTS;
struct _MI_PARTITION_COMMIT;
struct _MI_PARTITION_ZEROING;
struct _MMWORKING_SET_EXPANSION_HEAD;
struct _MMWSL_INSTANCE;
struct _MI_PAGEFILE_TRACES;
struct _MI_VISIBLE_PARTITION;
struct _MI_PARTITION;
struct _IO_RESOURCE_LIST;
struct _PPM_SELECTION_MENU_ENTRY;
struct wil_details_FeatureDescriptor;
struct _PPM_VETO_ENTRY;
union _WHEA_ERROR_PACKET_FLAGS;
struct _WHEA_ERROR_PACKET_V2;
struct _PROC_IDLE_STATE_BUCKET;
struct _PROC_IDLE_STATE_ACCOUNTING;
struct _PROC_IDLE_ACCOUNTING;
union _WHEA_PERSISTENCE_INFO;
struct _PROC_FEEDBACK_COUNTER;
struct _MI_BAD_MEMORY_EVENT_ENTRY;
struct _MI_PROBE_RAISE_TRACKER;
struct _MI_FORCED_COMMITS;
struct _MI_RESAVAIL_FAILURES;
struct _MI_ERROR_STATE;
union _WHEA_TIMESTAMP;
struct _CHILD_LIST;
struct _CM_KEY_REFERENCE;
struct _CM_KEY_NODE;
struct _CM_KEY_VALUE;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _CM_KEY_SECURITY;
struct _CM_KEY_INDEX;
struct _CM_BIG_DATA;
union _u;
struct _CELL_DATA;
struct _RTL_FEATURE_USAGE_REPORT;
struct _EPROCESS_VALUES;
struct _CMSI_RW_LOCK;
struct _HVP_VIEW_MAP;
struct _FREE_DISPLAY;
struct _DUAL;
struct _HHIVE;
struct _MMCLONE_DESCRIPTOR;
struct _PROC_PERF_CONSTRAINT;
struct _HV_GET_BIN_CONTEXT;
struct _THERMAL_POLICY;
struct BATTERY_REPORTING_SCALE;
struct _SID_AND_ATTRIBUTES_HASH;
struct _MI_REBUILD_LARGE_PAGE_TIMER;
struct _MI_LARGE_PAGE_LISTS_CHANGING;
struct FEATURE_LOGGED_TRAITS;
struct _PROC_PERF_CHECK_SNAP;
struct _PROC_PERF_CHECK;
struct _PROC_PERF_LOAD;
union wil_details_RecordedState;
struct _PROC_PERF_HISTORY;
struct _WNF_STATE_NAME;
struct _PPM_CONCURRENCY_ACCOUNTING;
struct _ARBITER_LIST_ENTRY;
struct _POP_FX_DRIVER_CALLBACKS;
struct _IO_REMOVE_LOCK_COMMON_BLOCK;
struct _IO_REMOVE_LOCK;
struct _POP_FX_WORK_ORDER_WATCHDOG_INFO;
struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE;
struct _POP_FX_DEVICE;
struct _ARBITER_CONFLICT_INFO;
struct _RTL_FEATURE_CONFIGURATION;
struct _IO_STATUS_BLOCK;
struct _IRP;
struct _MI_ACCESS_VIOLATION_RANGE;
struct _ETW_COUNTERS;
struct _MMSUPPORT_SHARED;
struct _MMSUPPORT_FULL;
struct _ALPC_PROCESS_CONTEXT;
struct _PS_PROTECTION;
union _PS_INTERLOCKED_TIMER_DELAY_VALUES;
struct _JOBOBJECT_WAKE_FILTER;
struct _PS_PROCESS_WAKE_INFORMATION;
struct _EPROCESS;
struct _KERNEL_STACK_SEGMENT;
struct _KSTACK_CONTROL;
union _PS_CLIENT_SECURITY_CONTEXT;
struct _ETHREAD;
struct _MI_POOL_STATE;
struct _MMSUBSECTION_FLAGS;
struct _MI_SUBSECTION_ENTRY1;
struct _SUBSECTION;
struct _MSUBSECTION;
struct _MI_EXTENT_DELETION_WAIT_BLOCK;
struct _MI_DLL_OVERFLOW_AREA;
struct _MI_SECTION_STATE;
struct _MM_SYSTEM_PAGE_COUNTS;
struct _MI_SYSTEM_IMAGE_STATE;
struct _MMSESSION;
struct _MI_SESSION_STATE;
struct _MI_PROCESS_STATE;
struct _MI_ZERO_COST_COUNTS;
struct _MI_HARDWARE_STATE;
struct _MI_SYSTEM_REGION_ANCHOR;
struct _MI_SYSTEM_REGION_REFERENCE;
struct _MI_SYSTEM_VA_STATE;
struct _MI_COMBINE_STATE;
struct _MI_PAGELIST_STATE;
struct _MI_PARTITION_STATE;
struct _MI_RESUME_WORKITEM;
struct _MI_SHUTDOWN_STATE;
struct _MI_DEBUGGER_STATE;
struct _MI_STANDBY_STATE;
struct _NPAGED_LOOKASIDE_LIST;
struct _MI_SYSTEM_PTE_STATE;
struct _MI_IO_CACHE_STATS;
struct _MI_IO_PAGE_STATE;
struct _MI_PAGING_IO_STATE;
struct _MI_COMMON_PAGE_STATE;
struct _MI_SYSTEM_TRIM_STATE;
struct _MI_WRITE_CALIBRATION;
struct _MI_SYSTEM_ZEROING;
struct _SYSPTES_HEADER;
struct _MI_VISIBLE_STATE;
struct _MI_SYSTEM_INFORMATION;
struct _TERMINATION_PORT;
struct _ETW_SYSTEM_LOGGER;
struct _PERFINFO_GROUPMASK;
struct _ETW_SYSTEM_LOGGER_SETTINGS;
struct _QUAD;
struct _DEVICE_OBJECT;
struct _DRIVER_OBJECT;
struct _DRIVER_EXTENSION;
struct _TOKEN_PRIVILEGES;
struct _IO_CLIENT_EXTENSION;
struct _FS_FILTER_CALLBACKS;
struct _ETW_STACK_CACHE;
struct _FS_FILTER_CALLBACK_DATA;
struct _ETW_FILTER_STRING_TOKEN;
struct _VPB;
struct _DIRTY_PAGE_STATISTICS;
struct _CC_EXTERNAL_CACHE_INFO;
struct _PO_POWER_PLANE_PROFILE;
struct _POP_DEVICE_POWER_PROFILE;
struct _SECTION_OBJECT_POINTERS;
struct _IO_COMPLETION_CONTEXT;
struct _OWNER_ENTRY;
struct _ERESOURCE;
struct _HAL_IOMMU_DISPATCH;
struct _PERIODIC_CAPTURE_STATE_GUIDS;
struct _FAKE_HEAP_ENTRY;
struct _FS_FILTER_SECTION_SYNC_OUTPUT;
struct _RTL_CSPARSE_BITMAP;
struct _RTL_SPARSE_ARRAY;
struct _HEAP_VAMGR_VASPACE;
struct _PLUGPLAY_EVENT_BLOCK;
struct _PNP_DEVICE_EVENT_ENTRY;
struct _SEGMENT_HEAP_EXTRA;
struct _RTL_HEAP_MEMORY_LIMIT_DATA;
struct _RTLP_HP_HEAP_GLOBALS;
struct _ETW_PARTITION_CONTEXT;
struct _EXT_SET_PARAMETERS_V0;
struct _FAST_IO_DISPATCH;
struct _KTB_FLUSH_VA;
struct _DBGK_SILOSTATE;
struct _HAL_LBR_ENTRY;
struct _OBJECT_HANDLE_INFORMATION;
struct _ETW_LBR_SUPPORT;
struct _PAGEFAULT_HISTORY;
struct _JOB_ACCESS_STATE;
struct _PEP_WORK_POWER_CONTROL;
struct _PEP_WORK_IDLE_STATE;
struct _PEBS_DS_SAVE_AREA32;
struct _PEBS_DS_SAVE_AREA64;
struct _PEBS_DS_SAVE_AREA;
struct _ETW_REF_CLOCK;
struct _KMUTANT;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _TOKEN_CONTROL;
struct _SECURITY_CLIENT_CONTEXT;
struct _ETW_STACK_TRACE_BLOCK;
struct _DISALLOWED_GUIDS;
struct _WMI_LOGGER_CONTEXT;
struct _MI_SYSTEM_NODE_NONPAGED_POOL;
struct _SILO_USER_SHARED_DATA;
struct _PROCESS_ENERGY_VALUES_EXTENSION;
struct _POP_FX_PERF_INFO;
struct _NUMA_MEMORY_RANGE;
struct _MCGEN_TRACE_CONTEXT;
struct _EVENT_FILTER_LEVEL_KW;
struct _COMPRESSED_DATA_INFO;
struct _INPUT_MAPPING_ELEMENT;
union _HV_PARTITION_PRIVILEGE_MASK;
struct _DBGKD_LOAD_SYMBOLS64;
struct _EXCEPTION_RECORD32;
struct _DBGKM_EXCEPTION32;
struct _IO_STACK_LOCATION;
struct _DBGKD_LOAD_SYMBOLS32;
struct _EXCEPTION_RECORD64;
struct _DBGKM_EXCEPTION64;
struct _INTERRUPT_REMAPPING_INFO;
struct _INTERRUPT_HT_INTR_INFO;
struct _INTERRUPT_VECTOR_DATA;
struct _IO_TIMER;
struct _INTERRUPT_CONNECTION_DATA;
struct _TRACE_ENABLE_INFO;
struct _DEVOBJ_EXTENSION;
struct _POP_RW_LOCK;
struct _THERMAL_COOLING_INTERFACE;
struct _POP_COOLING_EXTENSION;
struct _PO_FX_PERF_STATE;
struct _JOB_RATE_CONTROL_HEADER;
struct _PS_IO_CONTROL_ENTRY;
struct _EJOB;
struct _SEGMENT;
struct _JOB_NOTIFICATION_INFORMATION;
struct _WNF_TYPE_ID;
struct _JOB_CPU_RATE_CONTROL;
struct _DBGKD_FILL_MEMORY;
union _KALPC_DIRECT_EVENT;
struct _ALPC_DISPATCH_CONTEXT;
struct _OBP_SYSTEM_DOS_DEVICE_STATE;
struct _OBJECT_NAMESPACE_LOOKUPTABLE;
struct _OBP_SILODRIVERSTATE;
struct _SEP_RM_LSA_CONNECTION_STATE;
struct _ESERVERSILO_GLOBALS;
struct _OBJECT_REF_STACK_INFO;
struct _DBGKD_SEARCH_MEMORY;
struct _KLDR_DATA_TABLE_ENTRY;
struct _DEVICE_MAP;
struct _OBJECT_DIRECTORY_ENTRY;
struct _RELATIVE_SYMLINK_INFO;
struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION;
struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION;
struct _SEP_SID_VALUES_BLOCK;
struct _HEAP_LFH_SUBSEGMENT_OWNER;
struct _HEAP_LFH_BUCKET;
struct _ETW_LAST_ENABLE_INFO;
struct _ETW_GUID_ENTRY;
struct _ETW_SILODRIVERSTATE;
struct _BOOT_ENTROPY_SOURCE_LDR_RESULT;
struct _BOOT_ENTROPY_LDR_RESULT;
struct _ETW_FILTER_HEADER;
struct _ETW_FILTER_PID;
struct _ETW_FILTER_EVENT_NAME_DATA;
struct _WORK_QUEUE_ENTRY;
struct _ETW_PAYLOAD_FILTER;
struct _HV_X64_HYPERVISOR_FEATURES;
struct _EVENT_FILTER_HEADER;
struct _CC_VOLUME_TELEMETRY;
struct _EX_RUNDOWN_REF_CACHE_AWARE;
struct _WMI_BUFFER_HEADER;
struct _RTL_HP_SEG_ALLOC_POLICY;
struct _ETW_REALTIME_CONSUMER;
struct _DEVICE_FLAGS;
struct _CONFIGURATION_COMPONENT;
struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS;
struct _TOKEN_MANDATORY_POLICY;
struct _TOKEN_ACCESS_INFORMATION;
union _WHEA_REVISION;
union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;
struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR;
struct _FSRTL_ADVANCED_FCB_HEADER;
struct _WHEAP_WORK_QUEUE;
struct _ETW_APC_ENTRY;
struct _ETW_PMC_SUPPORT;
struct _GDI_TEB_BATCH32;
struct _HAL_PMC_COUNTERS;
struct _ETW_IPT_SUPPORT;
struct _ETW_HW_TRACE_EXT_INTERFACE;
struct _DELAY_ACK_FO;
struct _MI_PAGE_COLORS;
struct _MI_NODE_INFORMATION;
struct _DEVICE_DSM_DEFINITION;
struct _DBGKD_READ_MEMORY64;
struct _DBGKD_WRITE_MEMORY64;
struct _DBGKD_GET_CONTEXT;
struct _DBGKD_SET_CONTEXT;
struct _DBGKD_WRITE_BREAKPOINT64;
struct _DBGKD_RESTORE_BREAKPOINT;
struct _DBGKD_CONTINUE;
struct _X86_DBGKD_CONTROL_SET;
struct _IA64_DBGKD_CONTROL_SET;
struct _AMD64_DBGKD_CONTROL_SET;
struct _ARM_DBGKD_CONTROL_SET;
struct _ARM64_DBGKD_CONTROL_SET;
struct _ARMCE_DBGKD_CONTROL_SET;
struct _PPC_DBGKD_CONTROL_SET;
struct _DBGKD_ANY_CONTROL_SET;
struct _DBGKD_CONTINUE2;
struct _DBGKD_READ_WRITE_IO64;
struct _DBGKD_READ_WRITE_IO_EXTENDED64;
struct _DBGKD_QUERY_SPECIAL_CALLS;
struct _DBGKD_SET_SPECIAL_CALL64;
struct _DBGKD_SET_INTERNAL_BREAKPOINT64;
struct _DBGKD_GET_INTERNAL_BREAKPOINT64;
struct _DBGKD_GET_VERSION64;
struct _DBGKD_BREAKPOINTEX;
struct _DBGKD_READ_WRITE_MSR;
struct _DBGKD_GET_SET_BUS_DATA;
struct _DBGKD_QUERY_MEMORY;
struct _DBGKD_SWITCH_PARTITION;
struct _DBGKD_CONTEXT_EX;
struct _DBGKD_WRITE_CUSTOM_BREAKPOINT;
struct _DBGKD_MANIPULATE_STATE64;
struct _ETW_SILO_TRACING_BLOCK;
struct _OBJECT_HANDLE_COUNT_ENTRY;
union _WHEA_ERROR_RECORD_HEADER_FLAGS;
struct _WHEA_ERROR_RECORD_HEADER;
struct _ETW_SESSION_PERF_COUNTERS;
struct _WNF_SCOPE_MAP;
struct wil_details_FeatureTestState;
struct _WNF_SCOPE_INSTANCE;
struct _VF_BTS_RECORD;
struct _DBGKP_ERROR_PORT;
struct _NLS_STATE;
struct _JOB_NET_RATE_CONTROL;
struct _PROCESS_EXTENDED_ENERGY_VALUES;
struct _HEAP_FREE_ENTRY;
struct _VACB;
struct _MI_FREE_LARGE_PAGE_LIST;
struct _MM_SESSION_SPACE_FLAGS;
struct _MI_SESSION_DRIVER_UNLOAD;
struct _MM_SESSION_SPACE;
union _PEP_ACPI_RESOURCE_FLAGS;
struct _PEP_ACPI_SPB_RESOURCE;
struct _PEP_ACPI_SPB_UART_RESOURCE;
struct wil_details_RecordUsageResult;
struct FEATURE_ERROR;
struct _DBGKD_GET_INTERNAL_BREAKPOINT32;
struct _DBGKD_READ_WRITE_IO_EXTENDED32;
struct _MI_CACHED_PTES;
struct _TRUSTLET_MAILBOX_KEY;
struct _HANDLE_TABLE_FREE_LIST;
struct _HANDLE_TABLE;
struct _HANDLE_TRACE_DEBUG_INFO;
struct _OBJECT_NAME_INFORMATION;
struct _CM_DIRTY_VECTOR_LOG_ENTRY;
struct _PO_PROCESS_ENERGY_CONTEXT;
struct _KTSS;
struct _PI_RESOURCE_ARBITER_ENTRY;
struct _RTL_BALANCED_LINKS;
struct _RTL_AVL_TABLE;
struct _TraceLoggingMetadata_t;
struct _IO_SECURITY_CONTEXT;
struct _PCW_REGISTRATION;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _PEP_WORK_COMPLETE_PERF_STATE;
struct _ECP_LIST;
struct _MMVAD_FLAGS2;
struct _MI_VAD_SEQUENTIAL_INFO;
struct _MMVAD;
struct _INTERFACE;
struct _DEVICE_CAPABILITIES;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _PCW_REGISTRATION_INFORMATION;
struct _PEP_WORK_ACTIVE_COMPLETE;
struct _CM_RESOURCE_LIST;
struct _PEP_WORK_DEVICE_POWER;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
struct _PO_DEVICE_NOTIFY;
struct _PO_IRP_QUEUE;
struct _PO_IRP_MANAGER;
struct _DEVICE_NODE;
struct PEPHANDLE__;
struct _MMINPAGE_FLAGS;
struct _MI_STORE_INPAGE_COMPLETE_FLAGS;
struct _MI_HARD_FAULT_STATE;
struct _MMINPAGE_SUPPORT_FLOW_THROUGH;
struct _MMINPAGE_SUPPORT;
struct _VF_AVL_TABLE;
struct _CMSI_PROCESS_TUPLE;
struct _WNF_STATE_NAME_STRUCT;
struct _WNF_SUBSCRIPTION;
struct _WNF_NAME_INSTANCE;
struct _HBASE_BLOCK;
struct _PENDING_RELATIONS_LIST_ENTRY;
struct _PNP_WATCHDOG;
union _CPU_INFO;
struct _WDT_HANDLE;
struct _POOL_TRACKER_TABLE;
struct _RELATION_LIST;
struct _DEVICE_OBJECT_LIST;
struct _ALPC_COMPLETION_LIST_STATE;
struct _PO_FX_PERF_STATE_CHANGE;
struct _PO_FX_COMPONENT_PERF_SET;
union _PPM_POLICY_SETTINGS_MASK;
struct _PPM_ENGINE_SETTINGS;
struct _PEP_WORK_DEVICE_IDLE;
struct _PEP_WORK_COMPLETE_IDLE_STATE;
struct _PEP_WORK_ACPI_NOTIFY;
struct _PEP_WORK_INFORMATION;
struct _CM_UOW_SET_SD_DATA;
struct _HEAP_STOP_ON_TAG;
struct _VACB_ARRAY_HEADER;
struct _POP_FX_PROVIDER;
struct _POP_FX_DEPENDENT;
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
struct _POP_FX_PERF_SET;
struct _HEAP_SUBALLOCATOR_CALLBACKS;
struct _RTL_HP_LFH_CONFIG;
struct _HEAP_LFH_SUBSEGMENT_STAT;
union _HEAP_LFH_SUBSEGMENT_STATS;
struct _HEAP_LFH_CONTEXT;
struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION;
struct _POP_COMPONENT_POWER_PROFILE;
struct _ISRDPCSTATS_SEQUENCE;
struct _ISRDPCSTATS;
struct _KINTERRUPT;
struct _PROFILE_PARAMETER_BLOCK;
struct _LOADER_PERFORMANCE_DATA;
struct _LOADER_BUGCHECK_PARAMETERS;
struct _LOADER_HIVE_RECOVERY_INFO;
struct _VSM_PERFORMANCE_DATA;
struct _ETW_BOOT_CONFIG;
struct _LOADER_PARAMETER_EXTENSION;
struct _ARC_DISK_INFORMATION;
struct _CLIENT_ID64;
struct _DEVICE_DATA_SET_RANGE;
struct _LOCK_TRACKER;
struct _MEMORY_ALLOCATION_DESCRIPTOR;
struct _TRUSTLET_COLLABORATION_ID;
struct _OBJECT_HEADER_NAME_INFO;
struct _OBJECT_HEADER_PROCESS_INFO;
struct _ENODE;
struct _AUX_ACCESS_DATA;
struct _PNP_DEVICE_EVENT_LIST;
struct _PORT_MESSAGE;
struct _LPCP_MESSAGE;
struct _TXN_PARAMETER_BLOCK;
struct _EVENT_HEADER_EXTENDED_DATA_ITEM;
struct _MCUPDATE_INFO;
struct _TRIAGE_EX_WORK_QUEUE;
struct _LOCK_HEADER;
struct _WHEA_ERROR_SOURCE_DESCRIPTOR;
struct _WHEA_ERROR_RECORD;
struct _iobuf;
struct _RTL_HASH_ENTRY;
struct _RTL_HASH_TABLE_ITERATOR;
struct _DEFERRED_WRITE;
struct _KALPC_SECURITY_DATA;
struct _tlgProviderMetadata_t;
union __m64;
struct _HEAP_FAILURE_INFORMATION;
struct wil_details_FeatureReportingCache;
struct _SEP_LUID_TO_INDEX_MAP_ENTRY;
struct _PCW_COUNTER_INFORMATION;
struct _PCW_MASK_INFORMATION;
union _PCW_CALLBACK_INFORMATION;
struct _MMCLONE_HEADER;
struct _TIME_FIELDS;
struct _RTL_TIME_ZONE_INFORMATION;
struct _PHYSICAL_MEMORY_DESCRIPTOR;
struct _AWEINFO;
union _HEAP_SEGMENT_MGR_COMMIT_STATE;
struct _HEAP_VS_SUBSEGMENT;
struct _MI_CONTROL_AREA_WAIT_BLOCK;
struct _MMEXTEND_INFO;
struct _OB_DUPLICATE_OBJECT_STATE;
struct _KALPC_HANDLE_DATA;
union _HEAP_LFH_ONDEMAND_POINTER;
struct _HEAP_LFH_FAST_REF;
struct _KALPC_RESERVE;
struct _ALPC_HANDLE_TABLE;
struct _ALPC_COMMUNICATION_INFO;
struct _MODWRITER_FLAGS;
struct _MMMOD_WRITER_MDL_ENTRY;
union _CM_TRANS_PTR;
struct _ALPC_PORT_ATTRIBUTES;
struct CMP_OFFSET_ARRAY;
struct _BLOB;
struct _MMADDRESS_LIST;
struct _MI_LARGEPAGE_VAD_INFO;
struct _MI_PHYSICAL_VIEW;
struct _MI_SUB64K_FREE_RANGES;
struct _MI_VAD_EVENT_BLOCK;
struct _ALPC_HANDLE_ENTRY;
struct _BUS_EXTENSION_LIST;
struct _MI_PER_SESSION_PROTOS;
union _MM_STORE_KEY;
struct _MI_IMAGE_LOAD_CONFIG;
struct _RTL_RVA_LIST;
struct _PO_NOTIFY_ORDER_LEVEL;
struct _RTLP_HP_ALLOC_TRACKER;
struct _HEAP_VAMGR_ALLOCATOR;
struct _HEAP_VAMGR_CTX;
union _RTL_RUN_ONCE;
struct _RTLP_HP_METADATA_HEAP_CTX;
struct _RTL_HP_VS_CONFIG;
struct _RTL_HP_SUB_ALLOCATOR_CONFIGS;
struct _RTLP_HP_HEAP_MANAGER;
struct RTL_HP_ENV_HANDLE;
struct _EX_HEAP_SESSION_STATE;
struct _HAL_LOG_REGISTER_CONTEXT;
struct _HV_GET_CELL_CONTEXT;
struct _MI_DRIVER_VA;
struct _CACHED_KSTACK_LIST;
struct _MI_SYSTEM_NODE_INFORMATION;
struct _HEADLESS_LOADER_BLOCK;
struct _NETWORK_LOADER_BLOCK;
struct _VERIFIER_SHARED_EXPORT_THUNK;
struct _POP_TRIGGER_WAIT;
struct _HMAP_DIRECTORY;
struct _VF_KE_CRITICAL_REGION_TRACE;
struct _HAL_CLOCK_TIMER_CONFIGURATION;
struct _HMAP_ENTRY;
struct _HMAP_TABLE;
struct _CM_PATH_HASH;
struct _CM_KEY_HASH;
struct _CM_KEY_CONTROL_BLOCK;
struct _CM_COMPONENT_HASH;
struct _CM_NAME_HASH;
struct _CM_NAME_CONTROL_BLOCK;
union _HAL_UNMASKED_INTERRUPT_FLAGS;
struct _HAL_UNMASKED_INTERRUPT_INFORMATION;
struct _CM_KEY_SECURITY_CACHE;
struct _CM_INDEX_HINT_BLOCK;
union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS;
union _WHEA_ERROR_STATUS;
struct _WHEA_MEMORY_ERROR_SECTION;
struct _CM_KEY_BODY;
struct _CM_NOTIFY_BLOCK;
struct _CM_KCB_LAYER_INFO;
struct _IOP_IRP_EXTENSION_STATUS;
struct _CM_TRANS;
struct _CM_RM;
struct _CM_WORKITEM;
struct _CM_DIRTY_VECTOR_LOG;
struct _HIVE_WRITE_WAIT_QUEUE;
struct _CMHIVE;
struct _OBP_LOOKUP_CONTEXT;
struct _EXT_IOMMU_DEVICE_ID_ACPI;
struct _CM_KEY_HASH_TABLE_ENTRY;
struct _WHEAP_ERROR_SOURCE_TABLE;
struct _CM_KEY_SECURITY_CACHE_ENTRY;
struct _EXT_IOMMU_DEVICE_ID_PCI;
struct _EXT_IOMMU_DEVICE_ID;
struct _HAL_HV_DMA_DOMAIN_INFO;
struct _VF_SUSPECT_DRIVER_ENTRY;
struct _HIVE_WAIT_PACKET;
struct POWER_ACTION_POLICY;
struct SYSTEM_POWER_LEVEL;
struct _CMP_VOLUME_CONTEXT;
struct _CMP_VOLUME_MANAGER;
struct _ADAPTER_OBJECT;
struct _KTMOBJECT_NAMESPACE_LINK;
struct _KENLISTMENT_HISTORY;
struct _KENLISTMENT;
struct _KTMOBJECT_NAMESPACE;
struct _KRESOURCEMANAGER_COMPLETION_BINDING;
struct _KRESOURCEMANAGER;
struct _POP_IRP_WORKER_ENTRY;
struct _MAP_REGISTER_ENTRY;
struct _MM_DRIVER_VERIFIER_DATA;
union _CLS_LSN;
struct _KTM;
struct _OBJECT_HEADER_QUOTA_INFO;
struct _OBJECT_HANDLE_COUNT_DATABASE;
struct _OBJECT_HEADER_CREATOR_INFO;
struct _HANDLE_REVOCATION_INFO;
struct _OB_EXTENDED_USER_INFO;
struct _OBJECT_FOOTER;
struct _KTRANSACTION_HISTORY;
struct _KTRANSACTION;
struct _KTMNOTIFICATION_PACKET;
struct _FAST_ERESOURCE;
struct _CM_KCB_UOW;
struct _CM_UOW_KEY_STATE_MODIFICATION;
struct _CM_UOW_SET_VALUE_LIST_DATA;
struct _CM_UOW_SET_VALUE_KEY_DATA;
struct _KWAIT_CHAIN;
struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT;
struct tagSWITCH_CONTEXT_DATA;
struct tagSWITCH_CONTEXT;
struct _IOMMU_DMA_DOMAIN;
struct _HBIN;
struct _SUPPORTED_RANGE;
struct _HCELL;
struct _CM_PARSE_DEBUG_INFO;
struct _HIVE_LOAD_FAILURE;
struct _PCW_COUNTER_DESCRIPTOR;
struct _PCW_BUFFER;
struct _PO_DEVICE_NOTIFY_ORDER;
struct _POP_DEVICE_SYS_STATE;
struct _PCW_PROCESSOR_INFO;
struct _PCW_INSTANCE;
struct _PCW_DATA;
struct _OB_EXTENDED_PARSE_PARAMETERS;
struct _ETW_PERF_COUNTERS;
struct _THERMAL_ZONE_COUNTERS;
struct PROCESS_PERF_COUNTERS;
struct _NT_TIB32;
struct _CLIENT_ID32;
struct _ACTIVATION_CONTEXT_STACK32;
struct _STRING32;
struct _TEB32;
struct _OBJECT_ATTRIBUTES;
struct _NT_TIB64;
struct _ACTIVATION_CONTEXT_STACK64;
struct _GDI_TEB_BATCH64;
struct _STRING64;
struct _TEB64;
struct _OBJECT_DUMP_CONTROL;
struct _ALPC_PORT;
struct _KAFFINITY_ENUMERATION_CONTEXT;
struct _ALPC_WORK_ON_BEHALF_TICKET;
struct _KALPC_WORK_ON_BEHALF_DATA;
struct _KALPC_MESSAGE_ATTRIBUTES;
struct _KALPC_MESSAGE;
struct _RTL_ATOM_TABLE_REFERENCE;
struct _RTL_ATOM_TABLE_ENTRY;
struct _POP_ACTION_TRIGGER;
struct _PNP_DEVICE_COMPLETION_QUEUE;
struct _PNP_ASSIGN_RESOURCES_CONTEXT;
struct _PNP_RESOURCE_REQUEST;
struct _X86_KTRAP_FRAME;
struct __WIL__WNF_TYPE_ID;
struct _X86_KTRAP_FRAME_BLUE;
struct _DBGKD_READ_MEMORY32;
struct _DBGKD_WRITE_MEMORY32;
struct _DBGKD_WRITE_BREAKPOINT32;
struct _WNF_DELIVERY_DESCRIPTOR;
struct _DBGKD_READ_WRITE_IO32;
struct _SEP_TOKEN_PRIVILEGES;
struct _DBGKD_SET_SPECIAL_CALL32;
struct _DBGKD_SET_INTERNAL_BREAKPOINT32;
struct _HEAP_SEGMENT;
struct _HEAP_LOCK;
struct _DBGKD_GET_VERSION32;
struct _DBGKD_MANIPULATE_STATE32;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
struct _PEP_ACPI_IO_MEMORY_RESOURCE;
struct _PEP_ACPI_INTERRUPT_RESOURCE;
struct _PEP_ACPI_GPIO_RESOURCE;
struct _PEP_ACPI_SPB_I2C_RESOURCE;
struct _PEP_ACPI_SPB_SPI_RESOURCE;
struct _PEP_ACPI_EXTENDED_ADDRESS;
union _PEP_ACPI_RESOURCE;
union _PPM_COORDINATED_SYNCHRONIZATION;
struct _PPM_PLATFORM_STATE;
struct _PPM_PLATFORM_STATES;
struct _HAL_HV_SVM_DEVICE_CAPABILITIES;
struct _HAL_HV_SVM_SYSTEM_CAPABILITIES;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCY;
struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES;
struct _PLATFORM_IDLE_STATE_ACCOUNTING;
struct _PLATFORM_IDLE_ACCOUNTING;
union _HEAP_VS_CHUNK_HEADER_SIZE;
struct _HEAP_VS_CHUNK_HEADER;
struct _HEAP_VS_CHUNK_FREE_HEADER;
struct _POP_CPU_INFO;
struct _HEAP_DESCRIPTOR_KEY;
struct _POP_PPM_PROFILE;
struct _PCAT_FIRMWARE_INFORMATION;
struct _HEAP_PAGE_RANGE_DESCRIPTOR;
struct _HEAP_LIST_LOOKUP;
struct _KALPC_REGION;
struct _DIRTY_PAGE_THRESHOLDS;
struct _LOG_HANDLE_CONTEXT;
struct _VOLUME_CACHE_MAP;
union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;
struct _LOGGED_STREAM_CALLBACK_V1;
struct _LOGGED_STREAM_CALLBACK_V2;
struct _PRIVATE_CACHE_MAP_FLAGS;
struct _PRIVATE_CACHE_MAP;
struct _SHARED_CACHE_MAP;
struct _HEAP_COUNTERS;
struct _BITMAP_RANGE;
struct _MBCB;
struct _CACHE_MANAGER_CALLBACKS;
struct _HEAP_LFH_AFFINITY_SLOT;
struct _CACHE_UNINITIALIZE_EVENT;
struct _RTL_SRWLOCK;
struct _SHARED_CACHE_MAP_LIST_CURSOR;
struct _LAZY_WRITER;
struct _CC_PARTITION;
struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS;
struct _ARM_LOADER_BLOCK;
struct _WRITE_BEHIND_THROUGHPUT;
struct _HEAP_LFH_UNUSED_BYTES_INFO;
struct _ASYNC_READ_THREAD_STATS;
struct _I386_LOADER_BLOCK;
struct _CC_ASYNC_READ_CONTEXT;
struct VACB_LEVEL_ALLOCATION_LIST;
struct _VACB_LEVEL_REFERENCE;
struct _ARBITER_ORDERING;
struct _ARBITER_PARAMETERS;
struct _HEAP_VAMGR_RANGE;
struct _HEAP_RUNTIME_MEMORY_STATS;
struct _HEAP_SEG_CONTEXT;
struct _HEAP_VS_DELAY_FREE_CONTEXT;
struct _HEAP_VS_CONTEXT;
struct _SEGMENT_HEAP;
struct _PALPC_PORT_REFERENCE_WAIT_BLOCK;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _BLOB_COUNTERS;
struct _RTL_STACKDB_CONTEXT;
struct _TRIAGE_POP_FX_DEVICE;
union _HEAP_LFH_SUBSEGMENT_DELAY_FREE;
struct _HEAP_LFH_SUBSEGMENT;
struct _RTLP_HP_QUEUE_LOCK_HANDLE;
struct _TRIAGE_POP_IRP_DATA;
struct _HEAP_VS_UNUSED_BYTES_INFO;
union _HEAP_PAGE_SEGMENT;
struct _HEAP_TUNING_PARAMETERS;
struct _HEAP;
struct _WHEA_RECOVERY_CONTEXT;
struct _HEAP_PSEUDO_TAG_ENTRY;
struct _RTLP_HP_PADDING_HEADER;
struct _HEAP_LARGE_ALLOC_DATA;
struct _KTIMER2;
struct _BLOB_TYPE;
struct _KALPC_SECTION;
struct _OBJECT_SYMBOLIC_LINK;
struct _KALPC_VIEW;
struct _VI_FAULT_TRACE;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY;
struct _ALPC_COMPLETION_PACKET_LOOKASIDE;
struct _ALPC_COMPLETION_LIST;
struct _ALPC_COMPLETION_LIST_HEADER;
struct _CALLBACK_OBJECT;
struct _OBJECT_TYPE_INITIALIZER;
struct _OBJECT_TYPE;
struct PROCESSOR_IDLESTATE_INFO;
struct PROCESSOR_IDLESTATE_POLICY;
struct _IOV_FORCED_PENDING_TRACE;
struct _IO_ADAPTER_CRYPTO_PARAMETERS;
struct _IOP_IRP_EXTENSION;
struct _LPCP_NONPAGED_PORT_QUEUE;
struct _VF_DRIVER_IO_CALLBACKS;
struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR;
struct _IOP_FILE_OBJECT_EXTENSION;
struct _OPEN_PACKET;
struct _OBJECT_HEADER;
struct _DUMMY_FILE_OBJECT;
struct _OBJECT_CREATE_INFORMATION;
struct _ETW_SYSTEMTIME;
struct _TRACE_LOGFILE_HEADER;
struct _ETW_LOGGER_HANDLE;
struct _TOKEN_AUDIT_POLICY;
struct _SEP_AUDIT_POLICY;
struct _TOKEN;
struct _ARBITER_ALLOCATION_STATE;
struct _ACL;
struct _SEP_LOWBOX_NUMBER_ENTRY;
struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR;
struct _SEP_CACHED_HANDLES_ENTRY;
struct _SEP_TOKEN_DIAG_TRACK_ENTRY;
struct _OBJECT_HEADER_HANDLE_INFO;
struct _OBJECT_HEADER_AUDIT_INFO;
struct _OBJECT_HEADER_EXTENDED_INFO;
struct _WHEAP_INFO_BLOCK;
struct _WHEAP_ERROR_SOURCE;
union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS;
struct _WHEAP_ERROR_RECORD_WRAPPER;
struct _SECURITY_DESCRIPTOR;
struct _WNF_PROCESS_CONTEXT;
struct _WNF_DISPATCHER;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _OBJECT_REF_TRACE;
struct _VI_DEADLOCK_THREAD;
struct _VI_DEADLOCK_NODE;
struct _VF_BTS_DATA_MANAGEMENT_AREA;
struct _TRIAGE_9F_PNP;
struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE;
struct _POP_CURRENT_BROADCAST;
struct _OBJECT_REF_INFO;
struct _HEAP_STOP_ON_VALUES;
struct _VF_TARGET_VERIFIED_DRIVER_DATA;
struct _SYSTEM_POWER_POLICY;
struct HAL_PRIVATE_DISPATCH;
struct _BUS_HANDLER;
struct _SUPPORTED_RANGES;
struct _HAL_CHANNEL_MEMORY_RANGES;
struct _VIRTUAL_EFI_RUNTIME_SERVICES;
struct _BOOT_FIRMWARE_RAMDISK_INFO;
struct _DEVICE_FAULT_CONFIGURATION;
struct _EFI_FIRMWARE_INFORMATION;
struct _FIRMWARE_INFORMATION_LOADER_BLOCK;
struct _LOADER_PARAMETER_BLOCK;
struct _CONFIGURATION_COMPONENT_DATA;
struct _NLS_DATA_BLOCK;
struct _FAULT_INFORMATION_ARM64_FLAGS;
struct _FAULT_INFORMATION_ARM64;
struct _FAULT_INFORMATION_X64_FLAGS;
struct _FAULT_INFORMATION_X64;
struct _FAULT_INFORMATION;
struct _SMBIOS3_TABLE_HEADER;
struct _HAL_DP_REPLACE_PARAMETERS;
struct _LOADER_PARAMETER_CI_EXTENSION;
struct _POP_THERMAL_TELEMETRY_TRACKER;
struct _PI_BUS_EXTENSION;
struct SYSTEM_POWER_CAPABILITIES;
struct _PNP_REPLACE_PROCESSOR_LIST;
struct _RTL_ATOM_TABLE;
struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION;
struct _RTL_RANGE;
struct _VI_VERIFIER_ISSUE;
struct _POP_THERMAL_ZONE;
struct _LDRP_CSLIST;
struct _PF_KERNEL_GLOBALS;
struct _PCI_BUSMASTER_DESCRIPTOR;
struct _MI_WRITE_MODES;
struct _ETWP_NOTIFICATION_HEADER;
struct _FAST_OWNER_ENTRY;
struct _HARDWARE_PTE;
union _IOMMU_SVM_CAPABILITIES;
struct _POOL_TRACKER_BIG_PAGES;
struct _HIDDEN_PROCESSOR_POWER_INTERFACE;
struct _HEAP_FREE_ENTRY_EXTRA;
struct _SECTION;
struct _RTL_RANGE_LIST;
struct _ARBITER_INTERFACE;
struct _ARBITER_ALTERNATIVE;
struct _VI_TRACK_IRQL;
struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST;
struct _TRIAGE_DEVICE_NODE;
struct _EX_POOL_HEAP_MANAGER_STATE;
struct _EX_WORK_QUEUE_MANAGER;
struct _VF_TRACKER;
struct _VI_VERIFIER_POOL_HEADER;
struct _VI_POOL_PAGE_HEADER;
struct _VI_POOL_ENTRY_INUSE;
struct _VI_POOL_ENTRY;
struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES;
struct _MI_REVERSE_VIEW_MAP;
union _LFH_RANDOM_DATA;
struct _ETW_REG_ENTRY;
struct _ETW_REPLY_QUEUE;
struct _ETW_QUEUE_ENTRY;
struct _ETW_PROVIDER_TRAITS;
struct _PS_TRUSTLET_TKSESSION_ID;
struct _HEAP_GLOBAL_APPCOMPAT_FLAGS;
struct _ETIMER;
struct _DIAGNOSTIC_CONTEXT;
struct _IOV_IRP_TRACE;
struct FEATURE_STATE_CHANGE_SUBSCRIPTION__;
struct _PNP_DEVICE_COMPLETION_REQUEST;
struct _LPCP_PORT_QUEUE;
struct _LPCP_PORT_OBJECT;
union RTLP_HP_LFH_PERF_FLAGS;
struct _DIAGNOSTIC_BUFFER;
struct _POP_POWER_ACTION;
struct _POP_SHUTDOWN_BUG_CHECK;
struct _POP_IO_INFO;
struct _POP_HIBER_CONTEXT;
struct _DUMP_INITIALIZATION_CONTEXT;
struct _DUMP_STACK_CONTEXT;
struct _PO_HIBER_PERF;
struct PO_MEMORY_IMAGE;
struct _POP_PER_PROCESSOR_CONTEXT;
struct _FAST_ERESOURCE_INTERNAL;
struct _WAITING_IRP;
struct _LEARNING_MODE_DATA;
struct _VF_ADDRESS_RANGE;
struct _VI_DEADLOCK_GLOBALS;
struct _TRIAGE_9F_POWER;
struct _PTE_TRACKER;
struct _CM_FAST_LEAF_HINT;
struct _CM_INDEX;
struct _CRITICAL_PROCESS_EXCEPTION_DATA;
struct _CALL_PERFORMANCE_DATA;
struct _SEP_LOWBOX_NUMBER_MAPPING;
struct _SESSION_LOWBOX_MAP;
struct PROCESSOR_PERFSTATE_POLICY;
struct _LDRP_LOAD_CONTEXT;
struct _LDR_DATA_TABLE_ENTRY;
struct _LDR_DDAG_NODE;
struct _LDR_SERVICE_TAG_RECORD;
struct _KTIMER2_COLLECTION;
struct _VF_WATCHDOG_IRP;
struct _DEVICE_DESCRIPTION;
struct _IMAGE_SECTION_HEADER;
struct _FAST_OWNER_ENTRY_INTERNAL;
struct _KSECONDARY_IDT_ENTRY;
struct _ETW_WMITRACE_WORK;
struct _MAPPED_FILE_SEGMENT;
struct _POOL_HEADER;
struct _POP_POWER_SETTING_VALUES;
struct _HEAP_UCR_DESCRIPTOR;
struct _NONOPAQUE_OPLOCK;
struct _RTLP_RANGE_LIST_ENTRY;
struct _RH_OP_CONTEXT;
struct _THERMAL_INFORMATION;
struct _HIVE_LIST_ENTRY;
struct _NB10;
struct _RSDS;
union _CVDD;
struct _ETW_DEBUGID_TRACKING_ENTRY;
struct _KWAIT_CHAIN_ENTRY;
struct _IMAGE_DEBUG_DIRECTORY;
struct _OBJECT_HEADER_PADDING_INFO;
struct _CALL_HASH_ENTRY;
union _MI_FLAGS;
struct _MI_TRIAGE_DUMP_DATA;

typedef enum _EX_POOL_PRIORITY
{
  LowPoolPriority = 0,
  LowPoolPrioritySpecialPoolOverrun = 8,
  LowPoolPrioritySpecialPoolUnderrun = 9,
  NormalPoolPriority = 16,
  NormalPoolPrioritySpecialPoolOverrun = 24,
  NormalPoolPrioritySpecialPoolUnderrun = 25,
  HighPoolPriority = 32,
  HighPoolPrioritySpecialPoolOverrun = 40,
  HighPoolPrioritySpecialPoolUnderrun = 41,
} EX_POOL_PRIORITY, *PEX_POOL_PRIORITY;

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0004 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0008 */

typedef struct _KDEVICE_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceListEntry;
  /* 0x0008 */ unsigned long SortKey;
  /* 0x000c */ unsigned char Inserted;
  /* 0x000d */ char __PADDING__[3];
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY; /* size: 0x0010 */

typedef struct _WAIT_CONTEXT_BLOCK
{
  union
  {
    /* 0x0000 */ struct _KDEVICE_QUEUE_ENTRY WaitQueueEntry;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY DmaWaitEntry;
      /* 0x0008 */ unsigned long NumberOfChannels;
      struct /* bitfield */
      {
        /* 0x000c */ unsigned long SyncCallback : 1; /* bit position: 0 */
        /* 0x000c */ unsigned long DmaContext : 1; /* bit position: 1 */
        /* 0x000c */ unsigned long ZeroMapRegisters : 1; /* bit position: 2 */
        /* 0x000c */ unsigned long Reserved : 9; /* bit position: 3 */
        /* 0x000c */ unsigned long NumberOfRemapPages : 20; /* bit position: 12 */
      }; /* bitfield */
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0010 */ void* DeviceRoutine /* function */;
  /* 0x0014 */ void* DeviceContext;
  /* 0x0018 */ unsigned long NumberOfMapRegisters;
  /* 0x001c */ void* DeviceObject;
  /* 0x0020 */ void* CurrentIrp;
  /* 0x0024 */ struct _KDPC* BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK; /* size: 0x0028 */

enum SE_WS_APPX_SIGNATURE_ORIGIN
{
  SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0,
  SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 1,
  SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 2,
  SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 3,
  SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 4,
};

typedef enum _MMLISTS
{
  ZeroedPageList = 0,
  FreePageList = 1,
  StandbyPageList = 2,
  ModifiedPageList = 3,
  ModifiedNoWritePageList = 4,
  BadPageList = 5,
  ActiveAndValid = 6,
  TransitionPage = 7,
} MMLISTS, *PMMLISTS;

typedef struct _MMPFNLIST
{
  /* 0x0000 */ unsigned long Total;
  /* 0x0004 */ enum _MMLISTS ListName;
  /* 0x0008 */ unsigned long Flink;
  /* 0x000c */ unsigned long Blink;
  /* 0x0010 */ unsigned long Lock;
} MMPFNLIST, *PMMPFNLIST; /* size: 0x0014 */

typedef struct _DISPATCHER_HEADER
{
  union
  {
    /* 0x0000 */ volatile long Lock;
    /* 0x0000 */ long LockNV;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Signalling;
      /* 0x0002 */ unsigned char Size;
      /* 0x0003 */ unsigned char Reserved1;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char TimerType;
      union
      {
        /* 0x0001 */ unsigned char TimerControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Absolute : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Wake : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char EncodedTolerableDelay : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Hand;
          union
          {
            /* 0x0003 */ unsigned char TimerMiscFlags;
            struct /* bitfield */
            {
              /* 0x0003 */ unsigned char Index : 1; /* bit position: 0 */
              /* 0x0003 */ unsigned char Processor : 5; /* bit position: 1 */
              /* 0x0003 */ unsigned char Inserted : 1; /* bit position: 6 */
              /* 0x0003 */ volatile unsigned char Expired : 1; /* bit position: 7 */
            }; /* bitfield */
          }; /* size: 0x0001 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char Timer2Type;
      union
      {
        /* 0x0001 */ unsigned char Timer2Flags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Timer2Inserted : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char Timer2Expiring : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char Timer2CancelPending : 1; /* bit position: 2 */
            /* 0x0001 */ unsigned char Timer2SetPending : 1; /* bit position: 3 */
            /* 0x0001 */ unsigned char Timer2Running : 1; /* bit position: 4 */
            /* 0x0001 */ unsigned char Timer2Disabled : 1; /* bit position: 5 */
            /* 0x0001 */ unsigned char Timer2ReservedFlags : 2; /* bit position: 6 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char Timer2ComponentId;
          /* 0x0003 */ unsigned char Timer2RelativeId;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char QueueType;
      union
      {
        /* 0x0001 */ unsigned char QueueControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0001 */ unsigned char Abandoned : 1; /* bit position: 0 */
            /* 0x0001 */ unsigned char DisableIncrement : 1; /* bit position: 1 */
            /* 0x0001 */ unsigned char QueueReservedControlFlags : 6; /* bit position: 2 */
          }; /* bitfield */
          /* 0x0002 */ unsigned char QueueSize;
          /* 0x0003 */ unsigned char QueueReserved;
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char ThreadType;
      /* 0x0001 */ unsigned char ThreadReserved;
      union
      {
        /* 0x0002 */ unsigned char ThreadControlFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0002 */ unsigned char CycleProfiling : 1; /* bit position: 0 */
            /* 0x0002 */ unsigned char CounterProfiling : 1; /* bit position: 1 */
            /* 0x0002 */ unsigned char GroupScheduling : 1; /* bit position: 2 */
            /* 0x0002 */ unsigned char AffinitySet : 1; /* bit position: 3 */
            /* 0x0002 */ unsigned char Tagged : 1; /* bit position: 4 */
            /* 0x0002 */ unsigned char EnergyProfiling : 1; /* bit position: 5 */
            /* 0x0002 */ unsigned char SchedulerAssist : 1; /* bit position: 6 */
            /* 0x0002 */ unsigned char Instrumented : 1; /* bit position: 7 */
          }; /* bitfield */
          /* 0x0003 */ unsigned char DebugActive;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned char MutantType;
      /* 0x0001 */ unsigned char MutantSize;
      /* 0x0002 */ unsigned char DpcActive;
      /* 0x0003 */ unsigned char MutantReserved;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ long SignalState;
  /* 0x0008 */ struct _LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER; /* size: 0x0010 */

typedef struct _KEVENT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT; /* size: 0x0010 */

typedef struct _MI_DECAY_TIMER_LINKAGE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long PreviousDecayPfn : 15; /* bit position: 1 */
    /* 0x0000 */ unsigned long Spare1 : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long NextDecayPfn : 15; /* bit position: 17 */
  }; /* bitfield */
} MI_DECAY_TIMER_LINKAGE, *PMI_DECAY_TIMER_LINKAGE; /* size: 0x0004 */

typedef struct _MI_DECAY_TIMER_LINK
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned long Long;
      /* 0x0000 */ struct _MI_DECAY_TIMER_LINKAGE e1;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} MI_DECAY_TIMER_LINK, *PMI_DECAY_TIMER_LINK; /* size: 0x0004 */

typedef struct _WORK_QUEUE_ITEM
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0008 */ void* WorkerRoutine /* function */;
  /* 0x000c */ void* Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM; /* size: 0x0010 */

typedef struct _MI_LDW_WORK_CONTEXT
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ struct _FILE_OBJECT* FileObject;
  /* 0x0014 */ long ErrorStatus;
  /* 0x0018 */ volatile long Active;
  /* 0x001c */ unsigned char FreeWhenDone;
  /* 0x001d */ char __PADDING__[3];
} MI_LDW_WORK_CONTEXT, *PMI_LDW_WORK_CONTEXT; /* size: 0x0020 */

typedef struct _MI_AVAILABLE_PAGE_WAIT_STATES
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0010 */ unsigned long EventSets;
} MI_AVAILABLE_PAGE_WAIT_STATES, *PMI_AVAILABLE_PAGE_WAIT_STATES; /* size: 0x0014 */

typedef struct _RTL_BITMAP
{
  /* 0x0000 */ unsigned long SizeOfBitMap;
  /* 0x0004 */ unsigned long* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; /* size: 0x0008 */

typedef struct _RTL_RB_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
  union
  {
    /* 0x0004 */ unsigned char Encoded : 1; /* bit position: 0 */
    /* 0x0004 */ struct _RTL_BALANCED_NODE* Min;
  }; /* size: 0x0004 */
} RTL_RB_TREE, *PRTL_RB_TREE; /* size: 0x0008 */

typedef enum _MI_SLAB_ALLOCATOR_TYPE
{
  MiSlabAllocatorTypeSlatProtected = 0,
  MiSlabAllocatorTypeUnprotected = 1,
  MiSlabAllocatorTypeMax = 2,
} MI_SLAB_ALLOCATOR_TYPE, *PMI_SLAB_ALLOCATOR_TYPE;

typedef enum _MI_SLAB_ALLOCATOR_PROTECTION
{
  MiSlabAllocatorProtectionReadExecute = 0,
  MiSlabAllocatorProtectionReadOnly = 1,
  MiSlabAllocatorProtectionNoAccess = 2,
  MiSlabAllocatorProtectionReadWrite = 3,
  MiSlabAllocatorProtectionMax = 4,
} MI_SLAB_ALLOCATOR_PROTECTION, *PMI_SLAB_ALLOCATOR_PROTECTION;

typedef struct _MI_SLAB_ALLOCATOR_CONTEXT
{
  /* 0x0000 */ struct _RTL_RB_TREE AllocationsTree;
  /* 0x0008 */ volatile long Lock;
  /* 0x000c */ struct _MI_SLAB_ALLOCATOR_ENTRY* SlabEntryHint;
  /* 0x0010 */ unsigned long FreePageCount;
  /* 0x0014 */ unsigned long SlabEntryCount;
  /* 0x0018 */ enum _MI_SLAB_ALLOCATOR_TYPE Type;
  /* 0x001c */ enum _MI_SLAB_ALLOCATOR_PROTECTION Protection;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0020 */ unsigned long EntryBecameEmpty : 1; /* bit position: 0 */
        /* 0x0020 */ unsigned long Spare : 31; /* bit position: 1 */
      }; /* bitfield */
      /* 0x0020 */ unsigned long AllFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Flags;
  /* 0x0024 */ struct _MMPFNLIST StandbyList;
  /* 0x0038 */ unsigned __int64 LastReplenishTime;
  /* 0x0040 */ unsigned __int64 LastFailureTime;
} MI_SLAB_ALLOCATOR_CONTEXT, *PMI_SLAB_ALLOCATOR_CONTEXT; /* size: 0x0048 */

typedef struct _MI_PARTITION_PAGE_LISTS
{
  /* 0x0000 */ struct _MMPFNLIST* FreePagesByColor[2];
  /* 0x0008 */ long Padding_0[14];
  /* 0x0040 */ struct _MMPFNLIST ZeroedPageListHead;
  /* 0x0054 */ long Padding_1[11];
  /* 0x0080 */ struct _MMPFNLIST FreePageListHead;
  /* 0x0094 */ long Padding_2[11];
  /* 0x00c0 */ struct _MMPFNLIST StandbyPageListHead;
  /* 0x00d4 */ long Padding_3[11];
  /* 0x0100 */ struct _MMPFNLIST StandbyPageListByPriority[8];
  /* 0x01a0 */ long Padding_4[8];
  /* 0x01c0 */ struct _MMPFNLIST ModifiedPageListNoReservation;
  /* 0x01d4 */ long Padding_5[11];
  /* 0x0200 */ struct _MMPFNLIST ModifiedPageListByReservation[16];
  /* 0x0340 */ struct _MMPFNLIST MappedPageListHead[4];
  /* 0x0390 */ long Padding_6[12];
  /* 0x03c0 */ struct _MMPFNLIST BadPageListHead;
  /* 0x03d4 */ long Padding_7[11];
  /* 0x0400 */ struct _MMPFNLIST EnclavePageListHead;
  /* 0x0414 */ union _SLIST_HEADER* FreePageSlist[2];
  /* 0x041c */ struct _MMPFNLIST* PageLocationList[8];
  /* 0x043c */ volatile unsigned long StandbyRepurposedByPriority[8];
  /* 0x045c */ long Padding_8[9];
  /* 0x0480 */ volatile unsigned long TransitionSharedPages;
  /* 0x0484 */ unsigned long TransitionSharedPagesPeak[6];
  /* 0x049c */ struct _KEVENT MappedPageListHeadEvent[4];
  /* 0x04dc */ struct _MI_DECAY_TIMER_LINK DecayClusterTimerHeads[4];
  /* 0x04ec */ unsigned long DecayHand;
  /* 0x04f0 */ unsigned char StandbyListDiscard;
  /* 0x04f1 */ unsigned char FreeListDiscard;
  /* 0x04f2 */ unsigned char PfnBitMapsReady;
  /* 0x04f3 */ char Padding_9[5];
  /* 0x04f8 */ unsigned __int64 LastDecayHandUpdateTime;
  /* 0x0500 */ struct _MI_LDW_WORK_CONTEXT LastChanceLdwContext;
  /* 0x0520 */ long Padding_10[8];
  /* 0x0540 */ unsigned long AvailableEventsLock;
  /* 0x0544 */ struct _MI_AVAILABLE_PAGE_WAIT_STATES AvailablePageWaitStates[3];
  /* 0x0580 */ void* MirrorListLocks;
  /* 0x0584 */ long Padding_11[15];
  /* 0x05c0 */ volatile unsigned long TransitionPrivatePages;
  /* 0x05c4 */ struct _RTL_BITMAP LargePfnBitMap[1];
  /* 0x05cc */ struct _MI_FREE_LARGE_PAGE_LIST* LargePageListHeads;
  /* 0x05d0 */ unsigned char* MediumPagesOnFreeZeroList;
  /* 0x05d4 */ struct _RTL_BITMAP LargePageRebuildCandidates;
  /* 0x05dc */ struct _KEVENT LargePageCandidatesExistEvent;
  /* 0x05ec */ unsigned long LowMemoryThreshold;
  /* 0x05f0 */ unsigned long HighMemoryThreshold;
  /* 0x05f4 */ long Padding_12;
  /* 0x05f8 */ struct _MI_SLAB_ALLOCATOR_CONTEXT SlabContexts[4][2];
  /* 0x0838 */ struct _RTL_BITMAP SlabPfnBitMap;
} MI_PARTITION_PAGE_LISTS, *PMI_PARTITION_PAGE_LISTS; /* size: 0x0840 */

typedef enum _PS_MITIGATION_OPTION
{
  PS_MITIGATION_OPTION_NX = 0,
  PS_MITIGATION_OPTION_SEHOP = 1,
  PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
  PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
  PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
  PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
  PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
  PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
  PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
  PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
  PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
  PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
  PS_MITIGATION_OPTION_FONT_DISABLE = 12,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
  PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
  PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
  PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
  PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
  PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
  PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
  PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
  PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
  PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
  PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
  PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
  PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
  PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
  PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
  PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
  PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
  PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 31,
  PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION = 32,
} PS_MITIGATION_OPTION, *PPS_MITIGATION_OPTION;

struct _ASSEMBLY_STORAGE_MAP;

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef enum _KSPIN_LOCK_QUEUE_NUMBER
{
  LockQueueUnusedSpare0 = 0,
  LockQueueUnusedSpare1 = 1,
  LockQueueUnusedSpare2 = 2,
  LockQueueUnusedSpare3 = 3,
  LockQueueVacbLock = 4,
  LockQueueMasterLock = 5,
  LockQueueNonPagedPoolLock = 6,
  LockQueueIoCancelLock = 7,
  LockQueueUnusedSpare8 = 8,
  LockQueueIoVpbLock = 9,
  LockQueueIoDatabaseLock = 10,
  LockQueueIoCompletionLock = 11,
  LockQueueNtfsStructLock = 12,
  LockQueueAfdWorkQueueLock = 13,
  LockQueueBcbLock = 14,
  LockQueueUnusedSpare15 = 15,
  LockQueueUnusedSpare16 = 16,
  LockQueueMaximumLock = 17,
} KSPIN_LOCK_QUEUE_NUMBER, *PKSPIN_LOCK_QUEUE_NUMBER;

typedef enum _POOL_TYPE
{
  NonPagedPool = 0,
  NonPagedPoolExecute = 0,
  PagedPool = 1,
  NonPagedPoolMustSucceed = 2,
  DontUseThisType = 3,
  NonPagedPoolCacheAligned = 4,
  PagedPoolCacheAligned = 5,
  NonPagedPoolCacheAlignedMustS = 6,
  MaxPoolType = 7,
  NonPagedPoolBase = 0,
  NonPagedPoolBaseMustSucceed = 2,
  NonPagedPoolBaseCacheAligned = 4,
  NonPagedPoolBaseCacheAlignedMustS = 6,
  NonPagedPoolSession = 32,
  PagedPoolSession = 33,
  NonPagedPoolMustSucceedSession = 34,
  DontUseThisTypeSession = 35,
  NonPagedPoolCacheAlignedSession = 36,
  PagedPoolCacheAlignedSession = 37,
  NonPagedPoolCacheAlignedMustSSession = 38,
  NonPagedPoolNx = 512,
  NonPagedPoolNxCacheAligned = 516,
  NonPagedPoolSessionNx = 544,
} POOL_TYPE, *PPOOL_TYPE;

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;
  /* 0x0004 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0008 */ unsigned long Flags;
} RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME; /* size: 0x000c */

typedef enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

typedef enum _PP_NPAGED_LOOKASIDE_NUMBER
{
  LookasideSmallIrpList = 0,
  LookasideMediumIrpList = 1,
  LookasideLargeIrpList = 2,
  LookasideMdlList = 3,
  LookasideCreateInfoList = 4,
  LookasideNameBufferList = 5,
  LookasideTwilightList = 6,
  LookasideCompletionList = 7,
  LookasideScratchBufferList = 8,
  LookasideMaximumList = 9,
} PP_NPAGED_LOOKASIDE_NUMBER, *PPP_NPAGED_LOOKASIDE_NUMBER;

typedef struct _KSEMAPHORE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ long Limit;
} KSEMAPHORE, *PKSEMAPHORE; /* size: 0x0014 */

typedef enum _EX_GEN_RANDOM_DOMAIN
{
  ExGenRandomDomainKernel = 0,
  ExGenRandomDomainFirst = 0,
  ExGenRandomDomainUserVisible = 1,
  ExGenRandomDomainMax = 2,
} EX_GEN_RANDOM_DOMAIN, *PEX_GEN_RANDOM_DOMAIN;

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileUnusedInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileVolumeNameInformation = 58,
  FileIdInformation = 59,
  FileIdExtdDirectoryInformation = 60,
  FileReplaceCompletionInformation = 61,
  FileHardLinkFullIdInformation = 62,
  FileIdExtdBothDirectoryInformation = 63,
  FileDispositionInformationEx = 64,
  FileRenameInformationEx = 65,
  FileRenameInformationExBypassAccessCheck = 66,
  FileDesiredStorageClassInformation = 67,
  FileStatInformation = 68,
  FileMemoryPartitionInformation = 69,
  FileStatLxInformation = 70,
  FileCaseSensitiveInformation = 71,
  FileLinkInformationEx = 72,
  FileLinkInformationExBypassAccessCheck = 73,
  FileStorageReserveIdInformation = 74,
  FileCaseSensitiveInformationForceAccessCheck = 75,
  FileMaximumInformation = 76,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef struct _GDI_TEB_BATCH
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e0 */

typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
  DirectoryNotifyInformation = 1,
  DirectoryNotifyExtendedInformation = 2,
} DIRECTORY_NOTIFY_INFORMATION_CLASS, *PDIRECTORY_NOTIFY_INFORMATION_CLASS;

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsDataCopyInformation = 12,
  FileFsMetadataSizeInformation = 13,
  FileFsFullSizeInformationEx = 14,
  FileFsMaximumInformation = 15,
} FSINFOCLASS, *PFSINFOCLASS;

typedef struct _SINGLE_LIST_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; /* size: 0x0004 */

typedef struct _ETW_BUFFER_QUEUE
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* QueueTail;
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY QueueEntry;
} ETW_BUFFER_QUEUE, *PETW_BUFFER_QUEUE; /* size: 0x0008 */

typedef struct _PROCESSOR_NUMBER
{
  /* 0x0000 */ unsigned short Group;
  /* 0x0002 */ unsigned char Number;
  /* 0x0003 */ unsigned char Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; /* size: 0x0004 */

typedef enum _DEVICE_RELATION_TYPE
{
  BusRelations = 0,
  EjectionRelations = 1,
  PowerRelations = 2,
  RemovalRelations = 3,
  TargetDeviceRelation = 4,
  SingleBusRelations = 5,
  TransportRelations = 6,
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

enum BUS_QUERY_ID_TYPE
{
  BusQueryDeviceID = 0,
  BusQueryHardwareIDs = 1,
  BusQueryCompatibleIDs = 2,
  BusQueryInstanceID = 3,
  BusQueryDeviceSerialNumber = 4,
  BusQueryContainerID = 5,
};

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

typedef struct _ETW_DECODE_CONTROL_ENTRY
{
  /* 0x0000 */ struct _ETW_DECODE_CONTROL_ENTRY* Next;
  /* 0x0004 */ struct _GUID Decode;
  /* 0x0014 */ struct _GUID Control;
  /* 0x0024 */ unsigned char ConsumersNotified;
  /* 0x0025 */ char __PADDING__[3];
} ETW_DECODE_CONTROL_ENTRY, *PETW_DECODE_CONTROL_ENTRY; /* size: 0x0028 */

enum DEVICE_TEXT_TYPE
{
  DeviceTextDescription = 0,
  DeviceTextLocationInformation = 1,
};

typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
  DeviceUsageTypeUndefined = 0,
  DeviceUsageTypePaging = 1,
  DeviceUsageTypeHibernation = 2,
  DeviceUsageTypeDumpFile = 3,
  DeviceUsageTypeBoot = 4,
  DeviceUsageTypePostDisplay = 5,
  DeviceUsageTypeGuestAssigned = 6,
} DEVICE_USAGE_NOTIFICATION_TYPE, *PDEVICE_USAGE_NOTIFICATION_TYPE;

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
  PowerActionDisplayOff = 8,
};

typedef enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
} IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef enum _MEMORY_CACHING_TYPE
{
  MmNonCached = 0,
  MmCached = 1,
  MmWriteCombined = 2,
  MmHardwareCoherentCached = 3,
  MmNonCachedUnordered = 4,
  MmUSWCCached = 5,
  MmMaximumCacheType = 6,
  MmNotMapped = -1,
} MEMORY_CACHING_TYPE, *PMEMORY_CACHING_TYPE;

typedef enum _MM_PAGE_ACCESS_TYPE
{
  MmPteAccessType = 0,
  MmCcReadAheadType = 1,
  MmPfnRepurposeType = 2,
  MmMaximumPageAccessType = 3,
} MM_PAGE_ACCESS_TYPE, *PMM_PAGE_ACCESS_TYPE;

typedef struct _KAPC_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY ApcListHead[2];
  /* 0x0010 */ struct _KPROCESS* Process;
  union
  {
    /* 0x0014 */ unsigned char InProgressFlags;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned char KernelApcInProgress : 1; /* bit position: 0 */
      /* 0x0014 */ unsigned char SpecialApcInProgress : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0015 */ unsigned char KernelApcPending;
  union
  {
    /* 0x0016 */ unsigned char UserApcPendingAll;
    struct /* bitfield */
    {
      /* 0x0016 */ unsigned char SpecialUserApcPending : 1; /* bit position: 0 */
      /* 0x0016 */ unsigned char UserApcPending : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0017 */ char __PADDING__[1];
} KAPC_STATE, *PKAPC_STATE; /* size: 0x0018 */

typedef enum _PF_FILE_ACCESS_TYPE
{
  PfFileAccessTypeRead = 0,
  PfFileAccessTypeWrite = 1,
  PfFileAccessTypeMax = 2,
} PF_FILE_ACCESS_TYPE, *PPF_FILE_ACCESS_TYPE;

typedef struct _MMSECTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int BeingDeleted : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int BeingCreated : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned int BeingPurged : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned int NoModifiedWriting : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned int FailAllIo : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned int Image : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned int Based : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned int File : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned int AttemptingDelete : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned int PrefetchCreated : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned int PhysicalMemory : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned int ImageControlAreaOnRemovableMedia : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned int Reserve : 1; /* bit position: 12 */
    /* 0x0000 */ unsigned int Commit : 1; /* bit position: 13 */
    /* 0x0000 */ unsigned int NoChange : 1; /* bit position: 14 */
    /* 0x0000 */ unsigned int WasPurged : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned int UserReference : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned int GlobalMemory : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned int DeleteOnClose : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned int FilePointerNull : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned long PreferredNode : 6; /* bit position: 20 */
    /* 0x0000 */ unsigned int GlobalOnlyPerSession : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned int UserWritable : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned int SystemVaAllocated : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned int PreferredFsCompressionBoundary : 1; /* bit position: 29 */
    /* 0x0000 */ unsigned int UsingFileExtents : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned int PageSize64K : 1; /* bit position: 31 */
  }; /* bitfield */
} MMSECTION_FLAGS, *PMMSECTION_FLAGS; /* size: 0x0004 */

typedef struct _EX_FAST_REF
{
  union
  {
    /* 0x0000 */ void* Object;
    /* 0x0000 */ unsigned long RefCnt : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} EX_FAST_REF, *PEX_FAST_REF; /* size: 0x0004 */

typedef struct _EX_PUSH_LOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Shared : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} EX_PUSH_LOCK, *PEX_PUSH_LOCK; /* size: 0x0004 */

typedef struct _CONTROL_AREA
{
  /* 0x0000 */ struct _SEGMENT* Segment;
  union
  {
    /* 0x0004 */ struct _LIST_ENTRY ListHead;
    /* 0x0004 */ void* AweContext;
  }; /* size: 0x0008 */
  /* 0x000c */ unsigned long NumberOfSectionReferences;
  /* 0x0010 */ unsigned long NumberOfPfnReferences;
  /* 0x0014 */ unsigned long NumberOfMappedViews;
  /* 0x0018 */ unsigned long NumberOfUserReferences;
  union
  {
    union
    {
      /* 0x001c */ unsigned long LongFlags;
      /* 0x001c */ struct _MMSECTION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0020 */ struct _EX_FAST_REF FilePointer;
  /* 0x0024 */ volatile long ControlAreaLock;
  /* 0x0028 */ unsigned long ModifiedWriteCount;
  /* 0x002c */ struct _MI_CONTROL_AREA_WAIT_BLOCK* WaitList;
  union
  {
    struct
    {
      union
      {
        /* 0x0030 */ unsigned long NumberOfSystemCacheViews;
        /* 0x0030 */ unsigned long ImageRelocationStartBit;
      }; /* size: 0x0004 */
      union
      {
        /* 0x0034 */ volatile long WritableUserReferences;
        struct /* bitfield */
        {
          /* 0x0034 */ unsigned long ImageRelocationSizeIn64k : 16; /* bit position: 0 */
          /* 0x0034 */ unsigned long SystemImage : 1; /* bit position: 16 */
          /* 0x0034 */ unsigned long CantMove : 1; /* bit position: 17 */
          /* 0x0034 */ unsigned long StrongCode : 2; /* bit position: 18 */
          /* 0x0034 */ unsigned long BitMap : 2; /* bit position: 20 */
          /* 0x0034 */ unsigned long ImageActive : 1; /* bit position: 22 */
          /* 0x0034 */ unsigned long ImageBaseOkToReuse : 1; /* bit position: 23 */
        }; /* bitfield */
      }; /* size: 0x0004 */
      union
      {
        /* 0x0038 */ unsigned long FlushInProgressCount;
        /* 0x0038 */ unsigned long NumberOfSubsections;
        /* 0x0038 */ struct _MI_IMAGE_SECURITY_REFERENCE* SeImageStub;
      }; /* size: 0x0004 */
    } /* size: 0x000c */ e2;
  } /* size: 0x000c */ u2;
  /* 0x003c */ struct _EX_PUSH_LOCK FileObjectLock;
  /* 0x0040 */ volatile unsigned __int64 LockedPages;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0048 */ unsigned long IoAttributionContext : 29; /* bit position: 0 */
        /* 0x0048 */ unsigned long Spare : 3; /* bit position: 29 */
      }; /* bitfield */
      /* 0x0048 */ unsigned long ImageCrossPartitionCharge;
      /* 0x0048 */ unsigned long CommittedPageCount : 20; /* bit position: 0 */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u3;
  /* 0x004c */ long __PADDING__[1];
} CONTROL_AREA, *PCONTROL_AREA; /* size: 0x0050 */

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

typedef enum _DEVICE_WAKE_DEPTH
{
  DeviceWakeDepthNotWakeable = 0,
  DeviceWakeDepthD0 = 1,
  DeviceWakeDepthD1 = 2,
  DeviceWakeDepthD2 = 3,
  DeviceWakeDepthD3hot = 4,
  DeviceWakeDepthD3cold = 5,
  DeviceWakeDepthMaximum = 6,
} DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

typedef struct _KGDTENTRY
{
  /* 0x0000 */ unsigned short LimitLow;
  /* 0x0002 */ unsigned short BaseLow;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ unsigned char BaseMid;
        /* 0x0005 */ unsigned char Flags1;
        /* 0x0006 */ unsigned char Flags2;
        /* 0x0007 */ unsigned char BaseHi;
      } /* size: 0x0004 */ Bytes;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long BaseMid : 8; /* bit position: 0 */
          /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
          /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
          /* 0x0004 */ unsigned long Pres : 1; /* bit position: 15 */
          /* 0x0004 */ unsigned long LimitHi : 4; /* bit position: 16 */
          /* 0x0004 */ unsigned long Sys : 1; /* bit position: 20 */
          /* 0x0004 */ unsigned long Reserved_0 : 1; /* bit position: 21 */
          /* 0x0004 */ unsigned long Default_Big : 1; /* bit position: 22 */
          /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
          /* 0x0004 */ unsigned long BaseHi : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ Bits;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighWord;
} KGDTENTRY, *PKGDTENTRY; /* size: 0x0008 */

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char ShareDisposition;
  /* 0x0002 */ unsigned short Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Generic;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Port;
      struct
      {
        /* 0x0004 */ unsigned short Level;
        /* 0x0006 */ unsigned short Group;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long Affinity;
      } /* size: 0x000c */ Interrupt;
      struct
      {
        union
        {
          struct
          {
            /* 0x0004 */ unsigned short Group;
            /* 0x0006 */ unsigned short MessageCount;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned long Affinity;
          } /* size: 0x000c */ Raw;
          struct
          {
            /* 0x0004 */ unsigned short Level;
            /* 0x0006 */ unsigned short Group;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned long Affinity;
          } /* size: 0x000c */ Translated;
        }; /* size: 0x000c */
      } /* size: 0x000c */ MessageInterrupt;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Memory;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long Port;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ Dma;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned char TransferWidth;
        /* 0x000d */ unsigned char Reserved1;
        /* 0x000e */ unsigned char Reserved2;
        /* 0x000f */ unsigned char Reserved3;
      } /* size: 0x000c */ DmaV3;
      struct
      {
        /* 0x0004 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0004 */ unsigned long Start;
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Reserved;
      } /* size: 0x000c */ BusNumber;
      struct
      {
        /* 0x0004 */ unsigned long DataSize;
        /* 0x0008 */ unsigned long Reserved1;
        /* 0x000c */ unsigned long Reserved2;
      } /* size: 0x000c */ DeviceSpecificData;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length40;
      } /* size: 0x000c */ Memory40;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length48;
      } /* size: 0x000c */ Memory48;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length64;
      } /* size: 0x000c */ Memory64;
      struct
      {
        /* 0x0004 */ unsigned char Class;
        /* 0x0005 */ unsigned char Type;
        /* 0x0006 */ unsigned char Reserved1;
        /* 0x0007 */ unsigned char Reserved2;
        /* 0x0008 */ unsigned long IdLowPart;
        /* 0x000c */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x000c */
  } /* size: 0x000c */ u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR; /* size: 0x0010 */

typedef struct _CM_PARTIAL_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST; /* size: 0x0018 */

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef enum _WHEA_ERROR_SOURCE_TYPE
{
  WheaErrSrcTypeMCE = 0,
  WheaErrSrcTypeCMC = 1,
  WheaErrSrcTypeCPE = 2,
  WheaErrSrcTypeNMI = 3,
  WheaErrSrcTypePCIe = 4,
  WheaErrSrcTypeGeneric = 5,
  WheaErrSrcTypeINIT = 6,
  WheaErrSrcTypeBOOT = 7,
  WheaErrSrcTypeSCIGeneric = 8,
  WheaErrSrcTypeIPFMCA = 9,
  WheaErrSrcTypeIPFCMC = 10,
  WheaErrSrcTypeIPFCPE = 11,
  WheaErrSrcTypeGenericV2 = 12,
  WheaErrSrcTypeSCIGenericV2 = 13,
  WheaErrSrcTypeBMC = 14,
  WheaErrSrcTypePMEM = 15,
  WheaErrSrcTypeDeviceDriver = 16,
  WheaErrSrcTypeMax = 17,
} WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;

typedef enum _WHEA_ERROR_SOURCE_STATE
{
  WheaErrSrcStateStopped = 1,
  WheaErrSrcStateStarted = 2,
  WheaErrSrcStateRemoved = 3,
  WheaErrSrcStateRemovePending = 4,
} WHEA_ERROR_SOURCE_STATE, *PWHEA_ERROR_SOURCE_STATE;

typedef struct _SID_AND_ATTRIBUTES
{
  /* 0x0000 */ void* Sid;
  /* 0x0004 */ unsigned long Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES; /* size: 0x0008 */

typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ const wchar_t* TriggerId;
} CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG; /* size: 0x0008 */

typedef enum _WHEA_EVENT_LOG_ENTRY_TYPE
{
  WheaEventLogEntryTypeInformational = 0,
  WheaEventLogEntryTypeWarning = 1,
  WheaEventLogEntryTypeError = 2,
} WHEA_EVENT_LOG_ENTRY_TYPE, *PWHEA_EVENT_LOG_ENTRY_TYPE;

typedef enum _WHEA_EVENT_LOG_ENTRY_ID
{
  WheaEventLogEntryIdCmcPollingTimeout = -2147483647,
  WheaEventLogEntryIdWheaInit = -2147483646,
  WheaEventLogEntryIdCmcSwitchToPolling = -2147483645,
  WheaEventLogEntryIdDroppedCorrectedError = -2147483644,
  WheaEventLogEntryIdStartedReportHwError = -2147483643,
  WheaEventLogEntryIdPFAMemoryOfflined = -2147483642,
  WheaEventLogEntryIdPFAMemoryRemoveMonitor = -2147483641,
  WheaEventLogEntryIdPFAMemoryPolicy = -2147483640,
  WheaEventLogEntryIdPshedInjectError = -2147483639,
  WheaEventLogEntryIdOscCapabilities = -2147483638,
  WheaEventLogEntryIdPshedPluginRegister = -2147483637,
  WheaEventLogEntryIdAddRemoveErrorSource = -2147483636,
  WheaEventLogEntryIdWorkQueueItem = -2147483635,
  WheaEventLogEntryIdAttemptErrorRecovery = -2147483634,
  WheaEventLogEntryIdMcaFoundErrorInBank = -2147483633,
  WheaEventLogEntryIdMcaStuckErrorCheck = -2147483632,
  WheaEventLogEntryIdMcaErrorCleared = -2147483631,
  WheaEventLogEntryIdClearedPoison = -2147483630,
  WheaEventLogEntryIdProcessEINJ = -2147483629,
  WheaEventLogEntryIdProcessHEST = -2147483628,
  WheaEventLogEntryIdCreateGenericRecord = -2147483627,
  WheaEventLogEntryIdErrorRecord = -2147483626,
  WheaEventLogEntryIdErrorRecordLimit = -2147483625,
  WheaEventLogEntryIdErrSrcArrayInvalid = -2147483623,
  WheaEventLogEntryIdAcpiTimeOut = -2147483622,
  WheaEventLogCmciRestart = -2147483621,
  WheaEventLogCmciFinalRestart = -2147483620,
  WheaEventLogEntryEtwOverFlow = -2147483619,
  WheaEventLogAzccRootBusSearchErr = -2147483618,
  WheaEventLogAzccRootBusList = -2147483617,
  WheaEventLogEntryIdErrSrcInvalid = -2147483616,
  WheaEventLogEntryIdGenericErrMemMap = -2147483615,
  WheaEventLogEntryIdPshedCallbackCollision = -2147483614,
  WheaEventLogEntryIdSELBugCheckProgress = -2147483613,
  WheaEventLogEntryIdPshedPluginLoad = -2147483612,
  WheaEventLogEntryIdPshedPluginUnload = -2147483611,
  WheaEventLogEntryIdPshedPluginSupported = -2147483610,
  WheaEventLogEntryIdDeviceDriver = -2147483609,
  WheaEventLogEntryIdCmciImplPresent = -2147483608,
  WheaEventLogEntryIdCmciInitError = -2147483607,
  WheaEventLogEntryIdSELBugCheckRecovery = -2147483606,
  WheaEventLogEntryIdDrvErrSrcInvalid = -2147483605,
  WheaEventLogEntryIdDrvHandleBusy = -2147483604,
  WheaEventLogEntryIdWheaHeartbeat = -2147483603,
  WheaEventLogAzccRootBusPoisonSet = -2147483602,
  WheaEventLogEntryIdSELBugCheckInfo = -2147483601,
  WheaEventLogEntryIdErrDimmInfoMismatch = -2147483600,
  WheaEventLogEntryIdeDpcEnabled = -2147483599,
  WheaEventLogEntryPageOfflineDone = -2147483598,
  WheaEventLogEntryPageOfflinePendMax = -2147483597,
  WheaEventLogEntryIdBadPageLimitReached = -2147483596,
  WheaEventLogEntrySrarDetail = -2147483595,
} WHEA_EVENT_LOG_ENTRY_ID, *PWHEA_EVENT_LOG_ENTRY_ID;

typedef enum _WHEA_ERROR_TYPE
{
  WheaErrTypeProcessor = 0,
  WheaErrTypeMemory = 1,
  WheaErrTypePCIExpress = 2,
  WheaErrTypeNMI = 3,
  WheaErrTypePCIXBus = 4,
  WheaErrTypePCIXDevice = 5,
  WheaErrTypeGeneric = 6,
  WheaErrTypePmem = 7,
} WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef struct _NON_PAGED_DEBUG_INFO
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned short Machine;
  /* 0x000a */ unsigned short Characteristics;
  /* 0x000c */ unsigned long TimeDateStamp;
  /* 0x0010 */ unsigned long CheckSum;
  /* 0x0014 */ unsigned long SizeOfImage;
  /* 0x0018 */ unsigned __int64 ImageBase;
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO; /* size: 0x0020 */

typedef struct __WIL__WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} _WIL__WNF_STATE_NAME, *P_WIL__WNF_STATE_NAME; /* size: 0x0008 */

typedef enum _WHEA_ERROR_SEVERITY
{
  WheaErrSevRecoverable = 0,
  WheaErrSevFatal = 1,
  WheaErrSevCorrected = 2,
  WheaErrSevInformational = 3,
} WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef struct _REMOTE_PORT_VIEW
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long ViewSize;
  /* 0x0008 */ void* ViewBase;
} REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW; /* size: 0x000c */

typedef struct _EVENT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Channel;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Opcode;
  /* 0x0006 */ unsigned short Task;
  /* 0x0008 */ unsigned __int64 Keyword;
} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR; /* size: 0x0010 */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0008 */

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT
{
  WheaDataFormatIPFSalRecord = 0,
  WheaDataFormatXPFMCA = 1,
  WheaDataFormatMemory = 2,
  WheaDataFormatPCIExpress = 3,
  WheaDataFormatNMIPort = 4,
  WheaDataFormatPCIXBus = 5,
  WheaDataFormatPCIXDevice = 6,
  WheaDataFormatGeneric = 7,
  WheaDataFormatMax = 8,
} WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef struct _GENERIC_MAPPING
{
  /* 0x0000 */ unsigned long GenericRead;
  /* 0x0004 */ unsigned long GenericWrite;
  /* 0x0008 */ unsigned long GenericExecute;
  /* 0x000c */ unsigned long GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING; /* size: 0x0010 */

typedef enum _EVENT_INFO_CLASS
{
  EventProviderBinaryTrackInfo = 0,
  EventProviderSetReserved1 = 1,
  EventProviderSetTraits = 2,
  EventProviderUseDescriptorType = 3,
  MaxEventInfo = 4,
} EVENT_INFO_CLASS, *PEVENT_INFO_CLASS;

typedef struct _RTL_DYNAMIC_HASH_TABLE
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Shift;
  /* 0x0008 */ unsigned long TableSize;
  /* 0x000c */ unsigned long Pivot;
  /* 0x0010 */ unsigned long DivisorMask;
  /* 0x0014 */ unsigned long NumEntries;
  /* 0x0018 */ unsigned long NonEmptyBuckets;
  /* 0x001c */ unsigned long NumEnumerators;
  /* 0x0020 */ void* Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE; /* size: 0x0024 */

enum wil_ReportingKind
{
  wil_ReportingKind_None = 0,
  wil_ReportingKind_UniqueUsage = 1,
  wil_ReportingKind_UniqueOpportunity = 2,
  wil_ReportingKind_DeviceUsage = 3,
  wil_ReportingKind_DeviceOpportunity = 4,
  wil_ReportingKind_TotalDuration = 5,
  wil_ReportingKind_PausedDuration = 6,
};

enum wil_details_ServiceReportingKind
{
  wil_details_ServiceReportingKind_UniqueUsage = 0,
  wil_details_ServiceReportingKind_UniqueOpportunity = 1,
  wil_details_ServiceReportingKind_DeviceUsage = 2,
  wil_details_ServiceReportingKind_DeviceOpportunity = 3,
  wil_details_ServiceReportingKind_PotentialUniqueUsage = 4,
  wil_details_ServiceReportingKind_PotentialUniqueOpportunity = 5,
  wil_details_ServiceReportingKind_PotentialDeviceUsage = 6,
  wil_details_ServiceReportingKind_PotentialDeviceOpportunity = 7,
  wil_details_ServiceReportingKind_EnabledTotalDuration = 8,
  wil_details_ServiceReportingKind_EnabledPausedDuration = 9,
  wil_details_ServiceReportingKind_DisabledTotalDuration = 10,
  wil_details_ServiceReportingKind_DisabledPausedDuration = 11,
  wil_details_ServiceReportingKind_CustomEnabledBase = 100,
  wil_details_ServiceReportingKind_CustomDisabledBase = 150,
  wil_details_ServiceReportingKind_Store = 254,
  wil_details_ServiceReportingKind_None = 255,
  wil_details_ServiceReportingKind_VariantDevicePotentialBase = 256,
  wil_details_ServiceReportingKind_VariantDeviceUsageBase = 320,
  wil_details_ServiceReportingKind_VariantUniquePotentialBase = 384,
  wil_details_ServiceReportingKind_VariantUniqueUsageBase = 448,
};

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

enum wil_VariantReportingKind
{
  wil_VariantReportingKind_None = 0,
  wil_VariantReportingKind_UniqueUsage = 1,
  wil_VariantReportingKind_DeviceUsage = 2,
};

typedef struct _KSPIN_LOCK_QUEUE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE* volatile Next;
  /* 0x0004 */ unsigned long* volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE; /* size: 0x0008 */

typedef struct _KLOCK_QUEUE_HANDLE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE LockQueue;
  /* 0x0008 */ unsigned char OldIrql;
  /* 0x0009 */ char __PADDING__[3];
} KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE; /* size: 0x000c */

typedef union _MM_PAGE_ACCESS_INFO_FLAGS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Image : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 11 */
      }; /* bitfield */
    } /* size: 0x0004 */ File;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long FilePointerIndex : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned long HardFault : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long Spare1 : 2; /* bit position: 10 */
      }; /* bitfield */
    } /* size: 0x0004 */ Private;
  }; /* size: 0x0004 */
} MM_PAGE_ACCESS_INFO_FLAGS, *PMM_PAGE_ACCESS_INFO_FLAGS; /* size: 0x0004 */

typedef struct _MM_PAGE_ACCESS_INFO
{
  union
  {
    /* 0x0000 */ union _MM_PAGE_ACCESS_INFO_FLAGS Flags;
    /* 0x0000 */ unsigned __int64 FileOffset;
    /* 0x0000 */ void* VirtualAddress;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long DontUse0 : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned long Spare0 : 29; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0004 */ void* PointerProtoPte;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} MM_PAGE_ACCESS_INFO, *PMM_PAGE_ACCESS_INFO; /* size: 0x0008 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  /* 0x0008 */ unsigned long Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY; /* size: 0x000c */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  union
  {
    /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    /* 0x0000 */ struct _LIST_ENTRY* CurEntry;
  }; /* size: 0x000c */
  /* 0x000c */ struct _LIST_ENTRY* ChainHead;
  /* 0x0010 */ unsigned long BucketIndex;
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR; /* size: 0x0014 */

enum wil_FeatureStore
{
  wil_FeatureStore_Machine = 0,
  wil_FeatureStore_User = 1,
  wil_FeatureStore_All = 2,
};

typedef struct _IO_PRIORITY_INFO
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long ThreadPriority;
  /* 0x0008 */ unsigned long PagePriority;
  /* 0x000c */ enum _IO_PRIORITY_HINT IoPriority;
} IO_PRIORITY_INFO, *PIO_PRIORITY_INFO; /* size: 0x0010 */

enum wil_FeatureEnabledState
{
  wil_FeatureEnabledState_Default = 0,
  wil_FeatureEnabledState_Disabled = 1,
  wil_FeatureEnabledState_Enabled = 2,
};

typedef struct _FILE_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ unsigned long FileAttributes;
  /* 0x0024 */ long __PADDING__[1];
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION; /* size: 0x0028 */

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

typedef struct _ACCESS_REASONS
{
  /* 0x0000 */ unsigned long Data[32];
} ACCESS_REASONS, *PACCESS_REASONS; /* size: 0x0080 */

struct _SCSI_REQUEST_BLOCK;

enum wil_FeatureVariantPayloadKind
{
  wil_FeatureVariantPayloadKind_None = 0,
  wil_FeatureVariantPayloadKind_Resident = 1,
  wil_FeatureVariantPayloadKind_External = 2,
};

enum wil_FeatureChangeTime
{
  wil_FeatureChangeTime_OnRead = 0,
  wil_FeatureChangeTime_OnReload = 1,
  wil_FeatureChangeTime_OnSession = 2,
  wil_FeatureChangeTime_OnReboot = 3,
};

typedef struct _PS_PROPERTY_SET
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long Lock;
} PS_PROPERTY_SET, *PPS_PROPERTY_SET; /* size: 0x000c */

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0004 */ void* StackBase;
  /* 0x0008 */ void* StackLimit;
  /* 0x000c */ void* SubSystemTib;
  union
  {
    /* 0x0010 */ void* FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ void* ArbitraryUserPointer;
  /* 0x0018 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x001c */

typedef struct _FLOATING_SAVE_AREA
{
  /* 0x0000 */ unsigned long ControlWord;
  /* 0x0004 */ unsigned long StatusWord;
  /* 0x0008 */ unsigned long TagWord;
  /* 0x000c */ unsigned long ErrorOffset;
  /* 0x0010 */ unsigned long ErrorSelector;
  /* 0x0014 */ unsigned long DataOffset;
  /* 0x0018 */ unsigned long DataSelector;
  /* 0x001c */ unsigned char RegisterArea[80];
  /* 0x006c */ unsigned long Spare0;
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA; /* size: 0x0070 */

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
  /* 0x0004 */ unsigned long Dr0;
  /* 0x0008 */ unsigned long Dr1;
  /* 0x000c */ unsigned long Dr2;
  /* 0x0010 */ unsigned long Dr3;
  /* 0x0014 */ unsigned long Dr6;
  /* 0x0018 */ unsigned long Dr7;
  /* 0x001c */ struct _FLOATING_SAVE_AREA FloatSave;
  /* 0x008c */ unsigned long SegGs;
  /* 0x0090 */ unsigned long SegFs;
  /* 0x0094 */ unsigned long SegEs;
  /* 0x0098 */ unsigned long SegDs;
  /* 0x009c */ unsigned long Edi;
  /* 0x00a0 */ unsigned long Esi;
  /* 0x00a4 */ unsigned long Ebx;
  /* 0x00a8 */ unsigned long Edx;
  /* 0x00ac */ unsigned long Ecx;
  /* 0x00b0 */ unsigned long Eax;
  /* 0x00b4 */ unsigned long Ebp;
  /* 0x00b8 */ unsigned long Eip;
  /* 0x00bc */ unsigned long SegCs;
  /* 0x00c0 */ unsigned long EFlags;
  /* 0x00c4 */ unsigned long Esp;
  /* 0x00c8 */ unsigned long SegSs;
  /* 0x00cc */ unsigned char ExtendedRegisters[512];
} CONTEXT, *PCONTEXT; /* size: 0x02cc */

typedef struct _DESCRIPTOR
{
  /* 0x0000 */ unsigned short Pad;
  /* 0x0002 */ unsigned short Limit;
  /* 0x0004 */ unsigned long Base;
} DESCRIPTOR, *PDESCRIPTOR; /* size: 0x0008 */

typedef struct _KSPECIAL_REGISTERS
{
  /* 0x0000 */ unsigned long Cr0;
  /* 0x0004 */ unsigned long Cr2;
  /* 0x0008 */ unsigned long Cr3;
  /* 0x000c */ unsigned long Cr4;
  /* 0x0010 */ unsigned long KernelDr0;
  /* 0x0014 */ unsigned long KernelDr1;
  /* 0x0018 */ unsigned long KernelDr2;
  /* 0x001c */ unsigned long KernelDr3;
  /* 0x0020 */ unsigned long KernelDr6;
  /* 0x0024 */ unsigned long KernelDr7;
  /* 0x0028 */ struct _DESCRIPTOR Gdtr;
  /* 0x0030 */ struct _DESCRIPTOR Idtr;
  /* 0x0038 */ unsigned short Tr;
  /* 0x003a */ unsigned short Ldtr;
  /* 0x003c */ unsigned __int64 Xcr0;
  /* 0x0044 */ unsigned long ExceptionList;
  /* 0x0048 */ unsigned long Reserved[3];
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS; /* size: 0x0054 */

typedef struct _KPROCESSOR_STATE
{
  /* 0x0000 */ struct _CONTEXT ContextFrame;
  /* 0x02cc */ struct _KSPECIAL_REGISTERS SpecialRegisters;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE; /* size: 0x0320 */

typedef union _KPRCBFLAG
{
  union
  {
    /* 0x0000 */ volatile long PrcbFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long BamQosLevel : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long PendingQosUpdate : 2; /* bit position: 8 */
      /* 0x0000 */ unsigned long CacheIsolationEnabled : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long TracepointActive : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long PrcbFlagsReserved : 20; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KPRCBFLAG, *PKPRCBFLAG; /* size: 0x0004 */

typedef struct _PP_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE* P;
  /* 0x0004 */ struct _GENERAL_LOOKASIDE* L;
} PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST; /* size: 0x0008 */

typedef union _SLIST_HEADER
{
  union
  {
    /* 0x0000 */ unsigned __int64 Alignment;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY Next;
      /* 0x0004 */ unsigned short Depth;
      /* 0x0006 */ unsigned short CpuId;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} SLIST_HEADER, *PSLIST_HEADER; /* size: 0x0008 */

typedef struct _GENERAL_LOOKASIDE_POOL
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  union
  {
    /* 0x0010 */ unsigned long AllocateMisses;
    /* 0x0010 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long TotalFrees;
  union
  {
    /* 0x0018 */ unsigned long FreeMisses;
    /* 0x0018 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x001c */ enum _POOL_TYPE Type;
  /* 0x0020 */ unsigned long Tag;
  /* 0x0024 */ unsigned long Size;
  union
  {
    /* 0x0028 */ void* AllocateEx /* function */;
    /* 0x0028 */ void* Allocate /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* FreeEx /* function */;
    /* 0x002c */ void* Free /* function */;
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _LIST_ENTRY ListEntry;
  /* 0x0038 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x003c */ unsigned long LastAllocateMisses;
    /* 0x003c */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0040 */ unsigned long Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL; /* size: 0x0048 */

typedef struct _KDPC_LIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListHead;
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY* LastEntry;
} KDPC_LIST, *PKDPC_LIST; /* size: 0x0008 */

typedef struct _KDPC_DATA
{
  /* 0x0000 */ struct _KDPC_LIST DpcList;
  /* 0x0008 */ unsigned long DpcLock;
  /* 0x000c */ volatile long DpcQueueDepth;
  /* 0x0010 */ unsigned long DpcCount;
  /* 0x0014 */ struct _KDPC* volatile ActiveDpc;
  /* 0x0018 */ unsigned long LongDpcPresent;
} KDPC_DATA, *PKDPC_DATA; /* size: 0x001c */

typedef struct _KGATE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
} KGATE, *PKGATE; /* size: 0x0010 */

typedef struct _KAFFINITY_EX
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned long Bitmap[1];
} KAFFINITY_EX, *PKAFFINITY_EX; /* size: 0x000c */

typedef struct _KSOFTWARE_INTERRUPT_BATCH
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char TargetType;
  /* 0x0002 */ unsigned char ReservedBatchInProgress;
  /* 0x0003 */ unsigned char Spare;
  /* 0x0004 */ unsigned long SingleTargetIndex;
  /* 0x0008 */ struct _KAFFINITY_EX MultipleTargetAffinity;
} KSOFTWARE_INTERRUPT_BATCH, *PKSOFTWARE_INTERRUPT_BATCH; /* size: 0x0014 */

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

typedef struct _KTIMER_TABLE_ENTRY
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ struct _LIST_ENTRY Entry;
  /* 0x000c */ long Padding_13;
  /* 0x0010 */ union _ULARGE_INTEGER Time;
} KTIMER_TABLE_ENTRY, *PKTIMER_TABLE_ENTRY; /* size: 0x0018 */

typedef struct _KTIMER_TABLE_STATE
{
  /* 0x0000 */ unsigned __int64 LastTimerExpiration[1];
  /* 0x0008 */ unsigned long LastTimerHand[1];
  /* 0x000c */ long __PADDING__[1];
} KTIMER_TABLE_STATE, *PKTIMER_TABLE_STATE; /* size: 0x0010 */

typedef struct _KTIMER_TABLE
{
  /* 0x0000 */ struct _KTIMER* TimerExpiry[16];
  /* 0x0040 */ struct _KTIMER_TABLE_ENTRY TimerEntries[256][1];
  /* 0x1840 */ struct _KTIMER_TABLE_STATE TableState;
} KTIMER_TABLE, *PKTIMER_TABLE; /* size: 0x1850 */

typedef struct _KDPC
{
  union
  {
    /* 0x0000 */ unsigned long TargetInfoAsUlong;
    struct
    {
      /* 0x0000 */ unsigned char Type;
      /* 0x0001 */ unsigned char Importance;
      /* 0x0002 */ volatile unsigned short Number;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ struct _SINGLE_LIST_ENTRY DpcListEntry;
  /* 0x0008 */ unsigned long ProcessorHistory;
  /* 0x000c */ void* DeferredRoutine /* function */;
  /* 0x0010 */ void* DeferredContext;
  /* 0x0014 */ void* SystemArgument1;
  /* 0x0018 */ void* SystemArgument2;
  /* 0x001c */ void* DpcData;
} KDPC, *PKDPC; /* size: 0x0020 */

typedef struct _PROC_IDLE_POLICY
{
  /* 0x0000 */ unsigned char PromotePercent;
  /* 0x0001 */ unsigned char DemotePercent;
  /* 0x0002 */ unsigned char PromotePercentBase;
  /* 0x0003 */ unsigned char DemotePercentBase;
  /* 0x0004 */ unsigned char AllowScaling;
  /* 0x0005 */ unsigned char ForceLightIdle;
} PROC_IDLE_POLICY, *PPROC_IDLE_POLICY; /* size: 0x0006 */

typedef union _PPM_IDLE_SYNCHRONIZATION_STATE
{
  union
  {
    /* 0x0000 */ long AsLong;
    struct /* bitfield */
    {
      /* 0x0000 */ long RefCount : 24; /* bit position: 0 */
      /* 0x0000 */ unsigned long State : 8; /* bit position: 24 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PPM_IDLE_SYNCHRONIZATION_STATE, *PPPM_IDLE_SYNCHRONIZATION_STATE; /* size: 0x0004 */

typedef struct _PROC_FEEDBACK
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ long Padding_14;
  /* 0x0008 */ unsigned __int64 CyclesLast;
  /* 0x0010 */ unsigned __int64 CyclesActive;
  /* 0x0018 */ struct _PROC_FEEDBACK_COUNTER* Counters[2];
  /* 0x0020 */ unsigned __int64 LastUpdateTime;
  /* 0x0028 */ unsigned __int64 UnscaledTime;
  /* 0x0030 */ volatile __int64 UnaccountedTime;
  /* 0x0038 */ unsigned __int64 ScaledTime[2];
  /* 0x0048 */ unsigned __int64 UnaccountedKernelTime;
  /* 0x0050 */ unsigned __int64 PerformanceScaledKernelTime;
  /* 0x0058 */ unsigned long UserTimeLast;
  /* 0x005c */ unsigned long KernelTimeLast;
  /* 0x0060 */ unsigned __int64 IdleGenerationNumberLast;
  /* 0x0068 */ unsigned __int64 HvActiveTimeLast;
  /* 0x0070 */ unsigned __int64 StallCyclesLast;
  /* 0x0078 */ unsigned __int64 StallTime;
  /* 0x0080 */ unsigned char KernelTimesIndex;
  /* 0x0081 */ unsigned char CounterDiscardsIdleTime;
  /* 0x0082 */ char __PADDING__[6];
} PROC_FEEDBACK, *PPROC_FEEDBACK; /* size: 0x0088 */

typedef enum _PROC_HYPERVISOR_STATE
{
  ProcHypervisorNone = 0,
  ProcHypervisorPresent = 1,
  ProcHypervisorPower = 2,
  ProcHypervisorHvCounters = 3,
} PROC_HYPERVISOR_STATE, *PPROC_HYPERVISOR_STATE;

typedef struct _PPM_FFH_THROTTLE_STATE_INFO
{
  /* 0x0000 */ unsigned char EnableLogging;
  /* 0x0001 */ char Padding_15[3];
  /* 0x0004 */ unsigned long MismatchCount;
  /* 0x0008 */ unsigned char Initialized;
  /* 0x0009 */ char Padding_16[7];
  /* 0x0010 */ unsigned __int64 LastValue;
  /* 0x0018 */ union _LARGE_INTEGER LastLogTickCount;
} PPM_FFH_THROTTLE_STATE_INFO, *PPPM_FFH_THROTTLE_STATE_INFO; /* size: 0x0020 */

typedef struct _PROC_IDLE_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 Idle;
} PROC_IDLE_SNAP, *PPROC_IDLE_SNAP; /* size: 0x0010 */

typedef struct _PROC_PERF_CHECK_CONTEXT
{
  /* 0x0000 */ struct _PROC_PERF_DOMAIN* Domain;
  /* 0x0004 */ struct _PROC_PERF_CONSTRAINT* Constraint;
  /* 0x0008 */ struct _PROC_PERF_CHECK* PerfCheck;
  /* 0x000c */ struct _PROC_PERF_LOAD* Load;
  /* 0x0010 */ struct _PROC_PERF_HISTORY* PerfHistory;
  /* 0x0014 */ unsigned long Utility;
  /* 0x0018 */ unsigned long AffinitizedUtility;
  /* 0x001c */ unsigned long MediaUtility;
  /* 0x0020 */ unsigned long ImportantUtility;
  /* 0x0024 */ unsigned short LatestAffinitizedPercent;
  /* 0x0026 */ unsigned short AveragePerformancePercent;
  /* 0x0028 */ unsigned long RelativePerformance;
} PROC_PERF_CHECK_CONTEXT, *PPROC_PERF_CHECK_CONTEXT; /* size: 0x002c */

typedef enum _KHETERO_CPU_QOS
{
  KHeteroCpuQosDefault = 0,
  KHeteroCpuQosHigh = 0,
  KHeteroCpuQosMedium = 1,
  KHeteroCpuQosLow = 2,
  KHeteroCpuQosMultimedia = 3,
  KHeteroCpuQosDeadline = 4,
  KHeteroCpuQosDynamic = 5,
  KHeteroCpuQosMax = 5,
} KHETERO_CPU_QOS, *PKHETERO_CPU_QOS;

typedef struct _PROCESSOR_POWER_STATE
{
  /* 0x0000 */ struct _PPM_IDLE_STATES* IdleStates;
  /* 0x0004 */ struct _PROC_IDLE_ACCOUNTING* IdleAccounting;
  /* 0x0008 */ unsigned __int64 IdleTimeLast;
  /* 0x0010 */ unsigned __int64 IdleTimeTotal;
  /* 0x0018 */ volatile unsigned __int64 IdleTimeEntry;
  /* 0x0020 */ unsigned __int64 IdleTimeExpiration;
  /* 0x0028 */ unsigned char NonInterruptibleTransition;
  /* 0x0029 */ unsigned char PepWokenTransition;
  /* 0x002a */ unsigned char HvTargetState;
  /* 0x002b */ unsigned char SoftParked;
  /* 0x002c */ unsigned long TargetIdleState;
  /* 0x0030 */ struct _PROC_IDLE_POLICY IdlePolicy;
  /* 0x0036 */ char Padding_17[2];
  /* 0x0038 */ volatile union _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization;
  /* 0x003c */ long Padding_18;
  /* 0x0040 */ struct _PROC_FEEDBACK PerfFeedback;
  /* 0x00c8 */ enum _PROC_HYPERVISOR_STATE Hypervisor;
  /* 0x00cc */ unsigned long LastSysTime;
  /* 0x00d0 */ unsigned long WmiDispatchPtr;
  /* 0x00d4 */ long WmiInterfaceEnabled;
  /* 0x00d8 */ struct _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo;
  /* 0x00f8 */ struct _KDPC PerfActionDpc;
  /* 0x0118 */ volatile long PerfActionMask;
  /* 0x011c */ long Padding_19;
  /* 0x0120 */ struct _PROC_IDLE_SNAP HvIdleCheck;
  /* 0x0130 */ struct _PROC_PERF_CHECK_CONTEXT CheckContext;
  /* 0x015c */ struct _PPM_CONCURRENCY_ACCOUNTING* Concurrency;
  /* 0x0160 */ struct _PPM_CONCURRENCY_ACCOUNTING* ClassConcurrency;
  /* 0x0164 */ unsigned char ArchitecturalEfficiencyClass;
  /* 0x0165 */ unsigned char PerformanceSchedulingClass;
  /* 0x0166 */ unsigned char EfficiencySchedulingClass;
  /* 0x0167 */ unsigned char Unused;
  /* 0x0168 */ unsigned char Parked;
  /* 0x0169 */ unsigned char LongPriorQosPeriod;
  /* 0x016a */ char Padding_20[6];
  union
  {
    /* 0x0170 */ unsigned __int64 SnapTimeLast;
    /* 0x0170 */ unsigned __int64 EnergyConsumed;
  }; /* size: 0x0008 */
  /* 0x0178 */ unsigned __int64 ActiveTime;
  /* 0x0180 */ unsigned __int64 TotalTime;
  /* 0x0188 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x018c */ long Padding_21;
  /* 0x0190 */ unsigned __int64 LastQosTranstionTsc;
  /* 0x0198 */ unsigned __int64 QosTransitionHysteresis;
  /* 0x01a0 */ enum _KHETERO_CPU_QOS RequestedQosClass;
  /* 0x01a4 */ enum _KHETERO_CPU_QOS ResolvedQosClass;
  /* 0x01a8 */ unsigned short QosEquivalencyMask;
  /* 0x01aa */ unsigned short HwFeedbackTableIndex;
  /* 0x01ac */ unsigned char HwFeedbackParkHint;
  /* 0x01ad */ unsigned char HwFeedbackPerformanceClass;
  /* 0x01ae */ unsigned char HwFeedbackEfficiencyClass;
  /* 0x01af */ unsigned char HeteroCoreType;
} PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE; /* size: 0x01b0 */

typedef struct _KTIMER
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ union _ULARGE_INTEGER DueTime;
  /* 0x0018 */ struct _LIST_ENTRY TimerListEntry;
  /* 0x0020 */ struct _KDPC* Dpc;
  /* 0x0024 */ unsigned long Period;
} KTIMER, *PKTIMER; /* size: 0x0028 */

typedef enum _PROCESSOR_CACHE_TYPE
{
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3,
} PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef struct _CACHE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char Associativity;
  /* 0x0002 */ unsigned short LineSize;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ enum _PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR; /* size: 0x000c */

typedef struct _SYNCH_COUNTERS
{
  /* 0x0000 */ unsigned long SpinLockAcquireCount;
  /* 0x0004 */ unsigned long SpinLockContentionCount;
  /* 0x0008 */ unsigned long SpinLockSpinCount;
  /* 0x000c */ unsigned long IpiSendRequestBroadcastCount;
  /* 0x0010 */ unsigned long IpiSendRequestRoutineCount;
  /* 0x0014 */ unsigned long IpiSendSoftwareInterruptCount;
  /* 0x0018 */ unsigned long ExInitializeResourceCount;
  /* 0x001c */ unsigned long ExReInitializeResourceCount;
  /* 0x0020 */ unsigned long ExDeleteResourceCount;
  /* 0x0024 */ unsigned long ExecutiveResourceAcquiresCount;
  /* 0x0028 */ unsigned long ExecutiveResourceContentionsCount;
  /* 0x002c */ unsigned long ExecutiveResourceReleaseExclusiveCount;
  /* 0x0030 */ unsigned long ExecutiveResourceReleaseSharedCount;
  /* 0x0034 */ unsigned long ExecutiveResourceConvertsCount;
  /* 0x0038 */ unsigned long ExAcqResExclusiveAttempts;
  /* 0x003c */ unsigned long ExAcqResExclusiveAcquiresExclusive;
  /* 0x0040 */ unsigned long ExAcqResExclusiveAcquiresExclusiveRecursive;
  /* 0x0044 */ unsigned long ExAcqResExclusiveWaits;
  /* 0x0048 */ unsigned long ExAcqResExclusiveNotAcquires;
  /* 0x004c */ unsigned long ExAcqResSharedAttempts;
  /* 0x0050 */ unsigned long ExAcqResSharedAcquiresExclusive;
  /* 0x0054 */ unsigned long ExAcqResSharedAcquiresShared;
  /* 0x0058 */ unsigned long ExAcqResSharedAcquiresSharedRecursive;
  /* 0x005c */ unsigned long ExAcqResSharedWaits;
  /* 0x0060 */ unsigned long ExAcqResSharedNotAcquires;
  /* 0x0064 */ unsigned long ExAcqResSharedStarveExclusiveAttempts;
  /* 0x0068 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresExclusive;
  /* 0x006c */ unsigned long ExAcqResSharedStarveExclusiveAcquiresShared;
  /* 0x0070 */ unsigned long ExAcqResSharedStarveExclusiveAcquiresSharedRecursive;
  /* 0x0074 */ unsigned long ExAcqResSharedStarveExclusiveWaits;
  /* 0x0078 */ unsigned long ExAcqResSharedStarveExclusiveNotAcquires;
  /* 0x007c */ unsigned long ExAcqResSharedWaitForExclusiveAttempts;
  /* 0x0080 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresExclusive;
  /* 0x0084 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresShared;
  /* 0x0088 */ unsigned long ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive;
  /* 0x008c */ unsigned long ExAcqResSharedWaitForExclusiveWaits;
  /* 0x0090 */ unsigned long ExAcqResSharedWaitForExclusiveNotAcquires;
  /* 0x0094 */ unsigned long ExSetResOwnerPointerExclusive;
  /* 0x0098 */ unsigned long ExSetResOwnerPointerSharedNew;
  /* 0x009c */ unsigned long ExSetResOwnerPointerSharedOld;
  /* 0x00a0 */ unsigned long ExTryToAcqExclusiveAttempts;
  /* 0x00a4 */ unsigned long ExTryToAcqExclusiveAcquires;
  /* 0x00a8 */ unsigned long ExBoostExclusiveOwner;
  /* 0x00ac */ unsigned long ExBoostSharedOwners;
  /* 0x00b0 */ unsigned long ExEtwSynchTrackingNotificationsCount;
  /* 0x00b4 */ unsigned long ExEtwSynchTrackingNotificationsAccountedCount;
} SYNCH_COUNTERS, *PSYNCH_COUNTERS; /* size: 0x00b8 */

typedef struct _FILESYSTEM_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 FsBytesRead;
  /* 0x0008 */ unsigned __int64 FsBytesWritten;
} FILESYSTEM_DISK_COUNTERS, *PFILESYSTEM_DISK_COUNTERS; /* size: 0x0010 */

typedef struct _KENTROPY_TIMING_STATE
{
  /* 0x0000 */ unsigned long EntropyCount;
  /* 0x0004 */ unsigned long Buffer[64];
  /* 0x0104 */ struct _KDPC Dpc;
  /* 0x0124 */ unsigned long LastDeliveredBuffer;
} KENTROPY_TIMING_STATE, *PKENTROPY_TIMING_STATE; /* size: 0x0128 */

typedef struct _IOP_IRP_STACK_PROFILER
{
  /* 0x0000 */ unsigned long Profile[20];
  /* 0x0050 */ unsigned long TotalIrps;
} IOP_IRP_STACK_PROFILER, *PIOP_IRP_STACK_PROFILER; /* size: 0x0054 */

typedef struct _KTIMER_EXPIRATION_TRACE
{
  /* 0x0000 */ unsigned __int64 InterruptTime;
  /* 0x0008 */ union _LARGE_INTEGER PerformanceCounter;
} KTIMER_EXPIRATION_TRACE, *PKTIMER_EXPIRATION_TRACE; /* size: 0x0010 */

typedef struct _KSHARED_READY_QUEUE
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned long ReadySummary;
  /* 0x0008 */ struct _LIST_ENTRY ReadyListHead[32];
  /* 0x0108 */ char RunningSummary[32];
  /* 0x0128 */ unsigned char Span;
  /* 0x0129 */ unsigned char LowProcIndex;
  /* 0x012a */ unsigned char QueueIndex;
  /* 0x012b */ unsigned char NormalPriorityQueueIndex;
  /* 0x012c */ unsigned char ProcCount;
  /* 0x012d */ unsigned char ScanOwner;
  /* 0x012e */ unsigned char Spare[2];
  /* 0x0130 */ unsigned long Affinity;
  /* 0x0134 */ unsigned long ReadyThreadCount;
  /* 0x0138 */ unsigned __int64 ReadyQueueExpectedRunTime;
} KSHARED_READY_QUEUE, *PKSHARED_READY_QUEUE; /* size: 0x0140 */

typedef struct _KREQUEST_PACKET
{
  /* 0x0000 */ void* CurrentPacket[3];
  /* 0x000c */ void* WorkerRoutine /* function */;
} KREQUEST_PACKET, *PKREQUEST_PACKET; /* size: 0x0010 */

typedef struct _REQUEST_MAILBOX
{
  /* 0x0000 */ struct _REQUEST_MAILBOX* Next;
  /* 0x0004 */ unsigned long RequestSummary;
  /* 0x0008 */ struct _KREQUEST_PACKET RequestPacket;
  /* 0x0018 */ volatile long* NodeTargetCountAddr;
  /* 0x001c */ volatile long NodeTargetCount;
} REQUEST_MAILBOX, *PREQUEST_MAILBOX; /* size: 0x0020 */

typedef struct _KPRCB
{
  /* 0x0000 */ unsigned short MinorVersion;
  /* 0x0002 */ unsigned short MajorVersion;
  /* 0x0004 */ struct _KTHREAD* CurrentThread;
  /* 0x0008 */ struct _KTHREAD* NextThread;
  /* 0x000c */ struct _KTHREAD* IdleThread;
  /* 0x0010 */ unsigned char LegacyNumber;
  /* 0x0011 */ unsigned char NestingLevel;
  /* 0x0012 */ unsigned short BuildType;
  /* 0x0014 */ char CpuType;
  /* 0x0015 */ char CpuID;
  union
  {
    /* 0x0016 */ unsigned short CpuStep;
    struct
    {
      /* 0x0016 */ unsigned char CpuStepping;
      /* 0x0017 */ unsigned char CpuModel;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0018 */ struct _KPROCESSOR_STATE ProcessorState;
  /* 0x0338 */ struct _KNODE* ParentNode;
  /* 0x033c */ char* PriorityState;
  /* 0x0340 */ unsigned long KernelReserved[14];
  /* 0x0378 */ unsigned long HalReserved[16];
  /* 0x03b8 */ unsigned long CFlushSize;
  /* 0x03bc */ unsigned char CoresPerPhysicalProcessor;
  /* 0x03bd */ unsigned char LogicalProcessorsPerCore;
  /* 0x03be */ unsigned char CpuVendor;
  /* 0x03bf */ unsigned char PrcbPad0[1];
  /* 0x03c0 */ unsigned long MHz;
  /* 0x03c4 */ unsigned char GroupIndex;
  /* 0x03c5 */ unsigned char Group;
  /* 0x03c6 */ unsigned char PrcbPad05[2];
  /* 0x03c8 */ unsigned long GroupSetMember;
  /* 0x03cc */ unsigned long Number;
  /* 0x03d0 */ unsigned char ClockOwner;
  union
  {
    /* 0x03d1 */ unsigned char PendingTickFlags;
    struct /* bitfield */
    {
      /* 0x03d1 */ unsigned char PendingTick : 1; /* bit position: 0 */
      /* 0x03d1 */ unsigned char PendingBackupTick : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x03d2 */ unsigned char PrcbPad10[70];
  /* 0x0418 */ struct _KSPIN_LOCK_QUEUE LockQueue[17];
  /* 0x04a0 */ unsigned long InterruptCount;
  /* 0x04a4 */ unsigned long KernelTime;
  /* 0x04a8 */ unsigned long UserTime;
  /* 0x04ac */ unsigned long DpcTime;
  /* 0x04b0 */ unsigned long DpcTimeCount;
  /* 0x04b4 */ unsigned long InterruptTime;
  /* 0x04b8 */ unsigned long AdjustDpcThreshold;
  /* 0x04bc */ unsigned long PageColor;
  /* 0x04c0 */ unsigned char DebuggerSavedIRQL;
  /* 0x04c1 */ unsigned char NodeColor;
  /* 0x04c2 */ unsigned char DeepSleep;
  /* 0x04c3 */ unsigned char TbFlushListActive;
  /* 0x04c4 */ void* volatile CachedStack;
  /* 0x04c8 */ unsigned long NodeShiftedColor;
  /* 0x04cc */ unsigned long SecondaryColorMask;
  /* 0x04d0 */ unsigned long DpcTimeLimit;
  /* 0x04d4 */ void* MmInternal;
  /* 0x04d8 */ union _KPRCBFLAG PrcbFlags;
  /* 0x04dc */ void* SchedulerAssist;
  /* 0x04e0 */ unsigned long CcFastReadNoWait;
  /* 0x04e4 */ unsigned long CcFastReadWait;
  /* 0x04e8 */ unsigned long CcFastReadNotPossible;
  /* 0x04ec */ unsigned long CcCopyReadNoWait;
  /* 0x04f0 */ unsigned long CcCopyReadWait;
  /* 0x04f4 */ unsigned long CcCopyReadNoWaitMiss;
  /* 0x04f8 */ volatile long MmSpinLockOrdering;
  /* 0x04fc */ volatile long IoReadOperationCount;
  /* 0x0500 */ volatile long IoWriteOperationCount;
  /* 0x0504 */ volatile long IoOtherOperationCount;
  /* 0x0508 */ union _LARGE_INTEGER IoReadTransferCount;
  /* 0x0510 */ union _LARGE_INTEGER IoWriteTransferCount;
  /* 0x0518 */ union _LARGE_INTEGER IoOtherTransferCount;
  /* 0x0520 */ unsigned long CcFastMdlReadNoWait;
  /* 0x0524 */ unsigned long CcFastMdlReadWait;
  /* 0x0528 */ unsigned long CcFastMdlReadNotPossible;
  /* 0x052c */ unsigned long CcMapDataNoWait;
  /* 0x0530 */ unsigned long CcMapDataWait;
  /* 0x0534 */ unsigned long CcPinMappedDataCount;
  /* 0x0538 */ unsigned long CcPinReadNoWait;
  /* 0x053c */ unsigned long CcPinReadWait;
  /* 0x0540 */ unsigned long CcMdlReadNoWait;
  /* 0x0544 */ unsigned long CcMdlReadWait;
  /* 0x0548 */ unsigned long CcLazyWriteHotSpots;
  /* 0x054c */ unsigned long CcLazyWriteIos;
  /* 0x0550 */ unsigned long CcLazyWritePages;
  /* 0x0554 */ unsigned long CcDataFlushes;
  /* 0x0558 */ unsigned long CcDataPages;
  /* 0x055c */ unsigned long CcLostDelayedWrites;
  /* 0x0560 */ unsigned long CcFastReadResourceMiss;
  /* 0x0564 */ unsigned long CcCopyReadWaitMiss;
  /* 0x0568 */ unsigned long CcFastMdlReadResourceMiss;
  /* 0x056c */ unsigned long CcMapDataNoWaitMiss;
  /* 0x0570 */ unsigned long CcMapDataWaitMiss;
  /* 0x0574 */ unsigned long CcPinReadNoWaitMiss;
  /* 0x0578 */ unsigned long CcPinReadWaitMiss;
  /* 0x057c */ unsigned long CcMdlReadNoWaitMiss;
  /* 0x0580 */ unsigned long CcMdlReadWaitMiss;
  /* 0x0584 */ unsigned long CcReadAheadIos;
  /* 0x0588 */ unsigned long KeAlignmentFixupCount;
  /* 0x058c */ unsigned long KeExceptionDispatchCount;
  /* 0x0590 */ unsigned long KeSystemCalls;
  /* 0x0594 */ unsigned long AvailableTime;
  /* 0x0598 */ unsigned long NormalPriorityQueueIndex;
  /* 0x059c */ unsigned long NormalPriorityReadyScanTick;
  /* 0x05a0 */ struct _PP_LOOKASIDE_LIST PPLookasideList[16];
  /* 0x0620 */ struct _GENERAL_LOOKASIDE_POOL PPNxPagedLookasideList[32];
  /* 0x0f20 */ struct _GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
  /* 0x1820 */ struct _GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
  /* 0x2120 */ volatile long PacketBarrier;
  /* 0x2124 */ volatile long ReverseStall;
  /* 0x2128 */ void* IpiFrame;
  /* 0x212c */ unsigned char PrcbPad3[52];
  /* 0x2160 */ void* volatile CurrentPacket[3];
  /* 0x216c */ volatile unsigned long TargetSet;
  /* 0x2170 */ void* volatile WorkerRoutine /* function */;
  /* 0x2174 */ volatile unsigned long IpiFrozen;
  /* 0x2178 */ unsigned char PrcbPad4[40];
  /* 0x21a0 */ volatile unsigned long RequestSummary;
  /* 0x21a4 */ volatile long TargetCount;
  /* 0x21a8 */ unsigned __int64 PrcbPad94[1];
  /* 0x21b0 */ unsigned __int64 TrappedSecurityDomain;
  union
  {
    /* 0x21b8 */ unsigned char BpbState;
    struct /* bitfield */
    {
      /* 0x21b8 */ unsigned char BpbCpuIdle : 1; /* bit position: 0 */
      /* 0x21b8 */ unsigned char BpbFlushRsbOnTrap : 1; /* bit position: 1 */
      /* 0x21b8 */ unsigned char BpbIbpbOnReturn : 1; /* bit position: 2 */
      /* 0x21b8 */ unsigned char BpbIbpbOnTrap : 1; /* bit position: 3 */
      /* 0x21b8 */ unsigned char BpbReserved : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  union
  {
    /* 0x21b9 */ unsigned char BpbFeatures;
    struct /* bitfield */
    {
      /* 0x21b9 */ unsigned char BpbClearOnIdle : 1; /* bit position: 0 */
      /* 0x21b9 */ unsigned char BpbEnabled : 1; /* bit position: 1 */
      /* 0x21b9 */ unsigned char BpbSmep : 1; /* bit position: 2 */
      /* 0x21b9 */ unsigned char BpbFeaturesReserved : 5; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x21ba */ unsigned char BpbCurrentSpecCtrl;
  /* 0x21bb */ unsigned char BpbKernelSpecCtrl;
  /* 0x21bc */ unsigned char BpbNmiSpecCtrl;
  /* 0x21bd */ unsigned char BpbUserSpecCtrl;
  /* 0x21be */ unsigned char PrcbPad49[2];
  /* 0x21c0 */ unsigned long ProcessorSignature;
  /* 0x21c4 */ unsigned long ProcessorFlags;
  /* 0x21c8 */ unsigned char PrcbPad50[8];
  /* 0x21d0 */ unsigned long InterruptLastCount;
  /* 0x21d4 */ unsigned long InterruptRate;
  /* 0x21d8 */ unsigned long DeviceInterrupts;
  /* 0x21dc */ void* IsrDpcStats;
  /* 0x21e0 */ struct _KDPC_DATA DpcData[2];
  /* 0x2218 */ void* DpcStack;
  /* 0x221c */ long MaximumDpcQueueDepth;
  /* 0x2220 */ unsigned long DpcRequestRate;
  /* 0x2224 */ unsigned long MinimumDpcRate;
  /* 0x2228 */ unsigned long DpcLastCount;
  /* 0x222c */ unsigned long PrcbLock;
  /* 0x2230 */ struct _KGATE DpcGate;
  /* 0x2240 */ unsigned char IdleState;
  /* 0x2241 */ volatile unsigned char QuantumEnd;
  /* 0x2242 */ volatile unsigned char DpcRoutineActive;
  /* 0x2243 */ volatile unsigned char IdleSchedule;
  union
  {
    /* 0x2244 */ volatile long DpcRequestSummary;
    /* 0x2244 */ short DpcRequestSlot[2];
    struct
    {
      /* 0x2244 */ short NormalDpcState;
      /* 0x2246 */ short ThreadDpcState;
    }; /* size: 0x0004 */
    struct /* bitfield */
    {
      /* 0x2244 */ unsigned long DpcNormalProcessingActive : 1; /* bit position: 0 */
      /* 0x2244 */ unsigned long DpcNormalProcessingRequested : 1; /* bit position: 1 */
      /* 0x2244 */ unsigned long DpcNormalThreadSignal : 1; /* bit position: 2 */
      /* 0x2244 */ unsigned long DpcNormalTimerExpiration : 1; /* bit position: 3 */
      /* 0x2244 */ unsigned long DpcNormalDpcPresent : 1; /* bit position: 4 */
      /* 0x2244 */ unsigned long DpcNormalLocalInterrupt : 1; /* bit position: 5 */
      /* 0x2244 */ unsigned long DpcNormalPriorityAntiStarvation : 1; /* bit position: 6 */
      /* 0x2244 */ unsigned long DpcNormalSwapToDpcDelegate : 1; /* bit position: 7 */
      /* 0x2244 */ unsigned long DpcNormalSpare : 8; /* bit position: 8 */
      /* 0x2244 */ unsigned long DpcThreadActive : 1; /* bit position: 16 */
      /* 0x2244 */ unsigned long DpcThreadRequested : 1; /* bit position: 17 */
      /* 0x2244 */ unsigned long DpcThreadSpare : 14; /* bit position: 18 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x2248 */ unsigned long LastTick;
  /* 0x224c */ unsigned long PeriodicCount;
  /* 0x2250 */ unsigned long PeriodicBias;
  /* 0x2254 */ unsigned long ClockInterrupts;
  /* 0x2258 */ unsigned long ReadyScanTick;
  /* 0x225c */ unsigned char GroupSchedulingOverQuota;
  /* 0x225d */ unsigned char ThreadDpcEnable;
  /* 0x225e */ unsigned char PrcbPad40[2];
  /* 0x2260 */ struct _KSOFTWARE_INTERRUPT_BATCH DeferredDispatchInterrupts;
  /* 0x2274 */ unsigned long PrcbPad41[10];
  /* 0x229c */ long Padding_22;
  /* 0x22a0 */ struct _KTIMER_TABLE TimerTable;
  /* 0x3af0 */ unsigned long PrcbPad92[12];
  /* 0x3b20 */ struct _KDPC CallDpc;
  /* 0x3b40 */ long ClockKeepAlive;
  /* 0x3b44 */ unsigned char PrcbPad6[4];
  /* 0x3b48 */ long DpcWatchdogPeriod;
  /* 0x3b4c */ long DpcWatchdogCount;
  /* 0x3b50 */ volatile long KeSpinLockOrdering;
  /* 0x3b54 */ unsigned long DpcWatchdogProfileCumulativeDpcThreshold;
  /* 0x3b58 */ unsigned long QueueIndex;
  /* 0x3b5c */ struct _SINGLE_LIST_ENTRY DeferredReadyListHead;
  /* 0x3b60 */ unsigned long ReadySummary;
  /* 0x3b64 */ long AffinitizedSelectionMask;
  /* 0x3b68 */ unsigned long WaitLock;
  /* 0x3b6c */ struct _LIST_ENTRY WaitListHead;
  /* 0x3b74 */ unsigned long ScbOffset;
  /* 0x3b78 */ unsigned long ReadyThreadCount;
  /* 0x3b7c */ long Padding_23;
  /* 0x3b80 */ unsigned __int64 StartCycles;
  /* 0x3b88 */ unsigned __int64 TaggedCyclesStart;
  /* 0x3b90 */ unsigned __int64 TaggedCycles[3];
  /* 0x3ba8 */ volatile unsigned __int64 CycleTime;
  /* 0x3bb0 */ unsigned __int64 AffinitizedCycles;
  /* 0x3bb8 */ unsigned __int64 CyclesByThreadType[2][5];
  /* 0x3c08 */ unsigned __int64 ReadyQueueExpectedRunTime;
  /* 0x3c10 */ volatile unsigned long HighCycleTime;
  /* 0x3c14 */ long Padding_24;
  /* 0x3c18 */ unsigned __int64 Cycles[2][4];
  /* 0x3c58 */ unsigned long PrcbPad71;
  /* 0x3c5c */ unsigned long DpcWatchdogSequenceNumber;
  /* 0x3c60 */ struct _LIST_ENTRY DispatcherReadyListHead[32];
  /* 0x3d60 */ void* ChainedInterruptList;
  /* 0x3d64 */ long LookasideIrpFloat;
  /* 0x3d68 */ struct _RTL_RB_TREE ScbQueue;
  /* 0x3d70 */ struct _LIST_ENTRY ScbList;
  /* 0x3d78 */ volatile long MmPageFaultCount;
  /* 0x3d7c */ volatile long MmCopyOnWriteCount;
  /* 0x3d80 */ volatile long MmTransitionCount;
  /* 0x3d84 */ volatile long MmCacheTransitionCount;
  /* 0x3d88 */ volatile long MmDemandZeroCount;
  /* 0x3d8c */ volatile long MmPageReadCount;
  /* 0x3d90 */ volatile long MmPageReadIoCount;
  /* 0x3d94 */ volatile long MmCacheReadCount;
  /* 0x3d98 */ volatile long MmCacheIoCount;
  /* 0x3d9c */ volatile long MmDirtyPagesWriteCount;
  /* 0x3da0 */ volatile long MmDirtyWriteIoCount;
  /* 0x3da4 */ volatile long MmMappedPagesWriteCount;
  /* 0x3da8 */ volatile long MmMappedWriteIoCount;
  /* 0x3dac */ volatile unsigned long CachedCommit;
  /* 0x3db0 */ volatile unsigned long CachedResidentAvailable;
  /* 0x3db4 */ void* HyperPte;
  /* 0x3db8 */ unsigned char PrcbPad8[4];
  /* 0x3dbc */ unsigned char VendorString[13];
  /* 0x3dc9 */ unsigned char InitialApicId;
  /* 0x3dca */ unsigned char LogicalProcessorsPerPhysicalProcessor;
  /* 0x3dcb */ unsigned char PrcbPad9[1];
  /* 0x3dcc */ long Padding_25;
  /* 0x3dd0 */ unsigned __int64 FeatureBits;
  /* 0x3dd8 */ union _LARGE_INTEGER UpdateSignature;
  /* 0x3de0 */ volatile unsigned __int64 IsrTime;
  /* 0x3de8 */ unsigned __int64 GenerationTarget;
  /* 0x3df0 */ struct _PROCESSOR_POWER_STATE PowerState;
  /* 0x3fa0 */ struct _KDPC ForceIdleDpc;
  /* 0x3fc0 */ unsigned __int64 PrcbPad96[7];
  /* 0x3ff8 */ unsigned __int64 MsrIa32TsxCtrl;
  /* 0x4000 */ unsigned long PrcbPad91[5];
  /* 0x4014 */ struct _KTHREAD* DpcDelegateThread;
  /* 0x4018 */ struct _RTL_HASH_TABLE* DpcRuntimeHistoryHashTable;
  /* 0x401c */ struct _KDPC* DpcRuntimeHistoryHashTableCleanupDpc;
  /* 0x4020 */ unsigned __int64 CurrentDpcRuntimeHistoryCached;
  /* 0x4028 */ unsigned __int64 CurrentDpcStartTime;
  /* 0x4030 */ void* CurrentDpcRoutine /* function */;
  /* 0x4034 */ unsigned long DpcWatchdogProfileSingleDpcThreshold;
  /* 0x4038 */ struct _KDPC DpcWatchdogDpc;
  /* 0x4058 */ struct _KTIMER DpcWatchdogTimer;
  /* 0x4080 */ union _SLIST_HEADER HypercallPageList;
  /* 0x4088 */ void* HypercallCachedPages;
  /* 0x408c */ void* VirtualApicAssist;
  /* 0x4090 */ unsigned __int64* StatisticsPage;
  /* 0x4094 */ struct _CACHE_DESCRIPTOR Cache[5];
  /* 0x40d0 */ unsigned long CacheCount;
  /* 0x40d4 */ struct _KAFFINITY_EX PackageProcessorSet;
  /* 0x40e0 */ unsigned long SharedReadyQueueMask;
  /* 0x40e4 */ struct _KSHARED_READY_QUEUE* SharedReadyQueue;
  /* 0x40e8 */ unsigned long SharedQueueScanOwner;
  /* 0x40ec */ unsigned long CoreProcessorSet;
  /* 0x40f0 */ unsigned long ScanSiblingMask;
  /* 0x40f4 */ unsigned long LLCMask;
  /* 0x40f8 */ unsigned long CacheProcessorMask[5];
  /* 0x410c */ unsigned long ScanSiblingIndex;
  /* 0x4110 */ void* WheaInfo;
  /* 0x4114 */ void* EtwSupport;
  /* 0x4118 */ union _SLIST_HEADER InterruptObjectPool;
  /* 0x4120 */ void** DpcWatchdogProfile;
  /* 0x4124 */ void** DpcWatchdogProfileCurrentEmptyCapture;
  /* 0x4128 */ unsigned long PackageId;
  /* 0x412c */ unsigned long PteBitCache;
  /* 0x4130 */ unsigned long PteBitOffset;
  /* 0x4134 */ unsigned long DieId;
  /* 0x4138 */ struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;
  /* 0x413c */ void* ProfileEventIndexAddress;
  /* 0x4140 */ struct _KDPC TimerExpirationDpc;
  /* 0x4160 */ struct _SYNCH_COUNTERS SynchCounters;
  /* 0x4218 */ struct _FILESYSTEM_DISK_COUNTERS FsCounters;
  /* 0x4228 */ struct _CONTEXT* Context;
  /* 0x422c */ unsigned long ContextFlagsInit;
  /* 0x4230 */ struct _XSAVE_AREA* ExtendedState;
  /* 0x4234 */ struct _KENTROPY_TIMING_STATE EntropyTimingState;
  /* 0x435c */ void* IsrStack;
  /* 0x4360 */ struct _KINTERRUPT* VectorToInterruptObject[208];
  /* 0x46a0 */ struct _SINGLE_LIST_ENTRY AbSelfIoBoostsList;
  /* 0x46a4 */ struct _SINGLE_LIST_ENTRY AbPropagateBoostsList;
  /* 0x46a8 */ struct _KDPC AbDpc;
  /* 0x46c8 */ struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerCurrent;
  /* 0x471c */ struct _IOP_IRP_STACK_PROFILER IoIrpStackProfilerPrevious;
  /* 0x4770 */ struct _KTIMER_EXPIRATION_TRACE TimerExpirationTrace[16];
  /* 0x4870 */ unsigned long TimerExpirationTraceCount;
  /* 0x4874 */ void* ExSaPageArray;
  /* 0x4878 */ struct _XSAVE_AREA_HEADER* ExtendedSupervisorState;
  /* 0x487c */ unsigned long PrcbPad100[9];
  /* 0x48a0 */ struct _KSHARED_READY_QUEUE LocalSharedReadyQueue;
  /* 0x49e0 */ struct _REQUEST_MAILBOX* Mailbox;
  /* 0x49e4 */ unsigned char PrcbPad[1276];
  /* 0x4ee0 */ unsigned long KernelDirectoryTableBase;
  /* 0x4ee4 */ unsigned long EspBaseShadow;
  /* 0x4ee8 */ unsigned long UserEspShadow;
  /* 0x4eec */ unsigned long ShadowFlags;
  /* 0x4ef0 */ unsigned long UserDS;
  /* 0x4ef4 */ unsigned long UserES;
  /* 0x4ef8 */ unsigned long UserFS;
  /* 0x4efc */ void* EspIretd;
  /* 0x4f00 */ unsigned long RestoreSegOption;
  /* 0x4f04 */ unsigned long SavedEsi;
  /* 0x4f08 */ unsigned short VerwSelector;
  /* 0x4f0a */ unsigned short PrcbShadowPad;
  /* 0x4f0c */ unsigned long TaskSwitchCount;
  /* 0x4f10 */ unsigned long DbgLogs[512];
  /* 0x5710 */ unsigned long DbgCount;
  /* 0x5714 */ struct _KAFFINITY_EX DieProcessorSet;
  /* 0x5720 */ unsigned char CoresPerPhysicalDie;
  /* 0x5721 */ char Padding_26[3];
  /* 0x5724 */ unsigned long PrcbPadRemainingPage[495];
  /* 0x5ee0 */ struct _REQUEST_MAILBOX RequestMailbox[1];
} KPRCB, *PKPRCB; /* size: 0x5f00 */

typedef struct _KPCR
{
  union
  {
    /* 0x0000 */ struct _NT_TIB NtTib;
    struct
    {
      /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Used_ExceptionList;
      /* 0x0004 */ void* Used_StackBase;
      /* 0x0008 */ unsigned long MxCsr;
      /* 0x000c */ void* TssCopy;
      /* 0x0010 */ unsigned long ContextSwitches;
      /* 0x0014 */ unsigned long SetMemberCopy;
      /* 0x0018 */ void* Used_Self;
    }; /* size: 0x001c */
  }; /* size: 0x001c */
  /* 0x001c */ struct _KPCR* SelfPcr;
  /* 0x0020 */ struct _KPRCB* Prcb;
  /* 0x0024 */ unsigned char Irql;
  /* 0x0025 */ char Padding_27[3];
  /* 0x0028 */ unsigned long IRR;
  /* 0x002c */ unsigned long IrrActive;
  /* 0x0030 */ unsigned long IDR;
  /* 0x0034 */ void* KdVersionBlock;
  /* 0x0038 */ struct _KIDTENTRY* IDT;
  /* 0x003c */ struct _KGDTENTRY* GDT;
  /* 0x0040 */ struct _KTSS* TSS;
  /* 0x0044 */ unsigned short MajorVersion;
  /* 0x0046 */ unsigned short MinorVersion;
  /* 0x0048 */ unsigned long SetMember;
  /* 0x004c */ unsigned long StallScaleFactor;
  /* 0x0050 */ unsigned char SpareUnused;
  /* 0x0051 */ unsigned char Number;
  /* 0x0052 */ unsigned char Spare0;
  /* 0x0053 */ unsigned char SecondLevelCacheAssociativity;
  /* 0x0054 */ unsigned long VdmAlert;
  /* 0x0058 */ unsigned long KernelReserved[14];
  /* 0x0090 */ unsigned long SecondLevelCacheSize;
  /* 0x0094 */ unsigned long HalReserved[16];
  /* 0x00d4 */ unsigned long InterruptMode;
  /* 0x00d8 */ unsigned char Spare1;
  /* 0x00d9 */ char Padding_28[3];
  /* 0x00dc */ unsigned long KernelReserved2[17];
  /* 0x0120 */ struct _KPRCB PrcbData;
} KPCR, *PKPCR; /* size: 0x6020 */

typedef enum _RTL_FEATURE_CONFIGURATION_TYPE
{
  RtlFeatureConfigurationBoot = 0,
  RtlFeatureConfigurationRuntime = 1,
  RtlFeatureConfigurationCount = 2,
} RTL_FEATURE_CONFIGURATION_TYPE, *PRTL_FEATURE_CONFIGURATION_TYPE;

enum wil_details_FeatureTestStateKind
{
  wil_details_FeatureTestStateKind_EnabledState = 0,
  wil_details_FeatureTestStateKind_Variant = 1,
};

typedef union _TIMELINE_BITMAP
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      /* 0x0000 */ unsigned long EndTime;
      /* 0x0004 */ unsigned long Bitmap;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} TIMELINE_BITMAP, *PTIMELINE_BITMAP; /* size: 0x0008 */

typedef struct _THREAD_ENERGY_VALUES
{
  /* 0x0000 */ unsigned __int64 Cycles[2][4];
  /* 0x0040 */ unsigned __int64 AttributedCycles[2][4];
  /* 0x0080 */ unsigned __int64 WorkOnBehalfCycles[2][4];
  /* 0x00c0 */ union _TIMELINE_BITMAP CpuTimeline;
} THREAD_ENERGY_VALUES, *PTHREAD_ENERGY_VALUES; /* size: 0x00c8 */

enum wil_UsageReportingMode
{
  wil_UsageReportingMode_Default = 0,
  wil_UsageReportingMode_SuppressPotential = 1,
  wil_UsageReportingMode_SuppressImplicit = 2,
};

typedef struct _MMPAGE_FILE_EXPANSION_FLAGS
{
  /* 0x0000 */ unsigned char PageFileNumber : 8; /* bit position: 0 */
  /* 0x0001 */ unsigned char Spare1 : 8; /* bit position: 0 */
  /* 0x0002 */ unsigned char Spare2 : 8; /* bit position: 0 */
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char IgnoreCurrentCommit : 1; /* bit position: 0 */
    /* 0x0003 */ unsigned char IncreaseMinimumSize : 1; /* bit position: 1 */
    /* 0x0003 */ unsigned char AttemptForCantExtend : 1; /* bit position: 2 */
    /* 0x0003 */ unsigned char UnusedSegmentDeletion : 1; /* bit position: 3 */
    /* 0x0003 */ unsigned char PageFileContract : 1; /* bit position: 4 */
    /* 0x0003 */ unsigned char NoWait : 1; /* bit position: 5 */
    /* 0x0003 */ unsigned char Spare3 : 2; /* bit position: 6 */
  }; /* bitfield */
} MMPAGE_FILE_EXPANSION_FLAGS, *PMMPAGE_FILE_EXPANSION_FLAGS; /* size: 0x0004 */

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef struct _EVENT_HEADER
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short HeaderType;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short EventProperty;
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _GUID ProviderId;
  /* 0x0028 */ struct _EVENT_DESCRIPTOR EventDescriptor;
  union
  {
    struct
    {
      /* 0x0038 */ unsigned long KernelTime;
      /* 0x003c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0038 */ unsigned __int64 ProcessorTime;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _GUID ActivityId;
} EVENT_HEADER, *PEVENT_HEADER; /* size: 0x0050 */

typedef struct _ETW_BUFFER_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char ProcessorNumber;
      /* 0x0001 */ unsigned char Alignment;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short ProcessorIndex;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short LoggerId;
} ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT; /* size: 0x0004 */

typedef struct _EVENT_RECORD
{
  /* 0x0000 */ struct _EVENT_HEADER EventHeader;
  /* 0x0050 */ struct _ETW_BUFFER_CONTEXT BufferContext;
  /* 0x0054 */ unsigned short ExtendedDataCount;
  /* 0x0056 */ unsigned short UserDataLength;
  /* 0x0058 */ struct _EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
  /* 0x005c */ void* UserData;
  /* 0x0060 */ void* UserContext;
  /* 0x0064 */ long __PADDING__[1];
} EVENT_RECORD, *PEVENT_RECORD; /* size: 0x0068 */

typedef enum _MI_PFN_CACHE_ATTRIBUTE
{
  MiNonCached = 0,
  MiCached = 1,
  MiWriteCombined = 2,
  MiNotMapped = 3,
} MI_PFN_CACHE_ATTRIBUTE, *PMI_PFN_CACHE_ATTRIBUTE;

typedef struct _LOADER_RESET_REASON
{
  /* 0x0000 */ unsigned char Supplied;
  /* 0x0001 */ char Padding_29[7];
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned char Pch;
        /* 0x0009 */ unsigned char EmbeddedController;
        /* 0x000a */ unsigned char Reserved[6];
      } /* size: 0x0008 */ Component;
      /* 0x0008 */ unsigned __int64 AsULONG64;
      /* 0x0008 */ unsigned char AsBytes[8];
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Basic;
  /* 0x0010 */ unsigned long AdditionalInfo[8];
} LOADER_RESET_REASON, *PLOADER_RESET_REASON; /* size: 0x0030 */

typedef struct _EVENT_DATA_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  union
  {
    /* 0x000c */ unsigned long Reserved;
    struct
    {
      /* 0x000c */ unsigned char Type;
      /* 0x000d */ unsigned char Reserved1;
      /* 0x000e */ unsigned short Reserved2;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR; /* size: 0x0010 */

typedef enum _MI_SYSTEM_VA_TYPE
{
  MiVaUnused = 0,
  MiVaSessionSpace = 1,
  MiVaProcessSpace = 2,
  MiVaBootLoaded = 3,
  MiVaPfnDatabase = 4,
  MiVaNonPagedPool = 5,
  MiVaPagedPool = 6,
  MiVaSpecialPoolPaged = 7,
  MiVaSystemCache = 8,
  MiVaSystemPtes = 9,
  MiVaHal = 10,
  MiVaSessionGlobalSpace = 11,
  MiVaDriverImages = 12,
  MiVaSystemPtesLarge = 13,
  MiVaKernelStacks = 14,
  MiVaSecureNonPagedPool = 15,
  MiVaMaximumType = 16,
} MI_SYSTEM_VA_TYPE, *PMI_SYSTEM_VA_TYPE;

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER
{
  /* 0x0000 */ unsigned short Validation;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ void* TrackedOffsetCallback /* function */;
} IO_IRP_EXT_TRACK_OFFSET_HEADER, *PIO_IRP_EXT_TRACK_OFFSET_HEADER; /* size: 0x0008 */

enum POWER_POLICY_DEVICE_TYPE
{
  PolicyDeviceSystemButton = 0,
  PolicyDeviceThermalZone = 1,
  PolicyDeviceBattery = 2,
  PolicyDeviceMemory = 3,
  PolicyInitiatePowerActionAPI = 4,
  PolicySetPowerStateAPI = 5,
  PolicyImmediateDozeS4 = 6,
  PolicySystemIdle = 7,
  PolicyDeviceWakeAlarm = 8,
  PolicyDeviceFan = 9,
  PolicyCsBatterySaver = 10,
  PolicyImmediateDozeS4Predicted = 11,
  PolicyImmediateDozeS4PredictedNoWake = 12,
  PolicyImmediateDozeS4AdaptiveBudget = 13,
  PolicyImmediateDozeS4AdaptiveReserveNoWake = 14,
  PolicySystemInitiatedShutdown = 15,
  PolicyDeviceMax = 16,
};

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ wchar_t* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0008 */

typedef struct _POP_POLICY_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x000c */ void* Notification;
  /* 0x0010 */ struct _UNICODE_STRING Name;
  /* 0x0018 */ struct _DEVICE_OBJECT* Device;
  /* 0x001c */ struct _IRP* Irp;
} POP_POLICY_DEVICE, *PPOP_POLICY_DEVICE; /* size: 0x0020 */

typedef struct _PROCESS_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 BytesRead;
  /* 0x0008 */ unsigned __int64 BytesWritten;
  /* 0x0010 */ unsigned __int64 ReadOperationCount;
  /* 0x0018 */ unsigned __int64 WriteOperationCount;
  /* 0x0020 */ unsigned __int64 FlushOperationCount;
} PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS; /* size: 0x0028 */

typedef enum _CM_LOAD_FAILURE_TYPE
{
  _None = 0,
  _CmpCreateHive = 1,
  _HvpBuildMap = 3,
  _HvpBuildMapForLoaderHive = 4,
  _HvpInitMap = 5,
  _HvLoadHive = 6,
  _HvpMapHiveImage = 7,
  _HvpRecoverData = 8,
  _CmpValidateHiveSecurityDescriptors = 9,
  _HvpEnlistBinInMap = 10,
  _CmCheckRegistry = 11,
  _CmRegistryIO = 12,
  _CmCheckRegistry2 = 13,
  _CmpCheckKey = 14,
  _CmpCheckValueList = 15,
  _HvCheckHive = 16,
  _HvCheckBin = 17,
  _HvpGetLogEntryDirtyVector = 18,
  _HvpReadLogEntryHeader = 19,
  _HvpReadLogEntry = 20,
  _CmpMountPreloadedHives = 21,
  _CmpLoadHiveThread = 22,
  _CmpCheckLeaf = 23,
  _HvHiveStartFileBacked = 24,
  _HvStartHiveMemoryBacked = 25,
  _HvpEnlistFreeCells = 26,
  _HvpPerformLogFileRecovery = 27,
  _CmpInitHiveFromFile = 28,
  _CmpLoadKeyCommon = 29,
  _CmpLinkHiveToMaster = 30,
  _CmLoadKey = 31,
  _CmLoadAppKey = 32,
  _CmpResolveHiveLoadConflict = 33,
} CM_LOAD_FAILURE_TYPE, *PCM_LOAD_FAILURE_TYPE;

typedef union _FILE_SEGMENT_ELEMENT
{
  union
  {
    /* 0x0000 */ void* Buffer;
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0008 */
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT; /* size: 0x0008 */

enum UoWActionType
{
  UoWAddThisKey = 0,
  UoWAddChildKey = 1,
  UoWDeleteThisKey = 2,
  UoWDeleteChildKey = 3,
  UoWSetValueNew = 4,
  UoWSetValueExisting = 5,
  UoWDeleteValue = 6,
  UoWSetKeyUserFlags = 7,
  UoWSetLastWriteTime = 8,
  UoWSetSecurityDescriptor = 9,
  UoWRenameSubKey = 10,
  UoWRenameOldSubKey = 11,
  UoWRenameNewSubKey = 12,
  UoWIsolation = 13,
  UoWInvalid = 14,
};

typedef struct _MI_NODE_NUMBER_ZERO_BASED
{
  /* 0x0000 */ unsigned long ZeroBased;
} MI_NODE_NUMBER_ZERO_BASED, *PMI_NODE_NUMBER_ZERO_BASED; /* size: 0x0004 */

typedef struct _PS_JOB_WAKE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NotificationChannel;
  /* 0x0008 */ unsigned __int64 WakeCounters[7];
  /* 0x0040 */ unsigned __int64 NoWakeCounter;
} PS_JOB_WAKE_INFORMATION, *PPS_JOB_WAKE_INFORMATION; /* size: 0x0048 */

struct _ACTIVATION_CONTEXT_DATA;

enum HSTORAGE_TYPE
{
  Stable = 0,
  Volatile = 1,
  InvalidStorage = 2,
};

typedef struct _MI_PARTITION_STORES
{
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0000 */ long FlushCompleting : 1; /* bit position: 0 */
        /* 0x0000 */ long FlushInProgress : 31; /* bit position: 1 */
      }; /* bitfield */
      /* 0x0000 */ volatile long Long;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ WriteAllStoreHintedPages;
  /* 0x0004 */ unsigned long VirtualPageFileNumber;
  /* 0x0008 */ unsigned long Registered;
  /* 0x000c */ unsigned long ReadClusterSizeMax;
  /* 0x0010 */ unsigned long EvictFlushRequestCount;
  /* 0x0014 */ unsigned long ModifiedWriteDisableCount;
  /* 0x0018 */ unsigned long WriteIssueFailures;
  /* 0x001c */ unsigned long WritesOutstanding;
  /* 0x0020 */ volatile long EvictFlushLock;
  /* 0x0024 */ struct _ETHREAD* EvictionThread;
  /* 0x0028 */ struct _KEVENT EvictEvent;
  /* 0x0038 */ union _SLIST_HEADER WriteSupportSListHead;
  /* 0x0040 */ struct _KEVENT EvictFlushCompleteEvent;
  /* 0x0050 */ struct _RTL_BITMAP* ModifiedWriteFailedBitmap;
  /* 0x0054 */ struct _EPROCESS* StoreProcess;
  /* 0x0058 */ unsigned long DeleteStoredPages;
  /* 0x005c */ long __PADDING__[1];
} MI_PARTITION_STORES, *PMI_PARTITION_STORES; /* size: 0x0060 */

typedef enum _CMP_FAILURE_INJECTION_POINT
{
  CmpFailurePointPoolAllocation = 0,
  CmpFailurePointFileWrite = 1,
  CmpFailurePointFileRead = 2,
  CmpFailurePointFlush = 3,
  CmpFailurePointFlushAndPurge = 4,
  CmpFailurePointForceLargeBin = 5,
  CmpFailurePointDontFixAlignment = 6,
  CmpFailurePointAllocateCell = 7,
  CmpFailurePointMarkDirty = 8,
  CmpFailurePointForceMultiLevelMap = 9,
  CmpFailurePointAllocateContiguousLogEntry = 10,
  CmpFailurePointAllocateKcb = 11,
  CmpFailurePointCreateKeyBody = 12,
  CmpFailurePointForceFreeKcb = 13,
  CmpFailurePointKcbLockUpgrade = 14,
  CmpFailurePointKcbLockUpgradeDelay = 15,
  CmpFailurePointKeyEnumResumeContextVerification = 16,
  CmpFailurePointKeyEnumForceRetry = 17,
  CmpFailurePointForceReorganization = 18,
  CmpFailurePointForceLazyCOWByPolicy = 19,
  CmpFailureInjectionPointCount = 20,
} CMP_FAILURE_INJECTION_POINT, *PCMP_FAILURE_INJECTION_POINT;

typedef struct _LOADER_FEATURE_CONFIGURATION_INFORMATION
{
  /* 0x0000 */ void* FeatureConfigurationBuffer;
  /* 0x0004 */ unsigned long FeatureConfigurationBufferSize;
  /* 0x0008 */ void* UsageSubscriptionBuffer;
  /* 0x000c */ unsigned long UsageSubscriptionBufferSize;
  /* 0x0010 */ void* DelayedUsageReportBuffer;
  /* 0x0014 */ unsigned long DelayedUsageReportBufferSize;
} LOADER_FEATURE_CONFIGURATION_INFORMATION, *PLOADER_FEATURE_CONFIGURATION_INFORMATION; /* size: 0x0018 */

typedef enum _PCW_CALLBACK_TYPE
{
  PcwCallbackAddCounter = 0,
  PcwCallbackRemoveCounter = 1,
  PcwCallbackEnumerateInstances = 2,
  PcwCallbackCollectData = 3,
} PCW_CALLBACK_TYPE, *PPCW_CALLBACK_TYPE;

typedef union _XPF_MCE_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long MCG_CapabilityRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long MCG_GlobalControlRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} XPF_MCE_FLAGS, *PXPF_MCE_FLAGS; /* size: 0x0004 */

typedef union _XPF_MC_BANK_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ClearOnInitializationRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ControlDataRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} XPF_MC_BANK_FLAGS, *PXPF_MC_BANK_FLAGS; /* size: 0x0001 */

typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR
{
  /* 0x0000 */ unsigned char BankNumber;
  /* 0x0001 */ unsigned char ClearOnInitialization;
  /* 0x0002 */ unsigned char StatusDataFormat;
  /* 0x0003 */ union _XPF_MC_BANK_FLAGS Flags;
  /* 0x0004 */ unsigned long ControlMsr;
  /* 0x0008 */ unsigned long StatusMsr;
  /* 0x000c */ unsigned long AddressMsr;
  /* 0x0010 */ unsigned long MiscMsr;
  /* 0x0014 */ unsigned __int64 ControlData;
} WHEA_XPF_MC_BANK_DESCRIPTOR, *PWHEA_XPF_MC_BANK_DESCRIPTOR; /* size: 0x001c */

typedef struct _WHEA_XPF_MCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ union _XPF_MCE_FLAGS Flags;
  /* 0x0008 */ unsigned __int64 MCG_Capability;
  /* 0x0010 */ unsigned __int64 MCG_GlobalControl;
  /* 0x0018 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_MCE_DESCRIPTOR, *PWHEA_XPF_MCE_DESCRIPTOR; /* size: 0x0398 */

typedef union _WHEA_NOTIFICATION_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short PollIntervalRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short SwitchToPollingThresholdRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short SwitchToPollingWindowRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short ErrorThresholdRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short ErrorThresholdWindowRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_NOTIFICATION_FLAGS, *PWHEA_NOTIFICATION_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_NOTIFICATION_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Length;
  /* 0x0002 */ union _WHEA_NOTIFICATION_FLAGS Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
      } /* size: 0x0004 */ Polled;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Interrupt;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ LocalInterrupt;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sci;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Nmi;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sea;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Sei;
      struct
      {
        /* 0x0004 */ unsigned long PollInterval;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned long SwitchToPollingThreshold;
        /* 0x0010 */ unsigned long SwitchToPollingWindow;
        /* 0x0014 */ unsigned long ErrorThreshold;
        /* 0x0018 */ unsigned long ErrorThresholdWindow;
      } /* size: 0x0018 */ Gsiv;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} WHEA_NOTIFICATION_DESCRIPTOR, *PWHEA_NOTIFICATION_DESCRIPTOR; /* size: 0x001c */

typedef struct _WHEA_XPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char NumberOfBanks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  /* 0x0024 */ struct _WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_CMC_DESCRIPTOR, *PWHEA_XPF_CMC_DESCRIPTOR; /* size: 0x03a4 */

typedef struct _WHEA_XPF_NMI_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
} WHEA_XPF_NMI_DESCRIPTOR, *PWHEA_XPF_NMI_DESCRIPTOR; /* size: 0x0003 */

typedef struct _WHEA_IPF_MCA_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_MCA_DESCRIPTOR, *PWHEA_IPF_MCA_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_IPF_CMC_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CMC_DESCRIPTOR, *PWHEA_IPF_CMC_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_IPF_CPE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
} WHEA_IPF_CPE_DESCRIPTOR, *PWHEA_IPF_CPE_DESCRIPTOR; /* size: 0x0004 */

typedef struct _WHEA_PCI_SLOT_NUMBER
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long DeviceNumber : 5; /* bit position: 0 */
          /* 0x0000 */ unsigned long FunctionNumber : 3; /* bit position: 5 */
          /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 8 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
} WHEA_PCI_SLOT_NUMBER, *PWHEA_PCI_SLOT_NUMBER; /* size: 0x0004 */

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short RootErrorCommandRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short Reserved : 11; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ROOTPORT_DESCRIPTOR_FLAGS, *PAER_ROOTPORT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long RootErrorCommand;
} WHEA_AER_ROOTPORT_DESCRIPTOR, *PWHEA_AER_ROOTPORT_DESCRIPTOR; /* size: 0x0024 */

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short Reserved : 12; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_ENDPOINT_DESCRIPTOR_FLAGS, *PAER_ENDPOINT_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
} WHEA_AER_ENDPOINT_DESCRIPTOR, *PWHEA_AER_ENDPOINT_DESCRIPTOR; /* size: 0x0020 */

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UncorrectableErrorMaskRW : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short UncorrectableErrorSeverityRW : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short CorrectableErrorMaskRW : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned short AdvancedCapsAndControlRW : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorMaskRW : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned short SecondaryUncorrectableErrorSevRW : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned short SecondaryCapsAndControlRW : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned short Reserved : 9; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} AER_BRIDGE_DESCRIPTOR_FLAGS, *PAER_BRIDGE_DESCRIPTOR_FLAGS; /* size: 0x0002 */

typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _WHEA_PCI_SLOT_NUMBER Slot;
  /* 0x000c */ unsigned short DeviceControl;
  /* 0x000e */ union _AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ unsigned long UncorrectableErrorMask;
  /* 0x0014 */ unsigned long UncorrectableErrorSeverity;
  /* 0x0018 */ unsigned long CorrectableErrorMask;
  /* 0x001c */ unsigned long AdvancedCapsAndControl;
  /* 0x0020 */ unsigned long SecondaryUncorrectableErrorMask;
  /* 0x0024 */ unsigned long SecondaryUncorrectableErrorSev;
  /* 0x0028 */ unsigned long SecondaryCapsAndControl;
} WHEA_AER_BRIDGE_DESCRIPTOR, *PWHEA_AER_BRIDGE_DESCRIPTOR; /* size: 0x002c */

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Reserved;
  /* 0x0003 */ unsigned char Enabled;
  /* 0x0004 */ unsigned long ErrStatusBlockLength;
  /* 0x0008 */ unsigned long RelatedErrorSourceId;
  /* 0x000c */ unsigned char ErrStatusAddressSpaceID;
  /* 0x000d */ unsigned char ErrStatusAddressBitWidth;
  /* 0x000e */ unsigned char ErrStatusAddressBitOffset;
  /* 0x000f */ unsigned char ErrStatusAddressAccessSize;
  /* 0x0010 */ union _LARGE_INTEGER ErrStatusAddress;
  /* 0x0018 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
} WHEA_GENERIC_ERROR_DESCRIPTOR, *PWHEA_GENERIC_ERROR_DESCRIPTOR; /* size: 0x0034 */

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Reserved;
  /* 0x0003 */ unsigned char Enabled;
  /* 0x0004 */ unsigned long ErrStatusBlockLength;
  /* 0x0008 */ unsigned long RelatedErrorSourceId;
  /* 0x000c */ unsigned char ErrStatusAddressSpaceID;
  /* 0x000d */ unsigned char ErrStatusAddressBitWidth;
  /* 0x000e */ unsigned char ErrStatusAddressBitOffset;
  /* 0x000f */ unsigned char ErrStatusAddressAccessSize;
  /* 0x0010 */ union _LARGE_INTEGER ErrStatusAddress;
  /* 0x0018 */ struct _WHEA_NOTIFICATION_DESCRIPTOR Notify;
  /* 0x0034 */ unsigned char ReadAckAddressSpaceID;
  /* 0x0035 */ unsigned char ReadAckAddressBitWidth;
  /* 0x0036 */ unsigned char ReadAckAddressBitOffset;
  /* 0x0037 */ unsigned char ReadAckAddressAccessSize;
  /* 0x0038 */ union _LARGE_INTEGER ReadAckAddress;
  /* 0x0040 */ unsigned __int64 ReadAckPreserveMask;
  /* 0x0048 */ unsigned __int64 ReadAckWriteMask;
} WHEA_GENERIC_ERROR_DESCRIPTOR_V2, *PWHEA_GENERIC_ERROR_DESCRIPTOR_V2; /* size: 0x0050 */

typedef struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD
{
  /* 0x0000 */ void* Initialize /* function */;
  /* 0x0004 */ void* Uninitialize /* function */;
  /* 0x0008 */ void* Correct /* function */;
} WHEA_ERROR_SOURCE_CONFIGURATION_DD, *PWHEA_ERROR_SOURCE_CONFIGURATION_DD; /* size: 0x000c */

typedef struct _WHEA_DEVICE_DRIVER_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned char Enabled;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ struct _GUID SourceGuid;
  /* 0x0014 */ unsigned short LogTag;
  /* 0x0016 */ unsigned short Reserved2;
  /* 0x0018 */ unsigned long PacketLength;
  /* 0x001c */ unsigned long PacketCount;
  /* 0x0020 */ unsigned char* PacketBuffer;
  /* 0x0024 */ struct _WHEA_ERROR_SOURCE_CONFIGURATION_DD Config;
  /* 0x0030 */ struct _GUID CreatorId;
  /* 0x0040 */ struct _GUID PartitionId;
  /* 0x0050 */ unsigned long MaxSectionDataLength;
  /* 0x0054 */ unsigned long MaxSectionsPerRecord;
  /* 0x0058 */ unsigned char* PacketStateBuffer;
  /* 0x005c */ long OpenHandles;
} WHEA_DEVICE_DRIVER_DESCRIPTOR, *PWHEA_DEVICE_DRIVER_DESCRIPTOR; /* size: 0x0060 */

enum PCW_REGISTRATION_FLAGS
{
  PcwRegistrationNone = 0,
  PcwRegistrationSiloNeutral = 1,
};

typedef struct _MM_PAGE_ACCESS_INFO_HEADER
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY Link;
  /* 0x0004 */ enum _MM_PAGE_ACCESS_TYPE Type;
  union
  {
    /* 0x0008 */ unsigned long EmptySequenceNumber;
    /* 0x0008 */ unsigned long CurrentFileIndex;
  }; /* size: 0x0004 */
  /* 0x000c */ long Padding_30;
  /* 0x0010 */ unsigned __int64 CreateTime;
  union
  {
    /* 0x0018 */ unsigned __int64 EmptyTime;
    /* 0x0018 */ struct _MM_PAGE_ACCESS_INFO* TempEntry;
  }; /* size: 0x0008 */
  union
  {
    struct
    {
      /* 0x0020 */ struct _MM_PAGE_ACCESS_INFO* PageEntry;
      /* 0x0024 */ unsigned long* FileEntry;
      /* 0x0028 */ unsigned long* FirstFileEntry;
      /* 0x002c */ struct _EPROCESS* Process;
      /* 0x0030 */ unsigned long SessionId;
    }; /* size: 0x0014 */
    struct
    {
      /* 0x0020 */ unsigned long* PageFrameEntry;
      /* 0x0024 */ unsigned long* LastPageFrameEntry;
      /* 0x0028 */ long __PADDING__[4];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
} MM_PAGE_ACCESS_INFO_HEADER, *PMM_PAGE_ACCESS_INFO_HEADER; /* size: 0x0038 */

typedef enum _KHETERO_CPU_POLICY
{
  KHeteroCpuPolicyAll = 0,
  KHeteroCpuPolicyLarge = 1,
  KHeteroCpuPolicyLargeOrIdle = 2,
  KHeteroCpuPolicySmall = 3,
  KHeteroCpuPolicySmallOrIdle = 4,
  KHeteroCpuPolicyDynamic = 5,
  KHeteroCpuPolicyStaticMax = 5,
  KHeteroCpuPolicyBiasedSmall = 6,
  KHeteroCpuPolicyBiasedLarge = 7,
  KHeteroCpuPolicyDefault = 8,
  KHeteroCpuPolicyMax = 9,
} KHETERO_CPU_POLICY, *PKHETERO_CPU_POLICY;

typedef enum _IPI_TYPE
{
  IpiAffinity = 0,
  IpiAllButSelf = 1,
  IpiAll = 2,
} IPI_TYPE, *PIPI_TYPE;

typedef enum _PNP_DEVNODE_STATE
{
  DeviceNodeUnspecified = 768,
  DeviceNodeUninitialized = 769,
  DeviceNodeInitialized = 770,
  DeviceNodeDriversAdded = 771,
  DeviceNodeResourcesAssigned = 772,
  DeviceNodeStartPending = 773,
  DeviceNodeStartCompletion = 774,
  DeviceNodeStartPostWork = 775,
  DeviceNodeStarted = 776,
  DeviceNodeQueryStopped = 777,
  DeviceNodeStopped = 778,
  DeviceNodeRestartCompletion = 779,
  DeviceNodeEnumeratePending = 780,
  DeviceNodeEnumerateCompletion = 781,
  DeviceNodeAwaitingQueuedDeletion = 782,
  DeviceNodeAwaitingQueuedRemoval = 783,
  DeviceNodeQueryRemoved = 784,
  DeviceNodeRemovePendingCloses = 785,
  DeviceNodeRemoved = 786,
  DeviceNodeDeletePendingCloses = 787,
  DeviceNodeDeleted = 788,
  MaxDeviceNodeState = 789,
} PNP_DEVNODE_STATE, *PPNP_DEVNODE_STATE;

typedef struct _EVENT_PAYLOAD_PREDICATE
{
  /* 0x0000 */ unsigned short FieldIndex;
  /* 0x0002 */ unsigned short CompareOp;
  /* 0x0004 */ long Padding_31;
  /* 0x0008 */ unsigned __int64 Value[2];
} EVENT_PAYLOAD_PREDICATE, *PEVENT_PAYLOAD_PREDICATE; /* size: 0x0018 */

typedef struct _AGGREGATED_PAYLOAD_FILTER
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short MagicValue : 12; /* bit position: 0 */
    /* 0x0000 */ unsigned short DescriptorVersion : 4; /* bit position: 12 */
  }; /* bitfield */
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short PredicateCount;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ unsigned __int64 HashedEventIdBitmap;
  /* 0x0010 */ struct _GUID ProviderGuid;
  /* 0x0020 */ unsigned short EachEventTableOffset;
  /* 0x0022 */ unsigned short EachEventTableLength;
  /* 0x0024 */ unsigned short PayloadDecoderTableOffset;
  /* 0x0026 */ unsigned short PayloadDecoderTableLength;
  /* 0x0028 */ unsigned short EventFilterTableOffset;
  /* 0x002a */ unsigned short EventFilterTableLength;
  /* 0x002c */ unsigned short UNICODEStringTableOffset;
  /* 0x002e */ unsigned short UNICODEStringTableLength;
  /* 0x0030 */ unsigned short ANSIStringTableOffset;
  /* 0x0032 */ unsigned short ANSIStringTableLength;
  /* 0x0034 */ long Padding_32;
  /* 0x0038 */ struct _EVENT_PAYLOAD_PREDICATE PredicateTable[1];
} AGGREGATED_PAYLOAD_FILTER, *PAGGREGATED_PAYLOAD_FILTER; /* size: 0x0050 */

typedef struct _M128A
{
  /* 0x0000 */ unsigned __int64 Low;
  /* 0x0008 */ __int64 High;
} M128A, *PM128A; /* size: 0x0010 */

enum PROFILE_STATUS
{
  DOCK_NOTDOCKDEVICE = 0,
  DOCK_QUIESCENT = 1,
  DOCK_ARRIVING = 2,
  DOCK_DEPARTING = 3,
  DOCK_EJECTIRP_COMPLETED = 4,
};

typedef struct _MIPFNBLINK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Blink : 23; /* bit position: 0 */
      /* 0x0000 */ unsigned long TbFlushStamp : 3; /* bit position: 23 */
      /* 0x0000 */ unsigned long PageBlinkDeleteBit : 1; /* bit position: 26 */
      /* 0x0000 */ unsigned long PageBlinkLockBit : 1; /* bit position: 27 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ShareCount : 30; /* bit position: 0 */
      /* 0x0000 */ unsigned long PageShareCountDeleteBit : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long PageShareCountLockBit : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long EntireField;
    /* 0x0000 */ volatile long Lock;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long LockNotUsed : 30; /* bit position: 0 */
      /* 0x0000 */ unsigned long DeleteBit : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long LockBit : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} MIPFNBLINK, *PMIPFNBLINK; /* size: 0x0004 */

typedef enum _ARBITER_REQUEST_SOURCE
{
  ArbiterRequestUndefined = -1,
  ArbiterRequestLegacyReported = 0,
  ArbiterRequestHalReported = 1,
  ArbiterRequestLegacyAssigned = 2,
  ArbiterRequestPnpDetected = 3,
  ArbiterRequestPnpEnumerated = 4,
} ARBITER_REQUEST_SOURCE, *PARBITER_REQUEST_SOURCE;

typedef enum _POWER_REQUEST_TYPE
{
  PowerRequestDisplayRequired = 0,
  PowerRequestSystemRequired = 1,
  PowerRequestAwayModeRequired = 2,
  PowerRequestExecutionRequired = 3,
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;

typedef enum _POWER_REQUEST_TYPE_INTERNAL
{
  PowerRequestDisplayRequiredInternal = 0,
  PowerRequestSystemRequiredInternal = 1,
  PowerRequestAwayModeRequiredInternal = 2,
  PowerRequestExecutionRequiredInternal = 3,
  PowerRequestPerfBoostRequiredInternal = 4,
  PowerRequestActiveLockScreenInternal = 5,
  PowerRequestInternalInvalid = 6,
} POWER_REQUEST_TYPE_INTERNAL, *PPOWER_REQUEST_TYPE_INTERNAL;

typedef struct _KSCHEDULING_GROUP_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ unsigned short Weight;
    struct
    {
      /* 0x0000 */ unsigned short MinRate;
      /* 0x0002 */ unsigned short MaxRate;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned long AllFlags;
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long Type : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long Disabled : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long RankBias : 1; /* bit position: 2 */
      /* 0x0004 */ unsigned long Spare1 : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KSCHEDULING_GROUP_POLICY, *PKSCHEDULING_GROUP_POLICY; /* size: 0x0008 */

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE* Left;
      /* 0x0004 */ struct _RTL_BALANCED_NODE* Right;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0008 */ unsigned char Red : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned char Balance : 2; /* bit position: 0 */
    /* 0x0008 */ unsigned long ParentValue;
  }; /* size: 0x0004 */
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; /* size: 0x000c */

typedef struct _KSCB
{
  /* 0x0000 */ unsigned __int64 GenerationCycles;
  /* 0x0008 */ unsigned __int64 MinQuotaCycleTarget;
  /* 0x0010 */ unsigned __int64 MaxQuotaCycleTarget;
  /* 0x0018 */ unsigned __int64 RankCycleTarget;
  /* 0x0020 */ unsigned __int64 LongTermCycles;
  /* 0x0028 */ unsigned __int64 LastReportedCycles;
  /* 0x0030 */ volatile unsigned __int64 OverQuotaHistory;
  /* 0x0038 */ unsigned __int64 ReadyTime;
  /* 0x0040 */ unsigned __int64 InsertTime;
  /* 0x0048 */ struct _LIST_ENTRY PerProcessorList;
  /* 0x0050 */ struct _RTL_BALANCED_NODE QueueNode;
  struct /* bitfield */
  {
    /* 0x005c */ unsigned char Inserted : 1; /* bit position: 0 */
    /* 0x005c */ unsigned char MaxOverQuota : 1; /* bit position: 1 */
    /* 0x005c */ unsigned char MinOverQuota : 1; /* bit position: 2 */
    /* 0x005c */ unsigned char RankBias : 1; /* bit position: 3 */
    /* 0x005c */ unsigned char SoftCap : 1; /* bit position: 4 */
    /* 0x005c */ unsigned char ShareRankOwner : 1; /* bit position: 5 */
    /* 0x005c */ unsigned char Spare1 : 2; /* bit position: 6 */
  }; /* bitfield */
  /* 0x005d */ unsigned char Depth;
  /* 0x005e */ unsigned short ReadySummary;
  /* 0x0060 */ unsigned long Rank;
  /* 0x0064 */ volatile unsigned long* ShareRank;
  /* 0x0068 */ volatile unsigned long OwnerShareRank;
  /* 0x006c */ struct _LIST_ENTRY ReadyListHead[16];
  /* 0x00ec */ struct _RTL_RB_TREE ChildScbQueue;
  /* 0x00f4 */ struct _KSCB* Parent;
  /* 0x00f8 */ struct _KSCB* Root;
  /* 0x00fc */ long __PADDING__[1];
} KSCB, *PKSCB; /* size: 0x0100 */

typedef struct _KSCHEDULING_GROUP
{
  /* 0x0000 */ struct _KSCHEDULING_GROUP_POLICY Policy;
  /* 0x0008 */ unsigned long RelativeWeight;
  /* 0x000c */ unsigned long ChildMinRate;
  /* 0x0010 */ unsigned long ChildMinWeight;
  /* 0x0014 */ unsigned long ChildTotalWeight;
  /* 0x0018 */ unsigned __int64 QueryHistoryTimeStamp;
  /* 0x0020 */ __int64 NotificationCycles;
  /* 0x0028 */ __int64 MaxQuotaLimitCycles;
  /* 0x0030 */ volatile __int64 MaxQuotaCyclesRemaining;
  union
  {
    /* 0x0038 */ struct _LIST_ENTRY SchedulingGroupList;
    /* 0x0038 */ struct _LIST_ENTRY Sibling;
  }; /* size: 0x0008 */
  /* 0x0040 */ struct _KDPC* NotificationDpc;
  /* 0x0044 */ struct _LIST_ENTRY ChildList;
  /* 0x004c */ struct _KSCHEDULING_GROUP* Parent;
  /* 0x0050 */ long Padding_33[12];
  /* 0x0080 */ struct _KSCB PerProcessor[1];
} KSCHEDULING_GROUP, *PKSCHEDULING_GROUP; /* size: 0x0180 */

typedef struct _WNF_STATE_NAME_REGISTRATION
{
  /* 0x0000 */ unsigned long MaxStateSize;
  /* 0x0004 */ const struct _WNF_TYPE_ID* TypeId;
  /* 0x0008 */ struct _SECURITY_DESCRIPTOR* SecurityDescriptor;
} WNF_STATE_NAME_REGISTRATION, *PWNF_STATE_NAME_REGISTRATION; /* size: 0x000c */

typedef enum _PNP_REBALANCE_REASON
{
  RebalanceReasonUnknown = 0,
  RebalanceReasonRequirementsChanged = 1,
  RebalanceReasonNewDevice = 2,
} PNP_REBALANCE_REASON, *PPNP_REBALANCE_REASON;

typedef enum _PNP_REBALANCE_FAILURE
{
  RebalanceFailureNone = 0,
  RebalanceFailureDisabled = 1,
  RebalanceFailureNoMemory = 2,
  RebalanceFailureQueryStopUnexpectedVeto = 3,
  RebalanceFailureNoRequirements = 4,
  RebalanceFailureNoCandidates = 5,
  RebalanceFailureNoConfiguration = 6,
} PNP_REBALANCE_FAILURE, *PPNP_REBALANCE_FAILURE;

typedef enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON
{
  DeviceQueryRebalanceSucceeded = 0,
  DeviceQueryStopFailed = 1,
  DeviceFailedGetNewResourceRequirement = 2,
  DeviceInUnexpectedState = 3,
  DeviceNotSupportQueryRebalance = 4,
} PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON, *PPNP_DEVNODE_QUERY_REBALANCE_VETO_REASON;

typedef struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned char ResourceType;
  /* 0x0001 */ char Padding_34[3];
  /* 0x0004 */ unsigned long AlternativeCount;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR* ResourceRequests;
  /* 0x000c */ void* ArbiterInstance;
} PNP_RESOURCE_CONFLICT_TRACE_CONTEXT, *PPNP_RESOURCE_CONFLICT_TRACE_CONTEXT; /* size: 0x0010 */

typedef struct _PNP_REBALANCE_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned long DeviceCount;
  /* 0x0004 */ unsigned long RebalancePhase;
  /* 0x0008 */ enum _PNP_REBALANCE_REASON Reason[2];
  /* 0x0010 */ enum _PNP_REBALANCE_FAILURE Failure[2];
  /* 0x0018 */ struct _DEVICE_NODE* SubtreeRoot;
  /* 0x001c */ unsigned char SubtreeIncludesRoot;
  /* 0x001d */ char Padding_35[3];
  /* 0x0020 */ struct _DEVICE_NODE* TriggerRoot;
  /* 0x0024 */ unsigned char RebalanceDueToDynamicPartitioning;
  /* 0x0025 */ char Padding_36[3];
  /* 0x0028 */ unsigned __int64 BeginTime;
  /* 0x0030 */ struct _DEVICE_NODE* VetoNode[2];
  /* 0x0038 */ enum _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON VetoQueryRebalanceReason[2];
  /* 0x0040 */ struct _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext;
} PNP_REBALANCE_TRACE_CONTEXT, *PPNP_REBALANCE_TRACE_CONTEXT; /* size: 0x0050 */

typedef enum _PEP_ACPI_RESOURCE_TYPE
{
  PepAcpiMemory = 0,
  PepAcpiIoPort = 1,
  PepAcpiInterrupt = 2,
  PepAcpiGpioIo = 3,
  PepAcpiGpioInt = 4,
  PepAcpiSpbI2c = 5,
  PepAcpiSpbSpi = 6,
  PepAcpiSpbUart = 7,
  PepAcpiExtendedMemory = 8,
  PepAcpiExtendedIo = 9,
} PEP_ACPI_RESOURCE_TYPE, *PPEP_ACPI_RESOURCE_TYPE;

typedef enum _KINTERRUPT_MODE
{
  LevelSensitive = 0,
  Latched = 1,
} KINTERRUPT_MODE, *PKINTERRUPT_MODE;

struct _EX_TIMER;

typedef enum _KINTERRUPT_POLARITY
{
  InterruptPolarityUnknown = 0,
  InterruptActiveHigh = 1,
  InterruptRisingEdge = 1,
  InterruptActiveLow = 2,
  InterruptFallingEdge = 2,
  InterruptActiveBoth = 3,
  InterruptActiveBothTriggerLow = 3,
  InterruptActiveBothTriggerHigh = 4,
} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;

typedef enum _GPIO_PIN_CONFIG_TYPE
{
  PullDefault = 0,
  PullUp = 1,
  PullDown = 2,
  PullNone = 3,
} GPIO_PIN_CONFIG_TYPE, *PGPIO_PIN_CONFIG_TYPE;

typedef struct _KDEVICE_QUEUE
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _LIST_ENTRY DeviceListHead;
  /* 0x000c */ unsigned long Lock;
  /* 0x0010 */ unsigned char Busy;
  /* 0x0011 */ char __PADDING__[3];
} KDEVICE_QUEUE, *PKDEVICE_QUEUE; /* size: 0x0014 */

struct _ETW_SOFT_RESTART_CONTEXT;

typedef enum _GPIO_PIN_IORESTRICTION_TYPE
{
  IoRestrictionNone = 0,
  IoRestrictionInputOnly = 1,
  IoRestrictionOutputOnly = 2,
  IoRestrictionNoneAndPreserve = 3,
} GPIO_PIN_IORESTRICTION_TYPE, *PGPIO_PIN_IORESTRICTION_TYPE;

typedef struct _MMVAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
    /* 0x0000 */ unsigned long PreferredNode : 6; /* bit position: 12 */
    /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 18 */
    /* 0x0000 */ unsigned long PrivateMemory : 1; /* bit position: 20 */
  }; /* bitfield */
} MMVAD_FLAGS, *PMMVAD_FLAGS; /* size: 0x0004 */

typedef struct _MM_PRIVATE_VAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
    /* 0x0000 */ unsigned long PreferredNode : 6; /* bit position: 12 */
    /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 18 */
    /* 0x0000 */ unsigned long PrivateMemoryAlwaysSet : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long WriteWatch : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long FixedLargePageSize : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long ZeroFillPagesOptional : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long Graphics : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long Enclave : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long ShadowStack : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long PhysicalMemoryPfnsReferenced : 1; /* bit position: 27 */
  }; /* bitfield */
} MM_PRIVATE_VAD_FLAGS, *PMM_PRIVATE_VAD_FLAGS; /* size: 0x0004 */

typedef struct _MM_GRAPHICS_VAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
    /* 0x0000 */ unsigned long PreferredNode : 6; /* bit position: 12 */
    /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 18 */
    /* 0x0000 */ unsigned long PrivateMemoryAlwaysSet : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long WriteWatch : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long FixedLargePageSize : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long ZeroFillPagesOptional : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long GraphicsAlwaysSet : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long GraphicsUseCoherentBus : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long GraphicsNoCache : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long GraphicsPageProtection : 3; /* bit position: 27 */
  }; /* bitfield */
} MM_GRAPHICS_VAD_FLAGS, *PMM_GRAPHICS_VAD_FLAGS; /* size: 0x0004 */

typedef struct _MM_SHARED_VAD_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Lock : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LockContended : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long DeleteInProgress : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoChange : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VadType : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned long Protection : 5; /* bit position: 7 */
    /* 0x0000 */ unsigned long PreferredNode : 6; /* bit position: 12 */
    /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 18 */
    /* 0x0000 */ unsigned long PrivateMemoryAlwaysClear : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long PrivateFixup : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long HotPatchAllowed : 1; /* bit position: 22 */
  }; /* bitfield */
} MM_SHARED_VAD_FLAGS, *PMM_SHARED_VAD_FLAGS; /* size: 0x0004 */

typedef struct _MMVAD_FLAGS1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long CommitCharge : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long MemCommit : 1; /* bit position: 31 */
  }; /* bitfield */
} MMVAD_FLAGS1, *PMMVAD_FLAGS1; /* size: 0x0004 */

typedef struct _MMVAD_SHORT
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _MMVAD_SHORT* NextVad;
      /* 0x0004 */ void* ExtraCreateInfo;
    }; /* size: 0x0008 */
    /* 0x0000 */ struct _RTL_BALANCED_NODE VadNode;
  }; /* size: 0x000c */
  /* 0x000c */ unsigned long StartingVpn;
  /* 0x0010 */ unsigned long EndingVpn;
  /* 0x0014 */ long ReferenceCount;
  /* 0x0018 */ struct _EX_PUSH_LOCK PushLock;
  union
  {
    union
    {
      /* 0x001c */ unsigned long LongFlags;
      /* 0x001c */ struct _MMVAD_FLAGS VadFlags;
      /* 0x001c */ struct _MM_PRIVATE_VAD_FLAGS PrivateVadFlags;
      /* 0x001c */ struct _MM_GRAPHICS_VAD_FLAGS GraphicsVadFlags;
      /* 0x001c */ struct _MM_SHARED_VAD_FLAGS SharedVadFlags;
      /* 0x001c */ volatile unsigned long VolatileVadLong;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  union
  {
    union
    {
      /* 0x0020 */ unsigned long LongFlags1;
      /* 0x0020 */ struct _MMVAD_FLAGS1 VadFlags1;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0024 */ struct _MI_VAD_EVENT_BLOCK* EventList;
} MMVAD_SHORT, *PMMVAD_SHORT; /* size: 0x0028 */

enum SYSTEM_POWER_CONDITION
{
  PoAc = 0,
  PoDc = 1,
  PoHot = 2,
  PoConditionMaximum = 3,
};

typedef enum _SERVERSILO_STATE
{
  SERVERSILO_INITING = 0,
  SERVERSILO_STARTED = 1,
  SERVERSILO_SHUTTING_DOWN = 2,
  SERVERSILO_TERMINATING = 3,
  SERVERSILO_TERMINATED = 4,
} SERVERSILO_STATE, *PSERVERSILO_STATE;

typedef enum _OPENCOUNT_REASON
{
  OpenCount_SkipLogging = 0,
  OpenCount_AsyncRead = 1,
  OpenCount_FlushCache = 2,
  OpenCount_GetDirtyPage = 3,
  OpenCount_GetFlushedVDL = 4,
  OpenCount_InitCachemap1 = 5,
  OpenCount_InitCachemap2 = 6,
  OpenCount_InitCachemap3 = 7,
  OpenCount_InitCachemap4 = 8,
  OpenCount_InitCachemap5 = 9,
  OpenCount_MdlWrite = 10,
  OpenCount_MdlWriteAbort = 11,
  OpenCount_NotifyMappedWrite = 12,
  OpenCount_NotifyMappedWriteCompCallback = 13,
  OpenCount_PurgeCache = 14,
  OpenCount_PurgeCacheActiveViews = 15,
  OpenCount_ReadAhead = 16,
  OpenCount_SetFileSize = 17,
  OpenCount_SetFileSizeSection = 18,
  OpenCount_UninitCachemapReadAhead = 19,
  OpenCount_UninitCachemapReg = 20,
  OpenCount_UnmapInactiveViews = 21,
  OpenCount_UnmapInactiveViews1 = 22,
  OpenCount_UnmapInactiveViews2 = 23,
  OpenCount_UnmapInactiveViews3 = 24,
  OpenCount_WriteBehind = 25,
  OpenCount_WriteBehindComplete = 26,
  OpenCount_WriteBehindFailAcquire = 27,
  OpenCount_TelemetryRef = 28,
} OPENCOUNT_REASON, *POPENCOUNT_REASON;

typedef enum _POP_DEVICE_IDLE_TYPE
{
  DeviceIdleNormal = 0,
  DeviceIdleDisk = 1,
} POP_DEVICE_IDLE_TYPE, *PPOP_DEVICE_IDLE_TYPE;

typedef struct _DEVICE_OBJECT_POWER_EXTENSION
{
  /* 0x0000 */ volatile unsigned long IdleCount;
  /* 0x0004 */ volatile unsigned long BusyCount;
  /* 0x0008 */ volatile unsigned long BusyReference;
  /* 0x000c */ unsigned long TotalBusyCount;
  /* 0x0010 */ unsigned long ConservationIdleTime;
  /* 0x0014 */ unsigned long PerformanceIdleTime;
  /* 0x0018 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x001c */ struct _LIST_ENTRY IdleList;
  /* 0x0024 */ enum _POP_DEVICE_IDLE_TYPE IdleType;
  /* 0x0028 */ enum _DEVICE_POWER_STATE IdleState;
  /* 0x002c */ enum _DEVICE_POWER_STATE CurrentState;
  /* 0x0030 */ struct _POP_COOLING_EXTENSION* CoolingExtension;
  /* 0x0034 */ struct _LIST_ENTRY Volume;
  union
  {
    struct
    {
      /* 0x003c */ unsigned long IdleTime;
      /* 0x0040 */ unsigned long NonIdleTime;
    } /* size: 0x0008 */ Disk;
  } /* size: 0x0008 */ Specific;
} DEVICE_OBJECT_POWER_EXTENSION, *PDEVICE_OBJECT_POWER_EXTENSION; /* size: 0x0044 */

struct _DEVICE_NODE_IOMMU_EXTENSION;

enum RTLP_CSPARSE_BITMAP_STATE
{
  CommitBitmapInvalid = 0,
  UserBitmapInvalid = 1,
  UserBitmapValid = 2,
};

typedef enum _RTLP_HP_ADDRESS_SPACE_TYPE
{
  HeapAddressUser = 0,
  HeapAddressKernel = 1,
  HeapAddressSession = 2,
  HeapAddressSecure = 3,
  HeapAddressTypeMax = 4,
} RTLP_HP_ADDRESS_SPACE_TYPE, *PRTLP_HP_ADDRESS_SPACE_TYPE;

typedef struct _EPARTITION
{
  /* 0x0000 */ void* MmPartition;
  /* 0x0004 */ void* CcPartition;
  /* 0x0008 */ void* ExPartition;
  /* 0x000c */ long HardReferenceCount;
  /* 0x0010 */ long OpenHandleCount;
  /* 0x0014 */ struct _LIST_ENTRY ActivePartitionLinks;
  /* 0x001c */ struct _EPARTITION* ParentPartition;
  /* 0x0020 */ struct _WORK_QUEUE_ITEM TeardownWorkItem;
  /* 0x0030 */ struct _EX_PUSH_LOCK TeardownLock;
  /* 0x0034 */ struct _EPROCESS* SystemProcess;
  /* 0x0038 */ void* SystemProcessHandle;
  union
  {
    /* 0x003c */ unsigned long PartitionFlags;
    /* 0x003c */ unsigned long PairedWithJob : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
} EPARTITION, *PEPARTITION; /* size: 0x0040 */

typedef enum _RTLP_HP_LOCK_TYPE
{
  HeapLockPaged = 0,
  HeapLockNonPaged = 1,
  HeapLockTypeMax = 2,
} RTLP_HP_LOCK_TYPE, *PRTLP_HP_LOCK_TYPE;

typedef struct _FILE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ struct _VPB* Vpb;
  /* 0x000c */ void* FsContext;
  /* 0x0010 */ void* FsContext2;
  /* 0x0014 */ struct _SECTION_OBJECT_POINTERS* SectionObjectPointer;
  /* 0x0018 */ void* PrivateCacheMap;
  /* 0x001c */ long FinalStatus;
  /* 0x0020 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0024 */ unsigned char LockOperation;
  /* 0x0025 */ unsigned char DeletePending;
  /* 0x0026 */ unsigned char ReadAccess;
  /* 0x0027 */ unsigned char WriteAccess;
  /* 0x0028 */ unsigned char DeleteAccess;
  /* 0x0029 */ unsigned char SharedRead;
  /* 0x002a */ unsigned char SharedWrite;
  /* 0x002b */ unsigned char SharedDelete;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ struct _UNICODE_STRING FileName;
  /* 0x0038 */ union _LARGE_INTEGER CurrentByteOffset;
  /* 0x0040 */ unsigned long Waiters;
  /* 0x0044 */ unsigned long Busy;
  /* 0x0048 */ void* LastLock;
  /* 0x004c */ struct _KEVENT Lock;
  /* 0x005c */ struct _KEVENT Event;
  /* 0x006c */ struct _IO_COMPLETION_CONTEXT* CompletionContext;
  /* 0x0070 */ unsigned long IrpListLock;
  /* 0x0074 */ struct _LIST_ENTRY IrpList;
  /* 0x007c */ void* FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT; /* size: 0x0080 */

typedef union _KE_PROCESS_CONCURRENCY_COUNT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Fraction : 20; /* bit position: 0 */
      /* 0x0000 */ unsigned long Count : 12; /* bit position: 20 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AllFields;
  }; /* size: 0x0004 */
} KE_PROCESS_CONCURRENCY_COUNT, *PKE_PROCESS_CONCURRENCY_COUNT; /* size: 0x0004 */

typedef struct _KE_IDEAL_PROCESSOR_SET_BREAKPOINTS
{
  /* 0x0000 */ union _KE_PROCESS_CONCURRENCY_COUNT Low;
  /* 0x0004 */ union _KE_PROCESS_CONCURRENCY_COUNT High;
} KE_IDEAL_PROCESSOR_SET_BREAKPOINTS, *PKE_IDEAL_PROCESSOR_SET_BREAKPOINTS; /* size: 0x0008 */

typedef struct _KE_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK
{
  /* 0x0000 */ union _KE_PROCESS_CONCURRENCY_COUNT ExpectedConcurrencyCount;
  /* 0x0004 */ struct _KE_IDEAL_PROCESSOR_SET_BREAKPOINTS Breakpoints;
  union
  {
    union
    {
      /* 0x000c */ unsigned long ConcurrencyCountFixed : 1; /* bit position: 0 */
      /* 0x000c */ unsigned long AllFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ AssignmentFlags;
  /* 0x0010 */ struct _KAFFINITY_EX IdealProcessorSets;
} KE_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK, *PKE_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK; /* size: 0x001c */

typedef enum _HEAP_LFH_LOCKMODE
{
  HeapLockNotHeld = 0,
  HeapLockShared = 1,
  HeapLockExclusive = 2,
} HEAP_LFH_LOCKMODE, *PHEAP_LFH_LOCKMODE;

typedef struct _ETW_HASH_BUCKET
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead[3];
  /* 0x0018 */ struct _EX_PUSH_LOCK BucketLock;
} ETW_HASH_BUCKET, *PETW_HASH_BUCKET; /* size: 0x001c */

typedef enum _HEAP_SEG_RANGE_TYPE
{
  HeapSegRangeUser = 0,
  HeapSegRangeInternal = 1,
  HeapSegRangeLFH = 2,
  HeapSegRangeVS = 3,
  HeapSegRangeTypeMax = 3,
} HEAP_SEG_RANGE_TYPE, *PHEAP_SEG_RANGE_TYPE;

typedef enum _RTLP_HP_ALLOCATOR
{
  RtlpHpSegmentSm = 0,
  RtlpHpSegmentLg = 1,
  RtlpHpSegmentTypes = 2,
  RtlpHpHugeAllocator = 2,
  RtlpHpAllocatorMax = 3,
} RTLP_HP_ALLOCATOR, *PRTLP_HP_ALLOCATOR;

typedef enum _HEAP_FAILURE_TYPE
{
  heap_failure_internal = 0,
  heap_failure_unknown = 1,
  heap_failure_generic = 2,
  heap_failure_entry_corruption = 3,
  heap_failure_multiple_entries_corruption = 4,
  heap_failure_virtual_block_corruption = 5,
  heap_failure_buffer_overrun = 6,
  heap_failure_buffer_underrun = 7,
  heap_failure_block_not_busy = 8,
  heap_failure_invalid_argument = 9,
  heap_failure_invalid_allocation_type = 10,
  heap_failure_usage_after_free = 11,
  heap_failure_cross_heap_operation = 12,
  heap_failure_freelists_corruption = 13,
  heap_failure_listentry_corruption = 14,
  heap_failure_lfh_bitmap_mismatch = 15,
  heap_failure_segment_lfh_bitmap_corruption = 16,
  heap_failure_segment_lfh_double_free = 17,
  heap_failure_vs_subsegment_corruption = 18,
  heap_failure_null_heap = 19,
  heap_failure_allocation_limit = 20,
  heap_failure_commit_limit = 21,
  heap_failure_invalid_va_mgr_query = 22,
} HEAP_FAILURE_TYPE, *PHEAP_FAILURE_TYPE;

typedef enum _BLOB_ID
{
  BLOB_TYPE_UNKNOWN = 0,
  BLOB_TYPE_CONNECTION_INFO = 1,
  BLOB_TYPE_MESSAGE = 2,
  BLOB_TYPE_SECURITY_CONTEXT = 3,
  BLOB_TYPE_SECTION = 4,
  BLOB_TYPE_REGION = 5,
  BLOB_TYPE_VIEW = 6,
  BLOB_TYPE_RESERVE = 7,
  BLOB_TYPE_DIRECT_TRANSFER = 8,
  BLOB_TYPE_HANDLE_DATA = 9,
  BLOB_TYPE_MAX_ID = 10,
} BLOB_ID, *PBLOB_ID;

typedef struct _STACK_TABLE
{
  /* 0x0000 */ unsigned short NumStackTraces;
  /* 0x0002 */ unsigned short TraceCapacity;
  /* 0x0004 */ struct _OBJECT_REF_TRACE* StackTrace[16];
  /* 0x0044 */ unsigned short StackTableHash[16381];
  /* 0x803e */ char __PADDING__[2];
} STACK_TABLE, *PSTACK_TABLE; /* size: 0x8040 */

typedef struct _POP_FX_WORK_POOL_ITEM
{
  /* 0x0000 */ struct _POP_FX_WORK_POOL* WorkPool;
  /* 0x0004 */ struct _WORK_QUEUE_ITEM WorkItem;
} POP_FX_WORK_POOL_ITEM, *PPOP_FX_WORK_POOL_ITEM; /* size: 0x0014 */

typedef enum _KWAIT_REASON
{
  Executive = 0,
  FreePage = 1,
  PageIn = 2,
  PoolAllocation = 3,
  DelayExecution = 4,
  Suspended = 5,
  UserRequest = 6,
  WrExecutive = 7,
  WrFreePage = 8,
  WrPageIn = 9,
  WrPoolAllocation = 10,
  WrDelayExecution = 11,
  WrSuspended = 12,
  WrUserRequest = 13,
  WrSpare0 = 14,
  WrQueue = 15,
  WrLpcReceive = 16,
  WrLpcReply = 17,
  WrVirtualMemory = 18,
  WrPageOut = 19,
  WrRendezvous = 20,
  WrKeyedEvent = 21,
  WrTerminated = 22,
  WrProcessInSwap = 23,
  WrCpuRateControl = 24,
  WrCalloutStack = 25,
  WrKernel = 26,
  WrResource = 27,
  WrPushLock = 28,
  WrMutex = 29,
  WrQuantumEnd = 30,
  WrDispatchInt = 31,
  WrPreempted = 32,
  WrYieldExecution = 33,
  WrFastMutex = 34,
  WrGuardedMutex = 35,
  WrRundown = 36,
  WrAlertByThreadId = 37,
  WrDeferredPreempt = 38,
  WrPhysicalFault = 39,
  MaximumWaitReason = 40,
} KWAIT_REASON, *PKWAIT_REASON;

typedef struct _EXCEPTION_POINTERS
{
  /* 0x0000 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0004 */ struct _CONTEXT* ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS; /* size: 0x0008 */

typedef enum _LOCK_OPERATION
{
  IoReadAccess = 0,
  IoWriteAccess = 1,
  IoModifyAccess = 2,
} LOCK_OPERATION, *PLOCK_OPERATION;

typedef enum _IOP_PRIORITY_HINT
{
  IopIoPriorityNotSet = 0,
  IopIoPriorityVeryLow = 1,
  IopIoPriorityLow = 2,
  IopIoPriorityNormal = 3,
  IopIoPriorityHigh = 4,
  IopIoPriorityCritical = 5,
  MaxIopIoPriorityTypes = 6,
} IOP_PRIORITY_HINT, *PIOP_PRIORITY_HINT;

typedef enum _FS_FILTER_SECTION_SYNC_TYPE
{
  SyncTypeOther = 0,
  SyncTypeCreateSection = 1,
} FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;

typedef union _FS_FILTER_PARAMETERS
{
  union
  {
    struct
    {
      /* 0x0000 */ union _LARGE_INTEGER* EndingOffset;
      /* 0x0004 */ struct _ERESOURCE** ResourceToRelease;
    } /* size: 0x0008 */ AcquireForModifiedPageWriter;
    struct
    {
      /* 0x0000 */ struct _ERESOURCE* ResourceToRelease;
    } /* size: 0x0004 */ ReleaseForModifiedPageWriter;
    struct
    {
      /* 0x0000 */ enum _FS_FILTER_SECTION_SYNC_TYPE SyncType;
      /* 0x0004 */ unsigned long PageProtection;
      /* 0x0008 */ struct _FS_FILTER_SECTION_SYNC_OUTPUT* OutputInformation;
      /* 0x000c */ unsigned long Flags;
    } /* size: 0x0010 */ AcquireForSectionSynchronization;
    struct
    {
      /* 0x0000 */ struct _IRP* Irp;
      /* 0x0004 */ void* FileInformation;
      /* 0x0008 */ unsigned long* Length;
      /* 0x000c */ enum _FILE_INFORMATION_CLASS FileInformationClass;
      /* 0x0010 */ long CompletionStatus;
    } /* size: 0x0014 */ QueryOpen;
    struct
    {
      /* 0x0000 */ void* Argument1;
      /* 0x0004 */ void* Argument2;
      /* 0x0008 */ void* Argument3;
      /* 0x000c */ void* Argument4;
      /* 0x0010 */ void* Argument5;
    } /* size: 0x0014 */ Others;
  }; /* size: 0x0014 */
} FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS; /* size: 0x0014 */

typedef enum _HAL_CLOCK_TIMER_MODE
{
  HalClockTimerModePeriodic = 0,
  HalClockTimerModeOneShot = 1,
  HalClockTimerModeMax = 2,
} HAL_CLOCK_TIMER_MODE, *PHAL_CLOCK_TIMER_MODE;

typedef enum _TRANSFER_TYPE
{
  ReadTransfer = 0,
  WriteTransfer = 1,
  OtherTransfer = 2,
} TRANSFER_TYPE, *PTRANSFER_TYPE;

typedef enum _CREATE_FILE_TYPE
{
  CreateFileTypeNone = 0,
  CreateFileTypeNamedPipe = 1,
  CreateFileTypeMailslot = 2,
} CREATE_FILE_TYPE, *PCREATE_FILE_TYPE;

struct _MI_SLAB_ALLOCATOR_ENTRY;

typedef enum _ETW_BUFFER_STATE
{
  EtwBufferStateFree = 0,
  EtwBufferStateGeneralLogging = 1,
  EtwBufferStateCSwitch = 2,
  EtwBufferStateFlush = 3,
  EtwBufferStatePendingCompression = 4,
  EtwBufferStateCompressed = 5,
  EtwBufferStatePlaceholder = 6,
  EtwBufferStateMaximum = 7,
} ETW_BUFFER_STATE, *PETW_BUFFER_STATE;

typedef enum _ETW_RT_EVENT_LOSS
{
  EtwRtEventNoLoss = 0,
  EtwRtEventLost = 1,
  EtwRtBufferLost = 2,
  EtwRtBackupLost = 3,
  EtwRtEventLossMax = 4,
} ETW_RT_EVENT_LOSS, *PETW_RT_EVENT_LOSS;

typedef enum _ETW_PERIODIC_TIMER_STATE
{
  EtwpPeriodicTimerUnset = 0,
  EtwpPeriodicTimerSet = 1,
} ETW_PERIODIC_TIMER_STATE, *PETW_PERIODIC_TIMER_STATE;

typedef struct _DEVICE_RELATIONS
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _DEVICE_OBJECT* Objects[1];
} DEVICE_RELATIONS, *PDEVICE_RELATIONS; /* size: 0x0008 */

enum ETW_COMPRESSION_RESUMPTION_MODE
{
  EtwCompressionModeRestart = 0,
  EtwCompressionModeNoDisable = 1,
  EtwCompressionModeNoRestart = 2,
};

typedef enum _KPROFILE_SOURCE
{
  ProfileTime = 0,
  ProfileAlignmentFixup = 1,
  ProfileTotalIssues = 2,
  ProfilePipelineDry = 3,
  ProfileLoadInstructions = 4,
  ProfilePipelineFrozen = 5,
  ProfileBranchInstructions = 6,
  ProfileTotalNonissues = 7,
  ProfileDcacheMisses = 8,
  ProfileIcacheMisses = 9,
  ProfileCacheMisses = 10,
  ProfileBranchMispredictions = 11,
  ProfileStoreInstructions = 12,
  ProfileFpInstructions = 13,
  ProfileIntegerInstructions = 14,
  Profile2Issue = 15,
  Profile3Issue = 16,
  Profile4Issue = 17,
  ProfileSpecialInstructions = 18,
  ProfileTotalCycles = 19,
  ProfileIcacheIssues = 20,
  ProfileDcacheAccesses = 21,
  ProfileMemoryBarrierCycles = 22,
  ProfileLoadLinkedIssues = 23,
  ProfileMaximum = 24,
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

typedef struct _TOKEN_SOURCE
{
  /* 0x0000 */ char SourceName[8];
  /* 0x0008 */ struct _LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE; /* size: 0x0010 */

typedef enum _TOKEN_TYPE
{
  TokenPrimary = 1,
  TokenImpersonation = 2,
} TOKEN_TYPE, *PTOKEN_TYPE;

typedef enum _WNF_STATE_NAME_LIFETIME
{
  WnfWellKnownStateName = 0,
  WnfPermanentStateName = 1,
  WnfPersistentStateName = 2,
  WnfTemporaryStateName = 3,
} WNF_STATE_NAME_LIFETIME, *PWNF_STATE_NAME_LIFETIME;

typedef struct _KIDTENTRY
{
  /* 0x0000 */ unsigned short Offset;
  /* 0x0002 */ unsigned short Selector;
  /* 0x0004 */ unsigned short Access;
  /* 0x0006 */ unsigned short ExtendedOffset;
} KIDTENTRY, *PKIDTENTRY; /* size: 0x0008 */

typedef enum _WNF_DATA_SCOPE
{
  WnfDataScopeSystem = 0,
  WnfDataScopeSession = 1,
  WnfDataScopeUser = 2,
  WnfDataScopeProcess = 3,
  WnfDataScopeMachine = 4,
  WnfDataScopePhysicalMachine = 5,
} WNF_DATA_SCOPE, *PWNF_DATA_SCOPE;

typedef struct _MI_PROTOTYPE_PTES_NODE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x000c */ unsigned long AllocationType : 3; /* bit position: 0 */
          /* 0x000c */ unsigned long Inserted : 1; /* bit position: 3 */
        }; /* bitfield */
      } /* size: 0x0004 */ e1;
      struct
      {
        /* 0x000c */ unsigned long PrototypePtesFlags;
      } /* size: 0x0004 */ e2;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} MI_PROTOTYPE_PTES_NODE, *PMI_PROTOTYPE_PTES_NODE; /* size: 0x0010 */

typedef struct _IMAGE_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ void* PageHashes;
    /* 0x0000 */ unsigned long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SecurityBeingCreated : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long SecurityMandatory : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long PageHashPointer : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} IMAGE_SECURITY_CONTEXT, *PIMAGE_SECURITY_CONTEXT; /* size: 0x0004 */

typedef struct _MI_IMAGE_SECURITY_REFERENCE
{
  /* 0x0000 */ struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
  /* 0x0010 */ void* DynamicRelocations;
  /* 0x0014 */ struct _IMAGE_SECURITY_CONTEXT SecurityContext;
  /* 0x0018 */ unsigned long StrongImageReference;
} MI_IMAGE_SECURITY_REFERENCE, *PMI_IMAGE_SECURITY_REFERENCE; /* size: 0x001c */

typedef enum _WNF_SUBSCRIPTION_STATE
{
  WNF_SUB_STATE_QUIESCENT = 0,
  WNF_SUB_STATE_READY_TO_DELIVER = 1,
  WNF_SUB_STATE_IN_DELIVERY = 2,
  WNF_SUB_STATE_RETRY = 3,
} WNF_SUBSCRIPTION_STATE, *PWNF_SUBSCRIPTION_STATE;

typedef enum _IO_RATE_CONTROL_TYPE
{
  IoRateControlTypeCapMin = 0,
  IoRateControlTypeIopsCap = 0,
  IoRateControlTypeBandwidthCap = 1,
  IoRateControlTypeTimePercentCap = 2,
  IoRateControlTypeCapMax = 2,
  IoRateControlTypeReservationMin = 3,
  IoRateControlTypeIopsReservation = 3,
  IoRateControlTypeBandwidthReservation = 4,
  IoRateControlTypeTimePercentReservation = 5,
  IoRateControlTypeReservationMax = 5,
  IoRateControlTypeCriticalReservationMin = 6,
  IoRateControlTypeIopsCriticalReservation = 6,
  IoRateControlTypeBandwidthCriticalReservation = 7,
  IoRateControlTypeTimePercentCriticalReservation = 8,
  IoRateControlTypeCriticalReservationMax = 8,
  IoRateControlTypeSoftCapMin = 9,
  IoRateControlTypeIopsSoftCap = 9,
  IoRateControlTypeBandwidthSoftCap = 10,
  IoRateControlTypeTimePercentSoftCap = 11,
  IoRateControlTypeSoftCapMax = 11,
  IoRateControlTypeLimitExcessNotifyMin = 12,
  IoRateControlTypeIopsLimitExcessNotify = 12,
  IoRateControlTypeBandwidthLimitExcessNotify = 13,
  IoRateControlTypeTimePercentLimitExcessNotify = 14,
  IoRateControlTypeLimitExcessNotifyMax = 14,
  IoRateControlTypeMax = 15,
} IO_RATE_CONTROL_TYPE, *PIO_RATE_CONTROL_TYPE;

typedef enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectFreezeInformation = 18,
  JobObjectExtendedAccountingInformation = 19,
  JobObjectWakeInformation = 20,
  JobObjectBackgroundInformation = 21,
  JobObjectSchedulingRankBiasInformation = 22,
  JobObjectTimerVirtualizationInformation = 23,
  JobObjectCycleTimeNotification = 24,
  JobObjectClearEvent = 25,
  JobObjectInterferenceInformation = 26,
  JobObjectClearPeakJobMemoryUsed = 27,
  JobObjectMemoryUsageInformation = 28,
  JobObjectSharedCommit = 29,
  JobObjectContainerId = 30,
  JobObjectIoRateControlInformation = 31,
  JobObjectSiloRootDirectory = 37,
  JobObjectServerSiloBasicInformation = 38,
  JobObjectServerSiloUserSharedData = 39,
  JobObjectServerSiloInitialize = 40,
  JobObjectServerSiloRunningState = 41,
  JobObjectIoAttribution = 42,
  JobObjectMemoryPartitionInformation = 43,
  JobObjectContainerTelemetryId = 44,
  JobObjectSiloSystemRoot = 45,
  JobObjectEnergyTrackingState = 46,
  JobObjectThreadImpersonationInformation = 47,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  JobObjectReserved8Information = 25,
  JobObjectReserved9Information = 26,
  JobObjectReserved10Information = 27,
  JobObjectReserved11Information = 28,
  JobObjectReserved12Information = 29,
  JobObjectReserved13Information = 30,
  JobObjectReserved14Information = 31,
  JobObjectNetRateControlInformation = 32,
  JobObjectNotificationLimitInformation2 = 33,
  JobObjectLimitViolationInformation2 = 34,
  JobObjectCreateSilo = 35,
  JobObjectSiloBasicInformation = 36,
  JobObjectReserved15Information = 37,
  JobObjectReserved16Information = 38,
  JobObjectReserved17Information = 39,
  JobObjectReserved18Information = 40,
  JobObjectReserved19Information = 41,
  JobObjectReserved20Information = 42,
  JobObjectReserved21Information = 43,
  JobObjectReserved22Information = 44,
  JobObjectReserved23Information = 45,
  JobObjectReserved24Information = 46,
  JobObjectReserved25Information = 47,
  MaxJobObjectInfoClass = 48,
} JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

typedef enum _OBJECT_INFORMATION_CLASS
{
  ObjectBasicInformation = 0,
  ObjectNameInformation = 1,
  ObjectTypeInformation = 2,
  ObjectTypesInformation = 3,
  ObjectHandleFlagInformation = 4,
  ObjectSessionInformation = 5,
  ObjectSessionObjectInformation = 6,
  MaxObjectInfoClass = 7,
} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

enum PPM_IDLE_BUCKET_TIME_TYPE
{
  PpmIdleBucketTimeInQpc = 0,
  PpmIdleBucketTimeIn100ns = 1,
  PpmIdleBucketTimeMaximum = 2,
};

struct _CI_NGEN_PATHS;

typedef enum _FILE_OBJECT_EXTENSION_TYPE
{
  FoExtTypeTransactionParams = 0,
  FoExtTypeInternal = 1,
  FoExtTypeIosbRange = 2,
  FoExtTypeGeneric = 3,
  FoExtTypeSfio = 4,
  FoExtTypeSymlink = 5,
  FoExtTypeOplockKey = 6,
  FoExtTypeSilo = 7,
  FoExtTypeMemoryPartitionInfo = 8,
  MaxFoExtTypes = 9,
} FILE_OBJECT_EXTENSION_TYPE, *PFILE_OBJECT_EXTENSION_TYPE;

typedef enum _IO_SESSION_STATE
{
  IoSessionStateCreated = 1,
  IoSessionStateInitialized = 2,
  IoSessionStateConnected = 3,
  IoSessionStateDisconnected = 4,
  IoSessionStateDisconnectedLoggedOn = 5,
  IoSessionStateLoggedOn = 6,
  IoSessionStateLoggedOff = 7,
  IoSessionStateTerminated = 8,
  IoSessionStateMax = 9,
} IO_SESSION_STATE, *PIO_SESSION_STATE;

typedef enum _PROCESS_SECTION_TYPE
{
  ProcessSectionData = 0,
  ProcessSectionImage = 1,
  ProcessSectionImageNx = 2,
  ProcessSectionPagefileBacked = 3,
  ProcessSectionMax = 4,
} PROCESS_SECTION_TYPE, *PPROCESS_SECTION_TYPE;

typedef enum _POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON
{
  DirectedDripsProblemDeviceReasonSpecialDevice = 0,
  DirectedDripsProblemDeviceReasonNoDfx = 1,
  DirectedDripsProblemDeviceReasonNoPs4 = 2,
  DirectedDripsProblemDeviceReasonNoPs4Root = 3,
  DirectedDripsProblemDeviceReasonComponentContraint = 4,
  DirectedDripsProblemDeviceReasonDfxFailure = 5,
  DirectedDripsProblemDeviceReasonPagingDevice = 6,
  DirectedDripsProblemDeviceReasonDebuggingDevice = 7,
  DirectedDripsProblemDeviceReasonDfxNotAllowed = 8,
  DirectedDripsProblemDeviceReasonMax = 9,
} POP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON, *PPOP_DIRECTED_DRIPS_PROBLEM_DEVICE_REASON;

typedef struct _HAL_INTEL_ENLIGHTENMENT_INFORMATION
{
  /* 0x0000 */ unsigned long Enlightenments;
  /* 0x0004 */ unsigned long HypervisorConnected;
  /* 0x0008 */ void* EndOfInterrupt /* function */;
  /* 0x000c */ void* ApicWriteIcr /* function */;
  /* 0x0010 */ unsigned long Reserved0;
  /* 0x0014 */ unsigned long SpinCountMask;
  /* 0x0018 */ void* LongSpinWait /* function */;
  /* 0x001c */ void* GetReferenceTime /* function */;
  /* 0x0020 */ void* SetSystemSleepProperty /* function */;
  /* 0x0024 */ void* EnterSleepState /* function */;
  /* 0x0028 */ void* NotifyDebugDeviceAvailable /* function */;
  /* 0x002c */ void* MapDeviceInterrupt /* function */;
  /* 0x0030 */ void* UnmapDeviceInterrupt /* function */;
  /* 0x0034 */ void* RetargetDeviceInterrupt /* function */;
  /* 0x0038 */ void* SetHpetConfig /* function */;
  /* 0x003c */ void* NotifyHpetEnabled /* function */;
  /* 0x0040 */ void* QueryAssociatedProcessors /* function */;
  /* 0x0044 */ void* ReadMultipleMsr /* function */;
  /* 0x0048 */ void* WriteMultipleMsr /* function */;
  /* 0x004c */ void* ReadCpuid /* function */;
  /* 0x0050 */ void* LpWritebackInvalidate /* function */;
  /* 0x0054 */ void* GetMachineCheckContext /* function */;
  /* 0x0058 */ void* SuspendPartition /* function */;
  /* 0x005c */ void* ResumePartition /* function */;
  /* 0x0060 */ void* SetSystemMachineCheckProperty /* function */;
  /* 0x0064 */ void* WheaErrorNotification /* function */;
  /* 0x0068 */ void* GetProcessorIndexFromVpIndex /* function */;
  /* 0x006c */ void* SyntheticClusterIpi /* function */;
  /* 0x0070 */ void* VpStartEnabled /* function */;
  /* 0x0074 */ void* StartVirtualProcessor /* function */;
  /* 0x0078 */ void* GetVpIndexFromApicId /* function */;
  /* 0x007c */ void* IumAccessPciDevice /* function */;
  /* 0x0080 */ void* IumEfiRuntimeService /* function */;
  /* 0x0084 */ void* SvmGetSystemCapabilities /* function */;
  /* 0x0088 */ void* SvmGetDeviceCapabilities /* function */;
  /* 0x008c */ void* SvmCreatePasidSpace /* function */;
  /* 0x0090 */ void* SvmSetPasidAddressSpace /* function */;
  /* 0x0094 */ void* SvmFlushPasid /* function */;
  /* 0x0098 */ void* SvmAttachPasidSpace /* function */;
  /* 0x009c */ void* SvmDetachPasidSpace /* function */;
  /* 0x00a0 */ void* SvmEnablePasid /* function */;
  /* 0x00a4 */ void* SvmDisablePasid /* function */;
  /* 0x00a8 */ void* SvmAcknowledgePageRequest /* function */;
  /* 0x00ac */ void* SvmCreatePrQueue /* function */;
  /* 0x00b0 */ void* SvmDeletePrQueue /* function */;
  /* 0x00b4 */ void* SvmClearPrqStalled /* function */;
  /* 0x00b8 */ void* SvmSetDeviceEnabled /* function */;
  /* 0x00bc */ void* HvDebuggerPowerHandler /* function */;
  /* 0x00c0 */ void* SetQpcBias /* function */;
  /* 0x00c4 */ void* GetQpcBias /* function */;
  /* 0x00c8 */ void* RegisterDeviceId /* function */;
  /* 0x00cc */ void* UnregisterDeviceId /* function */;
  /* 0x00d0 */ void* AllocateDeviceDomain /* function */;
  /* 0x00d4 */ void* AttachDeviceDomain /* function */;
  /* 0x00d8 */ void* DetachDeviceDomain /* function */;
  /* 0x00dc */ void* DeleteDeviceDomain /* function */;
  /* 0x00e0 */ void* MapDeviceLogicalRange /* function */;
  /* 0x00e4 */ void* UnmapDeviceLogicalRange /* function */;
  /* 0x00e8 */ void* MapDeviceSparsePages /* function */;
  /* 0x00ec */ void* UnmapDeviceSparsePages /* function */;
  /* 0x00f0 */ void* GetDmaGuardEnabled /* function */;
  /* 0x00f4 */ void* UpdateMicrocode /* function */;
  /* 0x00f8 */ void* GetSintMessage /* function */;
} HAL_INTEL_ENLIGHTENMENT_INFORMATION, *PHAL_INTEL_ENLIGHTENMENT_INFORMATION; /* size: 0x00fc */

enum FEATURE_CHANGE_TIME
{
  FEATURE_CHANGE_TIME_READ = 0,
  FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
  FEATURE_CHANGE_TIME_SESSION = 2,
  FEATURE_CHANGE_TIME_REBOOT = 3,
  FEATURE_CHANGE_TIME_USER_FLAG = 128,
};

typedef enum _EX_HEAP_TYPE
{
  ExHeapTypeNonPagedMin = 0,
  ExHeapTypeNonPaged = 0,
  ExHeapTypeNonPagedMax = 1,
  ExHeapTypeNonPagedNx = 1,
  ExHeapTypePagedMin = 2,
  ExHeapTypePaged = 2,
  ExHeapTypePagedMax = 3,
  ExHeapTypeMmSt = 3,
  ExHeapTypeMax = 4,
  ExHeapTypeSpecialMax = 4,
} EX_HEAP_TYPE, *PEX_HEAP_TYPE;

typedef struct _KWAIT_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY WaitListEntry;
  /* 0x0008 */ unsigned char WaitType;
  /* 0x0009 */ volatile unsigned char BlockState;
  /* 0x000a */ unsigned short WaitKey;
  union
  {
    /* 0x000c */ struct _KTHREAD* Thread;
    /* 0x000c */ struct _KQUEUE* NotificationQueue;
  }; /* size: 0x0004 */
  /* 0x0010 */ void* Object;
  /* 0x0014 */ void* SparePtr;
} KWAIT_BLOCK, *PKWAIT_BLOCK; /* size: 0x0018 */

typedef enum _OB_OPEN_REASON
{
  ObCreateHandle = 0,
  ObOpenHandle = 1,
  ObDuplicateHandle = 2,
  ObInheritHandle = 3,
  ObMaxOpenReason = 4,
} OB_OPEN_REASON, *POB_OPEN_REASON;

typedef enum _SECURITY_OPERATION_CODE
{
  SetSecurityDescriptor = 0,
  QuerySecurityDescriptor = 1,
  DeleteSecurityDescriptor = 2,
  AssignSecurityDescriptor = 3,
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;

typedef struct _XSTATE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long Reserved1;
  /* 0x0010 */ struct _XSAVE_AREA* Area;
  /* 0x0014 */ unsigned long Reserved2;
  /* 0x0018 */ void* Buffer;
  /* 0x001c */ unsigned long Reserved3;
} XSTATE_CONTEXT, *PXSTATE_CONTEXT; /* size: 0x0020 */

typedef struct _XSTATE_SAVE
{
  union
  {
    struct
    {
      /* 0x0000 */ __int64 Reserved1;
      /* 0x0008 */ unsigned long Reserved2;
      /* 0x000c */ struct _XSTATE_SAVE* Prev;
      /* 0x0010 */ struct _XSAVE_AREA* Reserved3;
      /* 0x0014 */ struct _KTHREAD* Thread;
      /* 0x0018 */ void* Reserved4;
      /* 0x001c */ unsigned char Level;
    }; /* size: 0x001d */
    /* 0x0000 */ struct _XSTATE_CONTEXT XStateContext;
  }; /* size: 0x0020 */
} XSTATE_SAVE, *PXSTATE_SAVE; /* size: 0x0020 */

typedef enum _RTL_FEATURE_ENABLED_STATE_OPTIONS
{
  FeatureEnabledStateOptionsNone = 0,
  FeatureEnabledStateOptionsWexpConfig = 1,
} RTL_FEATURE_ENABLED_STATE_OPTIONS, *PRTL_FEATURE_ENABLED_STATE_OPTIONS;

typedef enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON
{
  PepNotifyDeviceDStateReasonNone = 0,
  PepNotifyDeviceDStateReasonSystemTransition = 1,
  PepNotifyDeviceDStateReasonDfx = 2,
  PepNotifyDeviceDStateReasonMax = 3,
} POP_PEP_NOTIFY_DEVICE_DSTATE_REASON, *PPOP_PEP_NOTIFY_DEVICE_DSTATE_REASON;

typedef enum _RTLP_HP_MEMORY_TYPE
{
  HeapMemoryPaged = 0,
  HeapMemoryNonPaged = 1,
  HeapMemoryLargePage = 2,
  HeapMemoryHugePage = 3,
  HeapMemoryTypeMax = 4,
} RTLP_HP_MEMORY_TYPE, *PRTLP_HP_MEMORY_TYPE;

typedef struct _MMSUPPORT_FLAGS
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned char WorkingSetType : 3; /* bit position: 0 */
        /* 0x0000 */ unsigned char Reserved0 : 3; /* bit position: 3 */
        /* 0x0000 */ unsigned char MaximumWorkingSetHard : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned char MinimumWorkingSetHard : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0001 */ unsigned char SessionMaster : 1; /* bit position: 0 */
        /* 0x0001 */ unsigned char TrimmerState : 2; /* bit position: 1 */
        /* 0x0001 */ unsigned char Reserved : 1; /* bit position: 3 */
        /* 0x0001 */ unsigned char PageStealers : 4; /* bit position: 4 */
      }; /* bitfield */
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short u1;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned char MemoryPriority;
  union
  {
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char WsleDeleted : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char SvmEnabled : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char ForceAge : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char ForceTrim : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char NewMaximum : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char CommitReleaseState : 2; /* bit position: 5 */
    }; /* bitfield */
    /* 0x0003 */ unsigned char u2;
  }; /* size: 0x0001 */
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS; /* size: 0x0004 */

typedef struct _MMSUPPORT_INSTANCE
{
  /* 0x0000 */ unsigned long NextPageColor;
  /* 0x0004 */ unsigned long PageFaultCount;
  /* 0x0008 */ unsigned long TrimmedPageCount;
  /* 0x000c */ struct _MMWSL_INSTANCE* VmWorkingSetList;
  /* 0x0010 */ struct _LIST_ENTRY WorkingSetExpansionLinks;
  /* 0x0018 */ unsigned long AgeDistribution[8];
  /* 0x0038 */ struct _KGATE* ExitOutswapGate;
  /* 0x003c */ unsigned long MinimumWorkingSetSize;
  /* 0x0040 */ unsigned long WorkingSetLeafSize;
  /* 0x0044 */ unsigned long WorkingSetLeafPrivateSize;
  /* 0x0048 */ unsigned long WorkingSetSize;
  /* 0x004c */ unsigned long WorkingSetPrivateSize;
  /* 0x0050 */ unsigned long MaximumWorkingSetSize;
  /* 0x0054 */ unsigned long PeakWorkingSetSize;
  /* 0x0058 */ unsigned long HardFaultCount;
  /* 0x005c */ unsigned short LastTrimStamp;
  /* 0x005e */ unsigned short Unused0;
  /* 0x0060 */ struct _MMSUPPORT_FLAGS Flags;
} MMSUPPORT_INSTANCE, *PMMSUPPORT_INSTANCE; /* size: 0x0064 */

typedef enum _DEVPROP_OPERATOR
{
  DEVPROP_OPERATOR_MODIFIER_NOT = 0x10000,
  DEVPROP_OPERATOR_MODIFIER_IGNORE_CASE = 0x20000,
  DEVPROP_OPERATOR_NONE = 0,
  DEVPROP_OPERATOR_EXISTS = 1,
  DEVPROP_OPERATOR_NOT_EXISTS = 0x10001,
  DEVPROP_OPERATOR_EQUALS = 2,
  DEVPROP_OPERATOR_NOT_EQUALS = 0x10002,
  DEVPROP_OPERATOR_GREATER_THAN = 3,
  DEVPROP_OPERATOR_LESS_THAN = 4,
  DEVPROP_OPERATOR_GREATER_THAN_EQUALS = 5,
  DEVPROP_OPERATOR_LESS_THAN_EQUALS = 6,
  DEVPROP_OPERATOR_EQUALS_IGNORE_CASE = 0x20002,
  DEVPROP_OPERATOR_NOT_EQUALS_IGNORE_CASE = 0x30002,
  DEVPROP_OPERATOR_BITWISE_AND = 7,
  DEVPROP_OPERATOR_BITWISE_OR = 8,
  DEVPROP_OPERATOR_BEGINS_WITH = 9,
  DEVPROP_OPERATOR_ENDS_WITH = 10,
  DEVPROP_OPERATOR_CONTAINS = 11,
  DEVPROP_OPERATOR_BEGINS_WITH_IGNORE_CASE = 0x20009,
  DEVPROP_OPERATOR_ENDS_WITH_IGNORE_CASE = 0x2000a,
  DEVPROP_OPERATOR_CONTAINS_IGNORE_CASE = 0x2000b,
  DEVPROP_OPERATOR_LIST_CONTAINS = 4096,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH = 8192,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH = 12288,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS = 16384,
  DEVPROP_OPERATOR_LIST_CONTAINS_IGNORE_CASE = 0x21000,
  DEVPROP_OPERATOR_LIST_ELEMENT_BEGINS_WITH_IGNORE_CASE = 0x22000,
  DEVPROP_OPERATOR_LIST_ELEMENT_ENDS_WITH_IGNORE_CASE = 0x23000,
  DEVPROP_OPERATOR_LIST_ELEMENT_CONTAINS_IGNORE_CASE = 0x24000,
  DEVPROP_OPERATOR_AND_OPEN = 0x100000,
  DEVPROP_OPERATOR_AND_CLOSE = 0x200000,
  DEVPROP_OPERATOR_OR_OPEN = 0x300000,
  DEVPROP_OPERATOR_OR_CLOSE = 0x400000,
  DEVPROP_OPERATOR_NOT_OPEN = 0x500000,
  DEVPROP_OPERATOR_NOT_CLOSE = 0x600000,
  DEVPROP_OPERATOR_ARRAY_CONTAINS = 0x10000000,
  DEVPROP_OPERATOR_MASK_EVAL = 4095,
  DEVPROP_OPERATOR_MASK_LIST = 0xfffff000,
  DEVPROP_OPERATOR_MASK_MODIFIER = 0xf0000,
  DEVPROP_OPERATOR_MASK_NOT_LOGICAL = -267386881,
  DEVPROP_OPERATOR_MASK_LOGICAL = 0xff00000,
  DEVPROP_OPERATOR_MASK_ARRAY = -268435456,
} DEVPROP_OPERATOR, *PDEVPROP_OPERATOR;

typedef enum _DEVICE_RELATION_LEVEL
{
  RELATION_LEVEL_REMOVE_EJECT = 0,
  RELATION_LEVEL_DEPENDENT = 1,
  RELATION_LEVEL_DIRECT_DESCENDANT = 2,
} DEVICE_RELATION_LEVEL, *PDEVICE_RELATION_LEVEL;

typedef struct _DEVICE_OBJECT_LIST_ENTRY
{
  /* 0x0000 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0004 */ enum _DEVICE_RELATION_LEVEL RelationLevel;
  /* 0x0008 */ unsigned long Ordinal;
  /* 0x000c */ unsigned long Flags;
} DEVICE_OBJECT_LIST_ENTRY, *PDEVICE_OBJECT_LIST_ENTRY; /* size: 0x0010 */

typedef enum _KWAIT_BLOCK_STATE
{
  WaitBlockBypassStart = 0,
  WaitBlockBypassComplete = 1,
  WaitBlockSuspendBypassStart = 2,
  WaitBlockSuspendBypassComplete = 3,
  WaitBlockActive = 4,
  WaitBlockInactive = 5,
  WaitBlockSuspended = 6,
  WaitBlockAllStates = 7,
} KWAIT_BLOCK_STATE, *PKWAIT_BLOCK_STATE;

typedef enum _VI_DEADLOCK_RESOURCE_TYPE
{
  VfDeadlockUnknown = 0,
  VfDeadlockMutex = 1,
  VfDeadlockMutexAbandoned = 2,
  VfDeadlockFastMutex = 3,
  VfDeadlockFastMutexUnsafe = 4,
  VfDeadlockSpinLock = 5,
  VfDeadlockInStackQueuedSpinLock = 6,
  VfDeadlockUnusedSpinLock = 7,
  VfDeadlockEresource = 8,
  VfDeadlockTypeMaximum = 9,
} VI_DEADLOCK_RESOURCE_TYPE, *PVI_DEADLOCK_RESOURCE_TYPE;

typedef enum _MI_ALTERNATE_LOCK_VA_TYPE
{
  AlternateLockVaTypeSystemPtes = 0,
  AlternateLockVaTypeNonPagedPool = 1,
  AlternateLockVaTypeUser = 2,
  AlternateLockVaTypeSystem = 3,
  AlternateLockVaTypeMaximum = 4,
} MI_ALTERNATE_LOCK_VA_TYPE, *PMI_ALTERNATE_LOCK_VA_TYPE;

typedef enum _POP_SLEEP_CHECKPOINT
{
  PopSleepCheckpointInvalid = 0,
  PopSleepCheckpointPowerTransitionStart = 1,
  PopSleepCheckpointSuspendAppsBefore = 2,
  PopSleepCheckpointSuspendAppsAfter = 3,
  PopSleepCheckpointSuspendServicesBefore = 4,
  PopSleepCheckpointSuspendServicesAfter = 5,
  PopSleepCheckpointNotifySuperfetchBefore = 6,
  PopSleepCheckpointNotifySuperfetchAfter = 7,
  PopSleepCheckpointNotifyCallbacksBefore = 8,
  PopSleepCheckpointNotifyCallbacksAfter = 9,
  PopSleepCheckpointSleepTransactionCommitted = 10,
  PopSleepCheckpointQueryDriversBefore = 11,
  PopSleepCheckpointQueryDriversAfter = 12,
  PopSleepCheckpointAllocatingHiberContext = 13,
  PopSleepCheckpointSuspendDriversBefore = 14,
  PopSleepCheckpointPreSleepNotification = 16,
  PopSleepCheckpointInterruptsDisabledBegin = 17,
  PopSleepCheckpointInvokeHandlerBefore = 18,
  PopSleepCheckpointSaveHiberContextBegin = 19,
  PopSleepCheckpointInitializeDumpStackFailed = 20,
  PopSleepCheckpointHiberWriteFailed = 21,
  PopSleepCheckpointHiberFileTooSmall = 22,
  PopSleepCheckpointSaveHiberContextFailed = 23,
  PopSleepCheckpointSaveHiberContextEnd = 24,
  PopSleepCheckpointHiberKernelHandoff = 25,
  PopSleepCheckpointInvokeHandlerAfter = 26,
  PopSleepCheckpointReadHiberfileBefore = 27,
  PopSleepCheckpointInitializeDumpStackForReadFailed = 28,
  PopSleepCheckpointHiberReadFailed = 29,
  PopSleepCheckpointChecksumFailure = 30,
  PopSleepCheckpointDecompressionFailed = 31,
  PopSleepCheckpointReadHiberfileAfter = 32,
  PopSleepCheckpointInterruptsDisabledEnd = 33,
  PopSleepCheckpointWakeDriversAfter = 36,
  PopSleepCheckpointResumeAppsBefore = 37,
  PopSleepCheckpointResumeAppsAfter = 38,
  PopSleepCheckpointResumeServicesBefore = 39,
  PopSleepCheckpointResumeServicesAfter = 40,
  PopSleepCheckpointPowerTransitionEnd = 41,
  PopSleepCheckpointAllocatingHiberContextNoFileObject = 42,
  PopSleepCheckpointAllocatingHiberContextGetDumpStackFailed = 43,
  PopSleepCheckpointAllocatingHiberContextLoadResumeContextFailed = 44,
  PopSleepCheckpointAllocatingHiberContextBcdOpenFailed = 45,
  PopSleepCheckpointAllocatingHiberContextEstablishResumeObjectFailed = 46,
  PopSleepCheckpointAllocatingHiberContextSetPendingResumeFailed = 47,
  PopSleepCheckpointAllocatingHiberContextAllocateIoPagesPagesFailed = 48,
  PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid1 = 49,
  PopSleepCheckpointAllocatingHiberContextAllocateDumpPagesFailed = 50,
  PopSleepCheckpointAllocatingHiberContextAdapterBuffersInvalid2 = 51,
  PopSleepCheckpointAllocatingHiberContextUnHibernatedMdlFailed = 52,
  PopSleepCheckpointAllocatingHiberContextSecureResourcesFailed = 53,
  PopSleepCheckpointPrepareSleepBefore = 54,
  PopSleepCheckpointPrepareSleepAfter = 55,
  PopSleepCheckpointBootstatAvailable = 56,
  PopSleepCheckpointMax = 57,
} POP_SLEEP_CHECKPOINT, *PPOP_SLEEP_CHECKPOINT;

typedef struct _RTL_LOOKASIDE
{
  /* 0x0000 */ union _SLIST_HEADER ListHead;
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  /* 0x0010 */ unsigned long AllocateMisses;
  /* 0x0014 */ unsigned long TotalFrees;
  /* 0x0018 */ unsigned long FreeMisses;
  /* 0x001c */ unsigned long LastTotalAllocates;
  /* 0x0020 */ unsigned long LastAllocateMisses;
  /* 0x0024 */ unsigned long LastTotalFrees;
  /* 0x0028 */ long __PADDING__[6];
} RTL_LOOKASIDE, *PRTL_LOOKASIDE; /* size: 0x0040 */

typedef struct _RTL_DYNAMIC_LOOKASIDE
{
  /* 0x0000 */ unsigned __int64 EnabledBucketBitmap;
  /* 0x0008 */ unsigned long BucketCount;
  /* 0x000c */ unsigned long ActiveBucketCount;
  /* 0x0010 */ long Padding_37[12];
  /* 0x0040 */ struct _RTL_LOOKASIDE Buckets[64];
} RTL_DYNAMIC_LOOKASIDE, *PRTL_DYNAMIC_LOOKASIDE; /* size: 0x1040 */

typedef struct _EX_HEAP_POOL_NODE
{
  /* 0x0000 */ struct _SEGMENT_HEAP* Heaps[4];
  /* 0x0010 */ long Padding_38[12];
  /* 0x0040 */ struct _RTL_DYNAMIC_LOOKASIDE Lookasides[2];
} EX_HEAP_POOL_NODE, *PEX_HEAP_POOL_NODE; /* size: 0x20c0 */

typedef struct _ETW_FILTER_STRING_TOKEN_ELEMENT
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_39[2];
  /* 0x0004 */ wchar_t* String;
} ETW_FILTER_STRING_TOKEN_ELEMENT, *PETW_FILTER_STRING_TOKEN_ELEMENT; /* size: 0x0008 */

enum PDC_CS_PHASE
{
  PdcNoCsPhase = 0,
  PdcConnectionPhase = 1,
  PdcShellPhase = 2,
  PdcPlmPhase = 3,
  PdcMaintenancePhase = 4,
  PdcDamPhase = 5,
  PdcLowPowerPhase = 6,
  PdcResiliencyNotificationPhase = 7,
  PdcResiliencyPhase = 8,
  PdcInvalidPhase = 9,
  PdcMaxPhase = 9,
};

typedef enum _MI_MEMORY_EVENT_TYPES
{
  LowPagedPoolEvent = 0,
  HighPagedPoolEvent = 1,
  LowNonPagedPoolEvent = 2,
  HighNonPagedPoolEvent = 3,
  LowAvailablePagesEvent = 4,
  HighAvailablePagesEvent = 5,
  LowCommitEvent = 6,
  HighCommitEvent = 7,
  MaximumCommitEvent = 8,
  BadMemoryDetectedEvent = 9,
  PhysicalMemoryChangeEvent = 10,
  TotalNumberOfMemoryEvents = 11,
} MI_MEMORY_EVENT_TYPES, *PMI_MEMORY_EVENT_TYPES;

struct _ETW_PERFECT_HASH_FUNCTION;

enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
  JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
  JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
};

typedef enum _KOBJECTS
{
  EventNotificationObject = 0,
  EventSynchronizationObject = 1,
  MutantObject = 2,
  ProcessObject = 3,
  QueueObject = 4,
  SemaphoreObject = 5,
  ThreadObject = 6,
  GateObject = 7,
  TimerNotificationObject = 8,
  TimerSynchronizationObject = 9,
  Spare2Object = 10,
  Spare3Object = 11,
  Spare4Object = 12,
  Spare5Object = 13,
  Spare6Object = 14,
  Spare7Object = 15,
  Spare8Object = 16,
  ProfileCallbackObject = 17,
  ApcObject = 18,
  DpcObject = 19,
  DeviceQueueObject = 20,
  PriQueueObject = 21,
  InterruptObject = 22,
  ProfileObject = 23,
  Timer2NotificationObject = 24,
  Timer2SynchronizationObject = 25,
  ThreadedDpcObject = 26,
  MaximumKernelObject = 27,
} KOBJECTS, *PKOBJECTS;

typedef enum _HARDWARE_COUNTER_TYPE
{
  PMCCounter = 0,
  MaxHardwareCounterType = 1,
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

typedef struct _COUNTER_READING
{
  /* 0x0000 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* 0x0004 */ unsigned long Index;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 Total;
} COUNTER_READING, *PCOUNTER_READING; /* size: 0x0018 */

typedef enum _POP_SLEEP_CHECKPOINT_STATUS
{
  PopSleepCheckpointStatusDisabled = 0,
  PopSleepCheckpointStatusEnabledDueToDirtyShutdown = 1,
  PopSleepCheckpointStatusEnabledManually = 4,
  PopSleepCheckpointStatusEnabledExperiment = 4,
  PopSleepCheckpointStatusEnabledMax = 7,
  PopSleepCheckpointStatusFailedNotEfiSystem = 8,
  PopSleepCheckpointStatusFailedInsufficientSpace = 9,
  PopSleepCheckpointStatusFailedTooSlow = 10,
  PopSleepCheckpointStatusFailedOtherError = 15,
  PopSleepCheckpointStatusMax = 15,
} POP_SLEEP_CHECKPOINT_STATUS, *PPOP_SLEEP_CHECKPOINT_STATUS;

enum PDC_RESOURCE
{
  PdcResourceSystemForeground = 0,
  PdcResourceUniversalApplications = 1,
  PdcResourceWin32 = 2,
  PdcResourceNetwork = 3,
  PdcResourceSystemBackground = 4,
  PdcResourceMin = 0,
  PdcResourceMax = 4,
};

struct DOCK_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
  /* 0x0010 */ void* ProfileDepartureSetMode /* function */;
  /* 0x0014 */ void* ProfileDepartureUpdate /* function */;
}; /* size: 0x0018 */

enum TlgIn_t
{
  TlgInNULL = 0,
  TlgInUNICODESTRING = 1,
  TlgInANSISTRING = 2,
  TlgInINT8 = 3,
  TlgInUINT8 = 4,
  TlgInINT16 = 5,
  TlgInUINT16 = 6,
  TlgInINT32 = 7,
  TlgInUINT32 = 8,
  TlgInINT64 = 9,
  TlgInUINT64 = 10,
  TlgInFLOAT = 11,
  TlgInDOUBLE = 12,
  TlgInBOOL32 = 13,
  TlgInBINARY = 14,
  TlgInGUID = 15,
  _TlgInPOINTER_unsupported = 16,
  TlgInFILETIME = 17,
  TlgInSYSTEMTIME = 18,
  TlgInSID = 19,
  TlgInHEXINT32 = 20,
  TlgInHEXINT64 = 21,
  TlgInCOUNTEDSTRING = 22,
  TlgInCOUNTEDANSISTRING = 23,
  _TlgInSTRUCT = 24,
  TlgInCOUNTEDBINARY = 25,
  _TlgInMax = 26,
  TlgInINTPTR = 7,
  TlgInUINTPTR = 8,
  TlgInPOINTER = 20,
  TlgInLONG = 7,
  TlgInULONG = 8,
  TlgInHEXLONG = 20,
  _TlgInCcount = 32,
  TlgInVcount = 64,
  _TlgInChain = 128,
  _TlgInCustom = 96,
  _TlgInTypeMask = 31,
  _TlgInCountMask = 96,
  _TlgInFlagMask = 224,
};

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL
{
  PowerInternalAcpiInterfaceRegister = 0,
  PowerInternalS0LowPowerIdleInfo = 1,
  PowerInternalReapplyBrightnessSettings = 2,
  PowerInternalUserAbsencePrediction = 3,
  PowerInternalUserAbsencePredictionCapability = 4,
  PowerInternalPoProcessorLatencyHint = 5,
  PowerInternalStandbyNetworkRequest = 6,
  PowerInternalDirtyTransitionInformation = 7,
  PowerInternalSetBackgroundTaskState = 8,
  PowerInternalReservedDoNotUseEnum9 = 9,
  PowerInternalReservedDoNotUseEnum10 = 10,
  PowerInternalReservedDoNotUseEnum11 = 11,
  PowerInternalReservedDoNotUseEnum12 = 12,
  PowerInternalReservedDoNotUseEnum13 = 13,
  PowerInternalReservedDoNotUseEnum14 = 14,
  PowerInternalReservedDoNotUseEnum15 = 15,
  PowerInternalReservedDoNotUseEnum16 = 16,
  PowerInternalReservedDoNotUseEnum17 = 17,
  PowerInternalBootSessionStandbyActivationInformation = 18,
  PowerInternalSessionPowerState = 19,
  PowerInternalSessionTerminalInput = 20,
  PowerInternalSetWatchdog = 21,
  PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,
  PowerInternalExternalMonitorConnected = 23,
  PowerInternalHighPrecisionBrightnessSettings = 24,
  PowerInternalWinrtScreenToggle = 25,
  PowerInternalPpmQosDisable = 26,
  PowerInternalTransitionCheckpoint = 27,
  PowerInternalInputControllerState = 28,
  PowerInternalFirmwareResetReason = 29,
  PowerInternalPpmSchedulerQosSupport = 30,
  PowerInternalBootStatGet = 31,
  PowerInternalBootStatSet = 32,
  PowerInternalCallHasNotReturnedWatchdog = 33,
  PowerInternalBootStatCheckIntegrity = 34,
  PowerInternalBootStatRestoreDefaults = 35,
  PowerInternalHostEsStateUpdate = 36,
  PowerInternalGetPowerActionState = 37,
  PowerInternalBootStatUnlock = 38,
  PowerInternalWakeOnVoiceState = 39,
  PowerInternalDeepSleepBlock = 40,
  PowerInternalIsPoFxDevice = 41,
  PowerInternalPowerTransitionExtensionAtBoot = 42,
  PowerInternalProcessorBrandedFrequency = 43,
  PowerInternalTimeBrokerExpirationReason = 44,
  PowerInternalNotifyUserShutdownStatus = 45,
  PowerInternalPowerRequestTerminalCoreWindow = 46,
  PowerInternalProcessorIdleVeto = 47,
  PowerInternalPlatformIdleVeto = 48,
  PowerInternalIsLongPowerButtonBugcheckEnabled = 49,
  PowerInternalAutoChkCausedReboot = 50,
  PowerInternalSetWakeAlarmOverride = 51,
  PowerInternalDirectedFxAddTestDevice = 53,
  PowerInternalDirectedFxRemoveTestDevice = 54,
  PowerInternalDirectedFxSetMode = 56,
  PowerInternalRegisterPowerPlane = 57,
  PowerInternalSetDirectedDripsFlags = 58,
  PowerInternalClearDirectedDripsFlags = 59,
  PowerInternalRetrieveHiberFileResumeContext = 60,
  PowerInternalReadHiberFilePage = 61,
  PowerInternalLastBootSucceeded = 62,
  PowerInternalQuerySleepStudyHelperRoutineBlock = 63,
  PowerInternalDirectedDripsQueryCapabilities = 64,
  PowerInternalClearConstraints = 65,
  PowerInternalSoftParkVelocityEnabled = 66,
  PowerInternalQueryIntelPepCapabilities = 67,
  PowerInternalGetSystemIdleLoopEnablement = 68,
  PowerInternalGetVmPerfControlSupport = 69,
  PowerInternalGetVmPerfControlConfig = 70,
  PowerInternalSleepDetailedDiagUpdate = 71,
  PowerInformationInternalMaximum = 72,
} POWER_INFORMATION_LEVEL_INTERNAL, *PPOWER_INFORMATION_LEVEL_INTERNAL;

typedef enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
{
  MemoryNotContiguous = 0,
  MemoryAlignedAndContiguous = 1,
  MemoryNotResident = 2,
  MemoryNotEligibleToMakeContiguous = 3,
  MemoryContiguityStateMax = 4,
} MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE, *PMEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;

struct _ACTIVATION_CONTEXT;

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO
{
  /* 0x0000 */ struct _OBJECT_NAME_INFORMATION* ImageFileName;
} SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO; /* size: 0x0004 */

typedef enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonExecutionRequired = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonInstrumentation = 3,
  PsWakeReasonPreserveProcess = 4,
  PsWakeReasonActivityReference = 5,
  PsWakeReasonWorkOnBehalf = 6,
  PsMaxWakeReasons = 7,
} PS_WAKE_REASON, *PPS_WAKE_REASON;

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Primary : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ContainmentWarning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reset : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long ThresholdExceeded : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ResourceNotAvailable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long LatentError : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Propagated : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long Reserved : 25; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS; /* size: 0x0004 */

typedef enum _RTL_MEMORY_TYPE
{
  MemoryTypePaged = 0,
  MemoryTypeNonPaged = 1,
  MemoryTypeLargePage = 2,
  MemoryTypeHugePage = 3,
  MemoryTypeMax = 4,
} RTL_MEMORY_TYPE, *PRTL_MEMORY_TYPE;

typedef enum _LDR_DDAG_STATE
{
  LdrModulesMerged = -5,
  LdrModulesInitError = -4,
  LdrModulesSnapError = -3,
  LdrModulesUnloaded = -2,
  LdrModulesUnloading = -1,
  LdrModulesPlaceHolder = 0,
  LdrModulesMapping = 1,
  LdrModulesMapped = 2,
  LdrModulesWaitingForDependencies = 3,
  LdrModulesSnapping = 4,
  LdrModulesSnapped = 5,
  LdrModulesCondensed = 6,
  LdrModulesReadyToInit = 7,
  LdrModulesInitializing = 8,
  LdrModulesReadyToRun = 9,
} LDR_DDAG_STATE, *PLDR_DDAG_STATE;

enum wil_FeatureStage
{
  wil_FeatureStage_AlwaysDisabled = 0,
  wil_FeatureStage_DisabledByDefault = 1,
  wil_FeatureStage_EnabledByDefault = 2,
  wil_FeatureStage_AlwaysEnabled = 3,
};

typedef enum _KHETERO_RUNNING_TYPE
{
  KHeteroShortRunning = 0,
  KHeteroLongRunning = 1,
  KHeteroRunningTypeMax = 2,
} KHETERO_RUNNING_TYPE, *PKHETERO_RUNNING_TYPE;

typedef struct _RTL_AVL_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; /* size: 0x0004 */

typedef struct _MMPAGING_FILE
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long MaximumSize;
  /* 0x0008 */ unsigned long MinimumSize;
  /* 0x000c */ unsigned long FreeSpace;
  /* 0x0010 */ unsigned long PeakUsage;
  /* 0x0014 */ unsigned long HighestPage;
  /* 0x0018 */ unsigned long FreeReservationSpace;
  /* 0x001c */ struct _FILE_OBJECT* File;
  /* 0x0020 */ struct _MMMOD_WRITER_MDL_ENTRY** Entry;
  /* 0x0024 */ unsigned long NumberOfModWriterEntries;
  /* 0x0028 */ union _SLIST_HEADER PfnsToFree;
  /* 0x0030 */ struct _UNICODE_STRING PageFileName;
  /* 0x0038 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Bitmaps;
  /* 0x003c */ unsigned long AllocationBitmapHint;
  /* 0x0040 */ unsigned long LargestAllocationCluster;
  /* 0x0044 */ unsigned long RefreshAllocationCluster;
  /* 0x0048 */ unsigned long LastRefreshAllocationCluster;
  /* 0x004c */ unsigned long ReservedClusterSizeAggregate;
  /* 0x0050 */ unsigned long MaximumRunLengthInBitmaps;
  /* 0x0054 */ struct _RTL_RB_TREE BitmapsCacheLengthTree;
  /* 0x005c */ struct _RTL_RB_TREE BitmapsCacheLocationTree;
  /* 0x0064 */ struct _LIST_ENTRY BitmapsCacheFreeList;
  /* 0x006c */ struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY* BitmapsCacheEntries;
  union
  {
    /* 0x0070 */ unsigned long ToBeEvictedCount;
    /* 0x0070 */ unsigned long HybridPriority;
  }; /* size: 0x0004 */
  struct /* bitfield */
  {
    /* 0x0074 */ unsigned short PageFileNumber : 4; /* bit position: 0 */
    /* 0x0074 */ unsigned short WsSwapPagefile : 1; /* bit position: 4 */
    /* 0x0074 */ unsigned short NoReservations : 1; /* bit position: 5 */
    /* 0x0074 */ unsigned short VirtualStorePagefile : 1; /* bit position: 6 */
    /* 0x0074 */ unsigned short SwapSupported : 1; /* bit position: 7 */
    /* 0x0074 */ unsigned short NodeInserted : 1; /* bit position: 8 */
    /* 0x0074 */ unsigned short StackNotified : 1; /* bit position: 9 */
    /* 0x0074 */ unsigned short BackedBySCM : 1; /* bit position: 10 */
    /* 0x0074 */ unsigned short SpecialPurposeMemory : 1; /* bit position: 11 */
    /* 0x0074 */ unsigned short Spare0 : 3; /* bit position: 12 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0076 */ unsigned char AdriftMdls : 1; /* bit position: 0 */
    /* 0x0076 */ unsigned char Spare1 : 7; /* bit position: 1 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0077 */ unsigned char IgnoreReservations : 1; /* bit position: 0 */
    /* 0x0077 */ unsigned char Spare2 : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0078 */ unsigned long PageHashPages;
  /* 0x007c */ unsigned long PageHashPagesPeak;
  /* 0x0080 */ unsigned long* PageHash;
  /* 0x0084 */ void* FileHandle;
  /* 0x0088 */ volatile long SpinLock;
  /* 0x008c */ struct _RTL_AVL_TREE FlowThroughReadRoot;
  /* 0x0090 */ struct _MI_PARTITION* Partition;
  /* 0x0094 */ struct _RTL_BALANCED_NODE FileObjectNode;
} MMPAGING_FILE, *PMMPAGING_FILE; /* size: 0x00a0 */

struct _ETW_EVENT_CALLBACK_CONTEXT;

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _TP_POOL* Pool;
  /* 0x0008 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x000c */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0010 */ void* RaceDll;
  /* 0x0014 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0018 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x001c */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x001c */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x001c */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x001c */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0020 */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0024 */ unsigned long Size;
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0028 */

typedef enum _REG_NOTIFY_CLASS
{
  RegNtDeleteKey = 0,
  RegNtPreDeleteKey = 0,
  RegNtSetValueKey = 1,
  RegNtPreSetValueKey = 1,
  RegNtDeleteValueKey = 2,
  RegNtPreDeleteValueKey = 2,
  RegNtSetInformationKey = 3,
  RegNtPreSetInformationKey = 3,
  RegNtRenameKey = 4,
  RegNtPreRenameKey = 4,
  RegNtEnumerateKey = 5,
  RegNtPreEnumerateKey = 5,
  RegNtEnumerateValueKey = 6,
  RegNtPreEnumerateValueKey = 6,
  RegNtQueryKey = 7,
  RegNtPreQueryKey = 7,
  RegNtQueryValueKey = 8,
  RegNtPreQueryValueKey = 8,
  RegNtQueryMultipleValueKey = 9,
  RegNtPreQueryMultipleValueKey = 9,
  RegNtPreCreateKey = 10,
  RegNtPostCreateKey = 11,
  RegNtPreOpenKey = 12,
  RegNtPostOpenKey = 13,
  RegNtKeyHandleClose = 14,
  RegNtPreKeyHandleClose = 14,
  RegNtPostDeleteKey = 15,
  RegNtPostSetValueKey = 16,
  RegNtPostDeleteValueKey = 17,
  RegNtPostSetInformationKey = 18,
  RegNtPostRenameKey = 19,
  RegNtPostEnumerateKey = 20,
  RegNtPostEnumerateValueKey = 21,
  RegNtPostQueryKey = 22,
  RegNtPostQueryValueKey = 23,
  RegNtPostQueryMultipleValueKey = 24,
  RegNtPostKeyHandleClose = 25,
  RegNtPreCreateKeyEx = 26,
  RegNtPostCreateKeyEx = 27,
  RegNtPreOpenKeyEx = 28,
  RegNtPostOpenKeyEx = 29,
  RegNtPreFlushKey = 30,
  RegNtPostFlushKey = 31,
  RegNtPreLoadKey = 32,
  RegNtPostLoadKey = 33,
  RegNtPreUnLoadKey = 34,
  RegNtPostUnLoadKey = 35,
  RegNtPreQueryKeySecurity = 36,
  RegNtPostQueryKeySecurity = 37,
  RegNtPreSetKeySecurity = 38,
  RegNtPostSetKeySecurity = 39,
  RegNtCallbackObjectContextCleanup = 40,
  RegNtPreRestoreKey = 41,
  RegNtPostRestoreKey = 42,
  RegNtPreSaveKey = 43,
  RegNtPostSaveKey = 44,
  RegNtPreReplaceKey = 45,
  RegNtPostReplaceKey = 46,
  RegNtPreQueryKeyName = 47,
  RegNtPostQueryKeyName = 48,
  MaxRegNtNotifyClass = 49,
} REG_NOTIFY_CLASS, *PREG_NOTIFY_CLASS;

typedef struct _EX_RUNDOWN_REF
{
  union
  {
    /* 0x0000 */ unsigned long Count;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF; /* size: 0x0004 */

typedef struct _MI_ENCLAVE_STATE
{
  /* 0x0000 */ struct _RTL_AVL_TREE EnclaveRegions;
  /* 0x0004 */ void* EnclaveMetadataPage;
  /* 0x0008 */ struct _RTL_BITMAP* EnclaveMetadataBitMap;
  /* 0x000c */ struct _EX_PUSH_LOCK EnclaveMetadataEntryLock;
  /* 0x0010 */ volatile long EnclaveMetadataPageLock;
  /* 0x0014 */ struct _LIST_ENTRY EnclaveList;
  /* 0x001c */ struct _EX_PUSH_LOCK EnclaveListLock;
  /* 0x0020 */ struct _EX_RUNDOWN_REF ShutdownRundown;
} MI_ENCLAVE_STATE, *PMI_ENCLAVE_STATE; /* size: 0x0024 */

struct _TP_POOL;

typedef struct _DEBUG_TRANSPORT_DATA
{
  /* 0x0000 */ unsigned long HwContextSize;
  /* 0x0004 */ unsigned char UseSerialFraming;
  /* 0x0005 */ unsigned char ValidUSBCoreId;
  /* 0x0006 */ unsigned char USBCoreId;
  /* 0x0007 */ char __PADDING__[1];
} DEBUG_TRANSPORT_DATA, *PDEBUG_TRANSPORT_DATA; /* size: 0x0008 */

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0004 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0008 */

typedef struct _HANDLE_TRACE_DB_ENTRY
{
  /* 0x0000 */ struct _CLIENT_ID ClientId;
  /* 0x0008 */ void* Handle;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ void* StackTrace[16];
} HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY; /* size: 0x0050 */

typedef enum _KTHREAD_TAG
{
  KThreadTagNone = 0,
  KThreadTagMediaBuffering = 1,
  KThreadTagDeadline = 2,
  KThreadTagMax = 3,
} KTHREAD_TAG, *PKTHREAD_TAG;

typedef enum _KTRANSACTION_STATE
{
  KTransactionUninitialized = 0,
  KTransactionActive = 1,
  KTransactionPreparing = 2,
  KTransactionPrepared = 3,
  KTransactionInDoubt = 4,
  KTransactionCommitted = 5,
  KTransactionAborted = 6,
  KTransactionDelegated = 7,
  KTransactionPrePreparing = 8,
  KTransactionForgotten = 9,
  KTransactionRecovering = 10,
  KTransactionPrePrepared = 11,
} KTRANSACTION_STATE, *PKTRANSACTION_STATE;

typedef enum _ETW_PERFECT_HASH_FUNCTION_TYPE
{
  ETW_PHF_EVENT_ID = 0,
  ETW_PHF_STACK_WALK = 1,
  ETW_PHF_MAX_COUNT = 2,
} ETW_PERFECT_HASH_FUNCTION_TYPE, *PETW_PERFECT_HASH_FUNCTION_TYPE;

typedef enum _MI_ENCLAVE_TYPE
{
  MiEnclaveNone = 0,
  MiEnclaveHardware = 1,
  MiEnclaveVsm = 2,
  MiEnclaveMax = 3,
} MI_ENCLAVE_TYPE, *PMI_ENCLAVE_TYPE;

typedef enum
{
  KTMOH_CommitTransaction_Result = 1,
  KTMOH_RollbackTransaction_Result = 2,
} TAG_UNNAMED_1, *PTAG_UNNAMED_1;

typedef enum _POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI
{
  PowerInformationInternalTtmFirst = 4096,
  PowerInternalTtmOpenTerminal = 4096,
  PowerInternalTtmCreateTerminal = 4097,
  PowerInternalTtmEvacuateDevices = 4098,
  PowerInternalTtmCreateTerminalEventQueue = 4099,
  PowerInternalTtmGetTerminalEvent = 4100,
  PowerInternalTtmSetDefaultDeviceAssignment = 4101,
  PowerInternalTtmAssignDevice = 4102,
  PowerInternalTtmSetDisplayState = 4103,
  PowerInternalTtmSetDisplayTimeouts = 4104,
  PowerInternalTtmSetDisplayPowerRequest = 4105,
  PowerInternalTtmSetInputWakeCapability = 4106,
  PowerInformationInternalTtmLast = 4106,
} POWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI, *PPOWER_INFORMATION_LEVEL_INTERNAL_TTMTCAPI;

typedef struct _EXT_IOMMU_DEVICE_ID_GIC
{
  /* 0x0000 */ unsigned int LineNumber;
} EXT_IOMMU_DEVICE_ID_GIC, *PEXT_IOMMU_DEVICE_ID_GIC; /* size: 0x0004 */

typedef enum _TYPE_OF_MEMORY
{
  LoaderExceptionBlock = 0,
  LoaderSystemBlock = 1,
  LoaderFree = 2,
  LoaderBad = 3,
  LoaderLoadedProgram = 4,
  LoaderFirmwareTemporary = 5,
  LoaderFirmwarePermanent = 6,
  LoaderOsloaderHeap = 7,
  LoaderOsloaderStack = 8,
  LoaderSystemCode = 9,
  LoaderHalCode = 10,
  LoaderBootDriver = 11,
  LoaderConsoleInDriver = 12,
  LoaderConsoleOutDriver = 13,
  LoaderStartupDpcStack = 14,
  LoaderStartupKernelStack = 15,
  LoaderStartupPanicStack = 16,
  LoaderStartupPcrPage = 17,
  LoaderStartupPdrPage = 18,
  LoaderRegistryData = 19,
  LoaderMemoryData = 20,
  LoaderNlsData = 21,
  LoaderSpecialMemory = 22,
  LoaderBBTMemory = 23,
  LoaderZero = 24,
  LoaderXIPRom = 25,
  LoaderHALCachedMemory = 26,
  LoaderLargePageFiller = 27,
  LoaderErrorLogMemory = 28,
  LoaderVsmMemory = 29,
  LoaderFirmwareCode = 30,
  LoaderFirmwareData = 31,
  LoaderFirmwareReserved = 32,
  LoaderEnclaveMemory = 33,
  LoaderFirmwareKsr = 34,
  LoaderEnclaveKsr = 35,
  LoaderSkMemory = 36,
  LoaderSkFirmwareReserved = 37,
  LoaderIoSpaceMemoryZeroed = 38,
  LoaderIoSpaceMemoryFree = 39,
  LoaderIoSpaceMemoryKsr = 40,
  LoaderMaximum = 41,
} TYPE_OF_MEMORY, *PTYPE_OF_MEMORY;

typedef struct _ETW_PRIV_HANDLE_DEMUX_TABLE
{
  /* 0x0000 */ struct _RTL_RB_TREE Tree;
  /* 0x0008 */ struct _EX_PUSH_LOCK Lock;
  /* 0x000c */ unsigned short SequenceNumber;
  /* 0x000e */ char __PADDING__[2];
} ETW_PRIV_HANDLE_DEMUX_TABLE, *PETW_PRIV_HANDLE_DEMUX_TABLE; /* size: 0x0010 */

typedef enum _PLUGPLAY_EVENT_CATEGORY
{
  HardwareProfileChangeEvent = 0,
  TargetDeviceChangeEvent = 1,
  DeviceClassChangeEvent = 2,
  CustomDeviceEvent = 3,
  DeviceInstallEvent = 4,
  DeviceArrivalEvent = 5,
  VetoEvent = 6,
  BlockedDriverEvent = 7,
  InvalidIDEvent = 8,
  DevicePropertyChangeEvent = 9,
  DeviceInstanceRemovalEvent = 10,
  DeviceInstanceStartedEvent = 11,
  MaxPlugEventCategory = 12,
} PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef enum _VRF_RULE_CLASS_ID
{
  VrfSpecialPoolRuleClass = 0,
  VrfForceIrqlRuleClass = 1,
  VrfAllocationFailuresRuleClass = 2,
  VrfTrackingPoolAllocationsRuleClass = 3,
  VrfIORuleClass = 4,
  VrfDeadlockPreventionRuleClass = 5,
  VrfEnhancedIORuleClass = 6,
  VrfDMARuleClass = 7,
  VrfSecurityRuleClass = 8,
  VrfForcePendingIORequestRuleClass = 9,
  VrfIRPTrackingRuleClass = 10,
  VrfMiscellaneousRuleClass = 11,
  VrfMoreDebuggingRuleClass = 12,
  VrfMDLInvariantStackRuleClass = 13,
  VrfMDLInvariantDriverRuleClass = 14,
  VrfPowerDelayFuzzingRuleClass = 15,
  VrfPortMiniportRuleClass = 16,
  DifPluginDdiStandard = 17,
  VrfAutoFailRuleClass = 18,
  VrfAdditionalDDIRuleClass = 19,
  VrfRuleClassBase = 20,
  VrfNdisWifiRuleClass = 21,
  VrfDriverLoggingRuleClass = 22,
  VrfSyncDelayFuzzingRuleClass = 23,
  VrfVMSwitchingRuleClass = 24,
  VrfCodeIntegrityRuleClass = 25,
  VrfBelow4GBAllocationRuleClass = 26,
  VrfProcessorBranchTraceRuleClass = 27,
  VrfAdvancedMMRuleClass = 28,
  VrfExtendingXDVTimeLimit = 29,
  VrfSystemBIOSRuleClass = 30,
  VrfHardwareRuleClass = 31,
  DifPluginDriverIsolation = 32,
  VrfWDFRuleClass = 33,
  DifPluginDdiMoreirql = 34,
  DifPluginMode = 35,
  ReservedForDVRF36 = 36,
  DifPluginTest = 37,
  DifPluginInfoDisclosureIRPRule = 38,
  DifPluginLwSP = 39,
  DifPluginAvxCorruption = 40,
  DifPluginAccessModeMismatch = 41,
  ReservedForDVRF42 = 42,
  ReservedForDVRF43 = 43,
  ReservedForDVRF44 = 44,
  ReservedForDVRF45 = 45,
  ReservedForDVRF46 = 46,
  ReservedForDVRF47 = 47,
  ReservedForDVRF48 = 48,
  ReservedForDVRF49 = 49,
  ReservedForDVRF50 = 50,
  ReservedForDVRF51 = 51,
  ReservedForDVRF52 = 52,
  ReservedForDVRF53 = 53,
  ReservedForDVRF54 = 54,
  ReservedForDVRF55 = 55,
  ReservedForDVRF56 = 56,
  ReservedForDVRF57 = 57,
  ReservedForDVRF58 = 58,
  ReservedForDVRF59 = 59,
  ReservedForDVRF60 = 60,
  ReservedForDVRF61 = 61,
  ReservedForDVRF62 = 62,
  ReservedForDVRF63 = 63,
  VrfRuleClassSizeMax = 64,
} VRF_RULE_CLASS_ID, *PVRF_RULE_CLASS_ID;

typedef enum _KSOFTWARE_INTERRUPT_TARGET
{
  KSoftwareInterruptTargetNone = 0,
  KSoftwareInterruptTargetSingleProcessor = 1,
  KSoftwareInterruptTargetMultipleProcessors = 2,
  KSoftwareInterruptTargetMax = 3,
} KSOFTWARE_INTERRUPT_TARGET, *PKSOFTWARE_INTERRUPT_TARGET;

typedef enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
} IRQ_PRIORITY, *PIRQ_PRIORITY;

typedef enum _KE_WAKE_SOURCE_TYPE
{
  KeWakeSourceTypeSpuriousWake = 0,
  KeWakeSourceTypeSpuriousClock = 1,
  KeWakeSourceTypeSpuriousInterrupt = 2,
  KeWakeSourceTypeQueryFailure = 3,
  KeWakeSourceTypeAccountingFailure = 4,
  KeWakeSourceTypeStaticSourceMax = 4,
  KeWakeSourceTypeInterrupt = 5,
  KeWakeSourceTypeIRTimer = 6,
  KeWakeSourceTypeMax = 7,
} KE_WAKE_SOURCE_TYPE, *PKE_WAKE_SOURCE_TYPE;

typedef enum _MI_WORKING_SET_TYPE
{
  MiWorkingSetTypeSystemCache = 0,
  MiWorkingSetTypeSystemViews = 1,
  MiWorkingSetTypePartitionMaximum = 1,
  MiWorkingSetTypePagedPool = 2,
  MiWorkingSetTypePagableMaximum = 2,
  MiWorkingSetTypeSystemPtes = 3,
  MiWorkingSetTypeKernelStacks = 4,
  MiWorkingSetTypeNonPagedPool = 5,
  MiWorkingSetTypeMaximum = 6,
} MI_WORKING_SET_TYPE, *PMI_WORKING_SET_TYPE;

typedef enum _CONFIGURATION_CLASS
{
  SystemClass = 0,
  ProcessorClass = 1,
  CacheClass = 2,
  AdapterClass = 3,
  ControllerClass = 4,
  PeripheralClass = 5,
  MemoryClass = 6,
  MaximumClass = 7,
} CONFIGURATION_CLASS, *PCONFIGURATION_CLASS;

typedef enum _KTIMER2_COLLECTION_INDEX
{
  KTimer2CollectionNoWake = 0,
  KTimer2CollectionHr = 1,
  KTimer2CollectionPseudoHr = 2,
  KTimer2CollectionFinite = 3,
  KTimer2CollectionIr = 4,
  KTimer2CollectionNotInserted = 16,
  KTimer2CollectionInvalid = 21,
  KTimer2CollectionOptional = 32,
  KTimer2CollectionMin = 0,
  KTimer2CollectionMax = 5,
  KTimer2CollectionNode1 = 2,
} KTIMER2_COLLECTION_INDEX, *PKTIMER2_COLLECTION_INDEX;

enum CPU_VENDORS
{
  CPU_NONE = 0,
  CPU_INTEL = 1,
  CPU_AMD = 2,
  CPU_CYRIX = 3,
  CPU_TRANSMETA = 4,
  CPU_VIA = 5,
  CPU_CENTAUR = 5,
  CPU_RISE = 6,
  CPU_UNKNOWN = 7,
};

typedef enum _BUS_DATA_TYPE
{
  ConfigurationSpaceUndefined = -1,
  Cmos = 0,
  EisaConfiguration = 1,
  Pos = 2,
  CbusConfiguration = 3,
  PCIConfiguration = 4,
  VMEConfiguration = 5,
  NuBusConfiguration = 6,
  PCMCIAConfiguration = 7,
  MPIConfiguration = 8,
  MPSAConfiguration = 9,
  PNPISAConfiguration = 10,
  SgiInternalConfiguration = 11,
  MaximumBusDataType = 12,
} BUS_DATA_TYPE, *PBUS_DATA_TYPE;

enum KD_CALLBACK_ACTION
{
  KdConfigureDeviceAndContinue = 0,
  KdSkipDeviceAndContinue = 1,
  KdConfigureDeviceAndStop = 2,
  KdSkipDeviceAndStop = 3,
};

typedef struct _FILE_STANDARD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0010 */ unsigned long NumberOfLinks;
  /* 0x0014 */ unsigned char DeletePending;
  /* 0x0015 */ unsigned char Directory;
  /* 0x0016 */ char __PADDING__[2];
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION; /* size: 0x0018 */

struct _EX_WNF_SUBSCRIPTION;

typedef enum _PO_FX_PERF_STATE_UNIT
{
  PoFxPerfStateUnitOther = 0,
  PoFxPerfStateUnitFrequency = 1,
  PoFxPerfStateUnitBandwidth = 2,
  PoFxPerfStateUnitMaximum = 3,
} PO_FX_PERF_STATE_UNIT, *PPO_FX_PERF_STATE_UNIT;

typedef enum _HAL_PROCESSOR_STAT_TYPE
{
  HalProcessorStatResidency = 0,
  HalProcessorStatCount = 1,
  HalProcessorStatMax = 2,
} HAL_PROCESSOR_STAT_TYPE, *PHAL_PROCESSOR_STAT_TYPE;

typedef enum _DUMP_EVENTS
{
  DUMP_EVENT_NONE = 0,
  DUMP_EVENT_HIBER_RESUME = 1,
  DUMP_EVENT_HIBER_RESUME_END = 2,
} DUMP_EVENTS, *PDUMP_EVENTS;

typedef enum _MI_CFG_BITMAP_TYPE
{
  CfgBitMapNative = 0,
  CfgBitMapMax = 1,
} MI_CFG_BITMAP_TYPE, *PMI_CFG_BITMAP_TYPE;

typedef enum _PROCESS_VA_TYPE
{
  ProcessVAImage = 0,
  ProcessVASection = 1,
  ProcessVAPrivate = 2,
  ProcessVAMax = 3,
} PROCESS_VA_TYPE, *PPROCESS_VA_TYPE;

typedef enum _PS_RESOURCE_TYPE
{
  PsResourceNonPagedPool = 0,
  PsResourcePagedPool = 1,
  PsResourcePageFile = 2,
  PsResourceWorkingSet = 3,
  PsResourceMax = 4,
} PS_RESOURCE_TYPE, *PPS_RESOURCE_TYPE;

typedef struct _MI_FREE_LARGE_PAGES
{
  /* 0x0000 */ unsigned long LargePageFreeCount[2];
  /* 0x0008 */ unsigned long LargePageFreeCountHiLow[2][2];
  /* 0x0018 */ unsigned long LargePagesCount[4][1][2][2];
  /* 0x0058 */ struct _MI_FREE_LARGE_PAGE_LIST* LargePageEntries[4][1][2][2];
} MI_FREE_LARGE_PAGES, *PMI_FREE_LARGE_PAGES; /* size: 0x0098 */

typedef enum _HEAP_SEGMGR_LARGE_PAGE_POLICY
{
  HeapSegMgrNoLargePages = 0,
  HeapSegMgrEnableLargePages = 1,
  HeapSegMgrNormalPolicy = 1,
  HeapSegMgrForceSmall = 2,
  HeapSegMgrForceLarge = 3,
  HeapSegMgrForceRandom = 4,
  HeapSegMgrLargePagePolicyMax = 5,
} HEAP_SEGMGR_LARGE_PAGE_POLICY, *PHEAP_SEGMGR_LARGE_PAGE_POLICY;

typedef enum _RTL_FEATURE_CONFIGURATION_PRIORITY
{
  FeatureConfigurationPriorityImageDefault = 0,
  FeatureConfigurationPriorityService = 4,
  FeatureConfigurationPriorityUser = 8,
  FeatureConfigurationPriorityUserPolicy = 10,
  FeatureConfigurationPriorityTest = 12,
  FeatureConfigurationPriorityImageOverride = 15,
  FeatureConfigurationPriorityMax = 15,
} RTL_FEATURE_CONFIGURATION_PRIORITY, *PRTL_FEATURE_CONFIGURATION_PRIORITY;

typedef enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
  PerfInfoMemUsagePfnMetadata = 0,
  PerfInfoMemUsageMax = 1,
} PERFINFO_KERNELMEMORY_USAGE_TYPE, *PPERFINFO_KERNELMEMORY_USAGE_TYPE;

enum FEATURE_ENABLED_STATE
{
  FEATURE_ENABLED_STATE_DEFAULT = 0,
  FEATURE_ENABLED_STATE_DISABLED = 1,
  FEATURE_ENABLED_STATE_ENABLED = 2,
  FEATURE_ENABLED_STATE_HAS_NOTIFICATION = 128,
  FEATURE_ENABLED_STATE_HAS_VARIANT_CONFIGURATION = 64,
};

enum IRPLOCK
{
  IRPLOCK_CANCELABLE = 0,
  IRPLOCK_CANCEL_STARTED = 1,
  IRPLOCK_CANCEL_COMPLETE = 2,
  IRPLOCK_COMPLETED = 3,
};

typedef enum _BOOT_ENTROPY_SOURCE_ID
{
  BootEntropySourceNone = 0,
  BootEntropySourceSeedfile = 1,
  BootEntropySourceExternal = 2,
  BootEntropySourceTpm = 3,
  BootEntropySourceRdrand = 4,
  BootEntropySourceTime = 5,
  BootEntropySourceAcpiOem0 = 6,
  BootEntropySourceUefi = 7,
  BootEntropySourceCng = 8,
  BootEntropySourceTcbTpm = 9,
  BootEntropySourceTcbRdrand = 10,
  BootMaxEntropySources = 10,
} BOOT_ENTROPY_SOURCE_ID, *PBOOT_ENTROPY_SOURCE_ID;

typedef struct _IO_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Option;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char ShareDisposition;
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short Spare2;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Port;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory;
      struct
      {
        /* 0x0008 */ unsigned long MinimumVector;
        /* 0x000c */ unsigned long MaximumVector;
        /* 0x0010 */ unsigned short AffinityPolicy;
        /* 0x0012 */ unsigned short Group;
        /* 0x0014 */ enum _IRQ_PRIORITY PriorityPolicy;
        /* 0x0018 */ unsigned long TargetedProcessors;
      } /* size: 0x0014 */ Interrupt;
      struct
      {
        /* 0x0008 */ unsigned long MinimumChannel;
        /* 0x000c */ unsigned long MaximumChannel;
      } /* size: 0x0008 */ Dma;
      struct
      {
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved;
        /* 0x0010 */ unsigned long Channel;
        /* 0x0014 */ unsigned long TransferWidth;
      } /* size: 0x0010 */ DmaV3;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Generic;
      struct
      {
        /* 0x0008 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long MinBusNumber;
        /* 0x0010 */ unsigned long MaxBusNumber;
        /* 0x0014 */ unsigned long Reserved;
      } /* size: 0x0010 */ BusNumber;
      struct
      {
        /* 0x0008 */ unsigned long Priority;
        /* 0x000c */ unsigned long Reserved1;
        /* 0x0010 */ unsigned long Reserved2;
      } /* size: 0x000c */ ConfigData;
      struct
      {
        /* 0x0008 */ unsigned long Length40;
        /* 0x000c */ unsigned long Alignment40;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory40;
      struct
      {
        /* 0x0008 */ unsigned long Length48;
        /* 0x000c */ unsigned long Alignment48;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory48;
      struct
      {
        /* 0x0008 */ unsigned long Length64;
        /* 0x000c */ unsigned long Alignment64;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory64;
      struct
      {
        /* 0x0008 */ unsigned char Class;
        /* 0x0009 */ unsigned char Type;
        /* 0x000a */ unsigned char Reserved1;
        /* 0x000b */ unsigned char Reserved2;
        /* 0x000c */ unsigned long IdLowPart;
        /* 0x0010 */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

typedef enum _PNP_DEVICE_DELETE_TYPE
{
  QueryRemoveDevice = 0,
  CancelRemoveDevice = 1,
  RemoveDevice = 2,
  SurpriseRemoveDevice = 3,
  EjectDevice = 4,
  RemoveFailedDevice = 5,
  RemoveUnstartedFailedDevice = 6,
  MaxDeviceDeleteType = 7,
} PNP_DEVICE_DELETE_TYPE, *PPNP_DEVICE_DELETE_TYPE;

typedef enum _IO_ALLOCATION_ACTION
{
  KeepObject = 1,
  DeallocateObject = 2,
  DeallocateObjectKeepRegisters = 3,
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;

typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long TargetSystemState : 4; /* bit position: 8 */
      /* 0x0000 */ unsigned long EffectiveSystemState : 4; /* bit position: 12 */
      /* 0x0000 */ unsigned long CurrentSystemState : 4; /* bit position: 16 */
      /* 0x0000 */ unsigned long IgnoreHibernationPath : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long PseudoTransition : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long KernelSoftReboot : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned long DirectedDripsTransition : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned long Reserved2 : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long ContextAsUlong;
  }; /* size: 0x0004 */
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT; /* size: 0x0004 */

typedef union _POWER_STATE
{
  union
  {
    /* 0x0000 */ enum _SYSTEM_POWER_STATE SystemState;
    /* 0x0000 */ enum _DEVICE_POWER_STATE DeviceState;
  }; /* size: 0x0004 */
} POWER_STATE, *PPOWER_STATE; /* size: 0x0004 */

typedef enum _MI_MEMORY_HIGHLOW
{
  MiMemoryHigh = 0,
  MiMemoryLow = 1,
  MiMemoryHighLow = 2,
} MI_MEMORY_HIGHLOW, *PMI_MEMORY_HIGHLOW;

typedef enum _PS_PROTECTED_SIGNER
{
  PsProtectedSignerNone = 0,
  PsProtectedSignerAuthenticode = 1,
  PsProtectedSignerCodeGen = 2,
  PsProtectedSignerAntimalware = 3,
  PsProtectedSignerLsa = 4,
  PsProtectedSignerWindows = 5,
  PsProtectedSignerWinTcb = 6,
  PsProtectedSignerWinSystem = 7,
  PsProtectedSignerApp = 8,
  PsProtectedSignerMax = 9,
} PS_PROTECTED_SIGNER, *PPS_PROTECTED_SIGNER;

typedef struct _MI_COMBINE_PAGE_LISTHEAD
{
  /* 0x0000 */ struct _RTL_AVL_TREE Table;
  /* 0x0004 */ volatile long Lock;
} MI_COMBINE_PAGE_LISTHEAD, *PMI_COMBINE_PAGE_LISTHEAD; /* size: 0x0008 */

typedef enum _PNP_VETO_TYPE
{
  PNP_VetoTypeUnknown = 0,
  PNP_VetoLegacyDevice = 1,
  PNP_VetoPendingClose = 2,
  PNP_VetoWindowsApp = 3,
  PNP_VetoWindowsService = 4,
  PNP_VetoOutstandingOpen = 5,
  PNP_VetoDevice = 6,
  PNP_VetoDriver = 7,
  PNP_VetoIllegalDeviceRequest = 8,
  PNP_VetoInsufficientPower = 9,
  PNP_VetoNonDisableable = 10,
  PNP_VetoLegacyDriver = 11,
  PNP_VetoInsufficientRights = 12,
  PNP_VetoAlreadyRemoved = 13,
} PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef enum _PCI_BUSMASTER_RID_TYPE
{
  BusmasterRidFromDeviceRid = 0,
  BusmasterRidFromBridgeRid = 1,
  BusmasterRidFromMultipleBridges = 2,
} PCI_BUSMASTER_RID_TYPE, *PPCI_BUSMASTER_RID_TYPE;

typedef enum _WORKING_SET_TYPE
{
  WorkingSetTypeUser = 0,
  WorkingSetTypeSession = 1,
  WorkingSetTypeSystemTypes = 2,
  WorkingSetTypeSystemCache = 2,
  WorkingSetTypePagedPool = 3,
  WorkingSetTypeSystemViews = 4,
  WorkingSetTypePagableMaximum = 4,
  WorkingSetTypeSystemPtes = 5,
  WorkingSetTypeKernelStacks = 6,
  WorkingSetTypeNonPagedPool = 7,
  WorkingSetTypeMaximum = 8,
} WORKING_SET_TYPE, *PWORKING_SET_TYPE;

typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0004 */ unsigned long AllocateFromCount;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_TEST_ALLOCATION_PARAMETERS, *PARBITER_TEST_ALLOCATION_PARAMETERS; /* size: 0x000c */

typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
  /* 0x0004 */ unsigned long AllocateFromCount;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* AllocateFrom;
} ARBITER_RETEST_ALLOCATION_PARAMETERS, *PARBITER_RETEST_ALLOCATION_PARAMETERS; /* size: 0x000c */

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_BOOT_ALLOCATION_PARAMETERS, *PARBITER_BOOT_ALLOCATION_PARAMETERS; /* size: 0x0004 */

typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
{
  /* 0x0000 */ struct _CM_PARTIAL_RESOURCE_LIST** AllocatedResources;
} ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, *PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS; /* size: 0x0004 */

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0004 */ struct _IO_RESOURCE_DESCRIPTOR* ConflictingResource;
  /* 0x0008 */ unsigned long* ConflictCount;
  /* 0x000c */ struct _ARBITER_CONFLICT_INFO** Conflicts;
} ARBITER_QUERY_CONFLICT_PARAMETERS, *PARBITER_QUERY_CONFLICT_PARAMETERS; /* size: 0x0010 */

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS
{
  /* 0x0000 */ struct _LIST_ENTRY* ArbitrationList;
} ARBITER_QUERY_ARBITRATE_PARAMETERS, *PARBITER_QUERY_ARBITRATE_PARAMETERS; /* size: 0x0004 */

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS
{
  /* 0x0000 */ struct _DEVICE_OBJECT* ReserveDevice;
} ARBITER_ADD_RESERVED_PARAMETERS, *PARBITER_ADD_RESERVED_PARAMETERS; /* size: 0x0004 */

typedef enum _ETW_STRING_TOKEN_TYPE
{
  ETW_STRING_TOKEN_EXE = 0,
  ETW_STRING_TOKEN_PACKAGE_ID = 1,
  ETW_STRING_TOKEN_PKG_APP_ID = 2,
  ETW_STRING_TOKEN_CONTAINER = 3,
  ETW_STRING_TOKEN_MAX_COUNT = 4,
} ETW_STRING_TOKEN_TYPE, *PETW_STRING_TOKEN_TYPE;

typedef enum _PNP_DEVICE_ACTION_REQUEST
{
  AssignResources = 0,
  ClearDeviceProblem = 1,
  ClearProblem = 2,
  ClearEjectProblem = 3,
  HaltDevice = 4,
  QueryPowerRelations = 5,
  Rebalance = 6,
  ReenumerateBootDevices = 7,
  ReenumerateDeviceOnly = 8,
  ReenumerateDeviceTree = 9,
  ReenumerateRootDevices = 10,
  RequeryDeviceState = 11,
  ResetDevice = 12,
  ResourceRequirementsChanged = 13,
  RestartEnumeration = 14,
  SetDeviceProblem = 15,
  StartDevice = 16,
  StartSystemDevicesPass0 = 17,
  StartSystemDevicesPass1 = 18,
  NotifyTransportRelationsChange = 19,
  NotifyEjectionRelationsChange = 20,
  ConfigureDevice = 21,
  ConfigureDeviceClass = 22,
  ConfigureDeviceExtensions = 23,
  ConfigureDeviceReset = 24,
  ClearDmaGuardProblem = 25,
  PnpDeviceActionRequestMax = 26,
} PNP_DEVICE_ACTION_REQUEST, *PPNP_DEVICE_ACTION_REQUEST;

typedef struct _PNP_DEVICE_ACTION_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ enum _PNP_DEVICE_ACTION_REQUEST RequestType;
  /* 0x0010 */ unsigned char ReorderingBarrier;
  /* 0x0011 */ char Padding_40[3];
  /* 0x0014 */ unsigned long RequestArgument;
  /* 0x0018 */ struct _KEVENT* CompletionEvent;
  /* 0x001c */ long* CompletionStatus;
  /* 0x0020 */ struct _GUID ActivityId;
  /* 0x0030 */ long RefCount;
  /* 0x0034 */ unsigned char Dequeued;
  /* 0x0035 */ char Padding_41[3];
  /* 0x0038 */ struct _EX_PUSH_LOCK CancelLock;
  /* 0x003c */ unsigned char CancelRequested;
  /* 0x003d */ char __PADDING__[3];
} PNP_DEVICE_ACTION_ENTRY, *PPNP_DEVICE_ACTION_ENTRY; /* size: 0x0040 */

typedef enum _POP_FX_WORK_POOL_QUEUE
{
  PopFxWorkPoolQueueEmergency = 0,
  PopFxWorkPoolQueuePlugin = 1,
  PopFxWorkPoolQueueMax = 2,
} POP_FX_WORK_POOL_QUEUE, *PPOP_FX_WORK_POOL_QUEUE;

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _INITIAL_PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET; /* size: 0x002c */

typedef struct _PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET; /* size: 0x0014 */

typedef enum _MODE
{
  KernelMode = 0,
  UserMode = 1,
  MaximumMode = 2,
} MODE, *PMODE;

typedef enum _POP_SYSTEM_IDLE_EVENT_TYPE
{
  PopSystemIdleEventTypeMonitorOffUserInput = 0,
  PopSystemIdleEventTypeMonitorOnUserInput = 1,
  PopSystemIdleEventTypeUserPresence = 2,
  PopSystemIdleEventTypeResumeFromSxSystemPowerState = 3,
  PopSystemIdleEventTypeMax = 4,
  PopSystemIdleEventTypeInvalid = 4,
} POP_SYSTEM_IDLE_EVENT_TYPE, *PPOP_SYSTEM_IDLE_EVENT_TYPE;

typedef enum _MI_DYNAMICBASE_BITMAP
{
  DynamicBaseBitMapNative = 0,
  DynamicBaseBitMapInvalid = 1,
  DynamicBaseBitMapMax = 1,
} MI_DYNAMICBASE_BITMAP, *PMI_DYNAMICBASE_BITMAP;

typedef enum _KTHREAD_PPM_POLICY
{
  ThreadPpmDefault = 0,
  ThreadPpmThrottle = 1,
  ThreadPpmSemiThrottle = 2,
  ThreadPpmNoThrottle = 3,
  MaxThreadPpmPolicy = 4,
} KTHREAD_PPM_POLICY, *PKTHREAD_PPM_POLICY;

typedef enum _KPROCESS_PPM_POLICY
{
  ProcessPpmDefault = 0,
  ProcessPpmThrottle = 1,
  ProcessPpmSemiThrottle = 2,
  ProcessPpmNoThrottle = 3,
  ProcessPpmWindowMinimized = 4,
  ProcessPpmWindowOccluded = 5,
  ProcessPpmWindowVisible = 6,
  ProcessPpmWindowInFocus = 7,
  MaxProcessPpmPolicy = 8,
} KPROCESS_PPM_POLICY, *PKPROCESS_PPM_POLICY;

typedef enum _MEMORY_CACHING_TYPE_ORIG
{
  MmFrameBufferCached = 2,
} MEMORY_CACHING_TYPE_ORIG, *PMEMORY_CACHING_TYPE_ORIG;

typedef struct _SECURITY_SUBJECT_CONTEXT
{
  /* 0x0000 */ void* ClientToken;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ void* PrimaryToken;
  /* 0x000c */ void* ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT; /* size: 0x0010 */

typedef struct _ACCESS_STATE
{
  /* 0x0000 */ struct _LUID OperationID;
  /* 0x0008 */ unsigned char SecurityEvaluated;
  /* 0x0009 */ unsigned char GenerateAudit;
  /* 0x000a */ unsigned char GenerateOnClose;
  /* 0x000b */ unsigned char PrivilegesAllocated;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long RemainingDesiredAccess;
  /* 0x0014 */ unsigned long PreviouslyGrantedAccess;
  /* 0x0018 */ unsigned long OriginalDesiredAccess;
  /* 0x001c */ struct _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
  /* 0x002c */ void* SecurityDescriptor;
  /* 0x0030 */ void* AuxData;
  union
  {
    union
    {
      /* 0x0034 */ struct _INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      /* 0x0034 */ struct _PRIVILEGE_SET PrivilegeSet;
    }; /* size: 0x002c */
  } /* size: 0x002c */ Privileges;
  /* 0x0060 */ unsigned char AuditPrivileges;
  /* 0x0061 */ char Padding_42[3];
  /* 0x0064 */ struct _UNICODE_STRING ObjectName;
  /* 0x006c */ struct _UNICODE_STRING ObjectTypeName;
} ACCESS_STATE, *PACCESS_STATE; /* size: 0x0074 */

typedef enum _MI_SHARED_USER_PAGE_TYPES
{
  MiSharedUserPageKernel = 0,
  MiSharedUserPageHypervisor = 1,
  MiSharedUserPageMaximum = 2,
} MI_SHARED_USER_PAGE_TYPES, *PMI_SHARED_USER_PAGE_TYPES;

typedef enum _TlgBlob_t
{
  _TlgBlobNone = 0,
  _TlgBlobEnd = 1,
  _TlgBlobProvider = 2,
  _TlgBlobEvent3 = 3,
  _TlgBlobProvider3 = 4,
  _TlgBlobEvent2 = 5,
  _TlgBlobEvent4 = 6,
  _TlgBlobMax = 7,
} TlgBlob_t, *PTlgBlob_t;

typedef struct _MDL
{
  /* 0x0000 */ struct _MDL* Next;
  /* 0x0004 */ short Size;
  /* 0x0006 */ short MdlFlags;
  /* 0x0008 */ struct _EPROCESS* Process;
  /* 0x000c */ void* MappedSystemVa;
  /* 0x0010 */ void* StartVa;
  /* 0x0014 */ unsigned long ByteCount;
  /* 0x0018 */ unsigned long ByteOffset;
} MDL, *PMDL; /* size: 0x001c */

struct _EPROCESS_QUOTA_BLOCK;

typedef enum _KTHREAD_STATE
{
  Initialized = 0,
  Ready = 1,
  Running = 2,
  Standby = 3,
  Terminated = 4,
  Waiting = 5,
  Transition = 6,
  DeferredReady = 7,
  GateWaitObsolete = 8,
  WaitingForProcessInSwap = 9,
} KTHREAD_STATE, *PKTHREAD_STATE;

typedef union _WHEA_EVENT_LOG_ENTRY_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Reserved1 : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long LogInternalEtw : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long LogBlackbox : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long LogSel : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long RawSel : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long NoFormat : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Driver : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long Reserved2 : 25; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_EVENT_LOG_ENTRY_FLAGS, *PWHEA_EVENT_LOG_ENTRY_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_EVENT_LOG_ENTRY_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ enum _WHEA_EVENT_LOG_ENTRY_TYPE Type;
  /* 0x0010 */ unsigned long OwnerTag;
  /* 0x0014 */ enum _WHEA_EVENT_LOG_ENTRY_ID Id;
  /* 0x0018 */ union _WHEA_EVENT_LOG_ENTRY_FLAGS Flags;
  /* 0x001c */ unsigned long PayloadLength;
} WHEA_EVENT_LOG_ENTRY_HEADER, *PWHEA_EVENT_LOG_ENTRY_HEADER; /* size: 0x0020 */

typedef struct _WHEA_EVENT_LOG_ENTRY
{
  /* 0x0000 */ struct _WHEA_EVENT_LOG_ENTRY_HEADER Header;
} WHEA_EVENT_LOG_ENTRY, *PWHEA_EVENT_LOG_ENTRY; /* size: 0x0020 */

typedef enum _CM_DIRTY_VECTOR_OPERATION
{
  DirtyVectorModified = 0,
  DirtyDataCaptureStart = 1,
  DirtyDataCaptureEnd = 2,
} CM_DIRTY_VECTOR_OPERATION, *PCM_DIRTY_VECTOR_OPERATION;

struct DEBUG_DEVICE_ADDRESS
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char Valid;
  union
  {
    /* 0x0002 */ unsigned char Reserved[2];
    struct
    {
      /* 0x0002 */ unsigned char BitWidth;
      /* 0x0003 */ unsigned char AccessSize;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned char* TranslatedAddress;
  /* 0x0008 */ unsigned long Length;
}; /* size: 0x000c */

struct DEBUG_MEMORY_REQUIREMENTS
{
  /* 0x0000 */ union _LARGE_INTEGER Start;
  /* 0x0008 */ union _LARGE_INTEGER MaxEnd;
  /* 0x0010 */ void* VirtualAddress;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ unsigned char Cached;
  /* 0x0019 */ unsigned char Aligned;
  /* 0x001a */ char __PADDING__[6];
}; /* size: 0x0020 */

enum KD_NAMESPACE_ENUM
{
  KdNameSpacePCI = 0,
  KdNameSpaceACPI = 1,
  KdNameSpaceAny = 2,
  KdNameSpaceNone = 3,
  KdNameSpaceMax = 4,
};

typedef struct _DEBUG_IOMMU_EFI_DATA
{
  /* 0x0000 */ void* PciIoProtocolHandle;
  /* 0x0004 */ void* Mapping;
} DEBUG_IOMMU_EFI_DATA, *PDEBUG_IOMMU_EFI_DATA; /* size: 0x0008 */

typedef struct _DEBUG_DEVICE_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Bus;
  /* 0x0004 */ unsigned long Slot;
  /* 0x0008 */ unsigned short Segment;
  /* 0x000a */ unsigned short VendorID;
  /* 0x000c */ unsigned short DeviceID;
  /* 0x000e */ unsigned char BaseClass;
  /* 0x000f */ unsigned char SubClass;
  /* 0x0010 */ unsigned char ProgIf;
  union
  {
    /* 0x0011 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0011 */ unsigned char DbgHalScratchAllocated : 1; /* bit position: 0 */
      /* 0x0011 */ unsigned char DbgBarsMapped : 1; /* bit position: 1 */
      /* 0x0011 */ unsigned char DbgScratchAllocated : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0012 */ unsigned char Initialized;
  /* 0x0013 */ unsigned char Configured;
  /* 0x0014 */ struct DEBUG_DEVICE_ADDRESS BaseAddress[6];
  /* 0x005c */ long Padding_43;
  /* 0x0060 */ struct DEBUG_MEMORY_REQUIREMENTS Memory;
  /* 0x0080 */ unsigned long Dbg2TableIndex;
  /* 0x0084 */ unsigned short PortType;
  /* 0x0086 */ unsigned short PortSubtype;
  /* 0x0088 */ void* OemData;
  /* 0x008c */ unsigned long OemDataLength;
  /* 0x0090 */ enum KD_NAMESPACE_ENUM NameSpace;
  /* 0x0094 */ wchar_t* NameSpacePath;
  /* 0x0098 */ unsigned long NameSpacePathLength;
  /* 0x009c */ unsigned long TransportType;
  /* 0x00a0 */ struct _DEBUG_TRANSPORT_DATA TransportData;
  /* 0x00a8 */ struct _DEBUG_IOMMU_EFI_DATA EfiIoMmuData;
} DEBUG_DEVICE_DESCRIPTOR, *PDEBUG_DEVICE_DESCRIPTOR; /* size: 0x00b0 */

typedef enum _SYSTEM_PROCESS_CLASSIFICATION
{
  SystemProcessClassificationNormal = 0,
  SystemProcessClassificationSystem = 1,
  SystemProcessClassificationSecureSystem = 2,
  SystemProcessClassificationMemCompression = 3,
  SystemProcessClassificationRegistry = 4,
  SystemProcessClassificationMaximum = 5,
} SYSTEM_PROCESS_CLASSIFICATION, *PSYSTEM_PROCESS_CLASSIFICATION;

typedef struct _RTL_HASH_TABLE
{
  /* 0x0000 */ unsigned long EntryCount;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long MaskBitCount : 5; /* bit position: 0 */
    /* 0x0004 */ unsigned long BucketCount : 27; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY* Buckets;
} RTL_HASH_TABLE, *PRTL_HASH_TABLE; /* size: 0x000c */

typedef enum _PO_HIBER_FORCE_DISABLE_REASON
{
  PoHiberForceDisableReasonPolicy = 0,
  PoHiberForceDisableReasonGuardedHost = 1,
  PoHiberForceDisableReasonMax = 2,
} PO_HIBER_FORCE_DISABLE_REASON, *PPO_HIBER_FORCE_DISABLE_REASON;

typedef enum _WOW64_SHARED_INFORMATION
{
  SharedNtdll32LdrInitializeThunk = 0,
  SharedNtdll32KiUserExceptionDispatcher = 1,
  SharedNtdll32KiUserApcDispatcher = 2,
  SharedNtdll32KiUserCallbackDispatcher = 3,
  SharedNtdll32RtlUserThreadStart = 4,
  SharedNtdll32pQueryProcessDebugInformationRemote = 5,
  SharedNtdll32BaseAddress = 6,
  SharedNtdll32LdrSystemDllInitBlock = 7,
  SharedNtdll32RtlpFreezeTimeBias = 8,
  Wow64SharedPageEntriesCount = 9,
} WOW64_SHARED_INFORMATION, *PWOW64_SHARED_INFORMATION;

typedef struct _MI_ACCESS_LOG_STATE
{
  /* 0x0000 */ struct _MM_PAGE_ACCESS_INFO_HEADER* volatile CcAccessLog;
  /* 0x0004 */ struct _WORK_QUEUE_ITEM DisableAccessLogging;
  /* 0x0014 */ unsigned long Enabled;
  /* 0x0018 */ unsigned long MinLoggingPriority;
  /* 0x001c */ long Padding_44[9];
  /* 0x0040 */ unsigned long AccessLoggingLock;
  /* 0x0044 */ long __PADDING__[15];
} MI_ACCESS_LOG_STATE, *PMI_ACCESS_LOG_STATE; /* size: 0x0080 */

typedef enum _MI_KSTACK_TYPE
{
  MiRegularKstack = 0,
  MiShortLivedKstack = 1,
  MiMaximumKstack = 2,
} MI_KSTACK_TYPE, *PMI_KSTACK_TYPE;

typedef struct _XSTATE_FEATURE
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE; /* size: 0x0008 */

typedef struct _HANDLE_TABLE_ENTRY_INFO
{
  /* 0x0000 */ unsigned long AuditMask;
  /* 0x0004 */ unsigned long MaxRelativeAccessMask;
} HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO; /* size: 0x0008 */

typedef enum _ETW_GUID_TYPE
{
  EtwTraceGuidType = 0,
  EtwNotificationGuidType = 1,
  EtwGroupGuidType = 2,
  EtwGuidTypeMax = 3,
} ETW_GUID_TYPE, *PETW_GUID_TYPE;

typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PlatformId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Timestamp : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PartitionId : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS; /* size: 0x0004 */

typedef enum _EXT_IOMMU_DEVICE_TYPE
{
  EXT_IOMMU_DEVICE_TYPE_INVALID = 0,
  EXT_IOMMU_DEVICE_TYPE_PCI = 1,
  EXT_IOMMU_DEVICE_TYPE_ACPI = 2,
  EXT_IOMMU_DEVICE_TYPE_IOAPIC = 3,
  EXT_IOMMU_DEVICE_TYPE_LOGICAL = 4,
  EXT_IOMMU_DEVICE_TYPE_GIC = 5,
  EXT_IOMMU_DEVICE_TYPE_TEST = 6,
  EXT_IOMMU_DEVICE_TYPE_MAX = 7,
} EXT_IOMMU_DEVICE_TYPE, *PEXT_IOMMU_DEVICE_TYPE;

typedef enum _POP_DEEP_SLEEP_DISENGAGE_REASON
{
  PopDeepSleepDisengageReasonInactive = 0,
  PopDeepSleepDisengageReasonNonAoAc = 1,
  PopDeepSleepDisengageReasonPendingIrps = 2,
  PopDeepSleepDisengageReasonPowerSettings = 3,
  PopDeepSleepDisengageReasonDozeS4WorkerQueued = 4,
  PopDeepSleepDisengageReasonSystemPowerTransition = 5,
  PopDeepSleepDisengageReasonDeviceBlockingDrips = 6,
  PopDeepSleepDisengageReasonAcpi = 7,
  PopDeepSleepDisengageReasonDirectedDripsTransition = 8,
  PopDeepSleepDisengageReasonPepPreVeto = 9,
  PopDeepSleepDisengageReasonMax = 10,
} POP_DEEP_SLEEP_DISENGAGE_REASON, *PPOP_DEEP_SLEEP_DISENGAGE_REASON;

typedef enum _KI_CALLBACK
{
  KiCallbackNmi = 0,
  KiCallbackBound = 1,
  KiCallbackSx = 2,
  KiCallbackCount = 3,
  KiFirstCallback = 0,
} KI_CALLBACK, *PKI_CALLBACK;

typedef struct _MI_COMBINE_WORKITEM
{
  /* 0x0000 */ void* NextEntry;
  /* 0x0004 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_COMBINE_WORKITEM, *PMI_COMBINE_WORKITEM; /* size: 0x0014 */

enum INTERRUPT_CONNECTION_TYPE
{
  InterruptTypeControllerInput = 0,
  InterruptTypeXapicMessage = 1,
  InterruptTypeHypertransport = 2,
  InterruptTypeMessageRequest = 3,
};

enum HAL_APIC_DESTINATION_MODE
{
  ApicDestinationModePhysical = 1,
  ApicDestinationModeLogicalFlat = 2,
  ApicDestinationModeLogicalClustered = 3,
  ApicDestinationModeUnknown = 4,
};

typedef struct _EXHANDLE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long TagBits : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long Index : 30; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ void* GenericHandleOverlay;
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} EXHANDLE, *PEXHANDLE; /* size: 0x0004 */

typedef union _HANDLE_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ volatile long VolatileLowValue;
    /* 0x0000 */ long LowValue;
    struct
    {
      /* 0x0000 */ struct _HANDLE_TABLE_ENTRY_INFO* volatile InfoTable;
      union
      {
        /* 0x0004 */ long HighValue;
        /* 0x0004 */ union _HANDLE_TABLE_ENTRY* NextFreeHandleEntry;
        /* 0x0004 */ struct _EXHANDLE LeafHandleValue;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Unlocked : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long Attributes : 2; /* bit position: 1 */
        /* 0x0000 */ unsigned long ObjectPointerBits : 29; /* bit position: 3 */
      }; /* bitfield */
      union
      {
        /* 0x0004 */ long RefCountField;
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long GrantedAccessBits : 25; /* bit position: 0 */
          /* 0x0004 */ unsigned long ProtectFromClose : 1; /* bit position: 25 */
          /* 0x0004 */ unsigned long NoRightsUpgrade : 1; /* bit position: 26 */
          /* 0x0004 */ unsigned long RefCnt : 5; /* bit position: 27 */
        }; /* bitfield */
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY; /* size: 0x0008 */

typedef enum _KWAIT_STATE
{
  WaitInProgress = 0,
  WaitCommitted = 1,
  WaitAborted = 2,
  WaitSuspendInProgress = 3,
  WaitSuspended = 4,
  WaitResumeInProgress = 5,
  WaitResumeAborted = 6,
  WaitFirstSuspendState = 3,
  WaitLastSuspendState = 6,
  MaximumWaitState = 7,
} KWAIT_STATE, *PKWAIT_STATE;

typedef enum _MI_SUBVAD_LISTS
{
  MiSubVadPebTebAny = 0,
  MiSubVadMaximum = 1,
} MI_SUBVAD_LISTS, *PMI_SUBVAD_LISTS;

typedef enum _POLICY_AUDIT_EVENT_TYPE
{
  AuditCategorySystem = 0,
  AuditCategoryLogon = 1,
  AuditCategoryObjectAccess = 2,
  AuditCategoryPrivilegeUse = 3,
  AuditCategoryDetailedTracking = 4,
  AuditCategoryPolicyChange = 5,
  AuditCategoryAccountManagement = 6,
  AuditCategoryDirectoryServiceAccess = 7,
  AuditCategoryAccountLogon = 8,
} POLICY_AUDIT_EVENT_TYPE, *PPOLICY_AUDIT_EVENT_TYPE;

typedef struct _wil_details_UsageSubscriptionData
{
  /* 0x0000 */ unsigned int featureId;
  /* 0x0004 */ unsigned short serviceReportingKind;
  /* 0x0006 */ char __PADDING__[2];
} wil_details_UsageSubscriptionData, *Pwil_details_UsageSubscriptionData; /* size: 0x0008 */

typedef enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef struct _MMPTE_SUBSECTION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Unused0 : 3; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Unused1 : 21; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 SubsectionAddress : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_SUBSECTION, *PMMPTE_SUBSECTION; /* size: 0x0008 */

typedef enum _PO_CS_DEVICE_NOTIFICATION_TYPE
{
  PoCsDeviceNotificationStorage = 0,
  PoCsDeviceNotificationWiFi = 1,
  PoCsDeviceNotificationMbn = 2,
  PoCsDeviceNotificationAudio = 3,
  PoCsDeviceNotificationEthernet = 4,
  PoCsDeviceNotificationMaximum = 5,
} PO_CS_DEVICE_NOTIFICATION_TYPE, *PPO_CS_DEVICE_NOTIFICATION_TYPE;

typedef enum _MI_VAD_64K_TYPES
{
  MiVad64KPrivate = 0,
  MiVad64KShared = 1,
  MiVad64KTypes = 2,
} MI_VAD_64K_TYPES, *PMI_VAD_64K_TYPES;

typedef enum _EXQUEUEINDEX
{
  ExPoolUntrusted = 0,
  IoPoolUntrusted = 1,
  ExPoolMax = 8,
} EXQUEUEINDEX, *PEXQUEUEINDEX;

typedef struct _HEAP_EXTENDED_ENTRY
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short FunctionIndex;
      /* 0x0002 */ unsigned short ContextValue;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long InterceptorValue;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short UnusedBytesLength;
  /* 0x0006 */ unsigned char EntryOffset;
  /* 0x0007 */ unsigned char ExtendedBlockSignature;
} HEAP_EXTENDED_ENTRY, *PHEAP_EXTENDED_ENTRY; /* size: 0x0008 */

typedef struct _ACPI_METHOD_ARGUMENT_V1
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short DataLength;
  union
  {
    /* 0x0004 */ unsigned long Argument;
    struct
    {
      /* 0x0004 */ unsigned char Data[1];
      /* 0x0005 */ char __PADDING__[3];
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} ACPI_METHOD_ARGUMENT_V1, *PACPI_METHOD_ARGUMENT_V1; /* size: 0x0008 */

typedef enum _KPROCESS_STATE
{
  ProcessInMemory = 0,
  ProcessOutOfMemory = 1,
  ProcessInTransition = 2,
  ProcessOutTransition = 3,
  ProcessInSwap = 4,
  ProcessOutSwap = 5,
  ProcessRetryOutSwap = 6,
  ProcessAllSwapStates = 7,
} KPROCESS_STATE, *PKPROCESS_STATE;

typedef struct _POP_FX_ACTIVE_TIME_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 Total;
  /* 0x0008 */ unsigned __int64 Unattributed;
  /* 0x0010 */ unsigned __int64 Buckets[5];
  /* 0x0038 */ unsigned __int64 PerBucket[5];
} POP_FX_ACTIVE_TIME_ACCOUNTING, *PPOP_FX_ACTIVE_TIME_ACCOUNTING; /* size: 0x0060 */

typedef struct _POP_FX_ACCOUNTING
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned char Active;
  /* 0x0005 */ char Padding_45[3];
  /* 0x0008 */ unsigned long DripsRequiredState;
  /* 0x000c */ long Level;
  /* 0x0010 */ __int64 ActiveStamp;
  /* 0x0018 */ struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsActiveTimeAccounting;
  /* 0x0078 */ struct _POP_FX_ACTIVE_TIME_ACCOUNTING CsCriticalActiveTimeAccounting;
} POP_FX_ACCOUNTING, *PPOP_FX_ACCOUNTING; /* size: 0x00d8 */

typedef enum _KENLISTMENT_STATE
{
  KEnlistmentUninitialized = 0,
  KEnlistmentActive = 256,
  KEnlistmentPreparing = 257,
  KEnlistmentPrepared = 258,
  KEnlistmentInDoubt = 259,
  KEnlistmentCommitted = 260,
  KEnlistmentCommittedNotify = 261,
  KEnlistmentCommitRequested = 262,
  KEnlistmentAborted = 263,
  KEnlistmentDelegated = 264,
  KEnlistmentDelegatedDisconnected = 265,
  KEnlistmentPrePreparing = 266,
  KEnlistmentForgotten = 267,
  KEnlistmentRecovering = 268,
  KEnlistmentAborting = 269,
  KEnlistmentReadOnly = 270,
  KEnlistmentOutcomeUnavailable = 271,
  KEnlistmentOffline = 272,
  KEnlistmentPrePrepared = 273,
  KEnlistmentInitialized = 274,
} KENLISTMENT_STATE, *PKENLISTMENT_STATE;

typedef struct _SID_IDENTIFIER_AUTHORITY
{
  /* 0x0000 */ unsigned char Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; /* size: 0x0006 */

typedef enum _ADD_DRIVER_STAGE
{
  ClassConfigFilters = 0,
  LowerDeviceFilters = 1,
  LowerClassFilters = 2,
  DeviceService = 3,
  UpperDeviceFilters = 4,
  UpperClassFilters = 5,
  MaximumAddStage = 6,
} ADD_DRIVER_STAGE, *PADD_DRIVER_STAGE;

typedef enum _CS_OVERRIDE_SETTING
{
  CsOverrideSettingDisabled = 0,
  CsOverrideSettingEnablePreVb = 1,
  CsOverrideSettingEnableAll = 2,
  CsOverrideSettingMax = 2,
} CS_OVERRIDE_SETTING, *PCS_OVERRIDE_SETTING;

typedef struct _HEAP_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned short TagIndex;
  /* 0x000e */ unsigned short CreatorBackTraceIndex;
  /* 0x0010 */ wchar_t TagName[24];
} HEAP_TAG_ENTRY, *PHEAP_TAG_ENTRY; /* size: 0x0040 */

typedef struct _MI_SYSTEM_PTE_TYPE
{
  /* 0x0000 */ struct _RTL_BITMAP Bitmap;
  /* 0x0008 */ struct _MMPTE* BasePte;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ enum _MI_SYSTEM_VA_TYPE VaType;
  /* 0x0014 */ unsigned long* FailureCount;
  /* 0x0018 */ unsigned long PteFailures;
  union
  {
    /* 0x001c */ unsigned long SpinLock;
    /* 0x001c */ struct _EX_PUSH_LOCK* GlobalPushLock;
  }; /* size: 0x0004 */
  /* 0x0020 */ volatile unsigned long TotalSystemPtes;
  /* 0x0024 */ unsigned long Hint;
  /* 0x0028 */ unsigned long LowestBitEverAllocated;
  /* 0x002c */ volatile struct _MI_CACHED_PTES* CachedPtes;
  /* 0x0030 */ volatile unsigned long TotalFreeSystemPtes;
} MI_SYSTEM_PTE_TYPE, *PMI_SYSTEM_PTE_TYPE; /* size: 0x0034 */

enum TlgOut_t
{
  TlgOutNULL = 0,
  TlgOutNOPRINT = 1,
  TlgOutSTRING = 2,
  TlgOutBOOLEAN = 3,
  TlgOutHEX = 4,
  TlgOutPID = 5,
  TlgOutTID = 6,
  TlgOutPORT = 7,
  TlgOutIPV4 = 8,
  TlgOutIPV6 = 9,
  TlgOutSOCKETADDRESS = 10,
  TlgOutXML = 11,
  TlgOutJSON = 12,
  TlgOutWIN32ERROR = 13,
  TlgOutNTSTATUS = 14,
  TlgOutHRESULT = 15,
  TlgOutFILETIME = 16,
  TlgOutSIGNED = 17,
  TlgOutUNSIGNED = 18,
  TlgOutUTF8 = 35,
  TlgOutPKCS7_WITH_TYPE_INFO = 36,
  TlgOutCODE_POINTER = 37,
  TlgOutDATETIME_UTC = 38,
  _TlgOutMax = 39,
  _TlgOutChain = 128,
  _TlgOutTypeMask = 127,
};

typedef enum _MI_IO_PFN_TYPE
{
  MiIoPfnProbes = 0,
  MiIoPfnMaps = 1,
  MiMaximumIoPfnType = 2,
} MI_IO_PFN_TYPE, *PMI_IO_PFN_TYPE;

typedef struct _MMPTE_HIGHLOW
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ unsigned long HighPart;
} MMPTE_HIGHLOW, *PMMPTE_HIGHLOW; /* size: 0x0008 */

typedef enum _TRACE_INFORMATION_CLASS
{
  TraceIdClass = 0,
  TraceHandleClass = 1,
  TraceEnableFlagsClass = 2,
  TraceEnableLevelClass = 3,
  GlobalLoggerHandleClass = 4,
  EventLoggerHandleClass = 5,
  AllLoggerHandlesClass = 6,
  TraceHandleByNameClass = 7,
  LoggerEventsLostClass = 8,
  TraceSessionSettingsClass = 9,
  LoggerEventsLoggedClass = 10,
  DiskIoNotifyRoutinesClass = 11,
  TraceInformationClassReserved1 = 12,
  AllPossibleNotifyRoutinesClass = 12,
  FltIoNotifyRoutinesClass = 13,
  TraceInformationClassReserved2 = 14,
  WdfNotifyRoutinesClass = 15,
  MaxTraceInformationClass = 16,
} TRACE_INFORMATION_CLASS, *PTRACE_INFORMATION_CLASS;

typedef struct _HEAP_UNPACKED_ENTRY
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short Size;
      /* 0x0002 */ unsigned char Flags;
      /* 0x0003 */ unsigned char SmallTagIndex;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long SubSegmentCode;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned short PreviousSize;
  union
  {
    /* 0x0006 */ unsigned char SegmentOffset;
    /* 0x0006 */ unsigned char LFHFlags;
  }; /* size: 0x0001 */
  /* 0x0007 */ unsigned char UnusedBytes;
} HEAP_UNPACKED_ENTRY, *PHEAP_UNPACKED_ENTRY; /* size: 0x0008 */

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef struct _PEP_CRASHDUMP_INFORMATION
{
  /* 0x0000 */ struct PEPHANDLE__* DeviceHandle;
  /* 0x0004 */ void* DeviceContext;
} PEP_CRASHDUMP_INFORMATION, *PPEP_CRASHDUMP_INFORMATION; /* size: 0x0008 */

typedef struct _SID
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char SubAuthorityCount;
  /* 0x0002 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* 0x0008 */ unsigned long SubAuthority[1];
} SID, *PSID; /* size: 0x000c */

typedef struct _FILE_GET_QUOTA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long SidLength;
  /* 0x0008 */ struct _SID Sid;
} FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION; /* size: 0x0014 */

typedef enum _MI_PARTITION_THREAD
{
  MiZeroPageThreadSlot = 0,
  MiRebuildLargePagesThreadSlot = 1,
  MiPartitionWorkingSetManagerSlot = 2,
  MiDereferenceSegmentThreadSlot = 3,
  MiModifiedPageWriterSlot = 4,
  MiMappedPageWriterSlot = 5,
  MiNumberOfPartitionThreads = 6,
} MI_PARTITION_THREAD, *PMI_PARTITION_THREAD;

typedef struct _POP_FX_IDLE_STATE
{
  /* 0x0000 */ unsigned __int64 TransitionLatency;
  /* 0x0008 */ unsigned __int64 ResidencyRequirement;
  /* 0x0010 */ unsigned long NominalPower;
  /* 0x0014 */ long __PADDING__[1];
} POP_FX_IDLE_STATE, *PPOP_FX_IDLE_STATE; /* size: 0x0018 */

typedef enum _PERFINFO_MM_STAT
{
  PerfInfoMMStatNotUsed = 0,
  PerfInfoMMStatAggregatePageCombine = 1,
  PerfInfoMMStatIterationPageCombine = 2,
  PerfInfoMMStatMax = 3,
} PERFINFO_MM_STAT, *PPERFINFO_MM_STAT;

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ unsigned long FileAttributes;
  /* 0x0034 */ long __PADDING__[1];
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION; /* size: 0x0038 */

typedef enum _MI_WRITE_TYPES
{
  WriteTypeCached = 0,
  WriteTypeNonTemporal = 1,
  WriteTypeMaximum = 2,
} MI_WRITE_TYPES, *PMI_WRITE_TYPES;

typedef struct _HEAP_ENTRY_EXTRA
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short AllocatorBackTraceIndex;
      /* 0x0002 */ unsigned short TagIndex;
      /* 0x0004 */ unsigned long Settable;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 ZeroInit;
  }; /* size: 0x0008 */
} HEAP_ENTRY_EXTRA, *PHEAP_ENTRY_EXTRA; /* size: 0x0008 */

typedef struct _HEAP_ENTRY
{
  union
  {
    /* 0x0000 */ struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      /* 0x0000 */ unsigned short Size;
      /* 0x0002 */ unsigned char Flags;
      /* 0x0003 */ unsigned char SmallTagIndex;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long SubSegmentCode;
      /* 0x0004 */ unsigned short PreviousSize;
      union
      {
        /* 0x0006 */ unsigned char SegmentOffset;
        struct
        {
          /* 0x0006 */ unsigned char LFHFlags;
          /* 0x0007 */ unsigned char UnusedBytes;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0008 */
    /* 0x0000 */ struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      /* 0x0000 */ unsigned short FunctionIndex;
      /* 0x0002 */ unsigned short ContextValue;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long InterceptorValue;
      /* 0x0004 */ unsigned short UnusedBytesLength;
      /* 0x0006 */ unsigned char EntryOffset;
      /* 0x0007 */ unsigned char ExtendedBlockSignature;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long Code1;
      union
      {
        struct
        {
          /* 0x0004 */ unsigned short Code2;
          /* 0x0006 */ unsigned char Code3;
          /* 0x0007 */ unsigned char Code4;
        }; /* size: 0x0004 */
        /* 0x0004 */ unsigned long Code234;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 AgregateCode;
  }; /* size: 0x0008 */
} HEAP_ENTRY, *PHEAP_ENTRY; /* size: 0x0008 */

typedef struct _HEAP_VIRTUAL_ALLOC_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0008 */ struct _HEAP_ENTRY_EXTRA ExtraStuff;
  /* 0x0010 */ unsigned long CommitSize;
  /* 0x0014 */ unsigned long ReserveSize;
  /* 0x0018 */ struct _HEAP_ENTRY BusyBlock;
} HEAP_VIRTUAL_ALLOC_ENTRY, *PHEAP_VIRTUAL_ALLOC_ENTRY; /* size: 0x0020 */

typedef struct _WNF_LOCK
{
  /* 0x0000 */ struct _EX_PUSH_LOCK PushLock;
} WNF_LOCK, *PWNF_LOCK; /* size: 0x0004 */

enum PDCCLIENTID
{
  PDC_INVALID_CLIENT = 0,
  PDC_PLM_CLIENT = 1,
  PDC_NQM_CLIENT = 2,
  PDC_WNS_CLIENT = 3,
  PDC_DAM_CLIENT = 4,
  PDC_WCM_CLIENT = 5,
  PDC_NCSI_CLIENT = 7,
  PDC_DHCP_CLIENT = 8,
  PDC_TCPIP_CLIENT = 9,
  PDC_WU_CLIENT = 11,
  PDC_GP_CLIENT = 12,
  PDC_NCA_CLIENT = 14,
  PDC_BI_CLIENT = 15,
  PDC_MSCHED_CLIENT = 16,
  PDC_SUSPENDRESUME_CLIENT = 17,
  PDC_INTERNAL_CLIENT = 18,
  PDC_DEFAULT_KM_TEST_CLIENT_EXEMPTED = 19,
  PDC_DEFAULT_UM_TEST_CLIENT_EXEMPTED = 20,
  PDC_DAM_PHASE_TEST_CLIENT = 21,
  PDC_LOW_POWER_PHASE_TEST_CLIENT = 22,
  PDC_RESILIENCY_NOTIFICATION_PHASE_TEST_CLIENT = 23,
  PDC_NQM_RESILIENCY_TEST_CLIENT = 24,
  PDC_DAM_RESILIENCY_TEST_CLIENT = 25,
  PDC_DAM_KM_TEST_CLIENT = 26,
  PDC_DAM_UM_TEST_CLIENT = 27,
  PDC_SINGLETON_TEST_CLIENT = 28,
  PDC_NETWORK_SERVICE_TEST_CLIENT = 29,
  PDC_NETWORK_SERVICE2_TEST_CLIENT = 30,
  PDC_SYSTEM_SERVICE_TEST_CLIENT = 31,
  PDC_ACTIV_NOTIF_DAM_RESIL_TEST_CLIENT = 32,
  PDC_ACTIV_NOTIF_NET_RESIL_TEST_CLIENT = 33,
  PDC_SHELL_CLIENT = 34,
  PDC_MAINTENANCE_CLIENT = 35,
  PDC_SYNC_CLIENT = 36,
  PDC_IDM_CLIENT = 37,
  PDC_CORTANA_VOICE_ACTIVATION_CLIENT = 38,
  PDC_TETHERING_CLIENT = 39,
  PDC_AUDIO_CLIENT = 40,
  PDC_LOCK_SCREEN = 41,
  PDC_LREC_CLIENT = 42,
  PDC_WP_BW_CLIENT = 43,
  PDC_WP_MEDIA_STREAMING_CLIENT = 44,
  PDC_WP_MAPS_CLIENT = 46,
  PDC_WP_SYNC_CLIENT = 47,
  PDC_SETTING_SYNC_CLIENT = 48,
  PDC_WP_EDM_CLIENT = 49,
  PDC_WP_WALLET_CLIENT = 50,
  PDC_WP_LOCATION_CLIENT = 51,
  PDC_WP_CM_CLIENT = 53,
  PDC_WP_DCP_CLIENT = 54,
  PDC_WP_WIFIAUTO_CLIENT = 55,
  PDC_BITLOCKER_CLIENT = 56,
  PDC_MDM_CERTINSTALLER_CLIENT = 57,
  PDC_WP_IM_CLIENT = 58,
  PDC_WP_MMS_CLIENT = 59,
  PDC_DEVICEENROLLER_CLIENT = 60,
  PDC_WP_WIFI_SCANNING_CLIENT = 61,
  PDC_WP_OMADM_CLIENT = 62,
  PDC_WP_TELEMETRY_CHECK_CLIENT = 63,
  PDC_WP_DIS_CLIENT = 64,
  PDC_BITS_CLIENT = 65,
  PDC_WP_VOIP_EXECUTION_CLIENT = 66,
  PDC_WP_RESERVED_CLIENT3 = 67,
  PDC_SLEEP_STUDY_CLIENT = 68,
  PDC_WP_AUTOTIMEUPDATE_CLIENT = 69,
  PDC_HYPERV_CLIENT = 70,
  PDC_KM_SIGNAL_CLIENT = 71,
  PDC_UM_SIGNAL_CLIENT = 72,
  PDC_DEVICE_HEALTH_ATTESTATION_CLIENT = 73,
  PDC_XB_SYSTEM_CLIENT = 74,
  PDC_XB_HOST_CLIENT = 75,
  PDC_PRINT_JOB_MANAGER_CLIENT = 76,
  PDC_TELEMETRY_CLIENT = 77,
  PDC_ERROR_REPORTING_CLIENT = 78,
  PDC_XBOX_NTM = 79,
  PDC_CBE_CLIENT = 80,
  PDC_FIND_MY_PHONE_CLIENT = 81,
  PDC_COMMAND_CHANNEL_CLIENT = 82,
  PDC_PPM_PROFILES_CLIENT = 83,
  PDC_WIFI_CALLING_CLIENT = 84,
  PDC_WU_REBOOT_CLIENT = 85,
  PDC_SYSMAIN_CLIENT = 86,
  PDC_XBOX_UPDATE_CLIENT = 87,
  PDC_CHAT_SERVICE_CLIENT = 88,
  PDC_FIND_MY_DEVICE_CLIENT = 89,
  PDC_NOTIFICATION_FORWARDING_AND_ACTION_CLIENT = 90,
  PDC_INSTALL_AGENT_CLIENT = 91,
  PDC_XBOX_WAKE_ON_VOICE = 92,
  PDC_PLM_AUDIO_CLIENT = 93,
  PDC_WP_BCKAUDIO_CLIENT = 94,
  PDC_WAKE_ON_LAN_CLIENT = 95,
  PDC_WP_CLOUD_MESSAGING_CLIENT = 96,
  PDC_DATA_MIGRATION_MANAGER = 97,
  PDC_EVENT_SOUND_MANAGER_CLIENT = 98,
  PDC_WWAN_DORMANCY_HINT_CLIENT = 99,
  PDC_HAM_CLIENT = 100,
  PDC_FILESHARINGSERVER_CLIENT = 101,
  PDC_DIRECTED_DRIPS_TASK_CLIENT = 102,
  PDC_DIRECTED_DRIPS_LPE_CLIENT = 103,
  PDC_DIRECTED_DRIPS_PLM_CLIENT = 104,
  PDC_HTTPSDATASOURCE_CLIENT = 105,
  PDC_TERMINALSERVER_CONNECTION_CLIENT = 106,
  PDC_TERMINALSERVER_SESSION_CLIENT = 107,
  PDC_ANYNETWORK_RESILIENCY_CLIENT = 108,
  PDC_XBOX_NUI_CLIENT = 110,
  PDC_WIFI_CALLING_IMS_CLIENT = 111,
  PDC_SLEEPSTUDY_HELPER_USER_CLIENT = 112,
  PDC_SLEEPSTUDY_HELPER_KERNEL_CLIENT = 113,
  PDC_CONTAINER_MANAGER_CLIENT = 114,
  PDC_NUMBER_OF_CLIENTS = 115,
};

enum SLEEPSTUDY_SPM_SCENARIO_CS_EXIT
{
  SpmScenarioStopReasonUnspecified = 16,
  SpmScenarioStopReasonCsExit = 17,
  SpmScenarioStopReasonInternalSegmentTransition = 18,
  SpmScenarioStopReasonMax = 19,
};

enum PROFILE_DEPARTURE_STYLE
{
  PDS_UPDATE_DEFAULT = 1,
  PDS_UPDATE_ON_REMOVE = 2,
  PDS_UPDATE_ON_INTERFACE = 3,
  PDS_UPDATE_ON_EJECT = 4,
};

typedef struct _THERMAL_INFORMATION_EX
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ unsigned long SamplingPeriod;
  /* 0x0010 */ unsigned long CurrentTemperature;
  /* 0x0014 */ unsigned long PassiveTripPoint;
  /* 0x0018 */ unsigned long ThermalStandbyTripPoint;
  /* 0x001c */ unsigned long CriticalTripPoint;
  /* 0x0020 */ unsigned char ActiveTripPointCount;
  /* 0x0021 */ unsigned char PassiveCoolingDevicesPresent;
  /* 0x0022 */ char Padding_46[2];
  /* 0x0024 */ unsigned long ActiveTripPoint[10];
  /* 0x004c */ unsigned long S4TransitionTripPoint;
  /* 0x0050 */ unsigned long MinimumThrottle;
  /* 0x0054 */ unsigned long OverThrottleThreshold;
  /* 0x0058 */ unsigned long PollingPeriod;
} THERMAL_INFORMATION_EX, *PTHERMAL_INFORMATION_EX; /* size: 0x005c */

enum LSA_FOREST_TRUST_RECORD_TYPE
{
  ForestTrustTopLevelName = 0,
  ForestTrustTopLevelNameEx = 1,
  ForestTrustDomainInfo = 2,
  ForestTrustRecordTypeLast = 2,
};

typedef struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned long CompletionFlags;
  /* 0x0008 */ long MethodStatus;
  /* 0x000c */ void* CompletionContext;
  /* 0x0010 */ unsigned long OutputArgumentSize;
  /* 0x0014 */ struct _ACPI_METHOD_ARGUMENT_V1* OutputArguments;
} PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE, *PPEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE; /* size: 0x0018 */

typedef union _POP_FX_DEVICE_STATUS
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long SystemTransition : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PepD0Notify : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long IdleTimerOn : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long IgnoreIdleTimeout : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long IrpInUse : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long IrpPending : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long DPNRDeviceNotified : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long DPNRReceivedFromPep : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long IrpFirstPendingIndex : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long IrpLastPendingIndex : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long SIrpBlocked : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long BlockFastResume : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long DirectedPoweredDown : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long DirectedTransitionInProgress : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned long Reserved : 18; /* bit position: 14 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} POP_FX_DEVICE_STATUS, *PPOP_FX_DEVICE_STATUS; /* size: 0x0004 */

typedef enum _KRESOURCEMANAGER_STATE
{
  KResourceManagerUninitialized = 0,
  KResourceManagerOffline = 1,
  KResourceManagerOnline = 2,
} KRESOURCEMANAGER_STATE, *PKRESOURCEMANAGER_STATE;

typedef enum _THREAD_WORKLOAD_CLASS
{
  ThreadWorkloadClassDefault = 0,
  ThreadWorkloadClassGraphics = 1,
  MaxThreadWorkloadClass = 2,
} THREAD_WORKLOAD_CLASS, *PTHREAD_WORKLOAD_CLASS;

typedef enum _SEP_CACHED_HANDLES_ENTRY_TYPE
{
  SepCachedHandlesEntryLowbox = 0,
  SepCachedHandlesEntryBnoIsolation = 1,
} SEP_CACHED_HANDLES_ENTRY_TYPE, *PSEP_CACHED_HANDLES_ENTRY_TYPE;

typedef struct _WNF_SILODRIVERSTATE
{
  /* 0x0000 */ struct _WNF_SCOPE_MAP* ScopeMap;
  /* 0x0004 */ void* volatile PermanentNameStoreRootKey;
  /* 0x0008 */ void* volatile PersistentNameStoreRootKey;
  /* 0x000c */ long Padding_47;
  /* 0x0010 */ volatile __int64 PermanentNameSequenceNumber;
  /* 0x0018 */ struct _WNF_LOCK PermanentNameSequenceNumberLock;
  /* 0x001c */ long Padding_48;
  /* 0x0020 */ volatile __int64 PermanentNameSequenceNumberPool;
  /* 0x0028 */ volatile __int64 RuntimeNameSequenceNumber;
} WNF_SILODRIVERSTATE, *PWNF_SILODRIVERSTATE; /* size: 0x0030 */

typedef enum _MI_CROSS_PARTITION_CHARGE_TYPE
{
  MiCrossPartitionSectionResAvailCharge = 0,
  MiCrossPartitionSectionCommitCharge = 1,
  MiCrossPartitionPageCombineResAvailCharge = 2,
  MiCrossPartitionPageCombineCommitCharge = 3,
  MiCrossPartitionLargePageResAvailCharge = 4,
  MiCrossPartitionLargePageCommitCharge = 5,
  MiCrossPartitionPageCloneResAvailCharge = 6,
  MiCrossPartitionMaximumCharge = 7,
} MI_CROSS_PARTITION_CHARGE_TYPE, *PMI_CROSS_PARTITION_CHARGE_TYPE;

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0004 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0008 */

typedef enum _HV_EXT_EPF_MODE
{
  HvExtEpfModeMin = 0,
  HvExtEpfModeNt = 0,
  HvExtEpfModeMax = 1,
} HV_EXT_EPF_MODE, *PHV_EXT_EPF_MODE;

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0005 */ char Padding_49[3];
  /* 0x0008 */ void* SsHandle;
  /* 0x000c */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0014 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x001c */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0024 */ void* EntryInProgress;
  /* 0x0028 */ unsigned char ShutdownInProgress;
  /* 0x0029 */ char Padding_50[3];
  /* 0x002c */ void* ShutdownThreadId;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0030 */

typedef enum _POP_POWER_ACTION_WATCHDOG_STATE
{
  PopPowerActionWatchdogStateDisabled = 0,
  PopPowerActionWatchdogStateTransitioning = 1,
  PopPowerActionWatchdogStateResuming = 2,
  PopPowerActionWatchdogStateMax = 3,
} POP_POWER_ACTION_WATCHDOG_STATE, *PPOP_POWER_ACTION_WATCHDOG_STATE;

typedef enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE
{
  SystemFeatureConfigurationSectionTypeBoot = 0,
  SystemFeatureConfigurationSectionTypeRuntime = 1,
  SystemFeatureConfigurationSectionTypeUsageTriggers = 2,
  SystemFeatureConfigurationSectionTypeCount = 3,
} SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE, *PSYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;

typedef enum _PPM_PERF_QOS_DISABLE_REASON
{
  PpmPerfQosDisableInternal = 0,
  PpmPerfQosDisableNoProfile = 1,
  PpmPerfQosDisableNoPolicy = 2,
  PpmPerfQosDisableInsufficientPolicy = 3,
  PpmPerfQosDisableMaxOverride = 4,
  PpmPerfQosDisableLowLatency = 5,
  PpmPerfQosDisableSmtScheduler = 6,
  PpmPerfQosDisableNoHardwareSupport = 7,
  PpmPerfQosDisableGroupPolicy = 8,
  PpmPerfQosDisableMax = 9,
} PPM_PERF_QOS_DISABLE_REASON, *PPPM_PERF_QOS_DISABLE_REASON;

typedef enum _MI_VAD_ALLOCATION_CELL_TYPE
{
  MiVadBottomUp = 0,
  MiVadStackPebTeb = 1,
  MiVadAllocationCellMaximum = 2,
} MI_VAD_ALLOCATION_CELL_TYPE, *PMI_VAD_ALLOCATION_CELL_TYPE;

typedef enum _ConnectionResourceConsumerDesc
{
  ConnectionResourceConsumerDescIsUndefined = 0,
  ConnectionResourceConsumerDescIsDevice = 1,
  ConnectionResourceConsumerDescIsOpregion = 2,
  ConnectionResourceConsumerDescMax = 3,
} ConnectionResourceConsumerDesc, *PConnectionResourceConsumerDesc;

typedef enum _PROCESS_TERMINATE_REQUEST_REASON
{
  ProcessTerminateRequestReasonNone = 0,
  ProcessTerminateCommitFail = 1,
  ProcessTerminateWriteToExecuteMemory = 2,
  ProcessTerminateAttachedWriteToExecuteMemory = 3,
  ProcessTerminateRequestReasonMax = 4,
} PROCESS_TERMINATE_REQUEST_REASON, *PPROCESS_TERMINATE_REQUEST_REASON;

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  union
  {
    /* 0x0003 */ unsigned char BitField;
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ImageUsesLargePages : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char IsProtectedProcess : 1; /* bit position: 1 */
      /* 0x0003 */ unsigned char IsImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0003 */ unsigned char SkipPatchingUser32Forwarders : 1; /* bit position: 3 */
      /* 0x0003 */ unsigned char IsPackagedProcess : 1; /* bit position: 4 */
      /* 0x0003 */ unsigned char IsAppContainer : 1; /* bit position: 5 */
      /* 0x0003 */ unsigned char IsProtectedProcessLight : 1; /* bit position: 6 */
      /* 0x0003 */ unsigned char IsLongPathAwareProcess : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0004 */ void* Mutant;
  /* 0x0008 */ void* ImageBaseAddress;
  /* 0x000c */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0010 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0014 */ void* SubSystemData;
  /* 0x0018 */ void* ProcessHeap;
  /* 0x001c */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0020 */ union _SLIST_HEADER* volatile AtlThunkSListPtr;
  /* 0x0024 */ void* IFEOKey;
  union
  {
    /* 0x0028 */ unsigned long CrossProcessFlags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned long ProcessInJob : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned long ProcessInitializing : 1; /* bit position: 1 */
      /* 0x0028 */ unsigned long ProcessUsingVEH : 1; /* bit position: 2 */
      /* 0x0028 */ unsigned long ProcessUsingVCH : 1; /* bit position: 3 */
      /* 0x0028 */ unsigned long ProcessUsingFTH : 1; /* bit position: 4 */
      /* 0x0028 */ unsigned long ProcessPreviouslyThrottled : 1; /* bit position: 5 */
      /* 0x0028 */ unsigned long ProcessCurrentlyThrottled : 1; /* bit position: 6 */
      /* 0x0028 */ unsigned long ProcessImagesHotPatched : 1; /* bit position: 7 */
      /* 0x0028 */ unsigned long ReservedBits0 : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* KernelCallbackTable;
    /* 0x002c */ void* UserSharedInfoPtr;
  }; /* size: 0x0004 */
  /* 0x0030 */ unsigned long SystemReserved;
  /* 0x0034 */ union _SLIST_HEADER* volatile AtlThunkSListPtr32;
  /* 0x0038 */ void* ApiSetMap;
  /* 0x003c */ unsigned long TlsExpansionCounter;
  /* 0x0040 */ void* TlsBitmap;
  /* 0x0044 */ unsigned long TlsBitmapBits[2];
  /* 0x004c */ void* ReadOnlySharedMemoryBase;
  /* 0x0050 */ void* SharedData;
  /* 0x0054 */ void** ReadOnlyStaticServerData;
  /* 0x0058 */ void* AnsiCodePageData;
  /* 0x005c */ void* OemCodePageData;
  /* 0x0060 */ void* UnicodeCaseTableData;
  /* 0x0064 */ unsigned long NumberOfProcessors;
  /* 0x0068 */ unsigned long NtGlobalFlag;
  /* 0x006c */ long Padding_51;
  /* 0x0070 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0078 */ unsigned long HeapSegmentReserve;
  /* 0x007c */ unsigned long HeapSegmentCommit;
  /* 0x0080 */ unsigned long HeapDeCommitTotalFreeThreshold;
  /* 0x0084 */ unsigned long HeapDeCommitFreeBlockThreshold;
  /* 0x0088 */ unsigned long NumberOfHeaps;
  /* 0x008c */ unsigned long MaximumNumberOfHeaps;
  /* 0x0090 */ void** ProcessHeaps;
  /* 0x0094 */ void* GdiSharedHandleTable;
  /* 0x0098 */ void* ProcessStarterHelper;
  /* 0x009c */ unsigned long GdiDCAttributeList;
  /* 0x00a0 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x00a4 */ unsigned long OSMajorVersion;
  /* 0x00a8 */ unsigned long OSMinorVersion;
  /* 0x00ac */ unsigned short OSBuildNumber;
  /* 0x00ae */ unsigned short OSCSDVersion;
  /* 0x00b0 */ unsigned long OSPlatformId;
  /* 0x00b4 */ unsigned long ImageSubsystem;
  /* 0x00b8 */ unsigned long ImageSubsystemMajorVersion;
  /* 0x00bc */ unsigned long ImageSubsystemMinorVersion;
  /* 0x00c0 */ unsigned long ActiveProcessAffinityMask;
  /* 0x00c4 */ unsigned long GdiHandleBuffer[34];
  /* 0x014c */ void* PostProcessInitRoutine /* function */;
  /* 0x0150 */ void* TlsExpansionBitmap;
  /* 0x0154 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x01d4 */ unsigned long SessionId;
  /* 0x01d8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x01e0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x01e8 */ void* pShimData;
  /* 0x01ec */ void* AppCompatInfo;
  /* 0x01f0 */ struct _UNICODE_STRING CSDVersion;
  /* 0x01f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x01fc */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0200 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0204 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0208 */ unsigned long MinimumStackCommit;
  /* 0x020c */ void* SparePointers[4];
  /* 0x021c */ unsigned long SpareUlongs[5];
  /* 0x0230 */ void* WerRegistrationData;
  /* 0x0234 */ void* WerShipAssertPtr;
  /* 0x0238 */ void* pUnused;
  /* 0x023c */ void* pImageHeaderHash;
  union
  {
    /* 0x0240 */ unsigned long TracingFlags;
    struct /* bitfield */
    {
      /* 0x0240 */ unsigned long HeapTracingEnabled : 1; /* bit position: 0 */
      /* 0x0240 */ unsigned long CritSecTracingEnabled : 1; /* bit position: 1 */
      /* 0x0240 */ unsigned long LibLoaderTracingEnabled : 1; /* bit position: 2 */
      /* 0x0240 */ unsigned long SpareTracingBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0244 */ long Padding_52;
  /* 0x0248 */ unsigned __int64 CsrServerReadOnlySharedMemoryBase;
  /* 0x0250 */ unsigned long TppWorkerpListLock;
  /* 0x0254 */ struct _LIST_ENTRY TppWorkerpList;
  /* 0x025c */ void* WaitOnAddressHashTable[128];
  /* 0x045c */ void* TelemetryCoverageHeader;
  /* 0x0460 */ unsigned long CloudFileFlags;
  /* 0x0464 */ unsigned long CloudFileDiagFlags;
  /* 0x0468 */ char PlaceholderCompatibilityMode;
  /* 0x0469 */ char PlaceholderCompatibilityModeReserved[7];
  /* 0x0470 */ struct _LEAP_SECOND_DATA* LeapSecondData;
  union
  {
    /* 0x0474 */ unsigned long LeapSecondFlags;
    struct /* bitfield */
    {
      /* 0x0474 */ unsigned long SixtySecondEnabled : 1; /* bit position: 0 */
      /* 0x0474 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0478 */ unsigned long NtGlobalFlag2;
  /* 0x047c */ long __PADDING__[1];
} PEB, *PPEB; /* size: 0x0480 */

typedef enum _VRF_TRIAGE_CONTEXT
{
  VRF_TRIAGE_CONTEXT_NONE = 0,
  VRF_TRIAGE_CONTEXT_DEFAULT = 1,
  VRF_TRIAGE_CONTEXT_DEVELOPMENT = 1,
  VRF_TRIAGE_CONTEXT_CERTIFICATION = 2,
  VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 3,
  VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 4,
  VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 5,
  NUM_VRF_TRIAGE_CONTEXTS = 6,
} VRF_TRIAGE_CONTEXT, *PVRF_TRIAGE_CONTEXT;

typedef enum _REQUESTER_TYPE
{
  KernelRequester = 0,
  UserProcessRequester = 1,
  UserSharedServiceRequester = 2,
} REQUESTER_TYPE, *PREQUESTER_TYPE;

typedef struct _STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ char* Buffer;
} STRING, *PSTRING; /* size: 0x0008 */

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Length;
  /* 0x0004 */ unsigned long TimeStamp;
  /* 0x0008 */ struct _STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR; /* size: 0x0010 */

typedef enum _KERNEL_STACK_LIMITS
{
  BugcheckStackLimits = 0,
  DPCStackLimits = 1,
  ExpandedStackLimits = 2,
  NormalStackLimits = 3,
  Win32kStackLimits = 4,
  SwapBusyStackLimits = 5,
  IsrStackLimits = 6,
  DebuggerStackLimits = 7,
  NmiStackLimits = 8,
  MachineCheckStackLimits = 9,
  ExceptionStackLimits = 10,
  MaximumStackLimits = 11,
} KERNEL_STACK_LIMITS, *PKERNEL_STACK_LIMITS;

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 5,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

typedef enum _ARBITER_RESULT
{
  ArbiterResultUndefined = -1,
  ArbiterResultSuccess = 0,
  ArbiterResultExternalConflict = 1,
  ArbiterResultNullRequest = 2,
} ARBITER_RESULT, *PARBITER_RESULT;

enum PDC_ACTIVITY_TYPE
{
  PdcNetwork = 0,
  PdcSystem = 1,
  PdcTimer = 2,
  PdcAllNetworks = 3,
  PdcAnyNetwork = 4,
  PdcInvalidActivity = 5,
  PdcMaxActivity = 5,
};

enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
  JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
  JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
  JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
  JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};

typedef enum _MI_INPAGE_SUPPORT_TYPES
{
  MiInPageSupportExpanded = 0,
  MiInPageSupportRegular = 1,
  MiInPageSupportMaximum = 2,
} MI_INPAGE_SUPPORT_TYPES, *PMI_INPAGE_SUPPORT_TYPES;

typedef enum _MI_MIRROR_BITMAP_TYPES
{
  MirrorBitmapTypeNormal = 0,
  MirrorBitmapTypeInterlocked = 1,
  MirrorBitmapTypeMaximum = 2,
} MI_MIRROR_BITMAP_TYPES, *PMI_MIRROR_BITMAP_TYPES;

union wil_details_ReportedState
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int queuedForReporting : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int reportedDeviceUsage : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int reportedDevicePotential : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int reportedDeviceOpportunity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int reportedDevicePotentialOpportunity : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int usageCount : 9; /* bit position: 5 */
      /* 0x0000 */ unsigned int usageCountRepresentsPotential : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned int opportunityCount : 7; /* bit position: 15 */
      /* 0x0000 */ unsigned int opportunityCountRepresentsPotential : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned int unused : 9; /* bit position: 23 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

typedef enum _POP_IO_STATUS
{
  IoReady = 0,
  IoPending = 1,
  IoDone = 2,
} POP_IO_STATUS, *PPOP_IO_STATUS;

typedef struct _MM_PAGED_POOL_INFO
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ unsigned long MaximumSize;
  /* 0x0008 */ unsigned long AllocatedPagedPool;
} MM_PAGED_POOL_INFO, *PMM_PAGED_POOL_INFO; /* size: 0x000c */

enum KTM_STATE
{
  KKtmUninitialized = 0,
  KKtmInitialized = 1,
  KKtmRecovering = 2,
  KKtmOnline = 3,
  KKtmRecoveryFailed = 4,
  KKtmOffline = 5,
};

typedef enum _LDR_DLL_LOAD_REASON
{
  LoadReasonStaticDependency = 0,
  LoadReasonStaticForwarderDependency = 1,
  LoadReasonDynamicForwarderDependency = 2,
  LoadReasonDelayloadDependency = 3,
  LoadReasonDynamicLoad = 4,
  LoadReasonAsImageLoad = 5,
  LoadReasonAsDataLoad = 6,
  LoadReasonEnclavePrimary = 7,
  LoadReasonEnclaveDependency = 8,
  LoadReasonUnknown = -1,
} LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef enum _KCONTINUE_TYPE
{
  KCONTINUE_UNWIND = 0,
  KCONTINUE_RESUME = 1,
  KCONTINUE_LONGJUMP = 2,
  KCONTINUE_SET = 3,
  KCONTINUE_LAST = 4,
} KCONTINUE_TYPE, *PKCONTINUE_TYPE;

typedef enum _RTL_GENERIC_COMPARE_RESULTS
{
  GenericLessThan = 0,
  GenericGreaterThan = 1,
  GenericEqual = 2,
} RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef struct _CURDIR
{
  /* 0x0000 */ struct _UNICODE_STRING DosPath;
  /* 0x0008 */ void* Handle;
} CURDIR, *PCURDIR; /* size: 0x000c */

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  /* 0x0000 */ unsigned long MaximumLength;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DebugFlags;
  /* 0x0010 */ void* ConsoleHandle;
  /* 0x0014 */ unsigned long ConsoleFlags;
  /* 0x0018 */ void* StandardInput;
  /* 0x001c */ void* StandardOutput;
  /* 0x0020 */ void* StandardError;
  /* 0x0024 */ struct _CURDIR CurrentDirectory;
  /* 0x0030 */ struct _UNICODE_STRING DllPath;
  /* 0x0038 */ struct _UNICODE_STRING ImagePathName;
  /* 0x0040 */ struct _UNICODE_STRING CommandLine;
  /* 0x0048 */ void* Environment;
  /* 0x004c */ unsigned long StartingX;
  /* 0x0050 */ unsigned long StartingY;
  /* 0x0054 */ unsigned long CountX;
  /* 0x0058 */ unsigned long CountY;
  /* 0x005c */ unsigned long CountCharsX;
  /* 0x0060 */ unsigned long CountCharsY;
  /* 0x0064 */ unsigned long FillAttribute;
  /* 0x0068 */ unsigned long WindowFlags;
  /* 0x006c */ unsigned long ShowWindowFlags;
  /* 0x0070 */ struct _UNICODE_STRING WindowTitle;
  /* 0x0078 */ struct _UNICODE_STRING DesktopInfo;
  /* 0x0080 */ struct _UNICODE_STRING ShellInfo;
  /* 0x0088 */ struct _UNICODE_STRING RuntimeData;
  /* 0x0090 */ struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  /* 0x0290 */ unsigned long EnvironmentSize;
  /* 0x0294 */ unsigned long EnvironmentVersion;
  /* 0x0298 */ void* PackageDependencyData;
  /* 0x029c */ unsigned long ProcessGroupId;
  /* 0x02a0 */ unsigned long LoaderThreads;
  /* 0x02a4 */ struct _UNICODE_STRING RedirectionDllName;
  /* 0x02ac */ struct _UNICODE_STRING HeapPartitionName;
  /* 0x02b4 */ unsigned __int64* DefaultThreadpoolCpuSetMasks;
  /* 0x02b8 */ unsigned long DefaultThreadpoolCpuSetMaskCount;
  /* 0x02bc */ unsigned long DefaultThreadpoolThreadMaximum;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS; /* size: 0x02c0 */

typedef struct _NAMED_PIPE_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long NamedPipeType;
  /* 0x0004 */ unsigned long ReadMode;
  /* 0x0008 */ unsigned long CompletionMode;
  /* 0x000c */ unsigned long MaximumInstances;
  /* 0x0010 */ unsigned long InboundQuota;
  /* 0x0014 */ unsigned long OutboundQuota;
  /* 0x0018 */ union _LARGE_INTEGER DefaultTimeout;
  /* 0x0020 */ unsigned char TimeoutSpecified;
  /* 0x0021 */ char __PADDING__[7];
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS; /* size: 0x0028 */

typedef enum _PO_MODERN_SLEEP_ACTION
{
  PoModernSleepActionGlobalActivatorsVeto = 0,
  PoModernSleepActionNonBlockingPhases = 1,
  PoModernSleepActionForceIdle = 2,
  PoModernSleepActionMinimalBlockingNotificationClients = 3,
  PoModernSleepActionMax = 4,
} PO_MODERN_SLEEP_ACTION, *PPO_MODERN_SLEEP_ACTION;

typedef enum _FAULT_INFORMATION_ARCH
{
  FaultInformationInvalid = 0,
  FaultInformationArm64 = 1,
  FaultInformationX64 = 2,
} FAULT_INFORMATION_ARCH, *PFAULT_INFORMATION_ARCH;

typedef enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
} DMA_WIDTH, *PDMA_WIDTH;

struct wil_FeatureState
{
  /* 0x0000 */ enum wil_FeatureEnabledState enabledState;
  /* 0x0004 */ unsigned char variant;
  /* 0x0005 */ char Padding_53[3];
  /* 0x0008 */ enum wil_FeatureVariantPayloadKind payloadKind;
  /* 0x000c */ unsigned int payload;
  /* 0x0010 */ int hasNotification;
  /* 0x0014 */ int isVariantConfiguration;
}; /* size: 0x0018 */

typedef enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
} DMA_SPEED, *PDMA_SPEED;

typedef struct _MMPTE_HARDWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Dirty1 : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Unused : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 25; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 reserved1 : 26; /* bit position: 37 */
    /* 0x0000 */ unsigned __int64 NoExecute : 1; /* bit position: 63 */
  }; /* bitfield */
} MMPTE_HARDWARE, *PMMPTE_HARDWARE; /* size: 0x0008 */

typedef struct _MMPTE_PROTOTYPE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 DemandFillProto : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 HiberVerifyConverted : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 ReadOnly : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Combined : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 Unused : 20; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 ProtoAddress : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_PROTOTYPE, *PMMPTE_PROTOTYPE; /* size: 0x0008 */

typedef struct _MMPTE_SOFTWARE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PageFileReserved : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 PageFileAllocated : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 Unused0 : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 Unused1 : 16; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 PageFileHigh : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_SOFTWARE, *PMMPTE_SOFTWARE; /* size: 0x0008 */

typedef struct _MMPTE_TIMESTAMP
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 MustBeZero : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Unused0 : 3; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFileLow : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 Unused1 : 16; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 GlobalTimeStamp : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_TIMESTAMP, *PMMPTE_TIMESTAMP; /* size: 0x0008 */

typedef struct _MMPTE_TRANSITION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Spare : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 IoTracker : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 PageFrameNumber : 26; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 Unused : 26; /* bit position: 38 */
  }; /* bitfield */
} MMPTE_TRANSITION, *PMMPTE_TRANSITION; /* size: 0x0008 */

typedef struct _MMPTE_LIST
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 OneEntry : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 filler0 : 2; /* bit position: 2 */
    /* 0x0000 */ unsigned __int64 SwizzleBit : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Transition : 1; /* bit position: 11 */
    /* 0x0000 */ unsigned __int64 filler2 : 20; /* bit position: 12 */
    /* 0x0000 */ unsigned __int64 NextEntry : 32; /* bit position: 32 */
  }; /* bitfield */
} MMPTE_LIST, *PMMPTE_LIST; /* size: 0x0008 */

typedef struct _MMPTE
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned __int64 Long;
      /* 0x0000 */ volatile unsigned __int64 VolatileLong;
      /* 0x0000 */ struct _MMPTE_HIGHLOW HighLow;
      /* 0x0000 */ struct _MMPTE_HARDWARE Hard;
      /* 0x0000 */ struct _MMPTE_PROTOTYPE Proto;
      /* 0x0000 */ struct _MMPTE_SOFTWARE Soft;
      /* 0x0000 */ struct _MMPTE_TIMESTAMP TimeStamp;
      /* 0x0000 */ struct _MMPTE_TRANSITION Trans;
      /* 0x0000 */ struct _MMPTE_SUBSECTION Subsect;
      /* 0x0000 */ struct _MMPTE_LIST List;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} MMPTE, *PMMPTE; /* size: 0x0008 */

typedef enum _MI_AVAILABLE_PAGE_WAIT_TYPES
{
  AvailablePagesWaitLow = 0,
  AvailablePagesWaitHigh = 1,
  AvailablePagesWaitVeryHigh = 2,
  AvailablePagesWaitMaximum = 3,
} MI_AVAILABLE_PAGE_WAIT_TYPES, *PMI_AVAILABLE_PAGE_WAIT_TYPES;

typedef enum _DOMAIN_CONFIGURATION_ARCH
{
  DomainConfigurationArm64 = 0,
  DomainConfigurationInvalid = 1,
} DOMAIN_CONFIGURATION_ARCH, *PDOMAIN_CONFIGURATION_ARCH;

typedef enum _ETW_HEADER_TYPE
{
  EtwHeaderTypeNative = 0,
  EtwHeaderTypeMax = 1,
} ETW_HEADER_TYPE, *PETW_HEADER_TYPE;

typedef enum _CM_SHARE_DISPOSITION
{
  CmResourceShareUndetermined = 0,
  CmResourceShareDeviceExclusive = 1,
  CmResourceShareDriverExclusive = 2,
  CmResourceShareShared = 3,
} CM_SHARE_DISPOSITION, *PCM_SHARE_DISPOSITION;

typedef enum _ARBITER_ACTION
{
  ArbiterActionTestAllocation = 0,
  ArbiterActionRetestAllocation = 1,
  ArbiterActionCommitAllocation = 2,
  ArbiterActionRollbackAllocation = 3,
  ArbiterActionQueryAllocatedResources = 4,
  ArbiterActionWriteReservedResources = 5,
  ArbiterActionQueryConflict = 6,
  ArbiterActionQueryArbitrate = 7,
  ArbiterActionAddReserved = 8,
  ArbiterActionBootAllocation = 9,
} ARBITER_ACTION, *PARBITER_ACTION;

typedef enum _FAULT_INFORMATION_ARM64_TYPE
{
  UnsupportedUpstreamTransaction = 0,
  AddressSizeFault = 1,
  TlbMatchConflict = 2,
  ExternalFault = 3,
  PermissionFault = 4,
  AccessFlagFault = 5,
  TranslationFault = 6,
  MaxFaultType = 7,
} FAULT_INFORMATION_ARM64_TYPE, *PFAULT_INFORMATION_ARM64_TYPE;

typedef union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Trustlet : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char Ntos : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char WriteHandle : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char ReadHandle : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Reserved : 4; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AccessRights;
  }; /* size: 0x0001 */
} PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS, *PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS; /* size: 0x0001 */

typedef struct _PS_TRUSTLET_ATTRIBUTE_TYPE
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char Version;
      /* 0x0001 */ unsigned char DataCount;
      /* 0x0002 */ unsigned char SemanticType;
      /* 0x0003 */ union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long AttributeType;
  }; /* size: 0x0004 */
} PS_TRUSTLET_ATTRIBUTE_TYPE, *PPS_TRUSTLET_ATTRIBUTE_TYPE; /* size: 0x0004 */

typedef enum _KTRANSACTION_OUTCOME
{
  KTxOutcomeUninitialized = 0,
  KTxOutcomeUndetermined = 1,
  KTxOutcomeCommitted = 2,
  KTxOutcomeAborted = 3,
  KTxOutcomeUnavailable = 4,
} KTRANSACTION_OUTCOME, *PKTRANSACTION_OUTCOME;

typedef enum _PNP_WATCHDOG_TYPE
{
  PNP_EVENT_WORKER_WATCHDOG = 1,
  PNP_DEVICE_COMPLETION_QUEUE_WATCHDOG = 2,
  PNP_DELAYED_REMOVE_WORKER_WATCHDOG = 3,
  PNP_ADD_DEVICE_WATCHDOG = 4,
  PNP_DRIVER_ENTRY_WATCHDOG = 5,
} PNP_WATCHDOG_TYPE, *PPNP_WATCHDOG_TYPE;

typedef struct _PPM_SELECTION_STATISTICS
{
  /* 0x0000 */ unsigned __int64 SelectedCount;
  /* 0x0008 */ unsigned __int64 VetoCount;
  /* 0x0010 */ unsigned __int64 PreVetoCount;
  /* 0x0018 */ unsigned __int64 WrongProcessorCount;
  /* 0x0020 */ unsigned __int64 LatencyCount;
  /* 0x0028 */ unsigned __int64 IdleDurationCount;
  /* 0x0030 */ unsigned __int64 DeviceDependencyCount;
  /* 0x0038 */ unsigned __int64 ProcessorDependencyCount;
  /* 0x0040 */ unsigned __int64 PlatformOnlyCount;
  /* 0x0048 */ unsigned __int64 InterruptibleCount;
  /* 0x0050 */ unsigned __int64 LegacyOverrideCount;
  /* 0x0058 */ unsigned __int64 CstateCheckCount;
  /* 0x0060 */ unsigned __int64 NoCStateCount;
  /* 0x0068 */ unsigned __int64 CoordinatedDependencyCount;
  /* 0x0070 */ unsigned __int64 NotClockOwnerCount;
  /* 0x0078 */ struct _PPM_VETO_ACCOUNTING* PreVetoAccounting;
  /* 0x007c */ long __PADDING__[1];
} PPM_SELECTION_STATISTICS, *PPPM_SELECTION_STATISTICS; /* size: 0x0080 */

typedef enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE
{
  WheaRecoveryContextErrorTypeMemory = 1,
  WheaRecoveryContextErrorTypePmem = 2,
  WheaRecoveryContextErrorTypeMax = 3,
} WHEA_RECOVERY_CONTEXT_ERROR_TYPE, *PWHEA_RECOVERY_CONTEXT_ERROR_TYPE;

typedef enum _PEP_WORK_TYPE
{
  PepWorkActiveComplete = 0,
  PepWorkRequestIdleState = 1,
  PepWorkDevicePower = 2,
  PepWorkRequestPowerControl = 3,
  PepWorkDeviceIdle = 4,
  PepWorkCompleteIdleState = 5,
  PepWorkCompletePerfState = 6,
  PepWorkAcpiNotify = 7,
  PepWorkAcpiEvaluateControlMethodComplete = 8,
  PepWorkMax = 9,
} PEP_WORK_TYPE, *PPEP_WORK_TYPE;

typedef struct _GENERAL_LOOKASIDE
{
  union
  {
    /* 0x0000 */ union _SLIST_HEADER ListHead;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SingleListHead;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short Depth;
  /* 0x000a */ unsigned short MaximumDepth;
  /* 0x000c */ unsigned long TotalAllocates;
  union
  {
    /* 0x0010 */ unsigned long AllocateMisses;
    /* 0x0010 */ unsigned long AllocateHits;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long TotalFrees;
  union
  {
    /* 0x0018 */ unsigned long FreeMisses;
    /* 0x0018 */ unsigned long FreeHits;
  }; /* size: 0x0004 */
  /* 0x001c */ enum _POOL_TYPE Type;
  /* 0x0020 */ unsigned long Tag;
  /* 0x0024 */ unsigned long Size;
  union
  {
    /* 0x0028 */ void* AllocateEx /* function */;
    /* 0x0028 */ void* Allocate /* function */;
  }; /* size: 0x0004 */
  union
  {
    /* 0x002c */ void* FreeEx /* function */;
    /* 0x002c */ void* Free /* function */;
  }; /* size: 0x0004 */
  /* 0x0030 */ struct _LIST_ENTRY ListEntry;
  /* 0x0038 */ unsigned long LastTotalAllocates;
  union
  {
    /* 0x003c */ unsigned long LastAllocateMisses;
    /* 0x003c */ unsigned long LastAllocateHits;
  }; /* size: 0x0004 */
  /* 0x0040 */ unsigned long Future[2];
  /* 0x0048 */ long __PADDING__[14];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE; /* size: 0x0080 */

typedef struct _FAST_MUTEX
{
  /* 0x0000 */ long Count;
  /* 0x0004 */ void* Owner;
  /* 0x0008 */ unsigned long Contention;
  /* 0x000c */ struct _KEVENT Event;
  /* 0x001c */ unsigned long OldIrql;
} FAST_MUTEX, *PFAST_MUTEX; /* size: 0x0020 */

typedef struct _PAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
  /* 0x0080 */ struct _FAST_MUTEX Lock__ObsoleteButDoNotDelete;
  /* 0x00a0 */ long __PADDING__[8];
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST; /* size: 0x00c0 */

typedef enum _CONFIGURATION_TYPE
{
  ArcSystem = 0,
  CentralProcessor = 1,
  FloatingPointProcessor = 2,
  PrimaryIcache = 3,
  PrimaryDcache = 4,
  SecondaryIcache = 5,
  SecondaryDcache = 6,
  SecondaryCache = 7,
  EisaAdapter = 8,
  TcAdapter = 9,
  ScsiAdapter = 10,
  DtiAdapter = 11,
  MultiFunctionAdapter = 12,
  DiskController = 13,
  TapeController = 14,
  CdromController = 15,
  WormController = 16,
  SerialController = 17,
  NetworkController = 18,
  DisplayController = 19,
  ParallelController = 20,
  PointerController = 21,
  KeyboardController = 22,
  AudioController = 23,
  OtherController = 24,
  DiskPeripheral = 25,
  FloppyDiskPeripheral = 26,
  TapePeripheral = 27,
  ModemPeripheral = 28,
  MonitorPeripheral = 29,
  PrinterPeripheral = 30,
  PointerPeripheral = 31,
  KeyboardPeripheral = 32,
  TerminalPeripheral = 33,
  OtherPeripheral = 34,
  LinePeripheral = 35,
  NetworkPeripheral = 36,
  SystemMemory = 37,
  DockingInformation = 38,
  RealModeIrqRoutingTable = 39,
  RealModePCIEnumeration = 40,
  MaximumType = 41,
} CONFIGURATION_TYPE, *PCONFIGURATION_TYPE;

typedef enum _ETW_NOTIFICATION_TYPE
{
  EtwNotificationTypeNoReply = 1,
  EtwNotificationTypeLegacyEnable = 2,
  EtwNotificationTypeEnable = 3,
  EtwNotificationTypePrivateLogger = 4,
  EtwNotificationTypePerflib = 5,
  EtwNotificationTypeAudio = 6,
  EtwNotificationTypeSession = 7,
  EtwNotificationTypeReserved = 8,
  EtwNotificationTypeCredentialUI = 9,
  EtwNotificationTypeInProcSession = 10,
  EtwNotificationTypeFilteredPrivateLogger = 11,
  EtwNotificationTypeMax = 12,
} ETW_NOTIFICATION_TYPE, *PETW_NOTIFICATION_TYPE;

typedef enum _PO_FX_PERF_STATE_TYPE
{
  PoFxPerfStateTypeDiscrete = 0,
  PoFxPerfStateTypeRange = 1,
  PoFxPerfStateTypeMaximum = 2,
} PO_FX_PERF_STATE_TYPE, *PPO_FX_PERF_STATE_TYPE;

typedef enum _BOOT_ENTROPY_SOURCE_RESULT_CODE
{
  BootEntropySourceStructureUninitialized = 0,
  BootEntropySourceDisabledByPolicy = 1,
  BootEntropySourceNotPresent = 2,
  BootEntropySourceError = 3,
  BootEntropySourceSuccess = 4,
} BOOT_ENTROPY_SOURCE_RESULT_CODE, *PBOOT_ENTROPY_SOURCE_RESULT_CODE;

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

typedef struct _PS_MITIGATION_OPTIONS_MAP
{
  /* 0x0000 */ unsigned __int64 Map[3];
} PS_MITIGATION_OPTIONS_MAP, *PPS_MITIGATION_OPTIONS_MAP; /* size: 0x0018 */

typedef struct _DOMAIN_CONFIGURATION_ARM64
{
  /* 0x0000 */ union _LARGE_INTEGER Ttbr0;
  /* 0x0008 */ union _LARGE_INTEGER Ttbr1;
  /* 0x0010 */ unsigned long Mair0;
  /* 0x0014 */ unsigned long Mair1;
  /* 0x0018 */ unsigned char InputSize0;
  /* 0x0019 */ unsigned char InputSize1;
  /* 0x001a */ unsigned char CoherentTableWalks;
  /* 0x001b */ unsigned char TranslationEnabled;
  /* 0x001c */ long __PADDING__[1];
} DOMAIN_CONFIGURATION_ARM64, *PDOMAIN_CONFIGURATION_ARM64; /* size: 0x0020 */

typedef struct _DOMAIN_CONFIGURATION
{
  /* 0x0000 */ enum _DOMAIN_CONFIGURATION_ARCH Type;
  /* 0x0004 */ long Padding_54;
  /* 0x0008 */ struct _DOMAIN_CONFIGURATION_ARM64 Arm64;
} DOMAIN_CONFIGURATION, *PDOMAIN_CONFIGURATION; /* size: 0x0028 */

typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
  /* 0x0000 */ unsigned __int64 Map[3];
} PS_MITIGATION_AUDIT_OPTIONS_MAP, *PPS_MITIGATION_AUDIT_OPTIONS_MAP; /* size: 0x0018 */

typedef struct _XSTATE_CONFIGURATION
{
  /* 0x0000 */ unsigned __int64 EnabledFeatures;
  /* 0x0008 */ unsigned __int64 EnabledVolatileFeatures;
  /* 0x0010 */ unsigned long Size;
  union
  {
    /* 0x0014 */ unsigned long ControlFlags;
    struct /* bitfield */
    {
      /* 0x0014 */ unsigned long OptimizedSave : 1; /* bit position: 0 */
      /* 0x0014 */ unsigned long CompactionEnabled : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0018 */ struct _XSTATE_FEATURE Features[64];
  /* 0x0218 */ unsigned __int64 EnabledSupervisorFeatures;
  /* 0x0220 */ unsigned __int64 AlignedFeatures;
  /* 0x0228 */ unsigned long AllFeatureSize;
  /* 0x022c */ unsigned long AllFeatures[64];
  /* 0x032c */ long Padding_55;
  /* 0x0330 */ unsigned __int64 EnabledUserVisibleSupervisorFeatures;
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; /* size: 0x0338 */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long AitSamplingValue;
  /* 0x024c */ unsigned long AppCompatFlag;
  /* 0x0250 */ unsigned __int64 RNGSeedVersion;
  /* 0x0258 */ unsigned long GlobalValidationRunlevel;
  /* 0x025c */ volatile long TimeZoneBiasStamp;
  /* 0x0260 */ unsigned long NtBuildNumber;
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ unsigned char Reserved0[1];
  /* 0x026a */ unsigned short NativeProcessorArchitecture;
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ unsigned long BootId;
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  union
  {
    /* 0x02d5 */ unsigned char MitigationPolicies;
    struct /* bitfield */
    {
      /* 0x02d5 */ unsigned char NXSupportPolicy : 2; /* bit position: 0 */
      /* 0x02d5 */ unsigned char SEHValidationPolicy : 2; /* bit position: 2 */
      /* 0x02d5 */ unsigned char CurDirDevicesSkippedForDlls : 2; /* bit position: 4 */
      /* 0x02d5 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x02d6 */ unsigned short CyclesPerYield;
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ unsigned char VirtualizationFlags;
  /* 0x02ee */ unsigned char Reserved12[2];
  union
  {
    /* 0x02f0 */ unsigned long SharedDataFlags;
    struct /* bitfield */
    {
      /* 0x02f0 */ unsigned long DbgErrorPortPresent : 1; /* bit position: 0 */
      /* 0x02f0 */ unsigned long DbgElevationEnabled : 1; /* bit position: 1 */
      /* 0x02f0 */ unsigned long DbgVirtEnabled : 1; /* bit position: 2 */
      /* 0x02f0 */ unsigned long DbgInstallerDetectEnabled : 1; /* bit position: 3 */
      /* 0x02f0 */ unsigned long DbgLkgEnabled : 1; /* bit position: 4 */
      /* 0x02f0 */ unsigned long DbgDynProcessorEnabled : 1; /* bit position: 5 */
      /* 0x02f0 */ unsigned long DbgConsoleBrokerEnabled : 1; /* bit position: 6 */
      /* 0x02f0 */ unsigned long DbgSecureBootEnabled : 1; /* bit position: 7 */
      /* 0x02f0 */ unsigned long DbgMultiSessionSku : 1; /* bit position: 8 */
      /* 0x02f0 */ unsigned long DbgMultiUsersInSessionSku : 1; /* bit position: 9 */
      /* 0x02f0 */ unsigned long DbgStateSeparationEnabled : 1; /* bit position: 10 */
      /* 0x02f0 */ unsigned long SpareBits : 21; /* bit position: 11 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02f4 */ unsigned long DataFlagsPad[1];
  /* 0x02f8 */ unsigned __int64 TestRetInstruction;
  /* 0x0300 */ __int64 QpcFrequency;
  /* 0x0308 */ unsigned long SystemCall;
  union
  {
    union
    {
      /* 0x030c */ unsigned long AllFlags;
      struct /* bitfield */
      {
        /* 0x030c */ unsigned long Win32Process : 1; /* bit position: 0 */
        /* 0x030c */ unsigned long Sgx2Enclave : 1; /* bit position: 1 */
        /* 0x030c */ unsigned long VbsBasicEnclave : 1; /* bit position: 2 */
        /* 0x030c */ unsigned long SpareBits : 29; /* bit position: 3 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ UserCetAvailableEnvironments;
  /* 0x0310 */ unsigned __int64 SystemCallPad[2];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
    /* 0x0320 */ unsigned long ReservedTickCountOverlay[3];
  }; /* size: 0x000c */
  /* 0x032c */ unsigned long TickCountPad[1];
  /* 0x0330 */ unsigned long Cookie;
  /* 0x0334 */ unsigned long CookiePad[1];
  /* 0x0338 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0340 */ unsigned __int64 TimeUpdateLock;
  /* 0x0348 */ unsigned __int64 BaselineSystemTimeQpc;
  /* 0x0350 */ unsigned __int64 BaselineInterruptTimeQpc;
  /* 0x0358 */ unsigned __int64 QpcSystemTimeIncrement;
  /* 0x0360 */ unsigned __int64 QpcInterruptTimeIncrement;
  /* 0x0368 */ unsigned char QpcSystemTimeIncrementShift;
  /* 0x0369 */ unsigned char QpcInterruptTimeIncrementShift;
  /* 0x036a */ unsigned short UnparkedProcessorCount;
  /* 0x036c */ unsigned long EnclaveFeatureMask[4];
  /* 0x037c */ unsigned long TelemetryCoverageRound;
  /* 0x0380 */ unsigned short UserModeGlobalLogger[16];
  /* 0x03a0 */ unsigned long ImageFileExecutionOptions;
  /* 0x03a4 */ unsigned long LangGenerationCount;
  /* 0x03a8 */ unsigned __int64 Reserved4;
  /* 0x03b0 */ volatile unsigned __int64 InterruptTimeBias;
  /* 0x03b8 */ volatile unsigned __int64 QpcBias;
  /* 0x03c0 */ unsigned long ActiveProcessorCount;
  /* 0x03c4 */ volatile unsigned char ActiveGroupCount;
  /* 0x03c5 */ unsigned char Reserved9;
  union
  {
    /* 0x03c6 */ unsigned short QpcData;
    struct
    {
      /* 0x03c6 */ volatile unsigned char QpcBypassEnabled;
      /* 0x03c7 */ unsigned char QpcShift;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x03c8 */ union _LARGE_INTEGER TimeZoneBiasEffectiveStart;
  /* 0x03d0 */ union _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
  /* 0x03d8 */ struct _XSTATE_CONFIGURATION XState;
  /* 0x0710 */ struct _KSYSTEM_TIME FeatureConfigurationChangeStamp;
  /* 0x071c */ unsigned long Spare;
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x0720 */

typedef struct _POP_FX_LOG_ENTRY
{
  /* 0x0000 */ unsigned __int64 Timestamp;
  /* 0x0008 */ unsigned char Operation;
  /* 0x0009 */ unsigned char Component;
  /* 0x000a */ unsigned short Processor;
  /* 0x000c */ unsigned short Process;
  /* 0x000e */ unsigned short Thread;
  /* 0x0010 */ unsigned __int64 Information;
} POP_FX_LOG_ENTRY, *PPOP_FX_LOG_ENTRY; /* size: 0x0018 */

typedef struct _MI_PAGE_COMBINE_STATISTICS
{
  /* 0x0000 */ unsigned __int64 PagesScannedActive;
  /* 0x0008 */ unsigned __int64 PagesScannedStandby;
  /* 0x0010 */ unsigned __int64 PagesCombined;
  /* 0x0018 */ unsigned long CombineScanCount;
  /* 0x001c */ long CombinedBlocksInUse;
  /* 0x0020 */ long SumCombinedBlocksReferenceCount;
  /* 0x0024 */ long __PADDING__[1];
} MI_PAGE_COMBINE_STATISTICS, *PMI_PAGE_COMBINE_STATISTICS; /* size: 0x0028 */

typedef struct _MI_PAGE_COMBINING_SUPPORT
{
  /* 0x0000 */ struct _MI_PARTITION* Partition;
  /* 0x0004 */ struct _LIST_ENTRY ArbitraryPfnMapList;
  /* 0x000c */ struct _MI_COMBINE_WORKITEM FreeCombinePoolItem;
  /* 0x0020 */ unsigned long CombiningThreadCount;
  /* 0x0024 */ struct _LIST_ENTRY CombinePageFreeList;
  /* 0x002c */ unsigned long CombineFreeListLock;
  /* 0x0030 */ struct _MI_COMBINE_PAGE_LISTHEAD CombinePageListHeads[16];
  /* 0x00b0 */ unsigned __int64 CommonPageCombineDomain;
  /* 0x00b8 */ struct _MI_PAGE_COMBINE_STATISTICS PageCombineStats;
} MI_PAGE_COMBINING_SUPPORT, *PMI_PAGE_COMBINING_SUPPORT; /* size: 0x00e0 */

typedef struct _KiIoAccessMap
{
  /* 0x0000 */ unsigned char DirectionMap[32];
  /* 0x0020 */ unsigned char IoMap[8196];
} KiIoAccessMap, *PKiIoAccessMap; /* size: 0x2024 */

typedef struct _PERFINFO_PPM_STATE_SELECTION
{
  /* 0x0000 */ unsigned long SelectedState;
  /* 0x0004 */ unsigned long VetoedStates;
  /* 0x0008 */ unsigned long VetoReason[1];
} PERFINFO_PPM_STATE_SELECTION, *PPERFINFO_PPM_STATE_SELECTION; /* size: 0x000c */

struct _TP_CLEANUP_GROUP;

typedef struct _IO_WORKITEM
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ void* Routine /* function */;
  /* 0x0014 */ void* IoObject;
  /* 0x0018 */ void* Context;
  /* 0x001c */ struct _ETHREAD* WorkOnBehalfThread;
  /* 0x0020 */ unsigned long Type;
  /* 0x0024 */ struct _GUID ActivityId;
} IO_WORKITEM, *PIO_WORKITEM; /* size: 0x0034 */

typedef struct _PS_TRUSTLET_ATTRIBUTE_HEADER
{
  /* 0x0000 */ struct _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long InstanceNumber : 8; /* bit position: 0 */
    /* 0x0004 */ unsigned long Reserved : 24; /* bit position: 8 */
  }; /* bitfield */
} PS_TRUSTLET_ATTRIBUTE_HEADER, *PPS_TRUSTLET_ATTRIBUTE_HEADER; /* size: 0x0008 */

typedef struct _PS_TRUSTLET_ATTRIBUTE_DATA
{
  /* 0x0000 */ struct _PS_TRUSTLET_ATTRIBUTE_HEADER Header;
  /* 0x0008 */ unsigned __int64 Data[1];
} PS_TRUSTLET_ATTRIBUTE_DATA, *PPS_TRUSTLET_ATTRIBUTE_DATA; /* size: 0x0010 */

typedef struct _PS_TRUSTLET_CREATE_ATTRIBUTES
{
  /* 0x0000 */ unsigned __int64 TrustletIdentity;
  /* 0x0008 */ struct _PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];
} PS_TRUSTLET_CREATE_ATTRIBUTES, *PPS_TRUSTLET_CREATE_ATTRIBUTES; /* size: 0x0018 */

struct _TP_CALLBACK_INSTANCE;

typedef struct _MI_PAGING_FILE_SPACE_BITMAPS
{
  union
  {
    /* 0x0000 */ unsigned long RefCount;
    /* 0x0000 */ struct _MI_PAGING_FILE_SPACE_BITMAPS* Anchor;
  }; /* size: 0x0004 */
  /* 0x0004 */ struct _RTL_BITMAP AllocationBitmap;
  union
  {
    /* 0x000c */ struct _RTL_BITMAP ReservationBitmap;
    /* 0x000c */ struct _RTL_BITMAP EvictedBitmap;
  }; /* size: 0x0008 */
} MI_PAGING_FILE_SPACE_BITMAPS, *PMI_PAGING_FILE_SPACE_BITMAPS; /* size: 0x0014 */

typedef struct _PPM_VETO_ACCOUNTING
{
  /* 0x0000 */ volatile long VetoPresent;
  /* 0x0004 */ struct _LIST_ENTRY VetoListHead;
  /* 0x000c */ unsigned char CsAccountingBlocks;
  /* 0x000d */ unsigned char BlocksDrips;
  /* 0x000e */ char Padding_56[2];
  /* 0x0010 */ unsigned long PreallocatedVetoCount;
  /* 0x0014 */ struct _PPM_VETO_ENTRY* PreallocatedVetoList;
} PPM_VETO_ACCOUNTING, *PPPM_VETO_ACCOUNTING; /* size: 0x0018 */

typedef struct _PPM_IDLE_STATE
{
  /* 0x0000 */ struct _KAFFINITY_EX DomainMembers;
  /* 0x000c */ struct _UNICODE_STRING Name;
  /* 0x0014 */ unsigned long Latency;
  /* 0x0018 */ unsigned long BreakEvenDuration;
  /* 0x001c */ unsigned long Power;
  /* 0x0020 */ unsigned long StateFlags;
  /* 0x0024 */ struct _PPM_VETO_ACCOUNTING VetoAccounting;
  /* 0x003c */ unsigned char StateType;
  /* 0x003d */ unsigned char InterruptsEnabled;
  /* 0x003e */ unsigned char Interruptible;
  /* 0x003f */ unsigned char ContextRetained;
  /* 0x0040 */ unsigned char CacheCoherent;
  /* 0x0041 */ unsigned char WakesSpuriously;
  /* 0x0042 */ unsigned char PlatformOnly;
  /* 0x0043 */ unsigned char NoCState;
} PPM_IDLE_STATE, *PPPM_IDLE_STATE; /* size: 0x0044 */

typedef struct _PERF_CONTROL_STATE_SELECTION
{
  /* 0x0000 */ unsigned __int64 SelectedState;
  /* 0x0008 */ unsigned long SelectedPercent;
  /* 0x000c */ unsigned long SelectedFrequency;
  /* 0x0010 */ unsigned long MinPercent;
  /* 0x0014 */ unsigned long MaxPercent;
  /* 0x0018 */ unsigned long TolerancePercent;
  /* 0x001c */ unsigned long EppPercent;
  /* 0x0020 */ unsigned long AutonomousActivityWindow;
  /* 0x0024 */ unsigned char Autonomous;
  /* 0x0025 */ unsigned char InheritFromDomain;
  /* 0x0026 */ char __PADDING__[2];
} PERF_CONTROL_STATE_SELECTION, *PPERF_CONTROL_STATE_SELECTION; /* size: 0x0028 */

typedef struct _MI_WSLE
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned char Age : 4; /* bit position: 0 */
          /* 0x0000 */ unsigned char Protection : 3; /* bit position: 4 */
          /* 0x0000 */ unsigned char Reserved : 1; /* bit position: 7 */
        }; /* bitfield */
      } /* size: 0x0001 */ e1;
      struct
      {
        /* 0x0000 */ unsigned char EntireWsle;
      } /* size: 0x0001 */ e2;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ u1;
} MI_WSLE, *PMI_WSLE; /* size: 0x0001 */

typedef struct _PROC_PERF_HISTORY_ENTRY
{
  /* 0x0000 */ unsigned short Utility;
  /* 0x0002 */ unsigned short AffinitizedUtility;
  /* 0x0004 */ unsigned short Frequency;
  /* 0x0006 */ unsigned char ImportantPercent;
  /* 0x0007 */ unsigned char TaggedPercent[3];
} PROC_PERF_HISTORY_ENTRY, *PPROC_PERF_HISTORY_ENTRY; /* size: 0x000a */

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x0004 */ struct _LIST_ENTRY FrameListCache;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long NextCookieSequenceNumber;
  /* 0x0014 */ unsigned long StackId;
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0018 */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x001c */ void* EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID ClientId;
  /* 0x0028 */ void* ActiveRpcHandle;
  /* 0x002c */ void* ThreadLocalStoragePointer;
  /* 0x0030 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ void* CsrClientThread;
  /* 0x0040 */ void* Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ void* WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ void* ReservedForDebuggerInstrumentation[16];
  /* 0x010c */ void* SystemReserved1[26];
  /* 0x0174 */ char PlaceholderCompatibilityMode;
  /* 0x0175 */ unsigned char PlaceholderHydrationAlwaysExplicit;
  /* 0x0176 */ char PlaceholderReserved[10];
  /* 0x0180 */ unsigned long ProxiedProcessId;
  /* 0x0184 */ struct _ACTIVATION_CONTEXT_STACK _ActivationStack;
  /* 0x019c */ unsigned char WorkingOnBehalfTicket[8];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ struct _ACTIVATION_CONTEXT_STACK* ActivationContextStackPointer;
  /* 0x01ac */ unsigned long InstrumentationCallbackSp;
  /* 0x01b0 */ unsigned long InstrumentationCallbackPreviousPc;
  /* 0x01b4 */ unsigned long InstrumentationCallbackPreviousSp;
  /* 0x01b8 */ unsigned char InstrumentationCallbackDisabled;
  /* 0x01b9 */ unsigned char SpareBytes[23];
  /* 0x01d0 */ unsigned long TxFsContext;
  /* 0x01d4 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID RealClientId;
  /* 0x06bc */ void* GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ void* GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ void* glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ void* glReserved2;
  /* 0x0be0 */ void* glSectionInfo;
  /* 0x0be4 */ void* glSection;
  /* 0x0be8 */ void* glTable;
  /* 0x0bec */ void* glCurrentRC;
  /* 0x0bf0 */ void* glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0a */ char Padding_57[2];
  /* 0x0e0c */ void* DeallocationStack;
  /* 0x0e10 */ void* TlsSlots[64];
  /* 0x0f10 */ struct _LIST_ENTRY TlsLinks;
  /* 0x0f18 */ void* Vdm;
  /* 0x0f1c */ void* ReservedForNtRpc;
  /* 0x0f20 */ void* DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ void* Instrumentation[9];
  /* 0x0f50 */ struct _GUID ActivityId;
  /* 0x0f60 */ void* SubProcessTag;
  /* 0x0f64 */ void* PerflibData;
  /* 0x0f68 */ void* EtwTraceData;
  /* 0x0f6c */ void* WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x0f74 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x0f74 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x0f74 */ unsigned char ReservedPad0;
      /* 0x0f75 */ unsigned char ReservedPad1;
      /* 0x0f76 */ unsigned char ReservedPad2;
      /* 0x0f77 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0f78 */ unsigned long GuaranteedStackBytes;
  /* 0x0f7c */ void* ReservedForPerf;
  /* 0x0f80 */ void* ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ void* SavedPriorityState;
  /* 0x0f8c */ unsigned long ReservedForCodeCoverage;
  /* 0x0f90 */ void* ThreadPoolData;
  /* 0x0f94 */ void** TlsExpansionSlots;
  /* 0x0f98 */ unsigned long MuiGeneration;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ void* NlsCache;
  /* 0x0fa4 */ void* pShimData;
  /* 0x0fa8 */ unsigned long HeapData;
  /* 0x0fac */ void* CurrentTransactionHandle;
  /* 0x0fb0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x0fb4 */ void* FlsData;
  /* 0x0fb8 */ void* PreferredLanguages;
  /* 0x0fbc */ void* UserPrefLanguages;
  /* 0x0fc0 */ void* MergedPrefLanguages;
  /* 0x0fc4 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x0fc8 */ volatile unsigned short CrossTebFlags;
    /* 0x0fc8 */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0fca */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x0fca */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x0fca */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x0fca */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x0fca */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x0fca */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x0fca */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x0fca */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x0fca */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x0fca */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x0fca */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x0fca */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x0fca */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x0fca */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x0fca */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x0fca */ unsigned short SkipLoaderInit : 1; /* bit position: 14 */
      /* 0x0fca */ unsigned short SpareSameTebBits : 1; /* bit position: 15 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0fcc */ void* TxnScopeEnterCallback;
  /* 0x0fd0 */ void* TxnScopeExitCallback;
  /* 0x0fd4 */ void* TxnScopeContext;
  /* 0x0fd8 */ unsigned long LockCount;
  /* 0x0fdc */ long WowTebOffset;
  /* 0x0fe0 */ void* ResourceRetValue;
  /* 0x0fe4 */ void* ReservedForWdf;
  /* 0x0fe8 */ unsigned __int64 ReservedForCrt;
  /* 0x0ff0 */ struct _GUID EffectiveContainerId;
} TEB, *PTEB; /* size: 0x1000 */

typedef struct _EXT_DELETE_PARAMETERS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* DeleteCallback /* function */;
  /* 0x000c */ void* DeleteContext;
} EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS; /* size: 0x0010 */

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x000c */ void* ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0050 */

typedef struct _IO_DRIVER_CREATE_CONTEXT
{
  /* 0x0000 */ short Size;
  /* 0x0002 */ char Padding_58[2];
  /* 0x0004 */ struct _ECP_LIST* ExtraCreateParameter;
  /* 0x0008 */ void* DeviceObjectHint;
  /* 0x000c */ struct _TXN_PARAMETER_BLOCK* TxnParameters;
  /* 0x0010 */ struct _EJOB* SiloContext;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT; /* size: 0x0014 */

typedef struct _PROC_PERF_QOS_CLASS_POLICY
{
  /* 0x0000 */ unsigned long MaxPolicyPercent;
  /* 0x0004 */ unsigned long MaxEquivalentFrequencyPercent;
  /* 0x0008 */ unsigned long MinPolicyPercent;
  /* 0x000c */ unsigned long AutonomousActivityWindow;
  /* 0x0010 */ unsigned long EnergyPerfPreference;
  /* 0x0014 */ unsigned char ProvideGuidance;
  /* 0x0015 */ unsigned char AllowThrottling;
  /* 0x0016 */ unsigned char PerfBoostMode;
  /* 0x0017 */ unsigned char LatencyHintPerf;
  /* 0x0018 */ unsigned char TrackDesiredCrossClass;
  /* 0x0019 */ char __PADDING__[3];
} PROC_PERF_QOS_CLASS_POLICY, *PPROC_PERF_QOS_CLASS_POLICY; /* size: 0x001c */

typedef struct _PROC_PERF_DOMAIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _PROC_PERF_CHECK_CONTEXT* Master;
  /* 0x000c */ struct _KAFFINITY_EX Members;
  /* 0x0018 */ unsigned long DomainContext;
  /* 0x001c */ unsigned long ProcessorCount;
  /* 0x0020 */ unsigned char EfficiencyClass;
  /* 0x0021 */ unsigned char NominalPerformanceClass;
  /* 0x0022 */ unsigned char HighestPerformanceClass;
  /* 0x0023 */ char Padding_59;
  /* 0x0024 */ struct _PROC_PERF_CONSTRAINT* Processors;
  /* 0x0028 */ void* GetFFHThrottleState /* function */;
  /* 0x002c */ void* TimeWindowHandler /* function */;
  /* 0x0030 */ void* BoostPolicyHandler /* function */;
  /* 0x0034 */ void* BoostModeHandler /* function */;
  /* 0x0038 */ void* AutonomousActivityWindowHandler /* function */;
  /* 0x003c */ void* AutonomousModeHandler /* function */;
  /* 0x0040 */ void* ReinitializeHandler /* function */;
  /* 0x0044 */ void* PerfSelectionHandler /* function */;
  /* 0x0048 */ void* PerfControlHandler /* function */;
  /* 0x004c */ void* DomainPerfControlHandler /* function */;
  /* 0x0050 */ unsigned long MaxFrequency;
  /* 0x0054 */ unsigned long NominalFrequency;
  /* 0x0058 */ unsigned long MaxPercent;
  /* 0x005c */ unsigned long MinPerfPercent;
  /* 0x0060 */ unsigned long MinThrottlePercent;
  /* 0x0064 */ unsigned long AdvertizedMaximumFrequency;
  /* 0x0068 */ unsigned __int64 MinimumRelativePerformance;
  /* 0x0070 */ unsigned __int64 NominalRelativePerformance;
  /* 0x0078 */ unsigned char NominalRelativePerformancePercent;
  /* 0x0079 */ unsigned char Coordination;
  /* 0x007a */ unsigned char HardPlatformCap;
  /* 0x007b */ unsigned char AffinitizeControl;
  /* 0x007c */ unsigned char EfficientThrottle;
  /* 0x007d */ unsigned char AllowSchedulerDirectedPerfStates;
  /* 0x007e */ unsigned char InitiateAllProcessors;
  /* 0x007f */ unsigned char AllowVmPerfSelection;
  /* 0x0080 */ unsigned char AutonomousMode;
  /* 0x0081 */ unsigned char ProvideGuidance;
  /* 0x0082 */ char Padding_60[2];
  /* 0x0084 */ unsigned long DesiredPercent;
  /* 0x0088 */ unsigned long GuaranteedPercent;
  /* 0x008c */ unsigned char EngageResponsivenessOverrides;
  /* 0x008d */ char Padding_61[3];
  /* 0x0090 */ struct _PROC_PERF_QOS_CLASS_POLICY QosPolicies[5];
  /* 0x011c */ unsigned long QosDisableReasons[5];
  /* 0x0130 */ unsigned short QosEquivalencyMasks[5];
  /* 0x013a */ unsigned char QosSupported;
  /* 0x013b */ char Padding_62;
  /* 0x013c */ volatile unsigned long SelectionGeneration;
  /* 0x0140 */ struct _PERF_CONTROL_STATE_SELECTION QosSelection[5];
  /* 0x0208 */ unsigned __int64 PerfChangeTime;
  /* 0x0210 */ unsigned long PerfChangeIntervalCount;
  /* 0x0214 */ unsigned char Force;
  /* 0x0215 */ unsigned char Update;
  /* 0x0216 */ unsigned char Apply;
  /* 0x0217 */ char __PADDING__[1];
} PROC_PERF_DOMAIN, *PPROC_PERF_DOMAIN; /* size: 0x0218 */

typedef struct _WNF_SCOPE_MAP_ENTRY
{
  /* 0x0000 */ struct _WNF_LOCK MapEntryLock;
  /* 0x0004 */ struct _LIST_ENTRY MapEntryHead;
} WNF_SCOPE_MAP_ENTRY, *PWNF_SCOPE_MAP_ENTRY; /* size: 0x000c */

typedef struct _OBJECT_DIRECTORY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* HashBuckets[37];
  /* 0x0094 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0098 */ struct _DEVICE_MAP* DeviceMap;
  /* 0x009c */ struct _OBJECT_DIRECTORY* ShadowDirectory;
  /* 0x00a0 */ void* NamespaceEntry;
  /* 0x00a4 */ void* SessionObject;
  /* 0x00a8 */ unsigned long Flags;
  /* 0x00ac */ unsigned long SessionId;
} OBJECT_DIRECTORY, *POBJECT_DIRECTORY; /* size: 0x00b0 */

typedef struct _RTL_CRITICAL_SECTION
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
  /* 0x0004 */ long LockCount;
  /* 0x0008 */ long RecursionCount;
  /* 0x000c */ void* OwningThread;
  /* 0x0010 */ void* LockSemaphore;
  /* 0x0014 */ unsigned long SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; /* size: 0x0018 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ struct _RTL_CRITICAL_SECTION* CriticalSection;
  /* 0x0008 */ struct _LIST_ENTRY ProcessLocksList;
  /* 0x0010 */ unsigned long EntryCount;
  /* 0x0014 */ unsigned long ContentionCount;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned short CreatorBackTraceIndexHigh;
  /* 0x001e */ unsigned short SpareUSHORT;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG; /* size: 0x0020 */

typedef struct _HAL_NODE_RANGE
{
  /* 0x0000 */ unsigned long PageFrameIndex;
  /* 0x0004 */ unsigned long Node;
} HAL_NODE_RANGE, *PHAL_NODE_RANGE; /* size: 0x0008 */

typedef struct _POP_FX_WORK_ORDER
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ long WorkCount;
  /* 0x0014 */ void* Context;
  /* 0x0018 */ struct _POP_FX_WORK_ORDER_WATCHDOG_INFO* WatchdogTimerInfo;
} POP_FX_WORK_ORDER, *PPOP_FX_WORK_ORDER; /* size: 0x001c */

typedef struct _LEAP_SECOND_DATA
{
  /* 0x0000 */ unsigned char Enabled;
  /* 0x0001 */ char Padding_63[3];
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ union _LARGE_INTEGER Data[1];
} LEAP_SECOND_DATA, *PLEAP_SECOND_DATA; /* size: 0x0010 */

struct POHANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _IO_MINI_COMPLETION_PACKET_USER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long PacketType;
  /* 0x000c */ void* KeyContext;
  /* 0x0010 */ void* ApcContext;
  /* 0x0014 */ long IoStatus;
  /* 0x0018 */ unsigned long IoStatusInformation;
  /* 0x001c */ void* MiniPacketCallback /* function */;
  /* 0x0020 */ void* Context;
  /* 0x0024 */ unsigned char Allocated;
  /* 0x0025 */ char __PADDING__[3];
} IO_MINI_COMPLETION_PACKET_USER, *PIO_MINI_COMPLETION_PACKET_USER; /* size: 0x0028 */

typedef struct _KHETERO_PROCESSOR_SET
{
  /* 0x0000 */ unsigned long IdealMask;
  /* 0x0004 */ unsigned long PreferredMask;
  /* 0x0008 */ unsigned long AvailableMask;
} KHETERO_PROCESSOR_SET, *PKHETERO_PROCESSOR_SET; /* size: 0x000c */

typedef struct _SEP_CACHED_HANDLES_TABLE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
} SEP_CACHED_HANDLES_TABLE, *PSEP_CACHED_HANDLES_TABLE; /* size: 0x0008 */

typedef struct _OB_HANDLE_REVOCATION_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY RevocationInfos;
  /* 0x0008 */ struct _EX_PUSH_LOCK Lock;
  /* 0x000c */ struct _EX_RUNDOWN_REF Rundown;
} OB_HANDLE_REVOCATION_BLOCK, *POB_HANDLE_REVOCATION_BLOCK; /* size: 0x0010 */

typedef struct _SEP_LOGON_SESSION_REFERENCES
{
  /* 0x0000 */ struct _SEP_LOGON_SESSION_REFERENCES* Next;
  /* 0x0004 */ struct _LUID LogonId;
  /* 0x000c */ struct _LUID BuddyLogonId;
  /* 0x0014 */ long ReferenceCount;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _DEVICE_MAP* pDeviceMap;
  /* 0x0020 */ void* Token;
  /* 0x0024 */ struct _UNICODE_STRING AccountName;
  /* 0x002c */ struct _UNICODE_STRING AuthorityName;
  /* 0x0034 */ struct _SEP_CACHED_HANDLES_TABLE CachedHandlesTable;
  /* 0x003c */ struct _EX_PUSH_LOCK SharedDataLock;
  /* 0x0040 */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* SharedClaimAttributes;
  /* 0x0044 */ struct _SEP_SID_VALUES_BLOCK* SharedSidValues;
  /* 0x0048 */ struct _OB_HANDLE_REVOCATION_BLOCK RevocationBlock;
  /* 0x0058 */ struct _EJOB* ServerSilo;
  /* 0x005c */ struct _LUID SiblingAuthId;
  /* 0x0064 */ struct _LIST_ENTRY TokenList;
} SEP_LOGON_SESSION_REFERENCES, *PSEP_LOGON_SESSION_REFERENCES; /* size: 0x006c */

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0008 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x000c */

typedef union _POP_FX_COMPONENT_FLAGS
{
  union
  {
    struct
    {
      /* 0x0000 */ long Value;
      /* 0x0004 */ long Value2;
    }; /* size: 0x0008 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long RefCount : 30; /* bit position: 0 */
        /* 0x0000 */ unsigned long Idling : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long Active : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long CriticalIdleOverride : 1; /* bit position: 0 */
        /* 0x0004 */ unsigned long ResidentOverride : 1; /* bit position: 1 */
        /* 0x0004 */ unsigned long Reserved : 30; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} POP_FX_COMPONENT_FLAGS, *PPOP_FX_COMPONENT_FLAGS; /* size: 0x0008 */

typedef struct _POP_FX_COMPONENT
{
  /* 0x0000 */ struct _GUID Id;
  /* 0x0010 */ unsigned long Index;
  /* 0x0014 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0030 */ struct _POP_FX_DEVICE* Device;
  /* 0x0034 */ volatile union _POP_FX_COMPONENT_FLAGS Flags;
  /* 0x003c */ volatile long Resident;
  /* 0x0040 */ struct _KEVENT ActiveEvent;
  /* 0x0050 */ unsigned long IdleLock;
  /* 0x0054 */ volatile long IdleConditionComplete;
  /* 0x0058 */ volatile long IdleStateComplete;
  /* 0x005c */ long Padding_64;
  /* 0x0060 */ unsigned __int64 IdleStamp;
  /* 0x0068 */ volatile unsigned long CurrentIdleState;
  /* 0x006c */ unsigned long IdleStateCount;
  /* 0x0070 */ struct _POP_FX_IDLE_STATE* IdleStates;
  /* 0x0074 */ unsigned long DeepestWakeableIdleState;
  /* 0x0078 */ unsigned long ProviderCount;
  /* 0x007c */ struct _POP_FX_PROVIDER* Providers;
  /* 0x0080 */ unsigned long IdleProviderCount;
  /* 0x0084 */ unsigned long DependentCount;
  /* 0x0088 */ struct _POP_FX_DEPENDENT* Dependents;
  /* 0x008c */ long Padding_65;
  /* 0x0090 */ struct _POP_FX_ACCOUNTING Accounting;
  /* 0x0168 */ struct _POP_FX_PERF_INFO* Performance;
  /* 0x016c */ struct _POP_COMPONENT_POWER_PROFILE* PowerProfile;
  /* 0x0170 */ struct _LIST_ENTRY ExternalDependents;
  /* 0x0178 */ struct _LIST_ENTRY ExternalDependencies;
} POP_FX_COMPONENT, *PPOP_FX_COMPONENT; /* size: 0x0180 */

typedef union _ENERGY_STATE_DURATION
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      /* 0x0000 */ unsigned long LastChangeTime;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long Duration : 31; /* bit position: 0 */
        /* 0x0004 */ unsigned long IsInState : 1; /* bit position: 31 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} ENERGY_STATE_DURATION, *PENERGY_STATE_DURATION; /* size: 0x0008 */

typedef struct _PROCESS_ENERGY_VALUES
{
  /* 0x0000 */ unsigned __int64 Cycles[2][4];
  /* 0x0040 */ unsigned __int64 DiskEnergy;
  /* 0x0048 */ unsigned __int64 NetworkTailEnergy;
  /* 0x0050 */ unsigned __int64 MBBTailEnergy;
  /* 0x0058 */ unsigned __int64 NetworkTxRxBytes;
  /* 0x0060 */ unsigned __int64 MBBTxRxBytes;
  union
  {
    /* 0x0068 */ union _ENERGY_STATE_DURATION Durations[3];
    struct
    {
      /* 0x0068 */ union _ENERGY_STATE_DURATION ForegroundDuration;
      /* 0x0070 */ union _ENERGY_STATE_DURATION DesktopVisibleDuration;
      /* 0x0078 */ union _ENERGY_STATE_DURATION PSMForegroundDuration;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0080 */ unsigned long CompositionRendered;
  /* 0x0084 */ unsigned long CompositionDirtyGenerated;
  /* 0x0088 */ unsigned long CompositionDirtyPropagated;
  /* 0x008c */ unsigned long Reserved1;
  /* 0x0090 */ unsigned __int64 AttributedCycles[2][4];
  /* 0x00d0 */ unsigned __int64 WorkOnBehalfCycles[2][4];
} PROCESS_ENERGY_VALUES, *PPROCESS_ENERGY_VALUES; /* size: 0x0110 */

typedef struct _DMA_IOMMU_INTERFACE
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ void* CreateDomain /* function */;
  /* 0x0008 */ void* DeleteDomain /* function */;
  /* 0x000c */ void* AttachDevice /* function */;
  /* 0x0010 */ void* DetachDevice /* function */;
  /* 0x0014 */ void* FlushDomain /* function */;
  /* 0x0018 */ void* FlushDomainByVaList /* function */;
  /* 0x001c */ void* QueryInputMappings /* function */;
  /* 0x0020 */ void* MapLogicalRange /* function */;
  /* 0x0024 */ void* UnmapLogicalRange /* function */;
  /* 0x0028 */ void* MapIdentityRange /* function */;
  /* 0x002c */ void* UnmapIdentityRange /* function */;
  /* 0x0030 */ void* SetDeviceFaultReporting /* function */;
  /* 0x0034 */ void* ConfigureDomain /* function */;
} DMA_IOMMU_INTERFACE, *PDMA_IOMMU_INTERFACE; /* size: 0x0038 */

typedef struct _SEP_SILOSTATE
{
  /* 0x0000 */ struct _SEP_LOGON_SESSION_REFERENCES* SystemLogonSession;
  /* 0x0004 */ struct _SEP_LOGON_SESSION_REFERENCES* AnonymousLogonSession;
  /* 0x0008 */ void* AnonymousLogonToken;
  /* 0x000c */ void* AnonymousLogonTokenNoEveryone;
  /* 0x0010 */ struct _UNICODE_STRING* UncSystemPaths;
  /* 0x0014 */ struct _CI_NGEN_PATHS* NgenPaths;
} SEP_SILOSTATE, *PSEP_SILOSTATE; /* size: 0x0018 */

typedef struct _PAE_PAGEINFO
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long PageFrameNumber;
  /* 0x000c */ unsigned long EntriesInUse;
} PAE_PAGEINFO, *PPAE_PAGEINFO; /* size: 0x0010 */

typedef struct _PAE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _MMPTE PteEntry[4];
    /* 0x0000 */ struct _PAE_PAGEINFO PaeEntry;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY NextPae;
      /* 0x0004 */ long __PADDING__[7];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
} PAE_ENTRY, *PPAE_ENTRY; /* size: 0x0020 */

typedef struct _RTL_SPLAY_LINKS
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* Parent;
  /* 0x0004 */ struct _RTL_SPLAY_LINKS* LeftChild;
  /* 0x0008 */ struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS; /* size: 0x000c */

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0004 */ struct _LIST_ENTRY* PrevLinkage;
  /* 0x0008 */ unsigned long Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT; /* size: 0x000c */

typedef union _JOBOBJECT_ENERGY_TRACKING_STATE
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      /* 0x0000 */ unsigned long UpdateMask;
      /* 0x0004 */ unsigned long DesiredState;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} JOBOBJECT_ENERGY_TRACKING_STATE, *PJOBOBJECT_ENERGY_TRACKING_STATE; /* size: 0x0008 */

typedef struct _XSAVE_FORMAT
{
  /* 0x0000 */ unsigned short ControlWord;
  /* 0x0002 */ unsigned short StatusWord;
  /* 0x0004 */ unsigned char TagWord;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short ErrorOpcode;
  /* 0x0008 */ unsigned long ErrorOffset;
  /* 0x000c */ unsigned short ErrorSelector;
  /* 0x000e */ unsigned short Reserved2;
  /* 0x0010 */ unsigned long DataOffset;
  /* 0x0014 */ unsigned short DataSelector;
  /* 0x0016 */ unsigned short Reserved3;
  /* 0x0018 */ unsigned long MxCsr;
  /* 0x001c */ unsigned long MxCsr_Mask;
  /* 0x0020 */ struct _M128A FloatRegisters[8];
  /* 0x00a0 */ struct _M128A XmmRegisters[8];
  /* 0x0120 */ unsigned char Reserved4[224];
} XSAVE_FORMAT, *PXSAVE_FORMAT; /* size: 0x0200 */

typedef struct _XSAVE_AREA_HEADER
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned __int64 CompactionMask;
  /* 0x0010 */ unsigned __int64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER; /* size: 0x0040 */

typedef struct _XSAVE_AREA
{
  /* 0x0000 */ struct _XSAVE_FORMAT LegacyState;
  /* 0x0200 */ struct _XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA; /* size: 0x0240 */

typedef struct _IMAGE_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned long SizeOfStackReserve;
  /* 0x004c */ unsigned long SizeOfStackCommit;
  /* 0x0050 */ unsigned long SizeOfHeapReserve;
  /* 0x0054 */ unsigned long SizeOfHeapCommit;
  /* 0x0058 */ unsigned long LoaderFlags;
  /* 0x005c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0060 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER; /* size: 0x00e0 */

typedef struct _IMAGE_NT_HEADERS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS; /* size: 0x00f8 */

typedef struct _POP_POWER_PLANE
{
  /* 0x0000 */ struct _UNICODE_STRING PowerPlaneId;
  /* 0x0008 */ unsigned long Lock;
  /* 0x000c */ unsigned char OldIrql;
  /* 0x000d */ char Padding_66[3];
  /* 0x0010 */ volatile long DevicePowerMw;
  /* 0x0014 */ void* PmaxHandle;
  /* 0x0018 */ void* NotifyDevicePowerDraw /* function */;
  /* 0x001c */ unsigned long DeviceCount;
  /* 0x0020 */ struct _POP_DEVICE_POWER_PROFILE** Devices;
} POP_POWER_PLANE, *PPOP_POWER_PLANE; /* size: 0x0024 */

typedef union _KWAIT_STATUS_REGISTER
{
  union
  {
    /* 0x0000 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char State : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char Affinity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Priority : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char Apc : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char UserApc : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Alert : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} KWAIT_STATUS_REGISTER, *PKWAIT_STATUS_REGISTER; /* size: 0x0001 */

typedef struct _GROUP_AFFINITY
{
  /* 0x0000 */ unsigned long Mask;
  /* 0x0004 */ unsigned short Group;
  /* 0x0006 */ unsigned short Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; /* size: 0x000c */

typedef struct _KAPC
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char SpareByte0;
  /* 0x0002 */ unsigned char Size;
  /* 0x0003 */ unsigned char SpareByte1;
  /* 0x0004 */ unsigned long SpareLong0;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x000c */ struct _LIST_ENTRY ApcListEntry;
  union
  {
    struct
    {
      /* 0x0014 */ void* KernelRoutine /* function */;
      /* 0x0018 */ void* RundownRoutine /* function */;
      /* 0x001c */ void* NormalRoutine /* function */;
    }; /* size: 0x000c */
    /* 0x0014 */ void* Reserved[3];
  }; /* size: 0x000c */
  /* 0x0020 */ void* NormalContext;
  /* 0x0024 */ void* SystemArgument1;
  /* 0x0028 */ void* SystemArgument2;
  /* 0x002c */ char ApcStateIndex;
  /* 0x002d */ char ApcMode;
  /* 0x002e */ unsigned char Inserted;
  /* 0x002f */ char __PADDING__[1];
} KAPC, *PKAPC; /* size: 0x0030 */

typedef struct _KTHREAD
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ void* SListFaultAddress;
  /* 0x0014 */ long Padding_67;
  /* 0x0018 */ unsigned __int64 QuantumTarget;
  /* 0x0020 */ void* InitialStack;
  /* 0x0024 */ void* volatile StackLimit;
  /* 0x0028 */ void* StackBase;
  /* 0x002c */ unsigned long ThreadLock;
  /* 0x0030 */ volatile unsigned __int64 CycleTime;
  /* 0x0038 */ volatile unsigned long HighCycleTime;
  /* 0x003c */ void* ServiceTable;
  /* 0x0040 */ unsigned long CurrentRunTime;
  /* 0x0044 */ unsigned long ExpectedRunTime;
  /* 0x0048 */ void* KernelStack;
  /* 0x004c */ struct _XSAVE_FORMAT* StateSaveArea;
  /* 0x0050 */ struct _KSCHEDULING_GROUP* volatile SchedulingGroup;
  /* 0x0054 */ union _KWAIT_STATUS_REGISTER WaitRegister;
  /* 0x0055 */ volatile unsigned char Running;
  /* 0x0056 */ unsigned char Alerted[2];
  union
  {
    struct /* bitfield */
    {
      /* 0x0058 */ unsigned long AutoBoostActive : 1; /* bit position: 0 */
      /* 0x0058 */ unsigned long ReadyTransition : 1; /* bit position: 1 */
      /* 0x0058 */ unsigned long WaitNext : 1; /* bit position: 2 */
      /* 0x0058 */ unsigned long SystemAffinityActive : 1; /* bit position: 3 */
      /* 0x0058 */ unsigned long Alertable : 1; /* bit position: 4 */
      /* 0x0058 */ unsigned long UserStackWalkActive : 1; /* bit position: 5 */
      /* 0x0058 */ unsigned long ApcInterruptRequest : 1; /* bit position: 6 */
      /* 0x0058 */ unsigned long QuantumEndMigrate : 1; /* bit position: 7 */
      /* 0x0058 */ unsigned long UmsDirectedSwitchEnable : 1; /* bit position: 8 */
      /* 0x0058 */ unsigned long TimerActive : 1; /* bit position: 9 */
      /* 0x0058 */ unsigned long SystemThread : 1; /* bit position: 10 */
      /* 0x0058 */ unsigned long ProcessDetachActive : 1; /* bit position: 11 */
      /* 0x0058 */ unsigned long CalloutActive : 1; /* bit position: 12 */
      /* 0x0058 */ unsigned long ScbReadyQueue : 1; /* bit position: 13 */
      /* 0x0058 */ unsigned long ApcQueueable : 1; /* bit position: 14 */
      /* 0x0058 */ unsigned long ReservedStackInUse : 1; /* bit position: 15 */
      /* 0x0058 */ unsigned long UmsPerformingSyscall : 1; /* bit position: 16 */
      /* 0x0058 */ unsigned long TimerSuspended : 1; /* bit position: 17 */
      /* 0x0058 */ unsigned long SuspendedWaitMode : 1; /* bit position: 18 */
      /* 0x0058 */ unsigned long SuspendSchedulerApcWait : 1; /* bit position: 19 */
      /* 0x0058 */ unsigned long CetUserShadowStack : 1; /* bit position: 20 */
      /* 0x0058 */ unsigned long BypassProcessFreeze : 1; /* bit position: 21 */
      /* 0x0058 */ unsigned long Reserved : 10; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0058 */ long MiscFlags;
  }; /* size: 0x0004 */
  union
  {
    struct /* bitfield */
    {
      /* 0x005c */ unsigned long UserIdealProcessorFixed : 1; /* bit position: 0 */
      /* 0x005c */ unsigned long ThreadFlagsSpare : 1; /* bit position: 1 */
      /* 0x005c */ unsigned long AutoAlignment : 1; /* bit position: 2 */
      /* 0x005c */ unsigned long DisableBoost : 1; /* bit position: 3 */
      /* 0x005c */ unsigned long AlertedByThreadId : 1; /* bit position: 4 */
      /* 0x005c */ unsigned long QuantumDonation : 1; /* bit position: 5 */
      /* 0x005c */ unsigned long EnableStackSwap : 1; /* bit position: 6 */
      /* 0x005c */ unsigned long GuiThread : 1; /* bit position: 7 */
      /* 0x005c */ unsigned long DisableQuantum : 1; /* bit position: 8 */
      /* 0x005c */ unsigned long ChargeOnlySchedulingGroup : 1; /* bit position: 9 */
      /* 0x005c */ unsigned long DeferPreemption : 1; /* bit position: 10 */
      /* 0x005c */ unsigned long QueueDeferPreemption : 1; /* bit position: 11 */
      /* 0x005c */ unsigned long ForceDeferSchedule : 1; /* bit position: 12 */
      /* 0x005c */ unsigned long SharedReadyQueueAffinity : 1; /* bit position: 13 */
      /* 0x005c */ unsigned long FreezeCount : 1; /* bit position: 14 */
      /* 0x005c */ unsigned long TerminationApcRequest : 1; /* bit position: 15 */
      /* 0x005c */ unsigned long AutoBoostEntriesExhausted : 1; /* bit position: 16 */
      /* 0x005c */ unsigned long KernelStackResident : 1; /* bit position: 17 */
      /* 0x005c */ unsigned long TerminateRequestReason : 2; /* bit position: 18 */
      /* 0x005c */ unsigned long ProcessStackCountDecremented : 1; /* bit position: 20 */
      /* 0x005c */ unsigned long RestrictedGuiThread : 1; /* bit position: 21 */
      /* 0x005c */ unsigned long VpBackingThread : 1; /* bit position: 22 */
      /* 0x005c */ unsigned long ThreadFlagsSpare2 : 1; /* bit position: 23 */
      /* 0x005c */ unsigned long EtwStackTraceApcInserted : 8; /* bit position: 24 */
    }; /* bitfield */
    /* 0x005c */ volatile long ThreadFlags;
  }; /* size: 0x0004 */
  /* 0x0060 */ volatile unsigned char Tag;
  /* 0x0061 */ unsigned char SystemHeteroCpuPolicy;
  struct /* bitfield */
  {
    /* 0x0062 */ unsigned char UserHeteroCpuPolicy : 7; /* bit position: 0 */
    /* 0x0062 */ unsigned char ExplicitSystemHeteroCpuPolicy : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0063 */ unsigned char Spare0;
  /* 0x0064 */ unsigned long SystemCallNumber;
  /* 0x0068 */ void* FirstArgument;
  /* 0x006c */ struct _KTRAP_FRAME* TrapFrame;
  union
  {
    /* 0x0070 */ struct _KAPC_STATE ApcState;
    struct
    {
      /* 0x0070 */ unsigned char ApcStateFill[23];
      /* 0x0087 */ char Priority;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x0088 */ unsigned long UserIdealProcessor;
  /* 0x008c */ unsigned long ContextSwitches;
  /* 0x0090 */ volatile unsigned char State;
  /* 0x0091 */ char Spare12;
  /* 0x0092 */ unsigned char WaitIrql;
  /* 0x0093 */ char WaitMode;
  /* 0x0094 */ volatile long WaitStatus;
  /* 0x0098 */ struct _KWAIT_BLOCK* WaitBlockList;
  union
  {
    /* 0x009c */ struct _LIST_ENTRY WaitListEntry;
    /* 0x009c */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  }; /* size: 0x0008 */
  /* 0x00a4 */ struct _DISPATCHER_HEADER* volatile Queue;
  /* 0x00a8 */ void* Teb;
  /* 0x00ac */ long Padding_68;
  /* 0x00b0 */ unsigned __int64 RelativeTimerBias;
  /* 0x00b8 */ struct _KTIMER Timer;
  union
  {
    /* 0x00e0 */ struct _KWAIT_BLOCK WaitBlock[4];
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill8[20];
      /* 0x00f4 */ struct _KTHREAD_COUNTERS* ThreadCounters;
    }; /* size: 0x0018 */
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill9[44];
      /* 0x010c */ struct _XSTATE_SAVE* XStateSave;
    }; /* size: 0x0030 */
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill10[68];
      /* 0x0124 */ void* volatile Win32Thread;
    }; /* size: 0x0048 */
    struct
    {
      /* 0x00e0 */ unsigned char WaitBlockFill11[88];
      /* 0x0138 */ unsigned long WaitTime;
      union
      {
        struct
        {
          /* 0x013c */ short KernelApcDisable;
          /* 0x013e */ short SpecialApcDisable;
        }; /* size: 0x0004 */
        /* 0x013c */ unsigned long CombinedApcDisable;
      }; /* size: 0x0004 */
    }; /* size: 0x0060 */
  }; /* size: 0x0060 */
  /* 0x0140 */ struct _LIST_ENTRY QueueListEntry;
  union
  {
    /* 0x0148 */ volatile unsigned long NextProcessor;
    struct /* bitfield */
    {
      /* 0x0148 */ unsigned long NextProcessorNumber : 31; /* bit position: 0 */
      /* 0x0148 */ unsigned long SharedReadyQueue : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x014c */ long QueuePriority;
  /* 0x0150 */ struct _KPROCESS* Process;
  union
  {
    /* 0x0154 */ struct _GROUP_AFFINITY UserAffinity;
    struct
    {
      /* 0x0154 */ unsigned char UserAffinityFill[6];
      /* 0x015a */ char PreviousMode;
      /* 0x015b */ char BasePriority;
      union
      {
        /* 0x015c */ char PriorityDecrement;
        struct /* bitfield */
        {
          /* 0x015c */ unsigned char ForegroundBoost : 4; /* bit position: 0 */
          /* 0x015c */ unsigned char UnusualBoost : 4; /* bit position: 4 */
        }; /* bitfield */
      }; /* size: 0x0001 */
      /* 0x015d */ unsigned char Preempted;
      /* 0x015e */ unsigned char AdjustReason;
      /* 0x015f */ char AdjustIncrement;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
  /* 0x0160 */ unsigned long AffinityVersion;
  union
  {
    /* 0x0164 */ struct _GROUP_AFFINITY Affinity;
    struct
    {
      /* 0x0164 */ unsigned char AffinityFill[6];
      /* 0x016a */ unsigned char ApcStateIndex;
      /* 0x016b */ unsigned char WaitBlockCount;
      /* 0x016c */ unsigned long IdealProcessor;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
  /* 0x0170 */ unsigned long ReadyTime;
  union
  {
    /* 0x0174 */ struct _KAPC_STATE SavedApcState;
    struct
    {
      /* 0x0174 */ unsigned char SavedApcStateFill[23];
      /* 0x018b */ unsigned char WaitReason;
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
  /* 0x018c */ char SuspendCount;
  /* 0x018d */ char Saturation;
  /* 0x018e */ unsigned short SListFaultCount;
  union
  {
    /* 0x0190 */ struct _KAPC SchedulerApc;
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill0[1];
      /* 0x0191 */ unsigned char ResourceIndex;
    }; /* size: 0x0002 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill1[3];
      /* 0x0193 */ unsigned char QuantumReset;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill2[4];
      /* 0x0194 */ unsigned long KernelTime;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill3[36];
      /* 0x01b4 */ struct _KPRCB* volatile WaitPrcb;
    }; /* size: 0x0028 */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill4[40];
      /* 0x01b8 */ void* LegoData;
    }; /* size: 0x002c */
    struct
    {
      /* 0x0190 */ unsigned char SchedulerApcFill5[47];
      /* 0x01bf */ unsigned char CallbackNestingLevel;
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
  /* 0x01c0 */ unsigned long UserTime;
  /* 0x01c4 */ struct _KEVENT SuspendEvent;
  /* 0x01d4 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x01dc */ struct _LIST_ENTRY MutantListHead;
  /* 0x01e4 */ unsigned char AbEntrySummary;
  /* 0x01e5 */ unsigned char AbWaitEntryCount;
  /* 0x01e6 */ unsigned char AbAllocationRegionCount;
  /* 0x01e7 */ char SystemPriority;
  /* 0x01e8 */ struct _KLOCK_ENTRY* LockEntries;
  /* 0x01ec */ struct _SINGLE_LIST_ENTRY PropagateBoostsEntry;
  /* 0x01f0 */ struct _SINGLE_LIST_ENTRY IoSelfBoostsEntry;
  /* 0x01f4 */ unsigned char PriorityFloorCounts[16];
  /* 0x0204 */ unsigned char PriorityFloorCountsReserved[16];
  /* 0x0214 */ unsigned long PriorityFloorSummary;
  /* 0x0218 */ volatile long AbCompletedIoBoostCount;
  /* 0x021c */ volatile long AbCompletedIoQoSBoostCount;
  /* 0x0220 */ volatile short KeReferenceCount;
  /* 0x0222 */ unsigned char AbOrphanedEntrySummary;
  /* 0x0223 */ unsigned char AbOwnedEntryCount;
  /* 0x0224 */ unsigned long ForegroundLossTime;
  union
  {
    /* 0x0228 */ struct _LIST_ENTRY GlobalForegroundListEntry;
    struct
    {
      /* 0x0228 */ struct _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
      /* 0x022c */ unsigned long InGlobalForegroundList;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0230 */ struct _KSCB* QueuedScb;
  /* 0x0234 */ long Padding_69;
  /* 0x0238 */ unsigned __int64 NpxState;
  /* 0x0240 */ volatile unsigned long ThreadTimerDelay;
  union
  {
    /* 0x0244 */ volatile long ThreadFlags3;
    struct /* bitfield */
    {
      /* 0x0244 */ unsigned long BamQosLevel : 8; /* bit position: 0 */
      /* 0x0244 */ unsigned long PpmPolicy : 2; /* bit position: 8 */
      /* 0x0244 */ unsigned long ThreadFlags3Reserved2 : 22; /* bit position: 10 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0248 */ void* volatile AbWaitObject;
  /* 0x024c */ unsigned long ReservedPreviousReadyTimeValue;
  /* 0x0250 */ unsigned __int64 KernelWaitTime;
  /* 0x0258 */ unsigned __int64 UserWaitTime;
  /* 0x0260 */ unsigned long Spare29[3];
  /* 0x026c */ unsigned long EndPadding[5];
} KTHREAD, *PKTHREAD; /* size: 0x0280 */

typedef struct _tlgProvider_t
{
  /* 0x0000 */ unsigned int LevelPlus1;
  /* 0x0004 */ const unsigned short* ProviderMetadataPtr;
  /* 0x0008 */ unsigned __int64 KeywordAny;
  /* 0x0010 */ unsigned __int64 KeywordAll;
  /* 0x0018 */ unsigned __int64 RegHandle;
  /* 0x0020 */ void* EnableCallback /* function */;
  /* 0x0024 */ void* CallbackContext;
} tlgProvider_t, *PtlgProvider_t; /* size: 0x0028 */

typedef struct _POP_FX_DRIPS_WATCHDOG_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ unsigned long ComponentIndex;
  /* 0x000c */ struct _DEVICE_NODE** ChildDevices;
  /* 0x0010 */ unsigned long ChildDeviceCount;
} POP_FX_DRIPS_WATCHDOG_CONTEXT, *PPOP_FX_DRIPS_WATCHDOG_CONTEXT; /* size: 0x0014 */

typedef struct _WNF_NODE_HEADER
{
  /* 0x0000 */ unsigned short NodeTypeCode;
  /* 0x0002 */ unsigned short NodeByteSize;
} WNF_NODE_HEADER, *PWNF_NODE_HEADER; /* size: 0x0004 */

typedef struct _WNF_STATE_DATA
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ unsigned long AllocatedSize;
  /* 0x0008 */ unsigned long DataSize;
  /* 0x000c */ unsigned long ChangeStamp;
} WNF_STATE_DATA, *PWNF_STATE_DATA; /* size: 0x0010 */

typedef struct _VF_AVL_TREE
{
  /* 0x0000 */ unsigned long NodeRangeSize;
  /* 0x0004 */ volatile unsigned long NodeCount;
  /* 0x0008 */ struct _VF_AVL_TABLE* Tables;
  /* 0x000c */ unsigned long TablesNo;
  /* 0x0010 */ unsigned char UseSessionId;
  /* 0x0011 */ char Padding_70[3];
  union
  {
    union
    {
      /* 0x0014 */ unsigned long NodeSize;
      /* 0x0014 */ unsigned long UseLookaside;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} VF_AVL_TREE, *PVF_AVL_TREE; /* size: 0x0018 */

typedef union __m128
{
  union
  {
    /* 0x0000 */ float m128_f32[4];
    /* 0x0000 */ unsigned __int64 m128_u64[2];
    /* 0x0000 */ char m128_i8[16];
    /* 0x0000 */ short m128_i16[8];
    /* 0x0000 */ int m128_i32[4];
    /* 0x0000 */ __int64 m128_i64[2];
    /* 0x0000 */ unsigned char m128_u8[16];
    /* 0x0000 */ unsigned short m128_u16[8];
    /* 0x0000 */ unsigned int m128_u32[4];
  }; /* size: 0x0010 */
} _m128, *P_m128; /* size: 0x0010 */

typedef struct _PPM_SELECTION_MENU
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _PPM_SELECTION_MENU_ENTRY* Entries;
} PPM_SELECTION_MENU, *PPPM_SELECTION_MENU; /* size: 0x0008 */

union wil_details_FeatureStateCache
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned int stateCached : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned int hasNotificationCached : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned int variantCached : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned int effectiveState : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned int desiredState : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned int configuredState : 2; /* bit position: 5 */
        /* 0x0000 */ unsigned int needsRefresh : 1; /* bit position: 7 */
        /* 0x0000 */ unsigned int hasNotification : 1; /* bit position: 8 */
        /* 0x0000 */ unsigned int isVariant : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned int variant : 6; /* bit position: 10 */
        /* 0x0000 */ unsigned int unused : 16; /* bit position: 16 */
      }; /* bitfield */
      /* 0x0004 */ unsigned int payloadId;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 exchange64;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _PPM_SELECTION_DEPENDENCY
{
  /* 0x0000 */ unsigned long Processor;
  /* 0x0004 */ struct _PPM_SELECTION_MENU Menu;
} PPM_SELECTION_DEPENDENCY, *PPPM_SELECTION_DEPENDENCY; /* size: 0x000c */

typedef struct _VI_DEADLOCK_RESOURCE
{
  /* 0x0000 */ enum _VI_DEADLOCK_RESOURCE_TYPE Type;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long NodeCount : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned long RecursionCount : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x0008 */ void* ResourceAddress;
  /* 0x000c */ struct _VI_DEADLOCK_THREAD* ThreadOwner;
  /* 0x0010 */ struct _LIST_ENTRY ResourceList;
  union
  {
    /* 0x0018 */ struct _LIST_ENTRY HashChainList;
    /* 0x0018 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  /* 0x0020 */ void* StackTrace[8];
  /* 0x0040 */ void* LastAcquireTrace[8];
  /* 0x0060 */ void* LastReleaseTrace[8];
} VI_DEADLOCK_RESOURCE, *PVI_DEADLOCK_RESOURCE; /* size: 0x0080 */

typedef struct _KTRAP_FRAME
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned short TempSegCs;
  /* 0x000e */ unsigned char Logging;
  /* 0x000f */ unsigned char FrameType;
  /* 0x0010 */ unsigned long TempEsp;
  /* 0x0014 */ unsigned long Dr0;
  /* 0x0018 */ unsigned long Dr1;
  /* 0x001c */ unsigned long Dr2;
  /* 0x0020 */ unsigned long Dr3;
  /* 0x0024 */ unsigned long Dr6;
  /* 0x0028 */ unsigned long Dr7;
  /* 0x002c */ unsigned long SegGs;
  /* 0x0030 */ unsigned long SegEs;
  /* 0x0034 */ unsigned long SegDs;
  /* 0x0038 */ unsigned long Edx;
  /* 0x003c */ unsigned long Ecx;
  /* 0x0040 */ unsigned long Eax;
  /* 0x0044 */ unsigned char PreviousPreviousMode;
  /* 0x0045 */ unsigned char EntropyQueueDpc;
  union
  {
    /* 0x0046 */ unsigned char NmiMsrIbrs;
    /* 0x0046 */ unsigned char Reserved1;
  }; /* size: 0x0001 */
  /* 0x0047 */ unsigned char PreviousIrql;
  /* 0x0048 */ unsigned long MxCsr;
  /* 0x004c */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} KTRAP_FRAME, *PKTRAP_FRAME; /* size: 0x008c */

typedef union _KEXECUTE_OPTIONS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char ExecuteDisable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char ExecuteEnable : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char DisableThunkEmulation : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char Permanent : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char ExecuteDispatchEnable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned char ImageDispatchEnable : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned char DisableExceptionChainValidation : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned char Spare : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0000 */ volatile unsigned char ExecuteOptions;
    /* 0x0000 */ unsigned char ExecuteOptionsNV;
  }; /* size: 0x0001 */
} KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS; /* size: 0x0001 */

typedef union _KSTACK_COUNT
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long State : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long StackCount : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KSTACK_COUNT, *PKSTACK_COUNT; /* size: 0x0004 */

typedef struct _KPROCESS
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY ProfileListHead;
  /* 0x0018 */ unsigned long DirectoryTableBase;
  /* 0x001c */ struct _KGDTENTRY LdtDescriptor;
  /* 0x0024 */ struct _KIDTENTRY Int21Descriptor;
  /* 0x002c */ struct _LIST_ENTRY ThreadListHead;
  /* 0x0034 */ unsigned long ProcessLock;
  /* 0x0038 */ unsigned __int64 DeepFreezeStartTime;
  /* 0x0040 */ struct _KAFFINITY_EX Affinity;
  /* 0x004c */ struct _LIST_ENTRY ReadyListHead;
  /* 0x0054 */ struct _SINGLE_LIST_ENTRY SwapListEntry;
  /* 0x0058 */ volatile struct _KAFFINITY_EX ActiveProcessors;
  union
  {
    struct /* bitfield */
    {
      /* 0x0064 */ unsigned long AutoAlignment : 1; /* bit position: 0 */
      /* 0x0064 */ unsigned long DisableBoost : 1; /* bit position: 1 */
      /* 0x0064 */ unsigned long DisableQuantum : 1; /* bit position: 2 */
      /* 0x0064 */ unsigned long DeepFreeze : 1; /* bit position: 3 */
      /* 0x0064 */ unsigned long TimerVirtualization : 1; /* bit position: 4 */
      /* 0x0064 */ unsigned long CheckStackExtents : 1; /* bit position: 5 */
      /* 0x0064 */ unsigned long CacheIsolationEnabled : 1; /* bit position: 6 */
      /* 0x0064 */ unsigned long PpmPolicy : 3; /* bit position: 7 */
      /* 0x0064 */ unsigned long VaSpaceDeleted : 1; /* bit position: 10 */
      /* 0x0064 */ unsigned long ReservedFlags : 21; /* bit position: 11 */
    }; /* bitfield */
    /* 0x0064 */ volatile long ProcessFlags;
  }; /* size: 0x0004 */
  /* 0x0068 */ char BasePriority;
  /* 0x0069 */ char QuantumReset;
  /* 0x006a */ char Visited;
  /* 0x006b */ union _KEXECUTE_OPTIONS Flags;
  /* 0x006c */ unsigned short ThreadSeed[1];
  /* 0x006e */ unsigned short IdealProcessor[1];
  /* 0x0070 */ unsigned short IdealNode[1];
  /* 0x0072 */ unsigned short IdealGlobalNode;
  /* 0x0074 */ unsigned short Spare1;
  /* 0x0076 */ unsigned short IopmOffset;
  /* 0x0078 */ struct _KSCHEDULING_GROUP* SchedulingGroup;
  /* 0x007c */ volatile union _KSTACK_COUNT StackCount;
  /* 0x0080 */ struct _LIST_ENTRY ProcessListEntry;
  /* 0x0088 */ unsigned __int64 CycleTime;
  /* 0x0090 */ unsigned __int64 ContextSwitches;
  /* 0x0098 */ unsigned long FreezeCount;
  /* 0x009c */ unsigned long KernelTime;
  /* 0x00a0 */ unsigned long UserTime;
  /* 0x00a4 */ unsigned long ReadyTime;
  /* 0x00a8 */ void* VdmTrapcHandler;
  /* 0x00ac */ unsigned long ProcessTimerDelay;
  /* 0x00b0 */ unsigned __int64 KernelWaitTime;
  /* 0x00b8 */ unsigned __int64 UserWaitTime;
  /* 0x00c0 */ unsigned __int64 LastRebalanceQpc;
  /* 0x00c8 */ void* PerProcessorCycleTimes;
  /* 0x00cc */ unsigned long EndPadding[5];
} KPROCESS, *PKPROCESS; /* size: 0x00e0 */

typedef struct _PROCESSOR_IDLE_CONSTRAINTS
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 IdleTime;
  /* 0x0010 */ unsigned __int64 ExpectedIdleDuration;
  /* 0x0018 */ unsigned __int64 MaxIdleDuration;
  /* 0x0020 */ unsigned long OverrideState;
  /* 0x0024 */ unsigned long TimeCheck;
  /* 0x0028 */ unsigned char PromotePercent;
  /* 0x0029 */ unsigned char DemotePercent;
  /* 0x002a */ unsigned char Parked;
  /* 0x002b */ unsigned char Interruptible;
  /* 0x002c */ unsigned char PlatformIdle;
  /* 0x002d */ unsigned char ExpectedWakeReason;
  /* 0x002e */ unsigned char IdleStateMax;
  /* 0x002f */ char __PADDING__[1];
} PROCESSOR_IDLE_CONSTRAINTS, *PPROCESSOR_IDLE_CONSTRAINTS; /* size: 0x0030 */

typedef struct _PROCESSOR_IDLE_PREPARE_INFO
{
  /* 0x0000 */ void* Context;
  /* 0x0004 */ long Padding_71;
  /* 0x0008 */ struct _PROCESSOR_IDLE_CONSTRAINTS Constraints;
  /* 0x0038 */ unsigned long DependencyCount;
  /* 0x003c */ unsigned long DependencyUsed;
  /* 0x0040 */ struct _PROCESSOR_IDLE_DEPENDENCY* DependencyArray;
  /* 0x0044 */ unsigned long PlatformIdleStateIndex;
  /* 0x0048 */ unsigned long ProcessorIdleStateIndex;
  /* 0x004c */ unsigned long IdleSelectFailureMask;
} PROCESSOR_IDLE_PREPARE_INFO, *PPROCESSOR_IDLE_PREPARE_INFO; /* size: 0x0050 */

typedef struct _PPM_COORDINATED_SELECTION
{
  /* 0x0000 */ unsigned long MaximumStates;
  /* 0x0004 */ unsigned long SelectedStates;
  /* 0x0008 */ unsigned long DefaultSelection;
  /* 0x000c */ unsigned long* Selection;
} PPM_COORDINATED_SELECTION, *PPPM_COORDINATED_SELECTION; /* size: 0x0010 */

typedef struct _PPM_IDLE_STATES
{
  /* 0x0000 */ unsigned char InterfaceVersion;
  /* 0x0001 */ unsigned char IdleOverride;
  /* 0x0002 */ unsigned char EstimateIdleDuration;
  /* 0x0003 */ unsigned char ExitLatencyTraceEnabled;
  /* 0x0004 */ unsigned char NonInterruptibleTransition;
  /* 0x0005 */ unsigned char UnaccountedTransition;
  /* 0x0006 */ unsigned char IdleDurationLimited;
  /* 0x0007 */ unsigned char IdleCheckLimited;
  /* 0x0008 */ unsigned char StrictVetoBias;
  /* 0x0009 */ char Padding_72[3];
  /* 0x000c */ unsigned long ExitLatencyCountdown;
  /* 0x0010 */ unsigned long TargetState;
  /* 0x0014 */ unsigned long ActualState;
  /* 0x0018 */ unsigned long OldState;
  /* 0x001c */ unsigned long OverrideIndex;
  /* 0x0020 */ unsigned long ProcessorIdleCount;
  /* 0x0024 */ unsigned long Type;
  /* 0x0028 */ unsigned __int64 LevelId;
  /* 0x0030 */ unsigned short ReasonFlags;
  /* 0x0032 */ char Padding_73[6];
  /* 0x0038 */ volatile unsigned __int64 InitiateWakeStamp;
  /* 0x0040 */ long PreviousStatus;
  /* 0x0044 */ unsigned long PreviousCancelReason;
  /* 0x0048 */ struct _KAFFINITY_EX PrimaryProcessorMask;
  /* 0x0054 */ struct _KAFFINITY_EX SecondaryProcessorMask;
  /* 0x0060 */ void* IdlePrepare /* function */;
  /* 0x0064 */ void* IdlePreExecute /* function */;
  /* 0x0068 */ void* IdleExecute /* function */;
  /* 0x006c */ void* IdlePreselect /* function */;
  /* 0x0070 */ void* IdleTest /* function */;
  /* 0x0074 */ void* IdleAvailabilityCheck /* function */;
  /* 0x0078 */ void* IdleComplete /* function */;
  /* 0x007c */ void* IdleCancel /* function */;
  /* 0x0080 */ void* IdleIsHalted /* function */;
  /* 0x0084 */ void* IdleInitiateWake /* function */;
  /* 0x0088 */ struct _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo;
  /* 0x00d8 */ struct _KAFFINITY_EX DeepIdleSnapshot;
  /* 0x00e4 */ struct _PERFINFO_PPM_STATE_SELECTION* Tracing;
  /* 0x00e8 */ struct _PERFINFO_PPM_STATE_SELECTION* CoordinatedTracing;
  /* 0x00ec */ struct _PPM_SELECTION_MENU ProcessorMenu;
  /* 0x00f4 */ struct _PPM_SELECTION_MENU CoordinatedMenu;
  /* 0x00fc */ struct _PPM_COORDINATED_SELECTION CoordinatedSelection;
  /* 0x010c */ struct _PPM_IDLE_STATE State[1];
} PPM_IDLE_STATES, *PPPM_IDLE_STATES; /* size: 0x0150 */

typedef struct _PROCESSOR_IDLE_DEPENDENCY
{
  /* 0x0000 */ unsigned long ProcessorIndex;
  /* 0x0004 */ unsigned char ExpectedState;
  /* 0x0005 */ unsigned char AllowDeeperStates;
  /* 0x0006 */ unsigned char LooseDependency;
  /* 0x0007 */ char __PADDING__[1];
} PROCESSOR_IDLE_DEPENDENCY, *PPROCESSOR_IDLE_DEPENDENCY; /* size: 0x0008 */

typedef union _POP_FX_PERF_FLAGS
{
  union
  {
    /* 0x0000 */ long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Progress : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 24; /* bit position: 3 */
      /* 0x0000 */ unsigned long Synchronicity : 2; /* bit position: 27 */
      /* 0x0000 */ unsigned long RequestPepCompleted : 1; /* bit position: 29 */
      /* 0x0000 */ unsigned long RequestSucceeded : 1; /* bit position: 30 */
      /* 0x0000 */ unsigned long NestedCallback : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} POP_FX_PERF_FLAGS, *PPOP_FX_PERF_FLAGS; /* size: 0x0004 */

typedef struct _KQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY EntryListHead;
  /* 0x0018 */ volatile unsigned long CurrentCount;
  /* 0x001c */ unsigned long MaximumCount;
  /* 0x0020 */ struct _LIST_ENTRY ThreadListHead;
} KQUEUE, *PKQUEUE; /* size: 0x0028 */

typedef struct _KTHREAD_COUNTERS
{
  /* 0x0000 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0008 */ struct _THREAD_PERFORMANCE_DATA* UserData;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long ContextSwitches;
  /* 0x0014 */ long Padding_74;
  /* 0x0018 */ unsigned __int64 CycleTimeBias;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING HwCounter[16];
} KTHREAD_COUNTERS, *PKTHREAD_COUNTERS; /* size: 0x01a8 */

typedef struct _THREAD_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ struct _PROCESSOR_NUMBER ProcessorNumber;
  /* 0x0008 */ unsigned long ContextSwitches;
  /* 0x000c */ unsigned long HwCountersCount;
  /* 0x0010 */ volatile unsigned __int64 UpdateCount;
  /* 0x0018 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING CycleTime;
  /* 0x0040 */ struct _COUNTER_READING HwCounters[16];
} THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA; /* size: 0x01c0 */

typedef struct _VF_TRACKER_STAMP
{
  /* 0x0000 */ void* Thread;
  /* 0x0004 */ unsigned char Flags : 8; /* bit position: 0 */
  /* 0x0005 */ unsigned char OldIrql : 8; /* bit position: 0 */
  /* 0x0006 */ unsigned char NewIrql : 8; /* bit position: 0 */
  /* 0x0007 */ unsigned char Processor : 8; /* bit position: 0 */
} VF_TRACKER_STAMP, *PVF_TRACKER_STAMP; /* size: 0x0008 */

typedef struct _POP_FX_WORK_POOL
{
  /* 0x0000 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0004 */ unsigned long EmergencyWorkQueueLock;
  /* 0x0008 */ struct _LIST_ENTRY EmergencyWorkQueue;
  /* 0x0010 */ struct _KSEMAPHORE WorkPoolQueues[2];
  /* 0x0038 */ volatile long WorkItemStatus;
  /* 0x003c */ struct _POP_FX_WORK_POOL_ITEM WorkItems[4];
  /* 0x008c */ struct _KTHREAD* EmergencyWorkerThread;
  /* 0x0090 */ struct _KTHREAD* DynamicWorkerThreads[4];
} POP_FX_WORK_POOL, *PPOP_FX_WORK_POOL; /* size: 0x00a0 */

typedef struct _POP_FX_PLUGIN
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ unsigned long Version;
  /* 0x000c */ long Padding_75;
  /* 0x0010 */ unsigned __int64 Flags;
  /* 0x0018 */ struct _KQUEUE WorkQueue;
  /* 0x0040 */ void* AcceptDeviceNotification /* function */;
  /* 0x0044 */ void* AcceptProcessorNotification /* function */;
  /* 0x0048 */ void* AcceptAcpiNotification /* function */;
  /* 0x004c */ struct _POP_FX_WORK_POOL PluginWorkPool;
  /* 0x00ec */ long __PADDING__[1];
} POP_FX_PLUGIN, *PPOP_FX_PLUGIN; /* size: 0x00f0 */

typedef struct _MI_CROSS_PARTITION_CHARGES
{
  /* 0x0000 */ unsigned long CurrentCharges;
  /* 0x0004 */ unsigned long ChargeFailures;
  /* 0x0008 */ unsigned long ChargePeak;
  /* 0x000c */ unsigned long ChargeMinimum;
} MI_CROSS_PARTITION_CHARGES, *PMI_CROSS_PARTITION_CHARGES; /* size: 0x0010 */

typedef struct _POWER_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceD1;
  /* 0x0004 */ unsigned long SequenceD2;
  /* 0x0008 */ unsigned long SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE; /* size: 0x000c */

typedef struct _PHYSICAL_MEMORY_RUN
{
  /* 0x0000 */ unsigned long BasePage;
  /* 0x0004 */ unsigned long PageCount;
} PHYSICAL_MEMORY_RUN, *PPHYSICAL_MEMORY_RUN; /* size: 0x0008 */

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Expanded : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Transitioning : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Pageable : 1; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
  }; /* size: 0x0004 */
} EX_PUSH_LOCK_AUTO_EXPAND_STATE, *PEX_PUSH_LOCK_AUTO_EXPAND_STATE; /* size: 0x0004 */

typedef struct _EX_PUSH_LOCK_AUTO_EXPAND
{
  /* 0x0000 */ struct _EX_PUSH_LOCK LocalLock;
  /* 0x0004 */ struct _EX_PUSH_LOCK_AUTO_EXPAND_STATE State;
  /* 0x0008 */ unsigned long Stats;
} EX_PUSH_LOCK_AUTO_EXPAND, *PEX_PUSH_LOCK_AUTO_EXPAND; /* size: 0x000c */

typedef struct _CM_INTENT_LOCK
{
  /* 0x0000 */ unsigned long OwnerCount;
  /* 0x0004 */ struct _CM_KCB_UOW** OwnerTable;
} CM_INTENT_LOCK, *PCM_INTENT_LOCK; /* size: 0x0008 */

struct _EXP_LICENSE_STATE;

typedef struct _KLOCK_ENTRY_LOCK_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long CrossThreadReleasable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Busy : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 2 */
      /* 0x0000 */ unsigned long InTree : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ void* LockState;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ void* SessionState;
    /* 0x0004 */ unsigned long SessionId;
  }; /* size: 0x0004 */
} KLOCK_ENTRY_LOCK_STATE, *PKLOCK_ENTRY_LOCK_STATE; /* size: 0x0008 */

typedef union _KLOCK_ENTRY_BOOST_BITMAP
{
  union
  {
    /* 0x0000 */ unsigned long AllFields;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long AllBoosts : 17; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 15; /* bit position: 17 */
    }; /* bitfield */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short CpuBoostsBitmap : 15; /* bit position: 0 */
        /* 0x0000 */ unsigned short IoBoost : 1; /* bit position: 15 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short IoQoSBoost : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned short IoNormalPriorityWaiterCount : 8; /* bit position: 1 */
        /* 0x0002 */ unsigned short IoQoSWaiterCount : 7; /* bit position: 9 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} KLOCK_ENTRY_BOOST_BITMAP, *PKLOCK_ENTRY_BOOST_BITMAP; /* size: 0x0004 */

typedef struct _KLOCK_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeListEntry;
  }; /* size: 0x000c */
  union
  {
    /* 0x000c */ unsigned long EntryFlags;
    struct
    {
      /* 0x000c */ unsigned char EntryOffset;
      union
      {
        /* 0x000d */ unsigned char ThreadLocalFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x000d */ unsigned char WaitingBit : 1; /* bit position: 0 */
            /* 0x000d */ unsigned char Spare0 : 7; /* bit position: 1 */
          }; /* bitfield */
          union
          {
            /* 0x000e */ unsigned char AcquiredByte;
            struct
            {
              /* 0x000e */ unsigned char AcquiredBit : 1; /* bit position: 0 */
              union
              {
                /* 0x000f */ unsigned char CrossThreadFlags;
                struct /* bitfield */
                {
                  /* 0x000f */ unsigned char HeadNodeBit : 1; /* bit position: 0 */
                  /* 0x000f */ unsigned char IoPriorityBit : 1; /* bit position: 1 */
                  /* 0x000f */ unsigned char IoQoSWaiter : 1; /* bit position: 2 */
                  /* 0x000f */ unsigned char Spare1 : 5; /* bit position: 3 */
                }; /* bitfield */
              }; /* size: 0x0001 */
            }; /* size: 0x0002 */
          }; /* size: 0x0002 */
        }; /* size: 0x0003 */
      }; /* size: 0x0003 */
    }; /* size: 0x0004 */
    struct /* bitfield */
    {
      /* 0x000c */ unsigned long StaticState : 8; /* bit position: 0 */
      /* 0x000c */ unsigned long AllFlags : 24; /* bit position: 8 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0010 */ struct _KLOCK_ENTRY_LOCK_STATE LockState;
    /* 0x0010 */ void* volatile LockUnsafe;
    struct
    {
      /* 0x0010 */ volatile unsigned char CrossThreadReleasableAndBusyByte;
      /* 0x0011 */ unsigned char Reserved[2];
      /* 0x0013 */ volatile unsigned char InTreeByte;
      union
      {
        /* 0x0014 */ void* SessionState;
        /* 0x0014 */ unsigned long SessionId;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    struct
    {
      /* 0x0018 */ struct _RTL_RB_TREE OwnerTree;
      /* 0x0020 */ struct _RTL_RB_TREE WaiterTree;
    }; /* size: 0x0010 */
    /* 0x0018 */ char CpuPriorityKey;
  }; /* size: 0x0010 */
  /* 0x0028 */ unsigned long EntryLock;
  /* 0x002c */ union _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap;
} KLOCK_ENTRY, *PKLOCK_ENTRY; /* size: 0x0030 */

typedef struct _MI_CLONE_BLOCK_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ActualCloneCommit : 27; /* bit position: 0 */
    /* 0x0000 */ unsigned long CloneProtection : 5; /* bit position: 27 */
  }; /* bitfield */
} MI_CLONE_BLOCK_FLAGS, *PMI_CLONE_BLOCK_FLAGS; /* size: 0x0004 */

typedef struct _MMCLONE_BLOCK
{
  /* 0x0000 */ struct _MMPTE ProtoPte;
  union
  {
    /* 0x0008 */ volatile unsigned long CloneCommitCount;
    /* 0x0008 */ struct _MI_CLONE_BLOCK_FLAGS u1;
  }; /* size: 0x0004 */
  /* 0x000c */ volatile unsigned long CloneRefCount;
} MMCLONE_BLOCK, *PMMCLONE_BLOCK; /* size: 0x0010 */

typedef struct _MI_CACHED_PTE
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long GlobalTimeStamp;
      /* 0x0004 */ unsigned long PteIndex;
    }; /* size: 0x0008 */
    /* 0x0000 */ __int64 Long;
  }; /* size: 0x0008 */
} MI_CACHED_PTE, *PMI_CACHED_PTE; /* size: 0x0008 */

typedef struct _flags
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Removable : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char GroupAssigned : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned char GroupCommitted : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned char GroupAssignmentFixed : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char ProcessorOnly : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char Fill : 3; /* bit position: 5 */
  }; /* bitfield */
} flags, *Pflags; /* size: 0x0001 */

typedef union _KQOS_GROUPING_SETS
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long SingleCoreSet;
      /* 0x0004 */ unsigned long SmtSet;
    }; /* size: 0x0008 */
    /* 0x0000 */ __int64 QosGroupingMasks;
  }; /* size: 0x0008 */
} KQOS_GROUPING_SETS, *PKQOS_GROUPING_SETS; /* size: 0x0008 */

typedef struct _KNODE
{
  /* 0x0000 */ unsigned long IdleNonParkedCpuSet;
  /* 0x0004 */ unsigned long IdleSmtSet;
  /* 0x0008 */ unsigned long NonPairedSmtSet;
  /* 0x000c */ unsigned long IdleCpuSet;
  /* 0x0010 */ long Padding_76[12];
  /* 0x0040 */ unsigned long DeepIdleSet;
  /* 0x0044 */ unsigned long IdleConstrainedSet;
  /* 0x0048 */ unsigned long NonParkedSet;
  /* 0x004c */ unsigned long SoftParkedSet;
  /* 0x0050 */ unsigned long NonIsrTargetedSet;
  /* 0x0054 */ long ParkLock;
  /* 0x0058 */ unsigned char ProcessSeed;
  /* 0x0059 */ unsigned char Spare5[3];
  /* 0x005c */ long Padding_77[9];
  /* 0x0080 */ unsigned long SiblingMask;
  union
  {
    /* 0x0084 */ struct _GROUP_AFFINITY Affinity;
    struct
    {
      /* 0x0084 */ unsigned char AffinityFill[6];
      /* 0x008a */ unsigned short NodeNumber;
      /* 0x008c */ unsigned short PrimaryNodeNumber;
      /* 0x008e */ unsigned short Spare0;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
  /* 0x0090 */ unsigned long SharedReadyQueueMask;
  /* 0x0094 */ unsigned long StrideMask;
  /* 0x0098 */ unsigned long ProximityId;
  /* 0x009c */ unsigned long Lowest;
  /* 0x00a0 */ unsigned long Highest;
  /* 0x00a4 */ unsigned char MaximumProcessors;
  /* 0x00a5 */ struct _flags Flags;
  /* 0x00a6 */ unsigned char Spare10;
  /* 0x00a7 */ char Padding_78;
  /* 0x00a8 */ struct _KHETERO_PROCESSOR_SET HeteroSets[5];
  /* 0x00e4 */ unsigned long PpmConfiguredQosSets[5];
  /* 0x00f8 */ unsigned long Spare11;
  /* 0x00fc */ long Padding_79;
  /* 0x0100 */ union _KQOS_GROUPING_SETS QosGroupingSets;
  /* 0x0108 */ unsigned long QosPreemptibleSet;
  /* 0x010c */ unsigned long LLCLeaders;
  /* 0x0110 */ long __PADDING__[12];
} KNODE, *PKNODE; /* size: 0x0140 */

typedef struct _POP_IRP_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _DEVICE_OBJECT* Pdo;
  /* 0x0010 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x0014 */ struct _DEVICE_OBJECT* CurrentDevice;
  /* 0x0018 */ unsigned __int64 WatchdogStart;
  /* 0x0020 */ struct _KTIMER WatchdogTimer;
  /* 0x0048 */ struct _KDPC WatchdogDpc;
  /* 0x0068 */ unsigned char MinorFunction;
  /* 0x0069 */ char Padding_80[3];
  /* 0x006c */ enum _POWER_STATE_TYPE PowerStateType;
  /* 0x0070 */ union _POWER_STATE PowerState;
  /* 0x0074 */ unsigned char WatchdogEnabled;
  /* 0x0075 */ char Padding_81[3];
  /* 0x0078 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x007c */ unsigned char SystemTransition;
  /* 0x007d */ unsigned char NotifyPEP;
  /* 0x007e */ char Padding_82[2];
  /* 0x0080 */ long IrpSequenceID;
  union
  {
    struct
    {
      /* 0x0084 */ void* CallerCompletion /* function */;
      /* 0x0088 */ void* CallerContext;
      /* 0x008c */ struct _DEVICE_OBJECT* CallerDevice;
      /* 0x0090 */ unsigned char SystemWake;
      /* 0x0091 */ char __PADDING__[3];
    } /* size: 0x0010 */ Device;
    struct
    {
      /* 0x0084 */ struct _PO_DEVICE_NOTIFY* NotifyDevice;
      /* 0x0088 */ unsigned char FxDeviceActivated;
      /* 0x0089 */ char __PADDING__[3];
    } /* size: 0x0008 */ System;
  }; /* size: 0x0010 */
  /* 0x0094 */ enum _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON DStateReason;
} POP_IRP_DATA, *PPOP_IRP_DATA; /* size: 0x0098 */

typedef union _MI_RESERVATION_CLUSTER_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ClusterSize : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned long SequenceNumber : 22; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0000 */ long EntireInfo;
  }; /* size: 0x0004 */
} MI_RESERVATION_CLUSTER_INFO, *PMI_RESERVATION_CLUSTER_INFO; /* size: 0x0004 */

struct tagSWITCH_CONTEXT_ATTRIBUTE
{
  /* 0x0000 */ unsigned __int64 ulContextUpdateCounter;
  /* 0x0008 */ int fAllowContextUpdate;
  /* 0x000c */ int fEnableTrace;
  /* 0x0010 */ unsigned __int64 EtwHandle;
}; /* size: 0x0018 */

typedef struct _MI_EXTRA_IMAGE_INFORMATION
{
  /* 0x0000 */ unsigned long SizeOfHeaders;
  /* 0x0004 */ unsigned long SizeOfImage;
  /* 0x0008 */ unsigned long TimeDateStamp;
} MI_EXTRA_IMAGE_INFORMATION, *PMI_EXTRA_IMAGE_INFORMATION; /* size: 0x000c */

struct _PSP_STORAGE;

typedef struct _MI_PTE_CHAIN_HEAD
{
  /* 0x0000 */ struct _MMPTE Flink;
  /* 0x0008 */ struct _MMPTE Blink;
  /* 0x0010 */ struct _MMPTE* PteBase;
  /* 0x0014 */ long __PADDING__[1];
} MI_PTE_CHAIN_HEAD, *PMI_PTE_CHAIN_HEAD; /* size: 0x0018 */

typedef struct _MI_RESTRICTED_MODWRITES
{
  /* 0x0000 */ unsigned char MaximumClusterPages;
  /* 0x0001 */ unsigned char ReducedClusterWrites;
  /* 0x0002 */ unsigned char ImposeDelay;
} MI_RESTRICTED_MODWRITES, *PMI_RESTRICTED_MODWRITES; /* size: 0x0003 */

typedef struct _MI_ACTIVE_PFN
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Tradable : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long NonPagedBuddy : 28; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ Leaf;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long Tradable : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long WsleAge : 3; /* bit position: 1 */
        /* 0x0000 */ unsigned long NonPagedBuddy : 28; /* bit position: 4 */
      }; /* bitfield */
    } /* size: 0x0004 */ PageTable;
    /* 0x0000 */ unsigned long EntireActiveField;
  }; /* size: 0x0004 */
} MI_ACTIVE_PFN, *PMI_ACTIVE_PFN; /* size: 0x0004 */

typedef struct _MMPFNENTRY1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char PageLocation : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char WriteInProgress : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char Modified : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char ReadInProgress : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char CacheAttribute : 2; /* bit position: 6 */
  }; /* bitfield */
} MMPFNENTRY1, *PMMPFNENTRY1; /* size: 0x0001 */

typedef struct _MMPFNENTRY3
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Priority : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char OnProtectedStandby : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned char InPageError : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char SystemChargedPage : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char RemovalRequested : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char ParityError : 1; /* bit position: 7 */
  }; /* bitfield */
} MMPFNENTRY3, *PMMPFNENTRY3; /* size: 0x0001 */

typedef struct _MMPFN
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ListEntry;
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    struct
    {
      union
      {
        union
        {
          /* 0x0000 */ struct _SINGLE_LIST_ENTRY NextSlistPfn;
          /* 0x0000 */ void* Next;
          /* 0x0000 */ unsigned long Flink;
          /* 0x0000 */ struct _MI_ACTIVE_PFN Active;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u1;
      union
      {
        /* 0x0004 */ struct _MMPTE* PteAddress;
        /* 0x0004 */ unsigned long PteLong;
      }; /* size: 0x0004 */
      /* 0x0008 */ struct _MMPTE OriginalPte;
      /* 0x0010 */ struct _MIPFNBLINK u2;
      union
      {
        union
        {
          struct
          {
            /* 0x0014 */ unsigned short ReferenceCount;
            /* 0x0016 */ struct _MMPFNENTRY1 e1;
            /* 0x0017 */ struct _MMPFNENTRY3 e3;
          }; /* size: 0x0004 */
          struct
          {
            /* 0x0014 */ unsigned short ReferenceCount;
          } /* size: 0x0002 */ e2;
          struct
          {
            /* 0x0014 */ unsigned long EntireField;
          } /* size: 0x0004 */ e4;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u3;
      union
      {
        union
        {
          struct /* bitfield */
          {
            /* 0x0018 */ unsigned long PteFrame : 23; /* bit position: 0 */
            /* 0x0018 */ unsigned long ResidentPage : 1; /* bit position: 23 */
            /* 0x0018 */ unsigned long AnchorLargePageSize : 2; /* bit position: 24 */
            /* 0x0018 */ unsigned long ModifiedListBucketIndex : 2; /* bit position: 26 */
            /* 0x0018 */ unsigned long PageIdentity : 3; /* bit position: 28 */
            /* 0x0018 */ unsigned long PrototypePte : 1; /* bit position: 31 */
          }; /* bitfield */
          /* 0x0018 */ unsigned long EntireField;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u4;
    }; /* size: 0x001c */
  }; /* size: 0x001c */
} MMPFN, *PMMPFN; /* size: 0x001c */

typedef struct _LOOKASIDE_LIST_EX
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX; /* size: 0x0048 */

typedef struct _VF_AVL_TREE_NODE
{
  /* 0x0000 */ void* p;
  /* 0x0004 */ unsigned long RangeSize;
} VF_AVL_TREE_NODE, *PVF_AVL_TREE_NODE; /* size: 0x0008 */

typedef struct _VF_AVL_TREE_NODE_EX
{
  /* 0x0000 */ struct _VF_AVL_TREE_NODE Base;
  /* 0x0008 */ unsigned long SessionId;
} VF_AVL_TREE_NODE_EX, *PVF_AVL_TREE_NODE_EX; /* size: 0x000c */

typedef struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
{
  /* 0x0000 */ struct _VERIFIER_SHARED_EXPORT_THUNK* SharedExportThunks;
  /* 0x0004 */ struct _VERIFIER_SHARED_EXPORT_THUNK* PoolSharedExportThunks;
  /* 0x0008 */ struct _VERIFIER_SHARED_EXPORT_THUNK* OrderDependentSharedExportThunks;
  /* 0x000c */ struct _VERIFIER_SHARED_EXPORT_THUNK* XdvSharedExportThunks;
} VF_TARGET_ALL_SHARED_EXPORT_THUNKS, *PVF_TARGET_ALL_SHARED_EXPORT_THUNKS; /* size: 0x0010 */

typedef struct _VF_TARGET_DRIVER
{
  /* 0x0000 */ struct _VF_AVL_TREE_NODE_EX TreeNode;
  union
  {
    union
    {
      /* 0x000c */ struct _VF_TARGET_ALL_SHARED_EXPORT_THUNKS AllSharedExportThunks;
      struct
      {
        struct /* bitfield */
        {
          /* 0x000c */ unsigned long SnapSharedExportsFailed : 1; /* bit position: 0 */
          /* 0x000c */ unsigned long Spare : 31; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u1;
  /* 0x001c */ struct _VF_TARGET_VERIFIED_DRIVER_DATA* VerifiedData;
} VF_TARGET_DRIVER, *PVF_TARGET_DRIVER; /* size: 0x0020 */

typedef struct _PO_DIRECTED_DRIPS_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY QueueLink;
  /* 0x0008 */ struct _LIST_ENTRY VisitedQueueLink;
  /* 0x0010 */ volatile unsigned long Flags;
  /* 0x0014 */ unsigned long CachedFlags;
  /* 0x0018 */ unsigned long DeviceUsageCount;
  /* 0x001c */ void* Diagnostic;
} PO_DIRECTED_DRIPS_STATE, *PPO_DIRECTED_DRIPS_STATE; /* size: 0x0020 */

typedef struct _MMSECURE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ReadOnly : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadWrite : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long SecNoChange : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long NoDelete : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long RequiresPteReversal : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long ExclusiveSecure : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long UserModeOnly : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long NoInherit : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long CheckVad : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long Spare : 3; /* bit position: 9 */
  }; /* bitfield */
} MMSECURE_FLAGS, *PMMSECURE_FLAGS; /* size: 0x0004 */

typedef struct _ARBITER_ORDERING_LIST
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Maximum;
  /* 0x0004 */ struct _ARBITER_ORDERING* Orderings;
} ARBITER_ORDERING_LIST, *PARBITER_ORDERING_LIST; /* size: 0x0008 */

typedef struct _ARBITER_INSTANCE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _KEVENT* MutexEvent;
  /* 0x0008 */ wchar_t* Name;
  /* 0x000c */ wchar_t* OrderingName;
  /* 0x0010 */ int ResourceType;
  /* 0x0014 */ struct _RTL_RANGE_LIST* Allocation;
  /* 0x0018 */ struct _RTL_RANGE_LIST* PossibleAllocation;
  /* 0x001c */ struct _ARBITER_ORDERING_LIST OrderingList;
  /* 0x0024 */ struct _ARBITER_ORDERING_LIST ReservedList;
  /* 0x002c */ long ReferenceCount;
  /* 0x0030 */ struct _ARBITER_INTERFACE* Interface;
  /* 0x0034 */ unsigned long AllocationStackMaxSize;
  /* 0x0038 */ struct _ARBITER_ALLOCATION_STATE* AllocationStack;
  /* 0x003c */ void* UnpackRequirement /* function */;
  /* 0x0040 */ void* PackResource /* function */;
  /* 0x0044 */ void* UnpackResource /* function */;
  /* 0x0048 */ void* ScoreRequirement /* function */;
  /* 0x004c */ void* TestAllocation /* function */;
  /* 0x0050 */ void* RetestAllocation /* function */;
  /* 0x0054 */ void* CommitAllocation /* function */;
  /* 0x0058 */ void* RollbackAllocation /* function */;
  /* 0x005c */ void* BootAllocation /* function */;
  /* 0x0060 */ void* QueryArbitrate /* function */;
  /* 0x0064 */ void* QueryConflict /* function */;
  /* 0x0068 */ void* AddReserved /* function */;
  /* 0x006c */ void* StartArbiter /* function */;
  /* 0x0070 */ void* PreprocessEntry /* function */;
  /* 0x0074 */ void* AllocateEntry /* function */;
  /* 0x0078 */ void* GetNextAllocationRange /* function */;
  /* 0x007c */ void* FindSuitableRange /* function */;
  /* 0x0080 */ void* AddAllocation /* function */;
  /* 0x0084 */ void* BacktrackAllocation /* function */;
  /* 0x0088 */ void* OverrideConflict /* function */;
  /* 0x008c */ void* InitializeRangeList /* function */;
  /* 0x0090 */ void* DeleteOwnerRanges /* function */;
  /* 0x0094 */ unsigned char TransactionInProgress;
  /* 0x0095 */ char Padding_83[3];
  /* 0x0098 */ struct _KEVENT* TransactionEvent;
  /* 0x009c */ void* Extension;
  /* 0x00a0 */ struct _DEVICE_OBJECT* BusDeviceObject;
  /* 0x00a4 */ void* ConflictCallbackContext;
  /* 0x00a8 */ void* ConflictCallback /* function */;
} ARBITER_INSTANCE, *PARBITER_INSTANCE; /* size: 0x00ac */

typedef struct _EVENT_FILTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 Ptr;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Type;
} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR; /* size: 0x0010 */

typedef struct _VF_POOL_TRACE
{
  /* 0x0000 */ void* Address;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _ETHREAD* Thread;
  /* 0x000c */ void* StackTrace[13];
} VF_POOL_TRACE, *PVF_POOL_TRACE; /* size: 0x0040 */

typedef struct _SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ void* TransferAddress;
  /* 0x0004 */ unsigned long ZeroBits;
  /* 0x0008 */ unsigned long MaximumStackSize;
  /* 0x000c */ unsigned long CommittedStackSize;
  /* 0x0010 */ unsigned long SubSystemType;
  union
  {
    struct
    {
      /* 0x0014 */ unsigned short SubSystemMinorVersion;
      /* 0x0016 */ unsigned short SubSystemMajorVersion;
    }; /* size: 0x0004 */
    /* 0x0014 */ unsigned long SubSystemVersion;
  }; /* size: 0x0004 */
  union
  {
    struct
    {
      /* 0x0018 */ unsigned short MajorOperatingSystemVersion;
      /* 0x001a */ unsigned short MinorOperatingSystemVersion;
    }; /* size: 0x0004 */
    /* 0x0018 */ unsigned long OperatingSystemVersion;
  }; /* size: 0x0004 */
  /* 0x001c */ unsigned short ImageCharacteristics;
  /* 0x001e */ unsigned short DllCharacteristics;
  /* 0x0020 */ unsigned short Machine;
  /* 0x0022 */ unsigned char ImageContainsCode;
  union
  {
    /* 0x0023 */ unsigned char ImageFlags;
    struct /* bitfield */
    {
      /* 0x0023 */ unsigned char ComPlusNativeReady : 1; /* bit position: 0 */
      /* 0x0023 */ unsigned char ComPlusILOnly : 1; /* bit position: 1 */
      /* 0x0023 */ unsigned char ImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0023 */ unsigned char ImageMappedFlat : 1; /* bit position: 3 */
      /* 0x0023 */ unsigned char BaseBelow4gb : 1; /* bit position: 4 */
      /* 0x0023 */ unsigned char ComPlusPrefer32bit : 1; /* bit position: 5 */
      /* 0x0023 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0024 */ unsigned long LoaderFlags;
  /* 0x0028 */ unsigned long ImageFileSize;
  /* 0x002c */ unsigned long CheckSum;
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION; /* size: 0x0030 */

typedef struct _MI_SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ struct _SECTION_IMAGE_INFORMATION ExportedImageInformation;
  /* 0x0030 */ struct _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation;
} MI_SECTION_IMAGE_INFORMATION, *PMI_SECTION_IMAGE_INFORMATION; /* size: 0x003c */

typedef struct _SEGMENT_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short TotalNumberOfPtes4132 : 10; /* bit position: 0 */
      /* 0x0000 */ unsigned short Spare0 : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned short SessionDriverProtos : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned short LargePages : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned short DebugSymbolsLoaded : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned short WriteCombined : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short NoCache : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short Short0;
  }; /* size: 0x0002 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0002 */ unsigned char ImageCetShadowStacksReady : 1; /* bit position: 0 */
      /* 0x0002 */ unsigned char DefaultProtectionMask : 5; /* bit position: 1 */
      /* 0x0002 */ unsigned char Binary32 : 1; /* bit position: 6 */
      /* 0x0002 */ unsigned char ContainsDebug : 1; /* bit position: 7 */
    }; /* bitfield */
    /* 0x0002 */ unsigned char UChar1;
  }; /* size: 0x0001 */
  union
  {
    struct /* bitfield */
    {
      /* 0x0003 */ unsigned char ForceCollision : 1; /* bit position: 0 */
      /* 0x0003 */ unsigned char ImageSigningType : 3; /* bit position: 1 */
      /* 0x0003 */ unsigned char ImageSigningLevel : 4; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0003 */ unsigned char UChar2;
  }; /* size: 0x0001 */
} SEGMENT_FLAGS, *PSEGMENT_FLAGS; /* size: 0x0004 */

typedef struct _EX_PARTITION
{
  /* 0x0000 */ struct _EPARTITION* PartitionObject;
  /* 0x0004 */ struct _EX_WORK_QUEUE** volatile* WorkQueues;
  /* 0x0008 */ struct _EX_WORK_QUEUE_MANAGER** WorkQueueManagers;
  /* 0x000c */ volatile long QueueAllocationMask;
} EX_PARTITION, *PEX_PARTITION; /* size: 0x0010 */

typedef struct _MI_PAGEFILE_BITMAPS_CACHE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE LengthTreeNode;
    /* 0x0000 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x000c */
  /* 0x000c */ struct _RTL_BALANCED_NODE LocationTreeNode;
  /* 0x0018 */ unsigned long StartingIndex;
  /* 0x001c */ unsigned long Length;
} MI_PAGEFILE_BITMAPS_CACHE_ENTRY, *PMI_PAGEFILE_BITMAPS_CACHE_ENTRY; /* size: 0x0020 */

typedef struct _KPRIQUEUE
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY EntryListHead[32];
  /* 0x0110 */ volatile long CurrentCount[32];
  /* 0x0190 */ unsigned long MaximumCount;
  /* 0x0194 */ struct _LIST_ENTRY ThreadListHead;
} KPRIQUEUE, *PKPRIQUEUE; /* size: 0x019c */

typedef struct _EX_WORK_QUEUE
{
  /* 0x0000 */ struct _KPRIQUEUE WorkPriQueue;
  /* 0x019c */ struct _EX_PARTITION* Partition;
  /* 0x01a0 */ struct _ENODE* Node;
  /* 0x01a4 */ volatile unsigned long WorkItemsProcessed;
  /* 0x01a8 */ unsigned long WorkItemsProcessedLastPass;
  /* 0x01ac */ volatile long ThreadCount;
  struct /* bitfield */
  {
    /* 0x01b0 */ long MinThreads : 31; /* bit position: 0 */
    /* 0x01b0 */ volatile unsigned long TryFailed : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x01b4 */ long MaxThreads;
  /* 0x01b8 */ enum _EXQUEUEINDEX QueueIndex;
  /* 0x01bc */ struct _KEVENT* AllThreadsExitedEvent;
} EX_WORK_QUEUE, *PEX_WORK_QUEUE; /* size: 0x01c0 */

typedef struct _EXT_IOMMU_DEVICE_ID_TEST
{
  /* 0x0000 */ unsigned __int64 UniqueId;
} EXT_IOMMU_DEVICE_ID_TEST, *PEXT_IOMMU_DEVICE_ID_TEST; /* size: 0x0008 */

typedef struct _RTL_CHASH_ENTRY
{
  /* 0x0000 */ unsigned long Key;
} RTL_CHASH_ENTRY, *PRTL_CHASH_ENTRY; /* size: 0x0004 */

typedef struct _PO_DIAG_STACK_RECORD
{
  /* 0x0000 */ unsigned long StackDepth;
  /* 0x0004 */ void* Stack[1];
} PO_DIAG_STACK_RECORD, *PPO_DIAG_STACK_RECORD; /* size: 0x0008 */

typedef struct _RTL_CHASH_TABLE
{
  /* 0x0000 */ struct _RTL_CHASH_ENTRY* Table;
  /* 0x0004 */ unsigned long EntrySizeShift;
  /* 0x0008 */ unsigned long EntryMax;
  /* 0x000c */ unsigned long EntryCount;
} RTL_CHASH_TABLE, *PRTL_CHASH_TABLE; /* size: 0x0010 */

typedef struct _MI_PARTITION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long BeingDeleted : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long PageListsInitialized : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long StoreReservedPagesCharged : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long UseProtectedSlabAllocators : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long UseUnprotectedSlabAllocators : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long PureHoldingPartition : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long ZeroPagesOptional : 1; /* bit position: 6 */
  }; /* bitfield */
} MI_PARTITION_FLAGS, *PMI_PARTITION_FLAGS; /* size: 0x0004 */

typedef struct _MI_PARTITION_CORE
{
  /* 0x0000 */ unsigned short PartitionId;
  /* 0x0002 */ char Padding_84[2];
  union
  {
    union
    {
      /* 0x0004 */ unsigned long LongFlags;
      /* 0x0004 */ struct _MI_PARTITION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0008 */ unsigned long Signature;
  /* 0x000c */ unsigned char MemoryConfigurationChanged;
  /* 0x000d */ char Padding_85[3];
  /* 0x0010 */ struct _MI_NODE_INFORMATION* NodeInformation;
  /* 0x0014 */ struct _RTL_AVL_TREE PageRoot;
  /* 0x0018 */ struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryNodeRuns;
  /* 0x001c */ unsigned long MemoryBlockReferences;
  /* 0x0020 */ struct _WORK_QUEUE_ITEM PfnUnmapWorkItem;
  /* 0x0030 */ unsigned long PfnUnmapCount;
  /* 0x0034 */ void* PfnUnmapWaitList;
  /* 0x0038 */ struct _PHYSICAL_MEMORY_DESCRIPTOR* MemoryRuns;
  /* 0x003c */ struct _KEVENT ExitEvent;
  /* 0x004c */ void* SystemThreadHandles[6];
  /* 0x0064 */ struct _EPARTITION* PartitionObject;
  /* 0x0068 */ struct _EX_PUSH_LOCK PartitionSystemThreadsLock;
  /* 0x006c */ struct _EX_PUSH_LOCK DynamicMemoryPushLock;
  /* 0x0070 */ volatile long DynamicMemoryLock;
  /* 0x0074 */ unsigned char PfnUnmapActive;
  /* 0x0075 */ char Padding_86[3];
  /* 0x0078 */ struct _KEVENT TemporaryMemoryEvent;
  /* 0x0088 */ void* RootDirectory;
  /* 0x008c */ void* KernelObjectsDirectory;
  /* 0x0090 */ struct _KEVENT* MemoryEvents[11];
  /* 0x00bc */ void* MemoryEventHandles[11];
} MI_PARTITION_CORE, *PMI_PARTITION_CORE; /* size: 0x00e8 */

typedef struct _MMPAGE_FILE_EXPANSION
{
  /* 0x0000 */ struct _SEGMENT* Segment;
  /* 0x0004 */ struct _LIST_ENTRY DereferenceList;
  /* 0x000c */ struct _MI_PARTITION* Partition;
  /* 0x0010 */ unsigned long RequestedExpansionSize;
  /* 0x0014 */ unsigned long ActualExpansion;
  /* 0x0018 */ struct _KEVENT Event;
  /* 0x0028 */ volatile long InProgress;
  union
  {
    union
    {
      /* 0x002c */ unsigned long LongFlags;
      /* 0x002c */ struct _MMPAGE_FILE_EXPANSION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0030 */ void** volatile ActiveEntry;
} MMPAGE_FILE_EXPANSION, *PMMPAGE_FILE_EXPANSION; /* size: 0x0034 */

typedef struct _MMMOD_WRITER_LISTHEAD
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  union
  {
    /* 0x0008 */ struct _KGATE Gate;
    /* 0x0008 */ struct _KEVENT Event;
  }; /* size: 0x0010 */
} MMMOD_WRITER_LISTHEAD, *PMMMOD_WRITER_LISTHEAD; /* size: 0x0018 */

typedef struct _MI_MODWRITE_DATA
{
  /* 0x0000 */ long PagesLoad;
  /* 0x0004 */ unsigned long PagesAverage;
  /* 0x0008 */ unsigned long AverageAvailablePages;
  /* 0x000c */ unsigned long PagesWritten;
  /* 0x0010 */ unsigned long WritesIssued;
  /* 0x0014 */ unsigned long IgnoredReservationsCount;
  /* 0x0018 */ unsigned long FreedReservationsCount;
  /* 0x001c */ unsigned long WriteBurstCount;
  /* 0x0020 */ unsigned __int64 IgnoreReservationsStartTime;
  /* 0x0028 */ volatile union _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo;
  struct /* bitfield */
  {
    /* 0x002c */ unsigned short IgnoreReservations : 1; /* bit position: 0 */
    /* 0x002c */ unsigned short Spare : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x002e */ unsigned short Spare1;
} MI_MODWRITE_DATA, *PMI_MODWRITE_DATA; /* size: 0x0030 */

typedef struct _MI_PARTITION_MODWRITES
{
  /* 0x0000 */ struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
  /* 0x0034 */ struct _MMPAGE_FILE_EXPANSION PageFileContract;
  /* 0x0068 */ unsigned long NumberOfMappedMdls;
  /* 0x006c */ volatile long NumberOfMappedMdlsInUse;
  /* 0x0070 */ unsigned long NumberOfMappedMdlsInUsePeak;
  /* 0x0074 */ struct _MMMOD_WRITER_LISTHEAD MappedFileHeader;
  /* 0x008c */ unsigned char NeedMappedMdl;
  /* 0x008d */ unsigned char NeedPageFileMdl;
  /* 0x008e */ unsigned char ModwriterActive;
  /* 0x008f */ unsigned char TransitionInserted;
  /* 0x0090 */ long LastModifiedWriteError;
  /* 0x0094 */ long LastMappedWriteError;
  /* 0x0098 */ volatile unsigned long MappedFileWriteSucceeded;
  /* 0x009c */ unsigned long MappedWriteBurstCount;
  /* 0x00a0 */ unsigned long LowPriorityModWritesOutstanding;
  /* 0x00a4 */ struct _KEVENT BoostModWriteIoPriorityEvent;
  /* 0x00b4 */ long ModifiedWriterThreadPriority;
  /* 0x00b8 */ unsigned long ModifiedPagesLowPriorityGoal;
  /* 0x00bc */ struct _KEVENT ModifiedPageWriterEvent;
  /* 0x00cc */ struct _KEVENT ModifiedWriterExitedEvent;
  /* 0x00dc */ volatile long WriteAllPagefilePages;
  /* 0x00e0 */ volatile long WriteAllMappedPages;
  /* 0x00e4 */ struct _KEVENT MappedPageWriterEvent;
  /* 0x00f4 */ long Padding_87;
  /* 0x00f8 */ struct _MI_MODWRITE_DATA ModWriteData;
  /* 0x0128 */ struct _KEVENT RescanPageFilesEvent;
  /* 0x0138 */ struct _MMMOD_WRITER_LISTHEAD PagingFileHeader;
  /* 0x0150 */ struct _ETHREAD* ModifiedPageWriterThread;
  /* 0x0154 */ struct _EX_RUNDOWN_REF ModifiedPageWriterRundown;
  /* 0x0158 */ struct _WORK_QUEUE_ITEM PagefileScanWorkItem;
  /* 0x0168 */ unsigned long PagefileScanCount;
  /* 0x016c */ volatile long ClusterRestrictionLock;
  /* 0x0170 */ struct _MI_RESTRICTED_MODWRITES ClusterRestrictions[2];
  /* 0x0176 */ char Padding_88[2];
  /* 0x0178 */ struct _KEVENT NotifyStoreMemoryConditions;
  /* 0x0188 */ volatile unsigned char DelayMappedWrite;
  /* 0x0189 */ char Padding_89[3];
  /* 0x018c */ volatile unsigned long PagefileReservationsEnabled;
  /* 0x0190 */ struct _EX_PUSH_LOCK PageFileCreationLock;
  /* 0x0194 */ struct _WORK_QUEUE_ITEM TrimPagefileWorkItem;
  /* 0x01a4 */ long Padding_90;
  /* 0x01a8 */ unsigned __int64 LastTrimPagefileTime;
  /* 0x01b0 */ struct _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem;
  /* 0x01c0 */ volatile long WsSwapPageFileContractionInProgress;
  /* 0x01c4 */ struct _EX_PUSH_LOCK WorkingSetSwapLock;
  /* 0x01c8 */ volatile long WorkingSetInswapLock;
  /* 0x01cc */ long __PADDING__[1];
} MI_PARTITION_MODWRITES, *PMI_PARTITION_MODWRITES; /* size: 0x01d0 */

typedef struct _MMDEREFERENCE_SEGMENT_HEADER
{
  /* 0x0000 */ struct _KSEMAPHORE Semaphore;
  /* 0x0014 */ struct _LIST_ENTRY ControlAreaDeleteListHead;
  /* 0x001c */ struct _LIST_ENTRY UnusedSegmentDeleteListHead;
  /* 0x0024 */ struct _LIST_ENTRY PagefileExtensionListHead;
} MMDEREFERENCE_SEGMENT_HEADER, *PMMDEREFERENCE_SEGMENT_HEADER; /* size: 0x002c */

typedef struct _MI_PARTITION_SEGMENTS
{
  /* 0x0000 */ volatile long SegmentListLock;
  /* 0x0004 */ unsigned long DeleteOnCloseCount;
  /* 0x0008 */ volatile __int64 FsControlAreaCount;
  /* 0x0010 */ volatile __int64 PfControlAreaCount;
  /* 0x0018 */ volatile __int64 CloneHeaderCount;
  /* 0x0020 */ struct _KEVENT DeleteSubsectionCleanup;
  /* 0x0030 */ struct _KEVENT UnusedSegmentCleanup;
  /* 0x0040 */ unsigned long SubsectionDeletePtes;
  /* 0x0044 */ struct _MMPAGE_FILE_EXPANSION AttemptForCantExtend;
  /* 0x0078 */ struct _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader;
  /* 0x00a4 */ struct _LIST_ENTRY DeleteOnCloseList;
  /* 0x00ac */ long Padding_91;
  /* 0x00b0 */ struct _KTIMER DeleteOnCloseTimer;
  /* 0x00d8 */ unsigned char DeleteOnCloseTimerActive;
  /* 0x00d9 */ unsigned char SegmentDereferenceThreadExists;
  /* 0x00da */ char Padding_92[2];
  /* 0x00dc */ void* SegmentDereferenceActiveControlArea;
  /* 0x00e0 */ unsigned long UnusedSegmentPagedPool;
  /* 0x00e4 */ struct _LIST_ENTRY UnusedSegmentList;
  /* 0x00ec */ struct _LIST_ENTRY UnusedSubsectionList;
  /* 0x00f4 */ struct _LIST_ENTRY DeleteSubsectionList;
  /* 0x00fc */ struct _KEVENT ControlAreaDeleteEvent;
  /* 0x010c */ struct _SINGLE_LIST_ENTRY ControlAreaDeleteList;
  /* 0x0110 */ struct _MI_PTE_CHAIN_HEAD FreeSystemCache;
  /* 0x0128 */ struct _KEVENT CloneDereferenceEvent;
  /* 0x0138 */ union _SLIST_HEADER CloneProtosSListHead;
  /* 0x0140 */ struct _EX_PUSH_LOCK SystemCacheInitLock;
  /* 0x0144 */ unsigned long PagefileExtensionWaiters;
  /* 0x0148 */ unsigned long PagefileExtensionRequests;
  /* 0x014c */ struct _KEVENT PagefileExtensionWaitEvent;
  /* 0x015c */ struct _MI_CROSS_PARTITION_CHARGES SharedCharges[7];
  /* 0x01cc */ struct _KEVENT* SharedChargesDrainEvent;
  /* 0x01d0 */ struct _KEVENT* ControlAreasDrainEvent;
  /* 0x01d4 */ struct _KEVENT* CloneHeaderDrainEvent;
  /* 0x01d8 */ struct _EX_RUNDOWN_REF_CACHE_AWARE* ProbeRundownReference;
  /* 0x01dc */ long __PADDING__[9];
} MI_PARTITION_SEGMENTS, *PMI_PARTITION_SEGMENTS; /* size: 0x0200 */

typedef struct _MI_PARTITION_COMMIT
{
  /* 0x0000 */ unsigned long PeakCommitment;
  /* 0x0004 */ unsigned long TotalCommitLimitMaximum;
  /* 0x0008 */ volatile long Popups[2];
  /* 0x0010 */ unsigned long LowCommitThreshold;
  /* 0x0014 */ unsigned long HighCommitThreshold;
  /* 0x0018 */ unsigned long EventLock;
  /* 0x001c */ unsigned long SystemCommitReserve;
  /* 0x0020 */ unsigned long OverCommit;
} MI_PARTITION_COMMIT, *PMI_PARTITION_COMMIT; /* size: 0x0024 */

typedef struct _MI_PARTITION_ZEROING
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem;
  /* 0x0010 */ volatile long NodeCount;
  /* 0x0014 */ volatile long BackgroundZeroingDisabled;
  /* 0x0018 */ struct _KGATE LargeBootZeroingComplete;
  /* 0x0028 */ struct _KEVENT ReleaseNodeZeroingThreads;
  /* 0x0038 */ struct _KGATE AllZeroingComplete;
  /* 0x0048 */ unsigned char IpiCalibrationFailed;
  /* 0x0049 */ char Padding_93[3];
  /* 0x004c */ volatile long ActiveProcessorsForIpiCalibration;
  /* 0x0050 */ volatile long NodesReadyForIpiCalibration;
  /* 0x0054 */ long ZeroFreePageSlistMinimum;
  /* 0x0058 */ volatile long ExistingThreads;
} MI_PARTITION_ZEROING, *PMI_PARTITION_ZEROING; /* size: 0x005c */

typedef struct _MMWORKING_SET_EXPANSION_HEAD
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
} MMWORKING_SET_EXPANSION_HEAD, *PMMWORKING_SET_EXPANSION_HEAD; /* size: 0x0008 */

typedef struct _MMWSL_INSTANCE
{
  /* 0x0000 */ struct _MMPTE* NextPteToTrim;
  /* 0x0004 */ struct _MMPTE* NextPteToAge;
  /* 0x0008 */ struct _MMPTE* NextPteToAccessClear;
  /* 0x000c */ unsigned long LastAccessClearingRemainder;
  /* 0x0010 */ unsigned long LastAgingRemainder;
  /* 0x0014 */ unsigned long LockedEntries;
} MMWSL_INSTANCE, *PMMWSL_INSTANCE; /* size: 0x0018 */

typedef struct _MI_PAGEFILE_TRACES
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned short PartitionId;
  /* 0x0006 */ unsigned char Priority;
  /* 0x0007 */ unsigned char IrpPriority;
  /* 0x0008 */ unsigned char ReservationWrite;
  /* 0x0009 */ char Padding_94[7];
  /* 0x0010 */ union _LARGE_INTEGER CurrentTime;
  /* 0x0018 */ unsigned long AvailablePages;
  /* 0x001c */ unsigned long ModifiedPagesTotal;
  /* 0x0020 */ unsigned long ModifiedPagefilePages;
  /* 0x0024 */ unsigned long ModifiedNoWritePages;
  /* 0x0028 */ unsigned long ModifiedPagefileNoReservationPages;
  struct
  {
    /* 0x002c */ struct _MDL Mdl;
    /* 0x0048 */ unsigned long Page[1];
  } /* size: 0x0020 */ MdlHack;
  /* 0x004c */ long __PADDING__[1];
} MI_PAGEFILE_TRACES, *PMI_PAGEFILE_TRACES; /* size: 0x0050 */

typedef struct _MI_VISIBLE_PARTITION
{
  /* 0x0000 */ unsigned long LowestPhysicalPage;
  /* 0x0004 */ unsigned long HighestPhysicalPage;
  /* 0x0008 */ unsigned long NumberOfPhysicalPages;
  /* 0x000c */ volatile unsigned long NumberOfPagingFiles;
  /* 0x0010 */ unsigned char SystemCacheInitialized;
  /* 0x0011 */ char Padding_95[3];
  /* 0x0014 */ struct _MMPAGING_FILE* PagingFile[16];
  /* 0x0054 */ long Padding_96[11];
  /* 0x0080 */ volatile unsigned long AvailablePages;
  /* 0x0084 */ long Padding_97[15];
  /* 0x00c0 */ volatile unsigned long ResidentAvailablePages;
  /* 0x00c4 */ long Padding_98[15];
  /* 0x0100 */ struct _MMSUPPORT_INSTANCE PartitionWs[1];
  /* 0x0164 */ struct _MMWSL_INSTANCE PartitionWorkingSetLists[1];
  /* 0x017c */ volatile unsigned long TotalCommittedPages;
  /* 0x0180 */ struct _MMPFNLIST ModifiedPageListHead;
  /* 0x0194 */ long Padding_99[11];
  /* 0x01c0 */ struct _MMPFNLIST ModifiedNoWritePageListHead;
  /* 0x01d4 */ unsigned long TotalCommitLimit;
  /* 0x01d8 */ unsigned long TotalPagesForPagingFile;
  /* 0x01dc */ unsigned long VadPhysicalPages;
  /* 0x01e0 */ unsigned long ProcessLockedFilePages;
  /* 0x01e4 */ volatile unsigned long SharedCommit;
  /* 0x01e8 */ unsigned long SlabAllocatorPages;
  /* 0x01ec */ unsigned long ChargeCommitmentFailures[4];
  /* 0x01fc */ volatile long PageFileTraceIndex;
  /* 0x0200 */ struct _MI_PAGEFILE_TRACES PageFileTraces[32];
} MI_VISIBLE_PARTITION, *PMI_VISIBLE_PARTITION; /* size: 0x0c00 */

typedef struct _MI_PARTITION
{
  /* 0x0000 */ struct _MI_PARTITION_CORE Core;
  /* 0x00e8 */ struct _MI_PARTITION_MODWRITES Modwriter;
  /* 0x02b8 */ struct _MI_PARTITION_STORES Store;
  /* 0x0318 */ long Padding_100[10];
  /* 0x0340 */ struct _MI_PARTITION_SEGMENTS Segments;
  /* 0x0540 */ struct _MI_PARTITION_PAGE_LISTS PageLists;
  /* 0x0d80 */ struct _MI_PARTITION_COMMIT Commit;
  /* 0x0da4 */ struct _MI_PARTITION_ZEROING Zeroing;
  /* 0x0e00 */ struct _MI_PAGE_COMBINING_SUPPORT PageCombine;
  /* 0x0ee0 */ void* WorkingSetControl;
  /* 0x0ee4 */ struct _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead;
  /* 0x0eec */ unsigned long SessionDetachTimeStamp;
  /* 0x0ef0 */ long Padding_101[4];
  /* 0x0f00 */ struct _MI_VISIBLE_PARTITION Vp;
} MI_PARTITION, *PMI_PARTITION; /* size: 0x1b00 */

typedef struct _IO_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _PPM_SELECTION_MENU_ENTRY
{
  /* 0x0000 */ unsigned char StrictDependency;
  /* 0x0001 */ unsigned char InitiatingState;
  /* 0x0002 */ unsigned char DependentState;
  /* 0x0003 */ char Padding_102;
  /* 0x0004 */ unsigned long StateIndex;
  /* 0x0008 */ unsigned long Dependencies;
  /* 0x000c */ struct _PPM_SELECTION_DEPENDENCY* DependencyList;
} PPM_SELECTION_MENU_ENTRY, *PPPM_SELECTION_MENU_ENTRY; /* size: 0x0010 */

struct wil_details_FeatureDescriptor
{
  /* 0x0000 */ union wil_details_FeatureStateCache* featureStateCache;
  /* 0x0004 */ unsigned int featureId;
  /* 0x0008 */ unsigned char changeTime;
  /* 0x0009 */ unsigned char isAlwaysDisabled;
  /* 0x000a */ unsigned char isAlwaysEnabled;
  /* 0x000b */ unsigned char isEnabledByDefault;
  /* 0x000c */ const struct wil_details_FeatureDescriptor* const* requiresFeatures;
}; /* size: 0x0010 */

typedef struct _PPM_VETO_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ unsigned long VetoReason;
  /* 0x000c */ unsigned long ReferenceCount;
  /* 0x0010 */ unsigned __int64 HitCount;
  /* 0x0018 */ unsigned __int64 LastActivationTime;
  /* 0x0020 */ unsigned __int64 TotalActiveTime;
  /* 0x0028 */ unsigned __int64 CsActivationTime;
  /* 0x0030 */ unsigned __int64 CsActiveTime;
} PPM_VETO_ENTRY, *PPPM_VETO_ENTRY; /* size: 0x0038 */

typedef union _WHEA_ERROR_PACKET_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long CriticalEvent : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long HypervisorError : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long AddressTranslationRequired : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long AddressTranslationCompleted : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long Reserved2 : 24; /* bit position: 8 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_PACKET_V2
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ union _WHEA_ERROR_PACKET_FLAGS Flags;
  /* 0x0010 */ enum _WHEA_ERROR_TYPE ErrorType;
  /* 0x0014 */ enum _WHEA_ERROR_SEVERITY ErrorSeverity;
  /* 0x0018 */ unsigned long ErrorSourceId;
  /* 0x001c */ enum _WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
  /* 0x0020 */ struct _GUID NotifyType;
  /* 0x0030 */ unsigned __int64 Context;
  /* 0x0038 */ enum _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
  /* 0x003c */ unsigned long Reserved1;
  /* 0x0040 */ unsigned long DataOffset;
  /* 0x0044 */ unsigned long DataLength;
  /* 0x0048 */ unsigned long PshedDataOffset;
  /* 0x004c */ unsigned long PshedDataLength;
} WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2; /* size: 0x0050 */

typedef struct _PROC_IDLE_STATE_BUCKET
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned __int64 MinTime;
  /* 0x0010 */ unsigned __int64 MaxTime;
  /* 0x0018 */ unsigned long Count;
  /* 0x001c */ long __PADDING__[1];
} PROC_IDLE_STATE_BUCKET, *PPROC_IDLE_STATE_BUCKET; /* size: 0x0020 */

typedef struct _PROC_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned long CancelCount;
  /* 0x000c */ unsigned long FailureCount;
  /* 0x0010 */ unsigned long SuccessCount;
  /* 0x0014 */ unsigned long InvalidBucketIndex;
  /* 0x0018 */ unsigned __int64 MinTime;
  /* 0x0020 */ unsigned __int64 MaxTime;
  /* 0x0028 */ struct _PPM_SELECTION_STATISTICS SelectionStatistics;
  /* 0x00a8 */ struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
} PROC_IDLE_STATE_ACCOUNTING, *PPROC_IDLE_STATE_ACCOUNTING; /* size: 0x03e8 */

typedef struct _PROC_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long TotalTransitions;
  /* 0x0008 */ unsigned long ResetCount;
  /* 0x000c */ unsigned long AbortCount;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ unsigned __int64 PriorIdleTime;
  /* 0x0020 */ enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
  /* 0x0024 */ long Padding_103;
  /* 0x0028 */ struct _PROC_IDLE_STATE_ACCOUNTING State[1];
} PROC_IDLE_ACCOUNTING, *PPROC_IDLE_ACCOUNTING; /* size: 0x0410 */

typedef union _WHEA_PERSISTENCE_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Signature : 16; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Length : 24; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Identifier : 16; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Attributes : 2; /* bit position: 56 */
      /* 0x0000 */ unsigned __int64 DoNotLog : 1; /* bit position: 58 */
      /* 0x0000 */ unsigned __int64 Reserved : 5; /* bit position: 59 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 AsULONGLONG;
  }; /* size: 0x0008 */
} WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO; /* size: 0x0008 */

typedef struct _PROC_FEEDBACK_COUNTER
{
  union
  {
    /* 0x0000 */ void* InstantaneousRead /* function */;
    /* 0x0000 */ void* DifferentialRead /* function */;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_104;
  /* 0x0008 */ unsigned __int64 LastActualCount;
  /* 0x0010 */ unsigned __int64 LastReferenceCount;
  /* 0x0018 */ unsigned long CachedValue;
  /* 0x001c */ long Padding_105;
  /* 0x0020 */ unsigned char Affinitized;
  /* 0x0021 */ unsigned char Differential;
  /* 0x0022 */ unsigned char DiscardIdleTime;
  /* 0x0023 */ unsigned char Scaling;
  /* 0x0024 */ unsigned long Context;
} PROC_FEEDBACK_COUNTER, *PPROC_FEEDBACK_COUNTER; /* size: 0x0028 */

typedef struct _MI_BAD_MEMORY_EVENT_ENTRY
{
  /* 0x0000 */ unsigned long BugCheckCode;
  /* 0x0004 */ long Active;
  /* 0x0008 */ unsigned long Data;
  /* 0x000c */ long Padding_106;
  /* 0x0010 */ union _LARGE_INTEGER PhysicalAddress;
  /* 0x0018 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_BAD_MEMORY_EVENT_ENTRY, *PMI_BAD_MEMORY_EVENT_ENTRY; /* size: 0x0028 */

typedef struct _MI_PROBE_RAISE_TRACKER
{
  /* 0x0000 */ unsigned long UserRangeInKernel;
  /* 0x0004 */ unsigned long FaultFailed;
  /* 0x0008 */ unsigned long WriteFaultFailed;
  /* 0x000c */ unsigned long LargePageFailed;
  /* 0x0010 */ unsigned long UserAccessToKernelPte;
  /* 0x0014 */ unsigned long BadPageLocation;
  /* 0x0018 */ unsigned long InsufficientCharge;
  /* 0x001c */ unsigned long PageTableCharge;
  /* 0x0020 */ unsigned long NoPhysicalMapping;
  /* 0x0024 */ unsigned long NoIoReference;
  /* 0x0028 */ unsigned long ProbeFailed;
  /* 0x002c */ unsigned long PteIsZero;
  /* 0x0030 */ unsigned long StrongCodeWrite;
  /* 0x0034 */ unsigned long ReducedCloneCommitChargeFailed;
  /* 0x0038 */ unsigned long CopyOnWriteAtDispatchNoPages;
  /* 0x003c */ unsigned long NoPageTablesAllowed;
  /* 0x0040 */ unsigned long EnclavePageFailed;
} MI_PROBE_RAISE_TRACKER, *PMI_PROBE_RAISE_TRACKER; /* size: 0x0044 */

typedef struct _MI_FORCED_COMMITS
{
  /* 0x0000 */ unsigned long Regular;
  /* 0x0004 */ unsigned long Wrap;
} MI_FORCED_COMMITS, *PMI_FORCED_COMMITS; /* size: 0x0008 */

typedef struct _MI_RESAVAIL_FAILURES
{
  /* 0x0000 */ unsigned long Wrap;
  /* 0x0004 */ unsigned long NoCharge;
} MI_RESAVAIL_FAILURES, *PMI_RESAVAIL_FAILURES; /* size: 0x0008 */

typedef struct _MI_ERROR_STATE
{
  /* 0x0000 */ struct _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry;
  /* 0x0028 */ unsigned long PageOfInterest;
  /* 0x002c */ struct _MI_PROBE_RAISE_TRACKER ProbeRaises;
  /* 0x0070 */ struct _MI_FORCED_COMMITS ForcedCommits;
  /* 0x0078 */ unsigned long PrePhase0BugCheckParameter;
  /* 0x007c */ unsigned long WsleFailures;
  /* 0x0080 */ unsigned long PageHashErrors;
  /* 0x0084 */ unsigned long CheckZeroCount;
  /* 0x0088 */ volatile long ZeroedPageSingleBitErrorsDetected;
  /* 0x008c */ volatile long BadPagesDetected;
  /* 0x0090 */ unsigned long BadPagesInserted;
  /* 0x0094 */ struct _WORK_QUEUE_ITEM BadPageInsertWorkItem;
  /* 0x00a4 */ long ScrubPasses;
  /* 0x00a8 */ long ScrubBadPagesFound;
  /* 0x00ac */ unsigned long UserViewFailures;
  /* 0x00b0 */ unsigned long UserViewCollisionFailures;
  /* 0x00b4 */ unsigned long UserAllocateFailures;
  /* 0x00b8 */ unsigned long UserAllocateCollisionFailures;
  /* 0x00bc */ struct _MI_RESAVAIL_FAILURES ResavailFailures;
  /* 0x00c4 */ unsigned char PendingBadPages;
  /* 0x00c5 */ unsigned char FatalGraphicsFailures;
  /* 0x00c6 */ unsigned char InitFailure;
  /* 0x00c7 */ unsigned char BadPagesInsertSignalState;
  /* 0x00c8 */ unsigned char StopBadMaps;
  /* 0x00c9 */ char __PADDING__[7];
} MI_ERROR_STATE, *PMI_ERROR_STATE; /* size: 0x00d0 */

typedef union _WHEA_TIMESTAMP
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Seconds : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Minutes : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Hours : 8; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Precise : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 25 */
      /* 0x0000 */ unsigned __int64 Day : 8; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 Month : 8; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Year : 8; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 Century : 8; /* bit position: 56 */
    }; /* bitfield */
    /* 0x0000 */ union _LARGE_INTEGER AsLARGE_INTEGER;
  }; /* size: 0x0008 */
} WHEA_TIMESTAMP, *PWHEA_TIMESTAMP; /* size: 0x0008 */

typedef struct _CHILD_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long List;
} CHILD_LIST, *PCHILD_LIST; /* size: 0x0008 */

typedef struct _CM_KEY_REFERENCE
{
  /* 0x0000 */ unsigned long KeyCell;
  /* 0x0004 */ struct _HHIVE* KeyHive;
} CM_KEY_REFERENCE, *PCM_KEY_REFERENCE; /* size: 0x0008 */

typedef struct _CM_KEY_NODE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x000c */ unsigned char AccessBits;
  struct /* bitfield */
  {
    /* 0x000d */ unsigned char LayerSemantics : 2; /* bit position: 0 */
    /* 0x000d */ unsigned char Spare1 : 5; /* bit position: 2 */
    /* 0x000d */ unsigned char InheritClass : 1; /* bit position: 7 */
  }; /* bitfield */
  /* 0x000e */ unsigned short Spare2;
  /* 0x0010 */ unsigned long Parent;
  /* 0x0014 */ unsigned long SubKeyCounts[2];
  union
  {
    struct
    {
      /* 0x001c */ unsigned long SubKeyLists[2];
      /* 0x0024 */ struct _CHILD_LIST ValueList;
    }; /* size: 0x0010 */
    /* 0x001c */ struct _CM_KEY_REFERENCE ChildHiveReference;
  }; /* size: 0x0010 */
  /* 0x002c */ unsigned long Security;
  /* 0x0030 */ unsigned long Class;
  struct /* bitfield */
  {
    /* 0x0034 */ unsigned long MaxNameLen : 16; /* bit position: 0 */
    /* 0x0034 */ unsigned long UserFlags : 4; /* bit position: 16 */
    /* 0x0034 */ unsigned long VirtControlFlags : 4; /* bit position: 20 */
    /* 0x0034 */ unsigned long Debug : 8; /* bit position: 24 */
  }; /* bitfield */
  /* 0x0038 */ unsigned long MaxClassLen;
  /* 0x003c */ unsigned long MaxValueNameLen;
  /* 0x0040 */ unsigned long MaxValueDataLen;
  /* 0x0044 */ unsigned long WorkVar;
  /* 0x0048 */ unsigned short NameLength;
  /* 0x004a */ unsigned short ClassLength;
  /* 0x004c */ wchar_t Name[1];
  /* 0x004e */ char __PADDING__[2];
} CM_KEY_NODE, *PCM_KEY_NODE; /* size: 0x0050 */

typedef struct _CM_KEY_VALUE
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short NameLength;
  /* 0x0004 */ unsigned long DataLength;
  /* 0x0008 */ unsigned long Data;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned short Flags;
  /* 0x0012 */ unsigned short Spare;
  /* 0x0014 */ wchar_t Name[1];
  /* 0x0016 */ char __PADDING__[2];
} CM_KEY_VALUE, *PCM_KEY_VALUE; /* size: 0x0018 */

typedef struct _SECURITY_DESCRIPTOR_RELATIVE
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ unsigned long Owner;
  /* 0x0008 */ unsigned long Group;
  /* 0x000c */ unsigned long Sacl;
  /* 0x0010 */ unsigned long Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PSECURITY_DESCRIPTOR_RELATIVE; /* size: 0x0014 */

typedef struct _CM_KEY_SECURITY
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long Flink;
  /* 0x0008 */ unsigned long Blink;
  /* 0x000c */ unsigned long ReferenceCount;
  /* 0x0010 */ unsigned long DescriptorLength;
  /* 0x0014 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
} CM_KEY_SECURITY, *PCM_KEY_SECURITY; /* size: 0x0028 */

typedef struct _CM_KEY_INDEX
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List[1];
} CM_KEY_INDEX, *PCM_KEY_INDEX; /* size: 0x0008 */

typedef struct _CM_BIG_DATA
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Count;
  /* 0x0004 */ unsigned long List;
} CM_BIG_DATA, *PCM_BIG_DATA; /* size: 0x0008 */

typedef union _u
{
  union
  {
    /* 0x0000 */ struct _CM_KEY_NODE KeyNode;
    /* 0x0000 */ struct _CM_KEY_VALUE KeyValue;
    /* 0x0000 */ struct _CM_KEY_SECURITY KeySecurity;
    /* 0x0000 */ struct _CM_KEY_INDEX KeyIndex;
    /* 0x0000 */ struct _CM_BIG_DATA ValueData;
    /* 0x0000 */ unsigned long KeyList[1];
    /* 0x0000 */ wchar_t KeyString[1];
  }; /* size: 0x0050 */
} u, *Pu; /* size: 0x0050 */

typedef struct _CELL_DATA
{
  /* 0x0000 */ union _u u;
} CELL_DATA, *PCELL_DATA; /* size: 0x0050 */

typedef struct _RTL_FEATURE_USAGE_REPORT
{
  /* 0x0000 */ unsigned int FeatureId;
  /* 0x0004 */ unsigned short ReportingKind;
  /* 0x0006 */ unsigned short ReportingOptions;
} RTL_FEATURE_USAGE_REPORT, *PRTL_FEATURE_USAGE_REPORT; /* size: 0x0008 */

typedef struct _EPROCESS_VALUES
{
  /* 0x0000 */ unsigned __int64 KernelTime;
  /* 0x0008 */ unsigned __int64 UserTime;
  /* 0x0010 */ unsigned __int64 ReadyTime;
  /* 0x0018 */ unsigned __int64 CycleTime;
  /* 0x0020 */ unsigned __int64 ContextSwitches;
  /* 0x0028 */ __int64 ReadOperationCount;
  /* 0x0030 */ __int64 WriteOperationCount;
  /* 0x0038 */ __int64 OtherOperationCount;
  /* 0x0040 */ __int64 ReadTransferCount;
  /* 0x0048 */ __int64 WriteTransferCount;
  /* 0x0050 */ __int64 OtherTransferCount;
  /* 0x0058 */ unsigned __int64 KernelWaitTime;
  /* 0x0060 */ unsigned __int64 UserWaitTime;
} EPROCESS_VALUES, *PEPROCESS_VALUES; /* size: 0x0068 */

typedef struct _CMSI_RW_LOCK
{
  /* 0x0000 */ void* Reserved;
} CMSI_RW_LOCK, *PCMSI_RW_LOCK; /* size: 0x0004 */

typedef struct _HVP_VIEW_MAP
{
  /* 0x0000 */ void* SectionReference;
  /* 0x0004 */ long Padding_107;
  /* 0x0008 */ __int64 StorageEndFileOffset;
  /* 0x0010 */ __int64 SectionEndFileOffset;
  /* 0x0018 */ struct _CMSI_PROCESS_TUPLE* ProcessTuple;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ struct _RTL_RB_TREE ViewTree;
} HVP_VIEW_MAP, *PHVP_VIEW_MAP; /* size: 0x0028 */

typedef struct _FREE_DISPLAY
{
  /* 0x0000 */ unsigned long RealVectorSize;
  /* 0x0004 */ unsigned long Hint;
  /* 0x0008 */ struct _RTL_BITMAP Display;
} FREE_DISPLAY, *PFREE_DISPLAY; /* size: 0x0010 */

typedef struct _DUAL
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ struct _HMAP_DIRECTORY* Map;
  /* 0x0008 */ struct _HMAP_TABLE* SmallDir;
  /* 0x000c */ unsigned long Guard;
  /* 0x0010 */ struct _FREE_DISPLAY FreeDisplay[24];
  /* 0x0190 */ struct _LIST_ENTRY FreeBins;
  /* 0x0198 */ unsigned long FreeSummary;
} DUAL, *PDUAL; /* size: 0x019c */

typedef struct _HHIVE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ void* GetCellRoutine /* function */;
  /* 0x0008 */ void* ReleaseCellRoutine /* function */;
  /* 0x000c */ void* Allocate /* function */;
  /* 0x0010 */ void* Free /* function */;
  /* 0x0014 */ void* FileWrite /* function */;
  /* 0x0018 */ void* FileRead /* function */;
  /* 0x001c */ void* HiveLoadFailure;
  /* 0x0020 */ struct _HBASE_BLOCK* BaseBlock;
  /* 0x0024 */ struct _CMSI_RW_LOCK FlusherLock;
  /* 0x0028 */ struct _CMSI_RW_LOCK WriterLock;
  /* 0x002c */ struct _RTL_BITMAP DirtyVector;
  /* 0x0034 */ unsigned long DirtyCount;
  /* 0x0038 */ unsigned long DirtyAlloc;
  /* 0x003c */ struct _RTL_BITMAP UnreconciledVector;
  /* 0x0044 */ unsigned long UnreconciledCount;
  /* 0x0048 */ unsigned long BaseBlockAlloc;
  /* 0x004c */ unsigned long Cluster;
  struct /* bitfield */
  {
    /* 0x0050 */ unsigned char Flat : 1; /* bit position: 0 */
    /* 0x0050 */ unsigned char ReadOnly : 1; /* bit position: 1 */
    /* 0x0050 */ unsigned char Reserved : 6; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0051 */ unsigned char DirtyFlag;
  /* 0x0052 */ char Padding_108[2];
  /* 0x0054 */ unsigned long HvBinHeadersUse;
  /* 0x0058 */ unsigned long HvFreeCellsUse;
  /* 0x005c */ unsigned long HvUsedCellsUse;
  /* 0x0060 */ unsigned long CmUsedCellsUse;
  /* 0x0064 */ unsigned long HiveFlags;
  /* 0x0068 */ unsigned long CurrentLog;
  /* 0x006c */ unsigned long CurrentLogSequence;
  /* 0x0070 */ unsigned long CurrentLogMinimumSequence;
  /* 0x0074 */ unsigned long CurrentLogOffset;
  /* 0x0078 */ unsigned long MinimumLogSequence;
  /* 0x007c */ unsigned long LogFileSizeCap;
  /* 0x0080 */ unsigned char LogDataPresent[2];
  /* 0x0082 */ unsigned char PrimaryFileValid;
  /* 0x0083 */ unsigned char BaseBlockDirty;
  /* 0x0084 */ long Padding_109;
  /* 0x0088 */ union _LARGE_INTEGER LastLogSwapTime;
  union
  {
    struct /* bitfield */
    {
      /* 0x0090 */ unsigned short FirstLogFile : 3; /* bit position: 0 */
      /* 0x0090 */ unsigned short SecondLogFile : 3; /* bit position: 3 */
      /* 0x0090 */ unsigned short HeaderRecovered : 1; /* bit position: 6 */
      /* 0x0090 */ unsigned short LegacyRecoveryIndicated : 1; /* bit position: 7 */
      /* 0x0090 */ unsigned short RecoveryInformationReserved : 8; /* bit position: 8 */
    }; /* bitfield */
    /* 0x0090 */ unsigned short RecoveryInformation;
  }; /* size: 0x0002 */
  /* 0x0092 */ unsigned char LogEntriesRecovered[2];
  /* 0x0094 */ unsigned long RefreshCount;
  /* 0x0098 */ unsigned long StorageTypeCount;
  /* 0x009c */ unsigned long Version;
  /* 0x00a0 */ struct _HVP_VIEW_MAP ViewMap;
  /* 0x00c8 */ struct _DUAL Storage[2];
} HHIVE, *PHHIVE; /* size: 0x0400 */

typedef struct _MMCLONE_DESCRIPTOR
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE CloneNode;
    /* 0x0000 */ struct _MMCLONE_DESCRIPTOR* Next;
  }; /* size: 0x000c */
  /* 0x000c */ struct _MMCLONE_BLOCK* StartingCloneBlock;
  /* 0x0010 */ struct _MMCLONE_BLOCK* EndingCloneBlock;
  /* 0x0014 */ unsigned long NumberOfPtes;
  /* 0x0018 */ volatile unsigned long NumberOfReferences;
  /* 0x001c */ struct _MMCLONE_HEADER* CloneHeader;
  /* 0x0020 */ unsigned long NonPagedPoolQuotaCharge;
  /* 0x0024 */ struct _SINGLE_LIST_ENTRY DeleteList;
  /* 0x0028 */ unsigned __int64 NestingLevel;
} MMCLONE_DESCRIPTOR, *PMMCLONE_DESCRIPTOR; /* size: 0x0030 */

typedef struct _PROC_PERF_CONSTRAINT
{
  /* 0x0000 */ struct _PROC_PERF_CHECK_CONTEXT* CheckContext;
  /* 0x0004 */ unsigned long PerfContext;
  /* 0x0008 */ unsigned long PlatformCap;
  /* 0x000c */ unsigned long ThermalCap;
  /* 0x0010 */ unsigned long LimitReasons;
  /* 0x0014 */ long Padding_110;
  /* 0x0018 */ unsigned __int64 PlatformCapStartTime;
  /* 0x0020 */ unsigned long ProcCap;
  /* 0x0024 */ unsigned long ProcFloor;
  /* 0x0028 */ unsigned long TargetPercent;
  /* 0x002c */ unsigned char EngageResponsivenessOverrides;
  /* 0x002d */ unsigned char ResponsivenessChangeCount;
  /* 0x002e */ char Padding_111[2];
  /* 0x0030 */ struct _PERF_CONTROL_STATE_SELECTION Selection;
  /* 0x0058 */ unsigned long DomainSelectionGeneration;
  /* 0x005c */ unsigned long PreviousFrequency;
  /* 0x0060 */ unsigned long PreviousPercent;
  /* 0x0064 */ unsigned long LatestFrequencyPercent;
  /* 0x0068 */ unsigned long LatestPerformancePercent;
  /* 0x006c */ unsigned char Force;
  /* 0x006d */ unsigned char UseQosUpdateLock;
  /* 0x006e */ char Padding_112[2];
  /* 0x0070 */ unsigned long QosUpdateLock;
  /* 0x0074 */ long __PADDING__[1];
} PROC_PERF_CONSTRAINT, *PPROC_PERF_CONSTRAINT; /* size: 0x0078 */

typedef struct _HV_GET_BIN_CONTEXT
{
  /* 0x0000 */ unsigned short OutstandingReference : 1; /* bit position: 0 */
} HV_GET_BIN_CONTEXT, *PHV_GET_BIN_CONTEXT; /* size: 0x0002 */

typedef struct _THERMAL_POLICY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char WaitForUpdate;
  /* 0x0005 */ unsigned char Hibernate;
  /* 0x0006 */ unsigned char Critical;
  /* 0x0007 */ unsigned char ThermalStandby;
  /* 0x0008 */ unsigned long ActivationReasons;
  /* 0x000c */ unsigned long PassiveLimit;
  /* 0x0010 */ unsigned long ActiveLevel;
  /* 0x0014 */ unsigned char OverThrottled;
  /* 0x0015 */ char __PADDING__[3];
} THERMAL_POLICY, *PTHERMAL_POLICY; /* size: 0x0018 */

struct BATTERY_REPORTING_SCALE
{
  /* 0x0000 */ unsigned long Granularity;
  /* 0x0004 */ unsigned long Capacity;
}; /* size: 0x0008 */

typedef struct _SID_AND_ATTRIBUTES_HASH
{
  /* 0x0000 */ unsigned long SidCount;
  /* 0x0004 */ struct _SID_AND_ATTRIBUTES* SidAttr;
  /* 0x0008 */ unsigned long Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH; /* size: 0x0088 */

typedef struct _MI_REBUILD_LARGE_PAGE_TIMER
{
  /* 0x0000 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0010 */ unsigned char SecondsLeft;
  /* 0x0011 */ unsigned char RebuildActive;
  /* 0x0012 */ unsigned char NextPassDelta;
  /* 0x0013 */ unsigned char LargeSubPagesActive;
} MI_REBUILD_LARGE_PAGE_TIMER, *PMI_REBUILD_LARGE_PAGE_TIMER; /* size: 0x0014 */

typedef struct _MI_LARGE_PAGE_LISTS_CHANGING
{
  /* 0x0000 */ struct _MI_LARGE_PAGE_LISTS_CHANGING* Next;
  /* 0x0004 */ struct _KGATE Gate;
} MI_LARGE_PAGE_LISTS_CHANGING, *PMI_LARGE_PAGE_LISTS_CHANGING; /* size: 0x0014 */

struct FEATURE_LOGGED_TRAITS
{
  /* 0x0000 */ unsigned short version;
  /* 0x0002 */ unsigned short baseVersion;
  /* 0x0004 */ unsigned char stage;
  /* 0x0005 */ char __PADDING__[1];
}; /* size: 0x0006 */

typedef struct _PROC_PERF_CHECK_SNAP
{
  /* 0x0000 */ unsigned __int64 Time;
  /* 0x0008 */ unsigned __int64 Active;
  /* 0x0010 */ unsigned __int64 Stall;
  /* 0x0018 */ unsigned __int64 FrequencyScaledActive;
  /* 0x0020 */ unsigned __int64 PerformanceScaledActive;
  /* 0x0028 */ unsigned __int64 PerformanceScaledKernelActive;
  /* 0x0030 */ unsigned __int64 CyclesActive;
  /* 0x0038 */ unsigned __int64 CyclesAffinitized;
  /* 0x0040 */ unsigned __int64 ThreadTypeCycles[2][5];
  /* 0x0090 */ unsigned __int64 TaggedThreadCycles[3];
  /* 0x00a8 */ unsigned long ResponsivenessEvents;
  /* 0x00ac */ long __PADDING__[1];
} PROC_PERF_CHECK_SNAP, *PPROC_PERF_CHECK_SNAP; /* size: 0x00b0 */

typedef struct _PROC_PERF_CHECK
{
  /* 0x0000 */ unsigned __int64 LastActive;
  /* 0x0008 */ unsigned __int64 LastTime;
  /* 0x0010 */ unsigned __int64 LastStall;
  /* 0x0018 */ unsigned long LastResponsivenessEvents;
  /* 0x001c */ long Padding_113;
  /* 0x0020 */ struct _PROC_PERF_CHECK_SNAP LastPerfCheckSnap;
  /* 0x00d0 */ struct _PROC_PERF_CHECK_SNAP CurrentSnap;
  /* 0x0180 */ struct _PROC_PERF_CHECK_SNAP LastDeliveredSnap;
  /* 0x0230 */ unsigned long LastDeliveredPerformance;
  /* 0x0234 */ unsigned long LastDeliveredFrequency;
  /* 0x0238 */ unsigned char TaggedThreadPercent[3];
  /* 0x023b */ unsigned char ImportantPercent;
  /* 0x023c */ unsigned char Class0FloorPerfSelection;
  /* 0x023d */ unsigned char Class1MinimumPerfSelection;
  /* 0x023e */ char Padding_114[2];
  /* 0x0240 */ unsigned long CurrentResponsivenessEvents;
  /* 0x0244 */ long __PADDING__[1];
} PROC_PERF_CHECK, *PPROC_PERF_CHECK; /* size: 0x0248 */

typedef struct _PROC_PERF_LOAD
{
  /* 0x0000 */ unsigned char BusyPercentage;
  /* 0x0001 */ unsigned char FrequencyPercentage;
} PROC_PERF_LOAD, *PPROC_PERF_LOAD; /* size: 0x0002 */

union wil_details_RecordedState
{
  union
  {
    /* 0x0000 */ unsigned int exchange;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned int recordedDeviceUsage : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned int recordedDevicePotential : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned int recordedDeviceOpportunity : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned int recordedDevicePotentialOpportunity : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned int recordedVariantDeviceUsage : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned int recordedVariant : 6; /* bit position: 5 */
      /* 0x0000 */ unsigned int unused : 21; /* bit position: 11 */
    }; /* bitfield */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

typedef struct _PROC_PERF_HISTORY
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Slot;
  /* 0x0008 */ unsigned long UtilityTotal;
  /* 0x000c */ unsigned long AffinitizedUtilityTotal;
  /* 0x0010 */ unsigned long FrequencyTotal;
  /* 0x0014 */ unsigned long ImportantPercentTotal;
  /* 0x0018 */ unsigned long TaggedPercentTotal[3];
  /* 0x0024 */ struct _PROC_PERF_HISTORY_ENTRY HistoryList[1];
  /* 0x002e */ char __PADDING__[2];
} PROC_PERF_HISTORY, *PPROC_PERF_HISTORY; /* size: 0x0030 */

typedef struct _WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME; /* size: 0x0008 */

typedef struct _PPM_CONCURRENCY_ACCOUNTING
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned long Processors;
  /* 0x0008 */ unsigned long ActiveProcessors;
  /* 0x000c */ long Padding_115;
  /* 0x0010 */ unsigned __int64 LastUpdateTime;
  /* 0x0018 */ unsigned __int64 TotalTime;
  /* 0x0020 */ unsigned __int64 AccumulatedTime[1];
} PPM_CONCURRENCY_ACCOUNTING, *PPPM_CONCURRENCY_ACCOUNTING; /* size: 0x0028 */

typedef struct _ARBITER_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long AlternativeCount;
  /* 0x000c */ struct _IO_RESOURCE_DESCRIPTOR* Alternatives;
  /* 0x0010 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0014 */ enum _ARBITER_REQUEST_SOURCE RequestSource;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ long WorkSpace;
  /* 0x0020 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0024 */ unsigned long SlotNumber;
  /* 0x0028 */ unsigned long BusNumber;
  /* 0x002c */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR* Assignment;
  /* 0x0030 */ struct _IO_RESOURCE_DESCRIPTOR* SelectedAlternative;
  /* 0x0034 */ enum _ARBITER_RESULT Result;
} ARBITER_LIST_ENTRY, *PARBITER_LIST_ENTRY; /* size: 0x0038 */

typedef struct _POP_FX_DRIVER_CALLBACKS
{
  /* 0x0000 */ void* ComponentActive /* function */;
  /* 0x0004 */ void* ComponentIdle /* function */;
  /* 0x0008 */ void* ComponentIdleState /* function */;
  /* 0x000c */ void* DevicePowerRequired /* function */;
  /* 0x0010 */ void* DevicePowerNotRequired /* function */;
  /* 0x0014 */ void* PowerControl /* function */;
  /* 0x0018 */ void* ComponentCriticalTransition /* function */;
  /* 0x001c */ void* DripsWatchdogCallback /* function */;
  /* 0x0020 */ void* DirectedPowerUpCallback /* function */;
  /* 0x0024 */ void* DirectedPowerDownCallback /* function */;
} POP_FX_DRIVER_CALLBACKS, *PPOP_FX_DRIVER_CALLBACKS; /* size: 0x0028 */

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK
{
  /* 0x0000 */ unsigned char Removed;
  /* 0x0001 */ unsigned char Reserved[3];
  /* 0x0004 */ long IoCount;
  /* 0x0008 */ struct _KEVENT RemoveEvent;
} IO_REMOVE_LOCK_COMMON_BLOCK, *PIO_REMOVE_LOCK_COMMON_BLOCK; /* size: 0x0018 */

typedef struct _IO_REMOVE_LOCK
{
  /* 0x0000 */ struct _IO_REMOVE_LOCK_COMMON_BLOCK Common;
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK; /* size: 0x0018 */

typedef struct _POP_FX_WORK_ORDER_WATCHDOG_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _KTIMER Timer;
  /* 0x0030 */ struct _KDPC Dpc;
  /* 0x0050 */ struct _POP_FX_WORK_ORDER* WorkOrder;
  /* 0x0054 */ struct _PEP_WORK_INFORMATION* CurrentWorkInfo;
  /* 0x0058 */ unsigned __int64 WatchdogStart;
  /* 0x0060 */ struct _KTHREAD* WorkerThread;
  /* 0x0064 */ long __PADDING__[1];
} POP_FX_WORK_ORDER_WATCHDOG_INFO, *PPOP_FX_WORK_ORDER_WATCHDOG_INFO; /* size: 0x0068 */

typedef struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE
{
  /* 0x0000 */ void* CompletionContext;
  /* 0x0004 */ long CompletionStatus;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long DIrpPending : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long DIrpCompleted : 1; /* bit position: 1 */
  }; /* bitfield */
} POP_FX_DEVICE_DIRECTED_TRANSITION_STATE, *PPOP_FX_DEVICE_DIRECTED_TRANSITION_STATE; /* size: 0x000c */

typedef struct _POP_FX_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _POP_IRP_DATA* IrpData;
  /* 0x0010 */ volatile union _POP_FX_DEVICE_STATUS Status;
  /* 0x0014 */ volatile long PowerReqCall;
  /* 0x0018 */ volatile long PowerNotReqCall;
  /* 0x001c */ struct _DEVICE_NODE* DevNode;
  /* 0x0020 */ struct PEPHANDLE__* DpmContext;
  /* 0x0024 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0028 */ struct PEPHANDLE__* PluginHandle;
  /* 0x002c */ struct _POP_FX_PLUGIN* AcpiPlugin;
  /* 0x0030 */ struct PEPHANDLE__* AcpiPluginHandle;
  /* 0x0034 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0038 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x003c */ struct _POP_FX_DRIVER_CALLBACKS Callbacks;
  /* 0x0064 */ void* DriverContext;
  /* 0x0068 */ struct _LIST_ENTRY AcpiLink;
  /* 0x0070 */ struct _UNICODE_STRING DeviceId;
  /* 0x0078 */ struct _IO_REMOVE_LOCK RemoveLock;
  /* 0x0090 */ struct _IO_REMOVE_LOCK AcpiRemoveLock;
  /* 0x00a8 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x00c4 */ unsigned long IdleLock;
  /* 0x00c8 */ struct _KTIMER IdleTimer;
  /* 0x00f0 */ struct _KDPC IdleDpc;
  /* 0x0110 */ unsigned __int64 IdleTimeout;
  /* 0x0118 */ unsigned __int64 IdleStamp;
  /* 0x0120 */ struct _DEVICE_OBJECT* NextIrpDeviceObject[2];
  /* 0x0128 */ union _POWER_STATE NextIrpPowerState[2];
  /* 0x0130 */ void* NextIrpCallerCompletion[2] /* function */;
  /* 0x0138 */ void* NextIrpCallerContext[2];
  /* 0x0140 */ struct _KEVENT IrpCompleteEvent;
  /* 0x0150 */ void* PowerOnDumpDeviceCallback /* function */;
  /* 0x0154 */ long Padding_116;
  /* 0x0158 */ struct _POP_FX_ACCOUNTING Accounting;
  /* 0x0230 */ volatile unsigned long Flags;
  /* 0x0234 */ unsigned long ComponentCount;
  /* 0x0238 */ struct _POP_FX_COMPONENT** Components;
  /* 0x023c */ unsigned long LogEntries;
  /* 0x0240 */ struct _POP_FX_LOG_ENTRY* Log;
  /* 0x0244 */ volatile long LogIndex;
  /* 0x0248 */ struct _DRIVER_OBJECT* DripsWatchdogDriverObject;
  /* 0x024c */ struct _POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext;
  /* 0x0260 */ unsigned long DirectedTimeout;
  /* 0x0264 */ struct _POP_FX_WORK_ORDER DirectedWorkOrder;
  /* 0x0280 */ struct _POP_FX_WORK_ORDER_WATCHDOG_INFO DirectedWorkWatchdogInfo;
  /* 0x02e8 */ unsigned long DirectedLock;
  /* 0x02ec */ volatile long DirectedTransitionCallCount;
  /* 0x02f0 */ struct _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE DirectedTransitionState;
  /* 0x02fc */ struct _POP_DEVICE_POWER_PROFILE* PowerProfile;
  /* 0x0300 */ struct _UNICODE_STRING FriendlyName;
} POP_FX_DEVICE, *PPOP_FX_DEVICE; /* size: 0x0308 */

typedef struct _ARBITER_CONFLICT_INFO
{
  /* 0x0000 */ struct _DEVICE_OBJECT* OwningObject;
  /* 0x0004 */ long Padding_117;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 End;
} ARBITER_CONFLICT_INFO, *PARBITER_CONFLICT_INFO; /* size: 0x0018 */

typedef struct _RTL_FEATURE_CONFIGURATION
{
  /* 0x0000 */ unsigned int FeatureId;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int Priority : 4; /* bit position: 0 */
    /* 0x0004 */ unsigned int EnabledState : 2; /* bit position: 4 */
    /* 0x0004 */ unsigned int IsWexpConfiguration : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned int HasSubscriptions : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned int Variant : 6; /* bit position: 8 */
    /* 0x0004 */ unsigned int VariantPayloadKind : 2; /* bit position: 14 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int VariantPayload;
} RTL_FEATURE_CONFIGURATION, *PRTL_FEATURE_CONFIGURATION; /* size: 0x000c */

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    /* 0x0000 */ long Status;
    /* 0x0000 */ void* Pointer;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; /* size: 0x0008 */

typedef struct _IRP
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _MDL* MdlAddress;
  /* 0x0008 */ unsigned long Flags;
  union
  {
    union
    {
      /* 0x000c */ struct _IRP* MasterIrp;
      /* 0x000c */ long IrpCount;
      /* 0x000c */ void* SystemBuffer;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ AssociatedIrp;
  /* 0x0010 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x0018 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0020 */ char RequestorMode;
  /* 0x0021 */ unsigned char PendingReturned;
  /* 0x0022 */ char StackCount;
  /* 0x0023 */ char CurrentLocation;
  /* 0x0024 */ unsigned char Cancel;
  /* 0x0025 */ unsigned char CancelIrql;
  /* 0x0026 */ char ApcEnvironment;
  /* 0x0027 */ unsigned char AllocationFlags;
  /* 0x0028 */ struct _IO_STATUS_BLOCK* UserIosb;
  /* 0x002c */ struct _KEVENT* UserEvent;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0030 */ void* UserApcRoutine /* function */;
          /* 0x0030 */ void* IssuingProcess;
        }; /* size: 0x0004 */
        /* 0x0034 */ void* UserApcContext;
      } /* size: 0x0008 */ AsynchronousParameters;
      /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Overlay;
  /* 0x0038 */ void* CancelRoutine /* function */;
  /* 0x003c */ void* UserBuffer;
  union
  {
    union
    {
      struct
      {
        union
        {
          /* 0x0040 */ struct _KDEVICE_QUEUE_ENTRY DeviceQueueEntry;
          /* 0x0040 */ void* DriverContext[4];
        }; /* size: 0x0010 */
        /* 0x0050 */ struct _ETHREAD* Thread;
        /* 0x0054 */ char* AuxiliaryBuffer;
        /* 0x0058 */ struct _LIST_ENTRY ListEntry;
        union
        {
          /* 0x0060 */ struct _IO_STACK_LOCATION* CurrentStackLocation;
          /* 0x0060 */ unsigned long PacketType;
        }; /* size: 0x0004 */
        /* 0x0064 */ struct _FILE_OBJECT* OriginalFileObject;
        /* 0x0068 */ void* IrpExtension;
      } /* size: 0x002c */ Overlay;
      /* 0x0040 */ struct _KAPC Apc;
      /* 0x0040 */ void* CompletionKey;
    }; /* size: 0x0030 */
  } /* size: 0x0030 */ Tail;
} IRP, *PIRP; /* size: 0x0070 */

typedef struct _MI_ACCESS_VIOLATION_RANGE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  /* 0x000c */ void* Va;
  /* 0x0010 */ void* EndVaInclusive;
} MI_ACCESS_VIOLATION_RANGE, *PMI_ACCESS_VIOLATION_RANGE; /* size: 0x0014 */

typedef struct _ETW_COUNTERS
{
  /* 0x0000 */ long GuidCount;
  /* 0x0004 */ long PoolUsage[2];
  /* 0x000c */ long SessionCount;
} ETW_COUNTERS, *PETW_COUNTERS; /* size: 0x0010 */

typedef struct _MMSUPPORT_SHARED
{
  /* 0x0000 */ volatile long WorkingSetLock;
  /* 0x0004 */ long GoodCitizenWaiting;
  /* 0x0008 */ unsigned long ReleasedCommitDebt;
  /* 0x000c */ unsigned long ResetPagesRepurposedCount;
  /* 0x0010 */ void* WsSwapSupport;
  /* 0x0014 */ void* CommitReleaseContext;
  /* 0x0018 */ void* AccessLog;
  /* 0x001c */ volatile unsigned long ChargedWslePages;
  /* 0x0020 */ unsigned long ActualWslePages;
  /* 0x0024 */ long Padding_118[7];
  /* 0x0040 */ unsigned long WorkingSetCoreLock;
  /* 0x0044 */ void* ShadowMapping;
  /* 0x0048 */ long __PADDING__[14];
} MMSUPPORT_SHARED, *PMMSUPPORT_SHARED; /* size: 0x0080 */

typedef struct _MMSUPPORT_FULL
{
  /* 0x0000 */ struct _MMSUPPORT_INSTANCE Instance;
  /* 0x0064 */ long Padding_119[7];
  /* 0x0080 */ struct _MMSUPPORT_SHARED Shared;
} MMSUPPORT_FULL, *PMMSUPPORT_FULL; /* size: 0x0100 */

typedef struct _ALPC_PROCESS_CONTEXT
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _LIST_ENTRY ViewListHead;
  /* 0x000c */ volatile unsigned long PagedPoolQuotaCache;
} ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT; /* size: 0x0010 */

typedef struct _PS_PROTECTION
{
  union
  {
    /* 0x0000 */ unsigned char Level;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char Type : 3; /* bit position: 0 */
      /* 0x0000 */ unsigned char Audit : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned char Signer : 4; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0001 */
} PS_PROTECTION, *PPS_PROTECTION; /* size: 0x0001 */

typedef union _PS_INTERLOCKED_TIMER_DELAY_VALUES
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 DelayMs : 30; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 CoalescingWindowMs : 30; /* bit position: 30 */
      /* 0x0000 */ unsigned __int64 Reserved : 1; /* bit position: 60 */
      /* 0x0000 */ unsigned __int64 NewTimerWheel : 1; /* bit position: 61 */
      /* 0x0000 */ unsigned __int64 Retry : 1; /* bit position: 62 */
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 63 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 All;
  }; /* size: 0x0008 */
} PS_INTERLOCKED_TIMER_DELAY_VALUES, *PPS_INTERLOCKED_TIMER_DELAY_VALUES; /* size: 0x0008 */

typedef struct _JOBOBJECT_WAKE_FILTER
{
  /* 0x0000 */ unsigned long HighEdgeFilter;
  /* 0x0004 */ unsigned long LowEdgeFilter;
} JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER; /* size: 0x0008 */

typedef struct _PS_PROCESS_WAKE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NotificationChannel;
  /* 0x0008 */ unsigned long WakeCounters[7];
  /* 0x0024 */ struct _JOBOBJECT_WAKE_FILTER WakeFilter;
  /* 0x002c */ unsigned long NoWakeCounter;
} PS_PROCESS_WAKE_INFORMATION, *PPS_PROCESS_WAKE_INFORMATION; /* size: 0x0030 */

typedef struct _EPROCESS
{
  /* 0x0000 */ struct _KPROCESS Pcb;
  /* 0x00e0 */ struct _EX_PUSH_LOCK ProcessLock;
  /* 0x00e4 */ void* UniqueProcessId;
  /* 0x00e8 */ struct _LIST_ENTRY ActiveProcessLinks;
  /* 0x00f0 */ struct _EX_RUNDOWN_REF RundownProtect;
  /* 0x00f4 */ void* VdmObjects;
  union
  {
    /* 0x00f8 */ unsigned long Flags2;
    struct /* bitfield */
    {
      /* 0x00f8 */ unsigned long JobNotReallyActive : 1; /* bit position: 0 */
      /* 0x00f8 */ unsigned long AccountingFolded : 1; /* bit position: 1 */
      /* 0x00f8 */ unsigned long NewProcessReported : 1; /* bit position: 2 */
      /* 0x00f8 */ unsigned long ExitProcessReported : 1; /* bit position: 3 */
      /* 0x00f8 */ unsigned long ReportCommitChanges : 1; /* bit position: 4 */
      /* 0x00f8 */ unsigned long LastReportMemory : 1; /* bit position: 5 */
      /* 0x00f8 */ unsigned long ForceWakeCharge : 1; /* bit position: 6 */
      /* 0x00f8 */ unsigned long CrossSessionCreate : 1; /* bit position: 7 */
      /* 0x00f8 */ unsigned long NeedsHandleRundown : 1; /* bit position: 8 */
      /* 0x00f8 */ unsigned long RefTraceEnabled : 1; /* bit position: 9 */
      /* 0x00f8 */ unsigned long PicoCreated : 1; /* bit position: 10 */
      /* 0x00f8 */ unsigned long EmptyJobEvaluated : 1; /* bit position: 11 */
      /* 0x00f8 */ unsigned long DefaultPagePriority : 3; /* bit position: 12 */
      /* 0x00f8 */ unsigned long PrimaryTokenFrozen : 1; /* bit position: 15 */
      /* 0x00f8 */ unsigned long ProcessVerifierTarget : 1; /* bit position: 16 */
      /* 0x00f8 */ unsigned long RestrictSetThreadContext : 1; /* bit position: 17 */
      /* 0x00f8 */ unsigned long AffinityPermanent : 1; /* bit position: 18 */
      /* 0x00f8 */ unsigned long AffinityUpdateEnable : 1; /* bit position: 19 */
      /* 0x00f8 */ unsigned long PropagateNode : 1; /* bit position: 20 */
      /* 0x00f8 */ unsigned long ExplicitAffinity : 1; /* bit position: 21 */
      /* 0x00f8 */ unsigned long ProcessExecutionState : 2; /* bit position: 22 */
      /* 0x00f8 */ unsigned long EnableReadVmLogging : 1; /* bit position: 24 */
      /* 0x00f8 */ unsigned long EnableWriteVmLogging : 1; /* bit position: 25 */
      /* 0x00f8 */ unsigned long FatalAccessTerminationRequested : 1; /* bit position: 26 */
      /* 0x00f8 */ unsigned long DisableSystemAllowedCpuSet : 1; /* bit position: 27 */
      /* 0x00f8 */ unsigned long ProcessStateChangeRequest : 2; /* bit position: 28 */
      /* 0x00f8 */ unsigned long ProcessStateChangeInProgress : 1; /* bit position: 30 */
      /* 0x00f8 */ unsigned long InPrivate : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x00fc */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x00fc */ unsigned long CreateReported : 1; /* bit position: 0 */
      /* 0x00fc */ unsigned long NoDebugInherit : 1; /* bit position: 1 */
      /* 0x00fc */ unsigned long ProcessExiting : 1; /* bit position: 2 */
      /* 0x00fc */ unsigned long ProcessDelete : 1; /* bit position: 3 */
      /* 0x00fc */ unsigned long ManageExecutableMemoryWrites : 1; /* bit position: 4 */
      /* 0x00fc */ unsigned long VmDeleted : 1; /* bit position: 5 */
      /* 0x00fc */ unsigned long OutswapEnabled : 1; /* bit position: 6 */
      /* 0x00fc */ unsigned long Outswapped : 1; /* bit position: 7 */
      /* 0x00fc */ unsigned long FailFastOnCommitFail : 1; /* bit position: 8 */
      /* 0x00fc */ unsigned long Wow64VaSpace4Gb : 1; /* bit position: 9 */
      /* 0x00fc */ unsigned long AddressSpaceInitialized : 2; /* bit position: 10 */
      /* 0x00fc */ unsigned long SetTimerResolution : 1; /* bit position: 12 */
      /* 0x00fc */ unsigned long BreakOnTermination : 1; /* bit position: 13 */
      /* 0x00fc */ unsigned long DeprioritizeViews : 1; /* bit position: 14 */
      /* 0x00fc */ unsigned long WriteWatch : 1; /* bit position: 15 */
      /* 0x00fc */ unsigned long ProcessInSession : 1; /* bit position: 16 */
      /* 0x00fc */ unsigned long OverrideAddressSpace : 1; /* bit position: 17 */
      /* 0x00fc */ unsigned long HasAddressSpace : 1; /* bit position: 18 */
      /* 0x00fc */ unsigned long LaunchPrefetched : 1; /* bit position: 19 */
      /* 0x00fc */ unsigned long Background : 1; /* bit position: 20 */
      /* 0x00fc */ unsigned long VmTopDown : 1; /* bit position: 21 */
      /* 0x00fc */ unsigned long ImageNotifyDone : 1; /* bit position: 22 */
      /* 0x00fc */ unsigned long PdeUpdateNeeded : 1; /* bit position: 23 */
      /* 0x00fc */ unsigned long VdmAllowed : 1; /* bit position: 24 */
      /* 0x00fc */ unsigned long ProcessRundown : 1; /* bit position: 25 */
      /* 0x00fc */ unsigned long ProcessInserted : 1; /* bit position: 26 */
      /* 0x00fc */ unsigned long DefaultIoPriority : 3; /* bit position: 27 */
      /* 0x00fc */ unsigned long ProcessSelfDelete : 1; /* bit position: 30 */
      /* 0x00fc */ unsigned long SetTimerResolutionLink : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0100 */ union _LARGE_INTEGER CreateTime;
  /* 0x0108 */ unsigned long ProcessQuotaUsage[2];
  /* 0x0110 */ unsigned long ProcessQuotaPeak[2];
  /* 0x0118 */ unsigned long PeakVirtualSize;
  /* 0x011c */ unsigned long VirtualSize;
  /* 0x0120 */ struct _LIST_ENTRY SessionProcessLinks;
  union
  {
    /* 0x0128 */ void* ExceptionPortData;
    /* 0x0128 */ unsigned long ExceptionPortValue;
    /* 0x0128 */ unsigned long ExceptionPortState : 3; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x012c */ struct _EX_FAST_REF Token;
  /* 0x0130 */ unsigned long MmReserved;
  /* 0x0134 */ struct _EX_PUSH_LOCK AddressCreationLock;
  /* 0x0138 */ struct _EX_PUSH_LOCK PageTableCommitmentLock;
  /* 0x013c */ struct _ETHREAD* RotateInProgress;
  /* 0x0140 */ struct _ETHREAD* ForkInProgress;
  /* 0x0144 */ struct _EJOB* volatile CommitChargeJob;
  /* 0x0148 */ struct _RTL_AVL_TREE CloneRoot;
  /* 0x014c */ volatile unsigned long NumberOfPrivatePages;
  /* 0x0150 */ volatile unsigned long NumberOfLockedPages;
  /* 0x0154 */ void* Win32Process;
  /* 0x0158 */ struct _EJOB* volatile Job;
  /* 0x015c */ void* SectionObject;
  /* 0x0160 */ void* SectionBaseAddress;
  /* 0x0164 */ unsigned long Cookie;
  /* 0x0168 */ struct _PAGEFAULT_HISTORY* WorkingSetWatch;
  /* 0x016c */ void* Win32WindowStation;
  /* 0x0170 */ void* InheritedFromUniqueProcessId;
  /* 0x0174 */ void* LdtInformation;
  /* 0x0178 */ volatile unsigned long OwnerProcessId;
  /* 0x017c */ struct _PEB* Peb;
  /* 0x0180 */ struct _MM_SESSION_SPACE* Session;
  /* 0x0184 */ void* Spare1;
  /* 0x0188 */ struct _EPROCESS_QUOTA_BLOCK* QuotaBlock;
  /* 0x018c */ struct _HANDLE_TABLE* ObjectTable;
  /* 0x0190 */ void* DebugPort;
  /* 0x0194 */ void* PaeTop;
  /* 0x0198 */ void* DeviceMap;
  /* 0x019c */ void* EtwDataSource;
  /* 0x01a0 */ unsigned __int64 PageDirectoryPte;
  /* 0x01a8 */ struct _FILE_OBJECT* ImageFilePointer;
  /* 0x01ac */ unsigned char ImageFileName[15];
  /* 0x01bb */ unsigned char PriorityClass;
  /* 0x01bc */ void* SecurityPort;
  /* 0x01c0 */ struct _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
  /* 0x01c4 */ struct _LIST_ENTRY JobLinks;
  /* 0x01cc */ void* HighestUserAddress;
  /* 0x01d0 */ struct _LIST_ENTRY ThreadListHead;
  /* 0x01d8 */ volatile unsigned long ActiveThreads;
  /* 0x01dc */ unsigned long ImagePathHash;
  /* 0x01e0 */ unsigned long DefaultHardErrorProcessing;
  /* 0x01e4 */ long LastThreadExitStatus;
  /* 0x01e8 */ struct _EX_FAST_REF PrefetchTrace;
  /* 0x01ec */ void* LockedPagesList;
  /* 0x01f0 */ union _LARGE_INTEGER ReadOperationCount;
  /* 0x01f8 */ union _LARGE_INTEGER WriteOperationCount;
  /* 0x0200 */ union _LARGE_INTEGER OtherOperationCount;
  /* 0x0208 */ union _LARGE_INTEGER ReadTransferCount;
  /* 0x0210 */ union _LARGE_INTEGER WriteTransferCount;
  /* 0x0218 */ union _LARGE_INTEGER OtherTransferCount;
  /* 0x0220 */ unsigned long CommitChargeLimit;
  /* 0x0224 */ volatile unsigned long CommitCharge;
  /* 0x0228 */ volatile unsigned long CommitChargePeak;
  /* 0x022c */ long Padding_120[5];
  /* 0x0240 */ struct _MMSUPPORT_FULL Vm;
  /* 0x0340 */ struct _LIST_ENTRY MmProcessLinks;
  /* 0x0348 */ unsigned long ModifiedPageCount;
  /* 0x034c */ long ExitStatus;
  /* 0x0350 */ struct _RTL_AVL_TREE VadRoot;
  /* 0x0354 */ void* VadHint;
  /* 0x0358 */ unsigned long VadCount;
  /* 0x035c */ volatile unsigned long VadPhysicalPages;
  /* 0x0360 */ unsigned long VadPhysicalPagesLimit;
  /* 0x0364 */ struct _ALPC_PROCESS_CONTEXT AlpcContext;
  /* 0x0374 */ struct _LIST_ENTRY TimerResolutionLink;
  /* 0x037c */ struct _PO_DIAG_STACK_RECORD* TimerResolutionStackRecord;
  /* 0x0380 */ unsigned long RequestedTimerResolution;
  /* 0x0384 */ unsigned long SmallestTimerResolution;
  /* 0x0388 */ union _LARGE_INTEGER ExitTime;
  /* 0x0390 */ unsigned long ActiveThreadsHighWatermark;
  /* 0x0394 */ unsigned long LargePrivateVadCount;
  /* 0x0398 */ struct _EX_PUSH_LOCK ThreadListLock;
  /* 0x039c */ void* WnfContext;
  /* 0x03a0 */ struct _EJOB* ServerSilo;
  /* 0x03a4 */ unsigned char SignatureLevel;
  /* 0x03a5 */ unsigned char SectionSignatureLevel;
  /* 0x03a6 */ struct _PS_PROTECTION Protection;
  struct /* bitfield */
  {
    /* 0x03a7 */ unsigned char HangCount : 3; /* bit position: 0 */
    /* 0x03a7 */ unsigned char GhostCount : 3; /* bit position: 3 */
    /* 0x03a7 */ unsigned char PrefilterException : 1; /* bit position: 6 */
  }; /* bitfield */
  union
  {
    /* 0x03a8 */ unsigned long Flags3;
    struct /* bitfield */
    {
      /* 0x03a8 */ unsigned long Minimal : 1; /* bit position: 0 */
      /* 0x03a8 */ unsigned long ReplacingPageRoot : 1; /* bit position: 1 */
      /* 0x03a8 */ unsigned long Crashed : 1; /* bit position: 2 */
      /* 0x03a8 */ unsigned long JobVadsAreTracked : 1; /* bit position: 3 */
      /* 0x03a8 */ unsigned long VadTrackingDisabled : 1; /* bit position: 4 */
      /* 0x03a8 */ unsigned long AuxiliaryProcess : 1; /* bit position: 5 */
      /* 0x03a8 */ unsigned long SubsystemProcess : 1; /* bit position: 6 */
      /* 0x03a8 */ unsigned long IndirectCpuSets : 1; /* bit position: 7 */
      /* 0x03a8 */ unsigned long RelinquishedCommit : 1; /* bit position: 8 */
      /* 0x03a8 */ unsigned long HighGraphicsPriority : 1; /* bit position: 9 */
      /* 0x03a8 */ unsigned long CommitFailLogged : 1; /* bit position: 10 */
      /* 0x03a8 */ unsigned long ReserveFailLogged : 1; /* bit position: 11 */
      /* 0x03a8 */ unsigned long SystemProcess : 1; /* bit position: 12 */
      /* 0x03a8 */ unsigned long HideImageBaseAddresses : 1; /* bit position: 13 */
      /* 0x03a8 */ unsigned long AddressPolicyFrozen : 1; /* bit position: 14 */
      /* 0x03a8 */ unsigned long ProcessFirstResume : 1; /* bit position: 15 */
      /* 0x03a8 */ unsigned long ForegroundExternal : 1; /* bit position: 16 */
      /* 0x03a8 */ unsigned long ForegroundSystem : 1; /* bit position: 17 */
      /* 0x03a8 */ unsigned long HighMemoryPriority : 1; /* bit position: 18 */
      /* 0x03a8 */ unsigned long EnableProcessSuspendResumeLogging : 1; /* bit position: 19 */
      /* 0x03a8 */ unsigned long EnableThreadSuspendResumeLogging : 1; /* bit position: 20 */
      /* 0x03a8 */ unsigned long SecurityDomainChanged : 1; /* bit position: 21 */
      /* 0x03a8 */ unsigned long SecurityFreezeComplete : 1; /* bit position: 22 */
      /* 0x03a8 */ unsigned long VmProcessorHost : 1; /* bit position: 23 */
      /* 0x03a8 */ unsigned long VmProcessorHostTransition : 1; /* bit position: 24 */
      /* 0x03a8 */ unsigned long AltSyscall : 1; /* bit position: 25 */
      /* 0x03a8 */ unsigned long TimerResolutionIgnore : 1; /* bit position: 26 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x03ac */ long DeviceAsid;
  /* 0x03b0 */ void* SvmData;
  /* 0x03b4 */ struct _EX_PUSH_LOCK SvmProcessLock;
  /* 0x03b8 */ unsigned long SvmLock;
  /* 0x03bc */ struct _LIST_ENTRY SvmProcessDeviceListHead;
  /* 0x03c4 */ long Padding_121;
  /* 0x03c8 */ unsigned __int64 LastFreezeInterruptTime;
  /* 0x03d0 */ struct _PROCESS_DISK_COUNTERS* DiskCounters;
  /* 0x03d4 */ void* PicoContext;
  /* 0x03d8 */ unsigned long HighPriorityFaultsAllowed;
  /* 0x03dc */ void* InstrumentationCallback;
  /* 0x03e0 */ struct _PO_PROCESS_ENERGY_CONTEXT* EnergyContext;
  /* 0x03e4 */ void* VmContext;
  /* 0x03e8 */ unsigned __int64 SequenceNumber;
  /* 0x03f0 */ unsigned __int64 CreateInterruptTime;
  /* 0x03f8 */ unsigned __int64 CreateUnbiasedInterruptTime;
  /* 0x0400 */ unsigned __int64 TotalUnbiasedFrozenTime;
  /* 0x0408 */ unsigned __int64 LastAppStateUpdateTime;
  struct /* bitfield */
  {
    /* 0x0410 */ unsigned __int64 LastAppStateUptime : 61; /* bit position: 0 */
    /* 0x0410 */ unsigned __int64 LastAppState : 3; /* bit position: 61 */
  }; /* bitfield */
  /* 0x0418 */ volatile unsigned long SharedCommitCharge;
  /* 0x041c */ struct _EX_PUSH_LOCK SharedCommitLock;
  /* 0x0420 */ struct _LIST_ENTRY SharedCommitLinks;
  union
  {
    struct
    {
      /* 0x0428 */ unsigned long AllowedCpuSets;
      /* 0x042c */ unsigned long DefaultCpuSets;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0428 */ unsigned long* AllowedCpuSetsIndirect;
      /* 0x042c */ unsigned long* DefaultCpuSetsIndirect;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0430 */ void* DiskIoAttribution;
  /* 0x0434 */ void* DxgProcess;
  /* 0x0438 */ unsigned long Win32KFilterSet;
  /* 0x043c */ long Padding_122;
  /* 0x0440 */ volatile union _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay;
  /* 0x0448 */ volatile unsigned long KTimerSets;
  /* 0x044c */ volatile unsigned long KTimer2Sets;
  /* 0x0450 */ volatile unsigned long ThreadTimerSets;
  /* 0x0454 */ unsigned long VirtualTimerListLock;
  /* 0x0458 */ struct _LIST_ENTRY VirtualTimerListHead;
  union
  {
    /* 0x0460 */ struct _WNF_STATE_NAME WakeChannel;
    /* 0x0460 */ struct _PS_PROCESS_WAKE_INFORMATION WakeInfo;
  }; /* size: 0x0030 */
  union
  {
    /* 0x0490 */ unsigned long MitigationFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0490 */ unsigned long ControlFlowGuardEnabled : 1; /* bit position: 0 */
        /* 0x0490 */ unsigned long ControlFlowGuardExportSuppressionEnabled : 1; /* bit position: 1 */
        /* 0x0490 */ unsigned long ControlFlowGuardStrict : 1; /* bit position: 2 */
        /* 0x0490 */ unsigned long DisallowStrippedImages : 1; /* bit position: 3 */
        /* 0x0490 */ unsigned long ForceRelocateImages : 1; /* bit position: 4 */
        /* 0x0490 */ unsigned long HighEntropyASLREnabled : 1; /* bit position: 5 */
        /* 0x0490 */ unsigned long StackRandomizationDisabled : 1; /* bit position: 6 */
        /* 0x0490 */ unsigned long ExtensionPointDisable : 1; /* bit position: 7 */
        /* 0x0490 */ unsigned long DisableDynamicCode : 1; /* bit position: 8 */
        /* 0x0490 */ unsigned long DisableDynamicCodeAllowOptOut : 1; /* bit position: 9 */
        /* 0x0490 */ unsigned long DisableDynamicCodeAllowRemoteDowngrade : 1; /* bit position: 10 */
        /* 0x0490 */ unsigned long AuditDisableDynamicCode : 1; /* bit position: 11 */
        /* 0x0490 */ unsigned long DisallowWin32kSystemCalls : 1; /* bit position: 12 */
        /* 0x0490 */ unsigned long AuditDisallowWin32kSystemCalls : 1; /* bit position: 13 */
        /* 0x0490 */ unsigned long EnableFilteredWin32kAPIs : 1; /* bit position: 14 */
        /* 0x0490 */ unsigned long AuditFilteredWin32kAPIs : 1; /* bit position: 15 */
        /* 0x0490 */ unsigned long DisableNonSystemFonts : 1; /* bit position: 16 */
        /* 0x0490 */ unsigned long AuditNonSystemFontLoading : 1; /* bit position: 17 */
        /* 0x0490 */ unsigned long PreferSystem32Images : 1; /* bit position: 18 */
        /* 0x0490 */ unsigned long ProhibitRemoteImageMap : 1; /* bit position: 19 */
        /* 0x0490 */ unsigned long AuditProhibitRemoteImageMap : 1; /* bit position: 20 */
        /* 0x0490 */ unsigned long ProhibitLowILImageMap : 1; /* bit position: 21 */
        /* 0x0490 */ unsigned long AuditProhibitLowILImageMap : 1; /* bit position: 22 */
        /* 0x0490 */ unsigned long SignatureMitigationOptIn : 1; /* bit position: 23 */
        /* 0x0490 */ unsigned long AuditBlockNonMicrosoftBinaries : 1; /* bit position: 24 */
        /* 0x0490 */ unsigned long AuditBlockNonMicrosoftBinariesAllowStore : 1; /* bit position: 25 */
        /* 0x0490 */ unsigned long LoaderIntegrityContinuityEnabled : 1; /* bit position: 26 */
        /* 0x0490 */ unsigned long AuditLoaderIntegrityContinuity : 1; /* bit position: 27 */
        /* 0x0490 */ unsigned long EnableModuleTamperingProtection : 1; /* bit position: 28 */
        /* 0x0490 */ unsigned long EnableModuleTamperingProtectionNoInherit : 1; /* bit position: 29 */
        /* 0x0490 */ unsigned long RestrictIndirectBranchPrediction : 1; /* bit position: 30 */
        /* 0x0490 */ unsigned long IsolateSecurityDomain : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ MitigationFlagsValues;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0494 */ unsigned long MitigationFlags2;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0494 */ unsigned long EnableExportAddressFilter : 1; /* bit position: 0 */
        /* 0x0494 */ unsigned long AuditExportAddressFilter : 1; /* bit position: 1 */
        /* 0x0494 */ unsigned long EnableExportAddressFilterPlus : 1; /* bit position: 2 */
        /* 0x0494 */ unsigned long AuditExportAddressFilterPlus : 1; /* bit position: 3 */
        /* 0x0494 */ unsigned long EnableRopStackPivot : 1; /* bit position: 4 */
        /* 0x0494 */ unsigned long AuditRopStackPivot : 1; /* bit position: 5 */
        /* 0x0494 */ unsigned long EnableRopCallerCheck : 1; /* bit position: 6 */
        /* 0x0494 */ unsigned long AuditRopCallerCheck : 1; /* bit position: 7 */
        /* 0x0494 */ unsigned long EnableRopSimExec : 1; /* bit position: 8 */
        /* 0x0494 */ unsigned long AuditRopSimExec : 1; /* bit position: 9 */
        /* 0x0494 */ unsigned long EnableImportAddressFilter : 1; /* bit position: 10 */
        /* 0x0494 */ unsigned long AuditImportAddressFilter : 1; /* bit position: 11 */
        /* 0x0494 */ unsigned long DisablePageCombine : 1; /* bit position: 12 */
        /* 0x0494 */ unsigned long SpeculativeStoreBypassDisable : 1; /* bit position: 13 */
        /* 0x0494 */ unsigned long CetUserShadowStacks : 1; /* bit position: 14 */
        /* 0x0494 */ unsigned long AuditCetUserShadowStacks : 1; /* bit position: 15 */
        /* 0x0494 */ unsigned long AuditCetUserShadowStacksLogged : 1; /* bit position: 16 */
        /* 0x0494 */ unsigned long UserCetSetContextIpValidation : 1; /* bit position: 17 */
        /* 0x0494 */ unsigned long AuditUserCetSetContextIpValidation : 1; /* bit position: 18 */
        /* 0x0494 */ unsigned long AuditUserCetSetContextIpValidationLogged : 1; /* bit position: 19 */
      }; /* bitfield */
    } /* size: 0x0004 */ MitigationFlags2Values;
  }; /* size: 0x0004 */
  /* 0x0498 */ void* PartitionObject;
  /* 0x049c */ long Padding_123;
  /* 0x04a0 */ unsigned __int64 SecurityDomain;
  /* 0x04a8 */ unsigned __int64 ParentSecurityDomain;
  /* 0x04b0 */ void* CoverageSamplerContext;
  /* 0x04b4 */ void* MmHotPatchContext;
  /* 0x04b8 */ struct _KE_IDEAL_PROCESSOR_ASSIGNMENT_BLOCK IdealProcessorAssignmentBlock;
  /* 0x04d4 */ struct _RTL_AVL_TREE DynamicEHContinuationTargetsTree;
  /* 0x04d8 */ struct _EX_PUSH_LOCK DynamicEHContinuationTargetsLock;
  /* 0x04dc */ long __PADDING__[9];
} EPROCESS, *PEPROCESS; /* size: 0x0500 */

typedef struct _KERNEL_STACK_SEGMENT
{
  /* 0x0000 */ unsigned long StackBase;
  /* 0x0004 */ unsigned long StackLimit;
  /* 0x0008 */ unsigned long KernelStack;
  /* 0x000c */ unsigned long InitialStack;
} KERNEL_STACK_SEGMENT, *PKERNEL_STACK_SEGMENT; /* size: 0x0010 */

typedef struct _KSTACK_CONTROL
{
  /* 0x0000 */ unsigned long StackBase;
  union
  {
    /* 0x0004 */ unsigned long ActualLimit;
    /* 0x0004 */ unsigned long StackExpansion : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  /* 0x0008 */ struct _KTRAP_FRAME* PreviousTrapFrame;
  /* 0x000c */ void* PreviousExceptionList;
  /* 0x0010 */ struct _KERNEL_STACK_SEGMENT Previous;
} KSTACK_CONTROL, *PKSTACK_CONTROL; /* size: 0x0020 */

typedef union _PS_CLIENT_SECURITY_CONTEXT
{
  union
  {
    /* 0x0000 */ unsigned long ImpersonationData;
    /* 0x0000 */ void* ImpersonationToken;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ImpersonationLevel : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long EffectiveOnly : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT; /* size: 0x0004 */

typedef struct _ETHREAD
{
  /* 0x0000 */ struct _KTHREAD Tcb;
  /* 0x0280 */ union _LARGE_INTEGER CreateTime;
  union
  {
    /* 0x0288 */ union _LARGE_INTEGER ExitTime;
    /* 0x0288 */ struct _LIST_ENTRY KeyedWaitChain;
  }; /* size: 0x0008 */
  /* 0x0290 */ void* ChargeOnlySession;
  union
  {
    /* 0x0294 */ struct _LIST_ENTRY PostBlockList;
    struct
    {
      /* 0x0294 */ void* ForwardLinkShadow;
      /* 0x0298 */ void* StartAddress;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x029c */ struct _TERMINATION_PORT* TerminationPort;
    /* 0x029c */ struct _ETHREAD* ReaperLink;
    /* 0x029c */ void* KeyedWaitValue;
  }; /* size: 0x0004 */
  /* 0x02a0 */ unsigned long ActiveTimerListLock;
  /* 0x02a4 */ struct _LIST_ENTRY ActiveTimerListHead;
  /* 0x02ac */ struct _CLIENT_ID Cid;
  union
  {
    /* 0x02b4 */ struct _KSEMAPHORE KeyedWaitSemaphore;
    /* 0x02b4 */ struct _KSEMAPHORE AlpcWaitSemaphore;
  }; /* size: 0x0014 */
  /* 0x02c8 */ union _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
  /* 0x02cc */ struct _LIST_ENTRY IrpList;
  /* 0x02d4 */ unsigned long TopLevelIrp;
  /* 0x02d8 */ struct _DEVICE_OBJECT* DeviceToVerify;
  /* 0x02dc */ void* Win32StartAddress;
  /* 0x02e0 */ void* LegacyPowerObject;
  /* 0x02e4 */ struct _LIST_ENTRY ThreadListEntry;
  /* 0x02ec */ struct _EX_RUNDOWN_REF RundownProtect;
  /* 0x02f0 */ struct _EX_PUSH_LOCK ThreadLock;
  /* 0x02f4 */ unsigned long ReadClusterSize;
  /* 0x02f8 */ volatile long MmLockOrdering;
  union
  {
    /* 0x02fc */ unsigned long CrossThreadFlags;
    struct /* bitfield */
    {
      /* 0x02fc */ unsigned long Terminated : 1; /* bit position: 0 */
      /* 0x02fc */ unsigned long ThreadInserted : 1; /* bit position: 1 */
      /* 0x02fc */ unsigned long HideFromDebugger : 1; /* bit position: 2 */
      /* 0x02fc */ unsigned long ActiveImpersonationInfo : 1; /* bit position: 3 */
      /* 0x02fc */ unsigned long HardErrorsAreDisabled : 1; /* bit position: 4 */
      /* 0x02fc */ unsigned long BreakOnTermination : 1; /* bit position: 5 */
      /* 0x02fc */ unsigned long SkipCreationMsg : 1; /* bit position: 6 */
      /* 0x02fc */ unsigned long SkipTerminationMsg : 1; /* bit position: 7 */
      /* 0x02fc */ unsigned long CopyTokenOnOpen : 1; /* bit position: 8 */
      /* 0x02fc */ unsigned long ThreadIoPriority : 3; /* bit position: 9 */
      /* 0x02fc */ unsigned long ThreadPagePriority : 3; /* bit position: 12 */
      /* 0x02fc */ unsigned long RundownFail : 1; /* bit position: 15 */
      /* 0x02fc */ unsigned long UmsForceQueueTermination : 1; /* bit position: 16 */
      /* 0x02fc */ unsigned long IndirectCpuSets : 1; /* bit position: 17 */
      /* 0x02fc */ unsigned long DisableDynamicCodeOptOut : 1; /* bit position: 18 */
      /* 0x02fc */ unsigned long ExplicitCaseSensitivity : 1; /* bit position: 19 */
      /* 0x02fc */ unsigned long PicoNotifyExit : 1; /* bit position: 20 */
      /* 0x02fc */ unsigned long DbgWerUserReportActive : 1; /* bit position: 21 */
      /* 0x02fc */ unsigned long ForcedSelfTrimActive : 1; /* bit position: 22 */
      /* 0x02fc */ unsigned long SamplingCoverage : 1; /* bit position: 23 */
      /* 0x02fc */ unsigned long ReservedCrossThreadFlags : 8; /* bit position: 24 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0300 */ unsigned long SameThreadPassiveFlags;
    struct /* bitfield */
    {
      /* 0x0300 */ unsigned long ActiveExWorker : 1; /* bit position: 0 */
      /* 0x0300 */ unsigned long MemoryMaker : 1; /* bit position: 1 */
      /* 0x0300 */ unsigned long StoreLockThread : 2; /* bit position: 2 */
      /* 0x0300 */ unsigned long ClonedThread : 1; /* bit position: 4 */
      /* 0x0300 */ unsigned long KeyedEventInUse : 1; /* bit position: 5 */
      /* 0x0300 */ unsigned long SelfTerminate : 1; /* bit position: 6 */
      /* 0x0300 */ unsigned long RespectIoPriority : 1; /* bit position: 7 */
      /* 0x0300 */ unsigned long ActivePageLists : 1; /* bit position: 8 */
      /* 0x0300 */ unsigned long SecureContext : 1; /* bit position: 9 */
      /* 0x0300 */ unsigned long ZeroPageThread : 1; /* bit position: 10 */
      /* 0x0300 */ unsigned long WorkloadClass : 1; /* bit position: 11 */
      /* 0x0300 */ unsigned long ReservedSameThreadPassiveFlags : 20; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0304 */ unsigned long SameThreadApcFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0304 */ unsigned char OwnsProcessAddressSpaceExclusive : 1; /* bit position: 0 */
        /* 0x0304 */ unsigned char OwnsProcessAddressSpaceShared : 1; /* bit position: 1 */
        /* 0x0304 */ unsigned char HardFaultBehavior : 1; /* bit position: 2 */
        /* 0x0304 */ volatile unsigned char StartAddressInvalid : 1; /* bit position: 3 */
        /* 0x0304 */ unsigned char EtwCalloutActive : 1; /* bit position: 4 */
        /* 0x0304 */ unsigned char SuppressSymbolLoad : 1; /* bit position: 5 */
        /* 0x0304 */ unsigned char Prefetching : 1; /* bit position: 6 */
        /* 0x0304 */ unsigned char OwnsVadExclusive : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0305 */ unsigned char SystemPagePriorityActive : 1; /* bit position: 0 */
        /* 0x0305 */ unsigned char SystemPagePriority : 3; /* bit position: 1 */
        /* 0x0305 */ unsigned char AllowUserWritesToExecutableMemory : 1; /* bit position: 4 */
        /* 0x0305 */ unsigned char AllowKernelWritesToExecutableMemory : 1; /* bit position: 5 */
        /* 0x0305 */ unsigned char OwnsVadShared : 1; /* bit position: 6 */
        /* 0x0305 */ unsigned char SessionAttachActive : 1; /* bit position: 7 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  }; /* size: 0x0004 */
  /* 0x0308 */ unsigned char CacheManagerActive;
  /* 0x0309 */ unsigned char DisablePageFaultClustering;
  /* 0x030a */ unsigned char ActiveFaultCount;
  /* 0x030b */ unsigned char LockOrderState;
  /* 0x030c */ unsigned long PerformanceCountLowReserved;
  /* 0x0310 */ long PerformanceCountHighReserved;
  /* 0x0314 */ unsigned long AlpcMessageId;
  union
  {
    /* 0x0318 */ void* AlpcMessage;
    /* 0x0318 */ unsigned long AlpcReceiveAttributeSet;
  }; /* size: 0x0004 */
  /* 0x031c */ struct _LIST_ENTRY AlpcWaitListEntry;
  /* 0x0324 */ long ExitStatus;
  /* 0x0328 */ unsigned long CacheManagerCount;
  /* 0x032c */ unsigned long IoBoostCount;
  /* 0x0330 */ unsigned long IoQoSBoostCount;
  /* 0x0334 */ unsigned long IoQoSThrottleCount;
  /* 0x0338 */ unsigned long KernelStackReference;
  /* 0x033c */ struct _LIST_ENTRY BoostList;
  /* 0x0344 */ struct _LIST_ENTRY DeboostList;
  /* 0x034c */ unsigned long BoostListLock;
  /* 0x0350 */ unsigned long IrpListLock;
  /* 0x0354 */ void* ReservedForSynchTracking;
  /* 0x0358 */ struct _SINGLE_LIST_ENTRY CmCallbackListHead;
  /* 0x035c */ const struct _GUID* ActivityId;
  /* 0x0360 */ struct _SINGLE_LIST_ENTRY SeLearningModeListHead;
  /* 0x0364 */ void* VerifierContext;
  /* 0x0368 */ void* AdjustedClientToken;
  /* 0x036c */ void* WorkOnBehalfThread;
  /* 0x0370 */ struct _PS_PROPERTY_SET PropertySet;
  /* 0x037c */ void* PicoContext;
  /* 0x0380 */ unsigned long UserFsBase;
  /* 0x0384 */ unsigned long UserGsBase;
  /* 0x0388 */ struct _THREAD_ENERGY_VALUES* EnergyValues;
  union
  {
    /* 0x038c */ unsigned long SelectedCpuSets;
    /* 0x038c */ unsigned long* SelectedCpuSetsIndirect;
  }; /* size: 0x0004 */
  /* 0x0390 */ struct _EJOB* Silo;
  /* 0x0394 */ struct _UNICODE_STRING* ThreadName;
  /* 0x0398 */ void* SparePointer;
  /* 0x039c */ unsigned long LastExpectedRunTime;
  /* 0x03a0 */ unsigned long HeapData;
  /* 0x03a4 */ struct _LIST_ENTRY OwnerEntryListHead;
  /* 0x03ac */ unsigned long DisownedOwnerEntryListLock;
  /* 0x03b0 */ struct _LIST_ENTRY DisownedOwnerEntryListHead;
  /* 0x03b8 */ struct _KLOCK_ENTRY LockEntries[6];
  /* 0x04d8 */ void* CmDbgInfo;
  /* 0x04dc */ long __PADDING__[1];
} ETHREAD, *PETHREAD; /* size: 0x04e0 */

typedef struct _MI_POOL_STATE
{
  /* 0x0000 */ unsigned long MaximumNonPagedPoolThreshold;
  /* 0x0004 */ volatile unsigned long AllocatedNonPagedPool;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY BadPoolHead;
  /* 0x000c */ unsigned long HighEventSets;
  /* 0x0010 */ unsigned char HighEventSetsValid;
  /* 0x0011 */ char Padding_124[3];
  /* 0x0014 */ unsigned long LowPagedPoolThreshold;
  /* 0x0018 */ unsigned long HighPagedPoolThreshold;
  /* 0x001c */ volatile long PermittedFaultsLock;
  /* 0x0020 */ struct _RTL_AVL_TREE PermittedFaultsTree;
  /* 0x0024 */ struct _MI_ACCESS_VIOLATION_RANGE PermittedFaultsInitialNode[2];
  /* 0x004c */ unsigned long TotalPagedPoolQuota;
  /* 0x0050 */ unsigned long TotalNonPagedPoolQuota;
} MI_POOL_STATE, *PMI_POOL_STATE; /* size: 0x0054 */

typedef struct _MMSUBSECTION_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned short SubsectionAccessed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned short Protection : 5; /* bit position: 1 */
    /* 0x0000 */ unsigned short StartingSector4132 : 10; /* bit position: 6 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned short SubsectionStatic : 1; /* bit position: 0 */
    /* 0x0002 */ unsigned short GlobalMemory : 1; /* bit position: 1 */
    /* 0x0002 */ unsigned short Spare : 1; /* bit position: 2 */
    /* 0x0002 */ unsigned short OnDereferenceList : 1; /* bit position: 3 */
    /* 0x0002 */ unsigned short SectorEndOffset : 12; /* bit position: 4 */
  }; /* bitfield */
} MMSUBSECTION_FLAGS, *PMMSUBSECTION_FLAGS; /* size: 0x0004 */

typedef struct _MI_SUBSECTION_ENTRY1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long CrossPartitionReferences : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long SubsectionMappedLarge : 2; /* bit position: 30 */
  }; /* bitfield */
} MI_SUBSECTION_ENTRY1, *PMI_SUBSECTION_ENTRY1; /* size: 0x0004 */

typedef struct _SUBSECTION
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0004 */ struct _MMPTE* SubsectionBase;
  /* 0x0008 */ struct _SUBSECTION* NextSubsection;
  union
  {
    /* 0x000c */ struct _RTL_AVL_TREE GlobalPerSessionHead;
    /* 0x000c */ struct _MI_CONTROL_AREA_WAIT_BLOCK* CreationWaitList;
    /* 0x000c */ struct _MI_PER_SESSION_PROTOS* SessionDriverProtos;
  }; /* size: 0x0004 */
  union
  {
    union
    {
      /* 0x0010 */ unsigned long LongFlags;
      /* 0x0010 */ struct _MMSUBSECTION_FLAGS SubsectionFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0014 */ unsigned long StartingSector;
  /* 0x0018 */ unsigned long NumberOfFullSectors;
  /* 0x001c */ unsigned long PtesInSubsection;
  union
  {
    union
    {
      /* 0x0020 */ struct _MI_SUBSECTION_ENTRY1 e1;
      /* 0x0020 */ unsigned long EntireField;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  struct /* bitfield */
  {
    /* 0x0024 */ unsigned long UnusedPtes : 30; /* bit position: 0 */
    /* 0x0024 */ unsigned long ExtentQueryNeeded : 1; /* bit position: 30 */
    /* 0x0024 */ unsigned long DirtyPages : 1; /* bit position: 31 */
  }; /* bitfield */
} SUBSECTION, *PSUBSECTION; /* size: 0x0028 */

typedef struct _MSUBSECTION
{
  /* 0x0000 */ struct _SUBSECTION Core;
  /* 0x0028 */ struct _RTL_BALANCED_NODE SubsectionNode;
  /* 0x0034 */ struct _LIST_ENTRY DereferenceList;
  /* 0x003c */ unsigned long NumberOfMappedViews;
  /* 0x0040 */ unsigned long NumberOfPfnReferences;
  /* 0x0044 */ struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
} MSUBSECTION, *PMSUBSECTION; /* size: 0x0054 */

typedef struct _MI_EXTENT_DELETION_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_EXTENT_DELETION_WAIT_BLOCK* Next;
  /* 0x0004 */ struct _KGATE Gate;
} MI_EXTENT_DELETION_WAIT_BLOCK, *PMI_EXTENT_DELETION_WAIT_BLOCK; /* size: 0x0014 */

typedef struct _MI_DLL_OVERFLOW_AREA
{
  /* 0x0000 */ void* RangeStart;
  /* 0x0004 */ void* NextVa;
} MI_DLL_OVERFLOW_AREA, *PMI_DLL_OVERFLOW_AREA; /* size: 0x0008 */

typedef struct _MI_SECTION_STATE
{
  /* 0x0000 */ volatile long SectionObjectPointersLock;
  /* 0x0004 */ struct _RTL_AVL_TREE SectionBasedRoot;
  /* 0x0008 */ struct _EX_PUSH_LOCK SectionBasedLock;
  /* 0x000c */ volatile unsigned long UnusedSegmentPagedPool;
  /* 0x0010 */ unsigned long DataSectionProtectionMask;
  /* 0x0014 */ void* HighSectionBase;
  /* 0x0018 */ struct _MSUBSECTION PhysicalSubsection;
  /* 0x006c */ long Padding_125;
  /* 0x0070 */ struct _CONTROL_AREA PhysicalControlArea;
  /* 0x00c0 */ struct _MMPFNLIST PurgingExtentPages;
  /* 0x00d4 */ struct _MMPFN* DanglingExtentPages;
  /* 0x00d8 */ struct _WORK_QUEUE_ITEM DanglingExtentsWorkItem;
  /* 0x00e8 */ struct _MI_EXTENT_DELETION_WAIT_BLOCK DanglingExtentsDeletionWaitList;
  /* 0x00fc */ unsigned char FileOnlyMemoryPfnsCreated;
  /* 0x00fd */ unsigned char DanglingExtentsWorkerActive;
  /* 0x00fe */ unsigned char PurgingExtentsNeedWatchdog;
  /* 0x00ff */ char Padding_126;
  /* 0x0100 */ struct _RTL_AVL_TREE PrototypePtesTree;
  /* 0x0104 */ volatile long PrototypePtesTreeSpinLock;
  /* 0x0108 */ struct _EX_PUSH_LOCK RelocateBitmapsLock;
  /* 0x010c */ struct _RTL_BITMAP ImageBitMapNative;
  /* 0x0114 */ unsigned long ImageBiasNative;
  /* 0x0118 */ struct _MI_DLL_OVERFLOW_AREA OverflowArea;
  /* 0x0120 */ void* ApiSetSection;
  /* 0x0124 */ void* ApiSetSchema;
  /* 0x0128 */ unsigned long ApiSetSchemaSize;
  /* 0x012c */ unsigned long LostDataFiles;
  /* 0x0130 */ unsigned long LostDataPages;
  /* 0x0134 */ unsigned long ImageFailureReason;
  /* 0x0138 */ struct _SECTION* CfgBitMapSection;
  /* 0x013c */ struct _CONTROL_AREA* CfgBitMapControlArea;
  /* 0x0140 */ unsigned long ImageCfgFailure;
  /* 0x0144 */ unsigned long ImageBreakpointEnabled;
  /* 0x0148 */ unsigned long ImageBreakpointChecksum;
  /* 0x014c */ unsigned long ImageBreakpointSize;
  /* 0x0150 */ volatile long ImageValidationFailed;
  /* 0x0154 */ struct _RTL_AVL_TREE ImageExtentTree;
  /* 0x0158 */ struct _EX_PUSH_LOCK ImageExtentTreeLock;
  /* 0x015c */ unsigned long HotPatchReserveSize;
  /* 0x0160 */ long __PADDING__[8];
} MI_SECTION_STATE, *PMI_SECTION_STATE; /* size: 0x0180 */

typedef struct _MM_SYSTEM_PAGE_COUNTS
{
  /* 0x0000 */ unsigned long SystemCodePage;
  /* 0x0004 */ unsigned long SystemDriverPage;
  /* 0x0008 */ long TotalSystemCodePages;
  /* 0x000c */ long TotalSystemDriverPages;
} MM_SYSTEM_PAGE_COUNTS, *PMM_SYSTEM_PAGE_COUNTS; /* size: 0x0010 */

typedef struct _MI_SYSTEM_IMAGE_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY FixupList;
  /* 0x0008 */ struct _EX_PUSH_LOCK LoadLock;
  /* 0x000c */ struct _ETHREAD* LoadLockOwner;
  /* 0x0010 */ unsigned long LoadLockCount;
  /* 0x0014 */ volatile long FixupLock;
  /* 0x0018 */ unsigned char FirstLoadEver;
  /* 0x0019 */ unsigned char LargePageAll;
  /* 0x001a */ char Padding_127[2];
  /* 0x001c */ unsigned long LastPage;
  /* 0x0020 */ struct _LIST_ENTRY LargePageList;
  /* 0x0028 */ struct _LIST_ENTRY StrongCodeLoadFailureList;
  /* 0x0030 */ struct _KLDR_DATA_TABLE_ENTRY* SystemBase[2];
  /* 0x0038 */ struct _KLDR_DATA_TABLE_ENTRY* BeingDeleted;
  /* 0x003c */ struct _EX_PUSH_LOCK MappingRangesPushLock;
  /* 0x0040 */ struct _MI_DRIVER_VA* MappingRanges[2];
  /* 0x0048 */ unsigned long PageCount;
  /* 0x004c */ struct _MM_SYSTEM_PAGE_COUNTS PageCounts;
  /* 0x005c */ struct _EX_PUSH_LOCK CollidedLock;
  /* 0x0060 */ struct _RTL_AVL_TREE ImageTree;
} MI_SYSTEM_IMAGE_STATE, *PMI_SYSTEM_IMAGE_STATE; /* size: 0x0064 */

typedef struct _MMSESSION
{
  /* 0x0000 */ struct _EX_PUSH_LOCK SystemSpaceViewLock;
  /* 0x0004 */ struct _EX_PUSH_LOCK* SystemSpaceViewLockPointer;
  /* 0x0008 */ struct _RTL_AVL_TREE ViewRoot;
  /* 0x000c */ unsigned long ViewCount;
  /* 0x0010 */ unsigned long BitmapFailures;
} MMSESSION, *PMMSESSION; /* size: 0x0014 */

typedef struct _MI_SESSION_STATE
{
  /* 0x0000 */ struct _MMSESSION SystemSession;
  /* 0x0014 */ unsigned char CodePageEdited;
  /* 0x0015 */ char Padding_128[3];
  /* 0x0018 */ long VaReferenceCount[1024];
  /* 0x1018 */ unsigned long* DynamicPtesBitBuffer;
  /* 0x101c */ struct _EX_PUSH_LOCK IdLock;
  /* 0x1020 */ struct _EPROCESS* LeaderProcess;
  /* 0x1024 */ struct _EX_PUSH_LOCK InitializeLock;
  /* 0x1028 */ struct _MMWSL_INSTANCE* WorkingSetList;
  /* 0x102c */ void* SessionBase;
  /* 0x1030 */ void* SessionCore;
  /* 0x1034 */ struct _RTL_AVL_TREE SessionIdNodes;
} MI_SESSION_STATE, *PMI_SESSION_STATE; /* size: 0x1038 */

typedef struct _MI_PROCESS_STATE
{
  /* 0x0000 */ void* SystemDllBase;
  /* 0x0004 */ unsigned long ColorSeed;
  /* 0x0008 */ long RotatingUniprocessorNumber;
  /* 0x000c */ long Padding_129;
  /* 0x0010 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x0018 */ struct _LIST_ENTRY ProcessList;
  /* 0x0020 */ struct _MMPTE* SharedUserDataPte[2];
  /* 0x0028 */ void* HypervisorSharedVa;
  /* 0x002c */ unsigned long VadSecureCookie;
  /* 0x0030 */ unsigned long PaeGroups;
  /* 0x0034 */ unsigned long FreePaeEntries;
  /* 0x0038 */ struct _PAE_ENTRY FirstFreePae;
  /* 0x0058 */ volatile long AllocatedPaePages;
  /* 0x005c */ unsigned long PaeLock;
  /* 0x0060 */ union _SLIST_HEADER PaeEntrySList;
} MI_PROCESS_STATE, *PMI_PROCESS_STATE; /* size: 0x0068 */

typedef struct _MI_ZERO_COST_COUNTS
{
  /* 0x0000 */ unsigned __int64 NativeSum;
  /* 0x0008 */ unsigned __int64 CachedSum;
} MI_ZERO_COST_COUNTS, *PMI_ZERO_COST_COUNTS; /* size: 0x0010 */

typedef struct _MI_HARDWARE_STATE
{
  /* 0x0000 */ unsigned long NodeMask;
  /* 0x0004 */ unsigned long NumaHintIndex;
  /* 0x0008 */ unsigned long NumaLastRangeIndexInclusive;
  /* 0x000c */ unsigned char NodeShift;
  /* 0x000d */ unsigned char ChannelShift;
  /* 0x000e */ char Padding_130[2];
  /* 0x0010 */ unsigned long ChannelHintIndex;
  /* 0x0014 */ unsigned long ChannelLastRangeIndexInclusive;
  /* 0x0018 */ struct _MI_NODE_NUMBER_ZERO_BASED* NodeGraph;
  /* 0x001c */ struct _MI_SYSTEM_NODE_NONPAGED_POOL* SystemNodeNonPagedPool;
  /* 0x0020 */ struct _HAL_NODE_RANGE TemporaryNumaRanges[2];
  /* 0x0030 */ struct _HAL_NODE_RANGE* NumaMemoryRanges;
  /* 0x0034 */ struct _HAL_CHANNEL_MEMORY_RANGES* ChannelMemoryRanges;
  /* 0x0038 */ unsigned long SecondLevelCacheSize;
  /* 0x003c */ unsigned long FirstLevelCacheSize;
  /* 0x0040 */ unsigned long PhysicalAddressBits;
  /* 0x0044 */ unsigned long PfnDatabasePageBits;
  /* 0x0048 */ unsigned long LogicalProcessorsPerCore;
  /* 0x004c */ unsigned char ProcessorCachesFlushedOnPowerLoss;
  /* 0x004d */ char Padding_131[3];
  /* 0x0050 */ unsigned long TotalPagesAllowed;
  /* 0x0054 */ unsigned long SecondaryColorMask;
  /* 0x0058 */ unsigned long SecondaryColors;
  /* 0x005c */ unsigned long FlushTbForAttributeChange;
  /* 0x0060 */ unsigned long FlushCacheForAttributeChange;
  /* 0x0064 */ unsigned long FlushCacheForPageAttributeChange;
  /* 0x0068 */ unsigned long CacheFlushPromoteThreshold;
  /* 0x006c */ long Padding_132;
  /* 0x0070 */ union _LARGE_INTEGER PerformanceCounterFrequency;
  /* 0x0078 */ long Padding_133[2];
  /* 0x0080 */ unsigned __int64 InvalidPteMask;
  /* 0x0088 */ long Padding_134[14];
  /* 0x00c0 */ unsigned long LargePageColors[2];
  /* 0x00c8 */ unsigned long FlushTbThreshold;
  /* 0x00cc */ enum _MI_PFN_CACHE_ATTRIBUTE OptimalZeroingAttribute[4][4];
  /* 0x010c */ unsigned char AttributeChangeRequiresReZero;
  /* 0x010d */ char Padding_135[3];
  /* 0x0110 */ struct _MI_ZERO_COST_COUNTS ZeroCostCounts[2];
  /* 0x0130 */ unsigned long HighestPossiblePhysicalPage;
  /* 0x0134 */ unsigned long VsmKernelPageCount;
  /* 0x0138 */ long __PADDING__[2];
} MI_HARDWARE_STATE, *PMI_HARDWARE_STATE; /* size: 0x0140 */

typedef struct _MI_SYSTEM_REGION_ANCHOR
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long ReferenceCount : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long BeingDeleted : 1; /* bit position: 31 */
  }; /* bitfield */
} MI_SYSTEM_REGION_ANCHOR, *PMI_SYSTEM_REGION_ANCHOR; /* size: 0x0004 */

typedef struct _MI_SYSTEM_REGION_REFERENCE
{
  struct
  {
    union
    {
      /* 0x0000 */ struct _MI_SYSTEM_REGION_ANCHOR Anchor;
      /* 0x0000 */ unsigned long EntireReference;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} MI_SYSTEM_REGION_REFERENCE, *PMI_SYSTEM_REGION_REFERENCE; /* size: 0x0004 */

typedef struct _MI_SYSTEM_VA_STATE
{
  /* 0x0000 */ unsigned long SystemTablesLock;
  /* 0x0004 */ unsigned long SystemVaBias;
  /* 0x0008 */ unsigned long SystemAvailableVaLow;
  /* 0x000c */ unsigned long VirtualBias;
  /* 0x0010 */ void* SystemRangeStart;
  /* 0x0014 */ unsigned char SystemCachePdeCount[1024];
  /* 0x0414 */ void* SystemCacheReverseMaps[1024];
  /* 0x1414 */ struct _MI_SYSTEM_REGION_REFERENCE VaRegion[1024];
  /* 0x2414 */ unsigned long TopLevelPteLockBits[128];
  /* 0x2614 */ unsigned long TopLevelPteAlternateLockBits[4];
  /* 0x2624 */ volatile long DeleteKvaLock;
  /* 0x2628 */ struct _MI_WSLE* WsleArrays[8];
  /* 0x2648 */ void* PagableHyperSpace;
  /* 0x264c */ void* HyperSpaceEnd;
  /* 0x2650 */ unsigned long PagableHyperSpaceBytes;
  /* 0x2654 */ struct _KEVENT FreeSystemCacheVa;
  /* 0x2664 */ unsigned long SystemVaLock;
  /* 0x2668 */ unsigned long SystemCacheViewLock;
  /* 0x266c */ struct _MMWSL_INSTANCE SystemWorkingSetList[8];
  /* 0x272c */ long __PADDING__[5];
} MI_SYSTEM_VA_STATE, *PMI_SYSTEM_VA_STATE; /* size: 0x2740 */

typedef struct _MI_COMBINE_STATE
{
  /* 0x0000 */ volatile long ActiveSpinLock;
  /* 0x0004 */ unsigned long CombiningThreadCount;
  /* 0x0008 */ struct _RTL_AVL_TREE ActiveThreadTree;
  /* 0x000c */ long Padding_136;
  /* 0x0010 */ unsigned __int64 CommonPageCombineDomain;
  /* 0x0018 */ unsigned long CommonCombineDomainAssigned;
  /* 0x001c */ long __PADDING__[1];
} MI_COMBINE_STATE, *PMI_COMBINE_STATE; /* size: 0x0020 */

typedef struct _MI_PAGELIST_STATE
{
  /* 0x0000 */ volatile long ActiveSpinLock;
  /* 0x0004 */ struct _RTL_AVL_TREE ActiveThreadTree;
  /* 0x0008 */ volatile long ActiveZeroSpinLock;
  /* 0x000c */ struct _RTL_AVL_TREE ActiveZeroThreadTree;
  /* 0x0010 */ struct _MMPFN LargePfnTemplate;
  /* 0x002c */ struct _MMPFN LargePfnBasePageTemplate;
  /* 0x0048 */ unsigned long NumberOfLargePageListHeads;
} MI_PAGELIST_STATE, *PMI_PAGELIST_STATE; /* size: 0x004c */

typedef struct _MI_PARTITION_STATE
{
  /* 0x0000 */ unsigned long PartitionLock;
  /* 0x0004 */ struct _EX_PUSH_LOCK PartitionIdLock;
  /* 0x0008 */ unsigned __int64 InitialPartitionIdBits;
  /* 0x0010 */ struct _LIST_ENTRY PartitionList;
  /* 0x0018 */ struct _RTL_BITMAP* PartitionIdBitmap;
  /* 0x001c */ struct _RTL_BITMAP InitialPartitionIdBitmap;
  /* 0x0024 */ struct _MI_PARTITION* TempPartitionPointers[1];
  /* 0x0028 */ struct _MI_PARTITION** Partition;
  /* 0x002c */ unsigned long TotalPagesInChildPartitions;
  /* 0x0030 */ unsigned long CrossPartitionDenials;
  /* 0x0034 */ unsigned char MultiplePartitionsExist;
  /* 0x0035 */ char __PADDING__[3];
} MI_PARTITION_STATE, *PMI_PARTITION_STATE; /* size: 0x0038 */

typedef struct _MI_RESUME_WORKITEM
{
  /* 0x0000 */ struct _KEVENT ResumeCompleteEvent;
  /* 0x0010 */ struct _WORK_QUEUE_ITEM WorkItem;
} MI_RESUME_WORKITEM, *PMI_RESUME_WORKITEM; /* size: 0x0020 */

typedef struct _MI_SHUTDOWN_STATE
{
  /* 0x0000 */ unsigned char CrashDumpInitialized;
  /* 0x0001 */ unsigned char ConnectedStandbyActive;
  /* 0x0002 */ unsigned char ZeroPageFileAtShutdown;
  /* 0x0003 */ char Padding_137;
  /* 0x0004 */ unsigned long SystemShutdown;
  /* 0x0008 */ long ShutdownFlushInProgress;
  /* 0x000c */ unsigned long MirroringActive;
  /* 0x0010 */ struct _MI_RESUME_WORKITEM ResumeItem;
  /* 0x0030 */ struct _ETHREAD* MirrorHoldsPfn;
  /* 0x0034 */ struct _RTL_BITMAP MirrorBitMaps[2];
  /* 0x0044 */ struct _MMPTE* CrashDumpPte;
} MI_SHUTDOWN_STATE, *PMI_SHUTDOWN_STATE; /* size: 0x0048 */

typedef struct _MI_DEBUGGER_STATE
{
  /* 0x0000 */ unsigned char TransientWrite;
  /* 0x0001 */ unsigned char CodePageEdited;
  /* 0x0002 */ char Padding_138[2];
  /* 0x0004 */ struct _MMPTE* DebugPte;
  /* 0x0008 */ unsigned long PoisonedTb;
  /* 0x000c */ volatile long InDebugger;
  /* 0x0010 */ void* volatile Pfns[32];
} MI_DEBUGGER_STATE, *PMI_DEBUGGER_STATE; /* size: 0x0090 */

typedef struct _MI_STANDBY_STATE
{
  /* 0x0000 */ unsigned long FirstDecayPage;
  /* 0x0004 */ long Padding_139;
  /* 0x0008 */ union _SLIST_HEADER PfnDecayFreeSList;
  /* 0x0010 */ struct _MM_PAGE_ACCESS_INFO_HEADER* PfnRepurposeLog;
  /* 0x0014 */ struct _KDPC AllocatePfnRepurposeDpc;
  /* 0x0034 */ long Padding_140;
  /* 0x0038 */ union _SLIST_HEADER PageHeatListSlist;
  /* 0x0040 */ volatile long PageHeatListDisableAllocation;
  /* 0x0044 */ long __PADDING__[1];
} MI_STANDBY_STATE, *PMI_STANDBY_STATE; /* size: 0x0048 */

typedef struct _NPAGED_LOOKASIDE_LIST
{
  /* 0x0000 */ struct _GENERAL_LOOKASIDE L;
  /* 0x0080 */ unsigned long Lock__ObsoleteButDoNotDelete;
  /* 0x0084 */ long __PADDING__[15];
} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST; /* size: 0x00c0 */

typedef struct _MI_SYSTEM_PTE_STATE
{
  /* 0x0000 */ struct _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside;
  /* 0x00c0 */ union _SLIST_HEADER DeadPteTrackerSListHead;
  /* 0x00c8 */ unsigned long PteTrackerLock;
  /* 0x00cc */ struct _RTL_BITMAP PteTrackingBitmap;
  /* 0x00d4 */ volatile struct _MI_CACHED_PTES* CachedPteHeads;
  /* 0x00d8 */ volatile struct _MI_CACHED_PTES* CachedKernelStackPteHeads;
  /* 0x00dc */ struct _MI_SYSTEM_PTE_TYPE SystemViewPteInfo;
  /* 0x0110 */ struct _MI_SYSTEM_PTE_TYPE KernelStackPteInfo;
  /* 0x0144 */ unsigned long StackGrowthFailures;
  /* 0x0148 */ unsigned char KernelStackPages;
  /* 0x0149 */ unsigned char TrackPtesAborted;
  /* 0x014a */ unsigned char AdjustCounter;
  /* 0x014b */ char Padding_141;
  /* 0x014c */ volatile long ReservedMappingLock;
  /* 0x0150 */ struct _RTL_AVL_TREE ReservedMappingTree;
  /* 0x0154 */ struct _MMPFN* ReservedMappingPageTablePfns;
  /* 0x0158 */ struct _RTL_AVL_TREE OutswappedKernelStackRoot;
  /* 0x015c */ volatile long OutswappedKernelStackLock;
  /* 0x0160 */ struct _MMPTE* BreakMakePte;
  /* 0x0164 */ long __PADDING__[7];
} MI_SYSTEM_PTE_STATE, *PMI_SYSTEM_PTE_STATE; /* size: 0x0180 */

typedef struct _MI_IO_CACHE_STATS
{
  /* 0x0000 */ unsigned long UnmappedCacheFlush;
  /* 0x0004 */ unsigned long UnmappedCacheConflict;
  /* 0x0008 */ unsigned long PermanentIoAttributeConflict;
  /* 0x000c */ unsigned long PermanentIoNodeConflict;
} MI_IO_CACHE_STATS, *PMI_IO_CACHE_STATS; /* size: 0x0010 */

typedef struct _MI_IO_PAGE_STATE
{
  /* 0x0000 */ struct _RTL_AVL_TREE IoPfnRoot[2];
  /* 0x0008 */ unsigned long UnmappedNodeCount[2];
  /* 0x0010 */ long Padding_142[12];
  /* 0x0040 */ unsigned long UnmappedNodeCountMaximum;
  /* 0x0044 */ unsigned long TotalNodeCount[2];
  /* 0x004c */ struct _RTL_AVL_TREE InvariantIoSpace;
  /* 0x0050 */ volatile long IoPfnPruneLock;
  /* 0x0054 */ unsigned long ResumePageForDeleteScans[2];
  /* 0x005c */ struct _WORK_QUEUE_ITEM UnmappedNodeWorkItem;
  /* 0x006c */ struct _MI_IO_CACHE_STATS IoCacheStats;
  /* 0x007c */ long __PADDING__[1];
} MI_IO_PAGE_STATE, *PMI_IO_PAGE_STATE; /* size: 0x0080 */

typedef struct _MI_PAGING_IO_STATE
{
  /* 0x0000 */ struct _RTL_AVL_TREE PageFileHead;
  /* 0x0004 */ volatile long PageFileHeadSpinLock;
  /* 0x0008 */ long PrefetchSeekThreshold;
  /* 0x000c */ unsigned long InPageSinglePages;
  /* 0x0010 */ union _SLIST_HEADER InPageSupportSListHead[2];
  /* 0x0020 */ union _SLIST_HEADER ReservedInPageSupportSListHead[2];
  /* 0x0030 */ unsigned char InPageSupportSListMinimum[2];
  /* 0x0032 */ char Padding_143[2];
  /* 0x0034 */ struct _MMINPAGE_SUPPORT* FirstReservedInPageBlock[2];
  /* 0x003c */ struct _MMINPAGE_SUPPORT* LastReservedInPageBlock[2];
  /* 0x0044 */ struct _MMPTE* ReservedPtes;
  /* 0x0048 */ unsigned long ReservedPtesLock;
  /* 0x004c */ unsigned long ReservedPtesBitBuffer;
  /* 0x0050 */ volatile long DelayPageFaults;
  /* 0x0054 */ unsigned long FileCompressionBoundary;
  /* 0x0058 */ unsigned char MdlsAdjusted;
  /* 0x0059 */ char __PADDING__[7];
} MI_PAGING_IO_STATE, *PMI_PAGING_IO_STATE; /* size: 0x0060 */

typedef struct _MI_COMMON_PAGE_STATE
{
  /* 0x0000 */ struct _MMPFN* PageOfOnesPfn;
  /* 0x0004 */ unsigned long PageOfOnes;
  /* 0x0008 */ struct _MMPFN* DummyPagePfn;
  /* 0x000c */ unsigned long DummyPage;
  /* 0x0010 */ unsigned long PageOfZeroes;
  /* 0x0014 */ void* ZeroMapping;
  /* 0x0018 */ void* OnesMapping;
  /* 0x001c */ long Padding_144;
  /* 0x0020 */ unsigned __int64 ZeroCrc;
  /* 0x0028 */ unsigned __int64 OnesCrc;
  /* 0x0030 */ unsigned long BitmapGapFrames[2];
  /* 0x0038 */ unsigned long PfnGapFrames[2];
} MI_COMMON_PAGE_STATE, *PMI_COMMON_PAGE_STATE; /* size: 0x0040 */

typedef struct _MI_SYSTEM_TRIM_STATE
{
  /* 0x0000 */ unsigned long ExpansionLock;
  /* 0x0004 */ volatile long TrimInProgressCount;
  /* 0x0008 */ struct _KEVENT PeriodicWorkingSetEvent;
  /* 0x0018 */ unsigned long TrimAllPageFaultCount[3];
  /* 0x0024 */ long __PADDING__[7];
} MI_SYSTEM_TRIM_STATE, *PMI_SYSTEM_TRIM_STATE; /* size: 0x0040 */

typedef struct _MI_WRITE_CALIBRATION
{
  /* 0x0000 */ unsigned long MaximumNumberProcessors;
  /* 0x0004 */ enum _MI_WRITE_TYPES OptimalWriteType;
  /* 0x0008 */ unsigned long PerProcessorNumberOfBytes;
  /* 0x000c */ unsigned long OptimalWriteProcessors[2];
  /* 0x0014 */ struct _MI_WRITE_MODES* RawTimeStamps;
} MI_WRITE_CALIBRATION, *PMI_WRITE_CALIBRATION; /* size: 0x0018 */

typedef struct _MI_SYSTEM_ZEROING
{
  /* 0x0000 */ struct _MI_WRITE_CALIBRATION WriteCalibration;
} MI_SYSTEM_ZEROING, *PMI_SYSTEM_ZEROING; /* size: 0x0018 */

typedef struct _SYSPTES_HEADER
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead[16];
  /* 0x0080 */ unsigned long Count;
  /* 0x0084 */ unsigned long NumberOfEntries;
  /* 0x0088 */ unsigned long NumberOfEntriesPeak;
} SYSPTES_HEADER, *PSYSPTES_HEADER; /* size: 0x008c */

typedef struct _MI_VISIBLE_STATE
{
  /* 0x0000 */ struct _LIST_ENTRY SessionWsList;
  /* 0x0008 */ struct _RTL_BITMAP* SessionIdBitmap;
  /* 0x000c */ struct _MM_PAGED_POOL_INFO PagedPoolInfo;
  /* 0x0018 */ unsigned long MaximumNonPagedPoolInPages;
  /* 0x001c */ unsigned long SizeOfPagedPoolInPages;
  /* 0x0020 */ struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  /* 0x0054 */ volatile unsigned long NonPagedPoolCommit;
  /* 0x0058 */ volatile unsigned long SmallNonPagedPtesCommit;
  /* 0x005c */ volatile unsigned long BootCommit;
  /* 0x0060 */ volatile unsigned long MdlPagesAllocated;
  /* 0x0064 */ volatile unsigned long SystemPageTableCommit;
  /* 0x0068 */ volatile unsigned long ProcessCommit;
  /* 0x006c */ volatile long DriverCommit;
  /* 0x0070 */ unsigned char PagingLevels;
  /* 0x0071 */ char Padding_145[3];
  /* 0x0074 */ volatile unsigned long PfnDatabaseCommit;
  /* 0x0078 */ long Padding_146[2];
  /* 0x0080 */ struct _MMSUPPORT_FULL SystemWs[6];
  /* 0x0680 */ struct _MMSUPPORT_SHARED SystemCacheShared;
  /* 0x0700 */ unsigned long MapCacheFailures;
  /* 0x0704 */ unsigned long PagefileHashPages;
  /* 0x0708 */ struct _SYSPTES_HEADER PteHeader;
  /* 0x0794 */ unsigned long SystemVaTypeCount[16];
  /* 0x07d4 */ unsigned char SystemVaType[1024];
  /* 0x0bd4 */ unsigned long SystemVaTypeCountFailures[16];
  /* 0x0c14 */ unsigned long SystemVaTypeCountLimit[16];
  /* 0x0c54 */ unsigned long SystemVaTypeCountPeak[16];
  /* 0x0c94 */ unsigned long SystemAvailableVa;
  /* 0x0c98 */ long __PADDING__[10];
} MI_VISIBLE_STATE, *PMI_VISIBLE_STATE; /* size: 0x0cc0 */

typedef struct _MI_SYSTEM_INFORMATION
{
  /* 0x0000 */ struct _MI_POOL_STATE Pools;
  /* 0x0054 */ long Padding_147[11];
  /* 0x0080 */ struct _MI_SECTION_STATE Sections;
  /* 0x0200 */ struct _MI_SYSTEM_IMAGE_STATE SystemImages;
  /* 0x0264 */ struct _MI_SESSION_STATE Sessions;
  /* 0x129c */ long Padding_148;
  /* 0x12a0 */ struct _MI_PROCESS_STATE Processes;
  /* 0x1308 */ long Padding_149[14];
  /* 0x1340 */ struct _MI_HARDWARE_STATE Hardware;
  /* 0x1480 */ struct _MI_SYSTEM_VA_STATE SystemVa;
  /* 0x3bc0 */ struct _MI_COMBINE_STATE PageCombines;
  /* 0x3be0 */ struct _MI_PAGELIST_STATE PageLists;
  /* 0x3c2c */ long Padding_150;
  /* 0x3c30 */ struct _MI_PARTITION_STATE Partitions;
  /* 0x3c68 */ struct _MI_SHUTDOWN_STATE Shutdowns;
  /* 0x3cb0 */ struct _MI_ERROR_STATE Errors;
  /* 0x3d80 */ struct _MI_ACCESS_LOG_STATE AccessLog;
  /* 0x3e00 */ struct _MI_DEBUGGER_STATE Debugger;
  /* 0x3e90 */ struct _MI_STANDBY_STATE Standby;
  /* 0x3ed8 */ long Padding_151[10];
  /* 0x3f00 */ struct _MI_SYSTEM_PTE_STATE SystemPtes;
  /* 0x4080 */ struct _MI_IO_PAGE_STATE IoPages;
  /* 0x4100 */ struct _MI_PAGING_IO_STATE PagingIo;
  /* 0x4160 */ struct _MI_COMMON_PAGE_STATE CommonPages;
  /* 0x41a0 */ long Padding_152[8];
  /* 0x41c0 */ struct _MI_SYSTEM_TRIM_STATE Trims;
  /* 0x4200 */ struct _MI_SYSTEM_ZEROING Zeroing;
  /* 0x4218 */ struct _MI_ENCLAVE_STATE Enclaves;
  /* 0x423c */ unsigned long Cookie;
  /* 0x4240 */ void* volatile* BootRegistryRuns;
  /* 0x4244 */ volatile long ZeroingDisabled;
  /* 0x4248 */ unsigned char FullyInitialized;
  /* 0x4249 */ unsigned char SafeBooted;
  /* 0x424a */ char Padding_153[2];
  /* 0x424c */ struct _RTL_BITMAP PfnBitMap;
  /* 0x4254 */ const struct _tlgProvider_t* TraceLogging;
  /* 0x4258 */ long Padding_154[10];
  /* 0x4280 */ struct _MI_VISIBLE_STATE Vs;
} MI_SYSTEM_INFORMATION, *PMI_SYSTEM_INFORMATION; /* size: 0x4f40 */

typedef struct _TERMINATION_PORT
{
  /* 0x0000 */ struct _TERMINATION_PORT* Next;
  /* 0x0004 */ void* Port;
} TERMINATION_PORT, *PTERMINATION_PORT; /* size: 0x0008 */

typedef struct _ETW_SYSTEM_LOGGER
{
  /* 0x0000 */ unsigned char LoggerId;
  /* 0x0001 */ unsigned char ClockType;
} ETW_SYSTEM_LOGGER, *PETW_SYSTEM_LOGGER; /* size: 0x0002 */

typedef struct _PERFINFO_GROUPMASK
{
  /* 0x0000 */ unsigned long Masks[8];
} PERFINFO_GROUPMASK, *PPERFINFO_GROUPMASK; /* size: 0x0020 */

typedef struct _ETW_SYSTEM_LOGGER_SETTINGS
{
  /* 0x0000 */ struct _ETW_SYSTEM_LOGGER EtwpSystemLogger[8];
  /* 0x0010 */ volatile unsigned long EtwpActiveSystemLoggers;
  /* 0x0014 */ struct _PERFINFO_GROUPMASK SiloGlobalGroupMask;
  /* 0x0034 */ struct _PERFINFO_GROUPMASK EtwpGroupMasks[10];
} ETW_SYSTEM_LOGGER_SETTINGS, *PETW_SYSTEM_LOGGER_SETTINGS; /* size: 0x0174 */

typedef struct _QUAD
{
  union
  {
    /* 0x0000 */ __int64 UseThisFieldToCopy;
    /* 0x0000 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
} QUAD, *PQUAD; /* size: 0x0008 */

typedef struct _DEVICE_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x000c */ struct _DEVICE_OBJECT* NextDevice;
  /* 0x0010 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0014 */ struct _IRP* CurrentIrp;
  /* 0x0018 */ struct _IO_TIMER* Timer;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ unsigned long Characteristics;
  /* 0x0024 */ struct _VPB* Vpb;
  /* 0x0028 */ void* DeviceExtension;
  /* 0x002c */ unsigned long DeviceType;
  /* 0x0030 */ char StackSize;
  /* 0x0031 */ char Padding_155[3];
  union
  {
    union
    {
      /* 0x0034 */ struct _LIST_ENTRY ListEntry;
      /* 0x0034 */ struct _WAIT_CONTEXT_BLOCK Wcb;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ Queue;
  /* 0x005c */ unsigned long AlignmentRequirement;
  /* 0x0060 */ struct _KDEVICE_QUEUE DeviceQueue;
  /* 0x0074 */ struct _KDPC Dpc;
  /* 0x0094 */ unsigned long ActiveThreadCount;
  /* 0x0098 */ void* SecurityDescriptor;
  /* 0x009c */ struct _KEVENT DeviceLock;
  /* 0x00ac */ unsigned short SectorSize;
  /* 0x00ae */ unsigned short Spare1;
  /* 0x00b0 */ struct _DEVOBJ_EXTENSION* DeviceObjectExtension;
  /* 0x00b4 */ void* Reserved;
} DEVICE_OBJECT, *PDEVICE_OBJECT; /* size: 0x00b8 */

typedef struct _DRIVER_OBJECT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ void* DriverStart;
  /* 0x0010 */ unsigned long DriverSize;
  /* 0x0014 */ void* DriverSection;
  /* 0x0018 */ struct _DRIVER_EXTENSION* DriverExtension;
  /* 0x001c */ struct _UNICODE_STRING DriverName;
  /* 0x0024 */ struct _UNICODE_STRING* HardwareDatabase;
  /* 0x0028 */ struct _FAST_IO_DISPATCH* FastIoDispatch;
  /* 0x002c */ void* DriverInit /* function */;
  /* 0x0030 */ void* DriverStartIo /* function */;
  /* 0x0034 */ void* DriverUnload /* function */;
  /* 0x0038 */ void* MajorFunction[28] /* function */;
} DRIVER_OBJECT, *PDRIVER_OBJECT; /* size: 0x00a8 */

typedef struct _DRIVER_EXTENSION
{
  /* 0x0000 */ struct _DRIVER_OBJECT* DriverObject;
  /* 0x0004 */ void* AddDevice /* function */;
  /* 0x0008 */ unsigned long Count;
  /* 0x000c */ struct _UNICODE_STRING ServiceKeyName;
  /* 0x0014 */ struct _IO_CLIENT_EXTENSION* ClientDriverExtension;
  /* 0x0018 */ struct _FS_FILTER_CALLBACKS* FsFilterCallbacks;
  /* 0x001c */ void* KseCallbacks;
  /* 0x0020 */ void* DvCallbacks;
  /* 0x0024 */ void* VerifierContext;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION; /* size: 0x0028 */

typedef struct _TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ struct _LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES; /* size: 0x0010 */

typedef struct _IO_CLIENT_EXTENSION
{
  /* 0x0000 */ struct _IO_CLIENT_EXTENSION* NextExtension;
  /* 0x0004 */ void* ClientIdentificationAddress;
} IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION; /* size: 0x0008 */

typedef struct _FS_FILTER_CALLBACKS
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbacks;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* PreAcquireForSectionSynchronization /* function */;
  /* 0x000c */ void* PostAcquireForSectionSynchronization /* function */;
  /* 0x0010 */ void* PreReleaseForSectionSynchronization /* function */;
  /* 0x0014 */ void* PostReleaseForSectionSynchronization /* function */;
  /* 0x0018 */ void* PreAcquireForCcFlush /* function */;
  /* 0x001c */ void* PostAcquireForCcFlush /* function */;
  /* 0x0020 */ void* PreReleaseForCcFlush /* function */;
  /* 0x0024 */ void* PostReleaseForCcFlush /* function */;
  /* 0x0028 */ void* PreAcquireForModifiedPageWriter /* function */;
  /* 0x002c */ void* PostAcquireForModifiedPageWriter /* function */;
  /* 0x0030 */ void* PreReleaseForModifiedPageWriter /* function */;
  /* 0x0034 */ void* PostReleaseForModifiedPageWriter /* function */;
  /* 0x0038 */ void* PreQueryOpen /* function */;
  /* 0x003c */ void* PostQueryOpen /* function */;
} FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS; /* size: 0x0040 */

struct _ETW_STACK_CACHE;

typedef struct _FS_FILTER_CALLBACK_DATA
{
  /* 0x0000 */ unsigned long SizeOfFsFilterCallbackData;
  /* 0x0004 */ unsigned char Operation;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ char Padding_156[2];
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ struct _FILE_OBJECT* FileObject;
  /* 0x0010 */ union _FS_FILTER_PARAMETERS Parameters;
} FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA; /* size: 0x0024 */

typedef struct _ETW_FILTER_STRING_TOKEN
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ char Padding_157[2];
  /* 0x0004 */ struct _ETW_FILTER_STRING_TOKEN_ELEMENT Tokens[1];
} ETW_FILTER_STRING_TOKEN, *PETW_FILTER_STRING_TOKEN; /* size: 0x000c */

typedef struct _VPB
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short VolumeLabelLength;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ struct _DEVICE_OBJECT* RealDevice;
  /* 0x0010 */ unsigned long SerialNumber;
  /* 0x0014 */ unsigned long ReferenceCount;
  /* 0x0018 */ wchar_t VolumeLabel[32];
} VPB, *PVPB; /* size: 0x0058 */

typedef struct _DIRTY_PAGE_STATISTICS
{
  /* 0x0000 */ unsigned long DirtyPages;
  /* 0x0004 */ unsigned long DirtyPagesLastScan;
  /* 0x0008 */ unsigned long DirtyPagesScheduledLastScan;
} DIRTY_PAGE_STATISTICS, *PDIRTY_PAGE_STATISTICS; /* size: 0x000c */

typedef struct _CC_EXTERNAL_CACHE_INFO
{
  /* 0x0000 */ void* Callback /* function */;
  /* 0x0004 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0010 */ struct _LIST_ENTRY Links;
} CC_EXTERNAL_CACHE_INFO, *PCC_EXTERNAL_CACHE_INFO; /* size: 0x0018 */

typedef struct _PO_POWER_PLANE_PROFILE
{
  /* 0x0000 */ unsigned long ExclusivePowerMw;
  /* 0x0004 */ unsigned long PeakPowerMw;
} PO_POWER_PLANE_PROFILE, *PPO_POWER_PLANE_PROFILE; /* size: 0x0008 */

typedef struct _POP_DEVICE_POWER_PROFILE
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceId;
  /* 0x0008 */ struct _POP_POWER_PLANE* PowerPlane;
  /* 0x000c */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x0010 */ long PowerDrawMw;
  /* 0x0014 */ struct _PO_POWER_PLANE_PROFILE DxPower[4];
  /* 0x0034 */ unsigned long ComponentCount;
  /* 0x0038 */ struct _POP_COMPONENT_POWER_PROFILE** Components;
} POP_DEVICE_POWER_PROFILE, *PPOP_DEVICE_POWER_PROFILE; /* size: 0x003c */

typedef struct _SECTION_OBJECT_POINTERS
{
  /* 0x0000 */ void* DataSectionObject;
  /* 0x0004 */ void* SharedCacheMap;
  /* 0x0008 */ void* ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS; /* size: 0x000c */

typedef struct _IO_COMPLETION_CONTEXT
{
  /* 0x0000 */ void* Port;
  /* 0x0004 */ void* Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT; /* size: 0x0008 */

typedef struct _OWNER_ENTRY
{
  /* 0x0000 */ unsigned long OwnerThread;
  union
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long IoPriorityBoosted : 1; /* bit position: 0 */
      /* 0x0004 */ unsigned long OwnerReferenced : 1; /* bit position: 1 */
      /* 0x0004 */ unsigned long IoQoSPriorityBoosted : 1; /* bit position: 2 */
      /* 0x0004 */ unsigned long OwnerCount : 29; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0004 */ unsigned long TableSize;
  }; /* size: 0x0004 */
} OWNER_ENTRY, *POWNER_ENTRY; /* size: 0x0008 */

typedef struct _ERESOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY SystemResourcesList;
  /* 0x0008 */ struct _OWNER_ENTRY* OwnerTable;
  /* 0x000c */ short ActiveCount;
  union
  {
    /* 0x000e */ unsigned short Flag;
    struct
    {
      /* 0x000e */ unsigned char ReservedLowFlags;
      /* 0x000f */ unsigned char WaiterPriority;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0010 */ void* SharedWaiters;
  /* 0x0014 */ void* ExclusiveWaiters;
  /* 0x0018 */ struct _OWNER_ENTRY OwnerEntry;
  /* 0x0020 */ unsigned long ActiveEntries;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long NumberOfSharedWaiters;
  /* 0x002c */ unsigned long NumberOfExclusiveWaiters;
  union
  {
    /* 0x0030 */ void* Address;
    /* 0x0030 */ unsigned long CreatorBackTraceIndex;
  }; /* size: 0x0004 */
  /* 0x0034 */ unsigned long SpinLock;
} ERESOURCE, *PERESOURCE; /* size: 0x0038 */

typedef struct _HAL_IOMMU_DISPATCH
{
  /* 0x0000 */ void* HalIommuSupportEnabled /* function */;
  /* 0x0004 */ void* HalIommuGetConfiguration /* function */;
  /* 0x0008 */ void* HalIommuGetLibraryContext /* function */;
  /* 0x000c */ void* HalIommuMapDevice /* function */;
  /* 0x0010 */ void* HalIommuEnableDevicePasid /* function */;
  /* 0x0014 */ void* HalIommuSetAddressSpace /* function */;
  /* 0x0018 */ void* HalIommuDisableDevicePasid /* function */;
  /* 0x001c */ void* HalIommuUnmapDevice /* function */;
  /* 0x0020 */ void* HalIommuFreeLibraryContext /* function */;
  /* 0x0024 */ void* HalIommuFlushTb /* function */;
  /* 0x0028 */ void* HalIommuFlushAllPasid /* function */;
  /* 0x002c */ void* HalIommuProcessPageRequestQueue /* function */;
  /* 0x0030 */ void* HalIommuFaultRoutine /* function */;
  /* 0x0034 */ void* HalIommuReferenceAsid /* function */;
  /* 0x0038 */ void* HalIommuDereferenceAsid /* function */;
  /* 0x003c */ void* HalIommuServicePageFault /* function */;
  /* 0x0040 */ void* HalIommuDevicePowerChange /* function */;
  /* 0x0044 */ void* HalIommuBeginDeviceReset /* function */;
  /* 0x0048 */ void* HalIommuFinalizeDeviceReset /* function */;
} HAL_IOMMU_DISPATCH, *PHAL_IOMMU_DISPATCH; /* size: 0x004c */

typedef struct _PERIODIC_CAPTURE_STATE_GUIDS
{
  /* 0x0000 */ unsigned short ProviderCount;
  /* 0x0002 */ char Padding_158[2];
  /* 0x0004 */ struct _GUID* Providers;
} PERIODIC_CAPTURE_STATE_GUIDS, *PPERIODIC_CAPTURE_STATE_GUIDS; /* size: 0x0008 */

typedef struct _FAKE_HEAP_ENTRY
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long PreviousSize;
} FAKE_HEAP_ENTRY, *PFAKE_HEAP_ENTRY; /* size: 0x0008 */

typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT
{
  /* 0x0000 */ unsigned long StructureSize;
  /* 0x0004 */ unsigned long SizeReturned;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DesiredReadAlignment;
} FS_FILTER_SECTION_SYNC_OUTPUT, *PFS_FILTER_SECTION_SYNC_OUTPUT; /* size: 0x0010 */

typedef struct _RTL_CSPARSE_BITMAP
{
  /* 0x0000 */ unsigned long* CommitBitmap;
  /* 0x0004 */ unsigned long* UserBitmap;
  /* 0x0008 */ unsigned long BitCount;
  /* 0x000c */ unsigned long BitmapLock;
  /* 0x0010 */ unsigned long DecommitPageIndex;
  /* 0x0014 */ unsigned long RtlpCSparseBitmapWakeLock;
  /* 0x0018 */ unsigned char LockType;
  /* 0x0019 */ unsigned char AddressSpace;
  /* 0x001a */ unsigned char MemType;
  /* 0x001b */ unsigned char AllocAlignment;
  /* 0x001c */ unsigned long CommitDirectoryMaxSize;
  /* 0x0020 */ unsigned long CommitDirectory[1];
} RTL_CSPARSE_BITMAP, *PRTL_CSPARSE_BITMAP; /* size: 0x0024 */

typedef struct _RTL_SPARSE_ARRAY
{
  /* 0x0000 */ unsigned long ElementCount;
  /* 0x0004 */ unsigned long ElementSizeShift;
  /* 0x0008 */ struct _RTL_CSPARSE_BITMAP Bitmap;
} RTL_SPARSE_ARRAY, *PRTL_SPARSE_ARRAY; /* size: 0x002c */

typedef struct _HEAP_VAMGR_VASPACE
{
  /* 0x0000 */ enum _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType;
  /* 0x0004 */ unsigned long BaseAddress;
  union
  {
    /* 0x0008 */ struct _RTL_SPARSE_ARRAY VaRangeArray;
    /* 0x0008 */ unsigned char VaRangeArrayBuffer[44];
  }; /* size: 0x002c */
} HEAP_VAMGR_VASPACE, *PHEAP_VAMGR_VASPACE; /* size: 0x0034 */

typedef struct _PLUGPLAY_EVENT_BLOCK
{
  /* 0x0000 */ struct _GUID EventGuid;
  /* 0x0010 */ enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
  /* 0x0014 */ unsigned long* Result;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long TotalSize;
  /* 0x0020 */ void* DeviceObject;
  union
  {
    union
    {
      struct
      {
        /* 0x0024 */ struct _GUID ClassGuid;
        /* 0x0034 */ wchar_t SymbolicLinkName[1];
        /* 0x0036 */ char __PADDING__[2];
      } /* size: 0x0014 */ DeviceClass;
      struct
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ TargetDevice;
      struct
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ InstallDevice;
      struct
      {
        /* 0x0024 */ void* NotificationStructure;
        /* 0x0028 */ wchar_t DeviceId[1];
        /* 0x002a */ char __PADDING__[2];
      } /* size: 0x0008 */ CustomNotification;
      struct
      {
        /* 0x0024 */ void* Notification;
      } /* size: 0x0004 */ ProfileNotification;
      struct
      {
        /* 0x0024 */ unsigned long NotificationCode;
        /* 0x0028 */ unsigned long NotificationData;
      } /* size: 0x0008 */ PowerNotification;
      struct
      {
        /* 0x0024 */ enum _PNP_VETO_TYPE VetoType;
        /* 0x0028 */ wchar_t DeviceIdVetoNameBuffer[1];
        /* 0x002a */ char __PADDING__[2];
      } /* size: 0x0008 */ VetoNotification;
      struct
      {
        /* 0x0024 */ struct _GUID BlockedDriverGuid;
      } /* size: 0x0010 */ BlockedDriverNotification;
      struct
      {
        /* 0x0024 */ wchar_t ParentId[1];
      } /* size: 0x0002 */ InvalidIDNotification;
      struct
      {
        /* 0x0024 */ struct _GUID PowerSettingGuid;
        /* 0x0034 */ unsigned long Flags;
        /* 0x0038 */ unsigned long SessionId;
        /* 0x003c */ unsigned long DataLength;
        /* 0x0040 */ unsigned char Data[1];
        /* 0x0041 */ char __PADDING__[3];
      } /* size: 0x0020 */ PowerSettingNotification;
      struct
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ PropertyChangeNotification;
      struct
      {
        /* 0x0024 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ DeviceInstanceNotification;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ u;
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK; /* size: 0x0044 */

typedef struct _PNP_DEVICE_EVENT_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long Argument;
  /* 0x000c */ long ArgumentStatus;
  /* 0x0010 */ struct _KEVENT* CallerEvent;
  /* 0x0014 */ void* Callback /* function */;
  /* 0x0018 */ void* Context;
  /* 0x001c */ enum _PNP_VETO_TYPE* VetoType;
  /* 0x0020 */ struct _UNICODE_STRING* VetoName;
  /* 0x0024 */ unsigned long RefCount;
  /* 0x0028 */ unsigned long Lock;
  /* 0x002c */ unsigned char Cancel;
  /* 0x002d */ char Padding_159[3];
  /* 0x0030 */ struct _PNP_DEVICE_EVENT_ENTRY* Parent;
  /* 0x0034 */ struct _GUID ActivityId;
  /* 0x0044 */ struct _PNP_WATCHDOG* Watchdog;
  /* 0x0048 */ struct _PLUGPLAY_EVENT_BLOCK Data;
} PNP_DEVICE_EVENT_ENTRY, *PPNP_DEVICE_EVENT_ENTRY; /* size: 0x008c */

typedef struct _SEGMENT_HEAP_EXTRA
{
  /* 0x0000 */ unsigned short AllocationTag;
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned char InterceptorIndex : 4; /* bit position: 0 */
    /* 0x0002 */ unsigned char UserFlags : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0003 */ unsigned char ExtraSizeInUnits;
  /* 0x0004 */ void* Settable;
} SEGMENT_HEAP_EXTRA, *PSEGMENT_HEAP_EXTRA; /* size: 0x0008 */

typedef struct _RTL_HEAP_MEMORY_LIMIT_DATA
{
  /* 0x0000 */ unsigned long CommitLimitBytes;
  /* 0x0004 */ unsigned long CommitLimitFailureCode;
  /* 0x0008 */ unsigned long MaxAllocationSizeBytes;
  /* 0x000c */ unsigned long AllocationLimitFailureCode;
} RTL_HEAP_MEMORY_LIMIT_DATA, *PRTL_HEAP_MEMORY_LIMIT_DATA; /* size: 0x0010 */

typedef struct _RTLP_HP_HEAP_GLOBALS
{
  /* 0x0000 */ unsigned long HeapKey;
  /* 0x0004 */ unsigned long LfhKey;
  /* 0x0008 */ struct _HEAP_FAILURE_INFORMATION* FailureInfo;
  /* 0x000c */ struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;
  union
  {
    /* 0x001c */ unsigned long Flags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x001c */ unsigned long ErmsSupported : 1; /* bit position: 0 */
        /* 0x001c */ unsigned long ErmsChecked : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ FlagsBits;
  }; /* size: 0x0004 */
  /* 0x0020 */ long __PADDING__[8];
} RTLP_HP_HEAP_GLOBALS, *PRTLP_HP_HEAP_GLOBALS; /* size: 0x0040 */

typedef struct _ETW_PARTITION_CONTEXT
{
  /* 0x0000 */ struct _EPARTITION* Partition;
} ETW_PARTITION_CONTEXT, *PETW_PARTITION_CONTEXT; /* size: 0x0004 */

typedef struct _EXT_SET_PARAMETERS_V0
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ __int64 NoWakeTolerance;
} EXT_SET_PARAMETERS_V0, *PEXT_SET_PARAMETERS_V0; /* size: 0x0010 */

typedef struct _FAST_IO_DISPATCH
{
  /* 0x0000 */ unsigned long SizeOfFastIoDispatch;
  /* 0x0004 */ void* FastIoCheckIfPossible /* function */;
  /* 0x0008 */ void* FastIoRead /* function */;
  /* 0x000c */ void* FastIoWrite /* function */;
  /* 0x0010 */ void* FastIoQueryBasicInfo /* function */;
  /* 0x0014 */ void* FastIoQueryStandardInfo /* function */;
  /* 0x0018 */ void* FastIoLock /* function */;
  /* 0x001c */ void* FastIoUnlockSingle /* function */;
  /* 0x0020 */ void* FastIoUnlockAll /* function */;
  /* 0x0024 */ void* FastIoUnlockAllByKey /* function */;
  /* 0x0028 */ void* FastIoDeviceControl /* function */;
  /* 0x002c */ void* AcquireFileForNtCreateSection /* function */;
  /* 0x0030 */ void* ReleaseFileForNtCreateSection /* function */;
  /* 0x0034 */ void* FastIoDetachDevice /* function */;
  /* 0x0038 */ void* FastIoQueryNetworkOpenInfo /* function */;
  /* 0x003c */ void* AcquireForModWrite /* function */;
  /* 0x0040 */ void* MdlRead /* function */;
  /* 0x0044 */ void* MdlReadComplete /* function */;
  /* 0x0048 */ void* PrepareMdlWrite /* function */;
  /* 0x004c */ void* MdlWriteComplete /* function */;
  /* 0x0050 */ void* FastIoReadCompressed /* function */;
  /* 0x0054 */ void* FastIoWriteCompressed /* function */;
  /* 0x0058 */ void* MdlReadCompleteCompressed /* function */;
  /* 0x005c */ void* MdlWriteCompleteCompressed /* function */;
  /* 0x0060 */ void* FastIoQueryOpen /* function */;
  /* 0x0064 */ void* ReleaseForModWrite /* function */;
  /* 0x0068 */ void* AcquireForCcFlush /* function */;
  /* 0x006c */ void* ReleaseForCcFlush /* function */;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH; /* size: 0x0070 */

typedef struct _KTB_FLUSH_VA
{
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long NumberOfEntries : 10; /* bit position: 0 */
        /* 0x0000 */ unsigned long PageSize : 2; /* bit position: 10 */
      }; /* bitfield */
      /* 0x0000 */ void* Va;
      /* 0x0000 */ unsigned long VaLong;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} KTB_FLUSH_VA, *PKTB_FLUSH_VA; /* size: 0x0004 */

typedef struct _DBGK_SILOSTATE
{
  /* 0x0000 */ struct _EX_PUSH_LOCK ErrorPortLock;
  /* 0x0004 */ struct _DBGKP_ERROR_PORT* ErrorPort;
  /* 0x0008 */ struct _EPROCESS* ErrorProcess;
  /* 0x000c */ struct _KEVENT* ErrorPortRegisteredEvent;
} DBGK_SILOSTATE, *PDBGK_SILOSTATE; /* size: 0x0010 */

typedef struct _HAL_LBR_ENTRY
{
  /* 0x0000 */ void* FromAddress;
  /* 0x0004 */ void* ToAddress;
  /* 0x0008 */ void* Reserved;
} HAL_LBR_ENTRY, *PHAL_LBR_ENTRY; /* size: 0x000c */

typedef struct _OBJECT_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long HandleAttributes;
  /* 0x0004 */ unsigned long GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION; /* size: 0x0008 */

typedef struct _ETW_LBR_SUPPORT
{
  /* 0x0000 */ unsigned long LbrHandle;
  /* 0x0004 */ unsigned long LbrOptions;
  /* 0x0008 */ volatile unsigned long HookIdCount;
  /* 0x000c */ unsigned short HookId[4];
} ETW_LBR_SUPPORT, *PETW_LBR_SUPPORT; /* size: 0x0014 */

struct _PAGEFAULT_HISTORY;

struct _JOB_ACCESS_STATE;

typedef struct _PEP_WORK_POWER_CONTROL
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ const struct _GUID* PowerControlCode;
  /* 0x0008 */ void* RequestContext;
  /* 0x000c */ void* InBuffer;
  /* 0x0010 */ unsigned long InBufferSize;
  /* 0x0014 */ void* OutBuffer;
  /* 0x0018 */ unsigned long OutBufferSize;
} PEP_WORK_POWER_CONTROL, *PPEP_WORK_POWER_CONTROL; /* size: 0x001c */

typedef struct _PEP_WORK_IDLE_STATE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned long Component;
  /* 0x0008 */ unsigned long State;
} PEP_WORK_IDLE_STATE, *PPEP_WORK_IDLE_STATE; /* size: 0x000c */

typedef struct _PEBS_DS_SAVE_AREA32
{
  /* 0x0000 */ unsigned long BtsBufferBase;
  /* 0x0004 */ unsigned long BtsIndex;
  /* 0x0008 */ unsigned long BtsAbsoluteMaximum;
  /* 0x000c */ unsigned long BtsInterruptThreshold;
  /* 0x0010 */ unsigned long PebsBufferBase;
  /* 0x0014 */ unsigned long PebsIndex;
  /* 0x0018 */ unsigned long PebsAbsoluteMaximum;
  /* 0x001c */ unsigned long PebsInterruptThreshold;
  /* 0x0020 */ unsigned __int64 PebsGpCounterReset[8];
  /* 0x0060 */ unsigned __int64 PebsFixedCounterReset[4];
} PEBS_DS_SAVE_AREA32, *PPEBS_DS_SAVE_AREA32; /* size: 0x0080 */

typedef struct _PEBS_DS_SAVE_AREA64
{
  /* 0x0000 */ unsigned __int64 BtsBufferBase;
  /* 0x0008 */ unsigned __int64 BtsIndex;
  /* 0x0010 */ unsigned __int64 BtsAbsoluteMaximum;
  /* 0x0018 */ unsigned __int64 BtsInterruptThreshold;
  /* 0x0020 */ unsigned __int64 PebsBufferBase;
  /* 0x0028 */ unsigned __int64 PebsIndex;
  /* 0x0030 */ unsigned __int64 PebsAbsoluteMaximum;
  /* 0x0038 */ unsigned __int64 PebsInterruptThreshold;
  /* 0x0040 */ unsigned __int64 PebsGpCounterReset[8];
  /* 0x0080 */ unsigned __int64 PebsFixedCounterReset[4];
} PEBS_DS_SAVE_AREA64, *PPEBS_DS_SAVE_AREA64; /* size: 0x00a0 */

typedef struct _PEBS_DS_SAVE_AREA
{
  union
  {
    /* 0x0000 */ struct _PEBS_DS_SAVE_AREA32 As32Bit;
    /* 0x0000 */ struct _PEBS_DS_SAVE_AREA64 As64Bit;
  }; /* size: 0x00a0 */
} PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA; /* size: 0x00a0 */

typedef struct _ETW_REF_CLOCK
{
  /* 0x0000 */ union _LARGE_INTEGER StartTime;
  /* 0x0008 */ union _LARGE_INTEGER StartPerfClock;
} ETW_REF_CLOCK, *PETW_REF_CLOCK; /* size: 0x0010 */

typedef struct _KMUTANT
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  /* 0x0010 */ struct _LIST_ENTRY MutantListEntry;
  /* 0x0018 */ struct _KTHREAD* OwnerThread;
  union
  {
    /* 0x001c */ unsigned char MutantFlags;
    struct /* bitfield */
    {
      /* 0x001c */ unsigned char Abandoned : 1; /* bit position: 0 */
      /* 0x001c */ unsigned char Spare1 : 7; /* bit position: 1 */
    }; /* bitfield */
    struct /* bitfield */
    {
      /* 0x001c */ unsigned char Abandoned2 : 1; /* bit position: 0 */
      /* 0x001c */ unsigned char AbEnabled : 1; /* bit position: 1 */
      /* 0x001c */ unsigned char Spare2 : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x001d */ unsigned char ApcDisable;
  /* 0x001e */ char __PADDING__[2];
} KMUTANT, *PKMUTANT; /* size: 0x0020 */

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ unsigned char ContextTrackingMode;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; /* size: 0x000c */

typedef struct _TOKEN_CONTROL
{
  /* 0x0000 */ struct _LUID TokenId;
  /* 0x0008 */ struct _LUID AuthenticationId;
  /* 0x0010 */ struct _LUID ModifiedId;
  /* 0x0018 */ struct _TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL; /* size: 0x0028 */

typedef struct _SECURITY_CLIENT_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x000c */ void* ClientToken;
  /* 0x0010 */ unsigned char DirectlyAccessClientToken;
  /* 0x0011 */ unsigned char DirectAccessEffectiveOnly;
  /* 0x0012 */ unsigned char ServerIsRemote;
  /* 0x0013 */ char Padding_160;
  /* 0x0014 */ struct _TOKEN_CONTROL ClientTokenControl;
} SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT; /* size: 0x003c */

typedef struct _ETW_STACK_TRACE_BLOCK
{
  /* 0x0000 */ union _LARGE_INTEGER RelatedTimestamp;
  /* 0x0008 */ struct _ETHREAD* Thread;
  /* 0x000c */ struct _KDPC StackWalkDpc;
  /* 0x002c */ long Padding_161;
  /* 0x0030 */ union _SLIST_HEADER ApcListHead;
  /* 0x0038 */ struct _ETW_APC_ENTRY* ApcEntry;
  /* 0x003c */ unsigned long ApcEntryCount;
  /* 0x0040 */ long Flags;
  /* 0x0044 */ long ApcCount;
  /* 0x0048 */ long MaxApcCount;
  /* 0x004c */ long __PADDING__[1];
} ETW_STACK_TRACE_BLOCK, *PETW_STACK_TRACE_BLOCK; /* size: 0x0050 */

typedef struct _DISALLOWED_GUIDS
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ char Padding_162[2];
  /* 0x0004 */ struct _GUID* Guids;
} DISALLOWED_GUIDS, *PDISALLOWED_GUIDS; /* size: 0x0008 */

typedef struct _WMI_LOGGER_CONTEXT
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long BufferSize;
  /* 0x0008 */ unsigned long MaximumEventSize;
  /* 0x000c */ unsigned long LoggerMode;
  /* 0x0010 */ long AcceptNewEvents;
  /* 0x0014 */ unsigned long EventMarker[1];
  /* 0x0018 */ unsigned long ErrorMarker;
  /* 0x001c */ unsigned long SizeMask;
  /* 0x0020 */ unsigned long GetCpuClock;
  /* 0x0024 */ struct _ETHREAD* LoggerThread;
  /* 0x0028 */ long LoggerStatus;
  /* 0x002c */ unsigned long FailureReason;
  /* 0x0030 */ struct _ETW_BUFFER_QUEUE BufferQueue;
  /* 0x0038 */ struct _ETW_BUFFER_QUEUE OverflowQueue;
  /* 0x0040 */ struct _LIST_ENTRY GlobalList;
  /* 0x0048 */ struct _LIST_ENTRY DebugIdTrackingList;
  /* 0x0050 */ struct _ETW_DECODE_CONTROL_ENTRY* DecodeControlList;
  /* 0x0054 */ unsigned long DecodeControlCount;
  union
  {
    /* 0x0058 */ struct _WMI_BUFFER_HEADER* BatchedBufferList;
    /* 0x0058 */ struct _EX_FAST_REF CurrentBuffer;
  }; /* size: 0x0004 */
  /* 0x005c */ struct _UNICODE_STRING LoggerName;
  /* 0x0064 */ struct _UNICODE_STRING LogFileName;
  /* 0x006c */ struct _UNICODE_STRING LogFilePattern;
  /* 0x0074 */ struct _UNICODE_STRING NewLogFileName;
  /* 0x007c */ unsigned long ClockType;
  /* 0x0080 */ unsigned long LastFlushedBuffer;
  /* 0x0084 */ unsigned long FlushTimer;
  /* 0x0088 */ unsigned long FlushThreshold;
  /* 0x008c */ long Padding_163;
  /* 0x0090 */ union _LARGE_INTEGER ByteOffset;
  /* 0x0098 */ unsigned long MinimumBuffers;
  /* 0x009c */ volatile long BuffersAvailable;
  /* 0x00a0 */ volatile long NumberOfBuffers;
  /* 0x00a4 */ unsigned long MaximumBuffers;
  /* 0x00a8 */ volatile unsigned long EventsLost;
  /* 0x00ac */ volatile long PeakBuffersCount;
  /* 0x00b0 */ unsigned long BuffersWritten;
  /* 0x00b4 */ unsigned long LogBuffersLost;
  /* 0x00b8 */ unsigned long RealTimeBuffersDelivered;
  /* 0x00bc */ unsigned long RealTimeBuffersLost;
  /* 0x00c0 */ long* SequencePtr;
  /* 0x00c4 */ unsigned long LocalSequence;
  /* 0x00c8 */ struct _GUID InstanceGuid;
  /* 0x00d8 */ unsigned long MaximumFileSize;
  /* 0x00dc */ long FileCounter;
  /* 0x00e0 */ enum _POOL_TYPE PoolType;
  /* 0x00e4 */ long Padding_164;
  /* 0x00e8 */ struct _ETW_REF_CLOCK ReferenceTime;
  /* 0x00f8 */ long CollectionOn;
  /* 0x00fc */ unsigned long ProviderInfoSize;
  /* 0x0100 */ struct _LIST_ENTRY Consumers;
  /* 0x0108 */ unsigned long NumConsumers;
  /* 0x010c */ struct _ETW_REALTIME_CONSUMER* TransitionConsumer;
  /* 0x0110 */ void* RealtimeLogfileHandle;
  /* 0x0114 */ struct _UNICODE_STRING RealtimeLogfileName;
  /* 0x011c */ long Padding_165;
  /* 0x0120 */ union _LARGE_INTEGER RealtimeWriteOffset;
  /* 0x0128 */ union _LARGE_INTEGER RealtimeReadOffset;
  /* 0x0130 */ union _LARGE_INTEGER RealtimeLogfileSize;
  /* 0x0138 */ unsigned __int64 RealtimeLogfileUsage;
  /* 0x0140 */ unsigned __int64 RealtimeMaximumFileSize;
  /* 0x0148 */ unsigned long RealtimeBuffersSaved;
  /* 0x014c */ long Padding_166;
  /* 0x0150 */ struct _ETW_REF_CLOCK RealtimeReferenceTime;
  /* 0x0160 */ enum _ETW_RT_EVENT_LOSS NewRTEventsLost;
  /* 0x0164 */ struct _KEVENT LoggerEvent;
  /* 0x0174 */ struct _KEVENT FlushEvent;
  /* 0x0184 */ long Padding_167;
  /* 0x0188 */ struct _KTIMER FlushTimeOutTimer;
  /* 0x01b0 */ struct _KDPC LoggerDpc;
  /* 0x01d0 */ struct _KMUTANT LoggerMutex;
  /* 0x01f0 */ struct _EX_PUSH_LOCK LoggerLock;
  union
  {
    /* 0x01f4 */ unsigned long BufferListSpinLock;
    /* 0x01f4 */ struct _EX_PUSH_LOCK BufferListPushLock;
  }; /* size: 0x0004 */
  /* 0x01f8 */ struct _SECURITY_CLIENT_CONTEXT ClientSecurityContext;
  /* 0x0234 */ struct _TOKEN_ACCESS_INFORMATION* TokenAccessInformation;
  /* 0x0238 */ struct _EX_FAST_REF SecurityDescriptor;
  /* 0x023c */ long Padding_168;
  /* 0x0240 */ union _LARGE_INTEGER StartTime;
  /* 0x0248 */ void* LogFileHandle;
  /* 0x024c */ long Padding_169;
  /* 0x0250 */ __int64 BufferSequenceNumber;
  union
  {
    /* 0x0258 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0258 */ unsigned long Persistent : 1; /* bit position: 0 */
      /* 0x0258 */ unsigned long AutoLogger : 1; /* bit position: 1 */
      /* 0x0258 */ unsigned long FsReady : 1; /* bit position: 2 */
      /* 0x0258 */ unsigned long RealTime : 1; /* bit position: 3 */
      /* 0x0258 */ unsigned long Wow : 1; /* bit position: 4 */
      /* 0x0258 */ unsigned long KernelTrace : 1; /* bit position: 5 */
      /* 0x0258 */ unsigned long NoMoreEnable : 1; /* bit position: 6 */
      /* 0x0258 */ unsigned long StackTracing : 1; /* bit position: 7 */
      /* 0x0258 */ unsigned long ErrorLogged : 1; /* bit position: 8 */
      /* 0x0258 */ unsigned long RealtimeLoggerContextFreed : 1; /* bit position: 9 */
      /* 0x0258 */ unsigned long PebsTracing : 1; /* bit position: 10 */
      /* 0x0258 */ unsigned long PmcCounters : 1; /* bit position: 11 */
      /* 0x0258 */ unsigned long PageAlignBuffers : 1; /* bit position: 12 */
      /* 0x0258 */ unsigned long StackLookasideListAllocated : 1; /* bit position: 13 */
      /* 0x0258 */ unsigned long SecurityTrace : 1; /* bit position: 14 */
      /* 0x0258 */ unsigned long LastBranchTracing : 1; /* bit position: 15 */
      /* 0x0258 */ unsigned long SystemLoggerIndex : 8; /* bit position: 16 */
      /* 0x0258 */ unsigned long StackCaching : 1; /* bit position: 24 */
      /* 0x0258 */ unsigned long ProviderTracking : 1; /* bit position: 25 */
      /* 0x0258 */ unsigned long ProcessorTrace : 1; /* bit position: 26 */
      /* 0x0258 */ unsigned long QpcDeltaTracking : 1; /* bit position: 27 */
      /* 0x0258 */ unsigned long MarkerBufferSaved : 1; /* bit position: 28 */
      /* 0x0258 */ unsigned long LargeMdlPages : 1; /* bit position: 29 */
      /* 0x0258 */ unsigned long ExcludeKernelStack : 1; /* bit position: 30 */
      /* 0x0258 */ unsigned long BootLogger : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x025c */ volatile unsigned long RequestFlag;
    struct /* bitfield */
    {
      /* 0x025c */ unsigned long DbgRequestNewFile : 1; /* bit position: 0 */
      /* 0x025c */ unsigned long DbgRequestUpdateFile : 1; /* bit position: 1 */
      /* 0x025c */ unsigned long DbgRequestFlush : 1; /* bit position: 2 */
      /* 0x025c */ unsigned long DbgRequestDisableRealtime : 1; /* bit position: 3 */
      /* 0x025c */ unsigned long DbgRequestDisconnectConsumer : 1; /* bit position: 4 */
      /* 0x025c */ unsigned long DbgRequestConnectConsumer : 1; /* bit position: 5 */
      /* 0x025c */ unsigned long DbgRequestNotifyConsumer : 1; /* bit position: 6 */
      /* 0x025c */ unsigned long DbgRequestUpdateHeader : 1; /* bit position: 7 */
      /* 0x025c */ unsigned long DbgRequestDeferredFlush : 1; /* bit position: 8 */
      /* 0x025c */ unsigned long DbgRequestDeferredFlushTimer : 1; /* bit position: 9 */
      /* 0x025c */ unsigned long DbgRequestFlushTimer : 1; /* bit position: 10 */
      /* 0x025c */ unsigned long DbgRequestUpdateDebugger : 1; /* bit position: 11 */
      /* 0x025c */ unsigned long DbgSpareRequestFlags : 20; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0260 */ struct _ETW_STACK_TRACE_BLOCK StackTraceBlock;
  /* 0x02b0 */ struct _RTL_BITMAP HookIdMap;
  /* 0x02b8 */ struct _ETW_STACK_CACHE* StackCache;
  /* 0x02bc */ struct _ETW_PMC_SUPPORT* PmcData;
  /* 0x02c0 */ struct _ETW_LBR_SUPPORT* LbrData;
  /* 0x02c4 */ struct _ETW_IPT_SUPPORT* IptData;
  /* 0x02c8 */ struct _LIST_ENTRY BinaryTrackingList;
  /* 0x02d0 */ struct _WMI_BUFFER_HEADER** ScratchArray;
  /* 0x02d4 */ struct _DISALLOWED_GUIDS DisallowedGuids;
  /* 0x02dc */ long Padding_170;
  /* 0x02e0 */ __int64 RelativeTimerDueTime;
  /* 0x02e8 */ struct _PERIODIC_CAPTURE_STATE_GUIDS PeriodicCaptureStateGuids;
  /* 0x02f0 */ struct _EX_TIMER* PeriodicCaptureStateTimer;
  /* 0x02f4 */ enum _ETW_PERIODIC_TIMER_STATE PeriodicCaptureStateTimerState;
  /* 0x02f8 */ struct _ETW_SOFT_RESTART_CONTEXT* SoftRestartContext;
  /* 0x02fc */ struct _ETW_SILODRIVERSTATE* SiloState;
  /* 0x0300 */ struct _WORK_QUEUE_ITEM CompressionWorkItem;
  /* 0x0310 */ long CompressionWorkItemState;
  /* 0x0314 */ struct _EX_PUSH_LOCK CompressionLock;
  /* 0x0318 */ struct _WMI_BUFFER_HEADER* CompressionTarget;
  /* 0x031c */ void* CompressionWorkspace;
  /* 0x0320 */ long CompressionOn;
  /* 0x0324 */ unsigned long CompressionRatioGuess;
  /* 0x0328 */ unsigned long PartialBufferCompressionLevel;
  /* 0x032c */ enum ETW_COMPRESSION_RESUMPTION_MODE CompressionResumptionMode;
  /* 0x0330 */ struct _SINGLE_LIST_ENTRY PlaceholderList;
  /* 0x0334 */ struct _KDPC CompressionDpc;
  /* 0x0354 */ long Padding_171;
  /* 0x0358 */ union _LARGE_INTEGER LastBufferSwitchTime;
  /* 0x0360 */ union _LARGE_INTEGER BufferWriteDuration;
  /* 0x0368 */ union _LARGE_INTEGER BufferCompressDuration;
  /* 0x0370 */ __int64 ReferenceQpcDelta;
  /* 0x0378 */ struct _ETW_EVENT_CALLBACK_CONTEXT* CallbackContext;
  /* 0x037c */ union _LARGE_INTEGER* LastDroppedTime;
  /* 0x0380 */ union _LARGE_INTEGER* FlushingLastDroppedTime;
  /* 0x0384 */ long Padding_172;
  /* 0x0388 */ __int64 FlushingSequenceNumber;
  /* 0x0390 */ struct _ETW_PARTITION_CONTEXT PartitionContext;
  /* 0x0394 */ struct _MDL* BufferMdl;
} WMI_LOGGER_CONTEXT, *PWMI_LOGGER_CONTEXT; /* size: 0x0398 */

typedef struct _MI_SYSTEM_NODE_NONPAGED_POOL
{
  /* 0x0000 */ unsigned long CachedNonPagedPoolCount;
  /* 0x0004 */ unsigned long NonPagedPoolSpinLock;
  /* 0x0008 */ struct _MMPFN* CachedNonPagedPool;
  /* 0x000c */ void* NonPagedPoolFirstVa;
  /* 0x0010 */ void* NonPagedPoolLastVa;
  /* 0x0014 */ struct _MI_SYSTEM_NODE_INFORMATION* SystemNodeInformation;
} MI_SYSTEM_NODE_NONPAGED_POOL, *PMI_SYSTEM_NODE_NONPAGED_POOL; /* size: 0x0018 */

typedef struct _SILO_USER_SHARED_DATA
{
  /* 0x0000 */ unsigned long ServiceSessionId;
  /* 0x0004 */ unsigned long ActiveConsoleId;
  /* 0x0008 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0010 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0014 */ unsigned long SuiteMask;
  /* 0x0018 */ unsigned long SharedUserSessionId;
  /* 0x001c */ unsigned char IsMultiSessionSku;
  /* 0x001d */ char Padding_173;
  /* 0x001e */ wchar_t NtSystemRoot[260];
  /* 0x0226 */ unsigned short UserModeGlobalLogger[16];
  /* 0x0246 */ char __PADDING__[2];
} SILO_USER_SHARED_DATA, *PSILO_USER_SHARED_DATA; /* size: 0x0248 */

typedef struct _PROCESS_ENERGY_VALUES_EXTENSION
{
  union
  {
    /* 0x0000 */ union _TIMELINE_BITMAP Timelines[14];
    struct
    {
      /* 0x0000 */ union _TIMELINE_BITMAP CpuTimeline;
      /* 0x0008 */ union _TIMELINE_BITMAP DiskTimeline;
      /* 0x0010 */ union _TIMELINE_BITMAP NetworkTimeline;
      /* 0x0018 */ union _TIMELINE_BITMAP MBBTimeline;
      /* 0x0020 */ union _TIMELINE_BITMAP ForegroundTimeline;
      /* 0x0028 */ union _TIMELINE_BITMAP DesktopVisibleTimeline;
      /* 0x0030 */ union _TIMELINE_BITMAP CompositionRenderedTimeline;
      /* 0x0038 */ union _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
      /* 0x0040 */ union _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
      /* 0x0048 */ union _TIMELINE_BITMAP InputTimeline;
      /* 0x0050 */ union _TIMELINE_BITMAP AudioInTimeline;
      /* 0x0058 */ union _TIMELINE_BITMAP AudioOutTimeline;
      /* 0x0060 */ union _TIMELINE_BITMAP DisplayRequiredTimeline;
      /* 0x0068 */ union _TIMELINE_BITMAP KeyboardInputTimeline;
    }; /* size: 0x0070 */
  }; /* size: 0x0070 */
  union
  {
    /* 0x0070 */ union _ENERGY_STATE_DURATION Durations[5];
    struct
    {
      /* 0x0070 */ union _ENERGY_STATE_DURATION InputDuration;
      /* 0x0078 */ union _ENERGY_STATE_DURATION AudioInDuration;
      /* 0x0080 */ union _ENERGY_STATE_DURATION AudioOutDuration;
      /* 0x0088 */ union _ENERGY_STATE_DURATION DisplayRequiredDuration;
      /* 0x0090 */ union _ENERGY_STATE_DURATION PSMBackgroundDuration;
    }; /* size: 0x0028 */
  }; /* size: 0x0028 */
  /* 0x0098 */ unsigned long KeyboardInput;
  /* 0x009c */ unsigned long MouseInput;
} PROCESS_ENERGY_VALUES_EXTENSION, *PPROCESS_ENERGY_VALUES_EXTENSION; /* size: 0x00a0 */

typedef struct _POP_FX_PERF_INFO
{
  /* 0x0000 */ struct _POP_FX_COMPONENT* Component;
  /* 0x0004 */ struct _KEVENT CompletedEvent;
  /* 0x0014 */ void* ComponentPerfState /* function */;
  /* 0x0018 */ volatile union _POP_FX_PERF_FLAGS Flags;
  /* 0x001c */ struct _PO_FX_PERF_STATE_CHANGE* LastChange;
  /* 0x0020 */ unsigned long LastChangeCount;
  /* 0x0024 */ long Padding_174;
  /* 0x0028 */ unsigned __int64 LastChangeStamp;
  /* 0x0030 */ unsigned char LastChangeNominal;
  /* 0x0031 */ unsigned char PepRegistered;
  /* 0x0032 */ unsigned char QueryOnIdleStates;
  /* 0x0033 */ char Padding_175;
  /* 0x0034 */ void* volatile RequestDriverContext;
  /* 0x0038 */ struct _POP_FX_WORK_ORDER WorkOrder;
  /* 0x0054 */ unsigned long SetsCount;
  /* 0x0058 */ struct _POP_FX_PERF_SET* Sets;
  /* 0x005c */ long __PADDING__[1];
} POP_FX_PERF_INFO, *PPOP_FX_PERF_INFO; /* size: 0x0060 */

typedef struct _NUMA_MEMORY_RANGE
{
  /* 0x0000 */ unsigned long ProximityId;
  /* 0x0004 */ long Padding_176;
  /* 0x0008 */ unsigned __int64 BasePage;
  /* 0x0010 */ unsigned __int64 EndPage;
} NUMA_MEMORY_RANGE, *PNUMA_MEMORY_RANGE; /* size: 0x0018 */

typedef struct _MCGEN_TRACE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 RegistrationHandle;
  /* 0x0008 */ unsigned __int64 Logger;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long IsEnabled;
  /* 0x0028 */ unsigned char Level;
  /* 0x0029 */ unsigned char Reserve;
  /* 0x002a */ unsigned short EnableBitsCount;
  /* 0x002c */ unsigned long* EnableBitMask;
  /* 0x0030 */ const unsigned __int64* EnableKeyWords;
  /* 0x0034 */ const unsigned char* EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT; /* size: 0x0038 */

typedef struct _EVENT_FILTER_LEVEL_KW
{
  /* 0x0000 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0008 */ unsigned __int64 MatchAllKeyword;
  /* 0x0010 */ unsigned char Level;
  /* 0x0011 */ unsigned char FilterIn;
  /* 0x0012 */ char __PADDING__[6];
} EVENT_FILTER_LEVEL_KW, *PEVENT_FILTER_LEVEL_KW; /* size: 0x0018 */

typedef struct _COMPRESSED_DATA_INFO
{
  /* 0x0000 */ unsigned short CompressionFormatAndEngine;
  /* 0x0002 */ unsigned char CompressionUnitShift;
  /* 0x0003 */ unsigned char ChunkShift;
  /* 0x0004 */ unsigned char ClusterShift;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ unsigned short NumberOfChunks;
  /* 0x0008 */ unsigned long CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO; /* size: 0x000c */

typedef struct _INPUT_MAPPING_ELEMENT
{
  /* 0x0000 */ unsigned long InputMappingId;
} INPUT_MAPPING_ELEMENT, *PINPUT_MAPPING_ELEMENT; /* size: 0x0004 */

typedef union _HV_PARTITION_PRIVILEGE_MASK
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 AccessVpRunTimeReg : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceCounter : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 AccessSynicRegs : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 AccessSyntheticTimerRegs : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 AccessIntrCtrlRegs : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 AccessHypercallMsrs : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 AccessVpIndex : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 AccessResetReg : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 AccessStatsReg : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 AccessPartitionReferenceTsc : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 AccessGuestIdleReg : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 AccessFrequencyRegs : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 AccessDebugRegs : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 AccessReenlightenmentControls : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 AccessRootSchedulerReg : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned __int64 AccessTscInvariantControls : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned __int64 Reserved1 : 16; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 CreatePartitions : 1; /* bit position: 32 */
      /* 0x0000 */ unsigned __int64 AccessPartitionId : 1; /* bit position: 33 */
      /* 0x0000 */ unsigned __int64 AccessMemoryPool : 1; /* bit position: 34 */
      /* 0x0000 */ unsigned __int64 AdjustMessageBuffers : 1; /* bit position: 35 */
      /* 0x0000 */ unsigned __int64 PostMessages : 1; /* bit position: 36 */
      /* 0x0000 */ unsigned __int64 SignalEvents : 1; /* bit position: 37 */
      /* 0x0000 */ unsigned __int64 CreatePort : 1; /* bit position: 38 */
      /* 0x0000 */ unsigned __int64 ConnectPort : 1; /* bit position: 39 */
      /* 0x0000 */ unsigned __int64 AccessStats : 1; /* bit position: 40 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 2; /* bit position: 41 */
      /* 0x0000 */ unsigned __int64 Debugging : 1; /* bit position: 43 */
      /* 0x0000 */ unsigned __int64 CpuManagement : 1; /* bit position: 44 */
      /* 0x0000 */ unsigned __int64 ConfigureProfiler : 1; /* bit position: 45 */
      /* 0x0000 */ unsigned __int64 AccessVpExitTracing : 1; /* bit position: 46 */
      /* 0x0000 */ unsigned __int64 EnableExtendedGvaRangesForFlushVirtualAddressList : 1; /* bit position: 47 */
      /* 0x0000 */ unsigned __int64 AccessVsm : 1; /* bit position: 48 */
      /* 0x0000 */ unsigned __int64 AccessVpRegisters : 1; /* bit position: 49 */
      /* 0x0000 */ unsigned __int64 UnusedBit : 1; /* bit position: 50 */
      /* 0x0000 */ unsigned __int64 FastHypercallOutput : 1; /* bit position: 51 */
      /* 0x0000 */ unsigned __int64 EnableExtendedHypercalls : 1; /* bit position: 52 */
      /* 0x0000 */ unsigned __int64 StartVirtualProcessor : 1; /* bit position: 53 */
      /* 0x0000 */ unsigned __int64 Isolation : 1; /* bit position: 54 */
      /* 0x0000 */ unsigned __int64 Reserved3 : 9; /* bit position: 55 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} HV_PARTITION_PRIVILEGE_MASK, *PHV_PARTITION_PRIVILEGE_MASK; /* size: 0x0008 */

typedef struct _DBGKD_LOAD_SYMBOLS64
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ long Padding_177;
  /* 0x0008 */ unsigned __int64 BaseOfDll;
  /* 0x0010 */ unsigned __int64 ProcessId;
  /* 0x0018 */ unsigned long CheckSum;
  /* 0x001c */ unsigned long SizeOfImage;
  /* 0x0020 */ unsigned char UnloadSymbols;
  /* 0x0021 */ char __PADDING__[7];
} DBGKD_LOAD_SYMBOLS64, *PDBGKD_LOAD_SYMBOLS64; /* size: 0x0028 */

typedef struct _EXCEPTION_RECORD32
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned long ExceptionRecord;
  /* 0x000c */ unsigned long ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32; /* size: 0x0050 */

typedef struct _DBGKM_EXCEPTION32
{
  /* 0x0000 */ struct _EXCEPTION_RECORD32 ExceptionRecord;
  /* 0x0050 */ unsigned long FirstChance;
} DBGKM_EXCEPTION32, *PDBGKM_EXCEPTION32; /* size: 0x0054 */

typedef struct _IO_STACK_LOCATION
{
  /* 0x0000 */ unsigned char MajorFunction;
  /* 0x0001 */ unsigned char MinorFunction;
  /* 0x0002 */ unsigned char Flags;
  /* 0x0003 */ unsigned char Control;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short FileAttributes;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ unsigned long EaLength;
      } /* size: 0x0010 */ Create;
      struct
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short Reserved;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ struct _NAMED_PIPE_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0010 */ CreatePipe;
      struct
      {
        /* 0x0004 */ struct _IO_SECURITY_CONTEXT* SecurityContext;
        /* 0x0008 */ unsigned long Options;
        /* 0x000c */ unsigned short Reserved;
        /* 0x000e */ unsigned short ShareAccess;
        /* 0x0010 */ struct _MAILSLOT_CREATE_PARAMETERS* Parameters;
      } /* size: 0x0010 */ CreateMailslot;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ Read;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ Write;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ struct _UNICODE_STRING* FileName;
        /* 0x000c */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x0010 */ unsigned long FileIndex;
      } /* size: 0x0010 */ QueryDirectory;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long CompletionFilter;
      } /* size: 0x0008 */ NotifyDirectory;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ unsigned long CompletionFilter;
        /* 0x000c */ enum _DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass;
      } /* size: 0x000c */ NotifyDirectoryEx;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
      } /* size: 0x0008 */ QueryFile;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
        /* 0x000c */ struct _FILE_OBJECT* FileObject;
        union
        {
          struct
          {
            /* 0x0010 */ unsigned char ReplaceIfExists;
            /* 0x0011 */ unsigned char AdvanceOnly;
          }; /* size: 0x0002 */
          /* 0x0010 */ unsigned long ClusterCount;
          /* 0x0010 */ void* DeleteHandle;
        }; /* size: 0x0004 */
      } /* size: 0x0010 */ SetFile;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ void* EaList;
        /* 0x000c */ unsigned long EaListLength;
        /* 0x0010 */ unsigned long EaIndex;
      } /* size: 0x0010 */ QueryEa;
      struct
      {
        /* 0x0004 */ unsigned long Length;
      } /* size: 0x0004 */ SetEa;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FSINFOCLASS FsInformationClass;
      } /* size: 0x0008 */ QueryVolume;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ enum _FSINFOCLASS FsInformationClass;
      } /* size: 0x0008 */ SetVolume;
      struct
      {
        /* 0x0004 */ unsigned long OutputBufferLength;
        /* 0x0008 */ unsigned long InputBufferLength;
        /* 0x000c */ unsigned long FsControlCode;
        /* 0x0010 */ void* Type3InputBuffer;
      } /* size: 0x0010 */ FileSystemControl;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER* Length;
        /* 0x0008 */ unsigned long Key;
        /* 0x000c */ union _LARGE_INTEGER ByteOffset;
      } /* size: 0x0010 */ LockControl;
      struct
      {
        /* 0x0004 */ unsigned long OutputBufferLength;
        /* 0x0008 */ unsigned long InputBufferLength;
        /* 0x000c */ unsigned long IoControlCode;
        /* 0x0010 */ void* Type3InputBuffer;
      } /* size: 0x0010 */ DeviceIoControl;
      struct
      {
        /* 0x0004 */ unsigned long SecurityInformation;
        /* 0x0008 */ unsigned long Length;
      } /* size: 0x0008 */ QuerySecurity;
      struct
      {
        /* 0x0004 */ unsigned long SecurityInformation;
        /* 0x0008 */ void* SecurityDescriptor;
      } /* size: 0x0008 */ SetSecurity;
      struct
      {
        /* 0x0004 */ struct _VPB* Vpb;
        /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0008 */ MountVolume;
      struct
      {
        /* 0x0004 */ struct _VPB* Vpb;
        /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
      } /* size: 0x0008 */ VerifyVolume;
      struct
      {
        /* 0x0004 */ struct _SCSI_REQUEST_BLOCK* Srb;
      } /* size: 0x0004 */ Scsi;
      struct
      {
        /* 0x0004 */ unsigned long Length;
        /* 0x0008 */ void* StartSid;
        /* 0x000c */ struct _FILE_GET_QUOTA_INFORMATION* SidList;
        /* 0x0010 */ unsigned long SidListLength;
      } /* size: 0x0010 */ QueryQuota;
      struct
      {
        /* 0x0004 */ unsigned long Length;
      } /* size: 0x0004 */ SetQuota;
      struct
      {
        /* 0x0004 */ enum _DEVICE_RELATION_TYPE Type;
      } /* size: 0x0004 */ QueryDeviceRelations;
      struct
      {
        /* 0x0004 */ const struct _GUID* InterfaceType;
        /* 0x0008 */ unsigned short Size;
        /* 0x000a */ unsigned short Version;
        /* 0x000c */ struct _INTERFACE* Interface;
        /* 0x0010 */ void* InterfaceSpecificData;
      } /* size: 0x0010 */ QueryInterface;
      struct
      {
        /* 0x0004 */ struct _DEVICE_CAPABILITIES* Capabilities;
      } /* size: 0x0004 */ DeviceCapabilities;
      struct
      {
        /* 0x0004 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* IoResourceRequirementList;
      } /* size: 0x0004 */ FilterResourceRequirements;
      struct
      {
        /* 0x0004 */ unsigned long WhichSpace;
        /* 0x0008 */ void* Buffer;
        /* 0x000c */ unsigned long Offset;
        /* 0x0010 */ unsigned long Length;
      } /* size: 0x0010 */ ReadWriteConfig;
      struct
      {
        /* 0x0004 */ unsigned char Lock;
      } /* size: 0x0001 */ SetLock;
      struct
      {
        /* 0x0004 */ enum BUS_QUERY_ID_TYPE IdType;
      } /* size: 0x0004 */ QueryId;
      struct
      {
        /* 0x0004 */ enum DEVICE_TEXT_TYPE DeviceTextType;
        /* 0x0008 */ unsigned long LocaleId;
      } /* size: 0x0008 */ QueryDeviceText;
      struct
      {
        /* 0x0004 */ unsigned char InPath;
        /* 0x0005 */ unsigned char Reserved[3];
        /* 0x0008 */ enum _DEVICE_USAGE_NOTIFICATION_TYPE Type;
      } /* size: 0x0008 */ UsageNotification;
      struct
      {
        /* 0x0004 */ enum _SYSTEM_POWER_STATE PowerState;
      } /* size: 0x0004 */ WaitWake;
      struct
      {
        /* 0x0004 */ struct _POWER_SEQUENCE* PowerSequence;
      } /* size: 0x0004 */ PowerSequence;
      struct
      {
        union
        {
          /* 0x0004 */ unsigned long SystemContext;
          /* 0x0004 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
        }; /* size: 0x0004 */
        /* 0x0008 */ enum _POWER_STATE_TYPE Type;
        /* 0x000c */ union _POWER_STATE State;
        /* 0x0010 */ enum POWER_ACTION ShutdownType;
      } /* size: 0x0010 */ Power;
      struct
      {
        /* 0x0004 */ struct _CM_RESOURCE_LIST* AllocatedResources;
        /* 0x0008 */ struct _CM_RESOURCE_LIST* AllocatedResourcesTranslated;
      } /* size: 0x0008 */ StartDevice;
      struct
      {
        /* 0x0004 */ unsigned long ProviderId;
        /* 0x0008 */ void* DataPath;
        /* 0x000c */ unsigned long BufferSize;
        /* 0x0010 */ void* Buffer;
      } /* size: 0x0010 */ WMI;
      struct
      {
        /* 0x0004 */ void* Argument1;
        /* 0x0008 */ void* Argument2;
        /* 0x000c */ void* Argument3;
        /* 0x0010 */ void* Argument4;
      } /* size: 0x0010 */ Others;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Parameters;
  /* 0x0014 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0018 */ struct _FILE_OBJECT* FileObject;
  /* 0x001c */ void* CompletionRoutine /* function */;
  /* 0x0020 */ void* Context;
} IO_STACK_LOCATION, *PIO_STACK_LOCATION; /* size: 0x0024 */

typedef struct _DBGKD_LOAD_SYMBOLS32
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ unsigned long BaseOfDll;
  /* 0x0008 */ unsigned long ProcessId;
  /* 0x000c */ unsigned long CheckSum;
  /* 0x0010 */ unsigned long SizeOfImage;
  /* 0x0014 */ unsigned char UnloadSymbols;
  /* 0x0015 */ char __PADDING__[3];
} DBGKD_LOAD_SYMBOLS32, *PDBGKD_LOAD_SYMBOLS32; /* size: 0x0018 */

typedef struct _EXCEPTION_RECORD64
{
  /* 0x0000 */ long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned __int64 ExceptionRecord;
  /* 0x0010 */ unsigned __int64 ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ unsigned long __unusedAlignment;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64; /* size: 0x0098 */

typedef struct _DBGKM_EXCEPTION64
{
  /* 0x0000 */ struct _EXCEPTION_RECORD64 ExceptionRecord;
  /* 0x0098 */ unsigned long FirstChance;
  /* 0x009c */ long __PADDING__[1];
} DBGKM_EXCEPTION64, *PDBGKM_EXCEPTION64; /* size: 0x00a0 */

typedef struct _INTERRUPT_REMAPPING_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long IrtIndex : 30; /* bit position: 0 */
    /* 0x0000 */ unsigned long FlagHalInternal : 1; /* bit position: 30 */
    /* 0x0000 */ unsigned long FlagTranslated : 1; /* bit position: 31 */
  }; /* bitfield */
  union
  {
    struct
    {
      /* 0x0004 */ unsigned long MessageAddressHigh;
      /* 0x0008 */ unsigned long MessageAddressLow;
      /* 0x000c */ unsigned short MessageData;
      /* 0x000e */ unsigned short Reserved;
    } /* size: 0x000c */ Msi;
  } /* size: 0x000c */ u;
} INTERRUPT_REMAPPING_INFO, *PINTERRUPT_REMAPPING_INFO; /* size: 0x0010 */

typedef struct _INTERRUPT_HT_INTR_INFO
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long Mask : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned long Polarity : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned long MessageType : 3; /* bit position: 2 */
          /* 0x0000 */ unsigned long RequestEOI : 1; /* bit position: 5 */
          /* 0x0000 */ unsigned long DestinationMode : 1; /* bit position: 6 */
          /* 0x0000 */ unsigned long MessageType3 : 1; /* bit position: 7 */
          /* 0x0000 */ unsigned long Destination : 8; /* bit position: 8 */
          /* 0x0000 */ unsigned long Vector : 8; /* bit position: 16 */
          /* 0x0000 */ unsigned long ExtendedAddress : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0000 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ LowPart;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long ExtendedDestination : 24; /* bit position: 0 */
          /* 0x0004 */ unsigned long Reserved : 6; /* bit position: 24 */
          /* 0x0004 */ unsigned long PassPW : 1; /* bit position: 30 */
          /* 0x0004 */ unsigned long WaitingForEOI : 1; /* bit position: 31 */
        }; /* bitfield */
      } /* size: 0x0004 */ bits;
      /* 0x0004 */ unsigned long AsULONG;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighPart;
} INTERRUPT_HT_INTR_INFO, *PINTERRUPT_HT_INTR_INFO; /* size: 0x0008 */

typedef struct _INTERRUPT_VECTOR_DATA
{
  /* 0x0000 */ enum INTERRUPT_CONNECTION_TYPE Type;
  /* 0x0004 */ unsigned long Vector;
  /* 0x0008 */ unsigned char Irql;
  /* 0x0009 */ char Padding_178[3];
  /* 0x000c */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0010 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0014 */ struct _GROUP_AFFINITY TargetProcessors;
  /* 0x0020 */ struct _INTERRUPT_REMAPPING_INFO IntRemapInfo;
  struct
  {
    /* 0x0030 */ unsigned long Gsiv;
    struct /* bitfield */
    {
      /* 0x0034 */ unsigned long WakeInterrupt : 1; /* bit position: 0 */
      /* 0x0034 */ unsigned long ReservedFlags : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0008 */ ControllerInput;
  /* 0x0038 */ unsigned __int64 HvDeviceId;
  union
  {
    struct
    {
      /* 0x0040 */ union _LARGE_INTEGER Address;
      /* 0x0048 */ unsigned long DataPayload;
      /* 0x004c */ long __PADDING__[1];
    } /* size: 0x0010 */ XapicMessage;
    struct
    {
      /* 0x0040 */ struct _INTERRUPT_HT_INTR_INFO IntrInfo;
    } /* size: 0x0008 */ Hypertransport;
    struct
    {
      /* 0x0040 */ union _LARGE_INTEGER Address;
      /* 0x0048 */ unsigned long DataPayload;
      /* 0x004c */ long __PADDING__[1];
    } /* size: 0x0010 */ GenericMessage;
    struct
    {
      struct
      {
        /* 0x0040 */ enum HAL_APIC_DESTINATION_MODE DestinationMode;
      } /* size: 0x0004 */ MessageRequest;
      /* 0x0044 */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} INTERRUPT_VECTOR_DATA, *PINTERRUPT_VECTOR_DATA; /* size: 0x0050 */

typedef struct _IO_TIMER
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short TimerFlag;
  /* 0x0004 */ struct _LIST_ENTRY TimerList;
  /* 0x000c */ void* TimerRoutine /* function */;
  /* 0x0010 */ void* Context;
  /* 0x0014 */ struct _DEVICE_OBJECT* DeviceObject;
} IO_TIMER, *PIO_TIMER; /* size: 0x0018 */

typedef struct _INTERRUPT_CONNECTION_DATA
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_179;
  /* 0x0008 */ struct _INTERRUPT_VECTOR_DATA Vectors[1];
} INTERRUPT_CONNECTION_DATA, *PINTERRUPT_CONNECTION_DATA; /* size: 0x0058 */

typedef struct _TRACE_ENABLE_INFO
{
  /* 0x0000 */ unsigned long IsEnabled;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short LoggerId;
  /* 0x0008 */ unsigned long EnableProperty;
  /* 0x000c */ unsigned long Reserved2;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
} TRACE_ENABLE_INFO, *PTRACE_ENABLE_INFO; /* size: 0x0020 */

typedef struct _DEVOBJ_EXTENSION
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0008 */ unsigned long PowerFlags;
  /* 0x000c */ struct _DEVICE_OBJECT_POWER_EXTENSION* Dope;
  /* 0x0010 */ unsigned long ExtensionFlags;
  /* 0x0014 */ void* DeviceNode;
  /* 0x0018 */ struct _DEVICE_OBJECT* AttachedTo;
  /* 0x001c */ long StartIoCount;
  /* 0x0020 */ long StartIoKey;
  /* 0x0024 */ unsigned long StartIoFlags;
  /* 0x0028 */ struct _VPB* Vpb;
  /* 0x002c */ void* DependencyNode;
  /* 0x0030 */ void* InterruptContext;
  /* 0x0034 */ long InterruptCount;
  /* 0x0038 */ void* VerifierContext;
} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION; /* size: 0x003c */

typedef struct _POP_RW_LOCK
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _KTHREAD* Thread;
} POP_RW_LOCK, *PPOP_RW_LOCK; /* size: 0x0008 */

typedef struct _THERMAL_COOLING_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ void* ActiveCooling /* function */;
  /* 0x0018 */ void* PassiveCooling /* function */;
} THERMAL_COOLING_INTERFACE, *PTHERMAL_COOLING_INTERFACE; /* size: 0x001c */

typedef struct _POP_COOLING_EXTENSION
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _LIST_ENTRY RequestListHead;
  /* 0x0010 */ struct _POP_RW_LOCK Lock;
  /* 0x0018 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x001c */ void* NotificationEntry;
  /* 0x0020 */ unsigned char Enabled;
  /* 0x0021 */ unsigned char ActiveEngaged;
  /* 0x0022 */ unsigned char ThrottleLimit;
  /* 0x0023 */ unsigned char UpdatingToCurrent;
  /* 0x0024 */ struct _KEVENT* RemovalFlushEvent;
  /* 0x0028 */ struct _KEVENT* PnpFlushEvent;
  /* 0x002c */ struct _THERMAL_COOLING_INTERFACE Interface;
} POP_COOLING_EXTENSION, *PPOP_COOLING_EXTENSION; /* size: 0x0048 */

typedef struct _PO_FX_PERF_STATE
{
  /* 0x0000 */ unsigned __int64 Value;
  /* 0x0008 */ void* Context;
  /* 0x000c */ long __PADDING__[1];
} PO_FX_PERF_STATE, *PPO_FX_PERF_STATE; /* size: 0x0010 */

typedef struct _JOB_RATE_CONTROL_HEADER
{
  /* 0x0000 */ void* RateControlQuotaReference;
  /* 0x0004 */ struct _RTL_BITMAP OverQuotaHistory;
  /* 0x000c */ unsigned char* BitMapBuffer;
  /* 0x0010 */ unsigned long BitMapBufferSize;
} JOB_RATE_CONTROL_HEADER, *PJOB_RATE_CONTROL_HEADER; /* size: 0x0014 */

typedef struct _PS_IO_CONTROL_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE VolumeTreeNode;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY FreeListEntry;
      /* 0x0008 */ unsigned long ReservedForParentValue;
    }; /* size: 0x000c */
  }; /* size: 0x000c */
  /* 0x000c */ unsigned long VolumeKey;
  /* 0x0010 */ struct _EX_RUNDOWN_REF Rundown;
  /* 0x0014 */ void* IoControl;
  /* 0x0018 */ void* VolumeIoAttribution;
} PS_IO_CONTROL_ENTRY, *PPS_IO_CONTROL_ENTRY; /* size: 0x001c */

typedef struct _EJOB
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0010 */ struct _LIST_ENTRY JobLinks;
  /* 0x0018 */ struct _LIST_ENTRY ProcessListHead;
  /* 0x0020 */ struct _ERESOURCE JobLock;
  /* 0x0058 */ union _LARGE_INTEGER TotalUserTime;
  /* 0x0060 */ union _LARGE_INTEGER TotalKernelTime;
  /* 0x0068 */ union _LARGE_INTEGER TotalCycleTime;
  /* 0x0070 */ union _LARGE_INTEGER ThisPeriodTotalUserTime;
  /* 0x0078 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime;
  /* 0x0080 */ unsigned __int64 TotalContextSwitches;
  /* 0x0088 */ unsigned long TotalPageFaultCount;
  /* 0x008c */ unsigned long TotalProcesses;
  /* 0x0090 */ unsigned long ActiveProcesses;
  /* 0x0094 */ unsigned long TotalTerminatedProcesses;
  /* 0x0098 */ union _LARGE_INTEGER PerProcessUserTimeLimit;
  /* 0x00a0 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* 0x00a8 */ unsigned long MinimumWorkingSetSize;
  /* 0x00ac */ unsigned long MaximumWorkingSetSize;
  /* 0x00b0 */ unsigned long LimitFlags;
  /* 0x00b4 */ unsigned long ActiveProcessLimit;
  /* 0x00b8 */ struct _KAFFINITY_EX Affinity;
  /* 0x00c4 */ struct _JOB_ACCESS_STATE* AccessState;
  /* 0x00c8 */ void* AccessStateQuotaReference;
  /* 0x00cc */ unsigned long UIRestrictionsClass;
  /* 0x00d0 */ unsigned long EndOfJobTimeAction;
  /* 0x00d4 */ void* CompletionPort;
  /* 0x00d8 */ void* CompletionKey;
  /* 0x00dc */ long Padding_180;
  /* 0x00e0 */ unsigned __int64 CompletionCount;
  /* 0x00e8 */ unsigned long SessionId;
  /* 0x00ec */ unsigned long SchedulingClass;
  /* 0x00f0 */ unsigned __int64 ReadOperationCount;
  /* 0x00f8 */ unsigned __int64 WriteOperationCount;
  /* 0x0100 */ unsigned __int64 OtherOperationCount;
  /* 0x0108 */ unsigned __int64 ReadTransferCount;
  /* 0x0110 */ unsigned __int64 WriteTransferCount;
  /* 0x0118 */ unsigned __int64 OtherTransferCount;
  /* 0x0120 */ struct _PROCESS_DISK_COUNTERS DiskIoInfo;
  /* 0x0148 */ unsigned long ProcessMemoryLimit;
  /* 0x014c */ unsigned long JobMemoryLimit;
  /* 0x0150 */ unsigned long JobTotalMemoryLimit;
  /* 0x0154 */ unsigned long PeakProcessMemoryUsed;
  /* 0x0158 */ unsigned long PeakJobMemoryUsed;
  /* 0x015c */ struct _KAFFINITY_EX EffectiveAffinity;
  /* 0x0168 */ union _LARGE_INTEGER EffectivePerProcessUserTimeLimit;
  /* 0x0170 */ unsigned long EffectiveMinimumWorkingSetSize;
  /* 0x0174 */ unsigned long EffectiveMaximumWorkingSetSize;
  /* 0x0178 */ unsigned long EffectiveProcessMemoryLimit;
  /* 0x017c */ struct _EJOB* EffectiveProcessMemoryLimitJob;
  /* 0x0180 */ struct _EJOB* EffectivePerProcessUserTimeLimitJob;
  /* 0x0184 */ struct _EJOB* EffectiveNetIoRateLimitJob;
  /* 0x0188 */ struct _EJOB* EffectiveHeapAttributionJob;
  /* 0x018c */ unsigned long EffectiveLimitFlags;
  /* 0x0190 */ unsigned long EffectiveSchedulingClass;
  /* 0x0194 */ unsigned long EffectiveFreezeCount;
  /* 0x0198 */ unsigned long EffectiveBackgroundCount;
  /* 0x019c */ unsigned long EffectiveSwapCount;
  /* 0x01a0 */ unsigned long EffectiveNotificationLimitCount;
  /* 0x01a4 */ unsigned char EffectivePriorityClass;
  /* 0x01a5 */ unsigned char PriorityClass;
  /* 0x01a6 */ unsigned char NestingDepth;
  /* 0x01a7 */ unsigned char Reserved1[1];
  /* 0x01a8 */ unsigned long CompletionFilter;
  /* 0x01ac */ long Padding_181;
  union
  {
    /* 0x01b0 */ struct _WNF_STATE_NAME WakeChannel;
    /* 0x01b0 */ struct _PS_JOB_WAKE_INFORMATION WakeInfo;
  }; /* size: 0x0048 */
  /* 0x01f8 */ struct _JOBOBJECT_WAKE_FILTER WakeFilter;
  /* 0x0200 */ unsigned long LowEdgeLatchFilter;
  /* 0x0204 */ struct _EJOB* NotificationLink;
  /* 0x0208 */ unsigned __int64 CurrentJobMemoryUsed;
  /* 0x0210 */ struct _JOB_NOTIFICATION_INFORMATION* NotificationInfo;
  /* 0x0214 */ void* NotificationInfoQuotaReference;
  /* 0x0218 */ struct _IO_MINI_COMPLETION_PACKET_USER* NotificationPacket;
  /* 0x021c */ struct _JOB_CPU_RATE_CONTROL* CpuRateControl;
  /* 0x0220 */ void* EffectiveSchedulingGroup;
  /* 0x0224 */ long Padding_182;
  /* 0x0228 */ unsigned __int64 ReadyTime;
  /* 0x0230 */ struct _EX_PUSH_LOCK MemoryLimitsLock;
  /* 0x0234 */ struct _LIST_ENTRY SiblingJobLinks;
  /* 0x023c */ struct _LIST_ENTRY ChildJobListHead;
  /* 0x0244 */ struct _EJOB* ParentJob;
  /* 0x0248 */ struct _EJOB* volatile RootJob;
  /* 0x024c */ struct _LIST_ENTRY IteratorListHead;
  /* 0x0254 */ unsigned long AncestorCount;
  union
  {
    /* 0x0258 */ struct _EJOB** Ancestors;
    /* 0x0258 */ void* SessionObject;
  }; /* size: 0x0004 */
  /* 0x025c */ long Padding_183;
  /* 0x0260 */ struct _EPROCESS_VALUES Accounting;
  /* 0x02c8 */ unsigned long ShadowActiveProcessCount;
  /* 0x02cc */ unsigned long ActiveAuxiliaryProcessCount;
  /* 0x02d0 */ unsigned long SequenceNumber;
  /* 0x02d4 */ unsigned long JobId;
  /* 0x02d8 */ struct _GUID ContainerId;
  /* 0x02e8 */ struct _GUID ContainerTelemetryId;
  /* 0x02f8 */ struct _ESERVERSILO_GLOBALS* ServerSiloGlobals;
  /* 0x02fc */ struct _PS_PROPERTY_SET PropertySet;
  /* 0x0308 */ struct _PSP_STORAGE* Storage;
  /* 0x030c */ struct _JOB_NET_RATE_CONTROL* NetRateControl;
  union
  {
    /* 0x0310 */ unsigned long JobFlags;
    struct /* bitfield */
    {
      /* 0x0310 */ unsigned long CloseDone : 1; /* bit position: 0 */
      /* 0x0310 */ unsigned long MultiGroup : 1; /* bit position: 1 */
      /* 0x0310 */ unsigned long OutstandingNotification : 1; /* bit position: 2 */
      /* 0x0310 */ unsigned long NotificationInProgress : 1; /* bit position: 3 */
      /* 0x0310 */ unsigned long UILimits : 1; /* bit position: 4 */
      /* 0x0310 */ unsigned long CpuRateControlActive : 1; /* bit position: 5 */
      /* 0x0310 */ unsigned long OwnCpuRateControl : 1; /* bit position: 6 */
      /* 0x0310 */ unsigned long Terminating : 1; /* bit position: 7 */
      /* 0x0310 */ unsigned long WorkingSetLock : 1; /* bit position: 8 */
      /* 0x0310 */ unsigned long JobFrozen : 1; /* bit position: 9 */
      /* 0x0310 */ unsigned long Background : 1; /* bit position: 10 */
      /* 0x0310 */ unsigned long WakeNotificationAllocated : 1; /* bit position: 11 */
      /* 0x0310 */ unsigned long WakeNotificationEnabled : 1; /* bit position: 12 */
      /* 0x0310 */ unsigned long WakeNotificationPending : 1; /* bit position: 13 */
      /* 0x0310 */ unsigned long LimitNotificationRequired : 1; /* bit position: 14 */
      /* 0x0310 */ unsigned long ZeroCountNotificationRequired : 1; /* bit position: 15 */
      /* 0x0310 */ unsigned long CycleTimeNotificationRequired : 1; /* bit position: 16 */
      /* 0x0310 */ unsigned long CycleTimeNotificationPending : 1; /* bit position: 17 */
      /* 0x0310 */ unsigned long TimersVirtualized : 1; /* bit position: 18 */
      /* 0x0310 */ unsigned long JobSwapped : 1; /* bit position: 19 */
      /* 0x0310 */ unsigned long ViolationDetected : 1; /* bit position: 20 */
      /* 0x0310 */ unsigned long EmptyJobNotified : 1; /* bit position: 21 */
      /* 0x0310 */ unsigned long NoSystemCharge : 1; /* bit position: 22 */
      /* 0x0310 */ unsigned long DropNoWakeCharges : 1; /* bit position: 23 */
      /* 0x0310 */ unsigned long NoWakeChargePolicyDecided : 1; /* bit position: 24 */
      /* 0x0310 */ unsigned long NetRateControlActive : 1; /* bit position: 25 */
      /* 0x0310 */ unsigned long OwnNetRateControl : 1; /* bit position: 26 */
      /* 0x0310 */ unsigned long IoRateControlActive : 1; /* bit position: 27 */
      /* 0x0310 */ unsigned long OwnIoRateControl : 1; /* bit position: 28 */
      /* 0x0310 */ unsigned long DisallowNewProcesses : 1; /* bit position: 29 */
      /* 0x0310 */ unsigned long Silo : 1; /* bit position: 30 */
      /* 0x0310 */ unsigned long ContainerTelemetryIdSet : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0314 */ unsigned long JobFlags2;
    struct /* bitfield */
    {
      /* 0x0314 */ unsigned long ParentLocked : 1; /* bit position: 0 */
      /* 0x0314 */ unsigned long EnableUsermodeSiloThreadImpersonation : 1; /* bit position: 1 */
      /* 0x0314 */ unsigned long DisallowUsermodeSiloThreadImpersonation : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0318 */ struct _PROCESS_EXTENDED_ENERGY_VALUES* EnergyValues;
  /* 0x031c */ volatile unsigned long SharedCommitCharge;
  /* 0x0320 */ unsigned long DiskIoAttributionUserRefCount;
  /* 0x0324 */ unsigned long DiskIoAttributionRefCount;
  union
  {
    /* 0x0328 */ void* DiskIoAttributionContext;
    /* 0x0328 */ struct _EJOB* DiskIoAttributionOwnerJob;
  }; /* size: 0x0004 */
  /* 0x032c */ struct _JOB_RATE_CONTROL_HEADER IoRateControlHeader;
  /* 0x0340 */ struct _PS_IO_CONTROL_ENTRY GlobalIoControl;
  /* 0x035c */ volatile long IoControlStateLock;
  /* 0x0360 */ struct _RTL_RB_TREE VolumeIoControlTree;
  /* 0x0368 */ unsigned __int64 IoRateOverQuotaHistory;
  /* 0x0370 */ unsigned long IoRateCurrentGeneration;
  /* 0x0374 */ unsigned long IoRateLastQueryGeneration;
  /* 0x0378 */ unsigned long IoRateGenerationLength;
  /* 0x037c */ unsigned long IoRateOverQuotaNotifySequenceId;
  /* 0x0380 */ unsigned __int64 LastThrottledIoTime;
  /* 0x0388 */ struct _EX_PUSH_LOCK IoControlLock;
  /* 0x038c */ long SiloHardReferenceCount;
  /* 0x0390 */ struct _WORK_QUEUE_ITEM RundownWorkItem;
  /* 0x03a0 */ void* PartitionObject;
  /* 0x03a4 */ struct _EJOB* PartitionOwnerJob;
  /* 0x03a8 */ union _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState;
  /* 0x03b0 */ unsigned __int64 KernelWaitTime;
  /* 0x03b8 */ unsigned __int64 UserWaitTime;
} EJOB, *PEJOB; /* size: 0x03c0 */

typedef struct _SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0004 */ unsigned long TotalNumberOfPtes;
  /* 0x0008 */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x000c */ unsigned long NumberOfCommittedPages;
  /* 0x0010 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0018 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0018 */ void* BasedAddress;
  }; /* size: 0x0004 */
  /* 0x001c */ struct _EX_PUSH_LOCK SegmentLock;
  union
  {
    union
    {
      /* 0x0020 */ unsigned long ImageCommitment;
      /* 0x0020 */ unsigned long CreatingProcessId;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    union
    {
      /* 0x0024 */ struct _MI_SECTION_IMAGE_INFORMATION* ImageInformation;
      /* 0x0024 */ void* FirstMappedVa;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  /* 0x0028 */ struct _MMPTE* PrototypePte;
  /* 0x002c */ long __PADDING__[1];
} SEGMENT, *PSEGMENT; /* size: 0x0030 */

struct _JOB_NOTIFICATION_INFORMATION;

typedef struct _WNF_TYPE_ID
{
  /* 0x0000 */ struct _GUID TypeId;
} WNF_TYPE_ID, *PWNF_TYPE_ID; /* size: 0x0010 */

struct _JOB_CPU_RATE_CONTROL;

typedef struct _DBGKD_FILL_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned short Flags;
  /* 0x000e */ unsigned short PatternLength;
} DBGKD_FILL_MEMORY, *PDBGKD_FILL_MEMORY; /* size: 0x0010 */

typedef union _KALPC_DIRECT_EVENT
{
  union
  {
    /* 0x0000 */ unsigned long Value;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long DirectType : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long EventReferenced : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long EventObjectBits : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} KALPC_DIRECT_EVENT, *PKALPC_DIRECT_EVENT; /* size: 0x0004 */

typedef struct _ALPC_DISPATCH_CONTEXT
{
  /* 0x0000 */ struct _ALPC_PORT* PortObject;
  /* 0x0004 */ struct _KALPC_MESSAGE* Message;
  /* 0x0008 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x000c */ struct _ETHREAD* TargetThread;
  /* 0x0010 */ struct _ALPC_PORT* TargetPort;
  /* 0x0014 */ union _KALPC_DIRECT_EVENT DirectEvent;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned short TotalLength;
  /* 0x001e */ unsigned short Type;
  /* 0x0020 */ unsigned short DataInfoOffset;
  /* 0x0022 */ unsigned char SignalCompletion;
  /* 0x0023 */ unsigned char PostedToCompletionList;
} ALPC_DISPATCH_CONTEXT, *PALPC_DISPATCH_CONTEXT; /* size: 0x0024 */

typedef struct _OBP_SYSTEM_DOS_DEVICE_STATE
{
  /* 0x0000 */ unsigned long GlobalDeviceMap;
  /* 0x0004 */ unsigned long LocalDeviceCount[26];
} OBP_SYSTEM_DOS_DEVICE_STATE, *POBP_SYSTEM_DOS_DEVICE_STATE; /* size: 0x006c */

typedef struct _OBJECT_NAMESPACE_LOOKUPTABLE
{
  /* 0x0000 */ struct _LIST_ENTRY HashBuckets[37];
  /* 0x0128 */ struct _EX_PUSH_LOCK Lock;
  /* 0x012c */ unsigned long NumberOfPrivateSpaces;
} OBJECT_NAMESPACE_LOOKUPTABLE, *POBJECT_NAMESPACE_LOOKUPTABLE; /* size: 0x0130 */

typedef struct _OBP_SILODRIVERSTATE
{
  /* 0x0000 */ struct _DEVICE_MAP* SystemDeviceMap;
  /* 0x0004 */ struct _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState;
  /* 0x0070 */ struct _EX_PUSH_LOCK DeviceMapLock;
  /* 0x0074 */ struct _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable;
} OBP_SILODRIVERSTATE, *POBP_SILODRIVERSTATE; /* size: 0x01a4 */

typedef struct _SEP_RM_LSA_CONNECTION_STATE
{
  /* 0x0000 */ void* LsaProcessHandle;
  /* 0x0004 */ void* LsaCommandPortHandle;
  /* 0x0008 */ void* SepRmThreadHandle;
  /* 0x000c */ void* RmCommandPortHandle;
  /* 0x0010 */ void* RmCommandServerPortHandle;
  /* 0x0014 */ void* LsaCommandPortSectionHandle;
  /* 0x0018 */ union _LARGE_INTEGER LsaCommandPortSectionSize;
  /* 0x0020 */ void* LsaViewPortMemory;
  /* 0x0024 */ void* RmViewPortMemory;
  /* 0x0028 */ long LsaCommandPortMemoryDelta;
  /* 0x002c */ unsigned char LsaCommandPortActive;
  /* 0x002d */ char __PADDING__[3];
} SEP_RM_LSA_CONNECTION_STATE, *PSEP_RM_LSA_CONNECTION_STATE; /* size: 0x0030 */

typedef struct _ESERVERSILO_GLOBALS
{
  /* 0x0000 */ struct _OBP_SILODRIVERSTATE ObSiloState;
  /* 0x01a4 */ struct _SEP_SILOSTATE SeSiloState;
  /* 0x01bc */ long Padding_184;
  /* 0x01c0 */ struct _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState;
  /* 0x01f0 */ struct _ETW_SILODRIVERSTATE* EtwSiloState;
  /* 0x01f4 */ struct _EPROCESS* MiSessionLeaderProcess;
  /* 0x01f8 */ struct _EPROCESS* ExpDefaultErrorPortProcess;
  /* 0x01fc */ void* ExpDefaultErrorPort;
  /* 0x0200 */ unsigned long HardErrorState;
  /* 0x0204 */ struct _EXP_LICENSE_STATE* ExpLicenseState;
  /* 0x0208 */ struct _WNF_SILODRIVERSTATE WnfSiloState;
  /* 0x0238 */ struct _DBGK_SILOSTATE DbgkSiloState;
  /* 0x0248 */ struct _UNICODE_STRING PsProtectedCurrentDirectory;
  /* 0x0250 */ struct _UNICODE_STRING PsProtectedEnvironment;
  /* 0x0258 */ void* ApiSetSection;
  /* 0x025c */ void* ApiSetSchema;
  /* 0x0260 */ unsigned char OneCoreForwardersEnabled;
  /* 0x0261 */ char Padding_185[3];
  /* 0x0264 */ struct _NLS_STATE* NlsState;
  /* 0x0268 */ struct _UNICODE_STRING NtSystemRoot;
  /* 0x0270 */ struct _UNICODE_STRING SiloRootDirectoryName;
  /* 0x0278 */ struct _PSP_STORAGE* Storage;
  /* 0x027c */ enum _SERVERSILO_STATE State;
  /* 0x0280 */ long ExitStatus;
  /* 0x0284 */ struct _KEVENT* DeleteEvent;
  /* 0x0288 */ struct _SILO_USER_SHARED_DATA* UserSharedData;
  /* 0x028c */ void* UserSharedSection;
  /* 0x0290 */ struct _WORK_QUEUE_ITEM TerminateWorkItem;
  /* 0x02a0 */ unsigned char IsDownlevelContainer;
  /* 0x02a1 */ char __PADDING__[7];
} ESERVERSILO_GLOBALS, *PESERVERSILO_GLOBALS; /* size: 0x02a8 */

typedef struct _OBJECT_REF_STACK_INFO
{
  /* 0x0000 */ unsigned long Sequence;
  /* 0x0004 */ unsigned short Index;
  /* 0x0006 */ unsigned short NumTraces;
  /* 0x0008 */ unsigned long Tag;
} OBJECT_REF_STACK_INFO, *POBJECT_REF_STACK_INFO; /* size: 0x000c */

typedef struct _DBGKD_SEARCH_MEMORY
{
  union
  {
    /* 0x0000 */ unsigned __int64 SearchAddress;
    /* 0x0000 */ unsigned __int64 FoundAddress;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 SearchLength;
  /* 0x0010 */ unsigned long PatternLength;
  /* 0x0014 */ long __PADDING__[1];
} DBGKD_SEARCH_MEMORY, *PDBGKD_SEARCH_MEMORY; /* size: 0x0018 */

typedef struct _KLDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0008 */ void* ExceptionTable;
  /* 0x000c */ unsigned long ExceptionTableSize;
  /* 0x0010 */ void* GpValue;
  /* 0x0014 */ struct _NON_PAGED_DEBUG_INFO* NonPagedDebugInfo;
  /* 0x0018 */ void* DllBase;
  /* 0x001c */ void* EntryPoint;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ struct _UNICODE_STRING FullDllName;
  /* 0x002c */ struct _UNICODE_STRING BaseDllName;
  /* 0x0034 */ unsigned long Flags;
  /* 0x0038 */ unsigned short LoadCount;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x003a */ unsigned short SignatureLevel : 4; /* bit position: 0 */
        /* 0x003a */ unsigned short SignatureType : 3; /* bit position: 4 */
        /* 0x003a */ unsigned short Unused : 9; /* bit position: 7 */
      }; /* bitfield */
      /* 0x003a */ unsigned short EntireField;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ u1;
  /* 0x003c */ void* SectionPointer;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned long CoverageSectionSize;
  /* 0x0048 */ void* CoverageSection;
  /* 0x004c */ void* LoadedImports;
  /* 0x0050 */ void* Spare;
  /* 0x0054 */ unsigned long SizeOfImageNotRounded;
  /* 0x0058 */ unsigned long TimeDateStamp;
} KLDR_DATA_TABLE_ENTRY, *PKLDR_DATA_TABLE_ENTRY; /* size: 0x005c */

typedef struct _DEVICE_MAP
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* DosDevicesDirectory;
  /* 0x0004 */ struct _OBJECT_DIRECTORY* GlobalDosDevicesDirectory;
  /* 0x0008 */ void* DosDevicesDirectoryHandle;
  /* 0x000c */ volatile long ReferenceCount;
  /* 0x0010 */ unsigned long DriveMap;
  /* 0x0014 */ unsigned char DriveType[32];
  /* 0x0034 */ struct _EJOB* ServerSilo;
} DEVICE_MAP, *PDEVICE_MAP; /* size: 0x0038 */

typedef struct _OBJECT_DIRECTORY_ENTRY
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY_ENTRY* ChainLink;
  /* 0x0004 */ void* Object;
  /* 0x0008 */ unsigned long HashValue;
} OBJECT_DIRECTORY_ENTRY, *POBJECT_DIRECTORY_ENTRY; /* size: 0x000c */

typedef struct _RELATIVE_SYMLINK_INFO
{
  /* 0x0000 */ unsigned short ExposedNamespaceLength;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned short DeviceNameLength;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ struct _RELATIVE_SYMLINK_INFO* InteriorMountPoint;
  /* 0x000c */ struct _UNICODE_STRING OpenedName;
} RELATIVE_SYMLINK_INFO, *PRELATIVE_SYMLINK_INFO; /* size: 0x0014 */

typedef struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
{
  /* 0x0000 */ unsigned long DeviceGroupsCount;
  /* 0x0004 */ struct _SID_AND_ATTRIBUTES* pDeviceGroups;
  /* 0x0008 */ unsigned long RestrictedDeviceGroupsCount;
  /* 0x000c */ struct _SID_AND_ATTRIBUTES* pRestrictedDeviceGroups;
  /* 0x0010 */ struct _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash;
  /* 0x0098 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash;
  /* 0x0120 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pUserSecurityAttributes;
  /* 0x0124 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pDeviceSecurityAttributes;
  /* 0x0128 */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedUserSecurityAttributes;
  /* 0x012c */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pRestrictedDeviceSecurityAttributes;
} AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION, *PAUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION; /* size: 0x0130 */

typedef struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
{
  /* 0x0000 */ unsigned long SecurityAttributeCount;
  /* 0x0004 */ struct _LIST_ENTRY SecurityAttributesList;
  /* 0x000c */ unsigned long WorkingSecurityAttributeCount;
  /* 0x0010 */ struct _LIST_ENTRY WorkingSecurityAttributesList;
} AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION, *PAUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION; /* size: 0x0018 */

typedef struct _SEP_SID_VALUES_BLOCK
{
  /* 0x0000 */ unsigned long BlockLength;
  /* 0x0004 */ long ReferenceCount;
  /* 0x0008 */ unsigned long SidCount;
  /* 0x000c */ unsigned long SidValuesStart;
} SEP_SID_VALUES_BLOCK, *PSEP_SID_VALUES_BLOCK; /* size: 0x0010 */

typedef struct _HEAP_LFH_SUBSEGMENT_OWNER
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char IsBucket : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char Spare0 : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0001 */ unsigned char BucketIndex;
  union
  {
    /* 0x0002 */ unsigned char SlotCount;
    /* 0x0002 */ unsigned char SlotIndex;
  }; /* size: 0x0001 */
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned long AvailableSubsegmentCount;
  /* 0x0008 */ unsigned long Lock;
  /* 0x000c */ struct _LIST_ENTRY AvailableSubsegmentList;
  /* 0x0014 */ struct _LIST_ENTRY FullSubsegmentList;
} HEAP_LFH_SUBSEGMENT_OWNER, *PHEAP_LFH_SUBSEGMENT_OWNER; /* size: 0x001c */

typedef struct _HEAP_LFH_BUCKET
{
  /* 0x0000 */ struct _HEAP_LFH_SUBSEGMENT_OWNER State;
  /* 0x001c */ unsigned long TotalBlockCount;
  /* 0x0020 */ unsigned long TotalSubsegmentCount;
  /* 0x0024 */ unsigned long ReciprocalBlockSize;
  /* 0x0028 */ unsigned char Shift;
  /* 0x0029 */ unsigned char ContentionCount;
  /* 0x002a */ char Padding_186[2];
  /* 0x002c */ unsigned long AffinityMappingLock;
  /* 0x0030 */ unsigned char* ProcAffinityMapping;
  /* 0x0034 */ struct _HEAP_LFH_AFFINITY_SLOT** AffinitySlots;
} HEAP_LFH_BUCKET, *PHEAP_LFH_BUCKET; /* size: 0x0038 */

typedef struct _ETW_LAST_ENABLE_INFO
{
  /* 0x0000 */ union _LARGE_INTEGER EnableFlags;
  /* 0x0008 */ unsigned short LoggerId;
  /* 0x000a */ unsigned char Level;
  struct /* bitfield */
  {
    /* 0x000b */ unsigned char Enabled : 1; /* bit position: 0 */
    /* 0x000b */ unsigned char InternalFlag : 7; /* bit position: 1 */
  }; /* bitfield */
  /* 0x000c */ long __PADDING__[1];
} ETW_LAST_ENABLE_INFO, *PETW_LAST_ENABLE_INFO; /* size: 0x0010 */

typedef struct _ETW_GUID_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY GuidList;
  /* 0x0008 */ struct _LIST_ENTRY SiloGuidList;
  /* 0x0010 */ volatile long RefCount;
  /* 0x0014 */ struct _GUID Guid;
  /* 0x0024 */ struct _LIST_ENTRY RegListHead;
  /* 0x002c */ void* SecurityDescriptor;
  union
  {
    /* 0x0030 */ struct _ETW_LAST_ENABLE_INFO LastEnable;
    /* 0x0030 */ unsigned __int64 MatchId;
  }; /* size: 0x0010 */
  /* 0x0040 */ struct _TRACE_ENABLE_INFO ProviderEnableInfo;
  /* 0x0060 */ struct _TRACE_ENABLE_INFO EnableInfo[8];
  /* 0x0160 */ struct _ETW_FILTER_HEADER* FilterData;
  /* 0x0164 */ struct _ETW_SILODRIVERSTATE* SiloState;
  /* 0x0168 */ struct _ETW_GUID_ENTRY* HostEntry;
  /* 0x016c */ struct _EX_PUSH_LOCK Lock;
  /* 0x0170 */ struct _ETHREAD* LockOwner;
  /* 0x0174 */ long __PADDING__[1];
} ETW_GUID_ENTRY, *PETW_GUID_ENTRY; /* size: 0x0178 */

typedef struct _ETW_SILODRIVERSTATE
{
  /* 0x0000 */ struct _EJOB* Silo;
  /* 0x0004 */ struct _ESERVERSILO_GLOBALS* SiloGlobals;
  /* 0x0008 */ unsigned long MaxLoggers;
  /* 0x000c */ long Padding_187;
  /* 0x0010 */ struct _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry;
  /* 0x0188 */ struct _EX_RUNDOWN_REF_CACHE_AWARE** EtwpLoggerRundown;
  /* 0x018c */ struct _WMI_LOGGER_CONTEXT** EtwpLoggerContext;
  /* 0x0190 */ struct _ETW_HASH_BUCKET EtwpGuidHashTable[64];
  /* 0x0890 */ unsigned short EtwpSecurityLoggers[8];
  /* 0x08a0 */ unsigned char EtwpSecurityProviderEnableMask;
  /* 0x08a1 */ char Padding_188[3];
  /* 0x08a4 */ long EtwpShutdownInProgress;
  /* 0x08a8 */ unsigned long EtwpSecurityProviderPID;
  /* 0x08ac */ struct _ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable;
  /* 0x08bc */ struct _ETW_COUNTERS EtwpCounters;
  /* 0x08cc */ long Padding_189;
  /* 0x08d0 */ union _LARGE_INTEGER LogfileBytesWritten;
  /* 0x08d8 */ struct _ETW_SILO_TRACING_BLOCK* ProcessorBlocks;
  /* 0x08dc */ struct _EX_WNF_SUBSCRIPTION* ContainerRestoreWnfSubscription;
  /* 0x08e0 */ struct _GUID PartitionId;
  /* 0x08f0 */ struct _GUID ParentId;
  /* 0x0900 */ union _LARGE_INTEGER QpcOffsetFromRoot;
  /* 0x0908 */ char* PartitionName;
  /* 0x090c */ unsigned short PartitionNameSize;
  /* 0x090e */ unsigned short UnusedPadding;
  /* 0x0910 */ unsigned long PartitionType;
  /* 0x0914 */ struct _ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings;
  /* 0x0a88 */ struct _KMUTANT EtwpStartTraceMutex;
} ETW_SILODRIVERSTATE, *PETW_SILODRIVERSTATE; /* size: 0x0aa8 */

typedef struct _BOOT_ENTROPY_SOURCE_LDR_RESULT
{
  /* 0x0000 */ enum _BOOT_ENTROPY_SOURCE_ID SourceId;
  /* 0x0004 */ long Padding_190;
  /* 0x0008 */ unsigned __int64 Policy;
  /* 0x0010 */ enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
  /* 0x0014 */ long ResultStatus;
  /* 0x0018 */ unsigned __int64 Time;
  /* 0x0020 */ unsigned long EntropyLength;
  /* 0x0024 */ unsigned char EntropyData[64];
  /* 0x0064 */ long __PADDING__[1];
} BOOT_ENTROPY_SOURCE_LDR_RESULT, *PBOOT_ENTROPY_SOURCE_LDR_RESULT; /* size: 0x0068 */

typedef struct _BOOT_ENTROPY_LDR_RESULT
{
  /* 0x0000 */ unsigned long maxEntropySources;
  /* 0x0004 */ long Padding_191;
  /* 0x0008 */ struct _BOOT_ENTROPY_SOURCE_LDR_RESULT EntropySourceResult[10];
  /* 0x0418 */ unsigned char SeedBytesForCng[48];
  /* 0x0448 */ unsigned char RngBytesForNtoskrnl[1024];
  /* 0x0848 */ unsigned char KdEntropy[32];
} BOOT_ENTROPY_LDR_RESULT, *PBOOT_ENTROPY_LDR_RESULT; /* size: 0x0868 */

typedef struct _ETW_FILTER_HEADER
{
  /* 0x0000 */ long FilterFlags;
  /* 0x0004 */ struct _ETW_FILTER_PID* PidFilter;
  /* 0x0008 */ struct _ETW_FILTER_STRING_TOKEN* ExeFilter;
  /* 0x000c */ struct _ETW_FILTER_STRING_TOKEN* PkgIdFilter;
  /* 0x0010 */ struct _ETW_FILTER_STRING_TOKEN* PkgAppIdFilter;
  /* 0x0014 */ struct _ETW_FILTER_STRING_TOKEN* ContainerFilter;
  /* 0x0018 */ struct _ETW_PERFECT_HASH_FUNCTION* StackWalkIdFilter;
  /* 0x001c */ struct _ETW_FILTER_EVENT_NAME_DATA* StackWalkNameFilter;
  /* 0x0020 */ struct _EVENT_FILTER_LEVEL_KW* StackWalkLevelKwFilter;
  /* 0x0024 */ struct _ETW_PERFECT_HASH_FUNCTION* EventIdFilter;
  /* 0x0028 */ struct _ETW_PAYLOAD_FILTER* PayloadFilter;
  /* 0x002c */ struct _EVENT_FILTER_HEADER* ProviderSideFilter;
  /* 0x0030 */ struct _ETW_FILTER_EVENT_NAME_DATA* EventNameFilter;
} ETW_FILTER_HEADER, *PETW_FILTER_HEADER; /* size: 0x0034 */

typedef struct _ETW_FILTER_PID
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Pids[8];
} ETW_FILTER_PID, *PETW_FILTER_PID; /* size: 0x0024 */

typedef struct _ETW_FILTER_EVENT_NAME_DATA
{
  /* 0x0000 */ unsigned char FilterIn;
  /* 0x0001 */ unsigned char Level;
  /* 0x0002 */ char Padding_192[6];
  /* 0x0008 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0010 */ unsigned __int64 MatchAllKeyword;
  /* 0x0018 */ struct _RTL_HASH_TABLE NameTable;
  /* 0x0024 */ long __PADDING__[1];
} ETW_FILTER_EVENT_NAME_DATA, *PETW_FILTER_EVENT_NAME_DATA; /* size: 0x0028 */

typedef struct _WORK_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY WorkQueueLinks;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ struct _FILE_OBJECT* FileObject;
        /* 0x000c */ void* DiskIoAttribution;
      } /* size: 0x0008 */ Read;
      struct
      {
        /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
      } /* size: 0x0004 */ Write;
      struct
      {
        /* 0x0008 */ struct _KEVENT* Event;
      } /* size: 0x0004 */ Event;
      struct
      {
        /* 0x0008 */ unsigned long Reason;
      } /* size: 0x0004 */ Notification;
      struct
      {
        /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x000c */ struct _IO_STATUS_BLOCK* IoStatus;
        /* 0x0010 */ struct _KEVENT CallerWaitEvent;
        /* 0x0020 */ unsigned char IsLowPriWriteBehind;
        /* 0x0021 */ char __PADDING__[3];
      } /* size: 0x001c */ LowPriWrite;
      struct
      {
        /* 0x0008 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
        /* 0x0004 */ long Padding_193;
        /* 0x0010 */ union _LARGE_INTEGER FileOffset;
        /* 0x0018 */ struct _FILE_OBJECT* FileObject;
        /* 0x001c */ unsigned long Length;
        /* 0x0020 */ struct _SINGLE_LIST_ENTRY* PrefetchList;
        /* 0x0024 */ unsigned long PrefetchPagePriority;
        /* 0x0028 */ struct _MDL* Mdl;
        /* 0x002c */ struct _IO_STATUS_BLOCK* IoStatusBlock;
        /* 0x0030 */ struct _CC_ASYNC_READ_CONTEXT* CallbackContext;
        /* 0x0034 */ struct _EPROCESS* OriginatingProcess;
        /* 0x0038 */ struct _ETHREAD* IoIssuerThread;
        /* 0x003c */ void* DiskIoAttribution;
        /* 0x0040 */ char RequestorMode;
        /* 0x0039 */ char Padding_194[3];
        /* 0x0044 */ unsigned long NestingLevel;
        /* 0x0048 */ union _LARGE_INTEGER StartTime;
      } /* size: 0x0048 */ AsyncRead;
    }; /* size: 0x0048 */
  } /* size: 0x0048 */ Parameters;
  /* 0x0050 */ unsigned char Function;
  /* 0x0051 */ char Padding_195[3];
  /* 0x0054 */ struct _CC_PARTITION* Partition;
} WORK_QUEUE_ENTRY, *PWORK_QUEUE_ENTRY; /* size: 0x0058 */

typedef struct _ETW_PAYLOAD_FILTER
{
  /* 0x0000 */ long RefCount;
  /* 0x0004 */ long Padding_196;
  /* 0x0008 */ struct _AGGREGATED_PAYLOAD_FILTER PayloadFilter;
} ETW_PAYLOAD_FILTER, *PETW_PAYLOAD_FILTER; /* size: 0x0058 */

typedef struct _HV_X64_HYPERVISOR_FEATURES
{
  /* 0x0000 */ union _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned int MaxSupportedCState : 4; /* bit position: 0 */
    /* 0x0008 */ unsigned int HpetNeededForC3PowerState_Deprecated : 1; /* bit position: 4 */
    /* 0x0008 */ unsigned int Reserved : 27; /* bit position: 5 */
  }; /* bitfield */
  struct /* bitfield */
  {
    /* 0x000c */ unsigned int MwaitAvailable_Deprecated : 1; /* bit position: 0 */
    /* 0x000c */ unsigned int GuestDebuggingAvailable : 1; /* bit position: 1 */
    /* 0x000c */ unsigned int PerformanceMonitorsAvailable : 1; /* bit position: 2 */
    /* 0x000c */ unsigned int CpuDynamicPartitioningAvailable : 1; /* bit position: 3 */
    /* 0x000c */ unsigned int XmmRegistersForFastHypercallAvailable : 1; /* bit position: 4 */
    /* 0x000c */ unsigned int GuestIdleAvailable : 1; /* bit position: 5 */
    /* 0x000c */ unsigned int HypervisorSleepStateSupportAvailable : 1; /* bit position: 6 */
    /* 0x000c */ unsigned int NumaDistanceQueryAvailable : 1; /* bit position: 7 */
    /* 0x000c */ unsigned int FrequencyRegsAvailable : 1; /* bit position: 8 */
    /* 0x000c */ unsigned int SyntheticMachineCheckAvailable : 1; /* bit position: 9 */
    /* 0x000c */ unsigned int GuestCrashRegsAvailable : 1; /* bit position: 10 */
    /* 0x000c */ unsigned int DebugRegsAvailable : 1; /* bit position: 11 */
    /* 0x000c */ unsigned int Npiep1Available : 1; /* bit position: 12 */
    /* 0x000c */ unsigned int DisableHypervisorAvailable : 1; /* bit position: 13 */
    /* 0x000c */ unsigned int ExtendedGvaRangesForFlushVirtualAddressListAvailable : 1; /* bit position: 14 */
    /* 0x000c */ unsigned int FastHypercallOutputAvailable : 1; /* bit position: 15 */
    /* 0x000c */ unsigned int SvmFeaturesAvailable : 1; /* bit position: 16 */
    /* 0x000c */ unsigned int SintPollingModeAvailable : 1; /* bit position: 17 */
    /* 0x000c */ unsigned int HypercallMsrLockAvailable : 1; /* bit position: 18 */
    /* 0x000c */ unsigned int DirectSyntheticTimers : 1; /* bit position: 19 */
    /* 0x000c */ unsigned int RegisterPatAvailable : 1; /* bit position: 20 */
    /* 0x000c */ unsigned int RegisterBndcfgsAvailable : 1; /* bit position: 21 */
    /* 0x000c */ unsigned int WatchdogTimerAvailable : 1; /* bit position: 22 */
    /* 0x000c */ unsigned int SyntheticTimeUnhaltedTimerAvailable : 1; /* bit position: 23 */
    /* 0x000c */ unsigned int DeviceDomainsAvailable : 1; /* bit position: 24 */
    /* 0x000c */ unsigned int S1DeviceDomainsAvailable : 1; /* bit position: 25 */
    /* 0x000c */ unsigned int LbrAvailable : 1; /* bit position: 26 */
    /* 0x000c */ unsigned int IptAvailable : 1; /* bit position: 27 */
    /* 0x000c */ unsigned int CrossVtlFlushAvailable : 1; /* bit position: 28 */
    /* 0x000c */ unsigned int IdleSpecCtrlAvailable : 1; /* bit position: 29 */
    /* 0x000c */ unsigned int Reserved1 : 2; /* bit position: 30 */
  }; /* bitfield */
} HV_X64_HYPERVISOR_FEATURES, *PHV_X64_HYPERVISOR_FEATURES; /* size: 0x0010 */

typedef struct _EVENT_FILTER_HEADER
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char Reserved[5];
  /* 0x0008 */ unsigned __int64 InstanceId;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long NextOffset;
} EVENT_FILTER_HEADER, *PEVENT_FILTER_HEADER; /* size: 0x0018 */

typedef struct _CC_VOLUME_TELEMETRY
{
  /* 0x0000 */ struct _GUID DeviceGuid;
  /* 0x0010 */ unsigned __int64 TotalDirtyPages;
  /* 0x0018 */ unsigned __int64 MaxDirtyPages;
  /* 0x0020 */ unsigned __int64 DirtyPageSamples;
  /* 0x0028 */ unsigned __int64 TotalPagesQueuedToDisk;
  /* 0x0030 */ unsigned __int64 MaxPagesQueuedToDisk;
  /* 0x0038 */ unsigned __int64 PagesQueuedToDiskSamples;
  /* 0x0040 */ unsigned __int64 TotalLoggedPagesQueuedToDisk;
  /* 0x0048 */ unsigned __int64 MaxLoggedPagesQueuedToDisk;
  /* 0x0050 */ unsigned __int64 LoggedPagesQueuedToDiskSamples;
  /* 0x0058 */ unsigned __int64 ReadTotalBytes;
  /* 0x0060 */ unsigned __int64 ReadPagedInTotalBytes;
  /* 0x0068 */ unsigned __int64 ReadAheadTotalBytes;
  /* 0x0070 */ unsigned __int64 TotalSynchronousReadIoCount;
  /* 0x0078 */ unsigned __int64 TotalSynchronousNonBlockingReadIoCount;
  /* 0x0080 */ unsigned __int64 TotalFailedSynchronousNonBlockingReadIoCount;
  /* 0x0088 */ unsigned __int64 TotalWrites;
  /* 0x0090 */ unsigned __int64 TotalHardThrottleWrites;
  /* 0x0098 */ unsigned __int64 TotalSoftThrottleWrites;
  /* 0x00a0 */ unsigned __int64 SynchronousReadIoMaxLatency;
  /* 0x00a8 */ unsigned __int64 SynchronousReadIoNonBlockingMaxLatency;
  /* 0x00b0 */ unsigned __int64 SynchronousReadIoCounts[12];
  /* 0x0110 */ unsigned __int64 SynchronousReadTotalLatency[12];
  /* 0x0170 */ unsigned __int64 SynchronousReadNonBlockingIoCounts[12];
  /* 0x01d0 */ unsigned __int64 SynchronousReadNonBlockingTotalLatency[12];
  /* 0x0230 */ unsigned __int64 TotalSynchronousWriteIoCount;
  /* 0x0238 */ unsigned __int64 TotalSynchronousNonBlockingWriteIoCount;
  /* 0x0240 */ unsigned __int64 TotalFailedSynchronousNonBlockingWriteIoCount;
  /* 0x0248 */ unsigned __int64 SynchronousWriteIoMaxLatency;
  /* 0x0250 */ unsigned __int64 SynchronousWriteIoNonBlockingMaxLatency;
  /* 0x0258 */ unsigned __int64 SynchronousWriteIoCounts[12];
  /* 0x02b8 */ unsigned __int64 SynchronousWriteTotalLatency[12];
  /* 0x0318 */ unsigned __int64 SynchronousWriteNonBlockingIoCounts[12];
  /* 0x0378 */ unsigned __int64 SynchronousWriteNonBlockingTotalLatency[12];
  /* 0x03d8 */ unsigned __int64 TotalAsynchronousReadIoCount;
  /* 0x03e0 */ unsigned __int64 AsynchronousReadIoMaxLatency;
  /* 0x03e8 */ unsigned __int64 AsynchronousReadIoCounts[12];
  /* 0x0448 */ unsigned __int64 AsynchronousReadTotalLatency[12];
  /* 0x04a8 */ unsigned __int64 CumulativeTotalDirtyPages;
  /* 0x04b0 */ unsigned __int64 CumulativeMaxDirtyPages;
  /* 0x04b8 */ unsigned __int64 CumulativeDirtyPageSamples;
  /* 0x04c0 */ unsigned __int64 CumulativeTotalPagesQueuedToDisk;
  /* 0x04c8 */ unsigned __int64 CumulativeMaxPagesQueuedToDisk;
  /* 0x04d0 */ unsigned __int64 CumulativePagesQueuedToDiskSamples;
  /* 0x04d8 */ unsigned __int64 CumulativeTotalLoggedPagesQueuedToDisk;
  /* 0x04e0 */ unsigned __int64 CumulativeMaxLoggedPagesQueuedToDisk;
  /* 0x04e8 */ unsigned __int64 CumulativeLoggedPagesQueuedToDiskSamples;
  /* 0x04f0 */ unsigned __int64 CumulativeReadTotalBytes;
  /* 0x04f8 */ unsigned __int64 CumulativeReadPagedInTotalBytes;
  /* 0x0500 */ unsigned __int64 CumulativeReadAheadTotalBytes;
  /* 0x0508 */ unsigned __int64 CumulativeTotalSynchronousReadIoCount;
  /* 0x0510 */ unsigned __int64 CumulativeTotalSynchronousNonBlockingReadIoCount;
  /* 0x0518 */ unsigned __int64 CumulativeTotalFailedSynchronousNonBlockingReadIoCount;
  /* 0x0520 */ unsigned __int64 CumulativeTotalWrites;
  /* 0x0528 */ unsigned __int64 CumulativeTotalHardThrottleWrites;
  /* 0x0530 */ unsigned __int64 CumulativeTotalSoftThrottleWrites;
  /* 0x0538 */ unsigned __int64 CumulativeSynchronousReadIoMaxLatency;
  /* 0x0540 */ unsigned __int64 CumulativeSynchronousReadIoNonBlockingMaxLatency;
  /* 0x0548 */ unsigned __int64 CumulativeSynchronousReadIoCounts[12];
  /* 0x05a8 */ unsigned __int64 CumulativeSynchronousReadTotalLatency[12];
  /* 0x0608 */ unsigned __int64 CumulativeSynchronousReadNonBlockingIoCounts[12];
  /* 0x0668 */ unsigned __int64 CumulativeSynchronousReadNonBlockingTotalLatency[12];
  /* 0x06c8 */ unsigned __int64 CumulativeTotalSynchronousWriteIoCount;
  /* 0x06d0 */ unsigned __int64 CumulativeTotalSynchronousNonBlockingWriteIoCount;
  /* 0x06d8 */ unsigned __int64 CumulativeTotalFailedSynchronousNonBlockingWriteIoCount;
  /* 0x06e0 */ unsigned __int64 CumulativeSynchronousWriteIoMaxLatency;
  /* 0x06e8 */ unsigned __int64 CumulativeSynchronousWriteIoNonBlockingMaxLatency;
  /* 0x06f0 */ unsigned __int64 CumulativeSynchronousWriteIoCounts[12];
  /* 0x0750 */ unsigned __int64 CumulativeSynchronousWriteTotalLatency[12];
  /* 0x07b0 */ unsigned __int64 CumulativeSynchronousWriteNonBlockingIoCounts[12];
  /* 0x0810 */ unsigned __int64 CumulativeSynchronousWriteNonBlockingTotalLatency[12];
  /* 0x0870 */ unsigned __int64 CumulativeTotalAsynchronousReadIoCount;
  /* 0x0878 */ unsigned __int64 CumulativeAsynchronousReadIoMaxLatency;
  /* 0x0880 */ unsigned __int64 CumulativeAsynchronousReadIoCounts[12];
  /* 0x08e0 */ unsigned __int64 CumulativeAsynchronousReadTotalLatency[12];
} CC_VOLUME_TELEMETRY, *PCC_VOLUME_TELEMETRY; /* size: 0x0940 */

typedef struct _EX_RUNDOWN_REF_CACHE_AWARE
{
  /* 0x0000 */ struct _EX_RUNDOWN_REF* RunRefs;
  /* 0x0004 */ void* PoolToFree;
  /* 0x0008 */ unsigned long RunRefSize;
  /* 0x000c */ unsigned long Number;
} EX_RUNDOWN_REF_CACHE_AWARE, *PEX_RUNDOWN_REF_CACHE_AWARE; /* size: 0x0010 */

typedef struct _WMI_BUFFER_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  /* 0x0004 */ unsigned long SavedOffset;
  /* 0x0008 */ volatile unsigned long CurrentOffset;
  /* 0x000c */ volatile long ReferenceCount;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ __int64 SequenceNumber;
  union
  {
    struct /* bitfield */
    {
      /* 0x0020 */ unsigned __int64 ClockType : 3; /* bit position: 0 */
      /* 0x0020 */ unsigned __int64 Frequency : 61; /* bit position: 3 */
    }; /* bitfield */
    /* 0x0020 */ struct _SINGLE_LIST_ENTRY SlistEntry;
    /* 0x0020 */ struct _WMI_BUFFER_HEADER* NextBuffer;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _ETW_BUFFER_CONTEXT ClientContext;
  /* 0x002c */ enum _ETW_BUFFER_STATE State;
  /* 0x0030 */ unsigned long Offset;
  /* 0x0034 */ unsigned short BufferFlag;
  /* 0x0036 */ unsigned short BufferType;
  union
  {
    /* 0x0038 */ unsigned long Padding1[4];
    /* 0x0038 */ struct _ETW_REF_CLOCK ReferenceTime;
    /* 0x0038 */ struct _LIST_ENTRY GlobalEntry;
    struct
    {
      /* 0x0038 */ void* Pointer0;
      /* 0x003c */ void* Pointer1;
      /* 0x0040 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} WMI_BUFFER_HEADER, *PWMI_BUFFER_HEADER; /* size: 0x0048 */

typedef struct _RTL_HP_SEG_ALLOC_POLICY
{
  /* 0x0000 */ unsigned long MinLargePages;
  /* 0x0004 */ unsigned long MaxLargePages;
  /* 0x0008 */ unsigned char MinUtilization;
  /* 0x0009 */ char __PADDING__[3];
} RTL_HP_SEG_ALLOC_POLICY, *PRTL_HP_SEG_ALLOC_POLICY; /* size: 0x000c */

typedef struct _ETW_REALTIME_CONSUMER
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ void* ProcessHandle;
  /* 0x000c */ struct _EPROCESS* ProcessObject;
  /* 0x0010 */ void* NextNotDelivered;
  /* 0x0014 */ void* RealtimeConnectContext;
  /* 0x0018 */ struct _KEVENT* DisconnectEvent;
  /* 0x001c */ struct _KEVENT* DataAvailableEvent;
  /* 0x0020 */ unsigned long* UserBufferCount;
  /* 0x0024 */ struct _SINGLE_LIST_ENTRY* UserBufferListHead;
  /* 0x0028 */ unsigned long BuffersLost;
  /* 0x002c */ unsigned long EmptyBuffersCount;
  /* 0x0030 */ unsigned short LoggerId;
  union
  {
    /* 0x0032 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0032 */ unsigned char ShutDownRequested : 1; /* bit position: 0 */
      /* 0x0032 */ unsigned char NewBuffersLost : 1; /* bit position: 1 */
      /* 0x0032 */ unsigned char Disconnected : 1; /* bit position: 2 */
      /* 0x0032 */ unsigned char Notified : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0033 */ char Padding_197;
  /* 0x0034 */ struct _RTL_BITMAP ReservedBufferSpaceBitMap;
  /* 0x003c */ unsigned char* ReservedBufferSpace;
  /* 0x0040 */ unsigned long ReservedBufferSpaceSize;
  /* 0x0044 */ unsigned long UserPagesAllocated;
  /* 0x0048 */ unsigned long UserPagesReused;
  /* 0x004c */ unsigned long* EventsLostCount;
  /* 0x0050 */ unsigned long* BuffersLostCount;
  /* 0x0054 */ struct _ETW_SILODRIVERSTATE* SiloState;
} ETW_REALTIME_CONSUMER, *PETW_REALTIME_CONSUMER; /* size: 0x0058 */

typedef struct _DEVICE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Failed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadOnly : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long Removable : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long ConsoleIn : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long ConsoleOut : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long Input : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long Output : 1; /* bit position: 6 */
  }; /* bitfield */
} DEVICE_FLAGS, *PDEVICE_FLAGS; /* size: 0x0004 */

typedef struct _CONFIGURATION_COMPONENT
{
  /* 0x0000 */ enum _CONFIGURATION_CLASS Class;
  /* 0x0004 */ enum _CONFIGURATION_TYPE Type;
  /* 0x0008 */ struct _DEVICE_FLAGS Flags;
  /* 0x000c */ unsigned short Version;
  /* 0x000e */ unsigned short Revision;
  /* 0x0010 */ unsigned long Key;
  union
  {
    /* 0x0014 */ unsigned long AffinityMask;
    struct
    {
      /* 0x0014 */ unsigned short Group;
      /* 0x0016 */ unsigned short GroupIndex;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0018 */ unsigned long ConfigurationDataLength;
  /* 0x001c */ unsigned long IdentifierLength;
  /* 0x0020 */ char* Identifier;
} CONFIGURATION_COMPONENT, *PCONFIGURATION_COMPONENT; /* size: 0x0024 */

typedef struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS
{
  /* 0x0000 */ volatile unsigned long SmallPagesInUseWithinLarge;
  /* 0x0004 */ volatile unsigned long OpportunisticLargePageCount;
} HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS, *PHEAP_OPPORTUNISTIC_LARGE_PAGE_STATS; /* size: 0x0008 */

typedef struct _TOKEN_MANDATORY_POLICY
{
  /* 0x0000 */ unsigned long Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY; /* size: 0x0004 */

typedef struct _TOKEN_ACCESS_INFORMATION
{
  /* 0x0000 */ struct _SID_AND_ATTRIBUTES_HASH* SidHash;
  /* 0x0004 */ struct _SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;
  /* 0x0008 */ struct _TOKEN_PRIVILEGES* Privileges;
  /* 0x000c */ struct _LUID AuthenticationId;
  /* 0x0014 */ enum _TOKEN_TYPE TokenType;
  /* 0x0018 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x001c */ struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long AppContainerNumber;
  /* 0x0028 */ void* PackageSid;
  /* 0x002c */ struct _SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;
  /* 0x0030 */ void* TrustLevelSid;
  /* 0x0034 */ void* SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION; /* size: 0x0038 */

typedef union _WHEA_REVISION
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char MinorRevision;
      /* 0x0001 */ unsigned char MajorRevision;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} WHEA_REVISION, *PWHEA_REVISION; /* size: 0x0002 */

typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char FRUId : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char FRUText : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char AsUCHAR;
  }; /* size: 0x0001 */
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS; /* size: 0x0001 */

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
{
  /* 0x0000 */ unsigned long SectionOffset;
  /* 0x0004 */ unsigned long SectionLength;
  /* 0x0008 */ union _WHEA_REVISION Revision;
  /* 0x000a */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
  /* 0x0010 */ struct _GUID SectionType;
  /* 0x0020 */ struct _GUID FRUId;
  /* 0x0030 */ enum _WHEA_ERROR_SEVERITY SectionSeverity;
  /* 0x0034 */ char FRUText[20];
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR; /* size: 0x0048 */

typedef struct _FSRTL_ADVANCED_FCB_HEADER
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned char Flags;
  /* 0x0005 */ unsigned char IsFastIoPossible;
  /* 0x0006 */ unsigned char Flags2;
  struct /* bitfield */
  {
    /* 0x0007 */ unsigned char Reserved : 4; /* bit position: 0 */
    /* 0x0007 */ unsigned char Version : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0008 */ struct _ERESOURCE* Resource;
  /* 0x000c */ struct _ERESOURCE* PagingIoResource;
  /* 0x0010 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0018 */ union _LARGE_INTEGER FileSize;
  /* 0x0020 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0028 */ struct _FAST_MUTEX* FastMutex;
  /* 0x002c */ struct _LIST_ENTRY FilterContexts;
  /* 0x0034 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x0038 */ void** FileContextSupportPointer;
  union
  {
    /* 0x003c */ void* Oplock;
    /* 0x003c */ void* ReservedForRemote;
  }; /* size: 0x0004 */
  /* 0x0040 */ void* ReservedContext;
  /* 0x0044 */ long __PADDING__[1];
} FSRTL_ADVANCED_FCB_HEADER, *PFSRTL_ADVANCED_FCB_HEADER; /* size: 0x0048 */

typedef struct _WHEAP_WORK_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long ListLock;
  /* 0x000c */ volatile long ItemCount;
  /* 0x0010 */ struct _KDPC Dpc;
  /* 0x0030 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0040 */ void* WorkRoutine /* function */;
} WHEAP_WORK_QUEUE, *PWHEAP_WORK_QUEUE; /* size: 0x0044 */

typedef struct _ETW_APC_ENTRY
{
  union
  {
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SListEntry;
    /* 0x0000 */ struct _KAPC Apc;
  }; /* size: 0x0030 */
} ETW_APC_ENTRY, *PETW_APC_ENTRY; /* size: 0x0030 */

typedef struct _ETW_PMC_SUPPORT
{
  /* 0x0000 */ enum _KPROFILE_SOURCE* Source;
  /* 0x0004 */ volatile unsigned long HookIdCount;
  /* 0x0008 */ unsigned short HookId[4];
  /* 0x0010 */ volatile unsigned long CountersCount;
  /* 0x0014 */ struct _HAL_PMC_COUNTERS* ProcessorCtrs[1];
} ETW_PMC_SUPPORT, *PETW_PMC_SUPPORT; /* size: 0x0018 */

typedef struct _GDI_TEB_BATCH32
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long HDC;
  /* 0x0008 */ unsigned long Buffer[310];
} GDI_TEB_BATCH32, *PGDI_TEB_BATCH32; /* size: 0x04e0 */

struct _HAL_PMC_COUNTERS;

typedef struct _ETW_IPT_SUPPORT
{
  /* 0x0000 */ void* IptHandle;
  /* 0x0004 */ long Padding_198;
  /* 0x0008 */ unsigned __int64 IptOption;
  /* 0x0010 */ struct _ETW_HW_TRACE_EXT_INTERFACE* EtwHwTraceExtInterface;
  /* 0x0014 */ volatile unsigned long HookIdCount;
  /* 0x0018 */ unsigned short HookId[4];
} ETW_IPT_SUPPORT, *PETW_IPT_SUPPORT; /* size: 0x0020 */

typedef struct _ETW_HW_TRACE_EXT_INTERFACE
{
  /* 0x0000 */ void* StartProcessorTraceOnEachCore /* function */;
  /* 0x0004 */ void* StopProcessorTraceOnEachCore /* function */;
  /* 0x0008 */ void* LogProcessorTraceOnCurrentCore /* function */;
} ETW_HW_TRACE_EXT_INTERFACE, *PETW_HW_TRACE_EXT_INTERFACE; /* size: 0x000c */

typedef struct _DELAY_ACK_FO
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ struct _FILE_OBJECT* OriginalFileObject;
} DELAY_ACK_FO, *PDELAY_ACK_FO; /* size: 0x000c */

typedef struct _MI_PAGE_COLORS
{
  /* 0x0000 */ unsigned long PageSize[3];
} MI_PAGE_COLORS, *PMI_PAGE_COLORS; /* size: 0x000c */

typedef struct _MI_NODE_INFORMATION
{
  /* 0x0000 */ struct _MI_FREE_LARGE_PAGES FreeLargePages[2];
  /* 0x0130 */ struct _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer;
  /* 0x0144 */ long Padding_199[15];
  /* 0x0180 */ struct _RTL_BITMAP FreePageListHeadsBitmap[2];
  /* 0x0190 */ unsigned long FreePageListHeadsBitmapBuffer[16];
  /* 0x01d0 */ volatile unsigned long FreeCount[2];
  /* 0x01d8 */ unsigned long TotalPages[1];
  /* 0x01dc */ unsigned long TotalPagesEntireNode;
  /* 0x01e0 */ unsigned long MmShiftedColor;
  /* 0x01e4 */ unsigned long Color;
  /* 0x01e8 */ volatile unsigned long ChannelFreeCount[2][1];
  struct
  {
    struct /* bitfield */
    {
      /* 0x01f0 */ unsigned long ChannelsHotCold : 1; /* bit position: 0 */
      /* 0x01f0 */ unsigned long Spare : 31; /* bit position: 1 */
    }; /* bitfield */
  } /* size: 0x0004 */ Flags;
  /* 0x01f4 */ unsigned long LargeListMoveInProgress;
  /* 0x01f8 */ struct _MI_LARGE_PAGE_LISTS_CHANGING* LargeListWaiters;
  /* 0x01fc */ struct _EX_PUSH_LOCK NodeLock;
  /* 0x0200 */ unsigned char ChannelStatus;
  /* 0x0201 */ unsigned char ChannelOrdering[1];
  /* 0x0202 */ unsigned char LockedChannelOrdering[1];
  /* 0x0203 */ unsigned char PowerAttribute[1];
  /* 0x0204 */ unsigned long LargePageLock;
  /* 0x0208 */ struct _MI_PAGE_COLORS PageColorTable;
  /* 0x0214 */ unsigned long NumberOfPagesGoingBad;
  /* 0x0218 */ void* BootZeroContext;
  /* 0x021c */ void* ZeroingVaBase;
  /* 0x0220 */ unsigned long TotalBytesToZero;
  /* 0x0224 */ unsigned long PerProcessorNumberOfBytesToZero;
  /* 0x0228 */ void* ZeroingContext;
  /* 0x022c */ volatile unsigned long ZeroingProcessorCount;
  /* 0x0230 */ volatile long ZeroHand;
  /* 0x0234 */ volatile long FinishedProcessors;
  /* 0x0238 */ unsigned char BackgroundZeroingActive;
  /* 0x0239 */ unsigned char ZeroThreadsReady;
  /* 0x023a */ char Padding_200[2];
  /* 0x023c */ struct _PHYSICAL_MEMORY_DESCRIPTOR* ZeroingPhysicalMemoryBlock;
} MI_NODE_INFORMATION, *PMI_NODE_INFORMATION; /* size: 0x0240 */

typedef struct _DEVICE_DSM_DEFINITION
{
  /* 0x0000 */ unsigned long Action;
  /* 0x0004 */ unsigned char SingleRange;
  /* 0x0005 */ char Padding_201[3];
  /* 0x0008 */ unsigned long ParameterBlockAlignment;
  /* 0x000c */ unsigned long ParameterBlockLength;
  /* 0x0010 */ unsigned char HasOutput;
  /* 0x0011 */ char Padding_202[3];
  /* 0x0014 */ unsigned long OutputBlockAlignment;
  /* 0x0018 */ unsigned long OutputBlockLength;
} DEVICE_DSM_DEFINITION, *PDEVICE_DSM_DEFINITION; /* size: 0x001c */

typedef struct _DBGKD_READ_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY64, *PDBGKD_READ_MEMORY64; /* size: 0x0010 */

typedef struct _DBGKD_WRITE_MEMORY64
{
  /* 0x0000 */ unsigned __int64 TargetBaseAddress;
  /* 0x0008 */ unsigned long TransferCount;
  /* 0x000c */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY64, *PDBGKD_WRITE_MEMORY64; /* size: 0x0010 */

typedef struct _DBGKD_GET_CONTEXT
{
  /* 0x0000 */ unsigned long Unused;
} DBGKD_GET_CONTEXT, *PDBGKD_GET_CONTEXT; /* size: 0x0004 */

typedef struct _DBGKD_SET_CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
} DBGKD_SET_CONTEXT, *PDBGKD_SET_CONTEXT; /* size: 0x0004 */

typedef struct _DBGKD_WRITE_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakPointAddress;
  /* 0x0008 */ unsigned long BreakPointHandle;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_WRITE_BREAKPOINT64, *PDBGKD_WRITE_BREAKPOINT64; /* size: 0x0010 */

typedef struct _DBGKD_RESTORE_BREAKPOINT
{
  /* 0x0000 */ unsigned long BreakPointHandle;
} DBGKD_RESTORE_BREAKPOINT, *PDBGKD_RESTORE_BREAKPOINT; /* size: 0x0004 */

typedef struct _DBGKD_CONTINUE
{
  /* 0x0000 */ long ContinueStatus;
} DBGKD_CONTINUE, *PDBGKD_CONTINUE; /* size: 0x0004 */

typedef struct _X86_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned long Dr7;
  /* 0x0008 */ unsigned long CurrentSymbolStart;
  /* 0x000c */ unsigned long CurrentSymbolEnd;
} X86_DBGKD_CONTROL_SET, *PX86_DBGKD_CONTROL_SET; /* size: 0x0010 */

typedef struct _IA64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned __int64 CurrentSymbolStart;
  /* 0x000c */ unsigned __int64 CurrentSymbolEnd;
} IA64_DBGKD_CONTROL_SET, *PIA64_DBGKD_CONTROL_SET; /* size: 0x0014 */

typedef struct _AMD64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long TraceFlag;
  /* 0x0004 */ unsigned __int64 Dr7;
  /* 0x000c */ unsigned __int64 CurrentSymbolStart;
  /* 0x0014 */ unsigned __int64 CurrentSymbolEnd;
} AMD64_DBGKD_CONTROL_SET, *PAMD64_DBGKD_CONTROL_SET; /* size: 0x001c */

typedef struct _ARM_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARM_DBGKD_CONTROL_SET, *PARM_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _ARM64_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long TraceFlag;
  /* 0x0008 */ unsigned __int64 CurrentSymbolStart;
  /* 0x0010 */ unsigned __int64 CurrentSymbolEnd;
} ARM64_DBGKD_CONTROL_SET, *PARM64_DBGKD_CONTROL_SET; /* size: 0x0018 */

typedef struct _ARMCE_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} ARMCE_DBGKD_CONTROL_SET, *PARMCE_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _PPC_DBGKD_CONTROL_SET
{
  /* 0x0000 */ unsigned long Continue;
  /* 0x0004 */ unsigned long CurrentSymbolStart;
  /* 0x0008 */ unsigned long CurrentSymbolEnd;
} PPC_DBGKD_CONTROL_SET, *PPPC_DBGKD_CONTROL_SET; /* size: 0x000c */

typedef struct _DBGKD_ANY_CONTROL_SET
{
  union
  {
    /* 0x0000 */ struct _X86_DBGKD_CONTROL_SET X86ControlSet;
    /* 0x0000 */ unsigned long AlphaControlSet;
    /* 0x0000 */ struct _IA64_DBGKD_CONTROL_SET IA64ControlSet;
    /* 0x0000 */ struct _AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
    /* 0x0000 */ struct _ARM_DBGKD_CONTROL_SET ArmControlSet;
    /* 0x0000 */ struct _ARM64_DBGKD_CONTROL_SET Arm64ControlSet;
    /* 0x0000 */ struct _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
    struct
    {
      /* 0x0000 */ struct _PPC_DBGKD_CONTROL_SET PpcControlSet;
      /* 0x000c */ long __PADDING__[4];
    }; /* size: 0x001c */
  }; /* size: 0x001c */
} DBGKD_ANY_CONTROL_SET, *PDBGKD_ANY_CONTROL_SET; /* size: 0x001c */

typedef struct _DBGKD_CONTINUE2
{
  /* 0x0000 */ long ContinueStatus;
  union
  {
    /* 0x0004 */ struct _X86_DBGKD_CONTROL_SET ControlSet;
    /* 0x0004 */ struct _DBGKD_ANY_CONTROL_SET AnyControlSet;
  }; /* size: 0x001c */
} DBGKD_CONTINUE2, *PDBGKD_CONTINUE2; /* size: 0x0020 */

typedef struct _DBGKD_READ_WRITE_IO64
{
  /* 0x0000 */ unsigned __int64 IoAddress;
  /* 0x0008 */ unsigned long DataSize;
  /* 0x000c */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO64, *PDBGKD_READ_WRITE_IO64; /* size: 0x0010 */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED64
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned __int64 IoAddress;
  /* 0x0018 */ unsigned long DataValue;
  /* 0x001c */ long __PADDING__[1];
} DBGKD_READ_WRITE_IO_EXTENDED64, *PDBGKD_READ_WRITE_IO_EXTENDED64; /* size: 0x0020 */

typedef struct _DBGKD_QUERY_SPECIAL_CALLS
{
  /* 0x0000 */ unsigned long NumberOfSpecialCalls;
} DBGKD_QUERY_SPECIAL_CALLS, *PDBGKD_QUERY_SPECIAL_CALLS; /* size: 0x0004 */

typedef struct _DBGKD_SET_SPECIAL_CALL64
{
  /* 0x0000 */ unsigned __int64 SpecialCall;
} DBGKD_SET_SPECIAL_CALL64, *PDBGKD_SET_SPECIAL_CALL64; /* size: 0x0008 */

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long __PADDING__[1];
} DBGKD_SET_INTERNAL_BREAKPOINT64, *PDBGKD_SET_INTERNAL_BREAKPOINT64; /* size: 0x0010 */

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64
{
  /* 0x0000 */ unsigned __int64 BreakpointAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long Calls;
  /* 0x0010 */ unsigned long MaxCallsPerPeriod;
  /* 0x0014 */ unsigned long MinInstructions;
  /* 0x0018 */ unsigned long MaxInstructions;
  /* 0x001c */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT64, *PDBGKD_GET_INTERNAL_BREAKPOINT64; /* size: 0x0020 */

typedef struct _DBGKD_GET_VERSION64
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned char ProtocolVersion;
  /* 0x0005 */ unsigned char KdSecondaryVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned short MachineType;
  /* 0x000a */ unsigned char MaxPacketType;
  /* 0x000b */ unsigned char MaxStateChange;
  /* 0x000c */ unsigned char MaxManipulate;
  /* 0x000d */ unsigned char Simulation;
  /* 0x000e */ unsigned short Unused[1];
  /* 0x0010 */ unsigned __int64 KernBase;
  /* 0x0018 */ unsigned __int64 PsLoadedModuleList;
  /* 0x0020 */ unsigned __int64 DebuggerDataList;
} DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64; /* size: 0x0028 */

typedef struct _DBGKD_BREAKPOINTEX
{
  /* 0x0000 */ unsigned long BreakPointCount;
  /* 0x0004 */ long ContinueStatus;
} DBGKD_BREAKPOINTEX, *PDBGKD_BREAKPOINTEX; /* size: 0x0008 */

typedef struct _DBGKD_READ_WRITE_MSR
{
  /* 0x0000 */ unsigned long Msr;
  /* 0x0004 */ unsigned long DataValueLow;
  /* 0x0008 */ unsigned long DataValueHigh;
} DBGKD_READ_WRITE_MSR, *PDBGKD_READ_WRITE_MSR; /* size: 0x000c */

typedef struct _DBGKD_GET_SET_BUS_DATA
{
  /* 0x0000 */ unsigned long BusDataType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ unsigned long SlotNumber;
  /* 0x000c */ unsigned long Offset;
  /* 0x0010 */ unsigned long Length;
} DBGKD_GET_SET_BUS_DATA, *PDBGKD_GET_SET_BUS_DATA; /* size: 0x0014 */

typedef struct _DBGKD_QUERY_MEMORY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ unsigned long AddressSpace;
  /* 0x0014 */ unsigned long Flags;
} DBGKD_QUERY_MEMORY, *PDBGKD_QUERY_MEMORY; /* size: 0x0018 */

typedef struct _DBGKD_SWITCH_PARTITION
{
  /* 0x0000 */ unsigned long Partition;
} DBGKD_SWITCH_PARTITION, *PDBGKD_SWITCH_PARTITION; /* size: 0x0004 */

typedef struct _DBGKD_CONTEXT_EX
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long ByteCount;
  /* 0x0008 */ unsigned long BytesCopied;
} DBGKD_CONTEXT_EX, *PDBGKD_CONTEXT_EX; /* size: 0x000c */

typedef struct _DBGKD_WRITE_CUSTOM_BREAKPOINT
{
  /* 0x0000 */ unsigned __int64 BreakPointAddress;
  /* 0x0008 */ unsigned __int64 BreakPointInstruction;
  /* 0x0010 */ unsigned long BreakPointHandle;
  /* 0x0014 */ unsigned char BreakPointInstructionSize;
  /* 0x0015 */ unsigned char BreakPointInstructionAlignment;
  /* 0x0016 */ char __PADDING__[2];
} DBGKD_WRITE_CUSTOM_BREAKPOINT, *PDBGKD_WRITE_CUSTOM_BREAKPOINT; /* size: 0x0018 */

typedef struct _DBGKD_MANIPULATE_STATE64
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  /* 0x000c */ long Padding_203;
  union
  {
    union
    {
      /* 0x0010 */ struct _DBGKD_READ_MEMORY64 ReadMemory;
      /* 0x0010 */ struct _DBGKD_WRITE_MEMORY64 WriteMemory;
      /* 0x0010 */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x0010 */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x0010 */ struct _DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
      /* 0x0010 */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x0010 */ struct _DBGKD_CONTINUE Continue;
      /* 0x0010 */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO64 ReadWriteIo;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
      /* 0x0010 */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x0010 */ struct _DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
      /* 0x0010 */ struct _DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
      /* 0x0010 */ struct _DBGKD_GET_VERSION64 GetVersion64;
      /* 0x0010 */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x0010 */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x0010 */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x0010 */ struct _DBGKD_GET_SET_BUS_DATA GetSetBusData;
      /* 0x0010 */ struct _DBGKD_FILL_MEMORY FillMemory;
      /* 0x0010 */ struct _DBGKD_QUERY_MEMORY QueryMemory;
      /* 0x0010 */ struct _DBGKD_SWITCH_PARTITION SwitchPartition;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x0010 */ struct _DBGKD_CONTEXT_EX SetContextEx;
      /* 0x0010 */ struct _DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE64, *PDBGKD_MANIPULATE_STATE64; /* size: 0x0038 */

typedef struct _ETW_SILO_TRACING_BLOCK
{
  /* 0x0000 */ struct _EX_FAST_REF* ProcessorBuffers;
  /* 0x0004 */ unsigned __int64* EventsLoggedCount;
  /* 0x0008 */ __int64* QpcDelta;
  /* 0x000c */ long __PADDING__[13];
} ETW_SILO_TRACING_BLOCK, *PETW_SILO_TRACING_BLOCK; /* size: 0x0040 */

typedef struct _OBJECT_HANDLE_COUNT_ENTRY
{
  /* 0x0000 */ struct _EPROCESS* Process;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long HandleCount : 24; /* bit position: 0 */
    /* 0x0004 */ unsigned long LockCount : 8; /* bit position: 24 */
  }; /* bitfield */
} OBJECT_HANDLE_COUNT_ENTRY, *POBJECT_HANDLE_COUNT_ENTRY; /* size: 0x0008 */

typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long PreviousError : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Simulated : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long DeviceDriver : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long CriticalEvent : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long PersistPfn : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS; /* size: 0x0004 */

typedef struct _WHEA_ERROR_RECORD_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ union _WHEA_REVISION Revision;
  /* 0x0006 */ unsigned long SignatureEnd;
  /* 0x000a */ unsigned short SectionCount;
  /* 0x000c */ enum _WHEA_ERROR_SEVERITY Severity;
  /* 0x0010 */ union _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
  /* 0x0014 */ unsigned long Length;
  /* 0x0018 */ union _WHEA_TIMESTAMP Timestamp;
  /* 0x0020 */ struct _GUID PlatformId;
  /* 0x0030 */ struct _GUID PartitionId;
  /* 0x0040 */ struct _GUID CreatorId;
  /* 0x0050 */ struct _GUID NotifyType;
  /* 0x0060 */ unsigned __int64 RecordId;
  /* 0x0068 */ union _WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
  /* 0x006c */ union _WHEA_PERSISTENCE_INFO PersistenceInfo;
  /* 0x0074 */ unsigned char Reserved[12];
} WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER; /* size: 0x0080 */

typedef struct _ETW_SESSION_PERF_COUNTERS
{
  /* 0x0000 */ long BufferMemoryPagedPool;
  /* 0x0004 */ long BufferMemoryNonPagedPool;
  /* 0x0008 */ unsigned __int64 EventsLoggedCount;
  /* 0x0010 */ long EventsLost;
  /* 0x0014 */ long NumConsumers;
} ETW_SESSION_PERF_COUNTERS, *PETW_SESSION_PERF_COUNTERS; /* size: 0x0018 */

typedef struct _WNF_SCOPE_MAP
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ struct _WNF_SCOPE_INSTANCE* SystemScopeInstance;
  /* 0x0008 */ struct _WNF_SCOPE_INSTANCE* MachineScopeInstance;
  /* 0x000c */ struct _WNF_SCOPE_INSTANCE* PhysicalMachineScopeInstance;
  /* 0x0010 */ struct _WNF_SCOPE_MAP_ENTRY ByDataScope[6];
} WNF_SCOPE_MAP, *PWNF_SCOPE_MAP; /* size: 0x0058 */

struct wil_details_FeatureTestState
{
  /* 0x0000 */ enum wil_details_FeatureTestStateKind kind;
  /* 0x0004 */ unsigned int featureId;
  /* 0x0008 */ enum wil_FeatureEnabledState state;
  /* 0x000c */ unsigned char variant;
  /* 0x000d */ char Padding_204[3];
  /* 0x0010 */ unsigned int payload;
  /* 0x0014 */ enum wil_FeatureVariantPayloadKind payloadKind;
  /* 0x0018 */ struct wil_details_FeatureTestState* next;
}; /* size: 0x001c */

typedef struct _WNF_SCOPE_INSTANCE
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ struct _EX_RUNDOWN_REF RunRef;
  /* 0x0008 */ enum _WNF_DATA_SCOPE DataScope;
  /* 0x000c */ unsigned long InstanceIdSize;
  /* 0x0010 */ void* InstanceIdData;
  /* 0x0014 */ struct _LIST_ENTRY ResolverListEntry;
  /* 0x001c */ struct _WNF_LOCK NameSetLock;
  /* 0x0020 */ struct _RTL_AVL_TREE NameSet;
  /* 0x0024 */ void* PermanentDataStore;
  /* 0x0028 */ void* VolatilePermanentDataStore;
} WNF_SCOPE_INSTANCE, *PWNF_SCOPE_INSTANCE; /* size: 0x002c */

typedef struct _VF_BTS_RECORD
{
  /* 0x0000 */ void* JumpedFrom;
  /* 0x0004 */ void* JumpedTo;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long Unused1 : 3; /* bit position: 0 */
    /* 0x0008 */ unsigned long Predicted : 4; /* bit position: 3 */
    /* 0x0008 */ unsigned long Unused2 : 25; /* bit position: 7 */
  }; /* bitfield */
} VF_BTS_RECORD, *PVF_BTS_RECORD; /* size: 0x000c */

struct _DBGKP_ERROR_PORT;

struct _NLS_STATE;

struct _JOB_NET_RATE_CONTROL;

typedef struct _PROCESS_EXTENDED_ENERGY_VALUES
{
  /* 0x0000 */ struct _PROCESS_ENERGY_VALUES Base;
  /* 0x0110 */ struct _PROCESS_ENERGY_VALUES_EXTENSION Extension;
} PROCESS_EXTENDED_ENERGY_VALUES, *PPROCESS_EXTENDED_ENERGY_VALUES; /* size: 0x01b0 */

typedef struct _HEAP_FREE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _HEAP_ENTRY HeapEntry;
    /* 0x0000 */ struct _HEAP_UNPACKED_ENTRY UnpackedEntry;
    struct
    {
      /* 0x0000 */ unsigned short Size;
      /* 0x0002 */ unsigned char Flags;
      /* 0x0003 */ unsigned char SmallTagIndex;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long SubSegmentCode;
      /* 0x0004 */ unsigned short PreviousSize;
      union
      {
        /* 0x0006 */ unsigned char SegmentOffset;
        struct
        {
          /* 0x0006 */ unsigned char LFHFlags;
          /* 0x0007 */ unsigned char UnusedBytes;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
    }; /* size: 0x0008 */
    /* 0x0000 */ struct _HEAP_EXTENDED_ENTRY ExtendedEntry;
    struct
    {
      /* 0x0000 */ unsigned short FunctionIndex;
      /* 0x0002 */ unsigned short ContextValue;
    }; /* size: 0x0004 */
    struct
    {
      /* 0x0000 */ unsigned long InterceptorValue;
      /* 0x0004 */ unsigned short UnusedBytesLength;
      /* 0x0006 */ unsigned char EntryOffset;
      /* 0x0007 */ unsigned char ExtendedBlockSignature;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long Code1;
      union
      {
        struct
        {
          /* 0x0004 */ unsigned short Code2;
          /* 0x0006 */ unsigned char Code3;
          /* 0x0007 */ unsigned char Code4;
        }; /* size: 0x0004 */
        /* 0x0004 */ unsigned long Code234;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 AgregateCode;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _LIST_ENTRY FreeList;
} HEAP_FREE_ENTRY, *PHEAP_FREE_ENTRY; /* size: 0x0010 */

typedef struct _VACB
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0004 */ struct _SHARED_CACHE_MAP* SharedCacheMap;
  union
  {
    union
    {
      /* 0x0008 */ union _LARGE_INTEGER FileOffset;
      /* 0x0008 */ unsigned short ActiveCount;
      /* 0x0008 */ struct _LIST_ENTRY Links;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Overlay;
  /* 0x0010 */ struct _VACB_ARRAY_HEADER* ArrayHead;
  /* 0x0014 */ long __PADDING__[1];
} VACB, *PVACB; /* size: 0x0018 */

typedef struct _MI_FREE_LARGE_PAGE_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long EntryCount;
} MI_FREE_LARGE_PAGE_LIST, *PMI_FREE_LARGE_PAGE_LIST; /* size: 0x000c */

typedef struct _MM_SESSION_SPACE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Initialized : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long DeletePending : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long PoolInitialized : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long DynamicVaInitialized : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long WsInitialized : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long PoolDestroyed : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long ObjectInitialized : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long SessionHeapInitialized : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long SessionHeapDestroyed : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long LeakedPoolDeliberately : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long Filler : 22; /* bit position: 10 */
  }; /* bitfield */
} MM_SESSION_SPACE_FLAGS, *PMM_SESSION_SPACE_FLAGS; /* size: 0x0004 */

typedef struct _MI_SESSION_DRIVER_UNLOAD
{
  union
  {
    /* 0x0000 */ void* Function /* function */;
    /* 0x0000 */ unsigned long FunctionValue;
  }; /* size: 0x0004 */
} MI_SESSION_DRIVER_UNLOAD, *PMI_SESSION_DRIVER_UNLOAD; /* size: 0x0004 */

typedef struct _MM_SESSION_SPACE
{
  /* 0x0000 */ volatile long ReferenceCount;
  union
  {
    union
    {
      /* 0x0004 */ unsigned long LongFlags;
      /* 0x0004 */ struct _MM_SESSION_SPACE_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ volatile long ProcessReferenceToSession;
  /* 0x0010 */ struct _LIST_ENTRY ProcessList;
  /* 0x0018 */ unsigned long SessionPageDirectoryIndex;
  /* 0x001c */ volatile unsigned long NonPagablePages;
  /* 0x0020 */ volatile unsigned long CommittedPages;
  /* 0x0024 */ void* PagedPoolStart;
  /* 0x0028 */ void* PagedPoolEnd;
  /* 0x002c */ void* SessionObject;
  /* 0x0030 */ void* SessionObjectHandle;
  /* 0x0034 */ struct _RTL_AVL_TREE ImageTree;
  /* 0x0038 */ unsigned long LocaleId;
  /* 0x003c */ unsigned long AttachCount;
  /* 0x0040 */ struct _KGATE AttachGate;
  /* 0x0050 */ struct _LIST_ENTRY WsListEntry;
  /* 0x0058 */ struct _RTL_BALANCED_NODE WsTreeEntry;
  /* 0x0064 */ struct _MM_PAGED_POOL_INFO PagedPoolInfo;
  /* 0x0070 */ struct _MMSESSION Session;
  /* 0x0084 */ long Padding_205;
  /* 0x0088 */ unsigned __int64 CombineDomain;
  /* 0x0090 */ long Padding_206[12];
  /* 0x00c0 */ struct _MMSUPPORT_FULL Vm;
  /* 0x01c0 */ struct _MMWSL_INSTANCE WorkingSetList;
  /* 0x01d8 */ void* HeapState;
  /* 0x01dc */ struct _MI_SESSION_DRIVER_UNLOAD DriverUnload;
  /* 0x01e0 */ unsigned long TopLevelPteLockBits[128];
  /* 0x03e0 */ struct _MMPTE PageTables[1024];
  /* 0x23e0 */ struct _EX_PUSH_LOCK SessionPteLock;
  /* 0x23e4 */ long PoolBigEntriesInUse;
  /* 0x23e8 */ volatile long PagedPoolPdeCount;
  /* 0x23ec */ unsigned long DynamicSessionPdeCount;
  /* 0x23f0 */ struct _MI_SYSTEM_PTE_TYPE SystemPteInfo;
  /* 0x2424 */ void* PoolTrackTableExpansion;
  /* 0x2428 */ unsigned long PoolTrackTableExpansionSize;
  /* 0x242c */ void* PoolTrackBigPages;
  /* 0x2430 */ unsigned long PoolTrackBigPagesSize;
  /* 0x2434 */ struct _RTL_AVL_TREE PermittedFaultsTree;
  /* 0x2438 */ enum _IO_SESSION_STATE IoState;
  /* 0x243c */ unsigned long IoStateSequence;
  /* 0x2440 */ struct _KEVENT IoNotificationEvent;
  /* 0x2450 */ struct _EJOB* ServerSilo;
  /* 0x2454 */ long Padding_207;
  /* 0x2458 */ unsigned __int64 CreateTime;
  /* 0x2460 */ long Padding_208[744];
  /* 0x3000 */ unsigned char PoolTags[16384];
} MM_SESSION_SPACE, *PMM_SESSION_SPACE; /* size: 0x7000 */

typedef union _PEP_ACPI_RESOURCE_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned long AsULong;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Shared : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Wake : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ResourceUsage : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long SlaveMode : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long AddressingMode : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long SharedMode : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long Reserved : 26; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PEP_ACPI_RESOURCE_FLAGS, *PPEP_ACPI_RESOURCE_FLAGS; /* size: 0x0004 */

typedef struct _PEP_ACPI_SPB_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ unsigned short TypeSpecificFlags;
  /* 0x000a */ unsigned char ResourceSourceIndex;
  /* 0x000b */ char Padding_209;
  /* 0x000c */ struct _UNICODE_STRING* ResourceSourceName;
  /* 0x0010 */ char* VendorData;
  /* 0x0014 */ unsigned short VendorDataLength;
  /* 0x0016 */ char __PADDING__[2];
} PEP_ACPI_SPB_RESOURCE, *PPEP_ACPI_SPB_RESOURCE; /* size: 0x0018 */

typedef struct _PEP_ACPI_SPB_UART_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0018 */ unsigned long BaudRate;
  /* 0x001c */ unsigned short RxBufferSize;
  /* 0x001e */ unsigned short TxBufferSize;
  /* 0x0020 */ unsigned char Parity;
  /* 0x0021 */ unsigned char LinesInUse;
  /* 0x0022 */ char __PADDING__[2];
} PEP_ACPI_SPB_UART_RESOURCE, *PPEP_ACPI_SPB_UART_RESOURCE; /* size: 0x0024 */

struct wil_details_RecordUsageResult
{
  /* 0x0000 */ int queueBackground;
  /* 0x0004 */ unsigned int countImmediate;
  /* 0x0008 */ enum wil_details_ServiceReportingKind kindImmediate;
  /* 0x000c */ unsigned int payloadId;
  /* 0x0010 */ int ignoredUse;
  /* 0x0014 */ int isVariantConfiguration;
}; /* size: 0x0018 */

struct FEATURE_ERROR
{
  /* 0x0000 */ HRESULT hr;
  /* 0x0004 */ unsigned short lineNumber;
  /* 0x0006 */ char Padding_210[2];
  /* 0x0008 */ const char* file;
  /* 0x000c */ const char* process;
  /* 0x0010 */ const char* modulePath;
  /* 0x0014 */ unsigned int callerReturnAddressOffset;
  /* 0x0018 */ const char* callerModule;
  /* 0x001c */ const char* message;
  /* 0x0020 */ unsigned short originLineNumber;
  /* 0x0022 */ char Padding_211[2];
  /* 0x0024 */ const char* originFile;
  /* 0x0028 */ const char* originModule;
  /* 0x002c */ unsigned int originCallerReturnAddressOffset;
  /* 0x0030 */ const char* originCallerModule;
  /* 0x0034 */ const char* originName;
}; /* size: 0x0038 */

typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long Calls;
  /* 0x000c */ unsigned long MaxCallsPerPeriod;
  /* 0x0010 */ unsigned long MinInstructions;
  /* 0x0014 */ unsigned long MaxInstructions;
  /* 0x0018 */ unsigned long TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT32, *PDBGKD_GET_INTERNAL_BREAKPOINT32; /* size: 0x001c */

typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long AddressSpace;
  /* 0x0010 */ unsigned long IoAddress;
  /* 0x0014 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO_EXTENDED32, *PDBGKD_READ_WRITE_IO_EXTENDED32; /* size: 0x0018 */

typedef struct _MI_CACHED_PTES
{
  /* 0x0000 */ struct _MI_CACHED_PTE Bins[8];
  /* 0x0040 */ long CachedPteCount;
  /* 0x0044 */ long __PADDING__[1];
} MI_CACHED_PTES, *PMI_CACHED_PTES; /* size: 0x0048 */

typedef struct _TRUSTLET_MAILBOX_KEY
{
  /* 0x0000 */ unsigned __int64 SecretValue[2];
} TRUSTLET_MAILBOX_KEY, *PTRUSTLET_MAILBOX_KEY; /* size: 0x0010 */

typedef struct _HANDLE_TABLE_FREE_LIST
{
  /* 0x0000 */ struct _EX_PUSH_LOCK FreeListLock;
  /* 0x0004 */ union _HANDLE_TABLE_ENTRY* FirstFreeHandleEntry;
  /* 0x0008 */ union _HANDLE_TABLE_ENTRY* LastFreeHandleEntry;
  /* 0x000c */ long HandleCount;
  /* 0x0010 */ unsigned long HighWaterMark;
  /* 0x0014 */ long __PADDING__[11];
} HANDLE_TABLE_FREE_LIST, *PHANDLE_TABLE_FREE_LIST; /* size: 0x0040 */

typedef struct _HANDLE_TABLE
{
  /* 0x0000 */ unsigned long NextHandleNeedingPool;
  /* 0x0004 */ long ExtraInfoPages;
  /* 0x0008 */ volatile unsigned long TableCode;
  /* 0x000c */ struct _EPROCESS* QuotaProcess;
  /* 0x0010 */ struct _LIST_ENTRY HandleTableList;
  /* 0x0018 */ unsigned long UniqueProcessId;
  union
  {
    /* 0x001c */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x001c */ unsigned char StrictFIFO : 1; /* bit position: 0 */
      /* 0x001c */ unsigned char EnableHandleExceptions : 1; /* bit position: 1 */
      /* 0x001c */ unsigned char Rundown : 1; /* bit position: 2 */
      /* 0x001c */ unsigned char Duplicated : 1; /* bit position: 3 */
      /* 0x001c */ unsigned char RaiseUMExceptionOnInvalidHandleClose : 1; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _EX_PUSH_LOCK HandleContentionEvent;
  /* 0x0024 */ struct _EX_PUSH_LOCK HandleTableLock;
  /* 0x0028 */ long Padding_212[6];
  union
  {
    /* 0x0040 */ struct _HANDLE_TABLE_FREE_LIST FreeLists[1];
    struct
    {
      /* 0x0040 */ unsigned char ActualEntry[20];
      /* 0x0054 */ struct _HANDLE_TRACE_DEBUG_INFO* DebugInfo;
      /* 0x0058 */ long __PADDING__[10];
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
} HANDLE_TABLE, *PHANDLE_TABLE; /* size: 0x0080 */

typedef struct _HANDLE_TRACE_DEBUG_INFO
{
  /* 0x0000 */ long RefCount;
  /* 0x0004 */ unsigned long TableSize;
  /* 0x0008 */ unsigned long BitMaskFlags;
  /* 0x000c */ struct _FAST_MUTEX CloseCompactionLock;
  /* 0x002c */ unsigned long CurrentStackIndex;
  /* 0x0030 */ struct _HANDLE_TRACE_DB_ENTRY TraceDb[1];
} HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO; /* size: 0x0080 */

typedef struct _OBJECT_NAME_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION; /* size: 0x0008 */

typedef struct _CM_DIRTY_VECTOR_LOG_ENTRY
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0004 */ enum _CM_DIRTY_VECTOR_OPERATION Operation;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x0008 */ DirtyVectorModifiedContext;
      struct
      {
        /* 0x0008 */ unsigned long RangeCount;
        /* 0x000c */ unsigned long SetBitCount;
      } /* size: 0x0008 */ DirtyDataCaptureContext;
      struct
      {
        /* 0x0008 */ unsigned long Context1;
        /* 0x000c */ unsigned long Context2;
      } /* size: 0x0008 */ Raw;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Data;
  /* 0x0010 */ void* Stack[6];
} CM_DIRTY_VECTOR_LOG_ENTRY, *PCM_DIRTY_VECTOR_LOG_ENTRY; /* size: 0x0028 */

struct _PO_PROCESS_ENERGY_CONTEXT;

typedef struct _KTSS
{
  /* 0x0000 */ unsigned short Backlink;
  /* 0x0002 */ unsigned short Reserved0;
  /* 0x0004 */ unsigned long Esp0;
  /* 0x0008 */ unsigned short Ss0;
  /* 0x000a */ unsigned short Reserved1;
  /* 0x000c */ unsigned long NotUsed1[4];
  /* 0x001c */ unsigned long CR3;
  /* 0x0020 */ unsigned long Eip;
  /* 0x0024 */ unsigned long EFlags;
  /* 0x0028 */ unsigned long Eax;
  /* 0x002c */ unsigned long Ecx;
  /* 0x0030 */ unsigned long Edx;
  /* 0x0034 */ unsigned long Ebx;
  /* 0x0038 */ unsigned long Esp;
  /* 0x003c */ unsigned long Ebp;
  /* 0x0040 */ unsigned long Esi;
  /* 0x0044 */ unsigned long Edi;
  /* 0x0048 */ unsigned short Es;
  /* 0x004a */ unsigned short Reserved2;
  /* 0x004c */ unsigned short Cs;
  /* 0x004e */ unsigned short Reserved3;
  /* 0x0050 */ unsigned short Ss;
  /* 0x0052 */ unsigned short Reserved4;
  /* 0x0054 */ unsigned short Ds;
  /* 0x0056 */ unsigned short Reserved5;
  /* 0x0058 */ unsigned short Fs;
  /* 0x005a */ unsigned short Reserved6;
  /* 0x005c */ unsigned short Gs;
  /* 0x005e */ unsigned short Reserved7;
  /* 0x0060 */ unsigned short LDT;
  /* 0x0062 */ unsigned short Reserved8;
  /* 0x0064 */ unsigned short Flags;
  /* 0x0066 */ unsigned short IoMapBase;
  /* 0x0068 */ struct _KiIoAccessMap IoMaps[1];
  /* 0x208c */ unsigned char IntDirectionMap[32];
} KTSS, *PKTSS; /* size: 0x20ac */

typedef struct _PI_RESOURCE_ARBITER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x0008 */ unsigned char ResourceType;
  /* 0x0009 */ char Padding_213[3];
  /* 0x000c */ struct _ARBITER_INTERFACE* ArbiterInterface;
  /* 0x0010 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x0014 */ struct _LIST_ENTRY ResourceList;
  /* 0x001c */ struct _LIST_ENTRY BestResourceList;
  /* 0x0024 */ struct _LIST_ENTRY BestConfig;
  /* 0x002c */ struct _LIST_ENTRY ActiveArbiterList;
  /* 0x0034 */ unsigned char State;
  /* 0x0035 */ unsigned char ResourcesChanged;
  /* 0x0036 */ char __PADDING__[2];
} PI_RESOURCE_ARBITER_ENTRY, *PPI_RESOURCE_ARBITER_ENTRY; /* size: 0x0038 */

typedef struct _RTL_BALANCED_LINKS
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS* Parent;
  /* 0x0004 */ struct _RTL_BALANCED_LINKS* LeftChild;
  /* 0x0008 */ struct _RTL_BALANCED_LINKS* RightChild;
  /* 0x000c */ char Balance;
  /* 0x000d */ unsigned char Reserved[3];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS; /* size: 0x0010 */

typedef struct _RTL_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS BalancedRoot;
  /* 0x0010 */ void* OrderedPointer;
  /* 0x0014 */ unsigned long WhichOrderedElement;
  /* 0x0018 */ unsigned long NumberGenericTableElements;
  /* 0x001c */ unsigned long DepthOfTree;
  /* 0x0020 */ struct _RTL_BALANCED_LINKS* RestartKey;
  /* 0x0024 */ unsigned long DeleteCount;
  /* 0x0028 */ void* CompareRoutine /* function */;
  /* 0x002c */ void* AllocateRoutine /* function */;
  /* 0x0030 */ void* FreeRoutine /* function */;
  /* 0x0034 */ void* TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE; /* size: 0x0038 */

typedef struct _TraceLoggingMetadata_t
{
  /* 0x0000 */ unsigned int Signature;
  /* 0x0004 */ unsigned short Size;
  /* 0x0006 */ unsigned char Version;
  /* 0x0007 */ unsigned char Flags;
  /* 0x0008 */ unsigned __int64 Magic;
} TraceLoggingMetadata_t, *PTraceLoggingMetadata_t; /* size: 0x0010 */

typedef struct _IO_SECURITY_CONTEXT
{
  /* 0x0000 */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0004 */ struct _ACCESS_STATE* AccessState;
  /* 0x0008 */ unsigned long DesiredAccess;
  /* 0x000c */ unsigned long FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT; /* size: 0x0010 */

struct _PCW_REGISTRATION;

typedef struct _MAILSLOT_CREATE_PARAMETERS
{
  /* 0x0000 */ unsigned long MailslotQuota;
  /* 0x0004 */ unsigned long MaximumMessageSize;
  /* 0x0008 */ union _LARGE_INTEGER ReadTimeout;
  /* 0x0010 */ unsigned char TimeoutSpecified;
  /* 0x0011 */ char __PADDING__[7];
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS; /* size: 0x0018 */

typedef struct _PEP_WORK_COMPLETE_PERF_STATE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned long Component;
  /* 0x0008 */ unsigned char Succeeded;
  /* 0x0009 */ char __PADDING__[3];
} PEP_WORK_COMPLETE_PERF_STATE, *PPEP_WORK_COMPLETE_PERF_STATE; /* size: 0x000c */

typedef struct _ECP_LIST
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _LIST_ENTRY EcpList;
} ECP_LIST, *PECP_LIST; /* size: 0x0010 */

typedef struct _MMVAD_FLAGS2
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long FileOffset : 24; /* bit position: 0 */
    /* 0x0000 */ unsigned long Large : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long TrimBehind : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long Inherit : 1; /* bit position: 26 */
    /* 0x0000 */ unsigned long NoValidationNeeded : 1; /* bit position: 27 */
    /* 0x0000 */ unsigned long PrivateDemandZero : 1; /* bit position: 28 */
    /* 0x0000 */ unsigned long Spare : 3; /* bit position: 29 */
  }; /* bitfield */
} MMVAD_FLAGS2, *PMMVAD_FLAGS2; /* size: 0x0004 */

typedef struct _MI_VAD_SEQUENTIAL_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Length : 11; /* bit position: 0 */
    /* 0x0000 */ unsigned long Vpn : 21; /* bit position: 11 */
  }; /* bitfield */
} MI_VAD_SEQUENTIAL_INFO, *PMI_VAD_SEQUENTIAL_INFO; /* size: 0x0004 */

typedef struct _MMVAD
{
  /* 0x0000 */ struct _MMVAD_SHORT Core;
  union
  {
    union
    {
      /* 0x0028 */ unsigned long LongFlags2;
      /* 0x0028 */ volatile struct _MMVAD_FLAGS2 VadFlags2;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  /* 0x002c */ struct _SUBSECTION* Subsection;
  /* 0x0030 */ struct _MMPTE* FirstPrototypePte;
  /* 0x0034 */ struct _MMPTE* LastContiguousPte;
  /* 0x0038 */ struct _LIST_ENTRY ViewLinks;
  /* 0x0040 */ struct _EPROCESS* VadsProcess;
  union
  {
    union
    {
      /* 0x0044 */ struct _MI_VAD_SEQUENTIAL_INFO SequentialVa;
      /* 0x0044 */ struct _MMEXTEND_INFO* ExtendedInfo;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u4;
  /* 0x0048 */ struct _FILE_OBJECT* FileObject;
} MMVAD, *PMMVAD; /* size: 0x004c */

typedef struct _INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
} INTERFACE, *PINTERFACE; /* size: 0x0010 */

typedef struct _DEVICE_CAPABILITIES
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long DeviceD1 : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long DeviceD2 : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long LockSupported : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long EjectSupported : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Removable : 1; /* bit position: 4 */
    /* 0x0004 */ unsigned long DockDevice : 1; /* bit position: 5 */
    /* 0x0004 */ unsigned long UniqueID : 1; /* bit position: 6 */
    /* 0x0004 */ unsigned long SilentInstall : 1; /* bit position: 7 */
    /* 0x0004 */ unsigned long RawDeviceOK : 1; /* bit position: 8 */
    /* 0x0004 */ unsigned long SurpriseRemovalOK : 1; /* bit position: 9 */
    /* 0x0004 */ unsigned long WakeFromD0 : 1; /* bit position: 10 */
    /* 0x0004 */ unsigned long WakeFromD1 : 1; /* bit position: 11 */
    /* 0x0004 */ unsigned long WakeFromD2 : 1; /* bit position: 12 */
    /* 0x0004 */ unsigned long WakeFromD3 : 1; /* bit position: 13 */
    /* 0x0004 */ unsigned long HardwareDisabled : 1; /* bit position: 14 */
    /* 0x0004 */ unsigned long NonDynamic : 1; /* bit position: 15 */
    /* 0x0004 */ unsigned long WarmEjectSupported : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long NoDisplayInUI : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long Reserved1 : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long WakeFromInterrupt : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long SecureDevice : 1; /* bit position: 20 */
    /* 0x0004 */ unsigned long ChildOfVgaEnabledBridge : 1; /* bit position: 21 */
    /* 0x0004 */ unsigned long DecodeIoOnBoot : 1; /* bit position: 22 */
    /* 0x0004 */ unsigned long Reserved : 9; /* bit position: 23 */
  }; /* bitfield */
  /* 0x0008 */ unsigned long Address;
  /* 0x000c */ unsigned long UINumber;
  /* 0x0010 */ enum _DEVICE_POWER_STATE DeviceState[7];
  /* 0x002c */ enum _SYSTEM_POWER_STATE SystemWake;
  /* 0x0030 */ enum _DEVICE_POWER_STATE DeviceWake;
  /* 0x0034 */ unsigned long D1Latency;
  /* 0x0038 */ unsigned long D2Latency;
  /* 0x003c */ unsigned long D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES; /* size: 0x0040 */

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  /* 0x0000 */ unsigned long ListSize;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long SlotNumber;
  /* 0x0010 */ unsigned long Reserved[3];
  /* 0x001c */ unsigned long AlternativeLists;
  /* 0x0020 */ struct _IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST; /* size: 0x0048 */

typedef struct _PCW_REGISTRATION_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ const struct _UNICODE_STRING* Name;
  /* 0x0008 */ unsigned long CounterCount;
  /* 0x000c */ struct _PCW_COUNTER_DESCRIPTOR* Counters;
  /* 0x0010 */ void* Callback /* function */;
  /* 0x0014 */ void* CallbackContext;
  /* 0x0018 */ enum PCW_REGISTRATION_FLAGS Flags;
} PCW_REGISTRATION_INFORMATION, *PPCW_REGISTRATION_INFORMATION; /* size: 0x001c */

typedef struct _PEP_WORK_ACTIVE_COMPLETE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned long Component;
} PEP_WORK_ACTIVE_COMPLETE, *PPEP_WORK_ACTIVE_COMPLETE; /* size: 0x0008 */

typedef struct _CM_RESOURCE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST; /* size: 0x0024 */

typedef struct _PEP_WORK_DEVICE_POWER
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned char PowerRequired;
  /* 0x0005 */ char __PADDING__[3];
} PEP_WORK_DEVICE_POWER, *PPEP_WORK_DEVICE_POWER; /* size: 0x0008 */

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA
{
  /* 0x0000 */ struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
} PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA; /* size: 0x00a0 */

typedef struct _PO_DEVICE_NOTIFY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _LIST_ENTRY PowerChildren;
  /* 0x0010 */ struct _LIST_ENTRY PowerParents;
  /* 0x0018 */ struct _DEVICE_OBJECT* TargetDevice;
  /* 0x001c */ unsigned char OrderLevel;
  /* 0x001d */ char Padding_214[3];
  /* 0x0020 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0024 */ wchar_t* DeviceName;
  /* 0x0028 */ wchar_t* DriverName;
  /* 0x002c */ unsigned long ChildCount;
  /* 0x0030 */ unsigned long ActiveChild;
  /* 0x0034 */ unsigned long ParentCount;
  /* 0x0038 */ unsigned long ActiveParent;
} PO_DEVICE_NOTIFY, *PPO_DEVICE_NOTIFY; /* size: 0x003c */

typedef struct _PO_IRP_QUEUE
{
  /* 0x0000 */ struct _IRP* CurrentIrp;
  /* 0x0004 */ struct _IRP* PendingIrpList;
} PO_IRP_QUEUE, *PPO_IRP_QUEUE; /* size: 0x0008 */

typedef struct _PO_IRP_MANAGER
{
  /* 0x0000 */ struct _PO_IRP_QUEUE DeviceIrpQueue;
  /* 0x0008 */ struct _PO_IRP_QUEUE SystemIrpQueue;
} PO_IRP_MANAGER, *PPO_IRP_MANAGER; /* size: 0x0010 */

typedef struct _DEVICE_NODE
{
  /* 0x0000 */ struct _DEVICE_NODE* Sibling;
  /* 0x0004 */ struct _DEVICE_NODE* Child;
  /* 0x0008 */ struct _DEVICE_NODE* Parent;
  /* 0x000c */ struct _DEVICE_NODE* LastChild;
  /* 0x0010 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0014 */ struct _UNICODE_STRING InstancePath;
  /* 0x001c */ struct _UNICODE_STRING ServiceName;
  /* 0x0024 */ struct _IRP* PendingIrp;
  /* 0x0028 */ struct _POP_FX_DEVICE* FxDevice;
  /* 0x002c */ volatile long FxDeviceLock;
  /* 0x0030 */ struct _KEVENT FxRemoveEvent;
  /* 0x0040 */ volatile long FxActivationCount;
  /* 0x0044 */ volatile long FxSleepCount;
  /* 0x0048 */ struct _UNICODE_STRING UniqueId;
  /* 0x0050 */ struct _POP_FX_PLUGIN* Plugin;
  /* 0x0054 */ unsigned long Level;
  /* 0x0058 */ union _POWER_STATE CurrentPowerState;
  /* 0x005c */ struct _PO_DEVICE_NOTIFY Notify;
  /* 0x0098 */ struct _PO_IRP_MANAGER PoIrpManager;
  /* 0x00a8 */ volatile long PowerFlags;
  /* 0x00ac */ enum _PNP_DEVNODE_STATE State;
  /* 0x00b0 */ enum _PNP_DEVNODE_STATE PreviousState;
  /* 0x00b4 */ enum _PNP_DEVNODE_STATE StateHistory[20];
  /* 0x0104 */ unsigned long StateHistoryEntry;
  /* 0x0108 */ long CompletionStatus;
  /* 0x010c */ unsigned long Flags;
  /* 0x0110 */ unsigned long UserFlags;
  /* 0x0114 */ unsigned long Problem;
  /* 0x0118 */ long ProblemStatus;
  /* 0x011c */ struct _CM_RESOURCE_LIST* ResourceList;
  /* 0x0120 */ struct _CM_RESOURCE_LIST* ResourceListTranslated;
  /* 0x0124 */ struct _DEVICE_OBJECT* DuplicatePDO;
  /* 0x0128 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x012c */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0130 */ unsigned long BusNumber;
  /* 0x0134 */ enum _INTERFACE_TYPE ChildInterfaceType;
  /* 0x0138 */ unsigned long ChildBusNumber;
  /* 0x013c */ unsigned short ChildBusTypeIndex;
  /* 0x013e */ unsigned char RemovalPolicy;
  /* 0x013f */ unsigned char HardwareRemovalPolicy;
  /* 0x0140 */ struct _LIST_ENTRY TargetDeviceNotify;
  /* 0x0148 */ struct _LIST_ENTRY DeviceArbiterList;
  /* 0x0150 */ struct _LIST_ENTRY DeviceTranslatorList;
  /* 0x0158 */ unsigned short NoTranslatorMask;
  /* 0x015a */ unsigned short QueryTranslatorMask;
  /* 0x015c */ unsigned short NoArbiterMask;
  /* 0x015e */ unsigned short QueryArbiterMask;
  union
  {
    union
    {
      /* 0x0160 */ struct _DEVICE_NODE* LegacyDeviceNode;
      /* 0x0160 */ struct _DEVICE_RELATIONS* PendingDeviceRelations;
      /* 0x0160 */ void* Information;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ OverUsed1;
  union
  {
    /* 0x0164 */ struct _DEVICE_NODE* NextResourceDeviceNode;
  } /* size: 0x0004 */ OverUsed2;
  /* 0x0168 */ struct _CM_RESOURCE_LIST* BootResources;
  /* 0x016c */ struct _CM_RESOURCE_LIST* BootResourcesTranslated;
  /* 0x0170 */ unsigned long CapabilityFlags;
  struct
  {
    /* 0x0174 */ enum PROFILE_STATUS DockStatus;
    /* 0x0178 */ struct _LIST_ENTRY ListEntry;
    /* 0x0180 */ wchar_t* SerialNumber;
  } /* size: 0x0010 */ DockInfo;
  /* 0x0184 */ unsigned long DisableableDepends;
  /* 0x0188 */ struct _LIST_ENTRY PendedSetInterfaceState;
  /* 0x0190 */ struct _LIST_ENTRY LegacyBusListEntry;
  /* 0x0198 */ unsigned long DriverUnloadRetryCount;
  /* 0x019c */ struct _DEVICE_NODE* PreviousParent;
  /* 0x01a0 */ long DeletedChildren;
  /* 0x01a4 */ unsigned long NumaNodeIndex;
  /* 0x01a8 */ struct _GUID ContainerID;
  /* 0x01b8 */ unsigned char OverrideFlags;
  /* 0x01b9 */ char Padding_215[3];
  /* 0x01bc */ unsigned long DeviceIdsHash;
  /* 0x01c0 */ unsigned char RequiresUnloadedDriver;
  /* 0x01c1 */ char Padding_216[3];
  /* 0x01c4 */ struct _PENDING_RELATIONS_LIST_ENTRY* PendingEjectRelations;
  /* 0x01c8 */ unsigned long StateFlags;
  /* 0x01cc */ struct _PNP_REBALANCE_TRACE_CONTEXT* RebalanceContext;
  /* 0x01d0 */ struct _DEVICE_NODE_IOMMU_EXTENSION* IommuExtension;
  /* 0x01d4 */ struct _PO_DIRECTED_DRIPS_STATE DirectedDripsState;
} DEVICE_NODE, *PDEVICE_NODE; /* size: 0x01f4 */

struct PEPHANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _MMINPAGE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long GetExtents : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long PrefetchSystemVmType : 2; /* bit position: 1 */
    /* 0x0000 */ unsigned long VaPrefetchReadBlock : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long CollidedFlowThrough : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long ForceCollisions : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long InPageExpanded : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long IssuedAtLowPriority : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long FaultFromStore : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long PagePriority : 3; /* bit position: 9 */
    /* 0x0000 */ unsigned long ClusteredPagePriority : 3; /* bit position: 12 */
    /* 0x0000 */ unsigned long MakeClusterValid : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned long PerformRelocations : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long ZeroLastPage : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long UserFault : 1; /* bit position: 18 */
    /* 0x0000 */ unsigned long StandbyProtectionNeeded : 1; /* bit position: 19 */
    /* 0x0000 */ unsigned long PteChanged : 1; /* bit position: 20 */
    /* 0x0000 */ unsigned long PageFileFault : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long PageFilePageHashActive : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned long CoalescedIo : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned long VmLockNotNeeded : 1; /* bit position: 24 */
    /* 0x0000 */ unsigned long Spare0 : 1; /* bit position: 25 */
    /* 0x0000 */ unsigned long Spare1 : 6; /* bit position: 26 */
  }; /* bitfield */
} MMINPAGE_FLAGS, *PMMINPAGE_FLAGS; /* size: 0x0004 */

typedef struct _MI_STORE_INPAGE_COMPLETE_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned long EntireFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long StoreFault : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long LowResourceFailure : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Spare : 14; /* bit position: 2 */
      /* 0x0000 */ unsigned long RemainingPageCount : 16; /* bit position: 16 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} MI_STORE_INPAGE_COMPLETE_FLAGS, *PMI_STORE_INPAGE_COMPLETE_FLAGS; /* size: 0x0004 */

typedef struct _MI_HARD_FAULT_STATE
{
  /* 0x0000 */ struct _MMPFN* SwapPfn;
  /* 0x0004 */ struct _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags;
} MI_HARD_FAULT_STATE, *PMI_HARD_FAULT_STATE; /* size: 0x0008 */

typedef struct _MMINPAGE_SUPPORT_FLOW_THROUGH
{
  /* 0x0000 */ unsigned long Page[1];
  /* 0x0004 */ struct _MMINPAGE_SUPPORT* InitialInPageSupport;
  /* 0x0008 */ struct _MMPAGING_FILE* PagingFile;
  /* 0x000c */ unsigned long PageFileOffset;
  /* 0x0010 */ struct _RTL_BALANCED_NODE Node;
} MMINPAGE_SUPPORT_FLOW_THROUGH, *PMMINPAGE_SUPPORT_FLOW_THROUGH; /* size: 0x001c */

typedef struct _MMINPAGE_SUPPORT
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ListEntry;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY SListEntry;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct _LIST_ENTRY ListHead;
  /* 0x0010 */ struct _KEVENT Event;
  /* 0x0020 */ struct _KEVENT CollidedEvent;
  /* 0x0030 */ struct _IO_STATUS_BLOCK IoStatus;
  /* 0x0038 */ union _LARGE_INTEGER ReadOffset;
  union
  {
    union
    {
      /* 0x0040 */ struct _KAPC_STATE ApcState;
      /* 0x0040 */ struct _MI_HARD_FAULT_STATE HardFaultState;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u2;
  /* 0x0058 */ struct _ETHREAD* Thread;
  /* 0x005c */ struct _MMPFN* LockedProtoPfn;
  /* 0x0060 */ struct _MMPTE PteContents;
  /* 0x0068 */ volatile long WaitCount;
  /* 0x006c */ volatile long InjectRetry;
  /* 0x0070 */ unsigned long ByteCount;
  union
  {
    union
    {
      /* 0x0074 */ unsigned long ImagePteOffset;
      /* 0x0074 */ unsigned long TossPage;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u3;
  union
  {
    union
    {
      /* 0x0078 */ struct _MMINPAGE_FLAGS e1;
      /* 0x0078 */ unsigned long LongFlags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    /* 0x007c */ struct _FILE_OBJECT* FilePointer;
    /* 0x007c */ struct _MMPAGING_FILE* PagingFile;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0080 */ struct _CONTROL_AREA* ControlArea;
    /* 0x0080 */ struct _SUBSECTION* Subsection;
  }; /* size: 0x0004 */
  /* 0x0084 */ void* Autoboost;
  /* 0x0088 */ void* FaultingAddress;
  /* 0x008c */ struct _MMPTE* PointerPte;
  /* 0x0090 */ struct _MMPTE* BasePte;
  /* 0x0094 */ struct _MMPFN* Pfn;
  /* 0x0098 */ struct _MDL* PrefetchMdl;
  /* 0x009c */ long Padding_217;
  /* 0x00a0 */ volatile __int64 ProbeCount;
  /* 0x00a8 */ struct _MDL Mdl;
  union
  {
    /* 0x00c4 */ unsigned long Page[16];
    struct
    {
      /* 0x00c4 */ struct _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough;
      /* 0x00e0 */ long __PADDING__[10];
    }; /* size: 0x0044 */
  }; /* size: 0x0044 */
} MMINPAGE_SUPPORT, *PMMINPAGE_SUPPORT; /* size: 0x0108 */

typedef struct _VF_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE RtlTable;
  /* 0x0038 */ struct _VF_AVL_TREE_NODE* ReservedNode;
  /* 0x003c */ void* NodeToFree;
  /* 0x0040 */ volatile long Lock;
  /* 0x0044 */ long __PADDING__[15];
} VF_AVL_TABLE, *PVF_AVL_TABLE; /* size: 0x0080 */

typedef struct _CMSI_PROCESS_TUPLE
{
  /* 0x0000 */ void* ProcessHandle;
  /* 0x0004 */ void* ProcessReference;
} CMSI_PROCESS_TUPLE, *PCMSI_PROCESS_TUPLE; /* size: 0x0008 */

typedef struct _WNF_STATE_NAME_STRUCT
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Version : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 NameLifetime : 2; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 DataScope : 4; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 PermanentData : 1; /* bit position: 10 */
    /* 0x0000 */ unsigned __int64 Sequence : 53; /* bit position: 11 */
  }; /* bitfield */
} WNF_STATE_NAME_STRUCT, *PWNF_STATE_NAME_STRUCT; /* size: 0x0008 */

typedef struct _WNF_SUBSCRIPTION
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ struct _EX_RUNDOWN_REF RunRef;
  /* 0x0008 */ unsigned __int64 SubscriptionId;
  /* 0x0010 */ struct _LIST_ENTRY ProcessSubscriptionListEntry;
  /* 0x0018 */ struct _EPROCESS* Process;
  /* 0x001c */ struct _WNF_NAME_INSTANCE* NameInstance;
  /* 0x0020 */ struct _WNF_STATE_NAME_STRUCT StateName;
  /* 0x0028 */ struct _LIST_ENTRY StateSubscriptionListEntry;
  /* 0x0030 */ unsigned long CallbackRoutine;
  /* 0x0034 */ void* CallbackContext;
  /* 0x0038 */ unsigned long CurrentChangeStamp;
  /* 0x003c */ unsigned long SubscribedEventSet;
  /* 0x0040 */ struct _LIST_ENTRY PendingSubscriptionListEntry;
  /* 0x0048 */ enum _WNF_SUBSCRIPTION_STATE SubscriptionState;
  /* 0x004c */ unsigned long SignaledEventSet;
  /* 0x0050 */ unsigned long InDeliveryEventSet;
  /* 0x0054 */ long __PADDING__[1];
} WNF_SUBSCRIPTION, *PWNF_SUBSCRIPTION; /* size: 0x0058 */

typedef struct _WNF_NAME_INSTANCE
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ struct _EX_RUNDOWN_REF RunRef;
  /* 0x0008 */ struct _RTL_BALANCED_NODE TreeLinks;
  /* 0x0014 */ long Padding_218;
  /* 0x0018 */ struct _WNF_STATE_NAME_STRUCT StateName;
  /* 0x0020 */ struct _WNF_SCOPE_INSTANCE* ScopeInstance;
  /* 0x0024 */ struct _WNF_STATE_NAME_REGISTRATION StateNameInfo;
  /* 0x0030 */ struct _WNF_LOCK StateDataLock;
  /* 0x0034 */ struct _WNF_STATE_DATA* StateData;
  /* 0x0038 */ unsigned long CurrentChangeStamp;
  /* 0x003c */ void* PermanentDataStore;
  /* 0x0040 */ struct _WNF_LOCK StateSubscriptionListLock;
  /* 0x0044 */ struct _LIST_ENTRY StateSubscriptionListHead;
  /* 0x004c */ struct _LIST_ENTRY TemporaryNameListEntry;
  /* 0x0054 */ struct _EPROCESS* CreatorProcess;
  /* 0x0058 */ long DataSubscribersCount;
  /* 0x005c */ long CurrentDeliveryCount;
} WNF_NAME_INSTANCE, *PWNF_NAME_INSTANCE; /* size: 0x0060 */

typedef struct _HBASE_BLOCK
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Sequence1;
  /* 0x0008 */ unsigned long Sequence2;
  /* 0x000c */ union _LARGE_INTEGER TimeStamp;
  /* 0x0014 */ unsigned long Major;
  /* 0x0018 */ unsigned long Minor;
  /* 0x001c */ unsigned long Type;
  /* 0x0020 */ unsigned long Format;
  /* 0x0024 */ unsigned long RootCell;
  /* 0x0028 */ unsigned long Length;
  /* 0x002c */ unsigned long Cluster;
  /* 0x0030 */ unsigned char FileName[64];
  /* 0x0070 */ struct _GUID RmId;
  /* 0x0080 */ struct _GUID LogId;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ struct _GUID TmId;
  /* 0x00a4 */ unsigned long GuidSignature;
  /* 0x00a8 */ unsigned __int64 LastReorganizeTime;
  /* 0x00b0 */ unsigned long Reserved1[83];
  /* 0x01fc */ unsigned long CheckSum;
  /* 0x0200 */ unsigned long Reserved2[882];
  /* 0x0fc8 */ struct _GUID ThawTmId;
  /* 0x0fd8 */ struct _GUID ThawRmId;
  /* 0x0fe8 */ struct _GUID ThawLogId;
  /* 0x0ff8 */ unsigned long BootType;
  /* 0x0ffc */ unsigned long BootRecover;
} HBASE_BLOCK, *PHBASE_BLOCK; /* size: 0x1000 */

typedef struct _PENDING_RELATIONS_LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0018 */ struct _PNP_DEVICE_EVENT_ENTRY* DeviceEvent;
  /* 0x001c */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0020 */ struct _RELATION_LIST* RelationsList;
  /* 0x0024 */ struct _IRP* EjectIrp;
  /* 0x0028 */ enum IRPLOCK Lock;
  /* 0x002c */ unsigned long Problem;
  /* 0x0030 */ unsigned char ProfileChangingEject;
  /* 0x0031 */ unsigned char DisplaySafeRemovalDialog;
  /* 0x0032 */ char Padding_219[2];
  /* 0x0034 */ enum _SYSTEM_POWER_STATE LightestSleepState;
  /* 0x0038 */ struct DOCK_INTERFACE* DockInterface;
  /* 0x003c */ unsigned char DequeuePending;
  /* 0x003d */ char Padding_220[3];
  /* 0x0040 */ enum _PNP_DEVICE_DELETE_TYPE DeleteType;
} PENDING_RELATIONS_LIST_ENTRY, *PPENDING_RELATIONS_LIST_ENTRY; /* size: 0x0044 */

typedef struct _PNP_WATCHDOG
{
  /* 0x0000 */ unsigned __int64 WatchdogStart;
  /* 0x0008 */ struct _WDT_HANDLE* WatchdogTimer;
  /* 0x000c */ enum _PNP_WATCHDOG_TYPE WatchdogContextType;
  /* 0x0010 */ void* WatchdogContext;
  /* 0x0014 */ unsigned char TriggerEventLogged;
  /* 0x0015 */ char __PADDING__[3];
} PNP_WATCHDOG, *PPNP_WATCHDOG; /* size: 0x0018 */

typedef union _CPU_INFO
{
  union
  {
    /* 0x0000 */ unsigned int AsUINT32[4];
    struct
    {
      /* 0x0000 */ unsigned long Eax;
      /* 0x0004 */ unsigned long Ebx;
      /* 0x0008 */ unsigned long Ecx;
      /* 0x000c */ unsigned long Edx;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} CPU_INFO, *PCPU_INFO; /* size: 0x0010 */

typedef struct _WDT_HANDLE
{
  /* 0x0000 */ char Reserved;
} WDT_HANDLE, *PWDT_HANDLE; /* size: 0x0001 */

typedef struct _POOL_TRACKER_TABLE
{
  /* 0x0000 */ volatile long Key;
  /* 0x0004 */ unsigned long NonPagedBytes;
  /* 0x0008 */ unsigned __int64 NonPagedAllocs;
  /* 0x0010 */ unsigned __int64 NonPagedFrees;
  /* 0x0018 */ unsigned long PagedBytes;
  /* 0x001c */ long Padding_221;
  /* 0x0020 */ unsigned __int64 PagedAllocs;
  /* 0x0028 */ unsigned __int64 PagedFrees;
} POOL_TRACKER_TABLE, *PPOOL_TRACKER_TABLE; /* size: 0x0030 */

typedef struct _RELATION_LIST
{
  /* 0x0000 */ struct _DEVICE_OBJECT_LIST* DeviceObjectList;
  /* 0x0004 */ unsigned char Sorted;
  /* 0x0005 */ char __PADDING__[3];
} RELATION_LIST, *PRELATION_LIST; /* size: 0x0008 */

typedef struct _DEVICE_OBJECT_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long MaxCount;
  /* 0x0008 */ unsigned long TagCount;
  /* 0x000c */ enum _PNP_DEVICE_DELETE_TYPE OperationCode;
  /* 0x0010 */ struct _DEVICE_OBJECT_LIST_ENTRY Devices[1];
} DEVICE_OBJECT_LIST, *PDEVICE_OBJECT_LIST; /* size: 0x0020 */

typedef struct _ALPC_COMPLETION_LIST_STATE
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned __int64 Head : 24; /* bit position: 0 */
          /* 0x0000 */ unsigned __int64 Tail : 24; /* bit position: 24 */
          /* 0x0000 */ unsigned __int64 ActiveThreadCount : 16; /* bit position: 48 */
        }; /* bitfield */
      } /* size: 0x0008 */ s1;
      /* 0x0000 */ __int64 Value;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} ALPC_COMPLETION_LIST_STATE, *PALPC_COMPLETION_LIST_STATE; /* size: 0x0008 */

typedef struct _PO_FX_PERF_STATE_CHANGE
{
  /* 0x0000 */ unsigned long Set;
  /* 0x0004 */ long Padding_222;
  union
  {
    /* 0x0008 */ unsigned long StateIndex;
    /* 0x0008 */ unsigned __int64 StateValue;
  }; /* size: 0x0008 */
} PO_FX_PERF_STATE_CHANGE, *PPO_FX_PERF_STATE_CHANGE; /* size: 0x0010 */

typedef struct _PO_FX_COMPONENT_PERF_SET
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
  /* 0x0008 */ unsigned __int64 Flags;
  /* 0x0010 */ enum _PO_FX_PERF_STATE_UNIT Unit;
  /* 0x0014 */ enum _PO_FX_PERF_STATE_TYPE Type;
  union
  {
    struct
    {
      /* 0x0018 */ unsigned long Count;
      /* 0x001c */ struct _PO_FX_PERF_STATE* States;
    } /* size: 0x0008 */ Discrete;
    struct
    {
      /* 0x0018 */ unsigned __int64 Minimum;
      /* 0x0020 */ unsigned __int64 Maximum;
    } /* size: 0x0010 */ Range;
  }; /* size: 0x0010 */
} PO_FX_COMPONENT_PERF_SET, *PPO_FX_COMPONENT_PERF_SET; /* size: 0x0028 */

typedef union _PPM_POLICY_SETTINGS_MASK
{
  union
  {
    /* 0x0000 */ unsigned __int64 Value;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long PerfDecreaseTime : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long PerfIncreaseTime : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long PerfDecreasePolicy : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned long PerfIncreasePolicy : 1; /* bit position: 3 */
        /* 0x0000 */ unsigned long PerfDecreaseThreshold : 1; /* bit position: 4 */
        /* 0x0000 */ unsigned long PerfIncreaseThreshold : 1; /* bit position: 5 */
        /* 0x0000 */ unsigned long PerfMinPolicy : 1; /* bit position: 6 */
        /* 0x0000 */ unsigned long PerfMaxPolicy : 1; /* bit position: 7 */
        /* 0x0000 */ unsigned long PerfTimeCheck : 1; /* bit position: 8 */
        /* 0x0000 */ unsigned long PerfBoostPolicy : 1; /* bit position: 9 */
        /* 0x0000 */ unsigned long PerfBoostMode : 1; /* bit position: 10 */
        /* 0x0000 */ unsigned long AllowThrottling : 1; /* bit position: 11 */
        /* 0x0000 */ unsigned long PerfHistoryCount : 1; /* bit position: 12 */
        /* 0x0000 */ unsigned long ParkingPerfState : 1; /* bit position: 13 */
        /* 0x0000 */ unsigned long LatencyHintPerf : 1; /* bit position: 14 */
        /* 0x0000 */ unsigned long LatencyHintUnpark : 1; /* bit position: 15 */
        /* 0x0000 */ unsigned long CoreParkingMinCores : 1; /* bit position: 16 */
        /* 0x0000 */ unsigned long CoreParkingMaxCores : 1; /* bit position: 17 */
        /* 0x0000 */ unsigned long CoreParkingDecreasePolicy : 1; /* bit position: 18 */
        /* 0x0000 */ unsigned long CoreParkingIncreasePolicy : 1; /* bit position: 19 */
        /* 0x0000 */ unsigned long CoreParkingDecreaseTime : 1; /* bit position: 20 */
        /* 0x0000 */ unsigned long CoreParkingIncreaseTime : 1; /* bit position: 21 */
        /* 0x0000 */ unsigned long CoreParkingOverUtilizationThreshold : 1; /* bit position: 22 */
        /* 0x0000 */ unsigned long CoreParkingDistributeUtility : 1; /* bit position: 23 */
        /* 0x0000 */ unsigned long CoreParkingConcurrencyThreshold : 1; /* bit position: 24 */
        /* 0x0000 */ unsigned long CoreParkingHeadroomThreshold : 1; /* bit position: 25 */
        /* 0x0000 */ unsigned long CoreParkingDistributionThreshold : 1; /* bit position: 26 */
        /* 0x0000 */ unsigned long IdleAllowScaling : 1; /* bit position: 27 */
        /* 0x0000 */ unsigned long IdleDisable : 1; /* bit position: 28 */
        /* 0x0000 */ unsigned long IdleTimeCheck : 1; /* bit position: 29 */
        /* 0x0000 */ unsigned long IdleDemoteThreshold : 1; /* bit position: 30 */
        /* 0x0000 */ unsigned long IdlePromoteThreshold : 1; /* bit position: 31 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long HeteroDecreaseTime : 1; /* bit position: 0 */
        /* 0x0004 */ unsigned long HeteroIncreaseTime : 1; /* bit position: 1 */
        /* 0x0004 */ unsigned long HeteroDecreaseThreshold : 1; /* bit position: 2 */
        /* 0x0004 */ unsigned long HeteroIncreaseThreshold : 1; /* bit position: 3 */
        /* 0x0004 */ unsigned long Class0FloorPerformance : 1; /* bit position: 4 */
        /* 0x0004 */ unsigned long Class1InitialPerformance : 1; /* bit position: 5 */
        /* 0x0004 */ unsigned long EnergyPerfPreference : 1; /* bit position: 6 */
        /* 0x0004 */ unsigned long AutonomousActivityWindow : 1; /* bit position: 7 */
        /* 0x0004 */ unsigned long AutonomousMode : 1; /* bit position: 8 */
        /* 0x0004 */ unsigned long DutyCycling : 1; /* bit position: 9 */
        /* 0x0004 */ unsigned long FrequencyCap : 1; /* bit position: 10 */
        /* 0x0004 */ unsigned long ThreadPolicy : 1; /* bit position: 11 */
        /* 0x0004 */ unsigned long ShortThreadPolicy : 1; /* bit position: 12 */
        /* 0x0004 */ unsigned long IdleStateMax : 1; /* bit position: 13 */
        /* 0x0004 */ unsigned long ResponsivenessDisableThreshold : 1; /* bit position: 14 */
        /* 0x0004 */ unsigned long ResponsivenessEnableThreshold : 1; /* bit position: 15 */
        /* 0x0004 */ unsigned long ResponsivenessDisableTime : 1; /* bit position: 16 */
        /* 0x0004 */ unsigned long ResponsivenessEnableTime : 1; /* bit position: 17 */
        /* 0x0004 */ unsigned long ResponsivenessEppCeiling : 1; /* bit position: 18 */
        /* 0x0004 */ unsigned long ResponsivenessPerfFloor : 1; /* bit position: 19 */
        /* 0x0004 */ unsigned long SoftParkLatency : 1; /* bit position: 20 */
        /* 0x0004 */ unsigned long Spare : 11; /* bit position: 21 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} PPM_POLICY_SETTINGS_MASK, *PPPM_POLICY_SETTINGS_MASK; /* size: 0x0008 */

typedef struct _PPM_ENGINE_SETTINGS
{
  /* 0x0000 */ union _PPM_POLICY_SETTINGS_MASK ExplicitSetting[2];
  /* 0x0010 */ unsigned char ThrottlingPolicy;
  /* 0x0011 */ char Padding_223[3];
  /* 0x0014 */ unsigned long PerfTimeCheck;
  /* 0x0018 */ unsigned char PerfHistoryCount[2];
  /* 0x001a */ unsigned char PerfMinPolicy[2];
  /* 0x001c */ unsigned char PerfMaxPolicy[2];
  /* 0x001e */ unsigned char PerfDecreaseTime[2];
  /* 0x0020 */ unsigned char PerfIncreaseTime[2];
  /* 0x0022 */ unsigned char PerfDecreasePolicy[2];
  /* 0x0024 */ unsigned char PerfIncreasePolicy[2];
  /* 0x0026 */ unsigned char PerfDecreaseThreshold[2];
  /* 0x0028 */ unsigned char PerfIncreaseThreshold[2];
  /* 0x002a */ char Padding_224[2];
  /* 0x002c */ unsigned long PerfFrequencyCap[2];
  /* 0x0034 */ unsigned long PerfBoostPolicy;
  /* 0x0038 */ unsigned long PerfBoostMode;
  /* 0x003c */ unsigned long PerfReductionTolerance;
  /* 0x0040 */ unsigned long EnergyPerfPreference[2];
  /* 0x0048 */ unsigned long AutonomousActivityWindow;
  /* 0x004c */ unsigned char AutonomousPreference;
  /* 0x004d */ unsigned char LatencyHintPerf[2];
  /* 0x004f */ unsigned char LatencyHintUnpark[2];
  /* 0x0051 */ char Padding_225[3];
  /* 0x0054 */ unsigned long ResponsivenessDisableThreshold[2];
  /* 0x005c */ unsigned long ResponsivenessEnableThreshold[2];
  /* 0x0064 */ unsigned char ResponsivenessDisableTime[2];
  /* 0x0066 */ unsigned char ResponsivenessEnableTime[2];
  /* 0x0068 */ unsigned long ResponsivenessEppCeiling[2];
  /* 0x0070 */ unsigned long ResponsivenessPerfFloor[2];
  /* 0x0078 */ unsigned char DutyCycling;
  /* 0x0079 */ unsigned char ParkingPerfState[2];
  /* 0x007b */ unsigned char DistributeUtility;
  /* 0x007c */ unsigned char CoreParkingOverUtilizationThreshold;
  /* 0x007d */ unsigned char CoreParkingConcurrencyThreshold;
  /* 0x007e */ unsigned char CoreParkingHeadroomThreshold;
  /* 0x007f */ unsigned char CoreParkingDistributionThreshold;
  /* 0x0080 */ unsigned char CoreParkingDecreasePolicy;
  /* 0x0081 */ unsigned char CoreParkingIncreasePolicy;
  /* 0x0082 */ char Padding_226[2];
  /* 0x0084 */ unsigned long CoreParkingDecreaseTime;
  /* 0x0088 */ unsigned long CoreParkingIncreaseTime;
  /* 0x008c */ unsigned char CoreParkingMinCores[2];
  /* 0x008e */ unsigned char CoreParkingMaxCores[2];
  /* 0x0090 */ unsigned long SoftParkLatency;
  /* 0x0094 */ unsigned char AllowScaling;
  /* 0x0095 */ unsigned char IdleDisabled;
  /* 0x0096 */ char Padding_227[2];
  /* 0x0098 */ unsigned long IdleTimeCheck;
  /* 0x009c */ unsigned char IdleDemotePercent;
  /* 0x009d */ unsigned char IdlePromotePercent;
  /* 0x009e */ unsigned char IdleStateMax;
  /* 0x009f */ unsigned char HeteroDecreaseTime;
  /* 0x00a0 */ unsigned char HeteroIncreaseTime;
  /* 0x00a1 */ unsigned char HeteroDecreaseThreshold[32];
  /* 0x00c1 */ unsigned char HeteroIncreaseThreshold[32];
  /* 0x00e1 */ unsigned char Class0FloorPerformance;
  /* 0x00e2 */ unsigned char Class1InitialPerformance;
  /* 0x00e3 */ char Padding_228;
  /* 0x00e4 */ enum _KHETERO_CPU_POLICY ThreadPolicies[2];
  /* 0x00ec */ long __PADDING__[1];
} PPM_ENGINE_SETTINGS, *PPPM_ENGINE_SETTINGS; /* size: 0x00f0 */

typedef struct _PEP_WORK_DEVICE_IDLE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned char IgnoreIdleTimeout;
  /* 0x0005 */ char __PADDING__[3];
} PEP_WORK_DEVICE_IDLE, *PPEP_WORK_DEVICE_IDLE; /* size: 0x0008 */

typedef struct _PEP_WORK_COMPLETE_IDLE_STATE
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned long Component;
} PEP_WORK_COMPLETE_IDLE_STATE, *PPEP_WORK_COMPLETE_IDLE_STATE; /* size: 0x0008 */

typedef struct _PEP_WORK_ACPI_NOTIFY
{
  /* 0x0000 */ struct POHANDLE__* DeviceHandle;
  /* 0x0004 */ unsigned long NotifyCode;
} PEP_WORK_ACPI_NOTIFY, *PPEP_WORK_ACPI_NOTIFY; /* size: 0x0008 */

typedef struct _PEP_WORK_INFORMATION
{
  /* 0x0000 */ enum _PEP_WORK_TYPE WorkType;
  union
  {
    /* 0x0004 */ struct _PEP_WORK_ACTIVE_COMPLETE ActiveComplete;
    /* 0x0004 */ struct _PEP_WORK_IDLE_STATE IdleState;
    /* 0x0004 */ struct _PEP_WORK_DEVICE_POWER DevicePower;
    /* 0x0004 */ struct _PEP_WORK_POWER_CONTROL PowerControl;
    /* 0x0004 */ struct _PEP_WORK_DEVICE_IDLE DeviceIdle;
    /* 0x0004 */ struct _PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState;
    /* 0x0004 */ struct _PEP_WORK_COMPLETE_PERF_STATE CompletePerfState;
    /* 0x0004 */ struct _PEP_WORK_ACPI_NOTIFY AcpiNotify;
    struct
    {
      /* 0x0004 */ struct _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete;
      /* 0x001c */ long __PADDING__[1];
    }; /* size: 0x001c */
  }; /* size: 0x001c */
} PEP_WORK_INFORMATION, *PPEP_WORK_INFORMATION; /* size: 0x0020 */

typedef struct _CM_UOW_SET_SD_DATA
{
  /* 0x0000 */ unsigned long SecurityCell;
} CM_UOW_SET_SD_DATA, *PCM_UOW_SET_SD_DATA; /* size: 0x0004 */

typedef struct _HEAP_STOP_ON_TAG
{
  union
  {
    /* 0x0000 */ unsigned long HeapAndTagIndex;
    struct
    {
      /* 0x0000 */ unsigned short TagIndex;
      /* 0x0002 */ unsigned short HeapIndex;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} HEAP_STOP_ON_TAG, *PHEAP_STOP_ON_TAG; /* size: 0x0004 */

typedef struct _VACB_ARRAY_HEADER
{
  /* 0x0000 */ unsigned long VacbArrayIndex;
  /* 0x0004 */ unsigned long MappingCount;
  /* 0x0008 */ unsigned long HighestMappedIndex;
  /* 0x000c */ unsigned long Reserved;
} VACB_ARRAY_HEADER, *PVACB_ARRAY_HEADER; /* size: 0x0010 */

typedef struct _POP_FX_PROVIDER
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned char Activating;
  /* 0x0005 */ char __PADDING__[3];
} POP_FX_PROVIDER, *PPOP_FX_PROVIDER; /* size: 0x0008 */

typedef struct _POP_FX_DEPENDENT
{
  /* 0x0000 */ unsigned long Index;
  /* 0x0004 */ unsigned long ProviderIndex;
} POP_FX_DEPENDENT, *PPOP_FX_DEPENDENT; /* size: 0x0008 */

typedef struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long AbnormalResetOccurred;
  /* 0x0008 */ unsigned long OfflineMemoryDumpCapable;
  /* 0x000c */ long Padding_229;
  /* 0x0010 */ union _LARGE_INTEGER ResetDataAddress;
  /* 0x0018 */ unsigned long ResetDataSize;
  /* 0x001c */ long __PADDING__[1];
} OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2, *POFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2; /* size: 0x0020 */

typedef struct _POP_FX_PERF_SET
{
  /* 0x0000 */ struct _PO_FX_COMPONENT_PERF_SET* PerfSet;
  /* 0x0004 */ long Padding_230;
  /* 0x0008 */ unsigned __int64 CurrentPerf;
  /* 0x0010 */ unsigned __int64 CurrentPerfStamp;
  /* 0x0018 */ unsigned char CurrentPerfNominal;
  /* 0x0019 */ char __PADDING__[7];
} POP_FX_PERF_SET, *PPOP_FX_PERF_SET; /* size: 0x0020 */

typedef struct _HEAP_SUBALLOCATOR_CALLBACKS
{
  /* 0x0000 */ unsigned long Allocate;
  /* 0x0004 */ unsigned long Free;
  /* 0x0008 */ unsigned long Commit;
  /* 0x000c */ unsigned long Decommit;
  /* 0x0010 */ unsigned long ExtendContext;
} HEAP_SUBALLOCATOR_CALLBACKS, *PHEAP_SUBALLOCATOR_CALLBACKS; /* size: 0x0014 */

typedef struct _RTL_HP_LFH_CONFIG
{
  /* 0x0000 */ unsigned short MaxBlockSize;
  struct /* bitfield */
  {
    /* 0x0002 */ unsigned short WitholdPageCrossingBlocks : 1; /* bit position: 0 */
    /* 0x0002 */ unsigned short DisableRandomization : 1; /* bit position: 1 */
  }; /* bitfield */
} RTL_HP_LFH_CONFIG, *PRTL_HP_LFH_CONFIG; /* size: 0x0004 */

typedef struct _HEAP_LFH_SUBSEGMENT_STAT
{
  /* 0x0000 */ unsigned char Index;
  /* 0x0001 */ unsigned char Count;
} HEAP_LFH_SUBSEGMENT_STAT, *PHEAP_LFH_SUBSEGMENT_STAT; /* size: 0x0002 */

typedef union _HEAP_LFH_SUBSEGMENT_STATS
{
  union
  {
    /* 0x0000 */ struct _HEAP_LFH_SUBSEGMENT_STAT Buckets[2];
    /* 0x0000 */ void* AllStats;
  }; /* size: 0x0004 */
} HEAP_LFH_SUBSEGMENT_STATS, *PHEAP_LFH_SUBSEGMENT_STATS; /* size: 0x0004 */

typedef struct _HEAP_LFH_CONTEXT
{
  /* 0x0000 */ void* BackendCtx;
  /* 0x0004 */ struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;
  /* 0x0018 */ const unsigned char* AffinityModArray;
  /* 0x001c */ unsigned char MaxAffinity;
  /* 0x001d */ unsigned char LockType;
  /* 0x001e */ short MemStatsOffset;
  /* 0x0020 */ struct _RTL_HP_LFH_CONFIG Config;
  /* 0x0024 */ long Padding_231[7];
  /* 0x0040 */ union _HEAP_LFH_SUBSEGMENT_STATS BucketStats;
  /* 0x0044 */ unsigned long SubsegmentCreationLock;
  /* 0x0048 */ long Padding_232[14];
  /* 0x0080 */ struct _HEAP_LFH_BUCKET* Buckets[129];
  /* 0x0284 */ long __PADDING__[15];
} HEAP_LFH_CONTEXT, *PHEAP_LFH_CONTEXT; /* size: 0x02c0 */

typedef struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION
{
  /* 0x0000 */ unsigned long InitialHypervisorCrashdumpAreaPageCount;
  /* 0x0004 */ unsigned long HypervisorCrashdumpAreaPageCount;
  /* 0x0008 */ unsigned __int64 InitialHypervisorCrashdumpAreaSpa;
  /* 0x0010 */ unsigned __int64 HypervisorCrashdumpAreaSpa;
  /* 0x0018 */ unsigned __int64 HypervisorLaunchStatus;
  /* 0x0020 */ unsigned __int64 HypervisorLaunchStatusArg1;
  /* 0x0028 */ unsigned __int64 HypervisorLaunchStatusArg2;
  /* 0x0030 */ unsigned __int64 HypervisorLaunchStatusArg3;
  /* 0x0038 */ unsigned __int64 HypervisorLaunchStatusArg4;
} LOADER_PARAMETER_HYPERVISOR_EXTENSION, *PLOADER_PARAMETER_HYPERVISOR_EXTENSION; /* size: 0x0040 */

typedef struct _POP_COMPONENT_POWER_PROFILE
{
  /* 0x0000 */ struct _GUID ComponentGuid;
  /* 0x0010 */ struct _POP_DEVICE_POWER_PROFILE* Device;
  /* 0x0014 */ unsigned long FxCount;
  /* 0x0018 */ struct _PO_POWER_PLANE_PROFILE FxPower[1];
} POP_COMPONENT_POWER_PROFILE, *PPOP_COMPONENT_POWER_PROFILE; /* size: 0x0020 */

typedef struct _ISRDPCSTATS_SEQUENCE
{
  /* 0x0000 */ unsigned long SequenceNumber;
  /* 0x0004 */ long Padding_233;
  /* 0x0008 */ unsigned __int64 IsrTime;
  /* 0x0010 */ unsigned __int64 IsrCount;
  /* 0x0018 */ unsigned __int64 DpcTime;
  /* 0x0020 */ unsigned __int64 DpcCount;
} ISRDPCSTATS_SEQUENCE, *PISRDPCSTATS_SEQUENCE; /* size: 0x0028 */

typedef struct _ISRDPCSTATS
{
  /* 0x0000 */ unsigned __int64 IsrTime;
  /* 0x0008 */ unsigned __int64 IsrTimeStart;
  /* 0x0010 */ unsigned __int64 IsrCount;
  /* 0x0018 */ unsigned __int64 DpcTime;
  /* 0x0020 */ unsigned __int64 DpcTimeStart;
  /* 0x0028 */ unsigned __int64 DpcCount;
  /* 0x0030 */ unsigned char IsrActive;
  /* 0x0031 */ unsigned char Reserved[7];
  /* 0x0038 */ struct _ISRDPCSTATS_SEQUENCE DpcWatchdog;
} ISRDPCSTATS, *PISRDPCSTATS; /* size: 0x0060 */

typedef struct _KINTERRUPT
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _LIST_ENTRY InterruptListEntry;
  /* 0x000c */ void* ServiceRoutine /* function */;
  /* 0x0010 */ void* MessageServiceRoutine /* function */;
  /* 0x0014 */ unsigned long MessageIndex;
  /* 0x0018 */ void* ServiceContext;
  /* 0x001c */ unsigned long SpinLock;
  /* 0x0020 */ unsigned long TickCount;
  /* 0x0024 */ unsigned long* ActualLock;
  /* 0x0028 */ void* DispatchAddress /* function */;
  /* 0x002c */ unsigned long Vector;
  /* 0x0030 */ unsigned char Irql;
  /* 0x0031 */ unsigned char SynchronizeIrql;
  /* 0x0032 */ unsigned char FloatingSave;
  /* 0x0033 */ unsigned char Connected;
  /* 0x0034 */ unsigned long Number;
  /* 0x0038 */ unsigned char ShareVector;
  /* 0x0039 */ unsigned char EmulateActiveBoth;
  /* 0x003a */ unsigned short ActiveCount;
  /* 0x003c */ long InternalState;
  /* 0x0040 */ enum _KINTERRUPT_MODE Mode;
  /* 0x0044 */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0048 */ unsigned long ServiceCount;
  /* 0x004c */ unsigned long DispatchCount;
  /* 0x0050 */ struct _KEVENT* PassiveEvent;
  /* 0x0054 */ struct _KTRAP_FRAME* TrapFrame;
  /* 0x0058 */ void* DisconnectData;
  /* 0x005c */ struct _KTHREAD* volatile ServiceThread;
  /* 0x0060 */ struct _INTERRUPT_CONNECTION_DATA* ConnectionData;
  /* 0x0064 */ void* IntTrackEntry;
  /* 0x0068 */ struct _ISRDPCSTATS IsrDpcStats;
  /* 0x00c8 */ void* RedirectObject;
  /* 0x00cc */ void* PhysicalDeviceObject;
} KINTERRUPT, *PKINTERRUPT; /* size: 0x00d0 */

typedef struct _PROFILE_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Status;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned short DockingState;
  /* 0x0006 */ unsigned short Capabilities;
  /* 0x0008 */ unsigned long DockID;
  /* 0x000c */ unsigned long SerialNumber;
} PROFILE_PARAMETER_BLOCK, *PPROFILE_PARAMETER_BLOCK; /* size: 0x0010 */

typedef struct _LOADER_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned __int64 StartTime;
  /* 0x0008 */ unsigned __int64 EndTime;
  /* 0x0010 */ unsigned __int64 PreloadEndTime;
  /* 0x0018 */ unsigned __int64 TcbLoaderStartTime;
  /* 0x0020 */ unsigned __int64 LoadHypervisorTime;
  /* 0x0028 */ unsigned __int64 LaunchHypervisorTime;
  /* 0x0030 */ unsigned __int64 LoadVsmTime;
  /* 0x0038 */ unsigned __int64 LaunchVsmTime;
  /* 0x0040 */ unsigned __int64 ExecuteTransitionStartTime;
  /* 0x0048 */ unsigned __int64 ExecuteTransitionEndTime;
  /* 0x0050 */ unsigned __int64 LoadDriversTime;
  /* 0x0058 */ unsigned __int64 CleanupVsmTime;
} LOADER_PERFORMANCE_DATA, *PLOADER_PERFORMANCE_DATA; /* size: 0x0060 */

typedef struct _LOADER_BUGCHECK_PARAMETERS
{
  /* 0x0000 */ unsigned long BugcheckCode;
  /* 0x0004 */ unsigned long BugcheckParameter1;
  /* 0x0008 */ unsigned long BugcheckParameter2;
  /* 0x000c */ unsigned long BugcheckParameter3;
  /* 0x0010 */ unsigned long BugcheckParameter4;
} LOADER_BUGCHECK_PARAMETERS, *PLOADER_BUGCHECK_PARAMETERS; /* size: 0x0014 */

typedef struct _LOADER_HIVE_RECOVERY_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Recovered : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long LegacyRecovery : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long SoftRebootConflict : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long MostRecentLog : 3; /* bit position: 3 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long Spare : 27; /* bit position: 0 */
  /* 0x0008 */ unsigned long LogNextSequence;
  /* 0x000c */ unsigned long LogMinimumSequence;
  /* 0x0010 */ unsigned long LogCurrentOffset;
} LOADER_HIVE_RECOVERY_INFO, *PLOADER_HIVE_RECOVERY_INFO; /* size: 0x0014 */

typedef struct _VSM_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned __int64 LaunchVsmMark[8];
} VSM_PERFORMANCE_DATA, *PVSM_PERFORMANCE_DATA; /* size: 0x0040 */

typedef struct _ETW_BOOT_CONFIG
{
  /* 0x0000 */ unsigned long MaxLoggers;
  /* 0x0004 */ struct _LIST_ENTRY BootLoggersList;
} ETW_BOOT_CONFIG, *PETW_BOOT_CONFIG; /* size: 0x000c */

typedef struct _LOADER_PARAMETER_EXTENSION
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ struct _PROFILE_PARAMETER_BLOCK Profile;
  /* 0x0014 */ void* EmInfFileImage;
  /* 0x0018 */ unsigned long EmInfFileSize;
  /* 0x001c */ void* TriageDumpBlock;
  /* 0x0020 */ struct _HEADLESS_LOADER_BLOCK* HeadlessLoaderBlock;
  /* 0x0024 */ struct _SMBIOS3_TABLE_HEADER* SMBiosEPSHeader;
  /* 0x0028 */ void* DrvDBImage;
  /* 0x002c */ unsigned long DrvDBSize;
  /* 0x0030 */ void* DrvDBPatchImage;
  /* 0x0034 */ unsigned long DrvDBPatchSize;
  /* 0x0038 */ struct _NETWORK_LOADER_BLOCK* NetworkLoaderBlock;
  /* 0x003c */ unsigned char* HalpIRQLToTPR;
  /* 0x0040 */ unsigned char* HalpVectorToIRQL;
  /* 0x0044 */ struct _LIST_ENTRY FirmwareDescriptorListHead;
  /* 0x004c */ void* AcpiTable;
  /* 0x0050 */ unsigned long AcpiTableSize;
  struct /* bitfield */
  {
    /* 0x0054 */ unsigned long LastBootSucceeded : 1; /* bit position: 0 */
    /* 0x0054 */ unsigned long LastBootShutdown : 1; /* bit position: 1 */
    /* 0x0054 */ unsigned long IoPortAccessSupported : 1; /* bit position: 2 */
    /* 0x0054 */ unsigned long BootDebuggerActive : 1; /* bit position: 3 */
    /* 0x0054 */ unsigned long StrongCodeGuarantees : 1; /* bit position: 4 */
    /* 0x0054 */ unsigned long HardStrongCodeGuarantees : 1; /* bit position: 5 */
    /* 0x0054 */ unsigned long SidSharingDisabled : 1; /* bit position: 6 */
    /* 0x0054 */ unsigned long TpmInitialized : 1; /* bit position: 7 */
    /* 0x0054 */ unsigned long VsmConfigured : 1; /* bit position: 8 */
    /* 0x0054 */ unsigned long IumEnabled : 1; /* bit position: 9 */
    /* 0x0054 */ unsigned long IsSmbboot : 1; /* bit position: 10 */
    /* 0x0054 */ unsigned long BootLogEnabled : 1; /* bit position: 11 */
    /* 0x0054 */ unsigned long DriverVerifierEnabled : 1; /* bit position: 12 */
    /* 0x0054 */ unsigned long SuppressMonitorX : 1; /* bit position: 13 */
    /* 0x0054 */ unsigned long KernelCetEnabled : 1; /* bit position: 14 */
    /* 0x0054 */ unsigned long SuppressSmap : 1; /* bit position: 15 */
    /* 0x0054 */ unsigned long Unused : 5; /* bit position: 16 */
    /* 0x0054 */ unsigned long FeatureSimulations : 6; /* bit position: 21 */
    /* 0x0054 */ unsigned long MicrocodeSelfHosting : 1; /* bit position: 27 */
    /* 0x0054 */ unsigned long XhciLegacyHandoffSkip : 1; /* bit position: 28 */
    /* 0x0054 */ unsigned long DisableInsiderOptInHVCI : 1; /* bit position: 29 */
    /* 0x0054 */ unsigned long MicrocodeMinVerSupported : 1; /* bit position: 30 */
    /* 0x0054 */ unsigned long GpuIommuEnabled : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0058 */ struct _LOADER_PERFORMANCE_DATA LoaderPerformanceData;
  /* 0x00b8 */ struct _LIST_ENTRY BootApplicationPersistentData;
  /* 0x00c0 */ void* WmdTestResult;
  /* 0x00c4 */ struct _GUID BootIdentifier;
  /* 0x00d4 */ unsigned long ResumePages;
  /* 0x00d8 */ void* DumpHeader;
  /* 0x00dc */ void* BgContext;
  /* 0x00e0 */ void* NumaLocalityInfo;
  /* 0x00e4 */ void* NumaGroupAssignment;
  /* 0x00e8 */ struct _LIST_ENTRY AttachedHives;
  /* 0x00f0 */ unsigned long MemoryCachingRequirementsCount;
  /* 0x00f4 */ void* MemoryCachingRequirements;
  /* 0x00f8 */ struct _BOOT_ENTROPY_LDR_RESULT BootEntropyResult;
  /* 0x0960 */ unsigned __int64 ProcessorCounterFrequency;
  /* 0x0968 */ struct _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension;
  /* 0x09a8 */ struct _GUID HardwareConfigurationId;
  /* 0x09b8 */ struct _LIST_ENTRY HalExtensionModuleList;
  /* 0x09c0 */ union _LARGE_INTEGER SystemTime;
  /* 0x09c8 */ unsigned __int64 TimeStampAtSystemTimeRead;
  union
  {
    /* 0x09d0 */ unsigned __int64 BootFlags;
    struct /* bitfield */
    {
      /* 0x09d0 */ unsigned __int64 DbgMenuOsSelection : 1; /* bit position: 0 */
      /* 0x09d0 */ unsigned __int64 DbgHiberBoot : 1; /* bit position: 1 */
      /* 0x09d0 */ unsigned __int64 DbgSoftRestart : 1; /* bit position: 2 */
      /* 0x09d0 */ unsigned __int64 DbgMeasuredLaunch : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0008 */
  union
  {
    /* 0x09d8 */ unsigned __int64 InternalBootFlags;
    struct /* bitfield */
    {
      /* 0x09d8 */ unsigned __int64 DbgUtcBootTime : 1; /* bit position: 0 */
      /* 0x09d8 */ unsigned __int64 DbgRtcBootTime : 1; /* bit position: 1 */
      /* 0x09d8 */ unsigned __int64 DbgNoLegacyServices : 1; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0008 */
  /* 0x09e0 */ void* WfsFPData;
  /* 0x09e4 */ unsigned long WfsFPDataSize;
  /* 0x09e8 */ struct _LOADER_BUGCHECK_PARAMETERS BugcheckParameters;
  /* 0x09fc */ void* ApiSetSchema;
  /* 0x0a00 */ unsigned long ApiSetSchemaSize;
  /* 0x0a04 */ struct _LIST_ENTRY ApiSetSchemaExtensions;
  /* 0x0a0c */ struct _UNICODE_STRING AcpiBiosVersion;
  /* 0x0a14 */ struct _UNICODE_STRING SmbiosVersion;
  /* 0x0a1c */ struct _UNICODE_STRING EfiVersion;
  /* 0x0a24 */ struct _DEBUG_DEVICE_DESCRIPTOR* KdDebugDevice;
  /* 0x0a28 */ struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable;
  /* 0x0a48 */ struct _UNICODE_STRING ManufacturingProfile;
  /* 0x0a50 */ void* BbtBuffer;
  /* 0x0a54 */ long Padding_234;
  /* 0x0a58 */ unsigned __int64 XsaveAllowedFeatures;
  /* 0x0a60 */ unsigned long XsaveFlags;
  /* 0x0a64 */ void* BootOptions;
  /* 0x0a68 */ unsigned long IumEnablement;
  /* 0x0a6c */ unsigned long IumPolicy;
  /* 0x0a70 */ long IumStatus;
  /* 0x0a74 */ unsigned long BootId;
  /* 0x0a78 */ struct _LOADER_PARAMETER_CI_EXTENSION* CodeIntegrityData;
  /* 0x0a7c */ unsigned long CodeIntegrityDataSize;
  /* 0x0a80 */ struct _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo;
  /* 0x0a94 */ unsigned long SoftRestartCount;
  /* 0x0a98 */ __int64 SoftRestartTime;
  /* 0x0aa0 */ struct _LEAP_SECOND_DATA* LeapSecondData;
  /* 0x0aa4 */ unsigned long MajorRelease;
  /* 0x0aa8 */ unsigned long Reserved1;
  /* 0x0aac */ char NtBuildLab[224];
  /* 0x0b8c */ char NtBuildLabEx[224];
  /* 0x0c6c */ long Padding_235;
  /* 0x0c70 */ struct _LOADER_RESET_REASON ResetReason;
  /* 0x0ca0 */ unsigned long MaxPciBusNumber;
  /* 0x0ca4 */ unsigned long FeatureSettings;
  /* 0x0ca8 */ unsigned long HotPatchReserveSize;
  /* 0x0cac */ unsigned long RetpolineReserveSize;
  /* 0x0cb0 */ struct _VSM_PERFORMANCE_DATA VsmPerformanceData;
  /* 0x0cf0 */ struct _NUMA_MEMORY_RANGE* NumaMemoryRanges;
  /* 0x0cf4 */ unsigned long NumaMemoryRangeCount;
  /* 0x0cf8 */ unsigned long IommuFaultPolicy;
  /* 0x0cfc */ struct _LOADER_FEATURE_CONFIGURATION_INFORMATION FeatureConfigurationInformation;
  /* 0x0d14 */ struct _ETW_BOOT_CONFIG EtwBootConfig;
  /* 0x0d20 */ struct _BOOT_FIRMWARE_RAMDISK_INFO* FwRamdiskInfo;
  /* 0x0d24 */ void* IpmiHwContext;
} LOADER_PARAMETER_EXTENSION, *PLOADER_PARAMETER_EXTENSION; /* size: 0x0d28 */

typedef struct _ARC_DISK_INFORMATION
{
  /* 0x0000 */ struct _LIST_ENTRY DiskSignatures;
} ARC_DISK_INFORMATION, *PARC_DISK_INFORMATION; /* size: 0x0008 */

typedef struct _CLIENT_ID64
{
  /* 0x0000 */ unsigned __int64 UniqueProcess;
  /* 0x0008 */ unsigned __int64 UniqueThread;
} CLIENT_ID64, *PCLIENT_ID64; /* size: 0x0010 */

typedef struct _DEVICE_DATA_SET_RANGE
{
  /* 0x0000 */ __int64 StartingOffset;
  /* 0x0008 */ unsigned __int64 LengthInBytes;
} DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE; /* size: 0x0010 */

typedef struct _LOCK_TRACKER
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE LockTrackerNode;
  /* 0x000c */ struct _MDL* Mdl;
  /* 0x0010 */ void* StartVa;
  /* 0x0014 */ unsigned long Count;
  /* 0x0018 */ unsigned long Offset;
  /* 0x001c */ unsigned long Length;
  /* 0x0020 */ unsigned long Who;
  /* 0x0024 */ unsigned long Hash;
  /* 0x0028 */ unsigned long Page;
  /* 0x002c */ void* StackTrace[8];
  /* 0x004c */ struct _EPROCESS* Process;
} LOCK_TRACKER, *PLOCK_TRACKER; /* size: 0x0050 */

typedef struct _MEMORY_ALLOCATION_DESCRIPTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ enum _TYPE_OF_MEMORY MemoryType;
  /* 0x000c */ unsigned long BasePage;
  /* 0x0010 */ unsigned long PageCount;
} MEMORY_ALLOCATION_DESCRIPTOR, *PMEMORY_ALLOCATION_DESCRIPTOR; /* size: 0x0014 */

typedef struct _TRUSTLET_COLLABORATION_ID
{
  /* 0x0000 */ unsigned __int64 Value[2];
} TRUSTLET_COLLABORATION_ID, *PTRUSTLET_COLLABORATION_ID; /* size: 0x0010 */

typedef struct _OBJECT_HEADER_NAME_INFO
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0004 */ struct _UNICODE_STRING Name;
  /* 0x000c */ long ReferenceCount;
} OBJECT_HEADER_NAME_INFO, *POBJECT_HEADER_NAME_INFO; /* size: 0x0010 */

typedef struct _OBJECT_HEADER_PROCESS_INFO
{
  /* 0x0000 */ struct _EPROCESS* ExclusiveProcess;
  /* 0x0004 */ unsigned long Reserved;
} OBJECT_HEADER_PROCESS_INFO, *POBJECT_HEADER_PROCESS_INFO; /* size: 0x0008 */

typedef struct _ENODE
{
  /* 0x0000 */ struct _KNODE Ncb;
  /* 0x0140 */ struct _WORK_QUEUE_ITEM HotAddProcessorWorkItem;
  /* 0x0150 */ long __PADDING__[12];
} ENODE, *PENODE; /* size: 0x0180 */

typedef struct _AUX_ACCESS_DATA
{
  /* 0x0000 */ struct _PRIVILEGE_SET* PrivilegesUsed;
  /* 0x0004 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0014 */ unsigned long AccessesToAudit;
  /* 0x0018 */ unsigned long MaximumAuditMask;
  /* 0x001c */ struct _GUID TransactionId;
  /* 0x002c */ void* NewSecurityDescriptor;
  /* 0x0030 */ void* ExistingSecurityDescriptor;
  /* 0x0034 */ void* ParentSecurityDescriptor;
  /* 0x0038 */ void* DeRefSecurityDescriptor /* function */;
  /* 0x003c */ void* SDLock;
  /* 0x0040 */ struct _ACCESS_REASONS AccessReasons;
  /* 0x00c0 */ unsigned char GenerateStagingEvents;
  /* 0x00c1 */ char __PADDING__[3];
} AUX_ACCESS_DATA, *PAUX_ACCESS_DATA; /* size: 0x00c4 */

typedef struct _PNP_DEVICE_EVENT_LIST
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ struct _KMUTANT EventQueueMutex;
  /* 0x0024 */ struct _FAST_MUTEX Lock;
  /* 0x0044 */ struct _LIST_ENTRY List;
} PNP_DEVICE_EVENT_LIST, *PPNP_DEVICE_EVENT_LIST; /* size: 0x004c */

typedef struct _PORT_MESSAGE
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ short DataLength;
        /* 0x0002 */ short TotalLength;
      } /* size: 0x0004 */ s1;
      /* 0x0000 */ unsigned long Length;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ short Type;
        /* 0x0006 */ short DataInfoOffset;
      } /* size: 0x0004 */ s2;
      /* 0x0004 */ unsigned long ZeroInit;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  union
  {
    /* 0x0008 */ struct _CLIENT_ID ClientId;
    /* 0x0008 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
  /* 0x0010 */ unsigned long MessageId;
  union
  {
    /* 0x0014 */ unsigned long ClientViewSize;
    /* 0x0014 */ unsigned long CallbackId;
  }; /* size: 0x0004 */
} PORT_MESSAGE, *PPORT_MESSAGE; /* size: 0x0018 */

typedef struct _LPCP_MESSAGE
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY Entry;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeEntry;
      /* 0x0004 */ unsigned long Reserved0;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0008 */ void* SenderPort;
  /* 0x000c */ struct _ETHREAD* RepliedToThread;
  /* 0x0010 */ void* PortContext;
  /* 0x0014 */ long Padding_236;
  /* 0x0018 */ struct _PORT_MESSAGE Request;
} LPCP_MESSAGE, *PLPCP_MESSAGE; /* size: 0x0030 */

typedef struct _TXN_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short TxFsContext;
  /* 0x0004 */ void* TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK; /* size: 0x0008 */

typedef struct _EVENT_HEADER_EXTENDED_DATA_ITEM
{
  /* 0x0000 */ unsigned short Reserved1;
  /* 0x0002 */ unsigned short ExtType;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned short Linkage : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned short Reserved2 : 15; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0006 */ unsigned short DataSize;
  /* 0x0008 */ unsigned __int64 DataPtr;
} EVENT_HEADER_EXTENDED_DATA_ITEM, *PEVENT_HEADER_EXTENDED_DATA_ITEM; /* size: 0x0010 */

typedef struct _MCUPDATE_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY List;
  /* 0x0008 */ unsigned long Status;
  /* 0x000c */ long Padding_237;
  /* 0x0010 */ unsigned __int64 Id;
  /* 0x0018 */ unsigned __int64 VendorScratch[2];
} MCUPDATE_INFO, *PMCUPDATE_INFO; /* size: 0x0028 */

typedef struct _TRIAGE_EX_WORK_QUEUE
{
  /* 0x0000 */ struct _KPRIQUEUE WorkPriQueue;
} TRIAGE_EX_WORK_QUEUE, *PTRIAGE_EX_WORK_QUEUE; /* size: 0x019c */

typedef struct _LOCK_HEADER
{
  /* 0x0000 */ struct _RTL_AVL_TREE LockTree;
  /* 0x0004 */ struct _RTL_AVL_TREE LockMdlSwitchedTree;
  /* 0x0008 */ unsigned long Count;
  /* 0x000c */ unsigned long Lock;
  /* 0x0010 */ unsigned long Valid;
} LOCK_HEADER, *PLOCK_HEADER; /* size: 0x0014 */

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x000c */ enum _WHEA_ERROR_SOURCE_STATE State;
  /* 0x0010 */ unsigned long MaxRawDataLength;
  /* 0x0014 */ unsigned long NumRecordsToPreallocate;
  /* 0x0018 */ unsigned long MaxSectionsPerRecord;
  /* 0x001c */ unsigned long ErrorSourceId;
  /* 0x0020 */ unsigned long PlatformErrorSourceId;
  /* 0x0024 */ unsigned long Flags;
  union
  {
    union
    {
      /* 0x0028 */ struct _WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
      /* 0x0028 */ struct _WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
      /* 0x0028 */ struct _WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
      /* 0x0028 */ struct _WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
      /* 0x0028 */ struct _WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
      /* 0x0028 */ struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;
      /* 0x0028 */ struct _WHEA_DEVICE_DRIVER_DESCRIPTOR DeviceDriverDescriptor;
    }; /* size: 0x03a4 */
  } /* size: 0x03a4 */ Info;
} WHEA_ERROR_SOURCE_DESCRIPTOR, *PWHEA_ERROR_SOURCE_DESCRIPTOR; /* size: 0x03cc */

typedef struct _WHEA_ERROR_RECORD
{
  /* 0x0000 */ struct _WHEA_ERROR_RECORD_HEADER Header;
  /* 0x0080 */ struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
} WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD; /* size: 0x00c8 */

typedef struct _iobuf
{
  /* 0x0000 */ char* _ptr;
  /* 0x0004 */ int _cnt;
  /* 0x0008 */ char* _base;
  /* 0x000c */ int _flag;
  /* 0x0010 */ int _file;
  /* 0x0014 */ int _charbuf;
  /* 0x0018 */ int _bufsiz;
  /* 0x001c */ char* _tmpfname;
} iobuf, *Piobuf; /* size: 0x0020 */

typedef struct _RTL_HASH_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY BucketLink;
  /* 0x0004 */ unsigned long Key;
} RTL_HASH_ENTRY, *PRTL_HASH_ENTRY; /* size: 0x0008 */

typedef struct _RTL_HASH_TABLE_ITERATOR
{
  /* 0x0000 */ struct _RTL_HASH_TABLE* Hash;
  /* 0x0004 */ struct _RTL_HASH_ENTRY* HashEntry;
  /* 0x0008 */ struct _SINGLE_LIST_ENTRY* Bucket;
} RTL_HASH_TABLE_ITERATOR, *PRTL_HASH_TABLE_ITERATOR; /* size: 0x000c */

typedef struct _DEFERRED_WRITE
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ struct _FILE_OBJECT* FileObject;
  /* 0x0008 */ unsigned long BytesToWrite;
  /* 0x000c */ struct _LIST_ENTRY DeferredWriteLinks;
  /* 0x0014 */ struct _KEVENT* Event;
  /* 0x0018 */ void* PostRoutine /* function */;
  /* 0x001c */ void* Context1;
  /* 0x0020 */ void* Context2;
  /* 0x0024 */ struct _CC_PARTITION* Partition;
  /* 0x0028 */ unsigned char SoftThrottle;
  /* 0x0029 */ char Padding_238[7];
  /* 0x0030 */ union _LARGE_INTEGER TimeAdded;
} DEFERRED_WRITE, *PDEFERRED_WRITE; /* size: 0x0038 */

typedef struct _KALPC_SECURITY_DATA
{
  /* 0x0000 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0004 */ void* ContextHandle;
  /* 0x0008 */ struct _EPROCESS* OwningProcess;
  /* 0x000c */ struct _ALPC_PORT* OwnerPort;
  /* 0x0010 */ struct _SECURITY_CLIENT_CONTEXT DynamicSecurity;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x004c */ unsigned long Revoked : 1; /* bit position: 0 */
        /* 0x004c */ unsigned long Impersonated : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
} KALPC_SECURITY_DATA, *PKALPC_SECURITY_DATA; /* size: 0x0050 */

typedef struct _tlgProviderMetadata_t
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ struct _GUID ProviderId;
  /* 0x0011 */ unsigned short RemainingSize;
} tlgProviderMetadata_t, *PtlgProviderMetadata_t; /* size: 0x0013 */

typedef union __m64
{
  union
  {
    /* 0x0000 */ unsigned __int64 m64_u64;
    /* 0x0000 */ float m64_f32[2];
    /* 0x0000 */ char m64_i8[8];
    /* 0x0000 */ short m64_i16[4];
    /* 0x0000 */ int m64_i32[2];
    /* 0x0000 */ __int64 m64_i64;
    /* 0x0000 */ unsigned char m64_u8[8];
    /* 0x0000 */ unsigned short m64_u16[4];
    /* 0x0000 */ unsigned int m64_u32[2];
  }; /* size: 0x0008 */
} _m64, *P_m64; /* size: 0x0008 */

typedef struct _HEAP_FAILURE_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long StructureSize;
  /* 0x0008 */ enum _HEAP_FAILURE_TYPE FailureType;
  /* 0x000c */ void* HeapAddress;
  /* 0x0010 */ void* Address;
  /* 0x0014 */ void* Param1;
  /* 0x0018 */ void* Param2;
  /* 0x001c */ void* Param3;
  /* 0x0020 */ void* PreviousBlock;
  /* 0x0024 */ void* NextBlock;
  /* 0x0028 */ struct _FAKE_HEAP_ENTRY ExpectedDecodedEntry;
  /* 0x0030 */ void* StackTrace[32];
  /* 0x00b0 */ unsigned char HeapMajorVersion;
  /* 0x00b1 */ unsigned char HeapMinorVersion;
  /* 0x00b2 */ char Padding_239[2];
  /* 0x00b4 */ struct _EXCEPTION_RECORD ExceptionRecord;
  /* 0x0104 */ struct _CONTEXT ContextRecord;
} HEAP_FAILURE_INFORMATION, *PHEAP_FAILURE_INFORMATION; /* size: 0x03d0 */

struct wil_details_FeatureReportingCache
{
  /* 0x0000 */ union wil_details_ReportedState reported;
  /* 0x0004 */ union wil_details_RecordedState recorded;
}; /* size: 0x0008 */

typedef struct _SEP_LUID_TO_INDEX_MAP_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x000c */ long ReferenceCount;
  /* 0x0010 */ unsigned __int64 Luid;
  /* 0x0018 */ unsigned __int64 IndexIntoGlobalSingletonTable;
  /* 0x0020 */ unsigned char MarkedForDeletion;
  /* 0x0021 */ char __PADDING__[7];
} SEP_LUID_TO_INDEX_MAP_ENTRY, *PSEP_LUID_TO_INDEX_MAP_ENTRY; /* size: 0x0028 */

typedef struct _PCW_COUNTER_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
  /* 0x000c */ long __PADDING__[1];
} PCW_COUNTER_INFORMATION, *PPCW_COUNTER_INFORMATION; /* size: 0x0010 */

typedef struct _PCW_MASK_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CounterMask;
  /* 0x0008 */ const struct _UNICODE_STRING* InstanceMask;
  /* 0x000c */ unsigned long InstanceId;
  /* 0x0010 */ unsigned char CollectMultiple;
  /* 0x0011 */ char Padding_240[3];
  /* 0x0014 */ struct _PCW_BUFFER* Buffer;
  /* 0x0018 */ struct _KEVENT* CancelEvent;
  /* 0x001c */ long __PADDING__[1];
} PCW_MASK_INFORMATION, *PPCW_MASK_INFORMATION; /* size: 0x0020 */

typedef union _PCW_CALLBACK_INFORMATION
{
  union
  {
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION AddCounter;
    /* 0x0000 */ struct _PCW_COUNTER_INFORMATION RemoveCounter;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION EnumerateInstances;
    /* 0x0000 */ struct _PCW_MASK_INFORMATION CollectData;
  }; /* size: 0x0020 */
} PCW_CALLBACK_INFORMATION, *PPCW_CALLBACK_INFORMATION; /* size: 0x0020 */

typedef struct _MMCLONE_HEADER
{
  /* 0x0000 */ unsigned long NumberOfPtes;
  /* 0x0004 */ volatile unsigned long NumberOfProcessReferences;
  /* 0x0008 */ struct _MMCLONE_BLOCK* ClonePtes;
  /* 0x000c */ struct _MI_PARTITION* Partition;
} MMCLONE_HEADER, *PMMCLONE_HEADER; /* size: 0x0010 */

typedef struct _TIME_FIELDS
{
  /* 0x0000 */ short Year;
  /* 0x0002 */ short Month;
  /* 0x0004 */ short Day;
  /* 0x0006 */ short Hour;
  /* 0x0008 */ short Minute;
  /* 0x000a */ short Second;
  /* 0x000c */ short Milliseconds;
  /* 0x000e */ short Weekday;
} TIME_FIELDS, *PTIME_FIELDS; /* size: 0x0010 */

typedef struct _RTL_TIME_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _TIME_FIELDS StandardStart;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _TIME_FIELDS DaylightStart;
  /* 0x00a8 */ long DaylightBias;
} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION; /* size: 0x00ac */

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR
{
  /* 0x0000 */ unsigned long NumberOfRuns;
  /* 0x0004 */ unsigned long NumberOfPages;
  /* 0x0008 */ struct _PHYSICAL_MEMORY_RUN Run[1];
} PHYSICAL_MEMORY_DESCRIPTOR, *PPHYSICAL_MEMORY_DESCRIPTOR; /* size: 0x0010 */

struct _AWEINFO;

typedef union _HEAP_SEGMENT_MGR_COMMIT_STATE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short CommittedPageCount : 11; /* bit position: 0 */
      /* 0x0000 */ unsigned short Spare : 3; /* bit position: 11 */
      /* 0x0000 */ unsigned short LargePageOperationInProgress : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short LargePageCommit : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ volatile unsigned short EntireUShortV;
    /* 0x0000 */ unsigned short EntireUShort;
  }; /* size: 0x0002 */
} HEAP_SEGMENT_MGR_COMMIT_STATE, *PHEAP_SEGMENT_MGR_COMMIT_STATE; /* size: 0x0002 */

typedef struct _HEAP_VS_SUBSEGMENT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned __int64 CommitBitmap;
  /* 0x0010 */ unsigned long CommitLock;
  /* 0x0014 */ unsigned short Size;
  struct /* bitfield */
  {
    /* 0x0016 */ unsigned short Signature : 15; /* bit position: 0 */
    /* 0x0016 */ unsigned short FullCommit : 1; /* bit position: 15 */
  }; /* bitfield */
} HEAP_VS_SUBSEGMENT, *PHEAP_VS_SUBSEGMENT; /* size: 0x0018 */

typedef struct _MI_CONTROL_AREA_WAIT_BLOCK
{
  /* 0x0000 */ struct _MI_CONTROL_AREA_WAIT_BLOCK* Next;
  /* 0x0004 */ unsigned long WaitReason;
  /* 0x0008 */ unsigned long WaitResponse;
  /* 0x000c */ struct _KGATE Gate;
} MI_CONTROL_AREA_WAIT_BLOCK, *PMI_CONTROL_AREA_WAIT_BLOCK; /* size: 0x001c */

typedef struct _MMEXTEND_INFO
{
  /* 0x0000 */ unsigned __int64 CommittedSize;
  /* 0x0008 */ unsigned long ReferenceCount;
  /* 0x000c */ long __PADDING__[1];
} MMEXTEND_INFO, *PMMEXTEND_INFO; /* size: 0x0010 */

typedef struct _OB_DUPLICATE_OBJECT_STATE
{
  /* 0x0000 */ struct _EPROCESS* SourceProcess;
  /* 0x0004 */ void* SourceHandle;
  /* 0x0008 */ void* Object;
  /* 0x000c */ unsigned long TargetAccess;
  /* 0x0010 */ struct _HANDLE_TABLE_ENTRY_INFO ObjectInfo;
  /* 0x0018 */ unsigned long HandleAttributes;
} OB_DUPLICATE_OBJECT_STATE, *POB_DUPLICATE_OBJECT_STATE; /* size: 0x001c */

typedef struct _KALPC_HANDLE_DATA
{
  /* 0x0000 */ unsigned long ObjectType;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _OB_DUPLICATE_OBJECT_STATE DuplicateContext;
} KALPC_HANDLE_DATA, *PKALPC_HANDLE_DATA; /* size: 0x0024 */

typedef union _HEAP_LFH_ONDEMAND_POINTER
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short Invalid : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned short AllocationInProgress : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned short Spare0 : 14; /* bit position: 2 */
      }; /* bitfield */
      /* 0x0002 */ unsigned short UsageData;
    }; /* size: 0x0004 */
    /* 0x0000 */ void* AllBits;
  }; /* size: 0x0004 */
} HEAP_LFH_ONDEMAND_POINTER, *PHEAP_LFH_ONDEMAND_POINTER; /* size: 0x0004 */

typedef struct _HEAP_LFH_FAST_REF
{
  union
  {
    /* 0x0000 */ void* Target;
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ unsigned long RefCount : 12; /* bit position: 0 */
  }; /* size: 0x0004 */
} HEAP_LFH_FAST_REF, *PHEAP_LFH_FAST_REF; /* size: 0x0004 */

typedef struct _KALPC_RESERVE
{
  /* 0x0000 */ struct _ALPC_PORT* OwnerPort;
  /* 0x0004 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x0008 */ void* Handle;
  /* 0x000c */ struct _KALPC_MESSAGE* Message;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ long Active;
} KALPC_RESERVE, *PKALPC_RESERVE; /* size: 0x0018 */

typedef struct _ALPC_HANDLE_TABLE
{
  /* 0x0000 */ struct _ALPC_HANDLE_ENTRY* Handles;
  /* 0x0004 */ unsigned long TotalHandles;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _EX_PUSH_LOCK Lock;
} ALPC_HANDLE_TABLE, *PALPC_HANDLE_TABLE; /* size: 0x0010 */

typedef struct _ALPC_COMMUNICATION_INFO
{
  /* 0x0000 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x0004 */ struct _ALPC_PORT* ServerCommunicationPort;
  /* 0x0008 */ struct _ALPC_PORT* ClientCommunicationPort;
  /* 0x000c */ struct _LIST_ENTRY CommunicationList;
  /* 0x0014 */ struct _ALPC_HANDLE_TABLE HandleTable;
  /* 0x0024 */ struct _KALPC_MESSAGE* CloseMessage;
} ALPC_COMMUNICATION_INFO, *PALPC_COMMUNICATION_INFO; /* size: 0x0028 */

typedef struct _MODWRITER_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long KeepForever : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Networked : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long IoPriority : 3; /* bit position: 2 */
    /* 0x0000 */ unsigned long ModifiedStoreWrite : 1; /* bit position: 5 */
  }; /* bitfield */
} MODWRITER_FLAGS, *PMODWRITER_FLAGS; /* size: 0x0004 */

typedef struct _MMMOD_WRITER_MDL_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  union
  {
    /* 0x0008 */ struct _IO_STATUS_BLOCK IoStatus;
  } /* size: 0x0008 */ u;
  /* 0x0010 */ struct _IRP* Irp;
  /* 0x0014 */ struct _MODWRITER_FLAGS u1;
  /* 0x0018 */ unsigned long StoreWriteRefCount;
  /* 0x001c */ struct _KAPC StoreWriteCompletionApc;
  /* 0x004c */ unsigned long ByteCount;
  /* 0x0050 */ unsigned long ChargedPages;
  /* 0x0054 */ struct _MMPAGING_FILE* PagingFile;
  /* 0x0058 */ struct _FILE_OBJECT* File;
  /* 0x005c */ struct _CONTROL_AREA* ControlArea;
  /* 0x0060 */ struct _ERESOURCE* FileResource;
  /* 0x0064 */ long Padding_241;
  /* 0x0068 */ union _LARGE_INTEGER WriteOffset;
  /* 0x0070 */ union _LARGE_INTEGER IssueTime;
  /* 0x0078 */ struct _MI_PARTITION* Partition;
  /* 0x007c */ struct _MDL* PointerMdl;
  /* 0x0080 */ struct _MDL Mdl;
  /* 0x009c */ unsigned long Page[1];
} MMMOD_WRITER_MDL_ENTRY, *PMMMOD_WRITER_MDL_ENTRY; /* size: 0x00a0 */

typedef union _CM_TRANS_PTR
{
  union
  {
    /* 0x0000 */ unsigned long LightWeight : 1; /* bit position: 0 */
    /* 0x0000 */ void* TransPtr;
  }; /* size: 0x0004 */
} CM_TRANS_PTR, *PCM_TRANS_PTR; /* size: 0x0004 */

typedef struct _ALPC_PORT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x0010 */ unsigned long MaxMessageLength;
  /* 0x0014 */ unsigned long MemoryBandwidth;
  /* 0x0018 */ unsigned long MaxPoolUsage;
  /* 0x001c */ unsigned long MaxSectionSize;
  /* 0x0020 */ unsigned long MaxViewSize;
  /* 0x0024 */ unsigned long MaxTotalSectionSize;
  /* 0x0028 */ unsigned long DupObjectTypes;
} ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES; /* size: 0x002c */

struct CMP_OFFSET_ARRAY
{
  /* 0x0000 */ unsigned long FileOffset;
  /* 0x0004 */ void* DataBuffer;
  /* 0x0008 */ unsigned long DataLength;
}; /* size: 0x000c */

typedef struct _BLOB
{
  union
  {
    /* 0x0000 */ struct _LIST_ENTRY ResourceList;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0008 */ unsigned char ReferenceCache : 1; /* bit position: 0 */
          /* 0x0008 */ unsigned char Lookaside : 1; /* bit position: 1 */
          /* 0x0008 */ unsigned char Initializing : 1; /* bit position: 2 */
          /* 0x0008 */ unsigned char Deleted : 1; /* bit position: 3 */
        }; /* bitfield */
      } /* size: 0x0001 */ s1;
      /* 0x0008 */ unsigned char Flags;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ u1;
  /* 0x0009 */ unsigned char ResourceId;
  /* 0x000a */ short CachedReferences;
  /* 0x000c */ long ReferenceCount;
  /* 0x0010 */ unsigned long Pad;
  /* 0x0014 */ struct _EX_PUSH_LOCK Lock;
} BLOB, *PBLOB; /* size: 0x0018 */

typedef struct _MMADDRESS_LIST
{
  union
  {
    union
    {
      /* 0x0000 */ struct _MMSECURE_FLAGS Flags;
      /* 0x0000 */ unsigned long FlagsLong;
      /* 0x0000 */ void* StartVa;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0004 */ void* EndVa;
} MMADDRESS_LIST, *PMMADDRESS_LIST; /* size: 0x0008 */

typedef struct _MI_LARGEPAGE_VAD_INFO
{
  /* 0x0000 */ unsigned char LargeImageBias;
  /* 0x0001 */ unsigned char Spare[3];
  /* 0x0004 */ unsigned long ActualImageViewSize;
  /* 0x0008 */ struct _EPARTITION* ReferencedPartition;
} MI_LARGEPAGE_VAD_INFO, *PMI_LARGEPAGE_VAD_INFO; /* size: 0x000c */

typedef struct _MI_PHYSICAL_VIEW
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE PhysicalNode;
  /* 0x000c */ struct _MMVAD_SHORT* Vad;
  /* 0x0010 */ struct _AWEINFO* AweInfo;
  union
  {
    union
    {
      /* 0x0014 */ unsigned long ViewPageSize : 2; /* bit position: 0 */
      /* 0x0014 */ struct _CONTROL_AREA* ControlArea;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} MI_PHYSICAL_VIEW, *PMI_PHYSICAL_VIEW; /* size: 0x0018 */

typedef struct _MI_SUB64K_FREE_RANGES
{
  /* 0x0000 */ struct _RTL_BITMAP BitMap;
  /* 0x0008 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _MMVAD_SHORT* Vad;
  /* 0x0014 */ unsigned long SetBits;
  /* 0x0018 */ unsigned long FullSetBits;
  struct /* bitfield */
  {
    /* 0x001c */ unsigned long SubListIndex : 2; /* bit position: 0 */
    /* 0x001c */ unsigned long Hint : 30; /* bit position: 2 */
  }; /* bitfield */
} MI_SUB64K_FREE_RANGES, *PMI_SUB64K_FREE_RANGES; /* size: 0x0020 */

typedef struct _MI_VAD_EVENT_BLOCK
{
  /* 0x0000 */ struct _MI_VAD_EVENT_BLOCK* Next;
  union
  {
    /* 0x0004 */ struct _KGATE Gate;
    /* 0x0004 */ struct _MMADDRESS_LIST SecureInfo;
    /* 0x0004 */ struct _RTL_BITMAP BitMap;
    /* 0x0004 */ struct _MMINPAGE_SUPPORT* InPageSupport;
    /* 0x0004 */ struct _MI_LARGEPAGE_VAD_INFO LargePage;
    /* 0x0004 */ struct _MI_PHYSICAL_VIEW AweView;
    /* 0x0004 */ struct _ETHREAD* CreatingThread;
    /* 0x0004 */ struct _MI_SUB64K_FREE_RANGES PebTeb;
    /* 0x0004 */ struct _MMVAD_SHORT* PlaceholderVad;
  }; /* size: 0x0020 */
  /* 0x0024 */ unsigned long WaitReason;
} MI_VAD_EVENT_BLOCK, *PMI_VAD_EVENT_BLOCK; /* size: 0x0028 */

typedef struct _ALPC_HANDLE_ENTRY
{
  /* 0x0000 */ void* Object;
} ALPC_HANDLE_ENTRY, *PALPC_HANDLE_ENTRY; /* size: 0x0004 */

typedef struct _BUS_EXTENSION_LIST
{
  /* 0x0000 */ void* Next;
  /* 0x0004 */ struct _PI_BUS_EXTENSION* BusExtension;
} BUS_EXTENSION_LIST, *PBUS_EXTENSION_LIST; /* size: 0x0008 */

typedef struct _MI_PER_SESSION_PROTOS
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE SessionProtoNode;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY FreeList;
    /* 0x0000 */ void* DriverAddress;
  }; /* size: 0x000c */
  /* 0x000c */ struct _MI_PROTOTYPE_PTES_NODE ProtosNode;
  /* 0x001c */ unsigned long NumberOfPtes;
  union
  {
    /* 0x0020 */ unsigned long SessionId;
    /* 0x0020 */ struct _SUBSECTION* Subsection;
  }; /* size: 0x0004 */
  /* 0x0024 */ struct _MMPTE* SubsectionBase;
  union
  {
    union
    {
      /* 0x0028 */ unsigned long ReferenceCount;
      /* 0x0028 */ unsigned long NumberOfPtesToFree;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
} MI_PER_SESSION_PROTOS, *PMI_PER_SESSION_PROTOS; /* size: 0x002c */

typedef union _MM_STORE_KEY
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long KeyLow : 28; /* bit position: 0 */
      /* 0x0000 */ unsigned long KeyHigh : 4; /* bit position: 28 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long EntireKey;
  }; /* size: 0x0004 */
} MM_STORE_KEY, *PMM_STORE_KEY; /* size: 0x0004 */

typedef struct _MI_IMAGE_LOAD_CONFIG
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned short CfgAlignmentBias;
  /* 0x0006 */ unsigned short MachineType;
  /* 0x0008 */ struct _RTL_RVA_LIST* RvaList;
} MI_IMAGE_LOAD_CONFIG, *PMI_IMAGE_LOAD_CONFIG; /* size: 0x000c */

typedef struct _RTL_RVA_LIST
{
  /* 0x0000 */ unsigned long RvaCount;
  /* 0x0004 */ unsigned long StateBitsPerRva;
  /* 0x0008 */ unsigned char* CompressedBuffer;
  /* 0x000c */ unsigned long CompressedBufferSize;
  /* 0x0010 */ struct _RTL_BITMAP RvaStateBitMap;
  /* 0x0018 */ unsigned long* StateBitValueMap;
  /* 0x001c */ void* ExtensionBuffer;
} RTL_RVA_LIST, *PRTL_RVA_LIST; /* size: 0x0020 */

typedef struct _PO_NOTIFY_ORDER_LEVEL
{
  /* 0x0000 */ unsigned long DeviceCount;
  /* 0x0004 */ unsigned long ActiveCount;
  /* 0x0008 */ struct _LIST_ENTRY WaitSleep;
  /* 0x0010 */ struct _LIST_ENTRY ReadySleep;
  /* 0x0018 */ struct _LIST_ENTRY ReadyS0;
  /* 0x0020 */ struct _LIST_ENTRY WaitS0;
} PO_NOTIFY_ORDER_LEVEL, *PPO_NOTIFY_ORDER_LEVEL; /* size: 0x0028 */

typedef struct _RTLP_HP_ALLOC_TRACKER
{
  /* 0x0000 */ unsigned long BaseAddress;
  union
  {
    /* 0x0004 */ struct _RTL_CSPARSE_BITMAP AllocTrackerBitmap;
    /* 0x0004 */ unsigned char AllocTrackerBitmapBuffer[40];
  }; /* size: 0x0028 */
} RTLP_HP_ALLOC_TRACKER, *PRTLP_HP_ALLOC_TRACKER; /* size: 0x002c */

typedef struct _HEAP_VAMGR_ALLOCATOR
{
  /* 0x0000 */ unsigned long TreeLock;
  /* 0x0004 */ struct _RTL_RB_TREE FreeRanges;
  /* 0x000c */ struct _HEAP_VAMGR_VASPACE* VaSpace;
  /* 0x0010 */ void* PartitionHandle;
  /* 0x0014 */ unsigned short ChunksPerRegion;
  /* 0x0016 */ unsigned short RefCount;
  /* 0x0018 */ unsigned char AllocatorIndex;
  /* 0x0019 */ unsigned char NumaNode;
  struct /* bitfield */
  {
    /* 0x001a */ unsigned char LockType : 1; /* bit position: 0 */
    /* 0x001a */ unsigned char MemoryType : 2; /* bit position: 1 */
    /* 0x001a */ unsigned char ConstrainedVA : 1; /* bit position: 3 */
    /* 0x001a */ unsigned char AllowFreeHead : 1; /* bit position: 4 */
    /* 0x001a */ unsigned char Spare0 : 3; /* bit position: 5 */
  }; /* bitfield */
  /* 0x001b */ unsigned char Spare1;
} HEAP_VAMGR_ALLOCATOR, *PHEAP_VAMGR_ALLOCATOR; /* size: 0x001c */

typedef struct _HEAP_VAMGR_CTX
{
  /* 0x0000 */ struct _HEAP_VAMGR_VASPACE VaSpace;
  /* 0x0034 */ unsigned long AllocatorLock;
  /* 0x0038 */ unsigned long AllocatorCount;
  /* 0x003c */ struct _HEAP_VAMGR_ALLOCATOR Allocators[255];
} HEAP_VAMGR_CTX, *PHEAP_VAMGR_CTX; /* size: 0x1c20 */

typedef union _RTL_RUN_ONCE
{
  union
  {
    /* 0x0000 */ void* Ptr;
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ unsigned long State : 2; /* bit position: 0 */
  }; /* size: 0x0004 */
} RTL_RUN_ONCE, *PRTL_RUN_ONCE; /* size: 0x0004 */

typedef struct _RTLP_HP_METADATA_HEAP_CTX
{
  /* 0x0000 */ struct _SEGMENT_HEAP* Heap;
  /* 0x0004 */ union _RTL_RUN_ONCE InitOnce;
} RTLP_HP_METADATA_HEAP_CTX, *PRTLP_HP_METADATA_HEAP_CTX; /* size: 0x0008 */

typedef struct _RTL_HP_VS_CONFIG
{
  struct
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long PageAlignLargeAllocs : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long FullDecommit : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long EnableDelayFree : 1; /* bit position: 2 */
    }; /* bitfield */
  } /* size: 0x0004 */ Flags;
} RTL_HP_VS_CONFIG, *PRTL_HP_VS_CONFIG; /* size: 0x0004 */

typedef struct _RTL_HP_SUB_ALLOCATOR_CONFIGS
{
  /* 0x0000 */ struct _RTL_HP_LFH_CONFIG LfhConfigs;
  /* 0x0004 */ struct _RTL_HP_VS_CONFIG VsConfigs;
} RTL_HP_SUB_ALLOCATOR_CONFIGS, *PRTL_HP_SUB_ALLOCATOR_CONFIGS; /* size: 0x0008 */

typedef struct _RTLP_HP_HEAP_MANAGER
{
  /* 0x0000 */ struct _RTLP_HP_HEAP_GLOBALS* Globals;
  /* 0x0004 */ struct _RTLP_HP_ALLOC_TRACKER AllocTracker;
  /* 0x0030 */ struct _HEAP_VAMGR_CTX VaMgr;
  /* 0x1c50 */ struct _RTLP_HP_METADATA_HEAP_CTX MetadataHeaps[3];
  /* 0x1c68 */ struct _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs;
} RTLP_HP_HEAP_MANAGER, *PRTLP_HP_HEAP_MANAGER; /* size: 0x1c70 */

struct RTL_HP_ENV_HANDLE
{
  /* 0x0000 */ void* h[2];
}; /* size: 0x0008 */

typedef struct _EX_HEAP_SESSION_STATE
{
  /* 0x0000 */ struct _RTLP_HP_HEAP_MANAGER HeapManager;
  /* 0x1c70 */ struct RTL_HP_ENV_HANDLE PagedEnv;
  /* 0x1c78 */ struct _SEGMENT_HEAP* PagedHeap;
  /* 0x1c7c */ struct _SEGMENT_HEAP* SpecialPoolHeap;
} EX_HEAP_SESSION_STATE, *PEX_HEAP_SESSION_STATE; /* size: 0x1c80 */

typedef struct _HAL_LOG_REGISTER_CONTEXT
{
  /* 0x0000 */ void* LogRoutine /* function */;
  /* 0x0004 */ unsigned long Flag;
} HAL_LOG_REGISTER_CONTEXT, *PHAL_LOG_REGISTER_CONTEXT; /* size: 0x0008 */

typedef struct _HV_GET_CELL_CONTEXT
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ struct _HV_GET_BIN_CONTEXT BinContext;
  /* 0x0006 */ char __PADDING__[2];
} HV_GET_CELL_CONTEXT, *PHV_GET_CELL_CONTEXT; /* size: 0x0008 */

typedef struct _MI_DRIVER_VA
{
  /* 0x0000 */ struct _MI_DRIVER_VA* Next;
  /* 0x0004 */ struct _MMPTE* PointerPte;
  /* 0x0008 */ struct _RTL_BITMAP BitMap;
  /* 0x0010 */ unsigned long Hint;
  /* 0x0014 */ unsigned long Flags;
} MI_DRIVER_VA, *PMI_DRIVER_VA; /* size: 0x0018 */

typedef struct _CACHED_KSTACK_LIST
{
  /* 0x0000 */ union _SLIST_HEADER SListHead;
  /* 0x0008 */ long MinimumFree;
  /* 0x000c */ unsigned long Misses;
  /* 0x0010 */ unsigned long MissesLast;
  /* 0x0014 */ unsigned long AllStacksInUse;
} CACHED_KSTACK_LIST, *PCACHED_KSTACK_LIST; /* size: 0x0018 */

typedef struct _MI_SYSTEM_NODE_INFORMATION
{
  /* 0x0000 */ struct _CACHED_KSTACK_LIST CachedKernelStacks[2];
  /* 0x0030 */ struct _GROUP_AFFINITY GroupAffinity;
  /* 0x003c */ unsigned short ProcessorCount;
  /* 0x003e */ char Padding_242[2];
  /* 0x0040 */ void* BootZeroPageTimesPerProcessor;
  /* 0x0044 */ long Padding_243;
  /* 0x0048 */ unsigned __int64 CyclesToZeroOneLargePage;
  /* 0x0050 */ unsigned __int64* ScaledCyclesToZeroOneLargePage;
  /* 0x0054 */ struct _MI_WRITE_CALIBRATION WriteCalibration;
  /* 0x006c */ long Padding_244[5];
  /* 0x0080 */ volatile long IoPfnLock;
  /* 0x0084 */ long __PADDING__[15];
} MI_SYSTEM_NODE_INFORMATION, *PMI_SYSTEM_NODE_INFORMATION; /* size: 0x00c0 */

typedef struct _HEADLESS_LOADER_BLOCK
{
  /* 0x0000 */ unsigned char UsedBiosSettings;
  /* 0x0001 */ unsigned char DataBits;
  /* 0x0002 */ unsigned char StopBits;
  /* 0x0003 */ unsigned char Parity;
  /* 0x0004 */ unsigned long BaudRate;
  /* 0x0008 */ unsigned long PortNumber;
  /* 0x000c */ unsigned char* PortAddress;
  /* 0x0010 */ unsigned short PciDeviceId;
  /* 0x0012 */ unsigned short PciVendorId;
  /* 0x0014 */ unsigned char PciBusNumber;
  /* 0x0015 */ char Padding_245;
  /* 0x0016 */ unsigned short PciBusSegment;
  /* 0x0018 */ unsigned char PciSlotNumber;
  /* 0x0019 */ unsigned char PciFunctionNumber;
  /* 0x001a */ char Padding_246[2];
  /* 0x001c */ unsigned long PciFlags;
  /* 0x0020 */ struct _GUID SystemGUID;
  /* 0x0030 */ unsigned char IsMMIODevice;
  /* 0x0031 */ unsigned char TerminalType;
  /* 0x0032 */ unsigned char InterfaceType;
  /* 0x0033 */ unsigned char RegisterBitWidth;
  /* 0x0034 */ unsigned char RegisterAccessSize;
  /* 0x0035 */ char __PADDING__[3];
} HEADLESS_LOADER_BLOCK, *PHEADLESS_LOADER_BLOCK; /* size: 0x0038 */

typedef struct _NETWORK_LOADER_BLOCK
{
  /* 0x0000 */ unsigned char* DHCPServerACK;
  /* 0x0004 */ unsigned long DHCPServerACKLength;
  /* 0x0008 */ unsigned char* BootServerReplyPacket;
  /* 0x000c */ unsigned long BootServerReplyPacketLength;
} NETWORK_LOADER_BLOCK, *PNETWORK_LOADER_BLOCK; /* size: 0x0010 */

struct _VERIFIER_SHARED_EXPORT_THUNK;

typedef struct _POP_TRIGGER_WAIT
{
  /* 0x0000 */ struct _KEVENT Event;
  /* 0x0010 */ long Status;
  /* 0x0014 */ struct _LIST_ENTRY Link;
  /* 0x001c */ struct _POP_ACTION_TRIGGER* Trigger;
} POP_TRIGGER_WAIT, *PPOP_TRIGGER_WAIT; /* size: 0x0020 */

typedef struct _HMAP_DIRECTORY
{
  /* 0x0000 */ struct _HMAP_TABLE* Directory[1024];
} HMAP_DIRECTORY, *PHMAP_DIRECTORY; /* size: 0x1000 */

typedef struct _VF_KE_CRITICAL_REGION_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0004 */ void* StackTrace[7];
} VF_KE_CRITICAL_REGION_TRACE, *PVF_KE_CRITICAL_REGION_TRACE; /* size: 0x0020 */

typedef struct _HAL_CLOCK_TIMER_CONFIGURATION
{
  union
  {
    /* 0x0000 */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned char AlwaysOnTimer : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned char HighLatency : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned char PerCpuTimer : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned char DynamicTickSupported : 1; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0001 */ char Padding_247[3];
  /* 0x0004 */ unsigned long KnownType;
  /* 0x0008 */ unsigned long Capabilities;
  /* 0x000c */ long Padding_248;
  /* 0x0010 */ unsigned __int64 MaxIncrement;
  /* 0x0018 */ unsigned long MinIncrement;
  /* 0x001c */ long __PADDING__[1];
} HAL_CLOCK_TIMER_CONFIGURATION, *PHAL_CLOCK_TIMER_CONFIGURATION; /* size: 0x0020 */

typedef struct _HMAP_ENTRY
{
  /* 0x0000 */ unsigned long BlockOffset;
  /* 0x0004 */ unsigned long PermanentBinAddress;
  /* 0x0008 */ unsigned long MemAlloc;
} HMAP_ENTRY, *PHMAP_ENTRY; /* size: 0x000c */

typedef struct _HMAP_TABLE
{
  /* 0x0000 */ struct _HMAP_ENTRY Table[512];
} HMAP_TABLE, *PHMAP_TABLE; /* size: 0x1800 */

typedef struct _CM_PATH_HASH
{
  /* 0x0000 */ unsigned long Hash;
} CM_PATH_HASH, *PCM_PATH_HASH; /* size: 0x0004 */

typedef struct _CM_KEY_HASH
{
  /* 0x0000 */ struct _CM_PATH_HASH ConvKey;
  /* 0x0004 */ struct _CM_KEY_HASH* NextHash;
  /* 0x0008 */ struct _HHIVE* KeyHive;
  /* 0x000c */ unsigned long KeyCell;
} CM_KEY_HASH, *PCM_KEY_HASH; /* size: 0x0010 */

typedef struct _CM_KEY_CONTROL_BLOCK
{
  /* 0x0000 */ unsigned long RefCount;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long ExtFlags : 16; /* bit position: 0 */
    /* 0x0004 */ unsigned long Freed : 1; /* bit position: 16 */
    /* 0x0004 */ unsigned long Discarded : 1; /* bit position: 17 */
    /* 0x0004 */ unsigned long HiveUnloaded : 1; /* bit position: 18 */
    /* 0x0004 */ unsigned long Decommissioned : 1; /* bit position: 19 */
    /* 0x0004 */ unsigned long SpareExtFlag : 1; /* bit position: 20 */
    /* 0x0004 */ unsigned long TotalLevels : 10; /* bit position: 21 */
  }; /* bitfield */
  union
  {
    /* 0x0008 */ struct _CM_KEY_HASH KeyHash;
    struct
    {
      /* 0x0008 */ struct _CM_PATH_HASH ConvKey;
      /* 0x000c */ struct _CM_KEY_HASH* NextHash;
      /* 0x0010 */ struct _HHIVE* KeyHive;
      /* 0x0014 */ unsigned long KeyCell;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0018 */ struct _EX_PUSH_LOCK KcbPushlock;
  union
  {
    /* 0x001c */ struct _KTHREAD* Owner;
    /* 0x001c */ long SharedCount;
  }; /* size: 0x0004 */
  struct /* bitfield */
  {
    /* 0x0020 */ unsigned char DelayedDeref : 1; /* bit position: 0 */
    /* 0x0020 */ unsigned char DelayedClose : 1; /* bit position: 1 */
    /* 0x0020 */ unsigned char Parking : 1; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0021 */ unsigned char LayerSemantics;
  /* 0x0022 */ short LayerHeight;
  /* 0x0024 */ struct _CM_KEY_CONTROL_BLOCK* ParentKcb;
  /* 0x0028 */ struct _CM_NAME_CONTROL_BLOCK* NameBlock;
  /* 0x002c */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
  /* 0x0030 */ struct _CHILD_LIST ValueList;
  /* 0x0038 */ struct _CM_KEY_CONTROL_BLOCK* LinkTarget;
  union
  {
    /* 0x003c */ struct _CM_INDEX_HINT_BLOCK* IndexHint;
    /* 0x003c */ unsigned long HashKey;
    /* 0x003c */ unsigned long SubKeyCount;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0040 */ struct _LIST_ENTRY KeyBodyListHead;
    /* 0x0040 */ struct _LIST_ENTRY ClonedListEntry;
  }; /* size: 0x0008 */
  /* 0x0048 */ struct _CM_KEY_BODY* KeyBodyArray[4];
  /* 0x0058 */ union _LARGE_INTEGER KcbLastWriteTime;
  /* 0x0060 */ unsigned short KcbMaxNameLen;
  /* 0x0062 */ unsigned short KcbMaxValueNameLen;
  /* 0x0064 */ unsigned long KcbMaxValueDataLen;
  struct /* bitfield */
  {
    /* 0x0068 */ unsigned long KcbUserFlags : 4; /* bit position: 0 */
    /* 0x0068 */ unsigned long KcbVirtControlFlags : 4; /* bit position: 4 */
    /* 0x0068 */ unsigned long KcbDebug : 8; /* bit position: 8 */
    /* 0x0068 */ unsigned long Flags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x006c */ struct _CM_KCB_LAYER_INFO* LayerInfo;
  /* 0x0070 */ struct _LIST_ENTRY KCBUoWListHead;
  union
  {
    /* 0x0078 */ struct _LIST_ENTRY DelayQueueEntry;
    /* 0x0078 */ volatile unsigned char* Stolen;
  }; /* size: 0x0008 */
  /* 0x0080 */ struct _CM_TRANS* TransKCBOwner;
  /* 0x0084 */ struct _CM_INTENT_LOCK KCBLock;
  /* 0x008c */ struct _CM_INTENT_LOCK KeyLock;
  /* 0x0094 */ struct _CHILD_LIST TransValueCache;
  /* 0x009c */ struct _CM_TRANS* TransValueListOwner;
  union
  {
    /* 0x00a0 */ struct _UNICODE_STRING* FullKCBName;
    struct /* bitfield */
    {
      /* 0x00a0 */ unsigned long FullKCBNameStale : 1; /* bit position: 0 */
      /* 0x00a0 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x00a4 */ long Padding_249;
  /* 0x00a8 */ unsigned __int64 SequenceNumber;
} CM_KEY_CONTROL_BLOCK, *PCM_KEY_CONTROL_BLOCK; /* size: 0x00b0 */

typedef struct _CM_COMPONENT_HASH
{
  /* 0x0000 */ unsigned long Hash;
} CM_COMPONENT_HASH, *PCM_COMPONENT_HASH; /* size: 0x0004 */

typedef struct _CM_NAME_HASH
{
  /* 0x0000 */ struct _CM_COMPONENT_HASH ConvKey;
  /* 0x0004 */ struct _CM_NAME_HASH* NextHash;
  /* 0x0008 */ unsigned short NameLength;
  /* 0x000a */ wchar_t Name[1];
} CM_NAME_HASH, *PCM_NAME_HASH; /* size: 0x000c */

typedef struct _CM_NAME_CONTROL_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Compressed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long RefCount : 31; /* bit position: 1 */
  }; /* bitfield */
  union
  {
    /* 0x0004 */ struct _CM_NAME_HASH NameHash;
    struct
    {
      /* 0x0004 */ struct _CM_COMPONENT_HASH ConvKey;
      /* 0x0008 */ struct _CM_KEY_HASH* NextHash;
      /* 0x000c */ unsigned short NameLength;
      /* 0x000e */ wchar_t Name[1];
    }; /* size: 0x000c */
  }; /* size: 0x000c */
} CM_NAME_CONTROL_BLOCK, *PCM_NAME_CONTROL_BLOCK; /* size: 0x0010 */

typedef union _HAL_UNMASKED_INTERRUPT_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short SecondaryInterrupt : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short Reserved : 15; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short AsUSHORT;
  }; /* size: 0x0002 */
} HAL_UNMASKED_INTERRUPT_FLAGS, *PHAL_UNMASKED_INTERRUPT_FLAGS; /* size: 0x0002 */

typedef struct _HAL_UNMASKED_INTERRUPT_INFORMATION
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ union _HAL_UNMASKED_INTERRUPT_FLAGS Flags;
  /* 0x0006 */ char Padding_250[2];
  /* 0x0008 */ enum _KINTERRUPT_MODE Mode;
  /* 0x000c */ enum _KINTERRUPT_POLARITY Polarity;
  /* 0x0010 */ unsigned long Gsiv;
  /* 0x0014 */ unsigned short PinNumber;
  /* 0x0016 */ char Padding_251[2];
  /* 0x0018 */ void* DeviceHandle;
} HAL_UNMASKED_INTERRUPT_INFORMATION, *PHAL_UNMASKED_INTERRUPT_INFORMATION; /* size: 0x001c */

typedef struct _CM_KEY_SECURITY_CACHE
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ unsigned long ConvKey;
  /* 0x0008 */ struct _LIST_ENTRY List;
  /* 0x0010 */ unsigned long DescriptorLength;
  /* 0x0014 */ unsigned long RealRefCount;
  /* 0x0018 */ struct _SECURITY_DESCRIPTOR_RELATIVE Descriptor;
} CM_KEY_SECURITY_CACHE, *PCM_KEY_SECURITY_CACHE; /* size: 0x002c */

typedef struct _CM_INDEX_HINT_BLOCK
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long HashKey[1];
} CM_INDEX_HINT_BLOCK, *PCM_INDEX_HINT_BLOCK; /* size: 0x0008 */

typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ErrorStatus : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 PhysicalAddress : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 PhysicalAddressMask : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 Node : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Card : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Module : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 Bank : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 Device : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 Row : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Column : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 BitPosition : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 RequesterId : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 ResponderId : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 TargetId : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned __int64 ErrorType : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned __int64 RankNumber : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned __int64 CardHandle : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 ModuleHandle : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 ExtendedRow : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned __int64 BankGroup : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned __int64 BankAddress : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 ChipIdentification : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned __int64 Reserved : 42; /* bit position: 22 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 ValidBits;
  }; /* size: 0x0008 */
} WHEA_MEMORY_ERROR_SECTION_VALIDBITS, *PWHEA_MEMORY_ERROR_SECTION_VALIDBITS; /* size: 0x0008 */

typedef union _WHEA_ERROR_STATUS
{
  union
  {
    /* 0x0000 */ unsigned __int64 ErrorStatus;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Reserved1 : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ErrorType : 8; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Address : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Control : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned __int64 Data : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned __int64 Responder : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned __int64 Requester : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned __int64 FirstError : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned __int64 Overflow : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned __int64 Reserved2 : 41; /* bit position: 23 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} WHEA_ERROR_STATUS, *PWHEA_ERROR_STATUS; /* size: 0x0008 */

typedef struct _WHEA_MEMORY_ERROR_SECTION
{
  /* 0x0000 */ union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
  /* 0x0008 */ union _WHEA_ERROR_STATUS ErrorStatus;
  /* 0x0010 */ unsigned __int64 PhysicalAddress;
  /* 0x0018 */ unsigned __int64 PhysicalAddressMask;
  /* 0x0020 */ unsigned short Node;
  /* 0x0022 */ unsigned short Card;
  /* 0x0024 */ unsigned short Module;
  /* 0x0026 */ unsigned short Bank;
  /* 0x0028 */ unsigned short Device;
  /* 0x002a */ unsigned short Row;
  /* 0x002c */ unsigned short Column;
  /* 0x002e */ unsigned short BitPosition;
  /* 0x0030 */ unsigned __int64 RequesterId;
  /* 0x0038 */ unsigned __int64 ResponderId;
  /* 0x0040 */ unsigned __int64 TargetId;
  /* 0x0048 */ unsigned char ErrorType;
  /* 0x0049 */ unsigned char Extended;
  /* 0x004a */ unsigned short RankNumber;
  /* 0x004c */ unsigned short CardHandle;
  /* 0x004e */ unsigned short ModuleHandle;
} WHEA_MEMORY_ERROR_SECTION, *PWHEA_MEMORY_ERROR_SECTION; /* size: 0x0050 */

typedef struct _CM_KEY_BODY
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0008 */ struct _CM_NOTIFY_BLOCK* NotifyBlock;
  /* 0x000c */ void* ProcessID;
  /* 0x0010 */ struct _LIST_ENTRY KeyBodyList;
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned long Flags : 16; /* bit position: 0 */
    /* 0x0018 */ unsigned long HandleTags : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x001c */ union _CM_TRANS_PTR Trans;
  /* 0x0020 */ struct _GUID* KtmUow;
  /* 0x0024 */ struct _LIST_ENTRY ContextListHead;
  /* 0x002c */ void* EnumerationResumeContext;
  /* 0x0030 */ unsigned long RestrictedAccessMask;
} CM_KEY_BODY, *PCM_KEY_BODY; /* size: 0x0034 */

typedef struct _CM_NOTIFY_BLOCK
{
  /* 0x0000 */ struct _LIST_ENTRY HiveList;
  /* 0x0008 */ struct _LIST_ENTRY PostList;
  /* 0x0010 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x0014 */ struct _CM_KEY_BODY* KeyBody;
  struct /* bitfield */
  {
    /* 0x0018 */ unsigned long Filter : 30; /* bit position: 0 */
    /* 0x0018 */ unsigned long WatchTree : 1; /* bit position: 30 */
    /* 0x0018 */ unsigned long NotifyPending : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x001c */ struct _SECURITY_SUBJECT_CONTEXT SubjectContext;
} CM_NOTIFY_BLOCK, *PCM_NOTIFY_BLOCK; /* size: 0x002c */

typedef struct _CM_KCB_LAYER_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY LayerListEntry;
  /* 0x0008 */ struct _CM_KEY_CONTROL_BLOCK* Kcb;
  /* 0x000c */ struct _CM_KCB_LAYER_INFO* LowerLayer;
  /* 0x0010 */ struct _LIST_ENTRY UpperLayerListHead;
} CM_KCB_LAYER_INFO, *PCM_KCB_LAYER_INFO; /* size: 0x0018 */

typedef struct _IOP_IRP_EXTENSION_STATUS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long ActivityId;
  /* 0x0008 */ unsigned long IoTracking;
} IOP_IRP_EXTENSION_STATUS, *PIOP_IRP_EXTENSION_STATUS; /* size: 0x000c */

typedef struct _CM_TRANS
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0008 */ struct _LIST_ENTRY KCBUoWListHead;
  /* 0x0010 */ struct _LIST_ENTRY LazyCommitListEntry;
  union
  {
    struct /* bitfield */
    {
      /* 0x0018 */ unsigned long Prepared : 1; /* bit position: 0 */
      /* 0x0018 */ unsigned long Aborted : 1; /* bit position: 1 */
      /* 0x0018 */ unsigned long Committed : 1; /* bit position: 2 */
      /* 0x0018 */ unsigned long Initializing : 1; /* bit position: 3 */
      /* 0x0018 */ unsigned long Invalid : 1; /* bit position: 4 */
      /* 0x0018 */ unsigned long UseReservation : 1; /* bit position: 5 */
      /* 0x0018 */ unsigned long TmCallbacksActive : 1; /* bit position: 6 */
      /* 0x0018 */ unsigned long LightWeight : 1; /* bit position: 7 */
      /* 0x0018 */ unsigned long Freed1 : 1; /* bit position: 8 */
      /* 0x0018 */ unsigned long Freed2 : 1; /* bit position: 9 */
      /* 0x0018 */ unsigned long Spare1 : 2; /* bit position: 10 */
      /* 0x0018 */ unsigned long Freed : 1; /* bit position: 12 */
      /* 0x0018 */ unsigned long Spare : 19; /* bit position: 13 */
    }; /* bitfield */
    /* 0x0018 */ unsigned long TransState;
  }; /* size: 0x0004 */
  /* 0x001c */ union _CM_TRANS_PTR Trans;
  /* 0x0020 */ struct _CM_RM* CmRm;
  /* 0x0024 */ struct _KENLISTMENT* KtmEnlistmentObject;
  /* 0x0028 */ void* KtmEnlistmentHandle;
  /* 0x002c */ struct _GUID KtmUow;
  /* 0x003c */ long Padding_252;
  /* 0x0040 */ unsigned __int64 StartLsn;
  /* 0x0048 */ unsigned long HiveCount;
  /* 0x004c */ struct _CMHIVE* HiveArray[8];
  /* 0x006c */ long __PADDING__[1];
} CM_TRANS, *PCM_TRANS; /* size: 0x0070 */

typedef struct _CM_RM
{
  /* 0x0000 */ struct _LIST_ENTRY RmListEntry;
  /* 0x0008 */ struct _LIST_ENTRY TransactionListHead;
  /* 0x0010 */ void* TmHandle;
  /* 0x0014 */ void* Tm;
  /* 0x0018 */ void* RmHandle;
  /* 0x001c */ void* KtmRm;
  /* 0x0020 */ unsigned long RefCount;
  /* 0x0024 */ unsigned long ContainerNum;
  /* 0x0028 */ unsigned __int64 ContainerSize;
  /* 0x0030 */ struct _CMHIVE* CmHive;
  /* 0x0034 */ void* LogFileObject;
  /* 0x0038 */ void* MarshallingContext;
  /* 0x003c */ unsigned long RmFlags;
  /* 0x0040 */ long LogStartStatus1;
  /* 0x0044 */ long LogStartStatus2;
  /* 0x0048 */ unsigned __int64 BaseLsn;
  /* 0x0050 */ struct _ERESOURCE* RmLock;
  /* 0x0054 */ long __PADDING__[1];
} CM_RM, *PCM_RM; /* size: 0x0058 */

typedef struct _CM_WORKITEM
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long Private;
  /* 0x000c */ void* WorkerRoutine /* function */;
  /* 0x0010 */ void* Parameter;
} CM_WORKITEM, *PCM_WORKITEM; /* size: 0x0014 */

typedef struct _CM_DIRTY_VECTOR_LOG
{
  /* 0x0000 */ volatile unsigned long Next;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _CM_DIRTY_VECTOR_LOG_ENTRY Log[16];
} CM_DIRTY_VECTOR_LOG, *PCM_DIRTY_VECTOR_LOG; /* size: 0x0288 */

typedef struct _HIVE_WRITE_WAIT_QUEUE
{
  /* 0x0000 */ struct _ETHREAD* ActiveThread;
  /* 0x0004 */ struct _HIVE_WAIT_PACKET* WaitList;
} HIVE_WRITE_WAIT_QUEUE, *PHIVE_WRITE_WAIT_QUEUE; /* size: 0x0008 */

typedef struct _CMHIVE
{
  /* 0x0000 */ struct _HHIVE Hive;
  /* 0x0400 */ void* FileHandles[6];
  /* 0x0418 */ struct _LIST_ENTRY NotifyList;
  /* 0x0420 */ struct _LIST_ENTRY HiveList;
  /* 0x0428 */ struct _LIST_ENTRY PreloadedHiveList;
  /* 0x0430 */ struct _EX_RUNDOWN_REF HiveRundown;
  /* 0x0434 */ struct _CM_KEY_HASH_TABLE_ENTRY* KcbCacheTable;
  /* 0x0438 */ unsigned long KcbCacheTableSize;
  /* 0x043c */ struct _CM_KEY_HASH_TABLE_ENTRY* DeletedKcbTable;
  /* 0x0440 */ unsigned long DeletedKcbTableSize;
  /* 0x0444 */ unsigned long Identity;
  /* 0x0448 */ struct _CMSI_RW_LOCK HiveLock;
  /* 0x044c */ struct _RTL_BITMAP FlushDirtyVector;
  /* 0x0454 */ unsigned long FlushDirtyVectorSize;
  /* 0x0458 */ struct CMP_OFFSET_ARRAY* FlushLogEntryOffsetArray;
  /* 0x045c */ unsigned long FlushLogEntryOffsetArrayCount;
  /* 0x0460 */ unsigned long FlushLogEntrySize;
  /* 0x0464 */ unsigned long FlushHiveTruncated;
  /* 0x0468 */ unsigned char FlushBaseBlockDirty;
  /* 0x0469 */ char Padding_253[3];
  /* 0x046c */ struct _RTL_BITMAP CapturedUnreconciledVector;
  /* 0x0474 */ unsigned long CapturedUnreconciledVectorSize;
  /* 0x0478 */ struct CMP_OFFSET_ARRAY* UnreconciledOffsetArray;
  /* 0x047c */ unsigned long UnreconciledOffsetArrayCount;
  /* 0x0480 */ struct _HBASE_BLOCK* UnreconciledBaseBlock;
  /* 0x0484 */ struct _EX_PUSH_LOCK SecurityLock;
  /* 0x0488 */ unsigned long LastShrinkHiveSize;
  /* 0x048c */ long Padding_254;
  /* 0x0490 */ union _LARGE_INTEGER ActualFileSize;
  /* 0x0498 */ union _LARGE_INTEGER LogFileSizes[2];
  /* 0x04a8 */ struct _UNICODE_STRING FileFullPath;
  /* 0x04b0 */ struct _UNICODE_STRING FileUserName;
  /* 0x04b8 */ struct _UNICODE_STRING HiveRootPath;
  /* 0x04c0 */ unsigned long SecurityCount;
  /* 0x04c4 */ unsigned long SecurityCacheSize;
  /* 0x04c8 */ long SecurityHitHint;
  /* 0x04cc */ struct _CM_KEY_SECURITY_CACHE_ENTRY* SecurityCache;
  /* 0x04d0 */ struct _LIST_ENTRY SecurityHash[64];
  /* 0x06d0 */ unsigned long UnloadEventCount;
  /* 0x06d4 */ struct _KEVENT** UnloadEventArray;
  /* 0x06d8 */ struct _CM_KEY_CONTROL_BLOCK* RootKcb;
  /* 0x06dc */ unsigned char Frozen;
  /* 0x06dd */ char Padding_255[3];
  /* 0x06e0 */ struct _CM_WORKITEM* UnloadWorkItem;
  /* 0x06e4 */ struct _CM_WORKITEM UnloadWorkItemHolder;
  /* 0x06f8 */ struct _CM_DIRTY_VECTOR_LOG DirtyVectorLog;
  /* 0x0980 */ unsigned long Flags;
  /* 0x0984 */ struct _LIST_ENTRY TrustClassEntry;
  /* 0x098c */ long Padding_256;
  /* 0x0990 */ unsigned __int64 DirtyTime;
  /* 0x0998 */ unsigned __int64 UnreconciledTime;
  /* 0x09a0 */ struct _CM_RM* CmRm;
  /* 0x09a4 */ unsigned long CmRmInitFailPoint;
  /* 0x09a8 */ long CmRmInitFailStatus;
  /* 0x09ac */ struct _KTHREAD* CreatorOwner;
  /* 0x09b0 */ struct _KTHREAD* RundownThread;
  /* 0x09b4 */ long Padding_257;
  /* 0x09b8 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x09c0 */ struct _HIVE_WRITE_WAIT_QUEUE FlushQueue;
  /* 0x09c8 */ struct _HIVE_WRITE_WAIT_QUEUE ReconcileQueue;
  union
  {
    /* 0x09d0 */ unsigned long FlushFlags;
    struct /* bitfield */
    {
      /* 0x09d0 */ unsigned long PrimaryFilePurged : 1; /* bit position: 0 */
      /* 0x09d0 */ unsigned long DiskFileBad : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x09d4 */ unsigned long PrimaryFileSizeBeforeLastFlush;
  /* 0x09d8 */ volatile long ReferenceCount;
  /* 0x09dc */ long UnloadHistoryIndex;
  /* 0x09e0 */ unsigned long UnloadHistory[128];
  /* 0x0be0 */ unsigned long BootStart;
  /* 0x0be4 */ unsigned long UnaccessedStart;
  /* 0x0be8 */ unsigned long UnaccessedEnd;
  /* 0x0bec */ unsigned long LoadedKeyCount;
  /* 0x0bf0 */ volatile unsigned long HandleClosePending;
  /* 0x0bf4 */ struct _EX_PUSH_LOCK HandleClosePendingEvent;
  /* 0x0bf8 */ unsigned char FinalFlushSucceeded;
  /* 0x0bf9 */ char Padding_258[3];
  /* 0x0bfc */ struct _CMP_VOLUME_CONTEXT* VolumeContext;
} CMHIVE, *PCMHIVE; /* size: 0x0c00 */

typedef struct _OBP_LOOKUP_CONTEXT
{
  /* 0x0000 */ struct _OBJECT_DIRECTORY* Directory;
  /* 0x0004 */ void* Object;
  /* 0x0008 */ struct _OBJECT_DIRECTORY_ENTRY** EntryLink;
  /* 0x000c */ unsigned long HashValue;
  /* 0x0010 */ unsigned short HashIndex;
  /* 0x0012 */ unsigned char DirectoryLocked;
  /* 0x0013 */ unsigned char LockedExclusive;
  /* 0x0014 */ unsigned long LockStateSignature;
} OBP_LOOKUP_CONTEXT, *POBP_LOOKUP_CONTEXT; /* size: 0x0018 */

typedef struct _EXT_IOMMU_DEVICE_ID_ACPI
{
  /* 0x0000 */ const char* ObjectName;
} EXT_IOMMU_DEVICE_ID_ACPI, *PEXT_IOMMU_DEVICE_ID_ACPI; /* size: 0x0004 */

typedef struct _CM_KEY_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _KTHREAD* Owner;
  /* 0x0008 */ struct _CM_KEY_HASH* Entry;
} CM_KEY_HASH_TABLE_ENTRY, *PCM_KEY_HASH_TABLE_ENTRY; /* size: 0x000c */

typedef struct _WHEAP_ERROR_SOURCE_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Count;
  /* 0x0008 */ unsigned long NextId;
  /* 0x000c */ struct _LIST_ENTRY Items;
  /* 0x0014 */ struct _KEVENT InsertLock;
} WHEAP_ERROR_SOURCE_TABLE, *PWHEAP_ERROR_SOURCE_TABLE; /* size: 0x0024 */

typedef struct _CM_KEY_SECURITY_CACHE_ENTRY
{
  /* 0x0000 */ unsigned long Cell;
  /* 0x0004 */ struct _CM_KEY_SECURITY_CACHE* CachedSecurity;
} CM_KEY_SECURITY_CACHE_ENTRY, *PCM_KEY_SECURITY_CACHE_ENTRY; /* size: 0x0008 */

typedef struct _EXT_IOMMU_DEVICE_ID_PCI
{
  union
  {
    /* 0x0000 */ unsigned __int64 AsUINT64;
    struct
    {
      /* 0x0000 */ unsigned short PciSegmentNumber;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short PhantomFunctionBits : 2; /* bit position: 0 */
        /* 0x0002 */ unsigned short BusRange : 1; /* bit position: 2 */
        /* 0x0002 */ unsigned short Reserved : 5; /* bit position: 3 */
        /* 0x0002 */ unsigned short StartBusNumber : 8; /* bit position: 8 */
      }; /* bitfield */
      union
      {
        /* 0x0004 */ unsigned short Bdf;
        struct
        {
          /* 0x0004 */ unsigned char SubordinateBus;
          /* 0x0005 */ unsigned char SecondaryBus;
        }; /* size: 0x0002 */
      }; /* size: 0x0002 */
      /* 0x0006 */ unsigned short DevicePathLength;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0008 */ wchar_t* DevicePath;
  /* 0x000c */ long __PADDING__[1];
} EXT_IOMMU_DEVICE_ID_PCI, *PEXT_IOMMU_DEVICE_ID_PCI; /* size: 0x0010 */

typedef struct _EXT_IOMMU_DEVICE_ID
{
  /* 0x0000 */ enum _EXT_IOMMU_DEVICE_TYPE DeviceType;
  /* 0x0004 */ long Padding_259;
  union
  {
    /* 0x0008 */ struct _EXT_IOMMU_DEVICE_ID_PCI Pci;
    /* 0x0008 */ struct _EXT_IOMMU_DEVICE_ID_ACPI Acpi;
    /* 0x0008 */ unsigned char IoApicId;
    /* 0x0008 */ unsigned __int64 LogicalId;
    /* 0x0008 */ struct _EXT_IOMMU_DEVICE_ID_TEST Test;
    struct
    {
      /* 0x0008 */ struct _EXT_IOMMU_DEVICE_ID_GIC Gic;
      /* 0x000c */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} EXT_IOMMU_DEVICE_ID, *PEXT_IOMMU_DEVICE_ID; /* size: 0x0018 */

typedef struct _HAL_HV_DMA_DOMAIN_INFO
{
  /* 0x0000 */ unsigned long DomainId;
  /* 0x0004 */ unsigned char IsStage1;
  /* 0x0005 */ char __PADDING__[3];
} HAL_HV_DMA_DOMAIN_INFO, *PHAL_HV_DMA_DOMAIN_INFO; /* size: 0x0008 */

typedef struct _VF_SUSPECT_DRIVER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ unsigned long Loads;
  /* 0x000c */ unsigned long Unloads;
  /* 0x0010 */ struct _UNICODE_STRING BaseName;
} VF_SUSPECT_DRIVER_ENTRY, *PVF_SUSPECT_DRIVER_ENTRY; /* size: 0x0018 */

typedef struct _HIVE_WAIT_PACKET
{
  /* 0x0000 */ struct _KEVENT WakeEvent;
  /* 0x0010 */ long Status;
  /* 0x0014 */ struct _HIVE_WAIT_PACKET* Next;
} HIVE_WAIT_PACKET, *PHIVE_WAIT_PACKET; /* size: 0x0018 */

struct POWER_ACTION_POLICY
{
  /* 0x0000 */ enum POWER_ACTION Action;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EventCode;
}; /* size: 0x000c */

struct SYSTEM_POWER_LEVEL
{
  /* 0x0000 */ unsigned char Enable;
  /* 0x0001 */ unsigned char Spare[3];
  /* 0x0004 */ unsigned long BatteryLevel;
  /* 0x0008 */ struct POWER_ACTION_POLICY PowerPolicy;
  /* 0x0014 */ enum _SYSTEM_POWER_STATE MinSystemState;
}; /* size: 0x0018 */

typedef struct _CMP_VOLUME_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY VolumeContextListEntry;
  /* 0x0008 */ struct _CMP_VOLUME_MANAGER* VolumeManager;
  /* 0x000c */ long RefCount;
  /* 0x0010 */ struct _GUID VolumeGuid;
  /* 0x0020 */ void* VolumeFileObject;
  /* 0x0024 */ struct _CMSI_RW_LOCK VolumeContextLock;
  /* 0x0028 */ unsigned char DeviceUsageNotificationSent;
  /* 0x0029 */ char __PADDING__[3];
} CMP_VOLUME_CONTEXT, *PCMP_VOLUME_CONTEXT; /* size: 0x002c */

typedef struct _CMP_VOLUME_MANAGER
{
  /* 0x0000 */ struct _CMSI_RW_LOCK VolumeContextListLock;
  /* 0x0004 */ struct _LIST_ENTRY VolumeContextListHead;
} CMP_VOLUME_MANAGER, *PCMP_VOLUME_MANAGER; /* size: 0x000c */

struct _ADAPTER_OBJECT;

typedef struct _KTMOBJECT_NAMESPACE_LINK
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS Links;
  /* 0x0010 */ unsigned char Expired;
  /* 0x0011 */ char __PADDING__[3];
} KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK; /* size: 0x0014 */

typedef struct _KENLISTMENT_HISTORY
{
  /* 0x0000 */ unsigned long Notification;
  /* 0x0004 */ enum _KENLISTMENT_STATE NewState;
} KENLISTMENT_HISTORY, *PKENLISTMENT_HISTORY; /* size: 0x0008 */

typedef struct _KENLISTMENT
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0018 */ struct _GUID EnlistmentId;
  /* 0x0028 */ struct _KMUTANT Mutex;
  /* 0x0048 */ struct _LIST_ENTRY NextSameTx;
  /* 0x0050 */ struct _LIST_ENTRY NextSameRm;
  /* 0x0058 */ struct _KRESOURCEMANAGER* ResourceManager;
  /* 0x005c */ struct _KTRANSACTION* Transaction;
  /* 0x0060 */ enum _KENLISTMENT_STATE State;
  /* 0x0064 */ unsigned long Flags;
  /* 0x0068 */ unsigned long NotificationMask;
  /* 0x006c */ void* Key;
  /* 0x0070 */ unsigned long KeyRefCount;
  /* 0x0074 */ void* RecoveryInformation;
  /* 0x0078 */ unsigned long RecoveryInformationLength;
  /* 0x007c */ void* DynamicNameInformation;
  /* 0x0080 */ unsigned long DynamicNameInformationLength;
  /* 0x0084 */ struct _KTMNOTIFICATION_PACKET* FinalNotification;
  /* 0x0088 */ struct _KENLISTMENT* SupSubEnlistment;
  /* 0x008c */ void* SupSubEnlHandle;
  /* 0x0090 */ void* SubordinateTxHandle;
  /* 0x0094 */ struct _GUID CrmEnlistmentEnId;
  /* 0x00a4 */ struct _GUID CrmEnlistmentTmId;
  /* 0x00b4 */ struct _GUID CrmEnlistmentRmId;
  /* 0x00c4 */ unsigned long NextHistory;
  /* 0x00c8 */ struct _KENLISTMENT_HISTORY History[20];
} KENLISTMENT, *PKENLISTMENT; /* size: 0x0168 */

typedef struct _KTMOBJECT_NAMESPACE
{
  /* 0x0000 */ struct _RTL_AVL_TABLE Table;
  /* 0x0038 */ struct _KMUTANT Mutex;
  /* 0x0058 */ unsigned short LinksOffset;
  /* 0x005a */ unsigned short GuidOffset;
  /* 0x005c */ unsigned char Expired;
  /* 0x005d */ char __PADDING__[3];
} KTMOBJECT_NAMESPACE, *PKTMOBJECT_NAMESPACE; /* size: 0x0060 */

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
  /* 0x0000 */ struct _LIST_ENTRY NotificationListHead;
  /* 0x0008 */ void* Port;
  /* 0x000c */ unsigned long Key;
  /* 0x0010 */ struct _EPROCESS* BindingProcess;
} KRESOURCEMANAGER_COMPLETION_BINDING, *PKRESOURCEMANAGER_COMPLETION_BINDING; /* size: 0x0014 */

typedef struct _KRESOURCEMANAGER
{
  /* 0x0000 */ struct _KEVENT NotificationAvailable;
  /* 0x0010 */ unsigned long cookie;
  /* 0x0014 */ enum _KRESOURCEMANAGER_STATE State;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _KMUTANT Mutex;
  /* 0x003c */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x0050 */ struct _GUID RmId;
  /* 0x0060 */ struct _KQUEUE NotificationQueue;
  /* 0x0088 */ struct _KMUTANT NotificationMutex;
  /* 0x00a8 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x00b0 */ unsigned long EnlistmentCount;
  /* 0x00b4 */ void* NotificationRoutine /* function */;
  /* 0x00b8 */ void* Key;
  /* 0x00bc */ struct _LIST_ENTRY ProtocolListHead;
  /* 0x00c4 */ struct _LIST_ENTRY PendingPropReqListHead;
  /* 0x00cc */ struct _LIST_ENTRY CRMListEntry;
  /* 0x00d4 */ struct _KTM* Tm;
  /* 0x00d8 */ struct _UNICODE_STRING Description;
  /* 0x00e0 */ struct _KTMOBJECT_NAMESPACE Enlistments;
  /* 0x0140 */ struct _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
} KRESOURCEMANAGER, *PKRESOURCEMANAGER; /* size: 0x0154 */

typedef struct _POP_IRP_WORKER_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _ETHREAD* Thread;
  /* 0x000c */ struct _IRP* Irp;
  /* 0x0010 */ struct _DEVICE_OBJECT* Device;
  /* 0x0014 */ unsigned char Static;
  /* 0x0015 */ char __PADDING__[3];
} POP_IRP_WORKER_ENTRY, *PPOP_IRP_WORKER_ENTRY; /* size: 0x0018 */

typedef struct _MAP_REGISTER_ENTRY
{
  /* 0x0000 */ void* MapRegister;
  /* 0x0004 */ unsigned char WriteToDevice;
  /* 0x0005 */ char __PADDING__[3];
} MAP_REGISTER_ENTRY, *PMAP_REGISTER_ENTRY; /* size: 0x0008 */

typedef struct _MM_DRIVER_VERIFIER_DATA
{
  /* 0x0000 */ unsigned long Level;
  /* 0x0004 */ volatile unsigned long RaiseIrqls;
  /* 0x0008 */ volatile unsigned long AcquireSpinLocks;
  /* 0x000c */ volatile unsigned long SynchronizeExecutions;
  /* 0x0010 */ volatile unsigned long AllocationsAttempted;
  /* 0x0014 */ volatile unsigned long AllocationsSucceeded;
  /* 0x0018 */ volatile unsigned long AllocationsSucceededSpecialPool;
  /* 0x001c */ unsigned long AllocationsWithNoTag;
  /* 0x0020 */ unsigned long TrimRequests;
  /* 0x0024 */ unsigned long Trims;
  /* 0x0028 */ unsigned long AllocationsFailed;
  /* 0x002c */ volatile unsigned long AllocationsFailedDeliberately;
  /* 0x0030 */ volatile unsigned long Loads;
  /* 0x0034 */ volatile unsigned long Unloads;
  /* 0x0038 */ unsigned long UnTrackedPool;
  /* 0x003c */ unsigned long UserTrims;
  /* 0x0040 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x0044 */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0048 */ unsigned long PeakPagedPoolAllocations;
  /* 0x004c */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0050 */ volatile unsigned long PagedBytes;
  /* 0x0054 */ volatile unsigned long NonPagedBytes;
  /* 0x0058 */ unsigned long PeakPagedBytes;
  /* 0x005c */ unsigned long PeakNonPagedBytes;
  /* 0x0060 */ volatile unsigned long BurstAllocationsFailedDeliberately;
  /* 0x0064 */ unsigned long SessionTrims;
  /* 0x0068 */ volatile unsigned long OptionChanges;
  /* 0x006c */ volatile unsigned long VerifyMode;
  /* 0x0070 */ struct _UNICODE_STRING PreviousBucketName;
  /* 0x0078 */ volatile unsigned long ExecutePoolTypes;
  /* 0x007c */ volatile unsigned long ExecutePageProtections;
  /* 0x0080 */ volatile unsigned long ExecutePageMappings;
  /* 0x0084 */ volatile unsigned long ExecuteWriteSections;
  /* 0x0088 */ volatile unsigned long SectionAlignmentFailures;
  /* 0x008c */ volatile unsigned long IATInExecutableSection;
} MM_DRIVER_VERIFIER_DATA, *PMM_DRIVER_VERIFIER_DATA; /* size: 0x0090 */

typedef union _CLS_LSN
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int idxRecord;
      /* 0x0004 */ unsigned long cidContainer;
    } /* size: 0x0008 */ offset;
    /* 0x0000 */ unsigned __int64 ullOffset;
  }; /* size: 0x0008 */
} CLS_LSN, *PCLS_LSN; /* size: 0x0008 */

typedef struct _KTM
{
  /* 0x0000 */ unsigned long cookie;
  /* 0x0004 */ struct _KMUTANT Mutex;
  /* 0x0024 */ enum KTM_STATE State;
  /* 0x0028 */ struct _KTMOBJECT_NAMESPACE_LINK NamespaceLink;
  /* 0x003c */ struct _GUID TmIdentity;
  /* 0x004c */ unsigned long Flags;
  /* 0x0050 */ unsigned long VolatileFlags;
  /* 0x0054 */ struct _UNICODE_STRING LogFileName;
  /* 0x005c */ struct _FILE_OBJECT* LogFileObject;
  /* 0x0060 */ void* MarshallingContext;
  /* 0x0064 */ void* LogManagementContext;
  /* 0x0068 */ struct _KTMOBJECT_NAMESPACE Transactions;
  /* 0x00c8 */ struct _KTMOBJECT_NAMESPACE ResourceManagers;
  /* 0x0128 */ struct _KMUTANT LsnOrderedMutex;
  /* 0x0148 */ struct _LIST_ENTRY LsnOrderedList;
  /* 0x0150 */ union _LARGE_INTEGER CommitVirtualClock;
  /* 0x0158 */ struct _FAST_MUTEX CommitVirtualClockMutex;
  /* 0x0178 */ union _CLS_LSN BaseLsn;
  /* 0x0180 */ union _CLS_LSN CurrentReadLsn;
  /* 0x0188 */ union _CLS_LSN LastRecoveredLsn;
  /* 0x0190 */ void* TmRmHandle;
  /* 0x0194 */ struct _KRESOURCEMANAGER* TmRm;
  /* 0x0198 */ struct _KEVENT LogFullNotifyEvent;
  /* 0x01a8 */ struct _WORK_QUEUE_ITEM CheckpointWorkItem;
  /* 0x01b8 */ union _CLS_LSN CheckpointTargetLsn;
  /* 0x01c0 */ struct _WORK_QUEUE_ITEM LogFullCompletedWorkItem;
  /* 0x01d0 */ struct _ERESOURCE LogWriteResource;
  /* 0x0208 */ unsigned long LogFlags;
  /* 0x020c */ long LogFullStatus;
  /* 0x0210 */ long RecoveryStatus;
  /* 0x0214 */ long Padding_260;
  /* 0x0218 */ union _CLS_LSN LastCheckBaseLsn;
  /* 0x0220 */ struct _LIST_ENTRY RestartOrderedList;
  /* 0x0228 */ struct _WORK_QUEUE_ITEM OfflineWorkItem;
} KTM, *PKTM; /* size: 0x0238 */

typedef struct _OBJECT_HEADER_QUOTA_INFO
{
  /* 0x0000 */ unsigned long PagedPoolCharge;
  /* 0x0004 */ unsigned long NonPagedPoolCharge;
  /* 0x0008 */ unsigned long SecurityDescriptorCharge;
  /* 0x000c */ void* SecurityDescriptorQuotaBlock;
} OBJECT_HEADER_QUOTA_INFO, *POBJECT_HEADER_QUOTA_INFO; /* size: 0x0010 */

typedef struct _OBJECT_HANDLE_COUNT_DATABASE
{
  /* 0x0000 */ unsigned long CountEntries;
  /* 0x0004 */ struct _OBJECT_HANDLE_COUNT_ENTRY HandleCountEntries[1];
} OBJECT_HANDLE_COUNT_DATABASE, *POBJECT_HANDLE_COUNT_DATABASE; /* size: 0x000c */

typedef struct _OBJECT_HEADER_CREATOR_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0008 */ void* CreatorUniqueProcess;
  /* 0x000c */ unsigned short CreatorBackTraceIndex;
  /* 0x000e */ unsigned short Reserved1;
} OBJECT_HEADER_CREATOR_INFO, *POBJECT_HEADER_CREATOR_INFO; /* size: 0x0010 */

typedef struct _HANDLE_REVOCATION_INFO
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _OB_HANDLE_REVOCATION_BLOCK* RevocationBlock;
  /* 0x000c */ unsigned char AllowHandleRevocation;
  /* 0x000d */ unsigned char Padding1[3];
} HANDLE_REVOCATION_INFO, *PHANDLE_REVOCATION_INFO; /* size: 0x0010 */

typedef struct _OB_EXTENDED_USER_INFO
{
  /* 0x0000 */ void* Context1;
  /* 0x0004 */ void* Context2;
} OB_EXTENDED_USER_INFO, *POB_EXTENDED_USER_INFO; /* size: 0x0008 */

typedef struct _OBJECT_FOOTER
{
  /* 0x0000 */ struct _HANDLE_REVOCATION_INFO HandleRevocationInfo;
  /* 0x0010 */ struct _OB_EXTENDED_USER_INFO ExtendedUserInfo;
} OBJECT_FOOTER, *POBJECT_FOOTER; /* size: 0x0018 */

typedef struct _KTRANSACTION_HISTORY
{
  /* 0x0000 */ enum _TAG_UNNAMED_1 RecordType;
  /* 0x0004 */ unsigned long Payload;
} KTRANSACTION_HISTORY, *PKTRANSACTION_HISTORY; /* size: 0x0008 */

typedef struct _KTRANSACTION
{
  /* 0x0000 */ struct _KEVENT OutcomeEvent;
  /* 0x0010 */ unsigned long cookie;
  /* 0x0014 */ struct _KMUTANT Mutex;
  /* 0x0034 */ struct _KTRANSACTION* TreeTx;
  /* 0x0038 */ struct _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
  /* 0x004c */ struct _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
  /* 0x0060 */ struct _GUID UOW;
  /* 0x0070 */ enum _KTRANSACTION_STATE State;
  /* 0x0074 */ unsigned long Flags;
  /* 0x0078 */ struct _LIST_ENTRY EnlistmentHead;
  /* 0x0080 */ unsigned long EnlistmentCount;
  /* 0x0084 */ unsigned long RecoverableEnlistmentCount;
  /* 0x0088 */ unsigned long PrePrepareRequiredEnlistmentCount;
  /* 0x008c */ unsigned long PrepareRequiredEnlistmentCount;
  /* 0x0090 */ unsigned long OutcomeRequiredEnlistmentCount;
  /* 0x0094 */ unsigned long PendingResponses;
  /* 0x0098 */ struct _KENLISTMENT* SuperiorEnlistment;
  /* 0x009c */ long Padding_261;
  /* 0x00a0 */ union _CLS_LSN LastLsn;
  /* 0x00a8 */ struct _LIST_ENTRY PromotedEntry;
  /* 0x00b0 */ struct _KTRANSACTION* PromoterTransaction;
  /* 0x00b4 */ void* PromotePropagation;
  /* 0x00b8 */ unsigned long IsolationLevel;
  /* 0x00bc */ unsigned long IsolationFlags;
  /* 0x00c0 */ union _LARGE_INTEGER Timeout;
  /* 0x00c8 */ struct _UNICODE_STRING Description;
  /* 0x00d0 */ struct _KTHREAD* RollbackThread;
  /* 0x00d4 */ struct _WORK_QUEUE_ITEM RollbackWorkItem;
  /* 0x00e4 */ struct _KDPC RollbackDpc;
  /* 0x0104 */ long Padding_262;
  /* 0x0108 */ struct _KTIMER RollbackTimer;
  /* 0x0130 */ struct _LIST_ENTRY LsnOrderedEntry;
  /* 0x0138 */ enum _KTRANSACTION_OUTCOME Outcome;
  /* 0x013c */ struct _KTM* Tm;
  /* 0x0140 */ __int64 CommitReservation;
  /* 0x0148 */ struct _KTRANSACTION_HISTORY TransactionHistory[10];
  /* 0x0198 */ unsigned long TransactionHistoryCount;
  /* 0x019c */ void* DTCPrivateInformation;
  /* 0x01a0 */ unsigned long DTCPrivateInformationLength;
  /* 0x01a4 */ struct _KMUTANT DTCPrivateInformationMutex;
  /* 0x01c4 */ void* PromotedTxSelfHandle;
  /* 0x01c8 */ unsigned long PendingPromotionCount;
  /* 0x01cc */ struct _KEVENT PromotionCompletedEvent;
  /* 0x01dc */ long __PADDING__[1];
} KTRANSACTION, *PKTRANSACTION; /* size: 0x01e0 */

struct _KTMNOTIFICATION_PACKET;

typedef struct _FAST_ERESOURCE
{
  /* 0x0000 */ void* Reserved1[3];
  /* 0x000c */ unsigned long Reserved2;
  /* 0x0010 */ void* Reserved3[4];
  /* 0x0020 */ unsigned long Reserved4[4];
  /* 0x0030 */ void* Reserved6[2];
} FAST_ERESOURCE, *PFAST_ERESOURCE; /* size: 0x0038 */

typedef struct _CM_KCB_UOW
{
  /* 0x0000 */ struct _LIST_ENTRY TransactionListEntry;
  /* 0x0008 */ struct _CM_INTENT_LOCK* KCBLock;
  /* 0x000c */ struct _CM_INTENT_LOCK* KeyLock;
  /* 0x0010 */ struct _LIST_ENTRY KCBListEntry;
  /* 0x0018 */ struct _CM_KEY_CONTROL_BLOCK* KeyControlBlock;
  /* 0x001c */ struct _CM_TRANS* Transaction;
  /* 0x0020 */ unsigned long UoWState;
  /* 0x0024 */ enum UoWActionType ActionType;
  /* 0x0028 */ enum HSTORAGE_TYPE StorageType;
  /* 0x002c */ struct _CM_KCB_UOW* ParentUoW;
  union
  {
    /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* ChildKCB;
    /* 0x0030 */ unsigned long VolatileKeyCell;
    struct
    {
      /* 0x0030 */ unsigned long OldValueCell;
      /* 0x0034 */ unsigned long NewValueCell;
    }; /* size: 0x0008 */
    /* 0x0030 */ unsigned long UserFlags;
    /* 0x0030 */ union _LARGE_INTEGER LastWriteTime;
    struct
    {
      /* 0x0030 */ struct _CM_KEY_SECURITY_CACHE* TxCachedSecurity;
      /* 0x0034 */ unsigned long TxSecurityCell;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* OldChildKCB;
      /* 0x0034 */ struct _CM_KEY_CONTROL_BLOCK* NewChildKCB;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0030 */ struct _CM_KEY_CONTROL_BLOCK* OtherChildKCB;
      /* 0x0034 */ unsigned long ThisVolatileKeyCell;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0038 */ void* PrepareDataPointer;
    /* 0x0038 */ struct _CM_UOW_SET_SD_DATA* SecurityData;
    /* 0x0038 */ struct _CM_UOW_KEY_STATE_MODIFICATION* ModifyKeysData;
    /* 0x0038 */ struct _CM_UOW_SET_VALUE_LIST_DATA* SetValueData;
  }; /* size: 0x0004 */
  union
  {
    /* 0x003c */ struct _CM_UOW_SET_VALUE_KEY_DATA* ValueData;
    /* 0x003c */ struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT* DiscardReplaceContext;
  }; /* size: 0x0004 */
} CM_KCB_UOW, *PCM_KCB_UOW; /* size: 0x0040 */

typedef struct _CM_UOW_KEY_STATE_MODIFICATION
{
  /* 0x0000 */ unsigned long RefCount;
  /* 0x0004 */ unsigned long SubKeyListCount[2];
  /* 0x000c */ unsigned long NewSubKeyList[2];
} CM_UOW_KEY_STATE_MODIFICATION, *PCM_UOW_KEY_STATE_MODIFICATION; /* size: 0x0014 */

typedef struct _CM_UOW_SET_VALUE_LIST_DATA
{
  /* 0x0000 */ unsigned long RefCount;
  /* 0x0004 */ struct _CHILD_LIST ValueList;
} CM_UOW_SET_VALUE_LIST_DATA, *PCM_UOW_SET_VALUE_LIST_DATA; /* size: 0x000c */

typedef struct _CM_UOW_SET_VALUE_KEY_DATA
{
  /* 0x0000 */ unsigned long PreparedCell;
  /* 0x0004 */ unsigned long OldValueCell;
  /* 0x0008 */ unsigned short NameLength;
  /* 0x000a */ char Padding_263[2];
  /* 0x000c */ unsigned long DataSize;
} CM_UOW_SET_VALUE_KEY_DATA, *PCM_UOW_SET_VALUE_KEY_DATA; /* size: 0x0010 */

typedef struct _KWAIT_CHAIN
{
  /* 0x0000 */ void* Head;
} KWAIT_CHAIN, *PKWAIT_CHAIN; /* size: 0x0004 */

typedef struct _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
{
  /* 0x0000 */ struct _CM_KEY_CONTROL_BLOCK* BaseKcb;
  /* 0x0004 */ long PrepareStatus;
  /* 0x0008 */ struct _LIST_ENTRY ClonedKcbListHead;
} CMP_DISCARD_AND_REPLACE_KCB_CONTEXT, *PCMP_DISCARD_AND_REPLACE_KCB_CONTEXT; /* size: 0x0010 */

struct tagSWITCH_CONTEXT_DATA
{
  /* 0x0000 */ unsigned __int64 ullOsMaxVersionTested;
  /* 0x0008 */ unsigned long ulTargetPlatform;
  /* 0x000c */ long Padding_264;
  /* 0x0010 */ unsigned __int64 ullContextMinimum;
  /* 0x0018 */ struct _GUID guPlatform;
  /* 0x0028 */ struct _GUID guMinPlatform;
  /* 0x0038 */ unsigned long ulContextSource;
  /* 0x003c */ unsigned long ulElementCount;
  /* 0x0040 */ struct _GUID guElements[48];
}; /* size: 0x0340 */

struct tagSWITCH_CONTEXT
{
  /* 0x0000 */ struct tagSWITCH_CONTEXT_ATTRIBUTE Attribute;
  /* 0x0018 */ struct tagSWITCH_CONTEXT_DATA Data;
}; /* size: 0x0358 */

struct _IOMMU_DMA_DOMAIN;

typedef struct _HBIN
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long FileOffset;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long Reserved1[2];
  /* 0x0014 */ union _LARGE_INTEGER TimeStamp;
  /* 0x001c */ unsigned long Spare;
} HBIN, *PHBIN; /* size: 0x0020 */

typedef struct _SUPPORTED_RANGE
{
  /* 0x0000 */ struct _SUPPORTED_RANGE* Next;
  /* 0x0004 */ unsigned long SystemAddressSpace;
  /* 0x0008 */ __int64 SystemBase;
  /* 0x0010 */ __int64 Base;
  /* 0x0018 */ __int64 Limit;
} SUPPORTED_RANGE, *PSUPPORTED_RANGE; /* size: 0x0020 */

typedef struct _HCELL
{
  /* 0x0000 */ long Size;
  union
  {
    struct
    {
      union
      {
        union
        {
          /* 0x0004 */ unsigned long UserData;
          /* 0x0004 */ unsigned long Next;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ u;
    } /* size: 0x0004 */ NewCell;
  } /* size: 0x0004 */ u;
} HCELL, *PHCELL; /* size: 0x0008 */

typedef struct _CM_PARSE_DEBUG_INFO
{
  /* 0x0000 */ struct _CM_KEY_CONTROL_BLOCK* SymlinkCachedKcb;
  /* 0x0004 */ struct _CM_KEY_CONTROL_BLOCK* StartingKcb;
  /* 0x0008 */ struct _CM_KEY_CONTROL_BLOCK* KcbCacheResult;
  /* 0x000c */ struct _CM_KEY_CONTROL_BLOCK* WalkResult;
  /* 0x0010 */ struct _CM_KEY_CONTROL_BLOCK* DeepestKcbFound;
  /* 0x0014 */ unsigned char KcbCacheLevels;
  /* 0x0015 */ unsigned char WalkLevels;
  /* 0x0016 */ unsigned char FailureCount;
  /* 0x0017 */ char Padding_265;
  /* 0x0018 */ struct
  {
    /* 0x0018 */ long Status;
    /* 0x001c */ unsigned long Point;
  } /* size: 0x0008 */ FailurePoints[4];
} CM_PARSE_DEBUG_INFO, *PCM_PARSE_DEBUG_INFO; /* size: 0x0038 */

typedef struct _HIVE_LOAD_FAILURE
{
  /* 0x0000 */ struct _HHIVE* Hive;
  /* 0x0004 */ unsigned short Index;
  /* 0x0006 */ unsigned short RecoverableIndex;
  /* 0x0008 */ struct
  {
    /* 0x0008 */ enum _CM_LOAD_FAILURE_TYPE Failure;
    /* 0x000c */ long Status;
    /* 0x0010 */ unsigned long Point;
  } /* size: 0x000c */ Locations[8];
  /* 0x0068 */ struct
  {
    /* 0x0068 */ enum _CM_LOAD_FAILURE_TYPE Failure;
    /* 0x006c */ long Status;
    /* 0x0070 */ unsigned long Point;
  } /* size: 0x000c */ RecoverableLocations[8];
  struct
  {
    /* 0x00c8 */ unsigned long Action;
    /* 0x00cc */ void* Handle;
    /* 0x00d0 */ long Status;
  } /* size: 0x000c */ RegistryIO;
  struct
  {
    /* 0x00d4 */ void* CheckStack;
  } /* size: 0x0004 */ CheckRegistry2;
  struct
  {
    /* 0x00d8 */ unsigned long Cell;
    /* 0x00dc */ struct _CELL_DATA* CellPoint;
    /* 0x00e0 */ void* RootPoint;
    /* 0x00e4 */ unsigned long Index;
  } /* size: 0x0010 */ CheckKey;
  struct
  {
    /* 0x00e8 */ struct _CELL_DATA* List;
    /* 0x00ec */ unsigned long Index;
    /* 0x00f0 */ unsigned long Cell;
    /* 0x00f4 */ struct _CELL_DATA* CellPoint;
  } /* size: 0x0010 */ CheckValueList;
  struct
  {
    /* 0x00f8 */ unsigned long Space;
    /* 0x00fc */ unsigned long MapPoint;
    /* 0x0100 */ struct _HBIN* BinPoint;
  } /* size: 0x000c */ CheckHive;
  struct
  {
    /* 0x0104 */ unsigned long Space;
    /* 0x0108 */ unsigned long MapPoint;
    /* 0x010c */ struct _HBIN* BinPoint;
  } /* size: 0x000c */ CheckHive1;
  struct
  {
    /* 0x0110 */ struct _HBIN* Bin;
    /* 0x0114 */ struct _HCELL* CellPoint;
  } /* size: 0x0008 */ CheckBin;
  struct
  {
    /* 0x0118 */ unsigned long FileOffset;
  } /* size: 0x0004 */ RecoverData;
  /* 0x011c */ struct _CM_PARSE_DEBUG_INFO LinkDebug;
} HIVE_LOAD_FAILURE, *PHIVE_LOAD_FAILURE; /* size: 0x0154 */

typedef struct _PCW_COUNTER_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Id;
  /* 0x0002 */ unsigned short StructIndex;
  /* 0x0004 */ unsigned short Offset;
  /* 0x0006 */ unsigned short Size;
} PCW_COUNTER_DESCRIPTOR, *PPCW_COUNTER_DESCRIPTOR; /* size: 0x0008 */

struct _PCW_BUFFER;

typedef struct _PO_DEVICE_NOTIFY_ORDER
{
  /* 0x0000 */ unsigned char Locked;
  /* 0x0001 */ char Padding_266[3];
  /* 0x0004 */ struct _DEVICE_OBJECT** WarmEjectPdoPointer;
  /* 0x0008 */ struct _PO_NOTIFY_ORDER_LEVEL OrderLevel[5];
  /* 0x00d0 */ unsigned long Flags;
} PO_DEVICE_NOTIFY_ORDER, *PPO_DEVICE_NOTIFY_ORDER; /* size: 0x00d4 */

typedef struct _POP_DEVICE_SYS_STATE
{
  /* 0x0000 */ unsigned char IrpMinor;
  /* 0x0001 */ char Padding_267[3];
  /* 0x0004 */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0008 */ unsigned long SpinLock;
  /* 0x000c */ struct _KTHREAD* Thread;
  /* 0x0010 */ struct _KEVENT* AbortEvent;
  /* 0x0014 */ struct _KSEMAPHORE* ReadySemaphore;
  /* 0x0018 */ struct _KSEMAPHORE* FinishedSemaphore;
  /* 0x001c */ struct _PO_DEVICE_NOTIFY_ORDER Order;
  /* 0x00f0 */ struct _LIST_ENTRY Pending;
  /* 0x00f8 */ long Status;
  /* 0x00fc */ struct _DEVICE_OBJECT* FailedDevice;
  /* 0x0100 */ unsigned char Waking;
  /* 0x0101 */ unsigned char Cancelled;
  /* 0x0102 */ unsigned char IgnoreErrors;
  /* 0x0103 */ unsigned char IgnoreNotImplemented;
  /* 0x0104 */ unsigned char TimeRefreshLockAcquired;
  /* 0x0105 */ char __PADDING__[3];
} POP_DEVICE_SYS_STATE, *PPOP_DEVICE_SYS_STATE; /* size: 0x0108 */

typedef struct _PCW_PROCESSOR_INFO
{
  /* 0x0000 */ unsigned __int64 IdleTime;
  /* 0x0008 */ unsigned __int64 AvailableTime;
  /* 0x0010 */ unsigned __int64 UserTime;
  /* 0x0018 */ unsigned __int64 KernelTime;
  /* 0x0020 */ unsigned long Interrupts;
  /* 0x0024 */ long Padding_268;
  /* 0x0028 */ unsigned __int64 DpcTime;
  /* 0x0030 */ unsigned __int64 InterruptTime;
  /* 0x0038 */ unsigned long ClockInterrupts;
  /* 0x003c */ unsigned long DpcCount;
  /* 0x0040 */ unsigned long DpcRate;
  /* 0x0044 */ long Padding_269;
  /* 0x0048 */ unsigned __int64 C1Time;
  /* 0x0050 */ unsigned __int64 C2Time;
  /* 0x0058 */ unsigned __int64 C3Time;
  /* 0x0060 */ unsigned __int64 C1Transitions;
  /* 0x0068 */ unsigned __int64 C2Transitions;
  /* 0x0070 */ unsigned __int64 C3Transitions;
  /* 0x0078 */ unsigned __int64 StallTime;
  /* 0x0080 */ unsigned long ParkingStatus;
  /* 0x0084 */ unsigned long CurrentFrequency;
  /* 0x0088 */ unsigned long PercentMaxFrequency;
  /* 0x008c */ unsigned long StateFlags;
  /* 0x0090 */ unsigned long NominalThroughput;
  /* 0x0094 */ unsigned long ActiveThroughput;
  /* 0x0098 */ unsigned __int64 ScaledThroughput;
  /* 0x00a0 */ unsigned __int64 ScaledKernelThroughput;
  /* 0x00a8 */ unsigned __int64 AverageIdleTime;
  /* 0x00b0 */ unsigned __int64 IdleBreakEvents;
  /* 0x00b8 */ unsigned long PerformanceLimit;
  /* 0x00bc */ unsigned long PerformanceLimitFlags;
  /* 0x00c0 */ unsigned __int64 ScaledFrequency;
} PCW_PROCESSOR_INFO, *PPCW_PROCESSOR_INFO; /* size: 0x00c8 */

struct _PCW_INSTANCE;

typedef struct _PCW_DATA
{
  /* 0x0000 */ const void* Data;
  /* 0x0004 */ unsigned long Size;
} PCW_DATA, *PPCW_DATA; /* size: 0x0008 */

typedef struct _OB_EXTENDED_PARSE_PARAMETERS
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char Padding_270[2];
  /* 0x0004 */ unsigned long RestrictedAccessMask;
  /* 0x0008 */ struct _EJOB* Silo;
} OB_EXTENDED_PARSE_PARAMETERS, *POB_EXTENDED_PARSE_PARAMETERS; /* size: 0x000c */

typedef struct _ETW_PERF_COUNTERS
{
  /* 0x0000 */ long TotalActiveSessions;
  /* 0x0004 */ long TotalBufferMemoryNonPagedPool;
  /* 0x0008 */ long TotalBufferMemoryPagedPool;
  /* 0x000c */ long TotalGuidsEnabled;
  /* 0x0010 */ long TotalGuidsNotEnabled;
  /* 0x0014 */ long TotalGuidsPreEnabled;
} ETW_PERF_COUNTERS, *PETW_PERF_COUNTERS; /* size: 0x0018 */

typedef struct _THERMAL_ZONE_COUNTERS
{
  /* 0x0000 */ unsigned long Temperature;
  /* 0x0004 */ unsigned long ThrottleLimit;
  /* 0x0008 */ unsigned long ThrottleReasons;
  /* 0x000c */ unsigned long TemperatureHighPrecision;
} THERMAL_ZONE_COUNTERS, *PTHERMAL_ZONE_COUNTERS; /* size: 0x0010 */

struct PROCESS_PERF_COUNTERS
{
  /* 0x0000 */ unsigned __int64 ProcessorTime;
  /* 0x0008 */ unsigned __int64 UserTime;
  /* 0x0010 */ unsigned __int64 PrivilegedTime;
  /* 0x0018 */ unsigned __int64 VirtualBytesPeak;
  /* 0x0020 */ unsigned __int64 VirtualBytes;
  /* 0x0028 */ unsigned long PageFaults;
  /* 0x002c */ unsigned long HandleCount;
  /* 0x0030 */ unsigned __int64 WorkingSetPeak;
  /* 0x0038 */ unsigned __int64 WorkingSet;
  /* 0x0040 */ unsigned __int64 PageFileBytesPeak;
  /* 0x0048 */ unsigned __int64 PageFileBytes;
  /* 0x0050 */ unsigned __int64 PrivateBytes;
  /* 0x0058 */ unsigned long ThreadCount;
  /* 0x005c */ unsigned long PriorityBase;
  /* 0x0060 */ unsigned __int64 ElapsedTime;
  /* 0x0068 */ unsigned long ProcessId;
  /* 0x006c */ unsigned long CreatingProcessId;
  /* 0x0070 */ unsigned __int64 PoolPagedBytes;
  /* 0x0078 */ unsigned __int64 PoolNonpagedBytes;
  /* 0x0080 */ unsigned __int64 IoReadOperations;
  /* 0x0088 */ unsigned __int64 IoWriteOperations;
  /* 0x0090 */ unsigned __int64 IoDataOperations;
  /* 0x0098 */ unsigned __int64 IoOtherOperations;
  /* 0x00a0 */ unsigned __int64 IoReadBytes;
  /* 0x00a8 */ unsigned __int64 IoWriteBytes;
  /* 0x00b0 */ unsigned __int64 IoDataBytes;
  /* 0x00b8 */ unsigned __int64 IoOtherBytes;
  /* 0x00c0 */ unsigned __int64 WorkingSetPrivate;
  /* 0x00c8 */ unsigned __int64 PerfFreq;
  /* 0x00d0 */ unsigned __int64 PerfTime;
}; /* size: 0x00d8 */

typedef struct _NT_TIB32
{
  /* 0x0000 */ unsigned long ExceptionList;
  /* 0x0004 */ unsigned long StackBase;
  /* 0x0008 */ unsigned long StackLimit;
  /* 0x000c */ unsigned long SubSystemTib;
  union
  {
    /* 0x0010 */ unsigned long FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long ArbitraryUserPointer;
  /* 0x0018 */ unsigned long Self;
} NT_TIB32, *PNT_TIB32; /* size: 0x001c */

typedef struct _CLIENT_ID32
{
  /* 0x0000 */ unsigned long UniqueProcess;
  /* 0x0004 */ unsigned long UniqueThread;
} CLIENT_ID32, *PCLIENT_ID32; /* size: 0x0008 */

typedef struct _ACTIVATION_CONTEXT_STACK32
{
  /* 0x0000 */ unsigned long ActiveFrame;
  /* 0x0004 */ struct LIST_ENTRY32 FrameListCache;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long NextCookieSequenceNumber;
  /* 0x0014 */ unsigned long StackId;
} ACTIVATION_CONTEXT_STACK32, *PACTIVATION_CONTEXT_STACK32; /* size: 0x0018 */

typedef struct _STRING32
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ unsigned long Buffer;
} STRING32, *PSTRING32; /* size: 0x0008 */

typedef struct _TEB32
{
  /* 0x0000 */ struct _NT_TIB32 NtTib;
  /* 0x001c */ unsigned long EnvironmentPointer;
  /* 0x0020 */ struct _CLIENT_ID32 ClientId;
  /* 0x0028 */ unsigned long ActiveRpcHandle;
  /* 0x002c */ unsigned long ThreadLocalStoragePointer;
  /* 0x0030 */ unsigned long ProcessEnvironmentBlock;
  /* 0x0034 */ unsigned long LastErrorValue;
  /* 0x0038 */ unsigned long CountOfOwnedCriticalSections;
  /* 0x003c */ unsigned long CsrClientThread;
  /* 0x0040 */ unsigned long Win32ThreadInfo;
  /* 0x0044 */ unsigned long User32Reserved[26];
  /* 0x00ac */ unsigned long UserReserved[5];
  /* 0x00c0 */ unsigned long WOW32Reserved;
  /* 0x00c4 */ unsigned long CurrentLocale;
  /* 0x00c8 */ unsigned long FpSoftwareStatusRegister;
  /* 0x00cc */ unsigned long ReservedForDebuggerInstrumentation[16];
  /* 0x010c */ unsigned long SystemReserved1[26];
  /* 0x0174 */ char PlaceholderCompatibilityMode;
  /* 0x0175 */ unsigned char PlaceholderHydrationAlwaysExplicit;
  /* 0x0176 */ char PlaceholderReserved[10];
  /* 0x0180 */ unsigned long ProxiedProcessId;
  /* 0x0184 */ struct _ACTIVATION_CONTEXT_STACK32 _ActivationStack;
  /* 0x019c */ unsigned char WorkingOnBehalfTicket[8];
  /* 0x01a4 */ long ExceptionCode;
  /* 0x01a8 */ unsigned long ActivationContextStackPointer;
  /* 0x01ac */ unsigned long InstrumentationCallbackSp;
  /* 0x01b0 */ unsigned long InstrumentationCallbackPreviousPc;
  /* 0x01b4 */ unsigned long InstrumentationCallbackPreviousSp;
  /* 0x01b8 */ unsigned char InstrumentationCallbackDisabled;
  /* 0x01b9 */ unsigned char SpareBytes[23];
  /* 0x01d0 */ unsigned long TxFsContext;
  /* 0x01d4 */ struct _GDI_TEB_BATCH32 GdiTebBatch;
  /* 0x06b4 */ struct _CLIENT_ID32 RealClientId;
  /* 0x06bc */ unsigned long GdiCachedProcessHandle;
  /* 0x06c0 */ unsigned long GdiClientPID;
  /* 0x06c4 */ unsigned long GdiClientTID;
  /* 0x06c8 */ unsigned long GdiThreadLocalInfo;
  /* 0x06cc */ unsigned long Win32ClientInfo[62];
  /* 0x07c4 */ unsigned long glDispatchTable[233];
  /* 0x0b68 */ unsigned long glReserved1[29];
  /* 0x0bdc */ unsigned long glReserved2;
  /* 0x0be0 */ unsigned long glSectionInfo;
  /* 0x0be4 */ unsigned long glSection;
  /* 0x0be8 */ unsigned long glTable;
  /* 0x0bec */ unsigned long glCurrentRC;
  /* 0x0bf0 */ unsigned long glContext;
  /* 0x0bf4 */ unsigned long LastStatusValue;
  /* 0x0bf8 */ struct _STRING32 StaticUnicodeString;
  /* 0x0c00 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x0e0a */ char Padding_271[2];
  /* 0x0e0c */ unsigned long DeallocationStack;
  /* 0x0e10 */ unsigned long TlsSlots[64];
  /* 0x0f10 */ struct LIST_ENTRY32 TlsLinks;
  /* 0x0f18 */ unsigned long Vdm;
  /* 0x0f1c */ unsigned long ReservedForNtRpc;
  /* 0x0f20 */ unsigned long DbgSsReserved[2];
  /* 0x0f28 */ unsigned long HardErrorMode;
  /* 0x0f2c */ unsigned long Instrumentation[9];
  /* 0x0f50 */ struct _GUID ActivityId;
  /* 0x0f60 */ unsigned long SubProcessTag;
  /* 0x0f64 */ unsigned long PerflibData;
  /* 0x0f68 */ unsigned long EtwTraceData;
  /* 0x0f6c */ unsigned long WinSockData;
  /* 0x0f70 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x0f74 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x0f74 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x0f74 */ unsigned char ReservedPad0;
      /* 0x0f75 */ unsigned char ReservedPad1;
      /* 0x0f76 */ unsigned char ReservedPad2;
      /* 0x0f77 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0f78 */ unsigned long GuaranteedStackBytes;
  /* 0x0f7c */ unsigned long ReservedForPerf;
  /* 0x0f80 */ unsigned long ReservedForOle;
  /* 0x0f84 */ unsigned long WaitingOnLoaderLock;
  /* 0x0f88 */ unsigned long SavedPriorityState;
  /* 0x0f8c */ unsigned long ReservedForCodeCoverage;
  /* 0x0f90 */ unsigned long ThreadPoolData;
  /* 0x0f94 */ unsigned long TlsExpansionSlots;
  /* 0x0f98 */ unsigned long MuiGeneration;
  /* 0x0f9c */ unsigned long IsImpersonating;
  /* 0x0fa0 */ unsigned long NlsCache;
  /* 0x0fa4 */ unsigned long pShimData;
  /* 0x0fa8 */ unsigned long HeapData;
  /* 0x0fac */ unsigned long CurrentTransactionHandle;
  /* 0x0fb0 */ unsigned long ActiveFrame;
  /* 0x0fb4 */ unsigned long FlsData;
  /* 0x0fb8 */ unsigned long PreferredLanguages;
  /* 0x0fbc */ unsigned long UserPrefLanguages;
  /* 0x0fc0 */ unsigned long MergedPrefLanguages;
  /* 0x0fc4 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x0fc8 */ volatile unsigned short CrossTebFlags;
    /* 0x0fc8 */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0fca */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x0fca */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x0fca */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x0fca */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x0fca */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x0fca */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x0fca */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x0fca */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x0fca */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x0fca */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x0fca */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x0fca */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x0fca */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x0fca */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x0fca */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x0fca */ unsigned short SkipLoaderInit : 1; /* bit position: 14 */
      /* 0x0fca */ unsigned short SpareSameTebBits : 1; /* bit position: 15 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0fcc */ unsigned long TxnScopeEnterCallback;
  /* 0x0fd0 */ unsigned long TxnScopeExitCallback;
  /* 0x0fd4 */ unsigned long TxnScopeContext;
  /* 0x0fd8 */ unsigned long LockCount;
  /* 0x0fdc */ long WowTebOffset;
  /* 0x0fe0 */ unsigned long ResourceRetValue;
  /* 0x0fe4 */ unsigned long ReservedForWdf;
  /* 0x0fe8 */ unsigned __int64 ReservedForCrt;
  /* 0x0ff0 */ struct _GUID EffectiveContainerId;
} TEB32, *PTEB32; /* size: 0x1000 */

typedef struct _OBJECT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ void* RootDirectory;
  /* 0x0008 */ struct _UNICODE_STRING* ObjectName;
  /* 0x000c */ unsigned long Attributes;
  /* 0x0010 */ void* SecurityDescriptor;
  /* 0x0014 */ void* SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES; /* size: 0x0018 */

typedef struct _NT_TIB64
{
  /* 0x0000 */ unsigned __int64 ExceptionList;
  /* 0x0008 */ unsigned __int64 StackBase;
  /* 0x0010 */ unsigned __int64 StackLimit;
  /* 0x0018 */ unsigned __int64 SubSystemTib;
  union
  {
    /* 0x0020 */ unsigned __int64 FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ unsigned __int64 ArbitraryUserPointer;
  /* 0x0030 */ unsigned __int64 Self;
} NT_TIB64, *PNT_TIB64; /* size: 0x0038 */

typedef struct _ACTIVATION_CONTEXT_STACK64
{
  /* 0x0000 */ unsigned __int64 ActiveFrame;
  /* 0x0008 */ struct LIST_ENTRY64 FrameListCache;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned long NextCookieSequenceNumber;
  /* 0x0020 */ unsigned long StackId;
  /* 0x0024 */ long __PADDING__[1];
} ACTIVATION_CONTEXT_STACK64, *PACTIVATION_CONTEXT_STACK64; /* size: 0x0028 */

typedef struct _GDI_TEB_BATCH64
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Offset : 31; /* bit position: 0 */
    /* 0x0000 */ unsigned long HasRenderingCommand : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_272;
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH64, *PGDI_TEB_BATCH64; /* size: 0x04e8 */

typedef struct _STRING64
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_273;
  /* 0x0008 */ unsigned __int64 Buffer;
} STRING64, *PSTRING64; /* size: 0x0010 */

typedef struct _TEB64
{
  /* 0x0000 */ struct _NT_TIB64 NtTib;
  /* 0x0038 */ unsigned __int64 EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID64 ClientId;
  /* 0x0050 */ unsigned __int64 ActiveRpcHandle;
  /* 0x0058 */ unsigned __int64 ThreadLocalStoragePointer;
  /* 0x0060 */ unsigned __int64 ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ unsigned __int64 CsrClientThread;
  /* 0x0078 */ unsigned __int64 Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x00fc */ long Padding_274;
  /* 0x0100 */ unsigned __int64 WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ unsigned __int64 ReservedForDebuggerInstrumentation[16];
  /* 0x0190 */ unsigned __int64 SystemReserved1[30];
  /* 0x0280 */ char PlaceholderCompatibilityMode;
  /* 0x0281 */ unsigned char PlaceholderHydrationAlwaysExplicit;
  /* 0x0282 */ char PlaceholderReserved[10];
  /* 0x028c */ unsigned long ProxiedProcessId;
  /* 0x0290 */ struct _ACTIVATION_CONTEXT_STACK64 _ActivationStack;
  /* 0x02b8 */ unsigned char WorkingOnBehalfTicket[8];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c4 */ unsigned char Padding0[4];
  /* 0x02c8 */ unsigned __int64 ActivationContextStackPointer;
  /* 0x02d0 */ unsigned __int64 InstrumentationCallbackSp;
  /* 0x02d8 */ unsigned __int64 InstrumentationCallbackPreviousPc;
  /* 0x02e0 */ unsigned __int64 InstrumentationCallbackPreviousSp;
  /* 0x02e8 */ unsigned long TxFsContext;
  /* 0x02ec */ unsigned char InstrumentationCallbackDisabled;
  /* 0x02ed */ unsigned char UnalignedLoadStoreExceptions;
  /* 0x02ee */ unsigned char Padding1[2];
  /* 0x02f0 */ struct _GDI_TEB_BATCH64 GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID64 RealClientId;
  /* 0x07e8 */ unsigned __int64 GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ unsigned __int64 GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ unsigned __int64 glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ unsigned __int64 glReserved2;
  /* 0x1228 */ unsigned __int64 glSectionInfo;
  /* 0x1230 */ unsigned __int64 glSection;
  /* 0x1238 */ unsigned __int64 glTable;
  /* 0x1240 */ unsigned __int64 glCurrentRC;
  /* 0x1248 */ unsigned __int64 glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1254 */ unsigned char Padding2[4];
  /* 0x1258 */ struct _STRING64 StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1472 */ unsigned char Padding3[6];
  /* 0x1478 */ unsigned __int64 DeallocationStack;
  /* 0x1480 */ unsigned __int64 TlsSlots[64];
  /* 0x1680 */ struct LIST_ENTRY64 TlsLinks;
  /* 0x1690 */ unsigned __int64 Vdm;
  /* 0x1698 */ unsigned __int64 ReservedForNtRpc;
  /* 0x16a0 */ unsigned __int64 DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b4 */ unsigned char Padding4[4];
  /* 0x16b8 */ unsigned __int64 Instrumentation[11];
  /* 0x1710 */ struct _GUID ActivityId;
  /* 0x1720 */ unsigned __int64 SubProcessTag;
  /* 0x1728 */ unsigned __int64 PerflibData;
  /* 0x1730 */ unsigned __int64 EtwTraceData;
  /* 0x1738 */ unsigned __int64 WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  union
  {
    /* 0x1744 */ struct _PROCESSOR_NUMBER CurrentIdealProcessor;
    /* 0x1744 */ unsigned long IdealProcessorValue;
    struct
    {
      /* 0x1744 */ unsigned char ReservedPad0;
      /* 0x1745 */ unsigned char ReservedPad1;
      /* 0x1746 */ unsigned char ReservedPad2;
      /* 0x1747 */ unsigned char IdealProcessor;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x1748 */ unsigned long GuaranteedStackBytes;
  /* 0x174c */ unsigned char Padding5[4];
  /* 0x1750 */ unsigned __int64 ReservedForPerf;
  /* 0x1758 */ unsigned __int64 ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1764 */ unsigned char Padding6[4];
  /* 0x1768 */ unsigned __int64 SavedPriorityState;
  /* 0x1770 */ unsigned __int64 ReservedForCodeCoverage;
  /* 0x1778 */ unsigned __int64 ThreadPoolData;
  /* 0x1780 */ unsigned __int64 TlsExpansionSlots;
  /* 0x1788 */ unsigned __int64 DeallocationBStore;
  /* 0x1790 */ unsigned __int64 BStoreLimit;
  /* 0x1798 */ unsigned long MuiGeneration;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ unsigned __int64 NlsCache;
  /* 0x17a8 */ unsigned __int64 pShimData;
  /* 0x17b0 */ unsigned long HeapData;
  /* 0x17b4 */ unsigned char Padding7[4];
  /* 0x17b8 */ unsigned __int64 CurrentTransactionHandle;
  /* 0x17c0 */ unsigned __int64 ActiveFrame;
  /* 0x17c8 */ unsigned __int64 FlsData;
  /* 0x17d0 */ unsigned __int64 PreferredLanguages;
  /* 0x17d8 */ unsigned __int64 UserPrefLanguages;
  /* 0x17e0 */ unsigned __int64 MergedPrefLanguages;
  /* 0x17e8 */ unsigned long MuiImpersonation;
  union
  {
    /* 0x17ec */ volatile unsigned short CrossTebFlags;
    /* 0x17ec */ unsigned short SpareCrossTebBits : 16; /* bit position: 0 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x17ee */ unsigned short SameTebFlags;
    struct /* bitfield */
    {
      /* 0x17ee */ unsigned short SafeThunkCall : 1; /* bit position: 0 */
      /* 0x17ee */ unsigned short InDebugPrint : 1; /* bit position: 1 */
      /* 0x17ee */ unsigned short HasFiberData : 1; /* bit position: 2 */
      /* 0x17ee */ unsigned short SkipThreadAttach : 1; /* bit position: 3 */
      /* 0x17ee */ unsigned short WerInShipAssertCode : 1; /* bit position: 4 */
      /* 0x17ee */ unsigned short RanProcessInit : 1; /* bit position: 5 */
      /* 0x17ee */ unsigned short ClonedThread : 1; /* bit position: 6 */
      /* 0x17ee */ unsigned short SuppressDebugMsg : 1; /* bit position: 7 */
      /* 0x17ee */ unsigned short DisableUserStackWalk : 1; /* bit position: 8 */
      /* 0x17ee */ unsigned short RtlExceptionAttached : 1; /* bit position: 9 */
      /* 0x17ee */ unsigned short InitialThread : 1; /* bit position: 10 */
      /* 0x17ee */ unsigned short SessionAware : 1; /* bit position: 11 */
      /* 0x17ee */ unsigned short LoadOwner : 1; /* bit position: 12 */
      /* 0x17ee */ unsigned short LoaderWorker : 1; /* bit position: 13 */
      /* 0x17ee */ unsigned short SkipLoaderInit : 1; /* bit position: 14 */
      /* 0x17ee */ unsigned short SpareSameTebBits : 1; /* bit position: 15 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x17f0 */ unsigned __int64 TxnScopeEnterCallback;
  /* 0x17f8 */ unsigned __int64 TxnScopeExitCallback;
  /* 0x1800 */ unsigned __int64 TxnScopeContext;
  /* 0x1808 */ unsigned long LockCount;
  /* 0x180c */ long WowTebOffset;
  /* 0x1810 */ unsigned __int64 ResourceRetValue;
  /* 0x1818 */ unsigned __int64 ReservedForWdf;
  /* 0x1820 */ unsigned __int64 ReservedForCrt;
  /* 0x1828 */ struct _GUID EffectiveContainerId;
} TEB64, *PTEB64; /* size: 0x1838 */

typedef struct _OBJECT_DUMP_CONTROL
{
  /* 0x0000 */ void* Stream;
  /* 0x0004 */ unsigned long Detail;
} OBJECT_DUMP_CONTROL, *POBJECT_DUMP_CONTROL; /* size: 0x0008 */

typedef struct _ALPC_PORT
{
  /* 0x0000 */ struct _LIST_ENTRY PortListEntry;
  /* 0x0008 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x000c */ struct _EPROCESS* OwnerProcess;
  /* 0x0010 */ void* CompletionPort;
  /* 0x0014 */ void* CompletionKey;
  /* 0x0018 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* CompletionPacketLookaside;
  /* 0x001c */ void* PortContext;
  /* 0x0020 */ struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  /* 0x005c */ struct _EX_PUSH_LOCK IncomingQueueLock;
  /* 0x0060 */ struct _LIST_ENTRY MainQueue;
  /* 0x0068 */ struct _LIST_ENTRY LargeMessageQueue;
  /* 0x0070 */ struct _EX_PUSH_LOCK PendingQueueLock;
  /* 0x0074 */ struct _LIST_ENTRY PendingQueue;
  /* 0x007c */ struct _EX_PUSH_LOCK DirectQueueLock;
  /* 0x0080 */ struct _LIST_ENTRY DirectQueue;
  /* 0x0088 */ struct _EX_PUSH_LOCK WaitQueueLock;
  /* 0x008c */ struct _LIST_ENTRY WaitQueue;
  union
  {
    /* 0x0094 */ struct _KSEMAPHORE* Semaphore;
    /* 0x0094 */ struct _KEVENT* DummyEvent;
  }; /* size: 0x0004 */
  /* 0x0098 */ struct _ALPC_PORT_ATTRIBUTES PortAttributes;
  /* 0x00c4 */ struct _EX_PUSH_LOCK ResourceListLock;
  /* 0x00c8 */ struct _LIST_ENTRY ResourceListHead;
  /* 0x00d0 */ struct _EX_PUSH_LOCK PortObjectLock;
  /* 0x00d4 */ struct _ALPC_COMPLETION_LIST* CompletionList;
  /* 0x00d8 */ struct _CALLBACK_OBJECT* CallbackObject;
  /* 0x00dc */ void* CallbackContext;
  /* 0x00e0 */ struct _LIST_ENTRY CanceledQueue;
  /* 0x00e8 */ long SequenceNo;
  /* 0x00ec */ long ReferenceNo;
  /* 0x00f0 */ struct _PALPC_PORT_REFERENCE_WAIT_BLOCK* ReferenceNoWait;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x00f4 */ unsigned long Initialized : 1; /* bit position: 0 */
          /* 0x00f4 */ unsigned long Type : 2; /* bit position: 1 */
          /* 0x00f4 */ unsigned long ConnectionPending : 1; /* bit position: 3 */
          /* 0x00f4 */ unsigned long ConnectionRefused : 1; /* bit position: 4 */
          /* 0x00f4 */ unsigned long Disconnected : 1; /* bit position: 5 */
          /* 0x00f4 */ unsigned long Closed : 1; /* bit position: 6 */
          /* 0x00f4 */ unsigned long NoFlushOnClose : 1; /* bit position: 7 */
          /* 0x00f4 */ unsigned long ReturnExtendedInfo : 1; /* bit position: 8 */
          /* 0x00f4 */ unsigned long Waitable : 1; /* bit position: 9 */
          /* 0x00f4 */ unsigned long DynamicSecurity : 1; /* bit position: 10 */
          /* 0x00f4 */ unsigned long Wow64CompletionList : 1; /* bit position: 11 */
          /* 0x00f4 */ unsigned long Lpc : 1; /* bit position: 12 */
          /* 0x00f4 */ unsigned long LpcToLpc : 1; /* bit position: 13 */
          /* 0x00f4 */ unsigned long HasCompletionList : 1; /* bit position: 14 */
          /* 0x00f4 */ unsigned long HadCompletionList : 1; /* bit position: 15 */
          /* 0x00f4 */ unsigned long EnableCompletionList : 1; /* bit position: 16 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x00f4 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x00f8 */ struct _ALPC_PORT* TargetQueuePort;
  /* 0x00fc */ struct _ALPC_PORT* TargetSequencePort;
  /* 0x0100 */ struct _KALPC_MESSAGE* CachedMessage;
  /* 0x0104 */ unsigned long MainQueueLength;
  /* 0x0108 */ unsigned long LargeMessageQueueLength;
  /* 0x010c */ unsigned long PendingQueueLength;
  /* 0x0110 */ unsigned long DirectQueueLength;
  /* 0x0114 */ unsigned long CanceledQueueLength;
  /* 0x0118 */ unsigned long WaitQueueLength;
} ALPC_PORT, *PALPC_PORT; /* size: 0x011c */

typedef struct _KAFFINITY_ENUMERATION_CONTEXT
{
  /* 0x0000 */ struct _KAFFINITY_EX* Affinity;
  /* 0x0004 */ unsigned long CurrentMask;
  /* 0x0008 */ unsigned short CurrentIndex;
  /* 0x000a */ char __PADDING__[2];
} KAFFINITY_ENUMERATION_CONTEXT, *PKAFFINITY_ENUMERATION_CONTEXT; /* size: 0x000c */

typedef struct _ALPC_WORK_ON_BEHALF_TICKET
{
  /* 0x0000 */ unsigned long ThreadId;
  /* 0x0004 */ unsigned long ThreadCreationTimeLow;
} ALPC_WORK_ON_BEHALF_TICKET, *PALPC_WORK_ON_BEHALF_TICKET; /* size: 0x0008 */

typedef struct _KALPC_WORK_ON_BEHALF_DATA
{
  /* 0x0000 */ struct _ALPC_WORK_ON_BEHALF_TICKET Ticket;
} KALPC_WORK_ON_BEHALF_DATA, *PKALPC_WORK_ON_BEHALF_DATA; /* size: 0x0008 */

typedef struct _KALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ void* ClientContext;
  /* 0x0004 */ void* ServerContext;
  /* 0x0008 */ void* PortContext;
  /* 0x000c */ void* CancelPortContext;
  /* 0x0010 */ struct _KALPC_SECURITY_DATA* SecurityData;
  /* 0x0014 */ struct _KALPC_VIEW* View;
  /* 0x0018 */ struct _KALPC_HANDLE_DATA* HandleData;
  /* 0x001c */ union _KALPC_DIRECT_EVENT DirectEvent;
  /* 0x0020 */ struct _KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData;
} KALPC_MESSAGE_ATTRIBUTES, *PKALPC_MESSAGE_ATTRIBUTES; /* size: 0x0028 */

typedef struct _KALPC_MESSAGE
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0008 */ struct _ALPC_PORT* PortQueue;
  /* 0x000c */ struct _ALPC_PORT* OwnerPort;
  /* 0x0010 */ struct _ETHREAD* WaitingThread;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0014 */ unsigned long QueueType : 3; /* bit position: 0 */
          /* 0x0014 */ unsigned long QueuePortType : 4; /* bit position: 3 */
          /* 0x0014 */ unsigned long Canceled : 1; /* bit position: 7 */
          /* 0x0014 */ unsigned long Ready : 1; /* bit position: 8 */
          /* 0x0014 */ unsigned long ReleaseMessage : 1; /* bit position: 9 */
          /* 0x0014 */ unsigned long SharedQuota : 1; /* bit position: 10 */
          /* 0x0014 */ unsigned long ReplyWaitReply : 1; /* bit position: 11 */
          /* 0x0014 */ unsigned long OwnerPortReference : 1; /* bit position: 12 */
          /* 0x0014 */ unsigned long ReceiverReference : 1; /* bit position: 13 */
          /* 0x0014 */ unsigned long ViewAttributeRetrieved : 1; /* bit position: 14 */
          /* 0x0014 */ unsigned long InDispatch : 1; /* bit position: 15 */
        }; /* bitfield */
      } /* size: 0x0004 */ s1;
      /* 0x0014 */ unsigned long State;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0018 */ long SequenceNo;
  union
  {
    /* 0x001c */ struct _EPROCESS* QuotaProcess;
    /* 0x001c */ void* QuotaBlock;
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _ALPC_PORT* CancelSequencePort;
  /* 0x0024 */ struct _ALPC_PORT* CancelQueuePort;
  /* 0x0028 */ long CancelSequenceNo;
  /* 0x002c */ struct _LIST_ENTRY CancelListEntry;
  /* 0x0034 */ struct _KALPC_RESERVE* Reserve;
  /* 0x0038 */ struct _KALPC_MESSAGE_ATTRIBUTES MessageAttributes;
  /* 0x0060 */ void* DataUserVa;
  /* 0x0064 */ struct _ALPC_COMMUNICATION_INFO* CommunicationInfo;
  /* 0x0068 */ struct _ALPC_PORT* ConnectionPort;
  /* 0x006c */ struct _ETHREAD* ServerThread;
  /* 0x0070 */ void* WakeReference;
  /* 0x0074 */ void* WakeReference2;
  /* 0x0078 */ void* ExtensionBuffer;
  /* 0x007c */ unsigned long ExtensionBufferSize;
  /* 0x0080 */ struct _PORT_MESSAGE PortMessage;
} KALPC_MESSAGE, *PKALPC_MESSAGE; /* size: 0x0098 */

typedef struct _RTL_ATOM_TABLE_REFERENCE
{
  /* 0x0000 */ struct _LIST_ENTRY LowBoxList;
  /* 0x0008 */ unsigned long LowBoxID;
  /* 0x000c */ unsigned short ReferenceCount;
  /* 0x000e */ unsigned short Flags;
} RTL_ATOM_TABLE_REFERENCE, *PRTL_ATOM_TABLE_REFERENCE; /* size: 0x0010 */

typedef struct _RTL_ATOM_TABLE_ENTRY
{
  /* 0x0000 */ struct _RTL_ATOM_TABLE_ENTRY* HashLink;
  /* 0x0004 */ unsigned short HandleIndex;
  /* 0x0006 */ unsigned short Atom;
  /* 0x0008 */ struct _RTL_ATOM_TABLE_REFERENCE Reference;
  /* 0x0018 */ unsigned char NameLength;
  /* 0x0019 */ char Padding_275;
  /* 0x001a */ wchar_t Name[1];
} RTL_ATOM_TABLE_ENTRY, *PRTL_ATOM_TABLE_ENTRY; /* size: 0x001c */

typedef struct _POP_ACTION_TRIGGER
{
  /* 0x0000 */ enum POWER_POLICY_DEVICE_TYPE Type;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _POP_TRIGGER_WAIT* Wait;
  union
  {
    struct
    {
      /* 0x000c */ unsigned long PercentLevel;
    } /* size: 0x0004 */ Battery;
    struct
    {
      /* 0x000c */ unsigned long Type;
    } /* size: 0x0004 */ Button;
  }; /* size: 0x0004 */
} POP_ACTION_TRIGGER, *PPOP_ACTION_TRIGGER; /* size: 0x0010 */

typedef struct _PNP_DEVICE_COMPLETION_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY DispatchedList;
  /* 0x0008 */ unsigned long DispatchedCount;
  /* 0x000c */ struct _LIST_ENTRY CompletedList;
  /* 0x0014 */ struct _KSEMAPHORE CompletedSemaphore;
  /* 0x0028 */ unsigned long SpinLock;
} PNP_DEVICE_COMPLETION_QUEUE, *PPNP_DEVICE_COMPLETION_QUEUE; /* size: 0x002c */

typedef struct _PNP_ASSIGN_RESOURCES_CONTEXT
{
  /* 0x0000 */ unsigned long IncludeFailedDevices;
  /* 0x0004 */ unsigned long DeviceCount;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceList[1];
} PNP_ASSIGN_RESOURCES_CONTEXT, *PPNP_ASSIGN_RESOURCES_CONTEXT; /* size: 0x000c */

typedef struct _PNP_RESOURCE_REQUEST
{
  /* 0x0000 */ struct _DEVICE_OBJECT* PhysicalDevice;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ enum _ARBITER_REQUEST_SOURCE AllocationType;
  /* 0x000c */ unsigned long Priority;
  /* 0x0010 */ unsigned long Position;
  /* 0x0014 */ struct _IO_RESOURCE_REQUIREMENTS_LIST* ResourceRequirements;
  /* 0x0018 */ void* ReqList;
  /* 0x001c */ struct _CM_RESOURCE_LIST* ResourceAssignment;
  /* 0x0020 */ struct _CM_RESOURCE_LIST* TranslatedResourceAssignment;
  /* 0x0024 */ long Status;
} PNP_RESOURCE_REQUEST, *PPNP_RESOURCE_REQUEST; /* size: 0x0028 */

typedef struct _X86_KTRAP_FRAME
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned long DbgArgPointer;
  /* 0x0010 */ unsigned long TempSegCs;
  /* 0x0014 */ unsigned long TempEsp;
  /* 0x0018 */ unsigned long Dr0;
  /* 0x001c */ unsigned long Dr1;
  /* 0x0020 */ unsigned long Dr2;
  /* 0x0024 */ unsigned long Dr3;
  /* 0x0028 */ unsigned long Dr6;
  /* 0x002c */ unsigned long Dr7;
  /* 0x0030 */ unsigned long SegGs;
  /* 0x0034 */ unsigned long SegEs;
  /* 0x0038 */ unsigned long SegDs;
  /* 0x003c */ unsigned long Edx;
  /* 0x0040 */ unsigned long Ecx;
  /* 0x0044 */ unsigned long Eax;
  /* 0x0048 */ unsigned char PreviousPreviousMode;
  /* 0x0049 */ unsigned char EntropyQueueDpc;
  /* 0x004a */ unsigned char Reserved[2];
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME, *PX86_KTRAP_FRAME; /* size: 0x008c */

typedef struct __WIL__WNF_TYPE_ID
{
  /* 0x0000 */ struct _GUID TypeId;
} _WIL__WNF_TYPE_ID, *P_WIL__WNF_TYPE_ID; /* size: 0x0010 */

typedef struct _X86_KTRAP_FRAME_BLUE
{
  /* 0x0000 */ unsigned long DbgEbp;
  /* 0x0004 */ unsigned long DbgEip;
  /* 0x0008 */ unsigned long DbgArgMark;
  /* 0x000c */ unsigned short TempSegCs;
  /* 0x000e */ unsigned char Logging;
  /* 0x000f */ unsigned char FrameType;
  /* 0x0010 */ unsigned long TempEsp;
  /* 0x0014 */ unsigned long Dr0;
  /* 0x0018 */ unsigned long Dr1;
  /* 0x001c */ unsigned long Dr2;
  /* 0x0020 */ unsigned long Dr3;
  /* 0x0024 */ unsigned long Dr6;
  /* 0x0028 */ unsigned long Dr7;
  /* 0x002c */ unsigned long SegGs;
  /* 0x0030 */ unsigned long SegEs;
  /* 0x0034 */ unsigned long SegDs;
  /* 0x0038 */ unsigned long Edx;
  /* 0x003c */ unsigned long Ecx;
  /* 0x0040 */ unsigned long Eax;
  /* 0x0044 */ unsigned char PreviousPreviousMode;
  /* 0x0045 */ unsigned char EntropyQueueDpc;
  /* 0x0046 */ unsigned char Reserved[2];
  /* 0x0048 */ unsigned long MxCsr;
  /* 0x004c */ unsigned long ExceptionList;
  /* 0x0050 */ unsigned long SegFs;
  /* 0x0054 */ unsigned long Edi;
  /* 0x0058 */ unsigned long Esi;
  /* 0x005c */ unsigned long Ebx;
  /* 0x0060 */ unsigned long Ebp;
  /* 0x0064 */ unsigned long ErrCode;
  /* 0x0068 */ unsigned long Eip;
  /* 0x006c */ unsigned long SegCs;
  /* 0x0070 */ unsigned long EFlags;
  /* 0x0074 */ unsigned long HardwareEsp;
  /* 0x0078 */ unsigned long HardwareSegSs;
  /* 0x007c */ unsigned long V86Es;
  /* 0x0080 */ unsigned long V86Ds;
  /* 0x0084 */ unsigned long V86Fs;
  /* 0x0088 */ unsigned long V86Gs;
} X86_KTRAP_FRAME_BLUE, *PX86_KTRAP_FRAME_BLUE; /* size: 0x008c */

typedef struct _DBGKD_READ_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesRead;
} DBGKD_READ_MEMORY32, *PDBGKD_READ_MEMORY32; /* size: 0x000c */

typedef struct _DBGKD_WRITE_MEMORY32
{
  /* 0x0000 */ unsigned long TargetBaseAddress;
  /* 0x0004 */ unsigned long TransferCount;
  /* 0x0008 */ unsigned long ActualBytesWritten;
} DBGKD_WRITE_MEMORY32, *PDBGKD_WRITE_MEMORY32; /* size: 0x000c */

typedef struct _DBGKD_WRITE_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakPointAddress;
  /* 0x0004 */ unsigned long BreakPointHandle;
} DBGKD_WRITE_BREAKPOINT32, *PDBGKD_WRITE_BREAKPOINT32; /* size: 0x0008 */

typedef struct _WNF_DELIVERY_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 SubscriptionId;
  /* 0x0008 */ struct _WNF_STATE_NAME StateName;
  /* 0x0010 */ unsigned long ChangeStamp;
  /* 0x0014 */ unsigned long StateDataSize;
  /* 0x0018 */ unsigned long EventMask;
  /* 0x001c */ struct _WNF_TYPE_ID TypeId;
  /* 0x002c */ unsigned long StateDataOffset;
} WNF_DELIVERY_DESCRIPTOR, *PWNF_DELIVERY_DESCRIPTOR; /* size: 0x0030 */

typedef struct _DBGKD_READ_WRITE_IO32
{
  /* 0x0000 */ unsigned long DataSize;
  /* 0x0004 */ unsigned long IoAddress;
  /* 0x0008 */ unsigned long DataValue;
} DBGKD_READ_WRITE_IO32, *PDBGKD_READ_WRITE_IO32; /* size: 0x000c */

typedef struct _SEP_TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned __int64 Present;
  /* 0x0008 */ unsigned __int64 Enabled;
  /* 0x0010 */ unsigned __int64 EnabledByDefault;
} SEP_TOKEN_PRIVILEGES, *PSEP_TOKEN_PRIVILEGES; /* size: 0x0018 */

typedef struct _DBGKD_SET_SPECIAL_CALL32
{
  /* 0x0000 */ unsigned long SpecialCall;
} DBGKD_SET_SPECIAL_CALL32, *PDBGKD_SET_SPECIAL_CALL32; /* size: 0x0004 */

typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32
{
  /* 0x0000 */ unsigned long BreakpointAddress;
  /* 0x0004 */ unsigned long Flags;
} DBGKD_SET_INTERNAL_BREAKPOINT32, *PDBGKD_SET_INTERNAL_BREAKPOINT32; /* size: 0x0008 */

typedef struct _HEAP_SEGMENT
{
  /* 0x0000 */ struct _HEAP_ENTRY Entry;
  /* 0x0008 */ unsigned long SegmentSignature;
  /* 0x000c */ unsigned long SegmentFlags;
  /* 0x0010 */ struct _LIST_ENTRY SegmentListEntry;
  /* 0x0018 */ struct _HEAP* Heap;
  /* 0x001c */ void* BaseAddress;
  /* 0x0020 */ unsigned long NumberOfPages;
  /* 0x0024 */ struct _HEAP_ENTRY* FirstEntry;
  /* 0x0028 */ struct _HEAP_ENTRY* LastValidEntry;
  /* 0x002c */ unsigned long NumberOfUnCommittedPages;
  /* 0x0030 */ unsigned long NumberOfUnCommittedRanges;
  /* 0x0034 */ unsigned short SegmentAllocatorBackTraceIndex;
  /* 0x0036 */ unsigned short Reserved;
  /* 0x0038 */ struct _LIST_ENTRY UCRSegmentList;
} HEAP_SEGMENT, *PHEAP_SEGMENT; /* size: 0x0040 */

typedef struct _HEAP_LOCK
{
  union
  {
    union
    {
      /* 0x0000 */ struct _RTL_CRITICAL_SECTION CriticalSection;
      /* 0x0000 */ struct _ERESOURCE Resource;
    }; /* size: 0x0038 */
  } /* size: 0x0038 */ Lock;
} HEAP_LOCK, *PHEAP_LOCK; /* size: 0x0038 */

typedef struct _DBGKD_GET_VERSION32
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned short ProtocolVersion;
  /* 0x0006 */ unsigned short Flags;
  /* 0x0008 */ unsigned long KernBase;
  /* 0x000c */ unsigned long PsLoadedModuleList;
  /* 0x0010 */ unsigned short MachineType;
  /* 0x0012 */ unsigned short ThCallbackStack;
  /* 0x0014 */ unsigned short NextCallback;
  /* 0x0016 */ unsigned short FramePointer;
  /* 0x0018 */ unsigned long KiCallUserMode;
  /* 0x001c */ unsigned long KeUserCallbackDispatcher;
  /* 0x0020 */ unsigned long BreakpointWithStatus;
  /* 0x0024 */ unsigned long DebuggerDataList;
} DBGKD_GET_VERSION32, *PDBGKD_GET_VERSION32; /* size: 0x0028 */

typedef struct _DBGKD_MANIPULATE_STATE32
{
  /* 0x0000 */ unsigned long ApiNumber;
  /* 0x0004 */ unsigned short ProcessorLevel;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ long ReturnStatus;
  union
  {
    union
    {
      /* 0x000c */ struct _DBGKD_READ_MEMORY32 ReadMemory;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY32 WriteMemory;
      /* 0x000c */ struct _DBGKD_READ_MEMORY64 ReadMemory64;
      /* 0x000c */ struct _DBGKD_WRITE_MEMORY64 WriteMemory64;
      /* 0x000c */ struct _DBGKD_GET_CONTEXT GetContext;
      /* 0x000c */ struct _DBGKD_SET_CONTEXT SetContext;
      /* 0x000c */ struct _DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
      /* 0x000c */ struct _DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
      /* 0x000c */ struct _DBGKD_CONTINUE Continue;
      /* 0x000c */ struct _DBGKD_CONTINUE2 Continue2;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO32 ReadWriteIo;
      /* 0x000c */ struct _DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
      /* 0x000c */ struct _DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
      /* 0x000c */ struct _DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
      /* 0x000c */ struct _DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
      /* 0x000c */ struct _DBGKD_GET_VERSION32 GetVersion32;
      /* 0x000c */ struct _DBGKD_BREAKPOINTEX BreakPointEx;
      /* 0x000c */ struct _DBGKD_READ_WRITE_MSR ReadWriteMsr;
      /* 0x000c */ struct _DBGKD_SEARCH_MEMORY SearchMemory;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX GetContextEx;
      /* 0x000c */ struct _DBGKD_CONTEXT_EX SetContextEx;
    }; /* size: 0x0028 */
  } /* size: 0x0028 */ u;
} DBGKD_MANIPULATE_STATE32, *PDBGKD_MANIPULATE_STATE32; /* size: 0x0034 */

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Action;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long ParameterBlockOffset;
  /* 0x0010 */ unsigned long ParameterBlockLength;
  /* 0x0014 */ unsigned long DataSetRangesOffset;
  /* 0x0018 */ unsigned long DataSetRangesLength;
} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES; /* size: 0x001c */

typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Action;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long OperationStatus;
  /* 0x0010 */ unsigned long ExtendedError;
  /* 0x0014 */ unsigned long TargetDetailedError;
  /* 0x0018 */ unsigned long ReservedStatus;
  /* 0x001c */ unsigned long OutputBlockOffset;
  /* 0x0020 */ unsigned long OutputBlockLength;
} DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT; /* size: 0x0024 */

typedef struct _PEP_ACPI_IO_MEMORY_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ unsigned char Information;
  /* 0x0005 */ char Padding_276[3];
  /* 0x0008 */ union _LARGE_INTEGER MinimumAddress;
  /* 0x0010 */ union _LARGE_INTEGER MaximumAddress;
  /* 0x0018 */ unsigned long Alignment;
  /* 0x001c */ unsigned long Length;
} PEP_ACPI_IO_MEMORY_RESOURCE, *PPEP_ACPI_IO_MEMORY_RESOURCE; /* size: 0x0020 */

typedef struct _PEP_ACPI_INTERRUPT_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ enum _KINTERRUPT_MODE InterruptType;
  /* 0x0008 */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x000c */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0010 */ unsigned char Count;
  /* 0x0011 */ char Padding_277[3];
  /* 0x0014 */ unsigned long* Pins;
} PEP_ACPI_INTERRUPT_RESOURCE, *PPEP_ACPI_INTERRUPT_RESOURCE; /* size: 0x0018 */

typedef struct _PEP_ACPI_GPIO_RESOURCE
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ enum _KINTERRUPT_MODE InterruptType;
  /* 0x000c */ enum _KINTERRUPT_POLARITY InterruptPolarity;
  /* 0x0010 */ enum _GPIO_PIN_CONFIG_TYPE PinConfig;
  /* 0x0014 */ enum _GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType;
  /* 0x0018 */ unsigned short DriveStrength;
  /* 0x001a */ unsigned short DebounceTimeout;
  /* 0x001c */ wchar_t* PinTable;
  /* 0x0020 */ unsigned short PinCount;
  /* 0x0022 */ unsigned char ResourceSourceIndex;
  /* 0x0023 */ char Padding_278;
  /* 0x0024 */ struct _UNICODE_STRING* ResourceSourceName;
  /* 0x0028 */ unsigned char* VendorData;
  /* 0x002c */ unsigned short VendorDataLength;
  /* 0x002e */ char __PADDING__[2];
} PEP_ACPI_GPIO_RESOURCE, *PPEP_ACPI_GPIO_RESOURCE; /* size: 0x0030 */

typedef struct _PEP_ACPI_SPB_I2C_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0018 */ unsigned long ConnectionSpeed;
  /* 0x001c */ unsigned short SlaveAddress;
  /* 0x001e */ char __PADDING__[2];
} PEP_ACPI_SPB_I2C_RESOURCE, *PPEP_ACPI_SPB_I2C_RESOURCE; /* size: 0x0020 */

typedef struct _PEP_ACPI_SPB_SPI_RESOURCE
{
  /* 0x0000 */ struct _PEP_ACPI_SPB_RESOURCE SpbCommon;
  /* 0x0018 */ unsigned long ConnectionSpeed;
  /* 0x001c */ unsigned char DataBitLength;
  /* 0x001d */ unsigned char Phase;
  /* 0x001e */ unsigned char Polarity;
  /* 0x001f */ char Padding_279;
  /* 0x0020 */ unsigned short DeviceSelection;
  /* 0x0022 */ char __PADDING__[2];
} PEP_ACPI_SPB_SPI_RESOURCE, *PPEP_ACPI_SPB_SPI_RESOURCE; /* size: 0x0024 */

typedef struct _PEP_ACPI_EXTENDED_ADDRESS
{
  /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
  /* 0x0004 */ union _PEP_ACPI_RESOURCE_FLAGS Flags;
  /* 0x0008 */ unsigned char ResourceFlags;
  /* 0x0009 */ unsigned char GeneralFlags;
  /* 0x000a */ unsigned char TypeSpecificFlags;
  /* 0x000b */ unsigned char RevisionId;
  /* 0x000c */ unsigned char Reserved;
  /* 0x000d */ char Padding_280[3];
  /* 0x0010 */ unsigned __int64 Granularity;
  /* 0x0018 */ unsigned __int64 MinimumAddress;
  /* 0x0020 */ unsigned __int64 MaximumAddress;
  /* 0x0028 */ unsigned __int64 TranslationAddress;
  /* 0x0030 */ unsigned __int64 AddressLength;
  /* 0x0038 */ unsigned __int64 TypeAttribute;
  /* 0x0040 */ struct _UNICODE_STRING* DescriptorName;
  /* 0x0044 */ long __PADDING__[1];
} PEP_ACPI_EXTENDED_ADDRESS, *PPEP_ACPI_EXTENDED_ADDRESS; /* size: 0x0048 */

typedef union _PEP_ACPI_RESOURCE
{
  union
  {
    /* 0x0000 */ enum _PEP_ACPI_RESOURCE_TYPE Type;
    /* 0x0000 */ struct _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory;
    /* 0x0000 */ struct _PEP_ACPI_INTERRUPT_RESOURCE Interrupt;
    /* 0x0000 */ struct _PEP_ACPI_GPIO_RESOURCE Gpio;
    /* 0x0000 */ struct _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c;
    /* 0x0000 */ struct _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi;
    /* 0x0000 */ struct _PEP_ACPI_SPB_UART_RESOURCE SpbUart;
    /* 0x0000 */ struct _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress;
  }; /* size: 0x0048 */
} PEP_ACPI_RESOURCE, *PPEP_ACPI_RESOURCE; /* size: 0x0048 */

typedef union _PPM_COORDINATED_SYNCHRONIZATION
{
  union
  {
    /* 0x0000 */ long AsLong;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long EnterProcessor : 12; /* bit position: 0 */
      /* 0x0000 */ unsigned long ExitProcessor : 12; /* bit position: 12 */
      /* 0x0000 */ unsigned long Transition : 2; /* bit position: 24 */
      /* 0x0000 */ unsigned long Entered : 1; /* bit position: 26 */
      /* 0x0000 */ unsigned long EntryPriority : 5; /* bit position: 27 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PPM_COORDINATED_SYNCHRONIZATION, *PPPM_COORDINATED_SYNCHRONIZATION; /* size: 0x0004 */

typedef struct _PPM_PLATFORM_STATE
{
  /* 0x0000 */ unsigned __int64 LevelId;
  /* 0x0008 */ unsigned long Latency;
  /* 0x000c */ unsigned long BreakEvenDuration;
  /* 0x0010 */ struct _PPM_VETO_ACCOUNTING VetoAccounting;
  /* 0x0028 */ unsigned char TransitionDebugger;
  /* 0x0029 */ unsigned char Platform;
  /* 0x002a */ char Padding_281[2];
  /* 0x002c */ unsigned long DependencyListCount;
  /* 0x0030 */ struct _KAFFINITY_EX Processors;
  /* 0x003c */ struct _UNICODE_STRING Name;
  /* 0x0044 */ struct _PPM_SELECTION_DEPENDENCY* DependencyLists;
  /* 0x0048 */ volatile union _PPM_COORDINATED_SYNCHRONIZATION Synchronization;
  /* 0x004c */ long Padding_282;
  /* 0x0050 */ volatile unsigned __int64 EnterTime;
  /* 0x0058 */ long Padding_283[10];
  union
  {
    /* 0x0080 */ volatile long RefCount;
    /* 0x0080 */ unsigned char CacheAlign0[64];
  }; /* size: 0x0040 */
} PPM_PLATFORM_STATE, *PPPM_PLATFORM_STATE; /* size: 0x00c0 */

typedef struct _PPM_PLATFORM_STATES
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long InterfaceVersion;
  /* 0x0008 */ unsigned long ProcessorCount;
  /* 0x000c */ unsigned char CoordinatedInterface;
  /* 0x000d */ char Padding_284[3];
  /* 0x0010 */ void* IdleTest /* function */;
  /* 0x0014 */ void* IdlePreExecute /* function */;
  /* 0x0018 */ void* IdleComplete /* function */;
  /* 0x001c */ void* QueryPlatformStateResidency /* function */;
  /* 0x0020 */ struct _PLATFORM_IDLE_ACCOUNTING* Accounting;
  /* 0x0024 */ unsigned char DeepSleepEnabled;
  /* 0x0025 */ char Padding_285[27];
  /* 0x0040 */ struct _PPM_PLATFORM_STATE State[1];
} PPM_PLATFORM_STATES, *PPPM_PLATFORM_STATES; /* size: 0x0100 */

typedef struct _HAL_HV_SVM_DEVICE_CAPABILITIES
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long SvmSupported : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long PciExecute : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long NoExecute : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long Reserved : 28; /* bit position: 3 */
    /* 0x0000 */ unsigned long OverflowPossible : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long PasidCount;
  /* 0x0008 */ unsigned long IommuIndex;
} HAL_HV_SVM_DEVICE_CAPABILITIES, *PHAL_HV_SVM_DEVICE_CAPABILITIES; /* size: 0x000c */

typedef struct _HAL_HV_SVM_SYSTEM_CAPABILITIES
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long SvmSupported : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long GpaAlwaysValid : 1; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long MaxPasidSpaceCount;
  /* 0x0008 */ unsigned long MaxPasidSpacePasidCount;
  /* 0x000c */ unsigned long MaxPrqSize;
  /* 0x0010 */ unsigned long IommuCount;
  /* 0x0014 */ unsigned long MinIommuPasidCount;
} HAL_HV_SVM_SYSTEM_CAPABILITIES, *PHAL_HV_SVM_SYSTEM_CAPABILITIES; /* size: 0x0018 */

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCY
{
  /* 0x0000 */ unsigned __int64 Residency;
  /* 0x0008 */ unsigned __int64 TransitionCount;
} PROCESSOR_PLATFORM_STATE_RESIDENCY, *PPROCESSOR_PLATFORM_STATE_RESIDENCY; /* size: 0x0010 */

typedef struct _PROCESSOR_PLATFORM_STATE_RESIDENCIES
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_286;
  /* 0x0008 */ struct _PROCESSOR_PLATFORM_STATE_RESIDENCY States[1];
} PROCESSOR_PLATFORM_STATE_RESIDENCIES, *PPROCESSOR_PLATFORM_STATE_RESIDENCIES; /* size: 0x0018 */

typedef struct _PLATFORM_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned long CancelCount;
  /* 0x0004 */ unsigned long FailureCount;
  /* 0x0008 */ unsigned long SuccessCount;
  /* 0x000c */ long Padding_287;
  /* 0x0010 */ unsigned __int64 MaxTime;
  /* 0x0018 */ unsigned __int64 MinTime;
  /* 0x0020 */ unsigned __int64 TotalTime;
  /* 0x0028 */ unsigned long InvalidBucketIndex;
  /* 0x002c */ long Padding_288;
  /* 0x0030 */ struct _PPM_SELECTION_STATISTICS SelectionStatistics;
  /* 0x00b0 */ struct _PROC_IDLE_STATE_BUCKET IdleTimeBuckets[26];
} PLATFORM_IDLE_STATE_ACCOUNTING, *PPLATFORM_IDLE_STATE_ACCOUNTING; /* size: 0x03f0 */

typedef struct _PLATFORM_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long ResetCount;
  /* 0x0004 */ unsigned long StateCount;
  /* 0x0008 */ unsigned long DeepSleepCount;
  /* 0x000c */ enum PPM_IDLE_BUCKET_TIME_TYPE TimeUnit;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ struct _PLATFORM_IDLE_STATE_ACCOUNTING State[1];
} PLATFORM_IDLE_ACCOUNTING, *PPLATFORM_IDLE_ACCOUNTING; /* size: 0x0408 */

typedef union _HEAP_VS_CHUNK_HEADER_SIZE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long MemoryCost : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long UnsafeSize : 15; /* bit position: 1 */
      /* 0x0000 */ unsigned long UnsafePrevSize : 15; /* bit position: 16 */
      /* 0x0000 */ unsigned long Allocated : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ unsigned short KeyUShort;
    /* 0x0000 */ unsigned long KeyULong;
    /* 0x0000 */ unsigned long HeaderBits;
  }; /* size: 0x0004 */
} HEAP_VS_CHUNK_HEADER_SIZE, *PHEAP_VS_CHUNK_HEADER_SIZE; /* size: 0x0004 */

typedef struct _HEAP_VS_CHUNK_HEADER
{
  /* 0x0000 */ union _HEAP_VS_CHUNK_HEADER_SIZE Sizes;
  union
  {
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long EncodedSegmentPageOffset : 8; /* bit position: 0 */
      /* 0x0004 */ unsigned long UnusedBytes : 1; /* bit position: 8 */
      /* 0x0004 */ unsigned long SkipDuringWalk : 1; /* bit position: 9 */
      /* 0x0004 */ unsigned long Spare : 22; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0004 */ unsigned long AllocatedChunkBits;
  }; /* size: 0x0004 */
} HEAP_VS_CHUNK_HEADER, *PHEAP_VS_CHUNK_HEADER; /* size: 0x0008 */

typedef struct _HEAP_VS_CHUNK_FREE_HEADER
{
  union
  {
    /* 0x0000 */ struct _HEAP_VS_CHUNK_HEADER Header;
    struct
    {
      /* 0x0000 */ unsigned long OverlapsHeader;
      /* 0x0004 */ struct _RTL_BALANCED_NODE Node;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} HEAP_VS_CHUNK_FREE_HEADER, *PHEAP_VS_CHUNK_FREE_HEADER; /* size: 0x0010 */

typedef struct _POP_CPU_INFO
{
  /* 0x0000 */ unsigned long Eax;
  /* 0x0004 */ unsigned long Ebx;
  /* 0x0008 */ unsigned long Ecx;
  /* 0x000c */ unsigned long Edx;
} POP_CPU_INFO, *PPOP_CPU_INFO; /* size: 0x0010 */

typedef struct _HEAP_DESCRIPTOR_KEY
{
  union
  {
    /* 0x0000 */ unsigned long Key;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Ignore : 8; /* bit position: 0 */
      /* 0x0000 */ unsigned long EncodedCommittedPageCount : 16; /* bit position: 8 */
      /* 0x0000 */ unsigned long UnitCount : 8; /* bit position: 24 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} HEAP_DESCRIPTOR_KEY, *PHEAP_DESCRIPTOR_KEY; /* size: 0x0004 */

typedef struct _POP_PPM_PROFILE
{
  /* 0x0000 */ wchar_t* Name;
  /* 0x0004 */ unsigned char Id;
  /* 0x0005 */ char Padding_289[3];
  /* 0x0008 */ struct _GUID Guid;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ unsigned char Priority;
  /* 0x001d */ char Padding_290[3];
  /* 0x0020 */ struct _PPM_ENGINE_SETTINGS Settings[2];
  /* 0x0200 */ unsigned __int64 StartTime;
  /* 0x0208 */ unsigned __int64 Count;
  /* 0x0210 */ unsigned __int64 MaxDuration;
  /* 0x0218 */ unsigned __int64 MinDuration;
  /* 0x0220 */ unsigned __int64 TotalDuration;
} POP_PPM_PROFILE, *PPOP_PPM_PROFILE; /* size: 0x0228 */

typedef struct _PCAT_FIRMWARE_INFORMATION
{
  /* 0x0000 */ unsigned long PlaceHolder;
} PCAT_FIRMWARE_INFORMATION, *PPCAT_FIRMWARE_INFORMATION; /* size: 0x0004 */

typedef struct _HEAP_PAGE_RANGE_DESCRIPTOR
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
    struct
    {
      /* 0x0000 */ unsigned long TreeSignature;
      /* 0x0004 */ unsigned long UnusedBytes;
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned short ExtraPresent : 1; /* bit position: 0 */
        /* 0x0008 */ unsigned short Spare0 : 15; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x000a */
  }; /* size: 0x000c */
  union
  {
    /* 0x000c */ volatile unsigned char RangeFlags;
    struct /* bitfield */
    {
      /* 0x000c */ unsigned char RangeFlagBits : 5; /* bit position: 0 */
      /* 0x000c */ unsigned char CommittedPageCount : 3; /* bit position: 5 */
    }; /* bitfield */
    /* 0x000c */ struct _HEAP_DESCRIPTOR_KEY Key;
    struct
    {
      /* 0x000c */ unsigned char Align[3];
      union
      {
        /* 0x000f */ unsigned char UnitOffset;
        /* 0x000f */ unsigned char UnitSize;
      }; /* size: 0x0001 */
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} HEAP_PAGE_RANGE_DESCRIPTOR, *PHEAP_PAGE_RANGE_DESCRIPTOR; /* size: 0x0010 */

typedef struct _HEAP_LIST_LOOKUP
{
  /* 0x0000 */ struct _HEAP_LIST_LOOKUP* ExtendedLookup;
  /* 0x0004 */ unsigned long ArraySize;
  /* 0x0008 */ unsigned long ExtraItem;
  /* 0x000c */ unsigned long ItemCount;
  /* 0x0010 */ unsigned long OutOfRangeItems;
  /* 0x0014 */ unsigned long BaseIndex;
  /* 0x0018 */ struct _LIST_ENTRY* ListHead;
  /* 0x001c */ unsigned long* ListsInUseUlong;
  /* 0x0020 */ struct _LIST_ENTRY** ListHints;
} HEAP_LIST_LOOKUP, *PHEAP_LIST_LOOKUP; /* size: 0x0024 */

typedef struct _KALPC_REGION
{
  /* 0x0000 */ struct _LIST_ENTRY RegionListEntry;
  /* 0x0008 */ struct _KALPC_SECTION* Section;
  /* 0x000c */ unsigned long Offset;
  /* 0x0010 */ unsigned long Size;
  /* 0x0014 */ unsigned long ViewSize;
  union
  {
    struct
    {
      /* 0x0018 */ unsigned long Secure : 1; /* bit position: 0 */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x001c */ unsigned long NumberOfViews;
  /* 0x0020 */ struct _LIST_ENTRY ViewListHead;
  /* 0x0028 */ struct _KALPC_VIEW* ReadOnlyView;
  /* 0x002c */ struct _KALPC_VIEW* ReadWriteView;
} KALPC_REGION, *PKALPC_REGION; /* size: 0x0030 */

typedef struct _DIRTY_PAGE_THRESHOLDS
{
  /* 0x0000 */ unsigned long DirtyPageThreshold;
  /* 0x0004 */ unsigned long DirtyPageThresholdTop;
  /* 0x0008 */ unsigned long DirtyPageThresholdBottom;
  /* 0x000c */ unsigned long DirtyPageTarget;
  /* 0x0010 */ unsigned __int64 AggregateAvailablePages;
  /* 0x0018 */ unsigned __int64 AggregateDirtyPages;
  /* 0x0020 */ unsigned long AvailableHistory;
  /* 0x0024 */ long __PADDING__[1];
} DIRTY_PAGE_THRESHOLDS, *PDIRTY_PAGE_THRESHOLDS; /* size: 0x0028 */

typedef struct _LOG_HANDLE_CONTEXT
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0004 */ void* FlushToLsnRoutine /* function */;
  /* 0x0008 */ void* QueryLogHandleInfoRoutine /* function */;
  /* 0x000c */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x0018 */ struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  /* 0x0040 */ unsigned long AdditionalPagesToWrite;
  /* 0x0044 */ unsigned long CcLWScanDPThreshold;
  /* 0x0048 */ union _LARGE_INTEGER LargestLsnForCurrentLWScan;
  /* 0x0050 */ struct _FILE_OBJECT* RelatedFileObject;
  /* 0x0054 */ unsigned long LargestLsnFileObjectKey;
  /* 0x0058 */ union _LARGE_INTEGER LastLWTimeStamp;
  /* 0x0060 */ unsigned long Flags;
  /* 0x0064 */ long __PADDING__[1];
} LOG_HANDLE_CONTEXT, *PLOG_HANDLE_CONTEXT; /* size: 0x0068 */

typedef struct _VOLUME_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteCode;
  /* 0x0004 */ unsigned long UseCount;
  /* 0x0008 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x000c */ struct _LIST_ENTRY VolumeCacheMapLinks;
  /* 0x0014 */ unsigned long DirtyPages;
  /* 0x0018 */ struct _LOG_HANDLE_CONTEXT LogHandleContext;
  /* 0x0080 */ unsigned long Flags;
  /* 0x0084 */ unsigned long PagesQueuedToDisk;
  /* 0x0088 */ unsigned long LoggedPagesQueuedToDisk;
  /* 0x008c */ long Padding_291;
  /* 0x0090 */ struct _CC_VOLUME_TELEMETRY VolumeTelemetry;
} VOLUME_CACHE_MAP, *PVOLUME_CACHE_MAP; /* size: 0x09d0 */

typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 ProcessorType : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 InstructionSet : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 ErrorType : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 Operation : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 Flags : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Level : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 CPUVersion : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 CPUBrandString : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 ProcessorId : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 TargetAddress : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 RequesterId : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 ResponderId : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 InstructionPointer : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 Reserved : 51; /* bit position: 13 */
    }; /* bitfield */
    /* 0x0000 */ unsigned __int64 ValidBits;
  }; /* size: 0x0008 */
} WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS, *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS; /* size: 0x0008 */

typedef struct _LOGGED_STREAM_CALLBACK_V1
{
  /* 0x0000 */ void* LogHandle;
  /* 0x0004 */ void* FlushToLsnRoutine /* function */;
} LOGGED_STREAM_CALLBACK_V1, *PLOGGED_STREAM_CALLBACK_V1; /* size: 0x0008 */

typedef struct _LOGGED_STREAM_CALLBACK_V2
{
  /* 0x0000 */ struct _LOG_HANDLE_CONTEXT* LogHandleContext;
} LOGGED_STREAM_CALLBACK_V2, *PLOGGED_STREAM_CALLBACK_V2; /* size: 0x0004 */

typedef struct _PRIVATE_CACHE_MAP_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long DontUse : 16; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadAheadActive : 1; /* bit position: 16 */
    /* 0x0000 */ unsigned long ReadAheadEnabled : 1; /* bit position: 17 */
    /* 0x0000 */ unsigned long PagePriority : 3; /* bit position: 18 */
    /* 0x0000 */ unsigned long PipelineReadAheads : 1; /* bit position: 21 */
    /* 0x0000 */ unsigned long Available : 10; /* bit position: 22 */
  }; /* bitfield */
} PRIVATE_CACHE_MAP_FLAGS, *PPRIVATE_CACHE_MAP_FLAGS; /* size: 0x0004 */

typedef struct _PRIVATE_CACHE_MAP
{
  union
  {
    /* 0x0000 */ short NodeTypeCode;
    /* 0x0000 */ struct _PRIVATE_CACHE_MAP_FLAGS Flags;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long ReadAheadMask;
  /* 0x0008 */ struct _FILE_OBJECT* FileObject;
  /* 0x000c */ long Padding_292;
  /* 0x0010 */ union _LARGE_INTEGER FileOffset1;
  /* 0x0018 */ union _LARGE_INTEGER BeyondLastByte1;
  /* 0x0020 */ union _LARGE_INTEGER FileOffset2;
  /* 0x0028 */ union _LARGE_INTEGER BeyondLastByte2;
  /* 0x0030 */ unsigned long SequentialReadCount;
  /* 0x0034 */ unsigned long ReadAheadLength;
  /* 0x0038 */ union _LARGE_INTEGER ReadAheadOffset;
  /* 0x0040 */ union _LARGE_INTEGER ReadAheadBeyondLastByte;
  /* 0x0048 */ unsigned __int64 PrevReadAheadBeyondLastByte;
  /* 0x0050 */ unsigned long ReadAheadSpinLock;
  /* 0x0054 */ unsigned long PipelinedReadAheadRequestSize;
  /* 0x0058 */ unsigned long ReadAheadGrowth;
  /* 0x005c */ struct _LIST_ENTRY PrivateLinks;
  /* 0x0064 */ void* ReadAheadWorkItem;
} PRIVATE_CACHE_MAP, *PPRIVATE_CACHE_MAP; /* size: 0x0068 */

typedef struct _SHARED_CACHE_MAP
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ unsigned long OpenCount;
  /* 0x0008 */ union _LARGE_INTEGER FileSize;
  /* 0x0010 */ struct _LIST_ENTRY BcbList;
  /* 0x0018 */ union _LARGE_INTEGER SectionSize;
  /* 0x0020 */ union _LARGE_INTEGER ValidDataLength;
  /* 0x0028 */ union _LARGE_INTEGER ValidDataGoal;
  /* 0x0030 */ struct _VACB* InitialVacbs[4];
  /* 0x0040 */ struct _VACB** Vacbs;
  /* 0x0044 */ struct _EX_FAST_REF FileObjectFastRef;
  /* 0x0048 */ struct _EX_PUSH_LOCK VacbLock;
  /* 0x004c */ unsigned long DirtyPages;
  /* 0x0050 */ struct _LIST_ENTRY LoggedStreamLinks;
  /* 0x0058 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0060 */ unsigned long Flags;
  /* 0x0064 */ long Status;
  /* 0x0068 */ struct _MBCB* Mbcb;
  /* 0x006c */ void* Section;
  /* 0x0070 */ struct _KEVENT* CreateEvent;
  /* 0x0074 */ struct _KEVENT* WaitOnActiveCount;
  /* 0x0078 */ unsigned long PagesToWrite;
  /* 0x007c */ long Padding_293;
  /* 0x0080 */ __int64 BeyondLastFlush;
  /* 0x0088 */ struct _CACHE_MANAGER_CALLBACKS* Callbacks;
  /* 0x008c */ void* LazyWriteContext;
  /* 0x0090 */ struct _LIST_ENTRY PrivateList;
  union
  {
    /* 0x0098 */ struct _LOGGED_STREAM_CALLBACK_V1 V1;
    /* 0x0098 */ struct _LOGGED_STREAM_CALLBACK_V2 V2;
  }; /* size: 0x0008 */
  /* 0x00a0 */ union _LARGE_INTEGER LargestLSN;
  /* 0x00a8 */ unsigned long DirtyPageThreshold;
  /* 0x00ac */ unsigned long LazyWritePassCount;
  /* 0x00b0 */ struct _CACHE_UNINITIALIZE_EVENT* UninitializeEvent;
  /* 0x00b4 */ struct _FAST_MUTEX BcbLock;
  /* 0x00d4 */ long Padding_294;
  /* 0x00d8 */ union _LARGE_INTEGER LastUnmapBehindOffset;
  /* 0x00e0 */ struct _KEVENT Event;
  /* 0x00f0 */ union _LARGE_INTEGER HighWaterMappingOffset;
  /* 0x00f8 */ struct _PRIVATE_CACHE_MAP PrivateCacheMap;
  /* 0x0160 */ void* WriteBehindWorkQueueEntry;
  /* 0x0164 */ struct _VOLUME_CACHE_MAP* VolumeCacheMap;
  /* 0x0168 */ unsigned long ProcImagePathHash;
  /* 0x016c */ unsigned long WritesInProgress;
  /* 0x0170 */ unsigned long AsyncReadRequestCount;
  /* 0x0174 */ struct _CC_PARTITION* Partition;
  /* 0x0178 */ unsigned long InternalRefCount;
  /* 0x017c */ unsigned long NumMappedVacb;
  /* 0x0180 */ unsigned long NumActiveVacb;
  /* 0x0184 */ long __PADDING__[1];
} SHARED_CACHE_MAP, *PSHARED_CACHE_MAP; /* size: 0x0188 */

typedef struct _HEAP_COUNTERS
{
  /* 0x0000 */ unsigned long TotalMemoryReserved;
  /* 0x0004 */ unsigned long TotalMemoryCommitted;
  /* 0x0008 */ unsigned long TotalMemoryLargeUCR;
  /* 0x000c */ unsigned long TotalSizeInVirtualBlocks;
  /* 0x0010 */ unsigned long TotalSegments;
  /* 0x0014 */ unsigned long TotalUCRs;
  /* 0x0018 */ unsigned long CommittOps;
  /* 0x001c */ unsigned long DeCommitOps;
  /* 0x0020 */ unsigned long LockAcquires;
  /* 0x0024 */ unsigned long LockCollisions;
  /* 0x0028 */ unsigned long CommitRate;
  /* 0x002c */ unsigned long DecommittRate;
  /* 0x0030 */ unsigned long CommitFailures;
  /* 0x0034 */ unsigned long InBlockCommitFailures;
  /* 0x0038 */ unsigned long PollIntervalCounter;
  /* 0x003c */ unsigned long DecommitsSinceLastCheck;
  /* 0x0040 */ unsigned long HeapPollInterval;
  /* 0x0044 */ unsigned long AllocAndFreeOps;
  /* 0x0048 */ unsigned long AllocationIndicesActive;
  /* 0x004c */ unsigned long InBlockDeccommits;
  /* 0x0050 */ unsigned long InBlockDeccomitSize;
  /* 0x0054 */ unsigned long HighWatermarkSize;
  /* 0x0058 */ unsigned long LastPolledSize;
} HEAP_COUNTERS, *PHEAP_COUNTERS; /* size: 0x005c */

typedef struct _BITMAP_RANGE
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ __int64 BasePage;
  /* 0x0010 */ unsigned long FirstDirtyPage;
  /* 0x0014 */ unsigned long LastDirtyPage;
  /* 0x0018 */ unsigned long DirtyPages;
  /* 0x001c */ unsigned long* Bitmap;
} BITMAP_RANGE, *PBITMAP_RANGE; /* size: 0x0020 */

typedef struct _MBCB
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeIsInZone;
  /* 0x0004 */ unsigned long PagesToWrite;
  /* 0x0008 */ unsigned long DirtyPages;
  /* 0x000c */ unsigned long Reserved;
  /* 0x0010 */ struct _LIST_ENTRY BitmapRanges;
  /* 0x0018 */ __int64 ResumeWritePage;
  /* 0x0020 */ __int64 MostRecentlyDirtiedPage;
  /* 0x0028 */ struct _BITMAP_RANGE BitmapRange1;
  /* 0x0048 */ struct _BITMAP_RANGE BitmapRange2;
  /* 0x0068 */ struct _BITMAP_RANGE BitmapRange3;
} MBCB, *PMBCB; /* size: 0x0088 */

typedef struct _CACHE_MANAGER_CALLBACKS
{
  /* 0x0000 */ void* AcquireForLazyWrite /* function */;
  /* 0x0004 */ void* ReleaseFromLazyWrite /* function */;
  /* 0x0008 */ void* AcquireForReadAhead /* function */;
  /* 0x000c */ void* ReleaseFromReadAhead /* function */;
} CACHE_MANAGER_CALLBACKS, *PCACHE_MANAGER_CALLBACKS; /* size: 0x0010 */

typedef struct _HEAP_LFH_AFFINITY_SLOT
{
  /* 0x0000 */ struct _HEAP_LFH_SUBSEGMENT_OWNER State;
  /* 0x001c */ struct _HEAP_LFH_FAST_REF ActiveSubsegment;
} HEAP_LFH_AFFINITY_SLOT, *PHEAP_LFH_AFFINITY_SLOT; /* size: 0x0020 */

typedef struct _CACHE_UNINITIALIZE_EVENT
{
  /* 0x0000 */ struct _CACHE_UNINITIALIZE_EVENT* Next;
  /* 0x0004 */ struct _KEVENT Event;
} CACHE_UNINITIALIZE_EVENT, *PCACHE_UNINITIALIZE_EVENT; /* size: 0x0014 */

typedef struct _RTL_SRWLOCK
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Locked : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Waiting : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Waking : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long MultipleShared : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Shared : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Value;
    /* 0x0000 */ void* Ptr;
  }; /* size: 0x0004 */
} RTL_SRWLOCK, *PRTL_SRWLOCK; /* size: 0x0004 */

typedef struct _SHARED_CACHE_MAP_LIST_CURSOR
{
  /* 0x0000 */ struct _LIST_ENTRY SharedCacheMapLinks;
  /* 0x0008 */ unsigned long Flags;
} SHARED_CACHE_MAP_LIST_CURSOR, *PSHARED_CACHE_MAP_LIST_CURSOR; /* size: 0x000c */

typedef struct _LAZY_WRITER
{
  /* 0x0000 */ struct _KDPC ScanDpc;
  /* 0x0020 */ struct _KTIMER ScanTimer;
  /* 0x0048 */ unsigned char ScanActive;
  /* 0x0049 */ unsigned char OtherWork;
  /* 0x004a */ unsigned char PendingTeardownScan;
  /* 0x004b */ unsigned char PendingPeriodicScan;
  /* 0x004c */ unsigned char PendingLowMemoryScan;
  /* 0x004d */ unsigned char PendingPowerScan;
  /* 0x004e */ unsigned char PendingCoalescingFlushScan;
  /* 0x004f */ char __PADDING__[1];
} LAZY_WRITER, *PLAZY_WRITER; /* size: 0x0050 */

typedef struct _CC_PARTITION
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NodeByteSize;
  /* 0x0004 */ struct _EPARTITION* PartitionObject;
  /* 0x0008 */ struct _LIST_ENTRY CleanSharedCacheMapList;
  /* 0x0010 */ struct _LIST_ENTRY CleanSharedCacheMapWithLogHandleList;
  /* 0x0018 */ struct _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList;
  /* 0x0024 */ struct _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor;
  /* 0x0030 */ struct _LIST_ENTRY DirtySharedCacheMapWithLogHandleList;
  /* 0x0038 */ long Padding_295[2];
  /* 0x0040 */ unsigned long PrivateLock;
  /* 0x0044 */ unsigned long ConsecutiveWorklessLazyScanCount;
  /* 0x0048 */ unsigned char ForcedDisableLazywriteScan;
  /* 0x0049 */ char Padding_296[55];
  /* 0x0080 */ unsigned long WorkQueueLock;
  /* 0x0084 */ unsigned long NumberWorkerThreads;
  /* 0x0088 */ unsigned long NumberActiveWorkerThreads;
  /* 0x008c */ struct _LIST_ENTRY IdleWorkerThreadList;
  /* 0x0094 */ struct _LIST_ENTRY FastTeardownWorkQueue;
  /* 0x009c */ struct _LIST_ENTRY ExpressWorkQueue;
  /* 0x00a4 */ struct _LIST_ENTRY RegularWorkQueue;
  /* 0x00ac */ struct _LIST_ENTRY PostTickWorkQueue;
  /* 0x00b4 */ struct _LIST_ENTRY CleanCachemapUninitWorkQueue;
  /* 0x00bc */ struct _LIST_ENTRY IdleExtraWriteBehindThreadList;
  /* 0x00c4 */ unsigned long ActiveExtraWriteBehindThreads;
  /* 0x00c8 */ unsigned long MaxExtraWriteBehindThreads;
  /* 0x00cc */ struct _LIST_ENTRY IdleCacheMapUninitThreadList;
  /* 0x00d4 */ unsigned long ActiveCacheMapUninitThreads;
  /* 0x00d8 */ unsigned long MaxCacheMapUninitThreads;
  /* 0x00dc */ unsigned char QueueThrottle;
  /* 0x00dd */ char Padding_297[3];
  /* 0x00e0 */ unsigned long PostTickWorkItemCount;
  /* 0x00e4 */ unsigned long ThreadsActiveBeforeThrottle;
  /* 0x00e8 */ unsigned long ExtraWBThreadsActiveBeforeThrottle;
  /* 0x00ec */ unsigned long ExecutingWriteBehindWorkItems;
  /* 0x00f0 */ unsigned long ExecutingHighPriorityWorkItem;
  /* 0x00f4 */ struct _KEVENT LowMemoryEvent;
  /* 0x0104 */ struct _KEVENT PowerEvent;
  /* 0x0114 */ struct _KEVENT PeriodicEvent;
  /* 0x0124 */ struct _KEVENT WaitingForTeardownEvent;
  /* 0x0134 */ struct _KEVENT CoalescingFlushEvent;
  /* 0x0144 */ unsigned long PagesYetToWrite;
  /* 0x0148 */ struct _LAZY_WRITER LazyWriter;
  /* 0x0198 */ struct _DIRTY_PAGE_STATISTICS DirtyPageStatistics;
  /* 0x01a4 */ long Padding_298;
  /* 0x01a8 */ struct _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds;
  /* 0x01d0 */ struct _WRITE_BEHIND_THROUGHPUT* ThroughputStats;
  /* 0x01d4 */ long ThroughputTrend;
  /* 0x01d8 */ unsigned __int64 AverageAvailablePages;
  /* 0x01e0 */ unsigned __int64 AverageDirtyPages;
  /* 0x01e8 */ unsigned __int64 PagesSkippedDueToHotSpot;
  /* 0x01f0 */ union _LARGE_INTEGER PrevRegularQueueItemRunTime;
  /* 0x01f8 */ union _LARGE_INTEGER PrevExtraWBThreadCheckTime;
  /* 0x0200 */ unsigned char AddExtraWriteBehindThreads;
  /* 0x0201 */ unsigned char RemoveExtraThreadPending;
  /* 0x0202 */ char Padding_299[2];
  /* 0x0204 */ struct _LIST_ENTRY DeferredWrites;
  /* 0x020c */ long Padding_300[13];
  /* 0x0240 */ unsigned long DeferredWriteSpinLock;
  /* 0x0244 */ struct _LIST_ENTRY* IdleAsyncReadWorkerThreadList;
  /* 0x0248 */ unsigned long* NumberActiveAsyncReadWorkerThreads;
  /* 0x024c */ unsigned long* NumberActiveCompleteAsyncReadWorkItems;
  /* 0x0250 */ struct _LIST_ENTRY* AsyncReadWorkQueue;
  /* 0x0254 */ struct _LIST_ENTRY* AsyncReadCompletionWorkQueue;
  /* 0x0258 */ struct _KEVENT* NewAsyncReadRequestEvent;
  /* 0x025c */ struct _ASYNC_READ_THREAD_STATS* ReaderThreadsStats;
  /* 0x0260 */ struct _EX_PUSH_LOCK AsyncReadWorkQueueLock;
  /* 0x0264 */ struct _LIST_ENTRY VacbFreeHighPriorityList;
  /* 0x026c */ unsigned long NumberOfFreeHighPriorityVacbs;
  /* 0x0270 */ struct _ETHREAD* LowPriWorkerThread;
  /* 0x0274 */ struct _SHARED_CACHE_MAP* LowPriSharedCacheMap;
  /* 0x0278 */ long LowPriOldCpuPriority;
  /* 0x027c */ enum _IO_PRIORITY_HINT LowPriOldIoPriority;
  /* 0x0280 */ struct _EX_PUSH_LOCK LowPriorityWorkerThreadLock;
  /* 0x0284 */ unsigned long MaxNumberOfWriteBehindThreads;
  /* 0x0288 */ unsigned char CoalescingState;
  /* 0x0289 */ unsigned char ActivePartition;
  /* 0x028a */ unsigned char RundownPhase;
  /* 0x028b */ char Padding_301;
  /* 0x028c */ long RefCount;
  /* 0x0290 */ struct _KEVENT ExitEvent;
  /* 0x02a0 */ struct _KEVENT FinalDereferenceEvent;
  /* 0x02b0 */ void* LazyWriteScanThreadHandle;
  /* 0x02b4 */ long __PADDING__[3];
} CC_PARTITION, *PCC_PARTITION; /* size: 0x02c0 */

typedef struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short BlockSize;
      /* 0x0002 */ unsigned short FirstBlockOffset;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long EncodedData;
  }; /* size: 0x0004 */
} HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS, *PHEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS; /* size: 0x0004 */

typedef struct _ARM_LOADER_BLOCK
{
  /* 0x0000 */ unsigned long PlaceHolder;
} ARM_LOADER_BLOCK, *PARM_LOADER_BLOCK; /* size: 0x0004 */

typedef struct _WRITE_BEHIND_THROUGHPUT
{
  /* 0x0000 */ unsigned long PagesYetToWrite;
  /* 0x0004 */ unsigned long Throughput;
} WRITE_BEHIND_THROUGHPUT, *PWRITE_BEHIND_THROUGHPUT; /* size: 0x0008 */

typedef struct _HEAP_LFH_UNUSED_BYTES_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UnusedBytes : 14; /* bit position: 0 */
      /* 0x0000 */ unsigned short ExtraPresent : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short OneByteUnused : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char Bytes[2];
  }; /* size: 0x0002 */
} HEAP_LFH_UNUSED_BYTES_INFO, *PHEAP_LFH_UNUSED_BYTES_INFO; /* size: 0x0002 */

typedef struct _ASYNC_READ_THREAD_STATS
{
  /* 0x0000 */ unsigned long CurrentLoad[101];
} ASYNC_READ_THREAD_STATS, *PASYNC_READ_THREAD_STATS; /* size: 0x0194 */

typedef struct _I386_LOADER_BLOCK
{
  /* 0x0000 */ void* CommonDataArea;
  /* 0x0004 */ unsigned long MachineType;
  /* 0x0008 */ unsigned long VirtualBias;
} I386_LOADER_BLOCK, *PI386_LOADER_BLOCK; /* size: 0x000c */

typedef struct _CC_ASYNC_READ_CONTEXT
{
  /* 0x0000 */ void* CompletionRoutine /* function */;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ struct _MDL* Mdl;
  /* 0x000c */ char RequestorMode;
  /* 0x000d */ char Padding_302[3];
  /* 0x0010 */ unsigned long NestingLevel;
} CC_ASYNC_READ_CONTEXT, *PCC_ASYNC_READ_CONTEXT; /* size: 0x0014 */

struct VACB_LEVEL_ALLOCATION_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY VacbLevelList;
  /* 0x0008 */ void* VacbLevelWithBcbListHeads;
  /* 0x000c */ unsigned long VacbLevelsAllocated;
}; /* size: 0x0010 */

typedef struct _VACB_LEVEL_REFERENCE
{
  /* 0x0000 */ long Reference;
  /* 0x0004 */ long SpecialReference;
} VACB_LEVEL_REFERENCE, *PVACB_LEVEL_REFERENCE; /* size: 0x0008 */

typedef struct _ARBITER_ORDERING
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
} ARBITER_ORDERING, *PARBITER_ORDERING; /* size: 0x0010 */

typedef struct _ARBITER_PARAMETERS
{
  union
  {
    union
    {
      /* 0x0000 */ struct _ARBITER_TEST_ALLOCATION_PARAMETERS TestAllocation;
      /* 0x0000 */ struct _ARBITER_RETEST_ALLOCATION_PARAMETERS RetestAllocation;
      /* 0x0000 */ struct _ARBITER_BOOT_ALLOCATION_PARAMETERS BootAllocation;
      /* 0x0000 */ struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS QueryAllocatedResources;
      /* 0x0000 */ struct _ARBITER_QUERY_CONFLICT_PARAMETERS QueryConflict;
      /* 0x0000 */ struct _ARBITER_QUERY_ARBITRATE_PARAMETERS QueryArbitrate;
      /* 0x0000 */ struct _ARBITER_ADD_RESERVED_PARAMETERS AddReserved;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Parameters;
} ARBITER_PARAMETERS, *PARBITER_PARAMETERS; /* size: 0x0010 */

typedef struct _HEAP_VAMGR_RANGE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE RbNode;
    /* 0x0000 */ struct _SINGLE_LIST_ENTRY Next;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned char Allocated : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned char Internal : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned char Standalone : 1; /* bit position: 2 */
        /* 0x0000 */ unsigned char Spare0 : 5; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0001 */ unsigned char AllocatorIndex;
      /* 0x0002 */ char Padding_303[2];
      /* 0x0004 */ unsigned long OwnerCtx[2];
    }; /* size: 0x000a */
  }; /* size: 0x000c */
  union
  {
    /* 0x000c */ unsigned long SizeInChunks;
    struct
    {
      /* 0x000c */ unsigned short ChunkCount;
      /* 0x000e */ unsigned short PrevChunkCount;
    }; /* size: 0x0004 */
    /* 0x000c */ unsigned long Signature;
  }; /* size: 0x0004 */
} HEAP_VAMGR_RANGE, *PHEAP_VAMGR_RANGE; /* size: 0x0010 */

typedef struct _HEAP_RUNTIME_MEMORY_STATS
{
  /* 0x0000 */ volatile unsigned long TotalReservedPages;
  /* 0x0004 */ volatile unsigned long TotalCommittedPages;
  /* 0x0008 */ unsigned long FreeCommittedPages;
  /* 0x000c */ unsigned long LfhFreeCommittedPages;
  /* 0x0010 */ struct _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS LargePageStats[2];
  /* 0x0020 */ struct _RTL_HP_SEG_ALLOC_POLICY LargePageUtilizationPolicy;
} HEAP_RUNTIME_MEMORY_STATS, *PHEAP_RUNTIME_MEMORY_STATS; /* size: 0x002c */

typedef struct _HEAP_SEG_CONTEXT
{
  /* 0x0000 */ unsigned long SegmentMask;
  /* 0x0004 */ unsigned char UnitShift;
  /* 0x0005 */ unsigned char PagesPerUnitShift;
  /* 0x0006 */ unsigned char FirstDescriptorIndex;
  /* 0x0007 */ unsigned char CachedCommitSoftShift;
  /* 0x0008 */ unsigned char CachedCommitHighShift;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0009 */ unsigned char LargePagePolicy : 3; /* bit position: 0 */
        /* 0x0009 */ unsigned char FullDecommit : 1; /* bit position: 3 */
        /* 0x0009 */ unsigned char ReleaseEmptySegments : 1; /* bit position: 4 */
      }; /* bitfield */
      /* 0x0009 */ unsigned char AllFlags;
    }; /* size: 0x0001 */
  } /* size: 0x0001 */ Flags;
  /* 0x000a */ char Padding_304[2];
  /* 0x000c */ unsigned long MaxAllocationSize;
  /* 0x0010 */ short OlpStatsOffset;
  /* 0x0012 */ short MemStatsOffset;
  /* 0x0014 */ void* LfhContext;
  /* 0x0018 */ void* VsContext;
  /* 0x001c */ struct RTL_HP_ENV_HANDLE EnvHandle;
  /* 0x0024 */ void* Heap;
  /* 0x0028 */ long Padding_305[6];
  /* 0x0040 */ unsigned long SegmentLock;
  /* 0x0044 */ struct _LIST_ENTRY SegmentListHead;
  /* 0x004c */ unsigned long SegmentCount;
  /* 0x0050 */ struct _RTL_RB_TREE FreePageRanges;
  /* 0x0058 */ unsigned long FreeSegmentListLock;
  /* 0x005c */ struct _SINGLE_LIST_ENTRY FreeSegmentList[2];
  /* 0x0064 */ long __PADDING__[7];
} HEAP_SEG_CONTEXT, *PHEAP_SEG_CONTEXT; /* size: 0x0080 */

typedef struct _HEAP_VS_DELAY_FREE_CONTEXT
{
  /* 0x0000 */ union _SLIST_HEADER ListHead;
} HEAP_VS_DELAY_FREE_CONTEXT, *PHEAP_VS_DELAY_FREE_CONTEXT; /* size: 0x0008 */

typedef struct _HEAP_VS_CONTEXT
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ enum _RTLP_HP_LOCK_TYPE LockType;
  /* 0x0008 */ struct _RTL_RB_TREE FreeChunkTree;
  /* 0x0010 */ struct _LIST_ENTRY SubsegmentList;
  /* 0x0018 */ unsigned long TotalCommittedUnits;
  /* 0x001c */ unsigned long FreeCommittedUnits;
  /* 0x0020 */ long Padding_306[8];
  /* 0x0040 */ struct _HEAP_VS_DELAY_FREE_CONTEXT DelayFreeContext;
  /* 0x0048 */ long Padding_307[14];
  /* 0x0080 */ void* BackendCtx;
  /* 0x0084 */ struct _HEAP_SUBALLOCATOR_CALLBACKS Callbacks;
  /* 0x0098 */ struct _RTL_HP_VS_CONFIG Config;
  /* 0x009c */ unsigned long Flags;
  /* 0x00a0 */ long __PADDING__[8];
} HEAP_VS_CONTEXT, *PHEAP_VS_CONTEXT; /* size: 0x00c0 */

typedef struct _SEGMENT_HEAP
{
  /* 0x0000 */ struct RTL_HP_ENV_HANDLE EnvHandle;
  /* 0x0008 */ unsigned long Signature;
  /* 0x000c */ unsigned long GlobalFlags;
  /* 0x0010 */ unsigned long Interceptor;
  /* 0x0014 */ unsigned short ProcessHeapListIndex;
  /* 0x0016 */ unsigned short AllocatedFromMetadata : 1; /* bit position: 0 */
  union
  {
    /* 0x0018 */ struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;
    struct
    {
      /* 0x0018 */ unsigned long ReservedMustBeZero1;
      /* 0x001c */ void* UserContext;
      /* 0x0020 */ unsigned long ReservedMustBeZero2;
      /* 0x0024 */ void* Spare;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0028 */ long Padding_308[6];
  /* 0x0040 */ unsigned long LargeMetadataLock;
  /* 0x0044 */ struct _RTL_RB_TREE LargeAllocMetadata;
  /* 0x004c */ volatile unsigned long LargeReservedPages;
  /* 0x0050 */ volatile unsigned long LargeCommittedPages;
  /* 0x0054 */ union _RTL_RUN_ONCE StackTraceInitVar;
  /* 0x0058 */ long Padding_309[10];
  /* 0x0080 */ struct _HEAP_RUNTIME_MEMORY_STATS MemStats;
  /* 0x00ac */ unsigned short GlobalLockCount;
  /* 0x00ae */ char Padding_310[2];
  /* 0x00b0 */ unsigned long GlobalLockOwner;
  /* 0x00b4 */ unsigned long ContextExtendLock;
  /* 0x00b8 */ unsigned char* AllocatedBase;
  /* 0x00bc */ unsigned char* UncommittedBase;
  /* 0x00c0 */ unsigned char* ReservedLimit;
  /* 0x00c4 */ long Padding_311[15];
  /* 0x0100 */ struct _HEAP_SEG_CONTEXT SegContexts[2];
  /* 0x0200 */ struct _HEAP_VS_CONTEXT VsContext;
  /* 0x02c0 */ struct _HEAP_LFH_CONTEXT LfhContext;
} SEGMENT_HEAP, *PSEGMENT_HEAP; /* size: 0x0580 */

typedef struct _PALPC_PORT_REFERENCE_WAIT_BLOCK
{
  /* 0x0000 */ struct _KEVENT DesiredReferenceNoEvent;
  /* 0x0010 */ long DesiredReferenceNo;
} PALPC_PORT_REFERENCE_WAIT_BLOCK, *PPALPC_PORT_REFERENCE_WAIT_BLOCK; /* size: 0x0014 */

typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ unsigned long AllocatedAttributes;
  /* 0x0004 */ unsigned long ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES; /* size: 0x0008 */

typedef struct _BLOB_COUNTERS
{
  /* 0x0000 */ unsigned long CreatedObjects;
  /* 0x0004 */ unsigned long DeletedObjects;
} BLOB_COUNTERS, *PBLOB_COUNTERS; /* size: 0x0008 */

typedef struct _RTL_STACKDB_CONTEXT
{
  /* 0x0000 */ struct _RTL_HASH_TABLE StackSegmentTable;
  /* 0x000c */ struct _RTL_HASH_TABLE StackEntryTable;
  /* 0x0018 */ struct _RTL_SRWLOCK StackEntryTableLock;
  /* 0x001c */ struct _RTL_SRWLOCK SegmentTableLock;
  /* 0x0020 */ void* Allocate /* function */;
  /* 0x0024 */ void* Free /* function */;
  /* 0x0028 */ void* AllocatorContext;
} RTL_STACKDB_CONTEXT, *PRTL_STACKDB_CONTEXT; /* size: 0x002c */

typedef struct _TRIAGE_POP_FX_DEVICE
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _TRIAGE_POP_IRP_DATA* IrpData;
  /* 0x0010 */ long Status;
  /* 0x0014 */ long PowerReqCall;
  /* 0x0018 */ long PowerNotReqCall;
  /* 0x001c */ struct _TRIAGE_DEVICE_NODE* DeviceNode;
} TRIAGE_POP_FX_DEVICE, *PTRIAGE_POP_FX_DEVICE; /* size: 0x0020 */

typedef union _HEAP_LFH_SUBSEGMENT_DELAY_FREE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long DelayFree : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Count : 31; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ void* AllBits;
  }; /* size: 0x0004 */
} HEAP_LFH_SUBSEGMENT_DELAY_FREE, *PHEAP_LFH_SUBSEGMENT_DELAY_FREE; /* size: 0x0004 */

typedef struct _HEAP_LFH_SUBSEGMENT
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  union
  {
    /* 0x0008 */ struct _HEAP_LFH_SUBSEGMENT_OWNER* Owner;
    /* 0x0008 */ union _HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned long CommitLock;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned short FreeCount;
      /* 0x0012 */ unsigned short BlockCount;
    }; /* size: 0x0004 */
    /* 0x0010 */ volatile short InterlockedShort;
    /* 0x0010 */ volatile long InterlockedLong;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned short FreeHint;
  /* 0x0016 */ unsigned char Location;
  /* 0x0017 */ unsigned char WitheldBlockCount;
  /* 0x0018 */ struct _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets;
  /* 0x001c */ unsigned char CommitUnitShift;
  /* 0x001d */ unsigned char CommitUnitCount;
  /* 0x001e */ unsigned short CommitStateOffset;
  /* 0x0020 */ unsigned long BlockBitmap[1];
} HEAP_LFH_SUBSEGMENT, *PHEAP_LFH_SUBSEGMENT; /* size: 0x0024 */

typedef struct _RTLP_HP_QUEUE_LOCK_HANDLE
{
  /* 0x0000 */ unsigned long Reserved1;
  /* 0x0004 */ unsigned long LockPtr;
  /* 0x0008 */ unsigned long HandleData;
} RTLP_HP_QUEUE_LOCK_HANDLE, *PRTLP_HP_QUEUE_LOCK_HANDLE; /* size: 0x000c */

typedef struct _TRIAGE_POP_IRP_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Link;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ struct _DEVICE_OBJECT* Pdo;
} TRIAGE_POP_IRP_DATA, *PTRIAGE_POP_IRP_DATA; /* size: 0x0010 */

typedef struct _HEAP_VS_UNUSED_BYTES_INFO
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short UnusedBytes : 13; /* bit position: 0 */
      /* 0x0000 */ unsigned short LfhSubsegment : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned short ExtraPresent : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned short OneByteUnused : 1; /* bit position: 15 */
    }; /* bitfield */
    /* 0x0000 */ unsigned char Bytes[2];
  }; /* size: 0x0002 */
} HEAP_VS_UNUSED_BYTES_INFO, *PHEAP_VS_UNUSED_BYTES_INFO; /* size: 0x0002 */

typedef union _HEAP_PAGE_SEGMENT
{
  union
  {
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY ListEntry;
      /* 0x0008 */ unsigned long Signature;
      /* 0x000c */ union _HEAP_SEGMENT_MGR_COMMIT_STATE* SegmentCommitState;
      /* 0x0010 */ unsigned char UnusedWatermark;
    }; /* size: 0x0011 */
    /* 0x0000 */ struct _HEAP_PAGE_RANGE_DESCRIPTOR DescArray[256];
  }; /* size: 0x1000 */
} HEAP_PAGE_SEGMENT, *PHEAP_PAGE_SEGMENT; /* size: 0x1000 */

typedef struct _HEAP_TUNING_PARAMETERS
{
  /* 0x0000 */ unsigned long CommittThresholdShift;
  /* 0x0004 */ unsigned long MaxPreCommittThreshold;
} HEAP_TUNING_PARAMETERS, *PHEAP_TUNING_PARAMETERS; /* size: 0x0008 */

typedef struct _HEAP
{
  union
  {
    /* 0x0000 */ struct _HEAP_SEGMENT Segment;
    struct
    {
      /* 0x0000 */ struct _HEAP_ENTRY Entry;
      /* 0x0008 */ unsigned long SegmentSignature;
      /* 0x000c */ unsigned long SegmentFlags;
      /* 0x0010 */ struct _LIST_ENTRY SegmentListEntry;
      /* 0x0018 */ struct _HEAP* Heap;
      /* 0x001c */ void* BaseAddress;
      /* 0x0020 */ unsigned long NumberOfPages;
      /* 0x0024 */ struct _HEAP_ENTRY* FirstEntry;
      /* 0x0028 */ struct _HEAP_ENTRY* LastValidEntry;
      /* 0x002c */ unsigned long NumberOfUnCommittedPages;
      /* 0x0030 */ unsigned long NumberOfUnCommittedRanges;
      /* 0x0034 */ unsigned short SegmentAllocatorBackTraceIndex;
      /* 0x0036 */ unsigned short Reserved;
      /* 0x0038 */ struct _LIST_ENTRY UCRSegmentList;
    }; /* size: 0x0040 */
  }; /* size: 0x0040 */
  /* 0x0040 */ unsigned long Flags;
  /* 0x0044 */ unsigned long ForceFlags;
  /* 0x0048 */ unsigned long CompatibilityFlags;
  /* 0x004c */ unsigned long EncodeFlagMask;
  /* 0x0050 */ struct _HEAP_ENTRY Encoding;
  /* 0x0058 */ unsigned long Interceptor;
  /* 0x005c */ unsigned long VirtualMemoryThreshold;
  /* 0x0060 */ unsigned long Signature;
  /* 0x0064 */ unsigned long SegmentReserve;
  /* 0x0068 */ unsigned long SegmentCommit;
  /* 0x006c */ unsigned long DeCommitFreeBlockThreshold;
  /* 0x0070 */ unsigned long DeCommitTotalFreeThreshold;
  /* 0x0074 */ unsigned long TotalFreeSize;
  /* 0x0078 */ unsigned long MaximumAllocationSize;
  /* 0x007c */ unsigned short ProcessHeapsListIndex;
  /* 0x007e */ unsigned short HeaderValidateLength;
  /* 0x0080 */ void* HeaderValidateCopy;
  /* 0x0084 */ unsigned short NextAvailableTagIndex;
  /* 0x0086 */ unsigned short MaximumTagIndex;
  /* 0x0088 */ struct _HEAP_TAG_ENTRY* TagEntries;
  /* 0x008c */ struct _LIST_ENTRY UCRList;
  /* 0x0094 */ unsigned long AlignRound;
  /* 0x0098 */ unsigned long AlignMask;
  /* 0x009c */ struct _LIST_ENTRY VirtualAllocdBlocks;
  /* 0x00a4 */ struct _LIST_ENTRY SegmentList;
  /* 0x00ac */ unsigned short AllocatorBackTraceIndex;
  /* 0x00ae */ char Padding_312[2];
  /* 0x00b0 */ unsigned long NonDedicatedListLength;
  /* 0x00b4 */ void* BlocksIndex;
  /* 0x00b8 */ void* UCRIndex;
  /* 0x00bc */ struct _HEAP_PSEUDO_TAG_ENTRY* PseudoTagEntries;
  /* 0x00c0 */ struct _LIST_ENTRY FreeLists;
  /* 0x00c8 */ struct _HEAP_LOCK* LockVariable;
  /* 0x00cc */ void* CommitRoutine /* function */;
  /* 0x00d0 */ union _RTL_RUN_ONCE StackTraceInitVar;
  /* 0x00d4 */ struct _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData;
  /* 0x00e4 */ void* FrontEndHeap;
  /* 0x00e8 */ unsigned short FrontHeapLockCount;
  /* 0x00ea */ unsigned char FrontEndHeapType;
  /* 0x00eb */ unsigned char RequestedFrontEndHeapType;
  /* 0x00ec */ wchar_t* FrontEndHeapUsageData;
  /* 0x00f0 */ unsigned short FrontEndHeapMaximumIndex;
  /* 0x00f2 */ volatile unsigned char FrontEndHeapStatusBitmap[257];
  /* 0x01f3 */ char Padding_313;
  /* 0x01f4 */ struct _HEAP_COUNTERS Counters;
  /* 0x0250 */ struct _HEAP_TUNING_PARAMETERS TuningParameters;
} HEAP, *PHEAP; /* size: 0x0258 */

typedef struct _WHEA_RECOVERY_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long Address;
      /* 0x0004 */ unsigned char Consumed;
      /* 0x0005 */ char Padding_314;
      /* 0x0006 */ unsigned short ErrorCode;
      /* 0x0008 */ unsigned char ErrorIpValid;
      /* 0x0009 */ unsigned char RestartIpValid;
      /* 0x000a */ unsigned char ClearPoison;
      /* 0x000b */ char __PADDING__[1];
    } /* size: 0x000c */ MemoryError;
    struct
    {
      /* 0x0000 */ unsigned long PmemErrInfo;
    } /* size: 0x0004 */ PmemError;
  }; /* size: 0x000c */
  /* 0x000c */ long Padding_315;
  /* 0x0010 */ unsigned __int64 PartitionId;
  /* 0x0018 */ unsigned int VpIndex;
  /* 0x001c */ enum _WHEA_RECOVERY_CONTEXT_ERROR_TYPE ErrorType;
} WHEA_RECOVERY_CONTEXT, *PWHEA_RECOVERY_CONTEXT; /* size: 0x0020 */

typedef struct _HEAP_PSEUDO_TAG_ENTRY
{
  /* 0x0000 */ unsigned long Allocs;
  /* 0x0004 */ unsigned long Frees;
  /* 0x0008 */ unsigned long Size;
} HEAP_PSEUDO_TAG_ENTRY, *PHEAP_PSEUDO_TAG_ENTRY; /* size: 0x000c */

typedef struct _RTLP_HP_PADDING_HEADER
{
  /* 0x0000 */ unsigned long PaddingSize;
  /* 0x0004 */ unsigned long Spare;
} RTLP_HP_PADDING_HEADER, *PRTLP_HP_PADDING_HEADER; /* size: 0x0008 */

typedef struct _HEAP_LARGE_ALLOC_DATA
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE TreeNode;
  union
  {
    /* 0x000c */ unsigned long VirtualAddress;
    /* 0x000c */ unsigned long UnusedBytes : 16; /* bit position: 0 */
  }; /* size: 0x0004 */
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned long ExtraPresent : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned long GuardPageCount : 1; /* bit position: 1 */
    /* 0x0010 */ unsigned long GuardPageAlignment : 6; /* bit position: 2 */
    /* 0x0010 */ unsigned long Spare : 4; /* bit position: 8 */
    /* 0x0010 */ unsigned long AllocatedPages : 20; /* bit position: 12 */
  }; /* bitfield */
} HEAP_LARGE_ALLOC_DATA, *PHEAP_LARGE_ALLOC_DATA; /* size: 0x0014 */

typedef struct _KTIMER2
{
  /* 0x0000 */ struct _DISPATCHER_HEADER Header;
  union
  {
    /* 0x0010 */ struct _RTL_BALANCED_NODE RbNodes[2];
    /* 0x0010 */ struct _LIST_ENTRY ListEntry;
  }; /* size: 0x0018 */
  /* 0x0028 */ unsigned __int64 DueTime[2];
  /* 0x0038 */ __int64 Period;
  /* 0x0040 */ void* Callback /* function */;
  /* 0x0044 */ void* CallbackContext;
  /* 0x0048 */ void* DisableCallback /* function */;
  /* 0x004c */ void* DisableContext;
  /* 0x0050 */ unsigned char AbsoluteSystemTime;
  union
  {
    /* 0x0051 */ unsigned char TypeFlags;
    struct /* bitfield */
    {
      /* 0x0051 */ unsigned char Unused : 1; /* bit position: 0 */
      /* 0x0051 */ unsigned char IdleResilient : 1; /* bit position: 1 */
      /* 0x0051 */ unsigned char HighResolution : 1; /* bit position: 2 */
      /* 0x0051 */ unsigned char NoWake : 1; /* bit position: 3 */
      /* 0x0051 */ unsigned char PseudoHighRes : 1; /* bit position: 4 */
      /* 0x0051 */ unsigned char Unused1 : 3; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0052 */ unsigned char CollectionIndex[2];
  /* 0x0054 */ long __PADDING__[1];
} KTIMER2, *PKTIMER2; /* size: 0x0058 */

typedef struct _BLOB_TYPE
{
  /* 0x0000 */ enum _BLOB_ID ResourceId;
  /* 0x0004 */ unsigned long PoolTag;
  /* 0x0008 */ unsigned long LookasideIndex;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ struct _BLOB_COUNTERS* Counters;
  /* 0x0014 */ void* CleanupProcedure /* function */;
  /* 0x0018 */ void* DeleteProcedure /* function */;
  /* 0x001c */ void* DestroyProcedure /* function */;
  /* 0x0020 */ unsigned long UsualSize;
} BLOB_TYPE, *PBLOB_TYPE; /* size: 0x0024 */

typedef struct _KALPC_SECTION
{
  /* 0x0000 */ void* SectionObject;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ struct _ALPC_HANDLE_TABLE* HandleTable;
  /* 0x000c */ void* SectionHandle;
  /* 0x0010 */ struct _EPROCESS* OwnerProcess;
  /* 0x0014 */ struct _ALPC_PORT* OwnerPort;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0018 */ unsigned long Internal : 1; /* bit position: 0 */
        /* 0x0018 */ unsigned long Secure : 1; /* bit position: 1 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x001c */ unsigned long NumberOfRegions;
  /* 0x0020 */ struct _LIST_ENTRY RegionListHead;
} KALPC_SECTION, *PKALPC_SECTION; /* size: 0x0028 */

typedef struct _OBJECT_SYMBOLIC_LINK
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  union
  {
    /* 0x0008 */ struct _UNICODE_STRING LinkTarget;
    struct
    {
      /* 0x0008 */ void* Callback /* function */;
      /* 0x000c */ void* CallbackContext;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0010 */ unsigned long DosDeviceDriveIndex;
  /* 0x0014 */ unsigned long Flags;
  /* 0x0018 */ unsigned long AccessMask;
  /* 0x001c */ long __PADDING__[1];
} OBJECT_SYMBOLIC_LINK, *POBJECT_SYMBOLIC_LINK; /* size: 0x0020 */

typedef struct _KALPC_VIEW
{
  /* 0x0000 */ struct _LIST_ENTRY ViewListEntry;
  /* 0x0008 */ struct _KALPC_REGION* Region;
  /* 0x000c */ struct _ALPC_PORT* OwnerPort;
  /* 0x0010 */ struct _EPROCESS* OwnerProcess;
  /* 0x0014 */ void* Address;
  /* 0x0018 */ unsigned long Size;
  /* 0x001c */ void* SecureViewHandle;
  /* 0x0020 */ void* WriteAccessHandle;
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0024 */ unsigned long WriteAccess : 1; /* bit position: 0 */
        /* 0x0024 */ unsigned long AutoRelease : 1; /* bit position: 1 */
        /* 0x0024 */ unsigned long ForceUnlink : 1; /* bit position: 2 */
        /* 0x0024 */ unsigned long SystemSpace : 1; /* bit position: 3 */
      }; /* bitfield */
    } /* size: 0x0004 */ s1;
  } /* size: 0x0004 */ u1;
  /* 0x0028 */ unsigned long NumberOfOwnerMessages;
  /* 0x002c */ struct _LIST_ENTRY ProcessViewListEntry;
} KALPC_VIEW, *PKALPC_VIEW; /* size: 0x0034 */

typedef struct _VI_FAULT_TRACE
{
  /* 0x0000 */ struct _ETHREAD* Thread;
  /* 0x0004 */ void* StackTrace[8];
} VI_FAULT_TRACE, *PVI_FAULT_TRACE; /* size: 0x0024 */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListEntry;
  /* 0x0004 */ struct _IO_MINI_COMPLETION_PACKET_USER* Packet;
  /* 0x0008 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE* Lookaside;
} ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY, *PALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY; /* size: 0x000c */

typedef struct _ALPC_COMPLETION_PACKET_LOOKASIDE
{
  /* 0x0000 */ unsigned long Lock;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long ActiveCount;
  /* 0x000c */ unsigned long PendingNullCount;
  /* 0x0010 */ unsigned long PendingCheckCompletionListCount;
  /* 0x0014 */ unsigned long PendingDelete;
  /* 0x0018 */ struct _SINGLE_LIST_ENTRY FreeListHead;
  /* 0x001c */ void* CompletionPort;
  /* 0x0020 */ void* CompletionKey;
  /* 0x0024 */ struct _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY Entry[1];
} ALPC_COMPLETION_PACKET_LOOKASIDE, *PALPC_COMPLETION_PACKET_LOOKASIDE; /* size: 0x0030 */

typedef struct _ALPC_COMPLETION_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0008 */ struct _EPROCESS* OwnerProcess;
  /* 0x000c */ struct _EX_PUSH_LOCK CompletionListLock;
  /* 0x0010 */ struct _MDL* Mdl;
  /* 0x0014 */ void* UserVa;
  /* 0x0018 */ void* UserLimit;
  /* 0x001c */ void* DataUserVa;
  /* 0x0020 */ void* SystemVa;
  /* 0x0024 */ unsigned long TotalSize;
  /* 0x0028 */ struct _ALPC_COMPLETION_LIST_HEADER* Header;
  /* 0x002c */ void* List;
  /* 0x0030 */ unsigned long ListSize;
  /* 0x0034 */ void* Bitmap;
  /* 0x0038 */ unsigned long BitmapSize;
  /* 0x003c */ void* Data;
  /* 0x0040 */ unsigned long DataSize;
  /* 0x0044 */ unsigned long BitmapLimit;
  /* 0x0048 */ unsigned long BitmapNextHint;
  /* 0x004c */ unsigned long ConcurrencyCount;
  /* 0x0050 */ unsigned long AttributeFlags;
  /* 0x0054 */ unsigned long AttributeSize;
} ALPC_COMPLETION_LIST, *PALPC_COMPLETION_LIST; /* size: 0x0058 */

typedef struct _ALPC_COMPLETION_LIST_HEADER
{
  /* 0x0000 */ unsigned __int64 StartMagic;
  /* 0x0008 */ unsigned long TotalSize;
  /* 0x000c */ unsigned long ListOffset;
  /* 0x0010 */ unsigned long ListSize;
  /* 0x0014 */ unsigned long BitmapOffset;
  /* 0x0018 */ unsigned long BitmapSize;
  /* 0x001c */ unsigned long DataOffset;
  /* 0x0020 */ unsigned long DataSize;
  /* 0x0024 */ unsigned long AttributeFlags;
  /* 0x0028 */ unsigned long AttributeSize;
  /* 0x002c */ long Padding_316[5];
  /* 0x0040 */ volatile struct _ALPC_COMPLETION_LIST_STATE State;
  /* 0x0048 */ volatile unsigned long LastMessageId;
  /* 0x004c */ volatile unsigned long LastCallbackId;
  /* 0x0050 */ long Padding_317[12];
  /* 0x0080 */ volatile unsigned long PostCount;
  /* 0x0084 */ long Padding_318[15];
  /* 0x00c0 */ volatile unsigned long ReturnCount;
  /* 0x00c4 */ long Padding_319[15];
  /* 0x0100 */ volatile unsigned long LogSequenceNumber;
  /* 0x0104 */ long Padding_320[15];
  /* 0x0140 */ struct _RTL_SRWLOCK UserLock;
  /* 0x0144 */ long Padding_321;
  /* 0x0148 */ unsigned __int64 EndMagic;
  /* 0x0150 */ long __PADDING__[12];
} ALPC_COMPLETION_LIST_HEADER, *PALPC_COMPLETION_LIST_HEADER; /* size: 0x0180 */

struct _CALLBACK_OBJECT;

typedef struct _OBJECT_TYPE_INITIALIZER
{
  /* 0x0000 */ unsigned short Length;
  union
  {
    /* 0x0002 */ unsigned short ObjectTypeFlags;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned char CaseInsensitive : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned char UnnamedObjectsOnly : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned char UseDefaultObject : 1; /* bit position: 2 */
        /* 0x0002 */ unsigned char SecurityRequired : 1; /* bit position: 3 */
        /* 0x0002 */ unsigned char MaintainHandleCount : 1; /* bit position: 4 */
        /* 0x0002 */ unsigned char MaintainTypeList : 1; /* bit position: 5 */
        /* 0x0002 */ unsigned char SupportsObjectCallbacks : 1; /* bit position: 6 */
        /* 0x0002 */ unsigned char CacheAligned : 1; /* bit position: 7 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0003 */ unsigned char UseExtendedParameters : 1; /* bit position: 0 */
        /* 0x0003 */ unsigned char Reserved : 7; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned long ObjectTypeCode;
  /* 0x0008 */ unsigned long InvalidAttributes;
  /* 0x000c */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x001c */ unsigned long ValidAccessMask;
  /* 0x0020 */ unsigned long RetainAccess;
  /* 0x0024 */ enum _POOL_TYPE PoolType;
  /* 0x0028 */ unsigned long DefaultPagedPoolCharge;
  /* 0x002c */ unsigned long DefaultNonPagedPoolCharge;
  /* 0x0030 */ void* DumpProcedure /* function */;
  /* 0x0034 */ void* OpenProcedure /* function */;
  /* 0x0038 */ void* CloseProcedure /* function */;
  /* 0x003c */ void* DeleteProcedure /* function */;
  union
  {
    /* 0x0040 */ void* ParseProcedure /* function */;
    /* 0x0040 */ void* ParseProcedureEx /* function */;
  }; /* size: 0x0004 */
  /* 0x0044 */ void* SecurityProcedure /* function */;
  /* 0x0048 */ void* QueryNameProcedure /* function */;
  /* 0x004c */ void* OkayToCloseProcedure /* function */;
  /* 0x0050 */ unsigned long WaitObjectFlagMask;
  /* 0x0054 */ unsigned short WaitObjectFlagOffset;
  /* 0x0056 */ unsigned short WaitObjectPointerOffset;
} OBJECT_TYPE_INITIALIZER, *POBJECT_TYPE_INITIALIZER; /* size: 0x0058 */

typedef struct _OBJECT_TYPE
{
  /* 0x0000 */ struct _LIST_ENTRY TypeList;
  /* 0x0008 */ struct _UNICODE_STRING Name;
  /* 0x0010 */ void* DefaultObject;
  /* 0x0014 */ unsigned char Index;
  /* 0x0015 */ char Padding_322[3];
  /* 0x0018 */ unsigned long TotalNumberOfObjects;
  /* 0x001c */ unsigned long TotalNumberOfHandles;
  /* 0x0020 */ unsigned long HighWaterNumberOfObjects;
  /* 0x0024 */ unsigned long HighWaterNumberOfHandles;
  /* 0x0028 */ struct _OBJECT_TYPE_INITIALIZER TypeInfo;
  /* 0x0080 */ struct _EX_PUSH_LOCK TypeLock;
  /* 0x0084 */ unsigned long Key;
  /* 0x0088 */ struct _LIST_ENTRY CallbackList;
} OBJECT_TYPE, *POBJECT_TYPE; /* size: 0x0090 */

struct PROCESSOR_IDLESTATE_INFO
{
  /* 0x0000 */ unsigned long TimeCheck;
  /* 0x0004 */ unsigned char DemotePercent;
  /* 0x0005 */ unsigned char PromotePercent;
  /* 0x0006 */ unsigned char Spare[2];
}; /* size: 0x0008 */

struct PROCESSOR_IDLESTATE_POLICY
{
  /* 0x0000 */ unsigned short Revision;
  union
  {
    union
    {
      /* 0x0002 */ unsigned short AsUSHORT;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short AllowScaling : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned short Disabled : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned short Reserved : 14; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ Flags;
  /* 0x0004 */ unsigned long PolicyCount;
  /* 0x0008 */ struct PROCESSOR_IDLESTATE_INFO Policy[3];
}; /* size: 0x0020 */

typedef struct _IOV_FORCED_PENDING_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0004 */ struct _ETHREAD* Thread;
  /* 0x0008 */ void* StackTrace[62];
} IOV_FORCED_PENDING_TRACE, *PIOV_FORCED_PENDING_TRACE; /* size: 0x0100 */

typedef struct _IO_ADAPTER_CRYPTO_PARAMETERS
{
  /* 0x0000 */ unsigned __int64 Tweak;
  /* 0x0008 */ struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR* KeyDescriptor;
  /* 0x000c */ long __PADDING__[1];
} IO_ADAPTER_CRYPTO_PARAMETERS, *PIO_ADAPTER_CRYPTO_PARAMETERS; /* size: 0x0010 */

typedef struct _IOP_IRP_EXTENSION
{
  union
  {
    /* 0x0000 */ unsigned short ExtensionFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned short Allocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned short PropagateId : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned short SpareBits : 14; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short TypesAllocated;
  /* 0x0004 */ unsigned char GenericExtension[4];
  /* 0x0008 */ void* VerifierContext;
  /* 0x000c */ unsigned long DiskIoAttributionHandle;
  /* 0x0010 */ struct _GUID ActivityId;
  union
  {
    /* 0x0020 */ union _LARGE_INTEGER Timestamp;
    /* 0x0020 */ unsigned long ZeroingOffset;
    struct
    {
      /* 0x0020 */ struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* FsTrackOffsetBlob;
      /* 0x0024 */ __int64 FsTrackedOffset;
    }; /* size: 0x000c */
    /* 0x0020 */ struct _IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters;
  }; /* size: 0x0010 */
  union
  {
    union
    {
      /* 0x0030 */ unsigned __int64 Value;
      struct /* bitfield */
      {
        /* 0x0030 */ unsigned __int64 UserFlags : 32; /* bit position: 0 */
        /* 0x0030 */ unsigned __int64 SystemFlags : 16; /* bit position: 32 */
        /* 0x0030 */ unsigned __int64 UserFlagsId : 16; /* bit position: 48 */
      }; /* bitfield */
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ DriverFlags;
} IOP_IRP_EXTENSION, *PIOP_IRP_EXTENSION; /* size: 0x0038 */

typedef struct _LPCP_NONPAGED_PORT_QUEUE
{
  /* 0x0000 */ struct _KSEMAPHORE Semaphore;
  /* 0x0014 */ struct _LPCP_PORT_OBJECT* BackPointer;
} LPCP_NONPAGED_PORT_QUEUE, *PLPCP_NONPAGED_PORT_QUEUE; /* size: 0x0018 */

typedef struct _VF_DRIVER_IO_CALLBACKS
{
  /* 0x0000 */ void* DriverInit /* function */;
  /* 0x0004 */ void* DriverStartIo /* function */;
  /* 0x0008 */ void* DriverUnload /* function */;
  /* 0x000c */ void* AddDevice /* function */;
  /* 0x0010 */ void* MajorFunction[28] /* function */;
} VF_DRIVER_IO_CALLBACKS, *PVF_DRIVER_IO_CALLBACKS; /* size: 0x0080 */

typedef struct _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long CryptoIndex;
  /* 0x000c */ unsigned long AlgorithmId;
  /* 0x0010 */ unsigned long DataUnitSize;
  /* 0x0014 */ unsigned long KeySize;
  /* 0x0018 */ unsigned char KeyHash[32];
  /* 0x0038 */ void* KeyVirtualAddress;
  /* 0x003c */ long Padding_323;
  /* 0x0040 */ union _LARGE_INTEGER KeyPhysicalAddress;
} IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR, *PIO_ADAPTER_CRYPTO_KEY_DESCRIPTOR; /* size: 0x0048 */

typedef struct _IOP_FILE_OBJECT_EXTENSION
{
  /* 0x0000 */ unsigned long FoExtFlags;
  /* 0x0004 */ void* FoExtPerTypeExtension[9];
  /* 0x0028 */ enum _IOP_PRIORITY_HINT FoIoPriorityHint;
} IOP_FILE_OBJECT_EXTENSION, *PIOP_FILE_OBJECT_EXTENSION; /* size: 0x002c */

typedef struct _OPEN_PACKET
{
  /* 0x0000 */ short Type;
  /* 0x0002 */ short Size;
  /* 0x0004 */ struct _FILE_OBJECT* FileObject;
  /* 0x0008 */ long FinalStatus;
  /* 0x000c */ unsigned long Information;
  /* 0x0010 */ unsigned long ParseCheck;
  union
  {
    /* 0x0014 */ struct _FILE_OBJECT* RelatedFileObject;
    /* 0x0014 */ struct _DEVICE_OBJECT* ReferencedDeviceObject;
  }; /* size: 0x0004 */
  /* 0x0018 */ struct _OBJECT_ATTRIBUTES* OriginalAttributes;
  /* 0x001c */ long Padding_324;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ unsigned long CreateOptions;
  /* 0x002c */ unsigned short FileAttributes;
  /* 0x002e */ unsigned short ShareAccess;
  /* 0x0030 */ void* EaBuffer;
  /* 0x0034 */ unsigned long EaLength;
  /* 0x0038 */ unsigned long Options;
  /* 0x003c */ unsigned long Disposition;
  /* 0x0040 */ struct _FILE_BASIC_INFORMATION* BasicInformation;
  /* 0x0044 */ struct _FILE_NETWORK_OPEN_INFORMATION* NetworkInformation;
  /* 0x0048 */ void* FileInformation;
  /* 0x004c */ enum _CREATE_FILE_TYPE CreateFileType;
  /* 0x0050 */ void* MailslotOrPipeParameters;
  /* 0x0054 */ unsigned char Override;
  /* 0x0055 */ unsigned char QueryOnly;
  /* 0x0056 */ unsigned char DeleteOnly;
  /* 0x0057 */ unsigned char FullAttributes;
  /* 0x0058 */ struct _DUMMY_FILE_OBJECT* LocalFileObject;
  /* 0x005c */ unsigned long InternalFlags;
  /* 0x0060 */ char AccessMode;
  /* 0x0061 */ char Padding_325[3];
  /* 0x0064 */ struct _IO_DRIVER_CREATE_CONTEXT DriverCreateContext;
  /* 0x0078 */ enum _FILE_INFORMATION_CLASS FileInformationClass;
  /* 0x007c */ unsigned long FileInformationLength;
  /* 0x0080 */ unsigned char FilterQuery;
  /* 0x0081 */ char __PADDING__[7];
} OPEN_PACKET, *POPEN_PACKET; /* size: 0x0088 */

typedef struct _OBJECT_HEADER
{
  /* 0x0000 */ long PointerCount;
  union
  {
    /* 0x0004 */ long HandleCount;
    /* 0x0004 */ void* NextToFree;
  }; /* size: 0x0004 */
  /* 0x0008 */ struct _EX_PUSH_LOCK Lock;
  /* 0x000c */ unsigned char TypeIndex;
  union
  {
    /* 0x000d */ unsigned char TraceFlags;
    struct /* bitfield */
    {
      /* 0x000d */ unsigned char DbgRefTrace : 1; /* bit position: 0 */
      /* 0x000d */ unsigned char DbgTracePermanent : 1; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x000e */ unsigned char InfoMask;
  union
  {
    /* 0x000f */ unsigned char Flags;
    struct /* bitfield */
    {
      /* 0x000f */ unsigned char NewObject : 1; /* bit position: 0 */
      /* 0x000f */ unsigned char KernelObject : 1; /* bit position: 1 */
      /* 0x000f */ unsigned char KernelOnlyAccess : 1; /* bit position: 2 */
      /* 0x000f */ unsigned char ExclusiveObject : 1; /* bit position: 3 */
      /* 0x000f */ unsigned char PermanentObject : 1; /* bit position: 4 */
      /* 0x000f */ unsigned char DefaultSecurityQuota : 1; /* bit position: 5 */
      /* 0x000f */ unsigned char SingleHandleEntry : 1; /* bit position: 6 */
      /* 0x000f */ unsigned char DeletedInline : 1; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  union
  {
    /* 0x0010 */ struct _OBJECT_CREATE_INFORMATION* ObjectCreateInfo;
    /* 0x0010 */ void* QuotaBlockCharged;
  }; /* size: 0x0004 */
  /* 0x0014 */ void* SecurityDescriptor;
  /* 0x0018 */ struct _QUAD Body;
} OBJECT_HEADER, *POBJECT_HEADER; /* size: 0x0020 */

typedef struct _DUMMY_FILE_OBJECT
{
  /* 0x0000 */ struct _OBJECT_HEADER ObjectHeader;
  /* 0x0020 */ char FileObjectBody[128];
} DUMMY_FILE_OBJECT, *PDUMMY_FILE_OBJECT; /* size: 0x00a0 */

typedef struct _OBJECT_CREATE_INFORMATION
{
  /* 0x0000 */ unsigned long Attributes;
  /* 0x0004 */ void* RootDirectory;
  /* 0x0008 */ char ProbeMode;
  /* 0x0009 */ char Padding_326[3];
  /* 0x000c */ unsigned long PagedPoolCharge;
  /* 0x0010 */ unsigned long NonPagedPoolCharge;
  /* 0x0014 */ unsigned long SecurityDescriptorCharge;
  /* 0x0018 */ void* SecurityDescriptor;
  /* 0x001c */ struct _SECURITY_QUALITY_OF_SERVICE* SecurityQos;
  /* 0x0020 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService;
} OBJECT_CREATE_INFORMATION, *POBJECT_CREATE_INFORMATION; /* size: 0x002c */

typedef struct _ETW_SYSTEMTIME
{
  /* 0x0000 */ unsigned short Year;
  /* 0x0002 */ unsigned short Month;
  /* 0x0004 */ unsigned short DayOfWeek;
  /* 0x0006 */ unsigned short Day;
  /* 0x0008 */ unsigned short Hour;
  /* 0x000a */ unsigned short Minute;
  /* 0x000c */ unsigned short Second;
  /* 0x000e */ unsigned short Milliseconds;
} ETW_SYSTEMTIME, *PETW_SYSTEMTIME; /* size: 0x0010 */

typedef struct _TRACE_LOGFILE_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char MajorVersion;
      /* 0x0005 */ unsigned char MinorVersion;
      /* 0x0006 */ unsigned char SubVersion;
      /* 0x0007 */ unsigned char SubMinorVersion;
    } /* size: 0x0004 */ VersionDetail;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ProviderVersion;
  /* 0x000c */ unsigned long NumberOfProcessors;
  /* 0x0010 */ union _LARGE_INTEGER EndTime;
  /* 0x0018 */ unsigned long TimerResolution;
  /* 0x001c */ unsigned long MaximumFileSize;
  /* 0x0020 */ unsigned long LogFileMode;
  /* 0x0024 */ unsigned long BuffersWritten;
  union
  {
    /* 0x0028 */ struct _GUID LogInstanceGuid;
    struct
    {
      /* 0x0028 */ unsigned long StartBuffers;
      /* 0x002c */ unsigned long PointerSize;
      /* 0x0030 */ unsigned long EventsLost;
      /* 0x0034 */ unsigned long CpuSpeedInMHz;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0038 */ wchar_t* LoggerName;
  /* 0x003c */ wchar_t* LogFileName;
  /* 0x0040 */ struct _RTL_TIME_ZONE_INFORMATION TimeZone;
  /* 0x00ec */ long Padding_327;
  /* 0x00f0 */ union _LARGE_INTEGER BootTime;
  /* 0x00f8 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0100 */ union _LARGE_INTEGER StartTime;
  /* 0x0108 */ unsigned long ReservedFlags;
  /* 0x010c */ unsigned long BuffersLost;
} TRACE_LOGFILE_HEADER, *PTRACE_LOGFILE_HEADER; /* size: 0x0110 */

typedef struct _ETW_LOGGER_HANDLE
{
  /* 0x0000 */ unsigned char DereferenceAndLeave;
} ETW_LOGGER_HANDLE, *PETW_LOGGER_HANDLE; /* size: 0x0001 */

typedef struct _TOKEN_AUDIT_POLICY
{
  /* 0x0000 */ unsigned char PerUserPolicy[30];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY; /* size: 0x001e */

typedef struct _SEP_AUDIT_POLICY
{
  /* 0x0000 */ struct _TOKEN_AUDIT_POLICY AdtTokenPolicy;
  /* 0x001e */ unsigned char PolicySetStatus;
} SEP_AUDIT_POLICY, *PSEP_AUDIT_POLICY; /* size: 0x001f */

typedef struct _TOKEN
{
  /* 0x0000 */ struct _TOKEN_SOURCE TokenSource;
  /* 0x0010 */ struct _LUID TokenId;
  /* 0x0018 */ struct _LUID AuthenticationId;
  /* 0x0020 */ struct _LUID ParentTokenId;
  /* 0x0028 */ union _LARGE_INTEGER ExpirationTime;
  /* 0x0030 */ struct _ERESOURCE* TokenLock;
  /* 0x0034 */ struct _LUID ModifiedId;
  /* 0x003c */ long Padding_328;
  /* 0x0040 */ struct _SEP_TOKEN_PRIVILEGES Privileges;
  /* 0x0058 */ struct _SEP_AUDIT_POLICY AuditPolicy;
  /* 0x0077 */ char Padding_329;
  /* 0x0078 */ unsigned long SessionId;
  /* 0x007c */ unsigned long UserAndGroupCount;
  /* 0x0080 */ unsigned long RestrictedSidCount;
  /* 0x0084 */ unsigned long VariableLength;
  /* 0x0088 */ unsigned long DynamicCharged;
  /* 0x008c */ unsigned long DynamicAvailable;
  /* 0x0090 */ unsigned long DefaultOwnerIndex;
  /* 0x0094 */ struct _SID_AND_ATTRIBUTES* UserAndGroups;
  /* 0x0098 */ struct _SID_AND_ATTRIBUTES* RestrictedSids;
  /* 0x009c */ void* PrimaryGroup;
  /* 0x00a0 */ unsigned long* DynamicPart;
  /* 0x00a4 */ struct _ACL* DefaultDacl;
  /* 0x00a8 */ enum _TOKEN_TYPE TokenType;
  /* 0x00ac */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x00b0 */ unsigned long TokenFlags;
  /* 0x00b4 */ unsigned char TokenInUse;
  /* 0x00b5 */ char Padding_330[3];
  /* 0x00b8 */ unsigned long IntegrityLevelIndex;
  /* 0x00bc */ unsigned long MandatoryPolicy;
  /* 0x00c0 */ struct _SEP_LOGON_SESSION_REFERENCES* LogonSession;
  /* 0x00c4 */ struct _LUID OriginatingLogonSession;
  /* 0x00cc */ struct _SID_AND_ATTRIBUTES_HASH SidHash;
  /* 0x0154 */ struct _SID_AND_ATTRIBUTES_HASH RestrictedSidHash;
  /* 0x01dc */ struct _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION* pSecurityAttributes;
  /* 0x01e0 */ void* Package;
  /* 0x01e4 */ struct _SID_AND_ATTRIBUTES* Capabilities;
  /* 0x01e8 */ unsigned long CapabilityCount;
  /* 0x01ec */ struct _SID_AND_ATTRIBUTES_HASH CapabilitiesHash;
  /* 0x0274 */ struct _SEP_LOWBOX_NUMBER_ENTRY* LowboxNumberEntry;
  /* 0x0278 */ struct _SEP_CACHED_HANDLES_ENTRY* LowboxHandlesEntry;
  /* 0x027c */ struct _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION* pClaimAttributes;
  /* 0x0280 */ void* TrustLevelSid;
  /* 0x0284 */ struct _TOKEN* TrustLinkedToken;
  /* 0x0288 */ void* IntegrityLevelSidValue;
  /* 0x028c */ struct _SEP_SID_VALUES_BLOCK* TokenSidValues;
  /* 0x0290 */ struct _SEP_LUID_TO_INDEX_MAP_ENTRY* IndexEntry;
  /* 0x0294 */ struct _SEP_TOKEN_DIAG_TRACK_ENTRY* DiagnosticInfo;
  /* 0x0298 */ struct _SEP_CACHED_HANDLES_ENTRY* BnoIsolationHandlesEntry;
  /* 0x029c */ void* SessionObject;
  /* 0x02a0 */ unsigned long VariablePart;
  /* 0x02a4 */ long __PADDING__[1];
} TOKEN, *PTOKEN; /* size: 0x02a8 */

typedef struct _ARBITER_ALLOCATION_STATE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ unsigned __int64 CurrentMinimum;
  /* 0x0018 */ unsigned __int64 CurrentMaximum;
  /* 0x0020 */ struct _ARBITER_LIST_ENTRY* Entry;
  /* 0x0024 */ struct _ARBITER_ALTERNATIVE* CurrentAlternative;
  /* 0x0028 */ unsigned long AlternativeCount;
  /* 0x002c */ struct _ARBITER_ALTERNATIVE* Alternatives;
  /* 0x0030 */ unsigned short Flags;
  /* 0x0032 */ unsigned char RangeAttributes;
  /* 0x0033 */ unsigned char RangeAvailableAttributes;
  /* 0x0034 */ unsigned long WorkSpace;
} ARBITER_ALLOCATION_STATE, *PARBITER_ALLOCATION_STATE; /* size: 0x0038 */

typedef struct _ACL
{
  /* 0x0000 */ unsigned char AclRevision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short AclSize;
  /* 0x0004 */ unsigned short AceCount;
  /* 0x0006 */ unsigned short Sbz2;
} ACL, *PACL; /* size: 0x0008 */

typedef struct _SEP_LOWBOX_NUMBER_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x000c */ long ReferenceCount;
  /* 0x0010 */ void* PackageSid;
  /* 0x0014 */ unsigned long LowboxNumber;
  /* 0x0018 */ void* AtomTable;
} SEP_LOWBOX_NUMBER_ENTRY, *PSEP_LOWBOX_NUMBER_ENTRY; /* size: 0x001c */

typedef struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
{
  /* 0x0000 */ enum _SEP_CACHED_HANDLES_ENTRY_TYPE DescriptorType;
  union
  {
    /* 0x0004 */ void* PackageSid;
    /* 0x0004 */ struct _UNICODE_STRING IsolationPrefix;
  }; /* size: 0x0008 */
} SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR, *PSEP_CACHED_HANDLES_ENTRY_DESCRIPTOR; /* size: 0x000c */

typedef struct _SEP_CACHED_HANDLES_ENTRY
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x000c */ long ReferenceCount;
  /* 0x0010 */ struct _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor;
  /* 0x001c */ unsigned long HandleCount;
  /* 0x0020 */ void** Handles;
} SEP_CACHED_HANDLES_ENTRY, *PSEP_CACHED_HANDLES_ENTRY; /* size: 0x0024 */

typedef struct _SEP_TOKEN_DIAG_TRACK_ENTRY
{
  /* 0x0000 */ void* ProcessCid;
  /* 0x0004 */ void* ThreadCid;
  /* 0x0008 */ unsigned char ImageFileName[16];
  /* 0x0018 */ unsigned long CreateMethod;
  /* 0x001c */ unsigned long CreateTrace[30];
  /* 0x0094 */ long Count;
  /* 0x0098 */ long CaptureCount;
} SEP_TOKEN_DIAG_TRACK_ENTRY, *PSEP_TOKEN_DIAG_TRACK_ENTRY; /* size: 0x009c */

typedef struct _OBJECT_HEADER_HANDLE_INFO
{
  union
  {
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_DATABASE* HandleCountDataBase;
    /* 0x0000 */ struct _OBJECT_HANDLE_COUNT_ENTRY SingleEntry;
  }; /* size: 0x0008 */
} OBJECT_HEADER_HANDLE_INFO, *POBJECT_HEADER_HANDLE_INFO; /* size: 0x0008 */

typedef struct _OBJECT_HEADER_AUDIT_INFO
{
  /* 0x0000 */ void* SecurityDescriptor;
  /* 0x0004 */ unsigned long Reserved;
} OBJECT_HEADER_AUDIT_INFO, *POBJECT_HEADER_AUDIT_INFO; /* size: 0x0008 */

typedef struct _OBJECT_HEADER_EXTENDED_INFO
{
  /* 0x0000 */ struct _OBJECT_FOOTER* Footer;
  /* 0x0004 */ unsigned long Reserved;
} OBJECT_HEADER_EXTENDED_INFO, *POBJECT_HEADER_EXTENDED_INFO; /* size: 0x0008 */

typedef struct _WHEAP_INFO_BLOCK
{
  /* 0x0000 */ unsigned long ErrorSourceCount;
  /* 0x0004 */ struct _WHEAP_ERROR_SOURCE_TABLE* ErrorSourceTable;
  /* 0x0008 */ struct _WHEAP_WORK_QUEUE* WorkQueue;
} WHEAP_INFO_BLOCK, *PWHEAP_INFO_BLOCK; /* size: 0x000c */

typedef struct _WHEAP_ERROR_SOURCE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long FailedAllocations;
  /* 0x000c */ unsigned long PlatformErrorSourceId;
  /* 0x0010 */ long ErrorCount;
  /* 0x0014 */ unsigned long RecordCount;
  /* 0x0018 */ unsigned long RecordLength;
  /* 0x001c */ unsigned long PoolTag;
  /* 0x0020 */ enum _WHEA_ERROR_SOURCE_TYPE Type;
  /* 0x0024 */ struct _WHEAP_ERROR_RECORD_WRAPPER* Records;
  /* 0x0028 */ void* Context;
  /* 0x002c */ unsigned long SectionCount;
  /* 0x0030 */ unsigned long SectionLength;
  /* 0x0034 */ long Padding_331;
  /* 0x0038 */ union _LARGE_INTEGER TickCountAtLastError;
  /* 0x0040 */ unsigned long AccumulatedErrors;
  /* 0x0044 */ unsigned long TotalErrors;
  /* 0x0048 */ unsigned char Deferred;
  /* 0x0049 */ char Padding_332[3];
  /* 0x004c */ volatile long Busy;
  /* 0x0050 */ struct _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor;
  /* 0x041c */ long __PADDING__[1];
} WHEAP_ERROR_SOURCE, *PWHEAP_ERROR_SOURCE; /* size: 0x0420 */

typedef union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Preallocated : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long FromPersistentStore : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long PlatformPfaControl : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long PlatformDirectedOffline : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long Reserved : 28; /* bit position: 4 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x0004 */
} WHEAP_ERROR_RECORD_WRAPPER_FLAGS, *PWHEAP_ERROR_RECORD_WRAPPER_FLAGS; /* size: 0x0004 */

typedef struct _WHEAP_ERROR_RECORD_WRAPPER
{
  /* 0x0000 */ struct _LIST_ENTRY WorkEntry;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long ProcessorNumber;
  /* 0x0010 */ union _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags;
  /* 0x0014 */ volatile long InUse;
  /* 0x0018 */ struct _WHEAP_ERROR_SOURCE* ErrorSource;
  /* 0x001c */ struct _WHEA_ERROR_RECORD ErrorRecord;
} WHEAP_ERROR_RECORD_WRAPPER, *PWHEAP_ERROR_RECORD_WRAPPER; /* size: 0x00e4 */

typedef struct _SECURITY_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ void* Owner;
  /* 0x0008 */ void* Group;
  /* 0x000c */ struct _ACL* Sacl;
  /* 0x0010 */ struct _ACL* Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR; /* size: 0x0014 */

typedef struct _WNF_PROCESS_CONTEXT
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ struct _EPROCESS* Process;
  /* 0x0008 */ struct _LIST_ENTRY WnfProcessesListEntry;
  /* 0x0010 */ void* ImplicitScopeInstances[3];
  /* 0x001c */ struct _WNF_LOCK TemporaryNamesListLock;
  /* 0x0020 */ struct _LIST_ENTRY TemporaryNamesListHead;
  /* 0x0028 */ struct _WNF_LOCK ProcessSubscriptionListLock;
  /* 0x002c */ struct _LIST_ENTRY ProcessSubscriptionListHead;
  /* 0x0034 */ struct _WNF_LOCK DeliveryPendingListLock;
  /* 0x0038 */ struct _LIST_ENTRY DeliveryPendingListHead;
  /* 0x0040 */ struct _KEVENT* NotificationEvent;
} WNF_PROCESS_CONTEXT, *PWNF_PROCESS_CONTEXT; /* size: 0x0044 */

typedef struct _WNF_DISPATCHER
{
  /* 0x0000 */ struct _WNF_NODE_HEADER Header;
  /* 0x0004 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x0014 */ long State;
} WNF_DISPATCHER, *PWNF_DISPATCHER; /* size: 0x0018 */

typedef struct _IMAGE_ROM_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long BaseOfBss;
  /* 0x0020 */ unsigned long GprMask;
  /* 0x0024 */ unsigned long CprMask[4];
  /* 0x0034 */ unsigned long GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER; /* size: 0x0038 */

typedef struct _OBJECT_REF_TRACE
{
  /* 0x0000 */ void* StackTrace[16];
} OBJECT_REF_TRACE, *POBJECT_REF_TRACE; /* size: 0x0040 */

typedef struct _VI_DEADLOCK_THREAD
{
  /* 0x0000 */ struct _KTHREAD* Thread;
  /* 0x0004 */ struct _VI_DEADLOCK_NODE* CurrentSpinNode;
  /* 0x0008 */ struct _VI_DEADLOCK_NODE* CurrentOtherNode;
  union
  {
    /* 0x000c */ struct _LIST_ENTRY ListEntry;
    /* 0x000c */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  /* 0x0014 */ unsigned long NodeCount;
  /* 0x0018 */ volatile unsigned long PagingCount;
  /* 0x001c */ unsigned char ThreadUsesEresources;
  /* 0x001d */ char __PADDING__[3];
} VI_DEADLOCK_THREAD, *PVI_DEADLOCK_THREAD; /* size: 0x0020 */

typedef struct _VI_DEADLOCK_NODE
{
  /* 0x0000 */ struct _VI_DEADLOCK_NODE* Parent;
  /* 0x0004 */ struct _LIST_ENTRY ChildrenList;
  /* 0x000c */ struct _LIST_ENTRY SiblingsList;
  union
  {
    /* 0x0014 */ struct _LIST_ENTRY ResourceList;
    /* 0x0014 */ struct _LIST_ENTRY FreeListEntry;
  }; /* size: 0x0008 */
  /* 0x001c */ struct _VI_DEADLOCK_RESOURCE* Root;
  /* 0x0020 */ struct _VI_DEADLOCK_THREAD* ThreadEntry;
  union
  {
    union
    {
      struct /* bitfield */
      {
        /* 0x0024 */ unsigned long Active : 1; /* bit position: 0 */
        /* 0x0024 */ unsigned long OnlyTryAcquireUsed : 1; /* bit position: 1 */
        /* 0x0024 */ unsigned long ReleasedOutOfOrder : 1; /* bit position: 2 */
        /* 0x0024 */ unsigned long SequenceNumber : 29; /* bit position: 3 */
      }; /* bitfield */
      /* 0x0024 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0028 */ long ChildrenCount;
  /* 0x002c */ void* StackTrace[8];
  /* 0x004c */ void* ParentStackTrace[8];
} VI_DEADLOCK_NODE, *PVI_DEADLOCK_NODE; /* size: 0x006c */

typedef struct _VF_BTS_DATA_MANAGEMENT_AREA
{
  /* 0x0000 */ void* BTSBufferBase;
  /* 0x0004 */ void* BTSIndex;
  /* 0x0008 */ void* BTSMax;
  /* 0x000c */ void* BTSInterruptThreshold;
  /* 0x0010 */ void* PEBSBufferBase;
  /* 0x0014 */ void* PEBSIndex;
  /* 0x0018 */ void* PEBSMax;
  /* 0x001c */ void* PEBSInterruptThreshold;
  /* 0x0020 */ void* PEBSCounterReset[2];
  /* 0x0028 */ char Reserved[12];
} VF_BTS_DATA_MANAGEMENT_AREA, *PVF_BTS_DATA_MANAGEMENT_AREA; /* size: 0x0034 */

typedef struct _TRIAGE_9F_PNP
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE* CompletionQueue;
  /* 0x0008 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;
  /* 0x000c */ struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;
} TRIAGE_9F_PNP, *PTRIAGE_9F_PNP; /* size: 0x0010 */

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
{
  /* 0x0000 */ struct _LIST_ENTRY DispatchedList;
} TRIAGE_PNP_DEVICE_COMPLETION_QUEUE, *PTRIAGE_PNP_DEVICE_COMPLETION_QUEUE; /* size: 0x0008 */

typedef struct _POP_CURRENT_BROADCAST
{
  /* 0x0000 */ unsigned char InProgress;
  /* 0x0001 */ char Padding_333[3];
  /* 0x0004 */ struct _SYSTEM_POWER_STATE_CONTEXT SystemContext;
  /* 0x0008 */ enum POWER_ACTION PowerAction;
  /* 0x000c */ struct _POP_DEVICE_SYS_STATE* DeviceState;
} POP_CURRENT_BROADCAST, *PPOP_CURRENT_BROADCAST; /* size: 0x0010 */

typedef struct _OBJECT_REF_INFO
{
  /* 0x0000 */ struct _OBJECT_HEADER* ObjectHeader;
  /* 0x0004 */ void* NextRef;
  /* 0x0008 */ unsigned char ImageFileName[16];
  /* 0x0018 */ unsigned short NextPos;
  /* 0x001a */ unsigned short MaxStacks;
  /* 0x001c */ struct _OBJECT_REF_STACK_INFO* StackInfo /* zero-length array */;
} OBJECT_REF_INFO, *POBJECT_REF_INFO; /* size: 0x001c */

typedef struct _HEAP_STOP_ON_VALUES
{
  /* 0x0000 */ unsigned long AllocAddress;
  /* 0x0004 */ struct _HEAP_STOP_ON_TAG AllocTag;
  /* 0x0008 */ unsigned long ReAllocAddress;
  /* 0x000c */ struct _HEAP_STOP_ON_TAG ReAllocTag;
  /* 0x0010 */ unsigned long FreeAddress;
  /* 0x0014 */ struct _HEAP_STOP_ON_TAG FreeTag;
} HEAP_STOP_ON_VALUES, *PHEAP_STOP_ON_VALUES; /* size: 0x0018 */

typedef struct _VF_TARGET_VERIFIED_DRIVER_DATA
{
  /* 0x0000 */ struct _VF_SUSPECT_DRIVER_ENTRY* SuspectDriverEntry;
  /* 0x0004 */ void* WMICallback;
  /* 0x0008 */ struct _LIST_ENTRY EtwHandlesListHead;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0010 */ unsigned long MissedEtwRegistration : 1; /* bit position: 0 */
          /* 0x0010 */ unsigned long IsBootDriver : 1; /* bit position: 1 */
          /* 0x0010 */ unsigned long Spare : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ Flags;
      /* 0x0010 */ unsigned long Whole;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0014 */ unsigned long Signature;
  /* 0x0018 */ unsigned char SeSigningLevel;
  /* 0x0019 */ char Padding_334[7];
  /* 0x0020 */ union _SLIST_HEADER PoolPageHeaders;
  /* 0x0028 */ union _SLIST_HEADER PoolTrackers;
  /* 0x0030 */ struct _LIST_ENTRY DifPluginPerDriverDataContextHead;
  /* 0x0038 */ volatile unsigned long CurrentPagedPoolAllocations;
  /* 0x003c */ volatile unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0040 */ unsigned long PeakPagedPoolAllocations;
  /* 0x0044 */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0048 */ volatile unsigned long PagedBytes;
  /* 0x004c */ volatile unsigned long NonPagedBytes;
  /* 0x0050 */ unsigned long PeakPagedBytes;
  /* 0x0054 */ unsigned long PeakNonPagedBytes;
  /* 0x0058 */ unsigned long RaiseIrqls;
  /* 0x005c */ unsigned long AcquireSpinLocks;
  /* 0x0060 */ unsigned long SynchronizeExecutions;
  /* 0x0064 */ unsigned long AllocationsWithNoTag;
  /* 0x0068 */ unsigned long AllocationsFailed;
  /* 0x006c */ unsigned long AllocationsFailedDeliberately;
  /* 0x0070 */ unsigned long LockedBytes;
  /* 0x0074 */ unsigned long PeakLockedBytes;
  /* 0x0078 */ unsigned long MappedLockedBytes;
  /* 0x007c */ unsigned long PeakMappedLockedBytes;
  /* 0x0080 */ unsigned long MappedIoSpaceBytes;
  /* 0x0084 */ unsigned long PeakMappedIoSpaceBytes;
  /* 0x0088 */ unsigned long PagesForMdlBytes;
  /* 0x008c */ unsigned long PeakPagesForMdlBytes;
  /* 0x0090 */ unsigned long ContiguousMemoryBytes;
  /* 0x0094 */ unsigned long PeakContiguousMemoryBytes;
  /* 0x0098 */ struct _LIST_ENTRY ContiguousMemoryListHead;
  /* 0x00a0 */ volatile unsigned long ExecutePoolTypes;
  /* 0x00a4 */ volatile unsigned long ExecutePageProtections;
  /* 0x00a8 */ volatile unsigned long ExecutePageMappings;
  /* 0x00ac */ volatile unsigned long ExecuteWriteSections;
  /* 0x00b0 */ volatile unsigned long SectionAlignmentFailures;
  /* 0x00b4 */ volatile unsigned long IATInExecutableSection;
} VF_TARGET_VERIFIED_DRIVER_DATA, *PVF_TARGET_VERIFIED_DRIVER_DATA; /* size: 0x00b8 */

typedef struct _SYSTEM_POWER_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ struct POWER_ACTION_POLICY PowerButton;
  /* 0x0010 */ struct POWER_ACTION_POLICY SleepButton;
  /* 0x001c */ struct POWER_ACTION_POLICY LidClose;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE LidOpenWake;
  /* 0x002c */ unsigned long Reserved;
  /* 0x0030 */ struct POWER_ACTION_POLICY Idle;
  /* 0x003c */ unsigned long IdleTimeout;
  /* 0x0040 */ unsigned char IdleSensitivity;
  /* 0x0041 */ unsigned char DynamicThrottle;
  /* 0x0042 */ unsigned char Spare2[2];
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* 0x004c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep;
  /* 0x0050 */ unsigned long WinLogonFlags;
  /* 0x0054 */ unsigned long Spare3;
  /* 0x0058 */ unsigned long DozeS4Timeout;
  /* 0x005c */ unsigned long BroadcastCapacityResolution;
  /* 0x0060 */ struct SYSTEM_POWER_LEVEL DischargePolicy[4];
  /* 0x00c0 */ unsigned long VideoTimeout;
  /* 0x00c4 */ unsigned char VideoDimDisplay;
  /* 0x00c5 */ char Padding_335[3];
  /* 0x00c8 */ unsigned long VideoReserved[3];
  /* 0x00d4 */ unsigned long SpindownTimeout;
  /* 0x00d8 */ unsigned char OptimizeForPower;
  /* 0x00d9 */ unsigned char FanThrottleTolerance;
  /* 0x00da */ unsigned char ForcedThrottle;
  /* 0x00db */ unsigned char MinThrottle;
  /* 0x00dc */ struct POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY; /* size: 0x00e8 */

struct HAL_PRIVATE_DISPATCH
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ void* HalHandlerForBus /* function */;
  /* 0x0008 */ void* HalHandlerForConfigSpace /* function */;
  /* 0x000c */ void* HalLocateHiberRanges /* function */;
  /* 0x0010 */ void* HalRegisterBusHandler /* function */;
  /* 0x0014 */ void* HalSetWakeEnable /* function */;
  /* 0x0018 */ void* HalSetWakeAlarm /* function */;
  /* 0x001c */ void* HalPciTranslateBusAddress /* function */;
  /* 0x0020 */ void* HalPciAssignSlotResources /* function */;
  /* 0x0024 */ void* HalHaltSystem /* function */;
  /* 0x0028 */ void* HalFindBusAddressTranslation /* function */;
  /* 0x002c */ void* HalResetDisplay /* function */;
  /* 0x0030 */ void* HalAllocateMapRegisters /* function */;
  /* 0x0034 */ void* KdSetupPciDeviceForDebugging /* function */;
  /* 0x0038 */ void* KdReleasePciDeviceForDebugging /* function */;
  /* 0x003c */ void* KdGetAcpiTablePhase0 /* function */;
  /* 0x0040 */ void* KdCheckPowerButton /* function */;
  /* 0x0044 */ void* HalVectorToIDTEntry /* function */;
  /* 0x0048 */ void* KdMapPhysicalMemory64 /* function */;
  /* 0x004c */ void* KdUnmapVirtualAddress /* function */;
  /* 0x0050 */ void* KdGetPciDataByOffset /* function */;
  /* 0x0054 */ void* KdSetPciDataByOffset /* function */;
  /* 0x0058 */ void* HalGetInterruptVectorOverride /* function */;
  /* 0x005c */ void* HalGetVectorInputOverride /* function */;
  /* 0x0060 */ void* HalLoadMicrocode /* function */;
  /* 0x0064 */ void* HalUnloadMicrocode /* function */;
  /* 0x0068 */ void* HalPostMicrocodeUpdate /* function */;
  /* 0x006c */ void* HalAllocateMessageTargetOverride /* function */;
  /* 0x0070 */ void* HalFreeMessageTargetOverride /* function */;
  /* 0x0074 */ void* HalDpReplaceBegin /* function */;
  /* 0x0078 */ void* HalDpReplaceTarget /* function */;
  /* 0x007c */ void* HalDpReplaceControl /* function */;
  /* 0x0080 */ void* HalDpReplaceEnd /* function */;
  /* 0x0084 */ void* HalPrepareForBugcheck /* function */;
  /* 0x0088 */ void* HalQueryWakeTime /* function */;
  /* 0x008c */ void* HalReportIdleStateUsage /* function */;
  /* 0x0090 */ void* HalTscSynchronization /* function */;
  /* 0x0094 */ void* HalWheaInitProcessorGenericSection /* function */;
  /* 0x0098 */ void* HalStopLegacyUsbInterrupts /* function */;
  /* 0x009c */ void* HalReadWheaPhysicalMemory /* function */;
  /* 0x00a0 */ void* HalWriteWheaPhysicalMemory /* function */;
  /* 0x00a4 */ void* HalDpMaskLevelTriggeredInterrupts /* function */;
  /* 0x00a8 */ void* HalDpUnmaskLevelTriggeredInterrupts /* function */;
  /* 0x00ac */ void* HalDpGetInterruptReplayState /* function */;
  /* 0x00b0 */ void* HalDpReplayInterrupts /* function */;
  /* 0x00b4 */ void* HalQueryIoPortAccessSupported /* function */;
  /* 0x00b8 */ void* KdSetupIntegratedDeviceForDebugging /* function */;
  /* 0x00bc */ void* KdReleaseIntegratedDeviceForDebugging /* function */;
  /* 0x00c0 */ void* HalGetEnlightenmentInformation /* function */;
  /* 0x00c4 */ void* HalAllocateEarlyPages /* function */;
  /* 0x00c8 */ void* HalMapEarlyPages /* function */;
  /* 0x00cc */ void* Dummy1;
  /* 0x00d0 */ void* Dummy2;
  /* 0x00d4 */ void* HalNotifyProcessorFreeze /* function */;
  /* 0x00d8 */ void* HalPrepareProcessorForIdle /* function */;
  /* 0x00dc */ void* HalRegisterLogRoutine /* function */;
  /* 0x00e0 */ void* HalResumeProcessorFromIdle /* function */;
  /* 0x00e4 */ void* Dummy;
  /* 0x00e8 */ void* HalVectorToIDTEntryEx /* function */;
  /* 0x00ec */ void* HalSecondaryInterruptQueryPrimaryInformation /* function */;
  /* 0x00f0 */ void* HalMaskInterrupt /* function */;
  /* 0x00f4 */ void* HalUnmaskInterrupt /* function */;
  /* 0x00f8 */ void* HalIsInterruptTypeSecondary /* function */;
  /* 0x00fc */ void* HalAllocateGsivForSecondaryInterrupt /* function */;
  /* 0x0100 */ void* HalAddInterruptRemapping /* function */;
  /* 0x0104 */ void* HalRemoveInterruptRemapping /* function */;
  /* 0x0108 */ void* HalSaveAndDisableHvEnlightenment /* function */;
  /* 0x010c */ void* HalRestoreHvEnlightenment /* function */;
  /* 0x0110 */ void* HalFlushIoBuffersExternalCache /* function */;
  /* 0x0114 */ void* HalFlushExternalCache /* function */;
  /* 0x0118 */ void* HalPciEarlyRestore /* function */;
  /* 0x011c */ void* HalGetProcessorId /* function */;
  /* 0x0120 */ void* HalAllocatePmcCounterSet /* function */;
  /* 0x0124 */ void* HalCollectPmcCounters /* function */;
  /* 0x0128 */ void* HalFreePmcCounterSet /* function */;
  /* 0x012c */ void* HalProcessorHalt /* function */;
  /* 0x0130 */ void* HalTimerQueryCycleCounter /* function */;
  /* 0x0134 */ void* Dummy3;
  /* 0x0138 */ void* HalPciMarkHiberPhase /* function */;
  /* 0x013c */ void* HalQueryProcessorRestartEntryPoint /* function */;
  /* 0x0140 */ void* HalRequestInterrupt /* function */;
  /* 0x0144 */ void* HalEnumerateUnmaskedInterrupts /* function */;
  /* 0x0148 */ void* HalFlushAndInvalidatePageExternalCache /* function */;
  /* 0x014c */ void* KdEnumerateDebuggingDevices /* function */;
  /* 0x0150 */ void* HalFlushIoRectangleExternalCache /* function */;
  /* 0x0154 */ void* HalPowerEarlyRestore /* function */;
  /* 0x0158 */ void* HalQueryCapsuleCapabilities /* function */;
  /* 0x015c */ void* HalUpdateCapsule /* function */;
  /* 0x0160 */ void* HalPciMultiStageResumeCapable /* function */;
  /* 0x0164 */ void* HalDmaFreeCrashDumpRegisters /* function */;
  /* 0x0168 */ void* HalAcpiAoacCapable /* function */;
  /* 0x016c */ void* HalInterruptSetDestination /* function */;
  /* 0x0170 */ void* HalGetClockConfiguration /* function */;
  /* 0x0174 */ void* HalClockTimerActivate /* function */;
  /* 0x0178 */ void* HalClockTimerInitialize /* function */;
  /* 0x017c */ void* HalClockTimerStop /* function */;
  /* 0x0180 */ void* HalClockTimerArm /* function */;
  /* 0x0184 */ void* HalTimerOnlyClockInterruptPending /* function */;
  /* 0x0188 */ void* HalAcpiGetMultiNode /* function */;
  /* 0x018c */ void* HalPowerSetRebootHandler /* function */;
  /* 0x0190 */ void* HalIommuRegisterDispatchTable /* function */;
  /* 0x0194 */ void* HalTimerWatchdogStart /* function */;
  /* 0x0198 */ void* HalTimerWatchdogResetCountdown /* function */;
  /* 0x019c */ void* HalTimerWatchdogStop /* function */;
  /* 0x01a0 */ void* HalTimerWatchdogGeneratedLastReset /* function */;
  /* 0x01a4 */ void* HalTimerWatchdogTriggerSystemReset /* function */;
  /* 0x01a8 */ void* HalInterruptVectorDataToGsiv /* function */;
  /* 0x01ac */ void* HalInterruptGetHighestPriorityInterrupt /* function */;
  /* 0x01b0 */ void* HalProcessorOn /* function */;
  /* 0x01b4 */ void* HalProcessorOff /* function */;
  /* 0x01b8 */ void* HalProcessorFreeze /* function */;
  /* 0x01bc */ void* HalDmaLinkDeviceObjectByToken /* function */;
  /* 0x01c0 */ void* HalDmaCheckAdapterToken /* function */;
  /* 0x01c4 */ void* Dummy4;
  /* 0x01c8 */ void* HalTimerConvertPerformanceCounterToAuxiliaryCounter /* function */;
  /* 0x01cc */ void* HalTimerConvertAuxiliaryCounterToPerformanceCounter /* function */;
  /* 0x01d0 */ void* HalTimerQueryAuxiliaryCounterFrequency /* function */;
  /* 0x01d4 */ void* HalConnectThermalInterrupt /* function */;
  /* 0x01d8 */ void* HalIsEFIRuntimeActive /* function */;
  /* 0x01dc */ void* HalTimerQueryAndResetRtcErrors /* function */;
  /* 0x01e0 */ void* HalAcpiLateRestore /* function */;
  /* 0x01e4 */ void* KdWatchdogDelayExpiration /* function */;
  /* 0x01e8 */ void* HalGetProcessorStats /* function */;
  /* 0x01ec */ void* HalTimerWatchdogQueryDueTime /* function */;
  /* 0x01f0 */ void* HalConnectSyntheticInterrupt /* function */;
  /* 0x01f4 */ void* HalPreprocessNmi /* function */;
  /* 0x01f8 */ void* HalEnumerateEnvironmentVariablesWithFilter /* function */;
  /* 0x01fc */ void* HalCaptureLastBranchRecordStack /* function */;
  /* 0x0200 */ void* HalClearLastBranchRecordStack /* function */;
  /* 0x0204 */ void* HalConfigureLastBranchRecord /* function */;
  /* 0x0208 */ void* HalGetLastBranchInformation /* function */;
  /* 0x020c */ void* HalResumeLastBranchRecord /* function */;
  /* 0x0210 */ void* HalStartLastBranchRecord /* function */;
  /* 0x0214 */ void* HalStopLastBranchRecord /* function */;
  /* 0x0218 */ void* HalIommuBlockDevice /* function */;
  /* 0x021c */ void* HalIommuUnblockDevice /* function */;
  /* 0x0220 */ void* HalGetIommuInterface /* function */;
  /* 0x0224 */ void* HalRequestGenericErrorRecovery /* function */;
  /* 0x0228 */ void* HalTimerQueryHostPerformanceCounter /* function */;
  /* 0x022c */ void* HalTopologyQueryProcessorRelationships /* function */;
  /* 0x0230 */ void* HalInitPlatformDebugTriggers /* function */;
  /* 0x0234 */ void* HalRunPlatformDebugTriggers /* function */;
  /* 0x0238 */ void* HalTimerGetReferencePage /* function */;
  /* 0x023c */ void* HalGetHiddenProcessorPowerInterface /* function */;
  /* 0x0240 */ void* HalGetHiddenProcessorPackageId /* function */;
  /* 0x0244 */ void* HalGetHiddenPackageProcessorCount /* function */;
  /* 0x0248 */ void* HalGetHiddenProcessorApicIdByIndex /* function */;
  /* 0x024c */ void* HalRegisterHiddenProcessorIdleState /* function */;
  /* 0x0250 */ void* HalIommuReportIommuFault /* function */;
  /* 0x0254 */ void* HalIommuDmaRemappingCapable /* function */;
}; /* size: 0x0258 */

typedef struct _BUS_HANDLER
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ enum _BUS_DATA_TYPE ConfigurationType;
  /* 0x000c */ unsigned long BusNumber;
  /* 0x0010 */ struct _DEVICE_OBJECT* DeviceObject;
  /* 0x0014 */ struct _BUS_HANDLER* ParentHandler;
  /* 0x0018 */ void* BusData;
  /* 0x001c */ unsigned long DeviceControlExtensionSize;
  /* 0x0020 */ struct _SUPPORTED_RANGES* BusAddresses;
  /* 0x0024 */ unsigned long Reserved[4];
  /* 0x0034 */ void* GetBusData /* function */;
  /* 0x0038 */ void* SetBusData /* function */;
  /* 0x003c */ void* AdjustResourceList /* function */;
  /* 0x0040 */ void* AssignSlotResources /* function */;
  /* 0x0044 */ void* TranslateBusAddress /* function */;
  /* 0x0048 */ void* Spare1;
  /* 0x004c */ void* Spare2;
  /* 0x0050 */ void* Spare3;
  /* 0x0054 */ void* Spare4;
  /* 0x0058 */ void* Spare5;
  /* 0x005c */ void* Spare6;
  /* 0x0060 */ void* Spare7;
  /* 0x0064 */ void* Spare8;
} BUS_HANDLER, *PBUS_HANDLER; /* size: 0x0068 */

typedef struct _SUPPORTED_RANGES
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned char Sorted;
  /* 0x0003 */ unsigned char Reserved;
  /* 0x0004 */ unsigned long NoIO;
  /* 0x0008 */ struct _SUPPORTED_RANGE IO;
  /* 0x0028 */ unsigned long NoMemory;
  /* 0x002c */ long Padding_336;
  /* 0x0030 */ struct _SUPPORTED_RANGE Memory;
  /* 0x0050 */ unsigned long NoPrefetchMemory;
  /* 0x0054 */ long Padding_337;
  /* 0x0058 */ struct _SUPPORTED_RANGE PrefetchMemory;
  /* 0x0078 */ unsigned long NoDma;
  /* 0x007c */ long Padding_338;
  /* 0x0080 */ struct _SUPPORTED_RANGE Dma;
} SUPPORTED_RANGES, *PSUPPORTED_RANGES; /* size: 0x00a0 */

typedef struct _HAL_CHANNEL_MEMORY_RANGES
{
  /* 0x0000 */ unsigned long PageFrameIndex;
  /* 0x0004 */ unsigned short MpnId;
  /* 0x0006 */ unsigned short Node;
  /* 0x0008 */ unsigned short Channel;
  /* 0x000a */ unsigned char IsPowerManageable;
  /* 0x000b */ unsigned char DeepPowerState;
} HAL_CHANNEL_MEMORY_RANGES, *PHAL_CHANNEL_MEMORY_RANGES; /* size: 0x000c */

typedef struct _VIRTUAL_EFI_RUNTIME_SERVICES
{
  /* 0x0000 */ unsigned long GetTime;
  /* 0x0004 */ unsigned long SetTime;
  /* 0x0008 */ unsigned long GetWakeupTime;
  /* 0x000c */ unsigned long SetWakeupTime;
  /* 0x0010 */ unsigned long SetVirtualAddressMap;
  /* 0x0014 */ unsigned long ConvertPointer;
  /* 0x0018 */ unsigned long GetVariable;
  /* 0x001c */ unsigned long GetNextVariableName;
  /* 0x0020 */ unsigned long SetVariable;
  /* 0x0024 */ unsigned long GetNextHighMonotonicCount;
  /* 0x0028 */ unsigned long ResetSystem;
  /* 0x002c */ unsigned long UpdateCapsule;
  /* 0x0030 */ unsigned long QueryCapsuleCapabilities;
  /* 0x0034 */ unsigned long QueryVariableInfo;
} VIRTUAL_EFI_RUNTIME_SERVICES, *PVIRTUAL_EFI_RUNTIME_SERVICES; /* size: 0x0038 */

typedef struct _BOOT_FIRMWARE_RAMDISK_INFO
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long BlockSize;
  /* 0x0008 */ unsigned __int64 BaseAddress;
  /* 0x0010 */ unsigned __int64 Size;
} BOOT_FIRMWARE_RAMDISK_INFO, *PBOOT_FIRMWARE_RAMDISK_INFO; /* size: 0x0018 */

typedef struct _DEVICE_FAULT_CONFIGURATION
{
  /* 0x0000 */ void* FaultHandler /* function */;
  /* 0x0004 */ void* FaultContext;
} DEVICE_FAULT_CONFIGURATION, *PDEVICE_FAULT_CONFIGURATION; /* size: 0x0008 */

typedef struct _EFI_FIRMWARE_INFORMATION
{
  /* 0x0000 */ unsigned long FirmwareVersion;
  /* 0x0004 */ struct _VIRTUAL_EFI_RUNTIME_SERVICES* VirtualEfiRuntimeServices;
  /* 0x0008 */ long SetVirtualAddressMapStatus;
  /* 0x000c */ unsigned long MissedMappingsCount;
  /* 0x0010 */ struct _LIST_ENTRY FirmwareResourceList;
  /* 0x0018 */ void* EfiMemoryMap;
  /* 0x001c */ unsigned long EfiMemoryMapSize;
  /* 0x0020 */ unsigned long EfiMemoryMapDescriptorSize;
} EFI_FIRMWARE_INFORMATION, *PEFI_FIRMWARE_INFORMATION; /* size: 0x0024 */

typedef struct _FIRMWARE_INFORMATION_LOADER_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long FirmwareTypeUefi : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long EfiRuntimeUseIum : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long EfiRuntimePageProtectionSupported : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
  }; /* bitfield */
  union
  {
    union
    {
      /* 0x0004 */ struct _EFI_FIRMWARE_INFORMATION EfiInformation;
      /* 0x0004 */ struct _PCAT_FIRMWARE_INFORMATION PcatInformation;
    }; /* size: 0x0024 */
  } /* size: 0x0024 */ u;
} FIRMWARE_INFORMATION_LOADER_BLOCK, *PFIRMWARE_INFORMATION_LOADER_BLOCK; /* size: 0x0028 */

typedef struct _LOADER_PARAMETER_BLOCK
{
  /* 0x0000 */ unsigned long OsMajorVersion;
  /* 0x0004 */ unsigned long OsMinorVersion;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long OsLoaderSecurityVersion;
  /* 0x0010 */ struct _LIST_ENTRY LoadOrderListHead;
  /* 0x0018 */ struct _LIST_ENTRY MemoryDescriptorListHead;
  /* 0x0020 */ struct _LIST_ENTRY BootDriverListHead;
  /* 0x0028 */ struct _LIST_ENTRY EarlyLaunchListHead;
  /* 0x0030 */ struct _LIST_ENTRY CoreDriverListHead;
  /* 0x0038 */ struct _LIST_ENTRY CoreExtensionsDriverListHead;
  /* 0x0040 */ struct _LIST_ENTRY TpmCoreDriverListHead;
  /* 0x0048 */ unsigned long KernelStack;
  /* 0x004c */ unsigned long Prcb;
  /* 0x0050 */ unsigned long Process;
  /* 0x0054 */ unsigned long Thread;
  /* 0x0058 */ unsigned long KernelStackSize;
  /* 0x005c */ unsigned long RegistryLength;
  /* 0x0060 */ void* RegistryBase;
  /* 0x0064 */ struct _CONFIGURATION_COMPONENT_DATA* ConfigurationRoot;
  /* 0x0068 */ char* ArcBootDeviceName;
  /* 0x006c */ char* ArcHalDeviceName;
  /* 0x0070 */ char* NtBootPathName;
  /* 0x0074 */ char* NtHalPathName;
  /* 0x0078 */ char* LoadOptions;
  /* 0x007c */ struct _NLS_DATA_BLOCK* NlsData;
  /* 0x0080 */ struct _ARC_DISK_INFORMATION* ArcDiskInformation;
  /* 0x0084 */ struct _LOADER_PARAMETER_EXTENSION* Extension;
  union
  {
    union
    {
      /* 0x0088 */ struct _I386_LOADER_BLOCK I386;
      /* 0x0088 */ struct _ARM_LOADER_BLOCK Arm;
    }; /* size: 0x000c */
  } /* size: 0x000c */ u;
  /* 0x0094 */ struct _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation;
  /* 0x00bc */ char* OsBootstatPathName;
  /* 0x00c0 */ char* ArcOSDataDeviceName;
  /* 0x00c4 */ char* ArcWindowsSysPartName;
} LOADER_PARAMETER_BLOCK, *PLOADER_PARAMETER_BLOCK; /* size: 0x00c8 */

typedef struct _CONFIGURATION_COMPONENT_DATA
{
  /* 0x0000 */ struct _CONFIGURATION_COMPONENT_DATA* Parent;
  /* 0x0004 */ struct _CONFIGURATION_COMPONENT_DATA* Child;
  /* 0x0008 */ struct _CONFIGURATION_COMPONENT_DATA* Sibling;
  /* 0x000c */ struct _CONFIGURATION_COMPONENT ComponentEntry;
  /* 0x0030 */ void* ConfigurationData;
} CONFIGURATION_COMPONENT_DATA, *PCONFIGURATION_COMPONENT_DATA; /* size: 0x0034 */

typedef struct _NLS_DATA_BLOCK
{
  /* 0x0000 */ void* AnsiCodePageData;
  /* 0x0004 */ void* OemCodePageData;
  /* 0x0008 */ void* UnicodeCaseTableData;
} NLS_DATA_BLOCK, *PNLS_DATA_BLOCK; /* size: 0x000c */

typedef struct _FAULT_INFORMATION_ARM64_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long WriteNotRead : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long InstructionNotData : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long Privileged : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long FaultAddressValid : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long Reserved : 28; /* bit position: 4 */
  }; /* bitfield */
} FAULT_INFORMATION_ARM64_FLAGS, *PFAULT_INFORMATION_ARM64_FLAGS; /* size: 0x0004 */

typedef struct _FAULT_INFORMATION_ARM64
{
  /* 0x0000 */ void* DomainHandle;
  /* 0x0004 */ void* FaultAddress;
  /* 0x0008 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x000c */ unsigned long InputMappingId;
  /* 0x0010 */ struct _FAULT_INFORMATION_ARM64_FLAGS Flags;
  /* 0x0014 */ enum _FAULT_INFORMATION_ARM64_TYPE Type;
  /* 0x0018 */ unsigned __int64 IommuBaseAddress;
} FAULT_INFORMATION_ARM64, *PFAULT_INFORMATION_ARM64; /* size: 0x0020 */

typedef struct _FAULT_INFORMATION_X64_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long FaultAddressValid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
  }; /* bitfield */
} FAULT_INFORMATION_X64_FLAGS, *PFAULT_INFORMATION_X64_FLAGS; /* size: 0x0004 */

typedef struct _FAULT_INFORMATION_X64
{
  /* 0x0000 */ void* DomainHandle;
  /* 0x0004 */ void* FaultAddress;
  /* 0x0008 */ struct _FAULT_INFORMATION_X64_FLAGS Flags;
  /* 0x000c */ enum _FAULT_INFORMATION_ARM64_TYPE Type;
  /* 0x0010 */ unsigned __int64 IommuBaseAddress;
  /* 0x0018 */ unsigned long PciSegment;
  /* 0x001c */ long __PADDING__[1];
} FAULT_INFORMATION_X64, *PFAULT_INFORMATION_X64; /* size: 0x0020 */

typedef struct _FAULT_INFORMATION
{
  /* 0x0000 */ enum _FAULT_INFORMATION_ARCH Type;
  /* 0x0004 */ unsigned char IsStage1;
  /* 0x0005 */ char Padding_339[3];
  union
  {
    /* 0x0008 */ struct _FAULT_INFORMATION_ARM64 Arm64;
    /* 0x0008 */ struct _FAULT_INFORMATION_X64 X64;
  }; /* size: 0x0020 */
} FAULT_INFORMATION, *PFAULT_INFORMATION; /* size: 0x0028 */

typedef struct _SMBIOS3_TABLE_HEADER
{
  /* 0x0000 */ unsigned char Signature[5];
  /* 0x0005 */ unsigned char Checksum;
  /* 0x0006 */ unsigned char Length;
  /* 0x0007 */ unsigned char MajorVersion;
  /* 0x0008 */ unsigned char MinorVersion;
  /* 0x0009 */ unsigned char Docrev;
  /* 0x000a */ unsigned char EntryPointRevision;
  /* 0x000b */ unsigned char Reserved;
  /* 0x000c */ unsigned long StructureTableMaximumSize;
  /* 0x0010 */ unsigned __int64 StructureTableAddress;
} SMBIOS3_TABLE_HEADER, *PSMBIOS3_TABLE_HEADER; /* size: 0x0018 */

typedef struct _HAL_DP_REPLACE_PARAMETERS
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _PNP_REPLACE_PROCESSOR_LIST* TargetProcessors;
  /* 0x0008 */ struct _PNP_REPLACE_PROCESSOR_LIST* SpareProcessors;
} HAL_DP_REPLACE_PARAMETERS, *PHAL_DP_REPLACE_PARAMETERS; /* size: 0x000c */

typedef struct _LOADER_PARAMETER_CI_EXTENSION
{
  /* 0x0000 */ unsigned long CodeIntegrityOptions;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long UpgradeInProgress : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long IsWinPE : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long CustomKernelSignersAllowed : 1; /* bit position: 2 */
    /* 0x0004 */ unsigned long StateSeparationEnabled : 1; /* bit position: 3 */
    /* 0x0004 */ unsigned long Reserved : 28; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0008 */ union _LARGE_INTEGER WhqlEnforcementDate;
  /* 0x0010 */ unsigned long RevocationListOffset;
  /* 0x0014 */ unsigned long RevocationListSize;
  /* 0x0018 */ unsigned long CodeIntegrityPolicyOffset;
  /* 0x001c */ unsigned long CodeIntegrityPolicySize;
  /* 0x0020 */ unsigned long CodeIntegrityPolicyHashOffset;
  /* 0x0024 */ unsigned long CodeIntegrityPolicyHashSize;
  /* 0x0028 */ unsigned long CodeIntegrityPolicyOriginalHashOffset;
  /* 0x002c */ unsigned long CodeIntegrityPolicyOriginalHashSize;
  /* 0x0030 */ long WeakCryptoPolicyLoadStatus;
  /* 0x0034 */ unsigned long WeakCryptoPolicyOffset;
  /* 0x0038 */ unsigned long WeakCryptoPolicySize;
  /* 0x003c */ unsigned long SecureBootPolicyOffset;
  /* 0x0040 */ unsigned long SecureBootPolicySize;
  /* 0x0044 */ unsigned long Reserved2;
  /* 0x0048 */ unsigned char SerializedData[1];
  /* 0x0049 */ char __PADDING__[7];
} LOADER_PARAMETER_CI_EXTENSION, *PLOADER_PARAMETER_CI_EXTENSION; /* size: 0x0050 */

typedef struct _POP_THERMAL_TELEMETRY_TRACKER
{
  /* 0x0000 */ unsigned char AccountingDisabled;
  /* 0x0001 */ unsigned char ActiveLevels;
  /* 0x0002 */ char Padding_340[6];
  /* 0x0008 */ unsigned __int64 LastPassiveUpdateTime;
  /* 0x0010 */ unsigned __int64 LastActiveUpdateTime;
  /* 0x0018 */ unsigned __int64 TotalPassiveTime[21];
  /* 0x00c0 */ unsigned __int64 PassiveTimeSnap[21];
  /* 0x0168 */ unsigned __int64 TotalActiveTime[10];
  /* 0x01b8 */ unsigned __int64 ActiveTimeSnap[10];
  /* 0x0208 */ unsigned __int64 TotalTime;
  /* 0x0210 */ unsigned __int64 TotalTimeSnap;
} POP_THERMAL_TELEMETRY_TRACKER, *PPOP_THERMAL_TELEMETRY_TRACKER; /* size: 0x0218 */

typedef struct _PI_BUS_EXTENSION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned char NumberCSNs;
  /* 0x0005 */ char Padding_341[3];
  /* 0x0008 */ unsigned char* ReadDataPort;
  /* 0x000c */ unsigned char DataPortMapped;
  /* 0x000d */ char Padding_342[3];
  /* 0x0010 */ unsigned char* AddressPort;
  /* 0x0014 */ unsigned char AddrPortMapped;
  /* 0x0015 */ char Padding_343[3];
  /* 0x0018 */ unsigned char* CommandPort;
  /* 0x001c */ unsigned char CmdPortMapped;
  /* 0x001d */ char Padding_344[3];
  /* 0x0020 */ unsigned long NextSlotNumber;
  /* 0x0024 */ struct _SINGLE_LIST_ENTRY DeviceList;
  /* 0x0028 */ struct _SINGLE_LIST_ENTRY CardList;
  /* 0x002c */ struct _DEVICE_OBJECT* PhysicalBusDevice;
  /* 0x0030 */ struct _DEVICE_OBJECT* FunctionalBusDevice;
  /* 0x0034 */ struct _DEVICE_OBJECT* AttachedDevice;
  /* 0x0038 */ unsigned long BusNumber;
  /* 0x003c */ enum _SYSTEM_POWER_STATE SystemPowerState;
  /* 0x0040 */ enum _DEVICE_POWER_STATE DevicePowerState;
} PI_BUS_EXTENSION, *PPI_BUS_EXTENSION; /* size: 0x0044 */

struct SYSTEM_POWER_CAPABILITIES
{
  /* 0x0000 */ unsigned char PowerButtonPresent;
  /* 0x0001 */ unsigned char SleepButtonPresent;
  /* 0x0002 */ unsigned char LidPresent;
  /* 0x0003 */ unsigned char SystemS1;
  /* 0x0004 */ unsigned char SystemS2;
  /* 0x0005 */ unsigned char SystemS3;
  /* 0x0006 */ unsigned char SystemS4;
  /* 0x0007 */ unsigned char SystemS5;
  /* 0x0008 */ unsigned char HiberFilePresent;
  /* 0x0009 */ unsigned char FullWake;
  /* 0x000a */ unsigned char VideoDimPresent;
  /* 0x000b */ unsigned char ApmPresent;
  /* 0x000c */ unsigned char UpsPresent;
  /* 0x000d */ unsigned char ThermalControl;
  /* 0x000e */ unsigned char ProcessorThrottle;
  /* 0x000f */ unsigned char ProcessorMinThrottle;
  /* 0x0010 */ unsigned char ProcessorMaxThrottle;
  /* 0x0011 */ unsigned char FastSystemS4;
  /* 0x0012 */ unsigned char Hiberboot;
  /* 0x0013 */ unsigned char WakeAlarmPresent;
  /* 0x0014 */ unsigned char AoAc;
  /* 0x0015 */ unsigned char DiskSpinDown;
  /* 0x0016 */ unsigned char HiberFileType;
  /* 0x0017 */ unsigned char AoAcConnectivitySupported;
  /* 0x0018 */ unsigned char spare3[6];
  /* 0x001e */ unsigned char SystemBatteriesPresent;
  /* 0x001f */ unsigned char BatteriesAreShortTerm;
  /* 0x0020 */ struct BATTERY_REPORTING_SCALE BatteryScale[3];
  /* 0x0038 */ enum _SYSTEM_POWER_STATE AcOnLineWake;
  /* 0x003c */ enum _SYSTEM_POWER_STATE SoftLidWake;
  /* 0x0040 */ enum _SYSTEM_POWER_STATE RtcWake;
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
}; /* size: 0x004c */

typedef struct _PNP_REPLACE_PROCESSOR_LIST
{
  /* 0x0000 */ unsigned long* Affinity;
  /* 0x0004 */ unsigned long GroupCount;
  /* 0x0008 */ unsigned long AllocatedCount;
  /* 0x000c */ unsigned long Count;
  /* 0x0010 */ unsigned long ApicIds[1];
} PNP_REPLACE_PROCESSOR_LIST, *PPNP_REPLACE_PROCESSOR_LIST; /* size: 0x0014 */

typedef struct _RTL_ATOM_TABLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ volatile long ReferenceCount;
  /* 0x0008 */ struct _EX_PUSH_LOCK PushLock;
  /* 0x000c */ struct _HANDLE_TABLE* ExHandleTable;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long NumberOfBuckets;
  /* 0x0018 */ struct _RTL_ATOM_TABLE_ENTRY* Buckets[1];
} RTL_ATOM_TABLE, *PRTL_ATOM_TABLE; /* size: 0x001c */

typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION
{
  /* 0x0000 */ union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;
  /* 0x0008 */ unsigned char ProcessorType;
  /* 0x0009 */ unsigned char InstructionSet;
  /* 0x000a */ unsigned char ErrorType;
  /* 0x000b */ unsigned char Operation;
  /* 0x000c */ unsigned char Flags;
  /* 0x000d */ unsigned char Level;
  /* 0x000e */ unsigned short Reserved;
  /* 0x0010 */ unsigned __int64 CPUVersion;
  /* 0x0018 */ unsigned char CPUBrandString[128];
  /* 0x0098 */ unsigned __int64 ProcessorId;
  /* 0x00a0 */ unsigned __int64 TargetAddress;
  /* 0x00a8 */ unsigned __int64 RequesterId;
  /* 0x00b0 */ unsigned __int64 ResponderId;
  /* 0x00b8 */ unsigned __int64 InstructionPointer;
} WHEA_PROCESSOR_GENERIC_ERROR_SECTION, *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION; /* size: 0x00c0 */

typedef struct _RTL_RANGE
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  /* 0x0010 */ void* UserData;
  /* 0x0014 */ void* Owner;
  /* 0x0018 */ unsigned char Attributes;
  /* 0x0019 */ unsigned char Flags;
  /* 0x001a */ char __PADDING__[6];
} RTL_RANGE, *PRTL_RANGE; /* size: 0x0020 */

typedef struct _VI_VERIFIER_ISSUE
{
  /* 0x0000 */ unsigned long IssueType;
  /* 0x0004 */ void* Address;
  /* 0x0008 */ unsigned long Parameters[2];
} VI_VERIFIER_ISSUE, *PVI_VERIFIER_ISSUE; /* size: 0x0010 */

typedef struct _POP_THERMAL_ZONE
{
  union
  {
    /* 0x0000 */ struct _POP_POLICY_DEVICE PolicyDevice;
    struct
    {
      /* 0x0000 */ struct _LIST_ENTRY Link;
      /* 0x0008 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
      /* 0x000c */ void* Notification;
      /* 0x0010 */ struct _UNICODE_STRING Name;
      /* 0x0018 */ struct _DEVICE_OBJECT* Device;
      /* 0x001c */ struct _IRP* Irp;
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
  /* 0x0020 */ unsigned char State;
  /* 0x0021 */ unsigned char Flags;
  /* 0x0022 */ unsigned char Removing;
  /* 0x0023 */ unsigned char Mode;
  /* 0x0024 */ unsigned char PendingMode;
  /* 0x0025 */ unsigned char ActivePoint;
  /* 0x0026 */ unsigned char PendingActivePoint;
  /* 0x0027 */ unsigned char Critical;
  /* 0x0028 */ unsigned char ThermalStandby;
  /* 0x0029 */ unsigned char OverThrottled;
  /* 0x002a */ char Padding_345[2];
  /* 0x002c */ long HighPrecisionThrottle;
  /* 0x0030 */ long Throttle;
  /* 0x0034 */ long PendingThrottle;
  /* 0x0038 */ unsigned long ThrottleReasons;
  /* 0x003c */ long Padding_346;
  /* 0x0040 */ unsigned __int64 LastPassiveTime;
  /* 0x0048 */ unsigned long SampleRate;
  /* 0x004c */ unsigned long LastTemp;
  /* 0x0050 */ struct _THERMAL_INFORMATION_EX Info;
  /* 0x00ac */ struct _THERMAL_POLICY Policy;
  /* 0x00c4 */ unsigned char PolicyDriver;
  /* 0x00c5 */ char Padding_347[3];
  /* 0x00c8 */ unsigned long PollingRate;
  /* 0x00cc */ long Padding_348;
  /* 0x00d0 */ unsigned __int64 LastTemperatureTime;
  /* 0x00d8 */ unsigned __int64 LastActiveStartTime;
  /* 0x00e0 */ unsigned __int64 LastPassiveStartTime;
  /* 0x00e8 */ struct _WORK_QUEUE_ITEM WorkItem;
  /* 0x00f8 */ struct _KTIMER2 ZoneUpdateTimer;
  /* 0x0150 */ struct _POP_RW_LOCK Lock;
  /* 0x0158 */ struct _KEVENT ZoneStopped;
  /* 0x0168 */ struct _KEVENT TemperatureUpdated;
  /* 0x0178 */ unsigned long InstanceId;
  /* 0x017c */ long Padding_349;
  /* 0x0180 */ struct _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker;
  /* 0x0398 */ struct _UNICODE_STRING Description;
} POP_THERMAL_ZONE, *PPOP_THERMAL_ZONE; /* size: 0x03a0 */

typedef struct _LDRP_CSLIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Tail;
} LDRP_CSLIST, *PLDRP_CSLIST; /* size: 0x0004 */

typedef struct _PF_KERNEL_GLOBALS
{
  /* 0x0000 */ unsigned __int64 AccessBufferAgeThreshold;
  /* 0x0008 */ struct _EX_RUNDOWN_REF AccessBufferRef;
  /* 0x000c */ struct _KEVENT AccessBufferExistsEvent;
  /* 0x001c */ unsigned long AccessBufferMax;
  /* 0x0020 */ union _SLIST_HEADER AccessBufferList;
  /* 0x0028 */ long StreamSequenceNumber;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ long ScenarioPrefetchCount;
  /* 0x0034 */ long __PADDING__[3];
} PF_KERNEL_GLOBALS, *PPF_KERNEL_GLOBALS; /* size: 0x0040 */

typedef struct _PCI_BUSMASTER_DESCRIPTOR
{
  /* 0x0000 */ enum _PCI_BUSMASTER_RID_TYPE Type;
  /* 0x0004 */ unsigned long Segment;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned char Bus;
      /* 0x0009 */ unsigned char Device;
      /* 0x000a */ unsigned char Function;
      /* 0x000b */ unsigned char Reserved;
    } /* size: 0x0004 */ DeviceRid;
    struct
    {
      /* 0x0008 */ unsigned char Bus;
      /* 0x0009 */ unsigned char Device;
      /* 0x000a */ unsigned char Function;
      /* 0x000b */ unsigned char Reserved;
    } /* size: 0x0004 */ BridgeRid;
    struct
    {
      struct
      {
        /* 0x0008 */ unsigned char SecondaryBus;
        /* 0x0009 */ unsigned char SubordinateBus;
      } /* size: 0x0002 */ MultipleBridges;
      /* 0x000a */ char __PADDING__[2];
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} PCI_BUSMASTER_DESCRIPTOR, *PPCI_BUSMASTER_DESCRIPTOR; /* size: 0x000c */

typedef struct _MI_WRITE_MODES
{
  /* 0x0000 */ unsigned __int64 WriteType[2];
} MI_WRITE_MODES, *PMI_WRITE_MODES; /* size: 0x0010 */

typedef struct _ETWP_NOTIFICATION_HEADER
{
  /* 0x0000 */ enum _ETW_NOTIFICATION_TYPE NotificationType;
  /* 0x0004 */ unsigned long NotificationSize;
  /* 0x0008 */ long RefCount;
  /* 0x000c */ unsigned char ReplyRequested;
  /* 0x000d */ char Padding_350[3];
  union
  {
    /* 0x0010 */ unsigned long ReplyIndex;
    /* 0x0010 */ unsigned long Timeout;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0014 */ unsigned long ReplyCount;
    /* 0x0014 */ unsigned long NotifyeeCount;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0018 */ unsigned __int64 ReplyHandle;
    /* 0x0018 */ void* ReplyObject;
    /* 0x0018 */ unsigned long RegIndex;
  }; /* size: 0x0008 */
  /* 0x0020 */ unsigned long TargetPID;
  /* 0x0024 */ unsigned long SourcePID;
  /* 0x0028 */ struct _GUID DestinationGuid;
  /* 0x0038 */ struct _GUID SourceGuid;
} ETWP_NOTIFICATION_HEADER, *PETWP_NOTIFICATION_HEADER; /* size: 0x0048 */

typedef struct _FAST_OWNER_ENTRY
{
  /* 0x0000 */ void* Reserved[9];
} FAST_OWNER_ENTRY, *PFAST_OWNER_ENTRY; /* size: 0x0024 */

typedef struct _HARDWARE_PTE
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 Write : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Owner : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned __int64 WriteThrough : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned __int64 CacheDisable : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Accessed : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 Dirty : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned __int64 Global : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 CopyOnWrite : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 Prototype : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned __int64 reserved0 : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned __int64 PageFrameNumber : 26; /* bit position: 12 */
      /* 0x0000 */ unsigned __int64 reserved1 : 25; /* bit position: 38 */
      /* 0x0000 */ unsigned __int64 NoExecute : 1; /* bit position: 63 */
    }; /* bitfield */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} HARDWARE_PTE, *PHARDWARE_PTE; /* size: 0x0008 */

typedef union _IOMMU_SVM_CAPABILITIES
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long AtsCapability : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long PriCapability : 1; /* bit position: 1 */
        /* 0x0000 */ unsigned long PasidCapability : 1; /* bit position: 2 */
      }; /* bitfield */
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long PasidMaxWidth : 5; /* bit position: 0 */
          /* 0x0004 */ unsigned long PasidExePerm : 1; /* bit position: 5 */
          /* 0x0004 */ unsigned long PasidPrivMode : 1; /* bit position: 6 */
          /* 0x0004 */ unsigned long AtsPageAlignedRequest : 1; /* bit position: 7 */
          /* 0x0004 */ unsigned long AtsGlobalInvalidate : 1; /* bit position: 8 */
          /* 0x0004 */ unsigned long AtsInvalidateQueueDepth : 5; /* bit position: 9 */
        }; /* bitfield */
      } /* size: 0x0004 */ CapReg;
      /* 0x0008 */ unsigned long Rsvd : 15; /* bit position: 0 */
    }; /* size: 0x000c */
    /* 0x0000 */ unsigned long AsULONG;
  }; /* size: 0x000c */
} IOMMU_SVM_CAPABILITIES, *PIOMMU_SVM_CAPABILITIES; /* size: 0x000c */

typedef struct _POOL_TRACKER_BIG_PAGES
{
  /* 0x0000 */ volatile unsigned long Va;
  /* 0x0004 */ unsigned long Key;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long Pattern : 8; /* bit position: 0 */
    /* 0x0008 */ unsigned long PoolType : 12; /* bit position: 8 */
    /* 0x0008 */ unsigned long SlushSize : 12; /* bit position: 20 */
  }; /* bitfield */
  /* 0x000c */ unsigned long NumberOfBytes;
  /* 0x0010 */ struct _EPROCESS* ProcessBilled;
} POOL_TRACKER_BIG_PAGES, *PPOOL_TRACKER_BIG_PAGES; /* size: 0x0014 */

typedef struct _HIDDEN_PROCESSOR_POWER_INTERFACE
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ void* ReadPerfMsr /* function */;
  /* 0x0008 */ void* WritePerfMsr /* function */;
  /* 0x000c */ void* ReadPerfIoPort /* function */;
  /* 0x0010 */ void* WritePerfIoPort /* function */;
} HIDDEN_PROCESSOR_POWER_INTERFACE, *PHIDDEN_PROCESSOR_POWER_INTERFACE; /* size: 0x0014 */

typedef struct _HEAP_FREE_ENTRY_EXTRA
{
  /* 0x0000 */ unsigned short TagIndex;
  /* 0x0002 */ unsigned short FreeBackTraceIndex;
} HEAP_FREE_ENTRY_EXTRA, *PHEAP_FREE_ENTRY_EXTRA; /* size: 0x0004 */

typedef struct _SECTION
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE SectionNode;
  /* 0x000c */ unsigned long StartingVpn;
  /* 0x0010 */ unsigned long EndingVpn;
  union
  {
    union
    {
      /* 0x0014 */ struct _CONTROL_AREA* ControlArea;
      /* 0x0014 */ struct _FILE_OBJECT* FileObject;
      struct /* bitfield */
      {
        /* 0x0014 */ unsigned long RemoteImageFileObject : 1; /* bit position: 0 */
        /* 0x0014 */ unsigned long RemoteDataFileObject : 1; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  /* 0x0018 */ unsigned __int64 SizeOfSection;
  union
  {
    union
    {
      /* 0x0020 */ unsigned long LongFlags;
      /* 0x0020 */ struct _MMSECTION_FLAGS Flags;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  struct /* bitfield */
  {
    /* 0x0024 */ unsigned long InitialPageProtection : 12; /* bit position: 0 */
    /* 0x0024 */ unsigned long SessionId : 19; /* bit position: 12 */
    /* 0x0024 */ unsigned long NoValidationNeeded : 1; /* bit position: 31 */
  }; /* bitfield */
} SECTION, *PSECTION; /* size: 0x0028 */

typedef struct _RTL_RANGE_LIST
{
  /* 0x0000 */ struct _LIST_ENTRY ListHead;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long Count;
  /* 0x0010 */ unsigned long Stamp;
} RTL_RANGE_LIST, *PRTL_RANGE_LIST; /* size: 0x0014 */

typedef struct _ARBITER_INTERFACE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ void* Context;
  /* 0x0008 */ void* InterfaceReference /* function */;
  /* 0x000c */ void* InterfaceDereference /* function */;
  /* 0x0010 */ void* ArbiterHandler /* function */;
  /* 0x0014 */ unsigned long Flags;
} ARBITER_INTERFACE, *PARBITER_INTERFACE; /* size: 0x0018 */

typedef struct _ARBITER_ALTERNATIVE
{
  /* 0x0000 */ unsigned __int64 Minimum;
  /* 0x0008 */ unsigned __int64 Maximum;
  /* 0x0010 */ unsigned __int64 Length;
  /* 0x0018 */ unsigned __int64 Alignment;
  /* 0x0020 */ long Priority;
  /* 0x0024 */ unsigned long Flags;
  /* 0x0028 */ struct _IO_RESOURCE_DESCRIPTOR* Descriptor;
  /* 0x002c */ unsigned long Reserved[3];
} ARBITER_ALTERNATIVE, *PARBITER_ALTERNATIVE; /* size: 0x0038 */

typedef struct _VI_TRACK_IRQL
{
  /* 0x0000 */ void* Thread;
  /* 0x0004 */ unsigned char OldIrql;
  /* 0x0005 */ unsigned char NewIrql;
  /* 0x0006 */ unsigned short Processor;
  /* 0x0008 */ unsigned long TickCount;
  /* 0x000c */ void* StackTrace[5];
} VI_TRACK_IRQL, *PVI_TRACK_IRQL; /* size: 0x0020 */

typedef struct _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _TRIAGE_DEVICE_NODE* DeviceNode;
} TRIAGE_PNP_DEVICE_COMPLETION_REQUEST, *PTRIAGE_PNP_DEVICE_COMPLETION_REQUEST; /* size: 0x000c */

typedef struct _TRIAGE_DEVICE_NODE
{
  /* 0x0000 */ struct _TRIAGE_DEVICE_NODE* Sibling;
  /* 0x0004 */ struct _TRIAGE_DEVICE_NODE* Child;
  /* 0x0008 */ struct _TRIAGE_DEVICE_NODE* Parent;
  /* 0x000c */ struct _TRIAGE_DEVICE_NODE* LastChild;
  /* 0x0010 */ struct _DEVICE_OBJECT* PhysicalDeviceObject;
  /* 0x0014 */ struct _UNICODE_STRING InstancePath;
  /* 0x001c */ struct _UNICODE_STRING ServiceName;
  /* 0x0024 */ struct _IRP* PendingIrp;
  /* 0x0028 */ struct _TRIAGE_POP_FX_DEVICE* FxDevice;
} TRIAGE_DEVICE_NODE, *PTRIAGE_DEVICE_NODE; /* size: 0x002c */

typedef struct _EX_POOL_HEAP_MANAGER_STATE
{
  /* 0x0000 */ struct _RTLP_HP_HEAP_MANAGER HeapManager;
  /* 0x1c70 */ unsigned long NumberOfPools;
  /* 0x1c74 */ long Padding_351[3];
  /* 0x1c80 */ struct _EX_HEAP_POOL_NODE PoolNode[16];
  /* 0x22880 */ struct _SEGMENT_HEAP* SpecialHeaps[4];
  /* 0x22890 */ long __PADDING__[12];
} EX_POOL_HEAP_MANAGER_STATE, *PEX_POOL_HEAP_MANAGER_STATE; /* size: 0x228c0 */

typedef struct _EX_WORK_QUEUE_MANAGER
{
  /* 0x0000 */ struct _EX_PARTITION* Partition;
  /* 0x0004 */ struct _ENODE* Node;
  /* 0x0008 */ struct _KEVENT Event;
  /* 0x0018 */ struct _KTIMER DeadlockTimer;
  /* 0x0040 */ struct _KEVENT ReaperEvent;
  /* 0x0050 */ struct _KTIMER2 ReaperTimer;
  /* 0x00a8 */ void* ThreadHandle;
  /* 0x00ac */ volatile unsigned long ExitThread;
  /* 0x00b0 */ unsigned short ThreadSeed;
  /* 0x00b2 */ char __PADDING__[6];
} EX_WORK_QUEUE_MANAGER, *PEX_WORK_QUEUE_MANAGER; /* size: 0x00b8 */

typedef struct _VF_TRACKER
{
  /* 0x0000 */ unsigned long TrackerFlags;
  /* 0x0004 */ unsigned long TrackerSize;
  /* 0x0008 */ unsigned long TrackerIndex;
  /* 0x000c */ unsigned long TraceDepth;
} VF_TRACKER, *PVF_TRACKER; /* size: 0x0010 */

typedef struct _VI_VERIFIER_POOL_HEADER
{
  /* 0x0000 */ struct _VI_POOL_ENTRY* VerifierPoolEntry;
} VI_VERIFIER_POOL_HEADER, *PVI_VERIFIER_POOL_HEADER; /* size: 0x0004 */

typedef struct _VI_POOL_PAGE_HEADER
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* NextPage;
  /* 0x0004 */ void* VerifierEntry;
  /* 0x0008 */ unsigned long Signature;
} VI_POOL_PAGE_HEADER, *PVI_POOL_PAGE_HEADER; /* size: 0x000c */

typedef struct _VI_POOL_ENTRY_INUSE
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0004 */ void* CallingAddress;
  /* 0x0008 */ unsigned long NumberOfBytes;
  /* 0x000c */ unsigned long Tag;
} VI_POOL_ENTRY_INUSE, *PVI_POOL_ENTRY_INUSE; /* size: 0x0010 */

typedef struct _VI_POOL_ENTRY
{
  union
  {
    /* 0x0000 */ struct _VI_POOL_PAGE_HEADER PageHeader;
    /* 0x0000 */ struct _VI_POOL_ENTRY_INUSE InUse;
    struct
    {
      /* 0x0000 */ struct _SINGLE_LIST_ENTRY* NextFree;
      /* 0x0004 */ long __PADDING__[3];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} VI_POOL_ENTRY, *PVI_POOL_ENTRY; /* size: 0x0010 */

typedef struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 NumberOfPtes : 6; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PartitionId : 10; /* bit position: 6 */
    /* 0x0000 */ unsigned __int64 SectionOffset : 48; /* bit position: 16 */
  }; /* bitfield */
} MI_SYSTEM_CACHE_VIEW_ATTRIBUTES, *PMI_SYSTEM_CACHE_VIEW_ATTRIBUTES; /* size: 0x0008 */

typedef struct _MI_REVERSE_VIEW_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ViewLinks;
  union
  {
    /* 0x0008 */ void* SystemCacheVa;
    /* 0x0008 */ void* SessionViewVa;
    /* 0x0008 */ struct _EPROCESS* VadsProcess;
    /* 0x0008 */ unsigned long Type : 2; /* bit position: 0 */
  }; /* size: 0x0004 */
  union
  {
    /* 0x000c */ struct _SUBSECTION* Subsection;
    /* 0x000c */ unsigned long SubsectionType : 1; /* bit position: 0 */
  }; /* size: 0x0004 */
  union
  {
    /* 0x0010 */ struct _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES SystemCacheAttributes;
    /* 0x0010 */ unsigned __int64 SectionOffset;
  }; /* size: 0x0008 */
} MI_REVERSE_VIEW_MAP, *PMI_REVERSE_VIEW_MAP; /* size: 0x0018 */

typedef union _LFH_RANDOM_DATA
{
  union
  {
    /* 0x0000 */ unsigned char Bytes[256];
    /* 0x0000 */ unsigned short Words[128];
    /* 0x0000 */ unsigned __int64 Quadwords[32];
  }; /* size: 0x0100 */
} LFH_RANDOM_DATA, *PLFH_RANDOM_DATA; /* size: 0x0100 */

typedef struct _ETW_REG_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY RegList;
  /* 0x0008 */ struct _LIST_ENTRY GroupRegList;
  /* 0x0010 */ struct _ETW_GUID_ENTRY* GuidEntry;
  /* 0x0014 */ struct _ETW_GUID_ENTRY* GroupEntry;
  union
  {
    /* 0x0018 */ struct _ETW_REPLY_QUEUE* ReplyQueue;
    /* 0x0018 */ struct _ETW_QUEUE_ENTRY* ReplySlot[4];
    struct
    {
      /* 0x0018 */ void* Caller;
      /* 0x001c */ unsigned long SessionId;
    }; /* size: 0x0008 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0028 */ struct _EPROCESS* Process;
    /* 0x0028 */ void* CallbackContext;
  }; /* size: 0x0004 */
  /* 0x002c */ void* Callback;
  /* 0x0030 */ unsigned short Index;
  union
  {
    /* 0x0032 */ unsigned short Flags;
    struct /* bitfield */
    {
      /* 0x0032 */ unsigned short DbgKernelRegistration : 1; /* bit position: 0 */
      /* 0x0032 */ unsigned short DbgUserRegistration : 1; /* bit position: 1 */
      /* 0x0032 */ unsigned short DbgReplyRegistration : 1; /* bit position: 2 */
      /* 0x0032 */ unsigned short DbgClassicRegistration : 1; /* bit position: 3 */
      /* 0x0032 */ unsigned short DbgSessionSpaceRegistration : 1; /* bit position: 4 */
      /* 0x0032 */ unsigned short DbgModernRegistration : 1; /* bit position: 5 */
      /* 0x0032 */ unsigned short DbgClosed : 1; /* bit position: 6 */
      /* 0x0032 */ unsigned short DbgInserted : 1; /* bit position: 7 */
      /* 0x0032 */ unsigned short DbgWow64 : 1; /* bit position: 8 */
      /* 0x0032 */ unsigned short DbgUseDescriptorType : 1; /* bit position: 9 */
      /* 0x0032 */ unsigned short DbgDropProviderTraits : 1; /* bit position: 10 */
    }; /* bitfield */
  }; /* size: 0x0002 */
  /* 0x0034 */ unsigned char EnableMask;
  /* 0x0035 */ unsigned char GroupEnableMask;
  /* 0x0036 */ unsigned char HostEnableMask;
  /* 0x0037 */ unsigned char HostGroupEnableMask;
  /* 0x0038 */ struct _ETW_PROVIDER_TRAITS* Traits;
} ETW_REG_ENTRY, *PETW_REG_ENTRY; /* size: 0x003c */

typedef struct _ETW_REPLY_QUEUE
{
  /* 0x0000 */ struct _KQUEUE Queue;
  /* 0x0028 */ long EventsLost;
} ETW_REPLY_QUEUE, *PETW_REPLY_QUEUE; /* size: 0x002c */

typedef struct _ETW_QUEUE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _ETWP_NOTIFICATION_HEADER* DataBlock;
  /* 0x000c */ struct _ETW_REG_ENTRY* RegEntry;
  /* 0x0010 */ struct _ETW_REG_ENTRY* ReplyObject;
  /* 0x0014 */ void* WakeReference;
  /* 0x0018 */ unsigned short RegIndex;
  /* 0x001a */ unsigned short ReplyIndex;
  /* 0x001c */ unsigned long Flags;
} ETW_QUEUE_ENTRY, *PETW_QUEUE_ENTRY; /* size: 0x0020 */

typedef struct _ETW_PROVIDER_TRAITS
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE Node;
  /* 0x000c */ unsigned long ReferenceCount;
  /* 0x0010 */ unsigned char Traits[1];
  /* 0x0011 */ char __PADDING__[3];
} ETW_PROVIDER_TRAITS, *PETW_PROVIDER_TRAITS; /* size: 0x0014 */

typedef struct _PS_TRUSTLET_TKSESSION_ID
{
  /* 0x0000 */ unsigned __int64 SessionId[4];
} PS_TRUSTLET_TKSESSION_ID, *PPS_TRUSTLET_TKSESSION_ID; /* size: 0x0020 */

typedef struct _HEAP_GLOBAL_APPCOMPAT_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long SafeInputValidation : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Padding : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long CommitLFHSubsegments : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long AllocateHeapFromEnv : 1; /* bit position: 3 */
  }; /* bitfield */
} HEAP_GLOBAL_APPCOMPAT_FLAGS, *PHEAP_GLOBAL_APPCOMPAT_FLAGS; /* size: 0x0004 */

typedef struct _ETIMER
{
  /* 0x0000 */ struct _KTIMER KeTimer;
  /* 0x0028 */ unsigned long Lock;
  /* 0x002c */ struct _KAPC TimerApc;
  /* 0x005c */ struct _KDPC TimerDpc;
  /* 0x007c */ struct _LIST_ENTRY ActiveTimerListEntry;
  /* 0x0084 */ unsigned long Period;
  union
  {
    /* 0x0088 */ char TimerFlags;
    struct /* bitfield */
    {
      /* 0x0088 */ unsigned char ApcAssociated : 1; /* bit position: 0 */
      /* 0x0088 */ unsigned char FlushDpcs : 1; /* bit position: 1 */
      /* 0x0088 */ unsigned char Paused : 1; /* bit position: 2 */
      /* 0x0088 */ unsigned char Spare1 : 5; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0089 */ unsigned char DueTimeType;
  /* 0x008a */ unsigned short Spare2;
  /* 0x008c */ struct _DIAGNOSTIC_CONTEXT* volatile WakeReason;
  /* 0x0090 */ struct _LIST_ENTRY WakeTimerListEntry;
  /* 0x0098 */ void* VirtualizedTimerCookie;
  /* 0x009c */ struct _LIST_ENTRY VirtualizedTimerLinks;
  /* 0x00a4 */ long Padding_352;
  /* 0x00a8 */ unsigned __int64 DueTime;
  /* 0x00b0 */ unsigned long CoalescingWindow;
  /* 0x00b4 */ long __PADDING__[1];
} ETIMER, *PETIMER; /* size: 0x00b8 */

typedef struct _DIAGNOSTIC_CONTEXT
{
  /* 0x0000 */ enum _REQUESTER_TYPE CallerType;
  union
  {
    struct
    {
      /* 0x0004 */ struct _EPROCESS* Process;
      /* 0x0008 */ unsigned long ServiceTag;
    }; /* size: 0x0008 */
    /* 0x0004 */ struct _DEVICE_OBJECT* DeviceObject;
  }; /* size: 0x0008 */
  /* 0x000c */ unsigned long ReasonSize;
} DIAGNOSTIC_CONTEXT, *PDIAGNOSTIC_CONTEXT; /* size: 0x0010 */

typedef struct _IOV_IRP_TRACE
{
  /* 0x0000 */ struct _IRP* Irp;
  /* 0x0004 */ struct _KTHREAD* Thread;
  union
  {
    struct
    {
      /* 0x0008 */ short KernelApcDisable;
      /* 0x000a */ short SpecialApcDisable;
    }; /* size: 0x0004 */
    /* 0x0008 */ unsigned long CombinedApcDisable;
  }; /* size: 0x0004 */
  /* 0x000c */ unsigned char Irql;
  /* 0x000d */ char Padding_353[3];
  /* 0x0010 */ void* StackTrace[12];
} IOV_IRP_TRACE, *PIOV_IRP_TRACE; /* size: 0x0040 */

struct FEATURE_STATE_CHANGE_SUBSCRIPTION__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _PNP_DEVICE_COMPLETION_REQUEST
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _DEVICE_NODE* DeviceNode;
  /* 0x000c */ void* Context;
  /* 0x0010 */ enum _PNP_DEVNODE_STATE CompletionState;
  /* 0x0014 */ unsigned long IrpPended;
  /* 0x0018 */ long Status;
  /* 0x001c */ void* Information;
  /* 0x0020 */ long ReferenceCount;
  /* 0x0024 */ struct _PNP_WATCHDOG* Watchdog;
} PNP_DEVICE_COMPLETION_REQUEST, *PPNP_DEVICE_COMPLETION_REQUEST; /* size: 0x0028 */

typedef struct _LPCP_PORT_QUEUE
{
  /* 0x0000 */ struct _LPCP_NONPAGED_PORT_QUEUE* NonPagedPortQueue;
  /* 0x0004 */ struct _KSEMAPHORE* Semaphore;
  /* 0x0008 */ struct _LIST_ENTRY ReceiveHead;
} LPCP_PORT_QUEUE, *PLPCP_PORT_QUEUE; /* size: 0x0010 */

typedef struct _LPCP_PORT_OBJECT
{
  /* 0x0000 */ struct _LPCP_PORT_OBJECT* ConnectionPort;
  /* 0x0004 */ struct _LPCP_PORT_OBJECT* ConnectedPort;
  /* 0x0008 */ struct _LPCP_PORT_QUEUE MsgQueue;
  /* 0x0018 */ struct _CLIENT_ID Creator;
  /* 0x0020 */ void* ClientSectionBase;
  /* 0x0024 */ void* ServerSectionBase;
  /* 0x0028 */ void* PortContext;
  /* 0x002c */ struct _ETHREAD* ClientThread;
  /* 0x0030 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x003c */ struct _SECURITY_CLIENT_CONTEXT StaticSecurity;
  /* 0x0078 */ struct _LIST_ENTRY LpcReplyChainHead;
  /* 0x0080 */ struct _LIST_ENTRY LpcDataInfoChainHead;
  union
  {
    /* 0x0088 */ struct _EPROCESS* ServerProcess;
    /* 0x0088 */ struct _EPROCESS* MappingProcess;
  }; /* size: 0x0004 */
  /* 0x008c */ unsigned short MaxMessageLength;
  /* 0x008e */ unsigned short MaxConnectionInfoLength;
  /* 0x0090 */ unsigned long Flags;
  /* 0x0094 */ struct _KEVENT WaitEvent;
} LPCP_PORT_OBJECT, *PLPCP_PORT_OBJECT; /* size: 0x00a4 */

union RTLP_HP_LFH_PERF_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long HotspotDetection : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long HotspotFullCommit : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ActiveSubsegment : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long SmallerSubsegment : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long SingleAffinitySlot : 1; /* bit position: 4 */
      /* 0x0000 */ unsigned long ApplyLfhDecommitPolicy : 1; /* bit position: 5 */
      /* 0x0000 */ unsigned long EnableGarbageCollection : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long LargePagePreCommit : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long OpportunisticLargePreCommit : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long LfhForcedAffinity : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long LfhCachelinePadding : 1; /* bit position: 10 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long AllFlags;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

typedef struct _DIAGNOSTIC_BUFFER
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ enum _REQUESTER_TYPE CallerType;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long ProcessImageNameOffset;
      /* 0x000c */ unsigned long ProcessId;
      /* 0x0010 */ unsigned long ServiceTag;
    }; /* size: 0x000c */
    struct
    {
      /* 0x0008 */ unsigned long DeviceDescriptionOffset;
      /* 0x000c */ unsigned long DevicePathOffset;
    }; /* size: 0x0008 */
  }; /* size: 0x000c */
  /* 0x0014 */ unsigned long ReasonOffset;
} DIAGNOSTIC_BUFFER, *PDIAGNOSTIC_BUFFER; /* size: 0x0018 */

typedef struct _POP_POWER_ACTION
{
  /* 0x0000 */ unsigned char Updates;
  /* 0x0001 */ unsigned char State;
  /* 0x0002 */ unsigned char Shutdown;
  /* 0x0003 */ char Padding_354;
  /* 0x0004 */ enum POWER_ACTION Action;
  /* 0x0008 */ enum _SYSTEM_POWER_STATE LightestState;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ long Status;
  /* 0x0014 */ enum POWER_POLICY_DEVICE_TYPE DeviceType;
  /* 0x0018 */ unsigned long DeviceTypeFlags;
  /* 0x001c */ unsigned char IrpMinor;
  /* 0x001d */ unsigned char Waking;
  /* 0x001e */ char Padding_355[2];
  /* 0x0020 */ enum _SYSTEM_POWER_STATE SystemState;
  /* 0x0024 */ enum _SYSTEM_POWER_STATE NextSystemState;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE EffectiveSystemState;
  /* 0x002c */ enum _SYSTEM_POWER_STATE CurrentSystemState;
  /* 0x0030 */ struct _POP_SHUTDOWN_BUG_CHECK* ShutdownBugCode;
  /* 0x0034 */ struct _POP_DEVICE_SYS_STATE* DevState;
  /* 0x0038 */ struct _POP_HIBER_CONTEXT* HiberContext;
  /* 0x003c */ long Padding_356;
  /* 0x0040 */ unsigned __int64 WakeTime;
  /* 0x0048 */ unsigned __int64 SleepTime;
  /* 0x0050 */ unsigned __int64 WakeFirstUnattendedTime;
  /* 0x0058 */ enum SYSTEM_POWER_CONDITION WakeAlarmSignaled;
  /* 0x005c */ long Padding_357;
  /* 0x0060 */ struct
  {
    /* 0x0060 */ unsigned __int64 RequestedTime;
    /* 0x0068 */ unsigned __int64 ProgrammedTime;
    /* 0x0070 */ struct _DIAGNOSTIC_BUFFER* TimerInfo;
    /* 0x0074 */ long __PADDING__[1];
  } /* size: 0x0018 */ WakeAlarm[3];
  /* 0x00a8 */ unsigned char WakeAlarmPaused;
  /* 0x00a9 */ char Padding_358[7];
  /* 0x00b0 */ unsigned __int64 WakeAlarmLastTime;
  /* 0x00b8 */ unsigned __int64 DozeDeferralStartTime;
  /* 0x00c0 */ struct SYSTEM_POWER_CAPABILITIES FilteredCapabilities;
  /* 0x010c */ unsigned long WatchdogLock;
  /* 0x0110 */ struct _KDPC WatchdogDpc;
  /* 0x0130 */ struct _KTIMER WatchdogTimer;
  /* 0x0158 */ unsigned char WatchdogInitialized;
  /* 0x0159 */ char Padding_359[3];
  /* 0x015c */ enum _POP_POWER_ACTION_WATCHDOG_STATE WatchdogState;
  /* 0x0160 */ unsigned __int64 WatchdogStartTime;
  /* 0x0168 */ struct _KTHREAD* ActionWorkerThread;
  /* 0x016c */ struct _KTHREAD* PromoteActionWorkerThread;
  /* 0x0170 */ struct _KTHREAD* UnlockAfterSleepWorkerThread;
  /* 0x0174 */ long __PADDING__[1];
} POP_POWER_ACTION, *PPOP_POWER_ACTION; /* size: 0x0178 */

typedef struct _POP_SHUTDOWN_BUG_CHECK
{
  /* 0x0000 */ struct _ETHREAD* InitiatingThread;
  /* 0x0004 */ struct _EPROCESS* InitiatingProcess;
  /* 0x0008 */ void* ThreadId;
  /* 0x000c */ void* ProcessId;
  /* 0x0010 */ unsigned long Code;
  /* 0x0014 */ unsigned long Parameter1;
  /* 0x0018 */ unsigned long Parameter2;
  /* 0x001c */ unsigned long Parameter3;
  /* 0x0020 */ unsigned long Parameter4;
} POP_SHUTDOWN_BUG_CHECK, *PPOP_SHUTDOWN_BUG_CHECK; /* size: 0x0024 */

typedef struct _POP_IO_INFO
{
  /* 0x0000 */ struct _MDL* DumpMdl;
  /* 0x0004 */ enum _POP_IO_STATUS IoStatus;
  /* 0x0008 */ unsigned __int64 IoStartCount;
  /* 0x0010 */ unsigned __int64 IoBytesCompleted;
  /* 0x0018 */ unsigned __int64 IoBytesInProgress;
  /* 0x0020 */ unsigned __int64 RequestSize;
  /* 0x0028 */ union _LARGE_INTEGER IoLocation;
  /* 0x0030 */ unsigned __int64 FileOffset;
  /* 0x0038 */ void* Buffer;
  /* 0x003c */ unsigned char AsyncCapable;
  /* 0x003d */ char Padding_360[3];
  /* 0x0040 */ unsigned __int64 BytesToRead;
  /* 0x0048 */ unsigned long Pages;
  /* 0x004c */ long Padding_361;
  /* 0x0050 */ unsigned __int64 HighestChecksumIndex;
  /* 0x0058 */ unsigned short PreviousChecksum;
  /* 0x005a */ char __PADDING__[6];
} POP_IO_INFO, *PPOP_IO_INFO; /* size: 0x0060 */

typedef struct _POP_HIBER_CONTEXT
{
  /* 0x0000 */ unsigned char Reset;
  /* 0x0001 */ unsigned char HiberFlags;
  /* 0x0002 */ unsigned char WroteHiberFile;
  /* 0x0003 */ unsigned char KernelPhaseVerificationActive;
  /* 0x0004 */ volatile unsigned char InitializationFinished;
  /* 0x0005 */ char Padding_362[3];
  /* 0x0008 */ volatile long NextTableLockHeld;
  /* 0x000c */ volatile long BootPhaseFinishedBarrier;
  /* 0x0010 */ volatile long KernelResumeFinishedBarrier;
  /* 0x0014 */ volatile long HvCaptureReadyBarrier;
  /* 0x0018 */ volatile long HvCaptureCompletedBarrier;
  /* 0x001c */ unsigned char MapFrozen;
  /* 0x001d */ char Padding_363[3];
  union
  {
    /* 0x0020 */ struct _RTL_BITMAP DiscardMap;
    /* 0x0020 */ struct _RTL_BITMAP KernelPhaseMap;
  }; /* size: 0x0008 */
  /* 0x0028 */ struct _RTL_BITMAP BootPhaseMap;
  /* 0x0030 */ struct _LIST_ENTRY ClonedRanges;
  /* 0x0038 */ unsigned long ClonedRangeCount;
  /* 0x003c */ long Padding_364;
  /* 0x0040 */ unsigned __int64 ClonedPageCount;
  /* 0x0048 */ struct _RTL_BITMAP* CurrentMap;
  /* 0x004c */ struct _LIST_ENTRY* NextCloneRange;
  /* 0x0050 */ unsigned long NextPreserve;
  /* 0x0054 */ struct _MDL* LoaderMdl;
  /* 0x0058 */ struct _MDL* AllocatedMdl;
  /* 0x005c */ long Padding_365;
  /* 0x0060 */ unsigned __int64 PagesOut;
  /* 0x0068 */ void* IoPages;
  /* 0x006c */ unsigned long IoPagesCount;
  /* 0x0070 */ void* CurrentMcb;
  /* 0x0074 */ struct _DUMP_STACK_CONTEXT* DumpStack;
  /* 0x0078 */ struct _KPROCESSOR_STATE* WakeState;
  /* 0x007c */ unsigned long IoProgress;
  /* 0x0080 */ long Status;
  /* 0x0084 */ unsigned long GraphicsProc;
  /* 0x0088 */ struct PO_MEMORY_IMAGE* MemoryImage;
  /* 0x008c */ unsigned long* PerformanceStats;
  /* 0x0090 */ struct _MDL* BootLoaderLogMdl;
  /* 0x0094 */ struct _MDL* FirmwareRuntimeInformationMdl;
  /* 0x0098 */ void* FirmwareRuntimeInformationVa;
  /* 0x009c */ void* ResumeContext;
  /* 0x00a0 */ unsigned long ResumeContextPages;
  /* 0x00a4 */ unsigned long ProcessorCount;
  /* 0x00a8 */ struct _POP_PER_PROCESSOR_CONTEXT* ProcessorContext;
  /* 0x00ac */ char* ProdConsBuffer;
  /* 0x00b0 */ unsigned long ProdConsSize;
  /* 0x00b4 */ unsigned long MaxDataPages;
  /* 0x00b8 */ void* ExtraBuffer;
  /* 0x00bc */ unsigned long ExtraBufferSize;
  /* 0x00c0 */ void* ExtraMapVa;
  /* 0x00c4 */ unsigned long BitlockerKeyPFN;
  /* 0x00c8 */ struct _POP_IO_INFO IoInfo;
  /* 0x0128 */ wchar_t* IoChecksums;
  /* 0x012c */ unsigned long IoChecksumsSize;
  /* 0x0130 */ unsigned long HardwareConfigurationSignature;
  /* 0x0134 */ unsigned char SecureBoot;
  /* 0x0135 */ char __PADDING__[3];
} POP_HIBER_CONTEXT, *PPOP_HIBER_CONTEXT; /* size: 0x0138 */

typedef struct _DUMP_INITIALIZATION_CONTEXT
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ void* MemoryBlock;
  /* 0x000c */ void* CommonBuffer[2];
  /* 0x0014 */ long Padding_366;
  /* 0x0018 */ union _LARGE_INTEGER PhysicalAddress[2];
  /* 0x0028 */ void* StallRoutine /* function */;
  /* 0x002c */ void* OpenRoutine /* function */;
  /* 0x0030 */ void* WriteRoutine /* function */;
  /* 0x0034 */ void* FinishRoutine /* function */;
  /* 0x0038 */ struct _ADAPTER_OBJECT* AdapterObject;
  /* 0x003c */ void* MappedRegisterBase;
  /* 0x0040 */ void* PortConfiguration;
  /* 0x0044 */ unsigned char CrashDump;
  /* 0x0045 */ unsigned char MarkMemoryOnly;
  /* 0x0046 */ unsigned char HiberResume;
  /* 0x0047 */ unsigned char Reserved1;
  /* 0x0048 */ unsigned long MaximumTransferSize;
  /* 0x004c */ unsigned long CommonBufferSize;
  /* 0x0050 */ void* TargetAddress;
  /* 0x0054 */ void* WritePendingRoutine /* function */;
  /* 0x0058 */ unsigned long PartitionStyle;
  union
  {
    union
    {
      struct
      {
        /* 0x005c */ unsigned long Signature;
        /* 0x0060 */ unsigned long CheckSum;
      } /* size: 0x0008 */ Mbr;
      struct
      {
        /* 0x005c */ struct _GUID DiskId;
      } /* size: 0x0010 */ Gpt;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ DiskInfo;
  /* 0x006c */ void* ReadRoutine /* function */;
  /* 0x0070 */ void* GetDriveTelemetryRoutine /* function */;
  /* 0x0074 */ unsigned long LogSectionTruncateSize;
  /* 0x0078 */ unsigned long Parameters[16];
  /* 0x00b8 */ void* GetTransferSizesRoutine /* function */;
  /* 0x00bc */ void* DumpNotifyRoutine /* function */;
} DUMP_INITIALIZATION_CONTEXT, *PDUMP_INITIALIZATION_CONTEXT; /* size: 0x00c0 */

typedef struct _DUMP_STACK_CONTEXT
{
  /* 0x0000 */ struct _DUMP_INITIALIZATION_CONTEXT Init;
  /* 0x00c0 */ union _LARGE_INTEGER PartitionOffset;
  union
  {
    /* 0x00c8 */ void* DumpPointers;
    /* 0x00c8 */ void* StorageInfo;
  }; /* size: 0x0004 */
  /* 0x00cc */ unsigned char UseStorageInfo;
  /* 0x00cd */ char Padding_367[3];
  /* 0x00d0 */ unsigned long PointersLength;
  /* 0x00d4 */ wchar_t* ModulePrefix;
  /* 0x00d8 */ struct _LIST_ENTRY DriverList;
  /* 0x00e0 */ struct _STRING InitMsg;
  /* 0x00e8 */ struct _STRING ProgMsg;
  /* 0x00f0 */ struct _STRING DoneMsg;
  /* 0x00f8 */ void* FileObject;
  /* 0x00fc */ enum _DEVICE_USAGE_NOTIFICATION_TYPE UsageType;
} DUMP_STACK_CONTEXT, *PDUMP_STACK_CONTEXT; /* size: 0x0100 */

typedef struct _PO_HIBER_PERF
{
  /* 0x0000 */ unsigned __int64 HiberIoTicks;
  /* 0x0008 */ unsigned __int64 HiberIoCpuTicks;
  /* 0x0010 */ unsigned __int64 HiberInitTicks;
  /* 0x0018 */ unsigned __int64 HiberHiberFileTicks;
  /* 0x0020 */ unsigned __int64 HiberCompressTicks;
  /* 0x0028 */ unsigned __int64 HiberSharedBufferTicks;
  /* 0x0030 */ unsigned __int64 HiberChecksumTicks;
  /* 0x0038 */ unsigned __int64 HiberChecksumIoTicks;
  /* 0x0040 */ union _LARGE_INTEGER TotalHibernateTime;
  /* 0x0048 */ union _LARGE_INTEGER HibernateCompleteTimestamp;
  /* 0x0050 */ unsigned long POSTTime;
  /* 0x0054 */ unsigned long ResumeBootMgrTime;
  /* 0x0058 */ unsigned long BootmgrUserInputTime;
  /* 0x005c */ long Padding_368;
  /* 0x0060 */ unsigned __int64 ResumeAppTicks;
  /* 0x0068 */ unsigned __int64 ResumeAppStartTimestamp;
  /* 0x0070 */ unsigned __int64 ResumeLibraryInitTicks;
  /* 0x0078 */ unsigned __int64 ResumeInitTicks;
  /* 0x0080 */ unsigned __int64 ResumeRestoreImageStartTimestamp;
  /* 0x0088 */ unsigned __int64 ResumeHiberFileTicks;
  /* 0x0090 */ unsigned __int64 ResumeIoTicks;
  /* 0x0098 */ unsigned __int64 ResumeDecompressTicks;
  /* 0x00a0 */ unsigned __int64 ResumeAllocateTicks;
  /* 0x00a8 */ unsigned __int64 ResumeUserInOutTicks;
  /* 0x00b0 */ unsigned __int64 ResumeMapTicks;
  /* 0x00b8 */ unsigned __int64 ResumeUnmapTicks;
  /* 0x00c0 */ unsigned __int64 ResumeChecksumTicks;
  /* 0x00c8 */ unsigned __int64 ResumeChecksumIoTicks;
  /* 0x00d0 */ unsigned __int64 ResumeKernelSwitchTimestamp;
  /* 0x00d8 */ unsigned __int64 CyclesPerMs;
  /* 0x00e0 */ unsigned __int64 WriteLogDataTimestamp;
  /* 0x00e8 */ unsigned __int64 KernelReturnFromHandler;
  /* 0x00f0 */ unsigned __int64 TimeStampCounterAtSwitchTime;
  /* 0x00f8 */ unsigned __int64 HalTscOffset;
  /* 0x0100 */ unsigned __int64 HvlTscOffset;
  /* 0x0108 */ unsigned __int64 SleeperThreadEnd;
  /* 0x0110 */ unsigned __int64 PostCmosUpdateTimestamp;
  /* 0x0118 */ unsigned __int64 KernelReturnSystemPowerStateTimestamp;
  /* 0x0120 */ unsigned __int64 IoBoundedness;
  /* 0x0128 */ unsigned __int64 KernelDecompressTicks;
  /* 0x0130 */ unsigned __int64 KernelIoTicks;
  /* 0x0138 */ unsigned __int64 KernelCopyTicks;
  /* 0x0140 */ unsigned __int64 ReadCheckCount;
  /* 0x0148 */ unsigned __int64 KernelInitTicks;
  /* 0x0150 */ unsigned __int64 KernelResumeHiberFileTicks;
  /* 0x0158 */ unsigned __int64 KernelIoCpuTicks;
  /* 0x0160 */ unsigned __int64 KernelSharedBufferTicks;
  /* 0x0168 */ unsigned __int64 KernelAnimationTicks;
  /* 0x0170 */ unsigned __int64 KernelChecksumTicks;
  /* 0x0178 */ unsigned __int64 KernelChecksumIoTicks;
  /* 0x0180 */ union _LARGE_INTEGER AnimationStart;
  /* 0x0188 */ union _LARGE_INTEGER AnimationStop;
  /* 0x0190 */ unsigned long DeviceResumeTime;
  /* 0x0194 */ long Padding_369;
  /* 0x0198 */ unsigned __int64 SecurePagesProcessed;
  /* 0x01a0 */ unsigned __int64 BootPagesProcessed;
  /* 0x01a8 */ unsigned __int64 KernelPagesProcessed;
  /* 0x01b0 */ unsigned __int64 BootBytesWritten;
  /* 0x01b8 */ unsigned __int64 KernelBytesWritten;
  /* 0x01c0 */ unsigned __int64 BootPagesWritten;
  /* 0x01c8 */ unsigned __int64 KernelPagesWritten;
  /* 0x01d0 */ unsigned __int64 BytesWritten;
  /* 0x01d8 */ unsigned long PagesWritten;
  /* 0x01dc */ unsigned long FileRuns;
  /* 0x01e0 */ unsigned long NoMultiStageResumeReason;
  /* 0x01e4 */ unsigned long MaxHuffRatio;
  /* 0x01e8 */ unsigned __int64 AdjustedTotalResumeTime;
  /* 0x01f0 */ unsigned __int64 ResumeCompleteTimestamp;
} PO_HIBER_PERF, *PPO_HIBER_PERF; /* size: 0x01f8 */

struct PO_MEMORY_IMAGE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long ImageType;
  /* 0x0008 */ unsigned long CheckSum;
  /* 0x000c */ unsigned long LengthSelf;
  /* 0x0010 */ unsigned long PageSelf;
  /* 0x0014 */ unsigned long PageSize;
  /* 0x0018 */ union _LARGE_INTEGER SystemTime;
  /* 0x0020 */ unsigned __int64 InterruptTime;
  /* 0x0028 */ unsigned __int64 FeatureFlags;
  /* 0x0030 */ unsigned char HiberFlags;
  /* 0x0031 */ unsigned char HiberSimulateFlags;
  /* 0x0032 */ unsigned char spare[2];
  /* 0x0034 */ unsigned long NoHiberPtes;
  /* 0x0038 */ unsigned long HiberVa;
  /* 0x003c */ unsigned long NoFreePages;
  /* 0x0040 */ unsigned long FreeMapCheck;
  /* 0x0044 */ unsigned long WakeCheck;
  /* 0x0048 */ unsigned __int64 NumPagesForLoader;
  /* 0x0050 */ unsigned long FirstBootRestorePage;
  /* 0x0054 */ unsigned long FirstKernelRestorePage;
  /* 0x0058 */ unsigned long FirstChecksumRestorePage;
  /* 0x005c */ long Padding_370;
  /* 0x0060 */ unsigned __int64 NoChecksumEntries;
  /* 0x0068 */ struct _PO_HIBER_PERF PerfInfo;
  /* 0x0260 */ unsigned long FirmwareRuntimeInformationPages;
  /* 0x0264 */ unsigned long FirmwareRuntimeInformation[1];
  /* 0x0268 */ unsigned long SpareUlong;
  /* 0x026c */ unsigned long NoBootLoaderLogPages;
  /* 0x0270 */ unsigned long BootLoaderLogPages[24];
  /* 0x02d0 */ unsigned long NotUsed;
  /* 0x02d4 */ unsigned long ResumeContextCheck;
  /* 0x02d8 */ unsigned long ResumeContextPages;
  /* 0x02dc */ unsigned char Hiberboot;
  /* 0x02dd */ unsigned char SecureLaunched;
  /* 0x02de */ unsigned char SecureBoot;
  /* 0x02df */ char Padding_371;
  /* 0x02e0 */ unsigned __int64 HvPageTableRoot;
  /* 0x02e8 */ unsigned __int64 HvEntryPoint;
  /* 0x02f0 */ unsigned __int64 HvReservedTransitionAddress;
  /* 0x02f8 */ unsigned __int64 HvReservedTransitionAddressSize;
  /* 0x0300 */ unsigned __int64 BootFlags;
  /* 0x0308 */ unsigned __int64 RestoreProcessorStateRoutine;
  /* 0x0310 */ unsigned long HighestPhysicalPage;
  /* 0x0314 */ unsigned long BitlockerKeyPfns[4];
  /* 0x0324 */ unsigned long HardwareSignature;
  /* 0x0328 */ union _LARGE_INTEGER SMBiosTablePhysicalAddress;
  /* 0x0330 */ unsigned long SMBiosTableLength;
  /* 0x0334 */ unsigned char SMBiosMajorVersion;
  /* 0x0335 */ unsigned char SMBiosMinorVersion;
  /* 0x0336 */ unsigned char HiberResumeXhciHandoffSkip;
  /* 0x0337 */ unsigned char InitializeUSBCore;
  /* 0x0338 */ unsigned char ValidUSBCoreId;
  /* 0x0339 */ unsigned char USBCoreId;
  /* 0x033a */ unsigned char SkipMemoryMapValidation;
  /* 0x033b */ char __PADDING__[5];
}; /* size: 0x0340 */

typedef struct _POP_PER_PROCESSOR_CONTEXT
{
  /* 0x0000 */ unsigned char* UncompressedData;
  /* 0x0004 */ void* MappingVa;
  /* 0x0008 */ void* XpressEncodeWorkspace;
  /* 0x000c */ unsigned char* CompressedDataBuffer;
  /* 0x0010 */ unsigned __int64 CopyTicks;
  /* 0x0018 */ unsigned __int64 CompressTicks;
  /* 0x0020 */ unsigned __int64 BytesCopied;
  /* 0x0028 */ unsigned __int64 PagesProcessed;
  /* 0x0030 */ unsigned __int64 DecompressTicks;
  /* 0x0038 */ unsigned __int64 ResumeCopyTicks;
  /* 0x0040 */ unsigned __int64 SharedBufferTicks;
  /* 0x0048 */ unsigned __int64 DecompressTicksByMethod[2];
  /* 0x0058 */ unsigned __int64 DecompressSizeByMethod[2];
  /* 0x0068 */ unsigned long CompressCount;
  /* 0x006c */ unsigned long HuffCompressCount;
} POP_PER_PROCESSOR_CONTEXT, *PPOP_PER_PROCESSOR_CONTEXT; /* size: 0x0070 */

typedef struct _FAST_ERESOURCE_INTERNAL
{
  /* 0x0000 */ struct _LIST_ENTRY SystemResourcesList;
  /* 0x0008 */ void* ReservedPointer;
  /* 0x000c */ short ActiveCount;
  /* 0x000e */ unsigned short Flag;
  /* 0x0010 */ struct _KWAIT_CHAIN SharedWaiters;
  /* 0x0014 */ struct _KWAIT_CHAIN ExclusiveWaiters;
  /* 0x0018 */ struct _LIST_ENTRY OwnerEntryListHead;
  /* 0x0020 */ unsigned long ActiveEntries;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long NumberOfSharedWaiters;
  /* 0x002c */ unsigned long NumberOfExclusiveWaiters;
  union
  {
    /* 0x0030 */ void* Address;
    /* 0x0030 */ unsigned long CreatorBackTraceIndex;
  }; /* size: 0x0004 */
  /* 0x0034 */ unsigned long SpinLock;
} FAST_ERESOURCE_INTERNAL, *PFAST_ERESOURCE_INTERNAL; /* size: 0x0038 */

typedef struct _WAITING_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ void* CompletionRoutine /* function */;
  /* 0x0010 */ void* Context;
  /* 0x0014 */ struct _KEVENT* Event;
  /* 0x0018 */ unsigned long Information;
  /* 0x001c */ unsigned char BreakAllRH;
  /* 0x001d */ unsigned char OplockBreakNotify;
  /* 0x001e */ char Padding_372[2];
  /* 0x0020 */ struct _FILE_OBJECT* FileObject;
} WAITING_IRP, *PWAITING_IRP; /* size: 0x0024 */

typedef struct _LEARNING_MODE_DATA
{
  /* 0x0000 */ unsigned long Settings;
  /* 0x0004 */ unsigned char Enabled;
  /* 0x0005 */ unsigned char PermissiveModeEnabled;
  /* 0x0006 */ char __PADDING__[2];
} LEARNING_MODE_DATA, *PLEARNING_MODE_DATA; /* size: 0x0008 */

typedef struct _VF_ADDRESS_RANGE
{
  /* 0x0000 */ unsigned char* Start;
  /* 0x0004 */ unsigned char* End;
} VF_ADDRESS_RANGE, *PVF_ADDRESS_RANGE; /* size: 0x0008 */

typedef struct _VI_DEADLOCK_GLOBALS
{
  /* 0x0000 */ __int64 TimeAcquire;
  /* 0x0008 */ __int64 TimeRelease;
  /* 0x0010 */ struct _LIST_ENTRY* ResourceDatabase;
  /* 0x0014 */ unsigned long ResourceDatabaseCount;
  /* 0x0018 */ struct _VF_ADDRESS_RANGE ResourceAddressRange[1023];
  /* 0x2010 */ struct _LIST_ENTRY* ThreadDatabase;
  /* 0x2014 */ unsigned long ThreadDatabaseCount;
  /* 0x2018 */ struct _VF_ADDRESS_RANGE ThreadAddressRange[1023];
  /* 0x4010 */ volatile unsigned long AllocationFailures;
  /* 0x4014 */ unsigned long NodesTrimmedBasedOnAge;
  /* 0x4018 */ unsigned long NodesTrimmedBasedOnCount;
  /* 0x401c */ unsigned long NodesSearched;
  /* 0x4020 */ unsigned long MaxNodesSearched;
  /* 0x4024 */ unsigned long SequenceNumber;
  /* 0x4028 */ unsigned long RecursionDepthLimit;
  /* 0x402c */ unsigned long SearchedNodesLimit;
  /* 0x4030 */ unsigned long DepthLimitHits;
  /* 0x4034 */ unsigned long SearchLimitHits;
  /* 0x4038 */ unsigned long StackLimitHits;
  /* 0x403c */ unsigned long ABC_ACB_Skipped;
  /* 0x4040 */ unsigned long OutOfOrderReleases;
  /* 0x4044 */ unsigned long NodesReleasedOutOfOrder;
  /* 0x4048 */ unsigned long TotalReleases;
  /* 0x404c */ unsigned long RootNodesDeleted;
  /* 0x4050 */ unsigned long ForgetHistoryCounter;
  /* 0x4054 */ void* Instigator;
  /* 0x4058 */ unsigned long NumberOfParticipants;
  /* 0x405c */ struct _VI_DEADLOCK_NODE* Participant[32];
  /* 0x40dc */ long ChildrenCountWatermark;
  /* 0x40e0 */ enum _KERNEL_STACK_LIMITS StackType;
  /* 0x40e4 */ unsigned long StackLowLimit;
  /* 0x40e8 */ unsigned long StackHighLimit;
  /* 0x40ec */ long __PADDING__[1];
} VI_DEADLOCK_GLOBALS, *PVI_DEADLOCK_GLOBALS; /* size: 0x40f0 */

typedef struct _TRIAGE_9F_POWER
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ struct _LIST_ENTRY* IrpList;
  /* 0x0008 */ struct _LIST_ENTRY* ThreadList;
  /* 0x000c */ struct _TRIAGE_EX_WORK_QUEUE* DelayedWorkQueue;
  /* 0x0010 */ struct _TRIAGE_EX_WORK_QUEUE* DelayedIoWorkQueue;
} TRIAGE_9F_POWER, *PTRIAGE_9F_POWER; /* size: 0x0014 */

typedef struct _PTE_TRACKER
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _MDL* Mdl;
  /* 0x000c */ unsigned long Count;
  /* 0x0010 */ void* SystemVa;
  /* 0x0014 */ void* StartVa;
  /* 0x0018 */ unsigned long Offset;
  /* 0x001c */ unsigned long Length;
  /* 0x0020 */ unsigned long Page;
  struct /* bitfield */
  {
    /* 0x0024 */ unsigned long IoMapping : 1; /* bit position: 0 */
    /* 0x0024 */ unsigned long Matched : 1; /* bit position: 1 */
    /* 0x0024 */ unsigned long CacheAttribute : 2; /* bit position: 2 */
    /* 0x0024 */ unsigned long GuardPte : 1; /* bit position: 4 */
    /* 0x0024 */ unsigned long Spare : 27; /* bit position: 5 */
  }; /* bitfield */
  /* 0x0028 */ void* StackTrace[7];
} PTE_TRACKER, *PPTE_TRACKER; /* size: 0x0044 */

typedef struct _CM_FAST_LEAF_HINT
{
  union
  {
    /* 0x0000 */ unsigned char Characters[4];
    /* 0x0000 */ unsigned long FullHint;
  }; /* size: 0x0004 */
} CM_FAST_LEAF_HINT, *PCM_FAST_LEAF_HINT; /* size: 0x0004 */

typedef struct _CM_INDEX
{
  /* 0x0000 */ unsigned long Cell;
  union
  {
    /* 0x0004 */ struct _CM_FAST_LEAF_HINT NameHint;
    /* 0x0004 */ struct _CM_COMPONENT_HASH HashKey;
  }; /* size: 0x0004 */
} CM_INDEX, *PCM_INDEX; /* size: 0x0008 */

typedef struct _CRITICAL_PROCESS_EXCEPTION_DATA
{
  /* 0x0000 */ struct _GUID ReportId;
  /* 0x0010 */ struct _UNICODE_STRING ModuleName;
  /* 0x0018 */ unsigned long ModuleTimestamp;
  /* 0x001c */ unsigned long ModuleSize;
  /* 0x0020 */ unsigned __int64 Offset;
} CRITICAL_PROCESS_EXCEPTION_DATA, *PCRITICAL_PROCESS_EXCEPTION_DATA; /* size: 0x0028 */

typedef struct _CALL_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ struct _LIST_ENTRY HashTable[64];
} CALL_PERFORMANCE_DATA, *PCALL_PERFORMANCE_DATA; /* size: 0x0204 */

typedef struct _SEP_LOWBOX_NUMBER_MAPPING
{
  /* 0x0000 */ struct _EX_PUSH_LOCK Lock;
  /* 0x0004 */ struct _RTL_BITMAP Bitmap;
  /* 0x000c */ struct _RTL_DYNAMIC_HASH_TABLE* HashTable;
  /* 0x0010 */ unsigned char Active;
  /* 0x0011 */ char __PADDING__[3];
} SEP_LOWBOX_NUMBER_MAPPING, *PSEP_LOWBOX_NUMBER_MAPPING; /* size: 0x0014 */

typedef struct _SESSION_LOWBOX_MAP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ struct _SEP_LOWBOX_NUMBER_MAPPING LowboxMap;
} SESSION_LOWBOX_MAP, *PSESSION_LOWBOX_MAP; /* size: 0x0020 */

struct PROCESSOR_PERFSTATE_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ unsigned char MaxThrottle;
  /* 0x0005 */ unsigned char MinThrottle;
  /* 0x0006 */ unsigned char BusyAdjThreshold;
  union
  {
    /* 0x0007 */ unsigned char Spare;
    union
    {
      union
      {
        /* 0x0007 */ unsigned char AsUCHAR;
        struct /* bitfield */
        {
          /* 0x0007 */ unsigned char NoDomainAccounting : 1; /* bit position: 0 */
          /* 0x0007 */ unsigned char IncreasePolicy : 2; /* bit position: 1 */
          /* 0x0007 */ unsigned char DecreasePolicy : 2; /* bit position: 3 */
          /* 0x0007 */ unsigned char Reserved : 3; /* bit position: 5 */
        }; /* bitfield */
      }; /* size: 0x0001 */
    } /* size: 0x0001 */ Flags;
  }; /* size: 0x0001 */
  /* 0x0008 */ unsigned long TimeCheck;
  /* 0x000c */ unsigned long IncreaseTime;
  /* 0x0010 */ unsigned long DecreaseTime;
  /* 0x0014 */ unsigned long IncreasePercent;
  /* 0x0018 */ unsigned long DecreasePercent;
}; /* size: 0x001c */

struct _LDRP_LOAD_CONTEXT;

typedef struct _LDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0008 */ struct _LIST_ENTRY InMemoryOrderLinks;
  /* 0x0010 */ struct _LIST_ENTRY InInitializationOrderLinks;
  /* 0x0018 */ void* DllBase;
  /* 0x001c */ void* EntryPoint;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ struct _UNICODE_STRING FullDllName;
  /* 0x002c */ struct _UNICODE_STRING BaseDllName;
  union
  {
    /* 0x0034 */ unsigned char FlagGroup[4];
    /* 0x0034 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0034 */ unsigned long PackagedBinary : 1; /* bit position: 0 */
      /* 0x0034 */ unsigned long MarkedForRemoval : 1; /* bit position: 1 */
      /* 0x0034 */ unsigned long ImageDll : 1; /* bit position: 2 */
      /* 0x0034 */ unsigned long LoadNotificationsSent : 1; /* bit position: 3 */
      /* 0x0034 */ unsigned long TelemetryEntryProcessed : 1; /* bit position: 4 */
      /* 0x0034 */ unsigned long ProcessStaticImport : 1; /* bit position: 5 */
      /* 0x0034 */ unsigned long InLegacyLists : 1; /* bit position: 6 */
      /* 0x0034 */ unsigned long InIndexes : 1; /* bit position: 7 */
      /* 0x0034 */ unsigned long ShimDll : 1; /* bit position: 8 */
      /* 0x0034 */ unsigned long InExceptionTable : 1; /* bit position: 9 */
      /* 0x0034 */ unsigned long ReservedFlags1 : 2; /* bit position: 10 */
      /* 0x0034 */ unsigned long LoadInProgress : 1; /* bit position: 12 */
      /* 0x0034 */ unsigned long LoadConfigProcessed : 1; /* bit position: 13 */
      /* 0x0034 */ unsigned long EntryProcessed : 1; /* bit position: 14 */
      /* 0x0034 */ unsigned long ProtectDelayLoad : 1; /* bit position: 15 */
      /* 0x0034 */ unsigned long ReservedFlags3 : 2; /* bit position: 16 */
      /* 0x0034 */ unsigned long DontCallForThreads : 1; /* bit position: 18 */
      /* 0x0034 */ unsigned long ProcessAttachCalled : 1; /* bit position: 19 */
      /* 0x0034 */ unsigned long ProcessAttachFailed : 1; /* bit position: 20 */
      /* 0x0034 */ unsigned long CorDeferredValidate : 1; /* bit position: 21 */
      /* 0x0034 */ unsigned long CorImage : 1; /* bit position: 22 */
      /* 0x0034 */ unsigned long DontRelocate : 1; /* bit position: 23 */
      /* 0x0034 */ unsigned long CorILOnly : 1; /* bit position: 24 */
      /* 0x0034 */ unsigned long ChpeImage : 1; /* bit position: 25 */
      /* 0x0034 */ unsigned long ReservedFlags5 : 2; /* bit position: 26 */
      /* 0x0034 */ unsigned long Redirected : 1; /* bit position: 28 */
      /* 0x0034 */ unsigned long ReservedFlags6 : 2; /* bit position: 29 */
      /* 0x0034 */ unsigned long CompatDatabaseProcessed : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0038 */ unsigned short ObsoleteLoadCount;
  /* 0x003a */ unsigned short TlsIndex;
  /* 0x003c */ struct _LIST_ENTRY HashLinks;
  /* 0x0044 */ unsigned long TimeDateStamp;
  /* 0x0048 */ struct _ACTIVATION_CONTEXT* EntryPointActivationContext;
  /* 0x004c */ void* Lock;
  /* 0x0050 */ struct _LDR_DDAG_NODE* DdagNode;
  /* 0x0054 */ struct _LIST_ENTRY NodeModuleLink;
  /* 0x005c */ struct _LDRP_LOAD_CONTEXT* LoadContext;
  /* 0x0060 */ void* ParentDllBase;
  /* 0x0064 */ void* SwitchBackContext;
  /* 0x0068 */ struct _RTL_BALANCED_NODE BaseAddressIndexNode;
  /* 0x0074 */ struct _RTL_BALANCED_NODE MappingInfoIndexNode;
  /* 0x0080 */ unsigned long OriginalBase;
  /* 0x0084 */ long Padding_373;
  /* 0x0088 */ union _LARGE_INTEGER LoadTime;
  /* 0x0090 */ unsigned long BaseNameHashValue;
  /* 0x0094 */ enum _LDR_DLL_LOAD_REASON LoadReason;
  /* 0x0098 */ unsigned long ImplicitPathOptions;
  /* 0x009c */ unsigned long ReferenceCount;
  /* 0x00a0 */ unsigned long DependentLoadFlags;
  /* 0x00a4 */ unsigned char SigningLevel;
  /* 0x00a5 */ char __PADDING__[3];
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY; /* size: 0x00a8 */

typedef struct _LDR_DDAG_NODE
{
  /* 0x0000 */ struct _LIST_ENTRY Modules;
  /* 0x0008 */ struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;
  /* 0x000c */ unsigned long LoadCount;
  /* 0x0010 */ unsigned long LoadWhileUnloadingCount;
  /* 0x0014 */ unsigned long LowestLink;
  /* 0x0018 */ struct _LDRP_CSLIST Dependencies;
  /* 0x001c */ struct _LDRP_CSLIST IncomingDependencies;
  /* 0x0020 */ enum _LDR_DDAG_STATE State;
  /* 0x0024 */ struct _SINGLE_LIST_ENTRY CondenseLink;
  /* 0x0028 */ unsigned long PreorderNumber;
} LDR_DDAG_NODE, *PLDR_DDAG_NODE; /* size: 0x002c */

typedef struct _LDR_SERVICE_TAG_RECORD
{
  /* 0x0000 */ struct _LDR_SERVICE_TAG_RECORD* Next;
  /* 0x0004 */ unsigned long ServiceTag;
} LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD; /* size: 0x0008 */

typedef struct _KTIMER2_COLLECTION
{
  /* 0x0000 */ struct _RTL_RB_TREE Tree;
  /* 0x0008 */ unsigned __int64 NextDueTime;
} KTIMER2_COLLECTION, *PKTIMER2_COLLECTION; /* size: 0x0010 */

typedef struct _VF_WATCHDOG_IRP
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _IRP* Irp;
  /* 0x000c */ unsigned long DueTickCount;
  /* 0x0010 */ volatile unsigned char Inserted;
  /* 0x0011 */ char TrackedStackLocation;
  /* 0x0012 */ unsigned short CancelTimeoutTicks;
} VF_WATCHDOG_IRP, *PVF_WATCHDOG_IRP; /* size: 0x0014 */

typedef struct _DEVICE_DESCRIPTION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned char Master;
  /* 0x0005 */ unsigned char ScatterGather;
  /* 0x0006 */ unsigned char DemandMode;
  /* 0x0007 */ unsigned char AutoInitialize;
  /* 0x0008 */ unsigned char Dma32BitAddresses;
  /* 0x0009 */ unsigned char IgnoreCount;
  /* 0x000a */ unsigned char Reserved1;
  /* 0x000b */ unsigned char Dma64BitAddresses;
  /* 0x000c */ unsigned long BusNumber;
  /* 0x0010 */ unsigned long DmaChannel;
  /* 0x0014 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0018 */ enum _DMA_WIDTH DmaWidth;
  /* 0x001c */ enum _DMA_SPEED DmaSpeed;
  /* 0x0020 */ unsigned long MaximumLength;
  /* 0x0024 */ unsigned long DmaPort;
  /* 0x0028 */ unsigned long DmaAddressWidth;
  /* 0x002c */ unsigned long DmaControllerInstance;
  /* 0x0030 */ unsigned long DmaRequestLine;
  /* 0x0034 */ long Padding_374;
  /* 0x0038 */ union _LARGE_INTEGER DeviceAddress;
} DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION; /* size: 0x0040 */

typedef struct _IMAGE_SECTION_HEADER
{
  /* 0x0000 */ unsigned char Name[8];
  union
  {
    union
    {
      /* 0x0008 */ unsigned long PhysicalAddress;
      /* 0x0008 */ unsigned long VirtualSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Misc;
  /* 0x000c */ unsigned long VirtualAddress;
  /* 0x0010 */ unsigned long SizeOfRawData;
  /* 0x0014 */ unsigned long PointerToRawData;
  /* 0x0018 */ unsigned long PointerToRelocations;
  /* 0x001c */ unsigned long PointerToLinenumbers;
  /* 0x0020 */ unsigned short NumberOfRelocations;
  /* 0x0022 */ unsigned short NumberOfLinenumbers;
  /* 0x0024 */ unsigned long Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; /* size: 0x0028 */

typedef struct _FAST_OWNER_ENTRY_INTERNAL
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned char AbLockHandle;
  struct /* bitfield */
  {
    /* 0x0009 */ unsigned char Disowned : 1; /* bit position: 0 */
    /* 0x0009 */ unsigned char DynamicallyAllocated : 1; /* bit position: 1 */
    /* 0x0009 */ unsigned char CallerExclusive : 1; /* bit position: 2 */
  }; /* bitfield */
  /* 0x000a */ unsigned char IsSublistHead;
  /* 0x000b */ unsigned char IsWaiting;
  /* 0x000c */ void* LockAddress;
  /* 0x0010 */ void* ThreadAddress;
  /* 0x0014 */ struct _LIST_ENTRY SublistHead;
  /* 0x001c */ struct _LIST_ENTRY LockListEntry;
} FAST_OWNER_ENTRY_INTERNAL, *PFAST_OWNER_ENTRY_INTERNAL; /* size: 0x0024 */

typedef struct _KSECONDARY_IDT_ENTRY
{
  /* 0x0000 */ unsigned long SpinLock;
  /* 0x0004 */ struct _KEVENT ConnectLock;
  /* 0x0014 */ unsigned char LineMasked;
  /* 0x0015 */ char Padding_375[3];
  /* 0x0018 */ struct _KINTERRUPT* InterruptList;
} KSECONDARY_IDT_ENTRY, *PKSECONDARY_IDT_ENTRY; /* size: 0x001c */

typedef struct _ETW_WMITRACE_WORK
{
  /* 0x0000 */ unsigned long LoggerId;
  /* 0x0004 */ unsigned long SiloSessionId;
  union
  {
    struct
    {
      /* 0x0008 */ char LoggerName[65];
      /* 0x0049 */ char FileName[129];
      /* 0x00ca */ char Padding_376[2];
      /* 0x00cc */ unsigned long MaximumFileSize;
      /* 0x00d0 */ unsigned long MinBuffers;
      /* 0x00d4 */ unsigned long MaxBuffers;
      /* 0x00d8 */ unsigned long BufferSize;
      /* 0x00dc */ unsigned long Mode;
      /* 0x00e0 */ unsigned long FlushTimer;
    }; /* size: 0x00da */
    struct
    {
      /* 0x0008 */ unsigned __int64 MatchAny;
      /* 0x0010 */ unsigned __int64 MatchAll;
      /* 0x0018 */ unsigned long EnableProperty;
      /* 0x001c */ struct _GUID Guid;
      /* 0x002c */ unsigned char Level;
      /* 0x002d */ char Padding_377[187];
      /* 0x00e8 */ long Status;
      /* 0x00ec */ long __PADDING__[1];
    }; /* size: 0x002d */
  }; /* size: 0x00da */
} ETW_WMITRACE_WORK, *PETW_WMITRACE_WORK; /* size: 0x00f0 */

typedef struct _MAPPED_FILE_SEGMENT
{
  /* 0x0000 */ struct _CONTROL_AREA* ControlArea;
  /* 0x0004 */ unsigned long TotalNumberOfPtes;
  /* 0x0008 */ struct _SEGMENT_FLAGS SegmentFlags;
  /* 0x000c */ unsigned long NumberOfCommittedPages;
  /* 0x0010 */ unsigned __int64 SizeOfSegment;
  union
  {
    /* 0x0018 */ struct _MMEXTEND_INFO* ExtendInfo;
    /* 0x0018 */ void* BasedAddress;
  }; /* size: 0x0004 */
  /* 0x001c */ struct _EX_PUSH_LOCK SegmentLock;
} MAPPED_FILE_SEGMENT, *PMAPPED_FILE_SEGMENT; /* size: 0x0020 */

typedef struct _POOL_HEADER
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned short PreviousSize : 9; /* bit position: 0 */
        /* 0x0000 */ unsigned short PoolIndex : 7; /* bit position: 9 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short BlockSize : 9; /* bit position: 0 */
        /* 0x0002 */ unsigned short PoolType : 7; /* bit position: 9 */
      }; /* bitfield */
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long Ulong1;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned long PoolTag;
    struct
    {
      /* 0x0004 */ unsigned short AllocatorBackTraceIndex;
      /* 0x0006 */ unsigned short PoolTagHash;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
} POOL_HEADER, *PPOOL_HEADER; /* size: 0x0008 */

typedef struct _POP_POWER_SETTING_VALUES
{
  /* 0x0000 */ unsigned long StructureSize;
  /* 0x0004 */ struct _SYSTEM_POWER_POLICY PopPolicy;
  /* 0x00ec */ enum SYSTEM_POWER_CONDITION CurrentAcDcPowerState;
  /* 0x00f0 */ unsigned char AwayModeEnabled;
  /* 0x00f1 */ unsigned char AwayModeEngaged;
  /* 0x00f2 */ unsigned char AwayModePolicyAllowed;
  /* 0x00f3 */ char Padding_378;
  /* 0x00f4 */ volatile long AwayModeIgnoreUserPresent;
  /* 0x00f8 */ volatile long AwayModeIgnoreAction;
  /* 0x00fc */ unsigned char DisableFastS4;
  /* 0x00fd */ unsigned char DisableStandbyStates;
  /* 0x00fe */ char Padding_379[2];
  /* 0x0100 */ unsigned long UnattendSleepTimeout;
  /* 0x0104 */ volatile unsigned long DiskIgnoreTime;
  /* 0x0108 */ volatile unsigned long DeviceIdlePolicy;
  /* 0x010c */ unsigned long VideoDimTimeout;
  /* 0x0110 */ unsigned long VideoNormalBrightness;
  /* 0x0114 */ unsigned long VideoDimBrightness;
  /* 0x0118 */ unsigned long AlsOffset;
  /* 0x011c */ unsigned long AlsEnabled;
  /* 0x0120 */ unsigned long EsBrightness;
  /* 0x0124 */ unsigned char SwitchShutdownForced;
  /* 0x0125 */ char Padding_380[3];
  /* 0x0128 */ unsigned long SystemCoolingPolicy;
  /* 0x012c */ unsigned char MediaBufferingEngaged;
  /* 0x012d */ unsigned char AudioActivity;
  /* 0x012e */ unsigned char FullscreenVideoPlayback;
  /* 0x012f */ char Padding_381;
  /* 0x0130 */ unsigned long EsBatteryThreshold;
  /* 0x0134 */ unsigned char EsAggressive;
  /* 0x0135 */ unsigned char EsUserAwaySetting;
  /* 0x0136 */ char Padding_382[2];
  /* 0x0138 */ unsigned long ConnectivityInStandby;
  /* 0x013c */ unsigned long DisconnectedStandbyMode;
  /* 0x0140 */ unsigned long UserPresencePredictionEnabled;
  /* 0x0144 */ unsigned char AirplaneModeEnabled;
  /* 0x0145 */ unsigned char BluetoothDeviceCharging;
  /* 0x0146 */ char __PADDING__[2];
} POP_POWER_SETTING_VALUES, *PPOP_POWER_SETTING_VALUES; /* size: 0x0148 */

typedef struct _HEAP_UCR_DESCRIPTOR
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _LIST_ENTRY SegmentEntry;
  /* 0x0010 */ void* Address;
  /* 0x0014 */ unsigned long Size;
} HEAP_UCR_DESCRIPTOR, *PHEAP_UCR_DESCRIPTOR; /* size: 0x0018 */

typedef struct _NONOPAQUE_OPLOCK
{
  /* 0x0000 */ struct _IRP* IrpExclusiveOplock;
  /* 0x0004 */ struct _FILE_OBJECT* FileObject;
  /* 0x0008 */ struct _EPROCESS* ExclusiveOplockOwner;
  /* 0x000c */ struct _ETHREAD* ExclusiveOplockOwnerThread;
  /* 0x0010 */ unsigned char WaiterPriority;
  /* 0x0011 */ char Padding_383[3];
  /* 0x0014 */ struct _LIST_ENTRY IrpOplocksR;
  /* 0x001c */ struct _LIST_ENTRY IrpOplocksRH;
  /* 0x0024 */ struct _LIST_ENTRY RHBreakQueue;
  /* 0x002c */ struct _LIST_ENTRY WaitingIrps;
  /* 0x0034 */ struct _LIST_ENTRY DelayAckFileObjectQueue;
  /* 0x003c */ struct _LIST_ENTRY AtomicQueue;
  /* 0x0044 */ struct _GUID* DeleterParentKey;
  /* 0x0048 */ unsigned long OplockState;
  /* 0x004c */ struct _FAST_MUTEX* FastMutex;
} NONOPAQUE_OPLOCK, *PNONOPAQUE_OPLOCK; /* size: 0x0050 */

typedef struct _RTLP_RANGE_LIST_ENTRY
{
  /* 0x0000 */ unsigned __int64 Start;
  /* 0x0008 */ unsigned __int64 End;
  union
  {
    struct
    {
      /* 0x0010 */ void* UserData;
      /* 0x0014 */ void* Owner;
    } /* size: 0x0008 */ Allocated;
    struct
    {
      /* 0x0010 */ struct _LIST_ENTRY ListHead;
    } /* size: 0x0008 */ Merged;
  }; /* size: 0x0008 */
  /* 0x0018 */ unsigned char Attributes;
  /* 0x0019 */ unsigned char PublicFlags;
  /* 0x001a */ unsigned short PrivateFlags;
  /* 0x001c */ struct _LIST_ENTRY ListEntry;
  /* 0x0024 */ long __PADDING__[1];
} RTLP_RANGE_LIST_ENTRY, *PRTLP_RANGE_LIST_ENTRY; /* size: 0x0028 */

typedef struct _RH_OP_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY Links;
  /* 0x0008 */ struct _IRP* OplockRequestIrp;
  /* 0x000c */ struct _FILE_OBJECT* OplockRequestFileObject;
  /* 0x0010 */ struct _EPROCESS* OplockRequestProcess;
  /* 0x0014 */ struct _ETHREAD* OplockOwnerThread;
  /* 0x0018 */ unsigned long Flags;
  /* 0x001c */ struct _LIST_ENTRY AtomicLinks;
} RH_OP_CONTEXT, *PRH_OP_CONTEXT; /* size: 0x0024 */

typedef struct _THERMAL_INFORMATION
{
  /* 0x0000 */ unsigned long ThermalStamp;
  /* 0x0004 */ unsigned long ThermalConstant1;
  /* 0x0008 */ unsigned long ThermalConstant2;
  /* 0x000c */ unsigned long Processors;
  /* 0x0010 */ unsigned long SamplingPeriod;
  /* 0x0014 */ unsigned long CurrentTemperature;
  /* 0x0018 */ unsigned long PassiveTripPoint;
  /* 0x001c */ unsigned long CriticalTripPoint;
  /* 0x0020 */ unsigned char ActiveTripPointCount;
  /* 0x0021 */ char Padding_384[3];
  /* 0x0024 */ unsigned long ActiveTripPoint[10];
} THERMAL_INFORMATION, *PTHERMAL_INFORMATION; /* size: 0x004c */

typedef struct _HIVE_LIST_ENTRY
{
  /* 0x0000 */ wchar_t* FileName;
  /* 0x0004 */ wchar_t* BaseName;
  /* 0x0008 */ wchar_t* RegRootName;
  /* 0x000c */ struct _CMHIVE* CmHive;
  /* 0x0010 */ unsigned long HHiveFlags;
  /* 0x0014 */ unsigned long CmHiveFlags;
  /* 0x0018 */ unsigned long CmKcbCacheSize;
  /* 0x001c */ struct _CMHIVE* CmHive2;
  /* 0x0020 */ unsigned char HiveMounted;
  /* 0x0021 */ unsigned char ThreadFinished;
  /* 0x0022 */ unsigned char ThreadStarted;
  /* 0x0023 */ unsigned char Allocate;
  /* 0x0024 */ unsigned char WinPERequired;
  /* 0x0025 */ char Padding_385[3];
  /* 0x0028 */ struct _KEVENT StartEvent;
  /* 0x0038 */ struct _KEVENT FinishedEvent;
  /* 0x0048 */ struct _KEVENT MountLock;
  /* 0x0058 */ struct _EX_PUSH_LOCK MountCallbackLock;
  /* 0x005c */ struct _EX_PUSH_LOCK CallbackListLock;
  /* 0x0060 */ struct _LIST_ENTRY CallbackListHead;
  /* 0x0068 */ struct _WORK_QUEUE_ITEM* CallbackWorkItem;
  /* 0x006c */ volatile long CallbackWorkItemBusy;
  /* 0x0070 */ struct _UNICODE_STRING FilePath;
} HIVE_LIST_ENTRY, *PHIVE_LIST_ENTRY; /* size: 0x0078 */

typedef struct _NB10
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long Offset;
  /* 0x0008 */ unsigned long TimeStamp;
  /* 0x000c */ unsigned long Age;
  /* 0x0010 */ char PdbName[1];
  /* 0x0011 */ char __PADDING__[3];
} NB10, *PNB10; /* size: 0x0014 */

typedef struct _RSDS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _GUID Guid;
  /* 0x0014 */ unsigned long Age;
  /* 0x0018 */ char PdbName[1];
  /* 0x0019 */ char __PADDING__[3];
} RSDS, *PRSDS; /* size: 0x001c */

typedef union _CVDD
{
  union
  {
    /* 0x0000 */ unsigned long Signature;
    /* 0x0000 */ struct _NB10 NB10;
    /* 0x0000 */ struct _RSDS RsDs;
  }; /* size: 0x001c */
} CVDD, *PCVDD; /* size: 0x001c */

typedef struct _ETW_DEBUGID_TRACKING_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ unsigned char ConsumersNotified;
  /* 0x0009 */ unsigned char Spare[3];
  /* 0x000c */ unsigned long DebugIdSize;
  /* 0x0010 */ union _CVDD DebugId;
} ETW_DEBUGID_TRACKING_ENTRY, *PETW_DEBUGID_TRACKING_ENTRY; /* size: 0x002c */

typedef struct _KWAIT_CHAIN_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ struct _KTHREAD* Thread;
  /* 0x000c */ struct _KEVENT Event;
} KWAIT_CHAIN_ENTRY, *PKWAIT_CHAIN_ENTRY; /* size: 0x001c */

typedef struct _IMAGE_DEBUG_DIRECTORY
{
  /* 0x0000 */ unsigned long Characteristics;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned long SizeOfData;
  /* 0x0014 */ unsigned long AddressOfRawData;
  /* 0x0018 */ unsigned long PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY; /* size: 0x001c */

typedef struct _OBJECT_HEADER_PADDING_INFO
{
  /* 0x0000 */ unsigned long PaddingAmount;
} OBJECT_HEADER_PADDING_INFO, *POBJECT_HEADER_PADDING_INFO; /* size: 0x0004 */

typedef struct _CALL_HASH_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0008 */ void* CallersAddress;
  /* 0x000c */ void* CallersCaller;
  /* 0x0010 */ unsigned long CallCount;
} CALL_HASH_ENTRY, *PCALL_HASH_ENTRY; /* size: 0x0014 */

typedef union _MI_FLAGS
{
  union
  {
    /* 0x0000 */ long EntireFlags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long VerifierEnabled : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long KernelVerifierEnabled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long LargePageKernel : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long StopOn4d : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long InitializationPhase : 2; /* bit position: 4 */
      /* 0x0000 */ unsigned long PageKernelStacks : 1; /* bit position: 6 */
      /* 0x0000 */ unsigned long CheckZeroPages : 1; /* bit position: 7 */
      /* 0x0000 */ unsigned long ProcessorPrewalks : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned long ProcessorPostwalks : 1; /* bit position: 9 */
      /* 0x0000 */ unsigned long CoverageBuild : 1; /* bit position: 10 */
      /* 0x0000 */ unsigned long AccessBitReplacementDisabled : 1; /* bit position: 11 */
      /* 0x0000 */ unsigned long CheckExecute : 1; /* bit position: 12 */
      /* 0x0000 */ unsigned long ProtectedPagesEnabled : 1; /* bit position: 13 */
      /* 0x0000 */ unsigned long SecureRelocations : 1; /* bit position: 14 */
      /* 0x0000 */ unsigned long StrongPageIdentity : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned long StrongCodeGuarantees : 1; /* bit position: 16 */
      /* 0x0000 */ unsigned long HardCodeGuarantees : 1; /* bit position: 17 */
      /* 0x0000 */ unsigned long ExecutePagePrivilegeRequired : 1; /* bit position: 18 */
      /* 0x0000 */ unsigned long SecureKernelCfgEnabled : 1; /* bit position: 19 */
      /* 0x0000 */ unsigned long FullHvci : 1; /* bit position: 20 */
      /* 0x0000 */ unsigned long BootDebuggerActive : 1; /* bit position: 21 */
      /* 0x0000 */ unsigned long ExceptionHandlingReady : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned long ShadowStacksSupported : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned long AccessBitFenceRequired : 1; /* bit position: 24 */
      /* 0x0000 */ unsigned long PfnDatabaseExists : 1; /* bit position: 25 */
      /* 0x0000 */ unsigned long DeferredHotAddsCompleted : 1; /* bit position: 26 */
      /* 0x0000 */ unsigned long SystemPtesReady : 1; /* bit position: 27 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} MI_FLAGS, *PMI_FLAGS; /* size: 0x0004 */

typedef struct _MI_TRIAGE_DUMP_DATA
{
  /* 0x0000 */ unsigned long BadPageCount;
  /* 0x0004 */ long BadPagesDetected;
  /* 0x0008 */ long ZeroedPageSingleBitErrorsDetected;
  /* 0x000c */ long ScrubPasses;
  /* 0x0010 */ long ScrubBadPagesFound;
  /* 0x0014 */ unsigned long PageHashErrors;
  /* 0x0018 */ unsigned __int64 FeatureBits;
  /* 0x0020 */ unsigned long TimeZoneId;
  /* 0x0024 */ union _MI_FLAGS Flags;
  /* 0x0028 */ void* VsmConnection;
  /* 0x002c */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionChainTerminator;
  /* 0x0030 */ struct _EXCEPTION_REGISTRATION_RECORD ExceptionChainTerminatorRecord;
} MI_TRIAGE_DUMP_DATA, *PMI_TRIAGE_DUMP_DATA; /* size: 0x0038 */

/*
??$ToSectors@_J@SC_DISK@@QAE_J_J@Z
??$Write@U?$_tlgWrapperByRef@$0BA@@@U?$_tlgWrapperByRef@$07@@U2@U2@U?$_tlgWrapperByVal@$03@@U3@U3@U3@U3@@?$_tlgWriteTemplate@$$A6GJPBU_tlgProvider_t@@PBXPBU_GUID@@2IPAU_EVENT_DATA_DESCRIPTOR@@@Z$1?_tlgWriteTransfer_EtwWriteTransfer@@YGJ0122I3@ZPBU2@PBU2@@@SGJPBU_tlgProvider_t@@PBXPBU_GUID@@2ABU?$_tlgWrapperByRef@$0BA@@@ABU?$_tlgWrapperByRef@$07@@44ABU?$_tlgWrapperByVal@$03@@5555@Z
??0SC_DEVICE@@QAE@XZ
??0SC_DISK@@QAE@XZ
??1SC_DEVICE@@UAE@XZ
??1SC_DISK@@UAE@XZ
??3SC_ENV_ALLOCATOR@@SGXPAX@Z
??_ENT_DISK@@UAEPAXI@Z
??_ESC_DEVICE@@UAEPAXI@Z
??_ESC_DISK@@UAEPAXI@Z
??_GNT_DISK@@UAEPAXI@Z
??_GSC_DEVICE@@UAEPAXI@Z
??_GSC_DISK@@UAEPAXI@Z
?Allocate@SC_ENV@@SGPAXIE@Z
?BTreeChangeKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGKPAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeDeleteEx@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGJPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGJPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGJPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeDeleteEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGJPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGPAPAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAUPATH_ENTRY@1@KPAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGPAPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAUPATH_ENTRY@1@KPAUSEARCH_RESULT@1@@Z
?BTreeDescendToSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAUPATH_ENTRY@1@KPAUSEARCH_RESULT@1@@Z
?BTreeFindLeafSibling@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAU23@K@Z
?BTreeFindLeafSibling@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAU23@K@Z
?BTreeFindLeafSibling@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAU23@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeFindLeafSiblingEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeFindNextEntry@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAU_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeFindPreviousEntry@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGPAU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGKPAUSEARCH_RESULT@1@KPAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGKPAUSEARCH_RESULT@1@KPAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGKPAUSEARCH_RESULT@1@KPAUPATH_ENTRY@1@@Z
?BTreeFindSeperatorIndexEntry@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGKPAUSEARCH_RESULT@1@KPAUPATH_ENTRY@1@@Z
?BTreeInsert@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGJPAU1@PAU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@PAUSEARCH_RESULT@1@@Z
?BTreeInsertEx@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGJPAU1@PAUSEARCH_RESULT@1@PAK@Z
?BTreeInsertEx@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGJPAU1@PAUSEARCH_RESULT@1@PAK@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGJPAU1@PAUSEARCH_RESULT@1@PAT_SM_PAGE_KEY@@@Z
?BTreeInsertEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGJPAU1@PAUSEARCH_RESULT@1@PAT_SM_PAGE_KEY@@@Z
?BTreeIteratorAttachEx@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAUITERATOR@1@PAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGXPAUITERATOR@1@PAU1@@Z
?BTreeIteratorCleanup@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAUITERATOR@1@PAU1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUITERATOR@1@PAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUITERATOR@1@PAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUITERATOR@1@PAUSEARCH_RESULT@1@@Z
?BTreeIteratorFromSearchResult@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUITERATOR@1@PAUSEARCH_RESULT@1@@Z
?BTreeMergeNodes@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUSEARCH_RESULT@1@PAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUSEARCH_RESULT@1@PAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUSEARCH_RESULT@1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeMergeNodes@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUSEARCH_RESULT@1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNewNode@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@KK@Z
?BTreeNewNode@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PAU1@KK@Z
?BTreeNewNode@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@KK@Z
?BTreeNodeFree@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@@Z
?BTreeNodeFree@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@@Z
?BTreeRedistribute@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeRedistribute@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGJPAU1@KPAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGJPAU1@KPAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGJPAU1@T_SM_PAGE_KEY@@PAUSEARCH_RESULT@1@@Z
?BTreeSearchKey@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGJPAU1@T_SM_PAGE_KEY@@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultCleanup@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultCleanup@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultDeref@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGXPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultDeref@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSearchResultInit@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGXPAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultInit@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGXPAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultInit@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGXPAUSEARCH_RESULT@1@K@Z
?BTreeSearchResultIterStart@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGJPAUSEARCH_RESULT@1@PAU1@KW4_BTREE_ITERATOR_DISPOSITION@1@@Z
?BTreeSplitChild@?$B_TREE@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_HASH_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_HASH_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGPAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeSplitChild@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGPAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU1@PAUSEARCH_RESULT@1@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@SGJPAU1@PAUNODE@?$B_TREE_HEADER@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU_SINGLE_LIST_ENTRY@@P6GJPAX3PAK@Z3PAPAU23@@Z
?BTreeWalkPostOrderInternal@?$B_TREE@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@SGJPAU1@PAUNODE@?$B_TREE_HEADER@T_SM_PAGE_KEY@@U_ST_PAGE_ENTRY@?$ST_STORE@USM_TRAITS@@@@@@PAU_SINGLE_LIST_ENTRY@@P6GJPAX3PAK@Z3PAPAU23@@Z
?CheckSum@MBR_HEADER@@QAEKXZ
?Compare@ST_HASH_ENTRY_COMPARATOR@?$ST_STORE@USM_TRAITS@@@@SGHPAXABK1@Z
?Compare@ST_REGION_ENTRY_COMPARATOR@?$ST_STORE@USM_TRAITS@@@@SGHPAXABK1@Z
?CompareLangIDs@@YAHPBX0@Z
?CompareLangName@@YAHPBX0@Z
?ComputeChs@MBR_ENTRY@@QAEXPAU_DISK_GEOMETRY@@@Z
?Control@NT_DISK@@UAEJKPAXK0K@Z
?CreateGuid@SC_ENV@@SGJPAU_GUID@@@Z
?CreatePartitionTable@SC_DISK@@QAEJPAU_CREATE_DISK@@@Z
?CreatePartitionTable@SC_GPT@@QAEJPAU_CREATE_DISK@@@Z
?CreatePartitionTable@SC_MBR@@QAEJPAU_CREATE_DISK@@@Z
?CreatePartitionTable@SC_RAW@@QAEJXZ
?ExtractFaultDomainIds@SC_DEVICE@@AAEJXZ
?FindPartitionGpt@SC_DISK_LAYOUT@@QAEKU_GUID@@@Z
?Free@SC_ENV@@SGXPAX@Z
?GetAccessDescPost@SC_DISK@@AAEJPAU_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR@@@Z
?GetPnpProperty@NT_DISK@@UAEJPAXPAPAX@Z
?GetStorageProperty@SC_DEVICE@@QAEJW4_STORAGE_PROPERTY_ID@@PAPAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?GetStoragePropertyPost@SC_DEVICE@@MAEJW4_STORAGE_PROPERTY_ID@@PAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?GetStoragePropertyPost@SC_DISK@@MAEJW4_STORAGE_PROPERTY_ID@@PAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?GetStoragePropertyPre@SC_DEVICE@@MAEJW4_STORAGE_PROPERTY_ID@@PAK@Z
?GetStoragePropertyPre@SC_DISK@@MAEJW4_STORAGE_PROPERTY_ID@@PAK@Z
?Initialize@SC_DEVICE@@UAEJXZ
?Initialize@SC_DISK@@UAEJXZ
?Initialize@SC_MBR@@QAEXPAVSC_DISK@@@Z
?InitializePartitionCache@SC_DISK@@QAEJXZ
?IsEqualGUID@@YGHABU_GUID@@0@Z
?IsNeutralLanguageItem@@YGHPBUCultureDataType@@@Z
?IsVbr@SC_DISK@@QAEEXZ
?MinCryptCopyAsn1IntToFixedBuffer@@YGJPBEKPAEK@Z
?NpCleanup@NP_CONTEXT@@SGXPAU1@K@Z
?NpGetResidentLeaf@NP_CONTEXT@@SGPAUB_TREE_NODE_HDR@@PAUNP_CTX@1@PAT_NP_LEAF_PTR@@@Z
?NpInitialize@NP_CONTEXT@@SGXPAU1@@Z
?NpLeafDerefInternal@NP_CONTEXT@@SGXPAUNP_CTX@1@PAPAX@Z
?NpLeafRefInternal@NP_CONTEXT@@SGPAXPAUNP_CTX@1@PAPAXK@Z
?NpLeafRemoveInternal@NP_CONTEXT@@SGPAXPAUNP_CTX@1@PAPAX@Z
?NpNodeAllocate@NP_CONTEXT@@SGPAXPAUNP_CTX@1@KK@Z
?NpNodeFree@NP_CONTEXT@@SGXPAUNP_CTX@1@PAXK@Z
?NpStart@NP_CONTEXT@@SGJPAU1@PAU_NP_PARAMETERS@1@@Z
?NpiGetReservedBuffer@NP_CONTEXT@@SGPAXPAU1@PAUNP_CTX@1@@Z
?NpiLeafPageIn@NP_CONTEXT@@SGXPAU1@PAUNP_CTX@1@PAT_NP_LEAF_PTR@@@Z
?NpiLeafPageOut@NP_CONTEXT@@SGJPAU1@PAUNP_CTX@1@PAT_NP_LEAF_PTR@@K@Z
?NpiPerformPageOut@NP_CONTEXT@@SGJPAU1@PAUNP_CTX@1@@Z
?NpiRebaseCallback@NP_CONTEXT@@SGJPAX0PAK@Z
?NpiTreeWalkCallback@NP_CONTEXT@@SGJPAX0PAK@Z
?Read@NT_DISK@@UAEJ_KKPAE@Z
?ReadEntries@SC_GPT@@AAEJPAVGPT_HEADER@@PAPAU_GPT_ENTRY@@@Z
?ReadEntries@SC_GPT@@AAEJPAVGPT_HEADER@@PAU_GPT_ENTRY@@@Z
?ReadHeader@SC_GPT@@AAEJKPAVGPT_HEADER@@@Z
?ReadPartitionTable@SC_DISK@@QAEJPAPAVSC_DISK_LAYOUT@@@Z
?ReadPartitionTable@SC_GPT@@QAEJPAPAVSC_DISK_LAYOUT@@@Z
?ReadPartitionTable@SC_MBR@@QAEJPAPAVSC_DISK_LAYOUT@@@Z
?ReadPartitionTable@SC_RAW@@QAEJPAPAVSC_DISK_LAYOUT@@@Z
?ReadSectors@SC_DISK@@QAEJK_KPAX@Z
?ResetPartitionCache@SC_DISK@@QAEJXZ
?RtlStringCbCopyUnicodeString@@YGJPAGIPBU_UNICODE_STRING@@@Z
?RtlULongAdd@@YGJKKPAK@Z
?ST_PAGE_RECORD_GET@?$ST_STORE@USM_TRAITS@@@@SGPAU_ST_PAGE_RECORD@1@PAU_ST_DATA_MGR@1@PAU_ST_PAGE_ENTRY@1@@Z
?SaveStorageProperty@SC_DEVICE@@MAEXW4_STORAGE_PROPERTY_ID@@PAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?SaveStorageProperty@SC_DISK@@MAEXW4_STORAGE_PROPERTY_ID@@PAU_STORAGE_DESCRIPTOR_HEADER@@@Z
?ScAnsiToUnicodeString@@YGJPADPAU_UNICODE_STRING@@@Z
?ScExtractDeviceStrings@@YGJPAU_STORAGE_DEVICE_DESCRIPTOR@@PAU_UNICODE_STRING@@111@Z
?ScTrimString@@YGXPAD@Z
?SetPartition@SC_DISK@@QAEJKPAU_SET_PARTITION_INFORMATION_EX@@@Z
?SetPartition@SC_GPT@@QAEJKPAU_SET_PARTITION_INFORMATION_EX@@@Z
?SetPartition@SC_MBR@@QAEJKPAU_SET_PARTITION_INFORMATION_EX@@@Z
?SmAllocWrapper@@YGPAXKPAX@Z
?SmAsyncReadQueueInsert@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_SM_ASYNC_READ_QUEUE@1@PAU_SM_ASYNC_DIRECT_READ_CTX@1@K@Z
?SmAsyncReadQueueWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAX@Z
?SmCleanup@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@@Z
?SmCompressContextUpdateMemoryCondition@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_SM_COMPRESS_CONTEXT@1@W4_SMP_MEMORY_CONDITION@@K@Z
?SmCompressCtxBalancerThread@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAX@Z
?SmCompressCtxCleanup@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_SM_COMPRESS_CONTEXT@1@@Z
?SmCompressCtxCreateThread@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SM_COMPRESS_CONTEXT@1@PAU1@K@Z
?SmCompressCtxCreateThreadParams@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGPAU_SM_COMPRESS_THREAD_PARAMS@1@PAU_SM_COMPRESS_CONTEXT@1@K@Z
?SmCompressCtxInitialize@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_SM_COMPRESS_CONTEXT@1@@Z
?SmCompressCtxProcessEntry@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_SM_COMPRESS_CONTEXT@1@PAU1@PAX2PAU_SM_COMPRESS_ENTRY@1@@Z
?SmCompressCtxProcessReadyQueue@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_SM_COMPRESS_CONTEXT@1@PAU1@EK@Z
?SmCompressCtxStart@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SM_COMPRESS_CONTEXT@1@PAU1@K@Z
?SmCompressCtxWorkerThread@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAX@Z
?SmDrainSList@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAT_SLIST_HEADER@@K@Z
?SmEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KPAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmFatalHeapCorruptionDumpCallback@@YGXW4_KBUGCHECK_CALLBACK_REASON@@PAU_KBUGCHECK_REASON_CALLBACK_RECORD@@PAXK@Z
?SmFatalPageErrorDumpCallback@@YGXW4_KBUGCHECK_CALLBACK_REASON@@PAU_KBUGCHECK_REASON_CALLBACK_RECORD@@PAXK@Z
?SmFeAddComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KKK@Z
?SmFeAddInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@KKPAU_SM_WORK_ITEM@1@PAU_SM_IO_CONTEXT@1@K@Z
?SmFeCheckPresent@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAK2@Z
?SmFeEmpty@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@@Z
?SmFeEvictComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KK@Z
?SmFeEvictInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAK2@Z
?SmFeEvictUpdatePass@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAK2PAUSEARCH_RESULT@?$B_TREE@T_SM_PAGE_KEY@@USMKM_FRONTEND_ENTRY@?$SMKM_STORE_MGR@USM_TRAITS@@@@$0BAAA@UB_TREE_DUMMY_NODE_POOL@@U?$B_TREE_KEY_COMPARATOR@T_SM_PAGE_KEY@@@@@@@Z
?SmFeReadInitiate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@PAKPA_K2@Z
?SmFeSetEvictFailed@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KK@Z
?SmFeStoreDelete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@K@Z
?SmFeStoreEvictKeys@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAT_SM_PAGE_KEY@@KK@Z
?SmFirstTimeInit@@YGJKK@Z
?SmHighMemPriorityTimerStart@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@@Z
?SmHighMemPriorityWatchdogTimerCallback@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU_KTIMER2@@PAX@Z
?SmHighMemPriorityWatchdogWorker@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAX@Z
?SmInitialize@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SMKM_STORE_MGR_PARAMS@@@Z
?SmIoCtxPrepareToQueue@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SM_IO_CONTEXT@1@PAU1@KPAU_SM_WORK_ITEM@1@PAU_SM_QUEUE_CONTEXT@1@@Z
?SmIoCtxQueueWork@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SM_IO_CONTEXT@1@PAU1@KPAU_SM_WORK_ITEM@1@@Z
?SmIoCtxWorkItemComplete@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU_ST_WORK_ITEM_HDR@@PAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmKeyConvert@@YGJPAT_MM_STORE_KEY@@PAT_SM_PAGE_KEY@@@Z
?SmKmIssueFileIo@@YGJPAU_SMKM_FILE_INFO@@PAU_SMKM_ISSUE_IO_PARAMS@@PAT_LARGE_INTEGER@@P6GXPAXPAU_IO_STATUS_BLOCK@@K@Z3@Z
?SmKmProbeAndLockAddress@@YGJPAXKPAU_MDL@@K@Z
?SmPageRead@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@PAU_MDL@@PAXPAU_IO_STATUS_BLOCK@@@Z
?SmPageWrite@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@T_SM_PAGE_ADD_PARAM@@PAU_MDL@@PAXPAU_IO_STATUS_BLOCK@@K@Z
?SmPerformStoreMaintenance@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_ST_MAINTENANCE_TYPE@@@Z
?SmProcessAddCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SM_WORK_ITEM@1@KPAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmProcessReadCompletion@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SM_WORK_ITEM@1@KPAU?$SMKM_STORE@USM_TRAITS@@@@J@Z
?SmReInitialize@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@@Z
?SmReadPickStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAT_SM_PAGE_KEY@@PAKPAPAU?$SMKM_STORE@USM_TRAITS@@@@2@Z
?SmStAcquireStoreLockExclusive@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?SmStAllocatePhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@K@Z
?SmStAllocateVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@K@Z
?SmStCheckLockInProgressRegionComplete@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@PAT_SM_VIRTUAL_REGION@@K@Z
?SmStCheckResident@?$SMKM_STORE@USM_TRAITS@@@@SG?AW4_SMST_RESIDENT_CHECK_RESULT@1@PAXK@Z
?SmStCleanup@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?SmStCompareRegionData@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@PAPAU_SM_PAGE_COMBINE_BUFFER@@@Z
?SmStCompareRegionDataCallback@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU_SMKM_STORE_HELPER@@PAXK@Z
?SmStDirectRead@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@PAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@@Z
?SmStDirectReadCallout@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStDirectReadComplete@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@J@Z
?SmStDirectReadIssue@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@PAX@Z
?SmStEtwFillStoreEvent@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStEtwFillStoreStatsEvent@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@PAU_SMKM_EVENT_DESCRIPTOR@@@Z
?SmStFindVirtualLockedRegion@?$SMKM_STORE@USM_TRAITS@@@@SGPAU_SM_VIRTUAL_LOCKED_REGION@@PAU1@KPAX@Z
?SmStGetRegionVA@?$SMKM_STORE@USM_TRAITS@@@@SGPADPAU1@K@Z
?SmStGetStoreStats@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@W4_ST_STATS_LEVEL@@PAU_ST_STATS@@PAK@Z
?SmStHelperSendCommand@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@W4_SMKM_STORE_HELPER_COMMAND@@PAU_SMKM_STORE_HELPER_PARAMS@@K@Z
?SmStInitialize@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?SmStIsRegionBusy@?$SMKM_STORE@USM_TRAITS@@@@SGKPAU1@K@Z
?SmStLockVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGPAXPAU1@KPAT_SM_VIRTUAL_REGION@@PAXK@Z
?SmStMapPhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SGPAXPAU1@KKKK@Z
?SmStMapVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGPAXPAU1@KKKK@Z
?SmStOutSwapPrepareStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@@Z
?SmStOutSwapStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@@Z
?SmStPrioritizeRegionsStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@PAU_SMST_PRIORITIZE_REGIONS_CTX@@@Z
?SmStReadThread@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStReadThreadCtxCleanup@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU_SMKM_STORE_READ_THREAD_CTX@@@Z
?SmStReadThreadCtxInitialize@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU_SMKM_STORE_READ_THREAD_CTX@@@Z
?SmStReleaseStoreLockExclusive@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?SmStReleaseVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@KK@Z
?SmStStart@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@PAU_SMST_PARAMETERS@@@Z
?SmStSwapStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@W4_SM_STORE_SWAP_OPERATION@@@Z
?SmStTrimWsStore@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@K@Z
?SmStTrimWsStoreBatch@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAKPAPAXKK1@Z
?SmStUnhandledExceptionFilter@?$SMKM_STORE@USM_TRAITS@@@@SGJPAXPAU_EXCEPTION_POINTERS@@W4_SMST_STORE_EXCEPTION_SOURCE@1@@Z
?SmStUnmapPhysicalRegion@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@KKKPAXK@Z
?SmStUnmapVirtualRegion@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@KKKPAXK@Z
?SmStUpdateMemoryCondition@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@W4_SMP_MEMORY_CONDITION@@@Z
?SmStWorkItemGet@?$SMKM_STORE@USM_TRAITS@@@@SGPAU_ST_WORK_ITEM@?$ST_STORE@USM_TRAITS@@@@PAU1@PAK@Z
?SmStWorkItemQueue@?$SMKM_STORE@USM_TRAITS@@@@SGXPAU1@PAU_ST_WORK_ITEM_HDR@@K@Z
?SmStWorker@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStWorkerThread@?$SMKM_STORE@USM_TRAITS@@@@SGXPAX@Z
?SmStWorkerThreadStartThread@?$SMKM_STORE@USM_TRAITS@@@@SGJPAU1@PAXP6GX1@ZPAPAU_ETHREAD@@@Z
?SmStart@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAXK@Z
?SmStoreActionNotify@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_SM_STORE_ACTION_TYPE@@PAX@Z
?SmStoreContentsRundown@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@@Z
?SmStoreMgrCallback@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU_SMKM_STORE_LIST@@PAXW4_SMKM_CALLBACK_TYPE@@@Z
?SmStorePrepare@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@@Z
?SmStoreRequest@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@KPAU_SM_WORK_ITEM@1@PAU_KEVENT@@PAU_IO_STATUS_BLOCK@@@Z
?SmStoreRequestEx@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@PAU_SM_WORK_ITEM@1@PAU_KEVENT@@PAU_IO_STATUS_BLOCK@@@Z
?SmStoreTerminate@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_ST_ETW_TERMINATION_REASON@@J@Z
?SmStoresContentsRundown@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@@Z
?SmSwapStore@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGJPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@W4_SM_STORE_SWAP_OPERATION@@@Z
?SmUpdateMemoryConditions@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@W4_SMP_MEMORY_CONDITION@@K@Z
?SmWorkItemFree@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU?$SMKM_STORE@USM_TRAITS@@@@PAU_ST_WORK_ITEM_HDR@@PAJ@Z
?SmWorkItemFreeResource@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGXPAU1@PAU_SM_WORK_ITEM@1@PAU_SM_IO_CONTEXT@1@@Z
?SmpDeviceIoCompletion@@YGJPAU_DEVICE_OBJECT@@PAU_IRP@@PAX@Z
?SmpFlushStorePages@@YGXPAX@Z
?SmpIoCompletionApc@@YGXPAXPAU_IO_STATUS_BLOCK@@K@Z
?SmpPageEvict@?$SMKM_STORE_MGR@USM_TRAITS@@@@SGKPAU1@PAT_SM_PAGE_KEY@@KPAX@Z
?SmpStoreMgrCallback@@YGJPAU_SMKM_STORE_LIST@@PAXW4_SMKM_CALLBACK_TYPE@@@Z
?StAcquireReadContext@?$ST_STORE@USM_TRAITS@@@@SGPAXPAU1@@Z
?StAddRemoveRegions@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StChangeState@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@PAJ@Z
?StCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?StCompactRegions@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PADK1KK@Z
?StCompactionFindEmptiest@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAPAT_ST_REGION_STATE@1@KK@Z
?StCompactionPerformEmergency@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StCompactionPerformInMem@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@K@Z
?StCompactionPickPriority@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAPAT_ST_REGION_STATE@1@K1K@Z
?StCompactionWorker@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StCopyIoStats@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_IO_STATS@@PAU_ST_IO_COUNTS@@@Z
?StDeviceIoBuild@?$ST_STORE@USM_TRAITS@@@@SGPAU_ST_WORK_ITEM@1@PAU_ST_DATA_MGR@1@PAU_ST_PAGE_LOCATION@1@KPAX@Z
?StDeviceIoIsFailed@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DEVICE_IO@1@PAJ@Z
?StDeviceIoIssue@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_PF_QUEUE@@@Z
?StDeviceWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmCheckForCompaction@?$ST_STORE@USM_TRAITS@@@@SG?AW4_ST_COMPACTION_CHECK_RESULT@@PAU_ST_DATA_MGR@1@K@Z
?StDmCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StDmCombineBufferAddEntry@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_SM_PAGE_COMBINE_BUFFER@@PAU_STDM_COMBINE_ENTRY_CACHE@1@PAU_ST_PAGE_RECORD@1@@Z
?StDmCombineBufferProcess@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAPAU_SM_PAGE_COMBINE_BUFFER@@@Z
?StDmCombineLazyCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@@Z
?StDmCombinePageEntry@?$ST_STORE@USM_TRAITS@@@@SGPAU_ST_PAGE_RECORD@1@PAU_ST_DATA_MGR@1@PAU_ST_PAGE_ENTRY@1@@Z
?StDmCombinePageRecords@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAU_ST_PAGE_RECORD@1@PAUSEARCH_RESULT@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@1@Z
?StDmCombineRegion@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@K@Z
?StDmCombineTargetCompare@?$ST_STORE@USM_TRAITS@@@@SAHPAXPBX1@Z
?StDmCurrentRegionSet@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KK@Z
?StDmDeviceError@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@W4_ST_DEVICE_FAIL_TYPE@1@J@Z
?StDmDeviceIoCompletion@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmDeviceIoTransfer@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@PAU_ST_DEVICE_IO@1@@Z
?StDmEtaPerformIo@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KK@Z
?StDmEtaRefresh@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmEtwPageRundown@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmEtwRegionRundown@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmGetSpaceStats@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAK1@Z
?StDmGetStatsBitmap@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KPAEPA_K@Z
?StDmHandleDecompressionFailure@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAD1PAU_ST_PAGE_LOCATION@1@PAU_STDM_READ_CONTEXT@1@@Z
?StDmInitialize@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@0@Z
?StDmInvalidateCurrentRegions@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@@Z
?StDmLazyRegionsWorker@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KPAU_ST_WORK_ITEM@1@@Z
?StDmLazyWorkItemQueue@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPageAdd@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPageError@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@PAD1PAU_ST_PAGE_LOCATION@1@PAU_STDM_READ_CONTEXT@1@J@Z
?StDmPageRecordRemove@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_PAGE_RECORD@1@PAUSEARCH_RESULT@?$B_TREE@KU_ST_REGION_ENTRY@?$ST_STORE@USM_TRAITS@@@@$0BAAA@UNP_CONTEXT@@UST_REGION_ENTRY_COMPARATOR@2@@@@Z
?StDmPageRecordUnprotect@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@PAU_ST_PAGE_RECORD@1@@Z
?StDmPageRemove@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPageRetrieve@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_READ_CONTEXT@1@PAU_ST_WORK_ITEM@1@@Z
?StDmPickRandomRegion@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@@Z
?StDmRegionAdd@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StDmRegionEvict@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_SEARCH_RESULTS@1@KKKK@Z
?StDmRegionGetKeys@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_SEARCH_RESULTS@1@KKKPAT_SM_PAGE_KEY@@PAK@Z
?StDmRegionRemove@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAK@Z
?StDmReuseCurrentRegion@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_CURRENT_REGION@1@@Z
?StDmSinglePageCopy@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAXPAD2PAU_ST_PAGE_LOCATION@1@PAU_STDM_READ_CONTEXT@1@@Z
?StDmSinglePageRetrieveSync@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAX1K@Z
?StDmSinglePageTransfer@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAXPAD11PAU_ST_PAGE_LOCATION@1@PAU_STDM_READ_CONTEXT@1@@Z
?StDmStart@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_DATA_MGR@1@PAU_STDM_PARAMETERS@@PAU_RTL_BITMAP@@PAKK@Z
?StDmUpdateRegionLazyCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@KK@Z
?StDmUpdateRegionsToCompactBitmap@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@KKK@Z
?StDmpCurrentRegionWrite@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmpDummyPageRecordAllocate@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@@Z
?StDmpSinglePageAdd@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_IO_PARAMS@1@PAU_ST_WORK_ITEM@1@PAK@Z
?StDmpSinglePageFindSpace@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@KKPAPADPAK@Z
?StDmpSinglePageInsert@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_IO_PARAMS@1@PAU_ST_PAGE_RECORD@1@@Z
?StDmpSinglePageLookup@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_READ_CONTEXT@1@PAU_ST_IO_PARAMS@1@PAPAU_ST_PAGE_RECORD@1@@Z
?StDmpSinglePageRetrieve@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_STDM_READ_CONTEXT@1@PAU_ST_IO_PARAMS@1@PAXPAU_ST_PAGE_LOCATION@1@@Z
?StDmpUpdateRegionState@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@KJK@Z
?StDrainReadContextList@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?StEmptyStore@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@K@Z
?StGetStats@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StGetStatsWorker@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@W4_ST_STATS_LEVEL@@PAU_ST_STATS@@PAK@Z
?StGetUserSpaceStatsKb@?$ST_STORE@USM_TRAITS@@@@SGKPAU1@PAK1@Z
?StInitialize@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@@Z
?StLazyWorkMgrInitialize@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrQueueWork@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@W4_ST_LAZY_WORK_TYPE@1@KK@Z
?StLazyWorkMgrResetIdle@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@@Z
?StLazyWorkMgrRunExpiredWork@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@_K@Z
?StLazyWorkMgrSetSchedule@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_LAZY_WORK_MGR@1@_K@Z
?StMapAndLockRegion@?$ST_STORE@USM_TRAITS@@@@SGPADPAU_ST_DATA_MGR@1@KKK@Z
?StMetaRegionsUpdate@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StNpEnumBTreeNodes@?$ST_STORE@USM_TRAITS@@@@SGJPAUNP_CTX@NP_CONTEXT@@P6GJPAX1PAK@Z1@Z
?StNpLeafDelete@?$ST_STORE@USM_TRAITS@@@@SGXPAUNP_CTX@NP_CONTEXT@@K@Z
?StNpLeafPageIn@?$ST_STORE@USM_TRAITS@@@@SGJPAUNP_CTX@NP_CONTEXT@@PAXK@Z
?StNpLeafPageOut@?$ST_STORE@USM_TRAITS@@@@SGKPAUNP_CTX@NP_CONTEXT@@PAX@Z
?StQueueCompaction@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@W4_ST_COMPACTION_CHECK_RESULT@@@Z
?StRegionFindCompact@?$ST_STORE@USM_TRAITS@@@@SGPAT_ST_REGION_STATE@1@PAU_ST_DATA_MGR@1@K@Z
?StRegionFindRepurpose@?$ST_STORE@USM_TRAITS@@@@SGPAT_ST_REGION_STATE@1@PAU_ST_DATA_MGR@1@K@Z
?StRegionReadDereference@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StRegionReadReference@?$ST_STORE@USM_TRAITS@@@@SGKPAU_ST_DATA_MGR@1@K@Z
?StReleaseReadContext@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@PAX@Z
?StReleaseRegion@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@K@Z
?StStagingRegionFind@?$ST_STORE@USM_TRAITS@@@@SGPAU_ST_STAGING_REGION@1@PAU_ST_DATA_MGR@1@K@Z
?StStagingRegionIssueIo@?$ST_STORE@USM_TRAITS@@@@SGJPAU_ST_DATA_MGR@1@PAU_ST_STAGING_REGION@1@K@Z
?StStart@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_CREATE_PARAMS@@@Z
?StStoreWorkItemCleanup@?$ST_STORE@USM_TRAITS@@@@SGXPAU1@PAU_ST_WORK_ITEM@1@@Z
?StSufficientSpaceForAdd@?$ST_STORE@USM_TRAITS@@@@SGKPAU1@K@Z
?StUnlockAndUnmapRegion@?$ST_STORE@USM_TRAITS@@@@SGXPAU_ST_DATA_MGR@1@KPAD@Z
?StWorkItemProcess@?$ST_STORE@USM_TRAITS@@@@SGJPAU1@PAU_ST_WORK_ITEM@1@@Z
?StartHelper@StEtaHelper@@SGJPAU_ST_ETA_CONTEXT@@K@Z
?StpKeyCompare@?$ST_STORE@USM_TRAITS@@@@SAHPBX0@Z
?StringCchCopyNW@@YGJPAGIPBGI@Z
?TlgAggregateInternalFlushTimerCallbackKernelMode@@YGXPAU_EX_TIMER@@PAX@Z
?TlgAggregateInternalFlushWorkItemRoutineKernelMode@@YGXPAX@Z
?TlgAggregateInternalProviderCallback@@YGXPBU_GUID@@KE_K1PAU_EVENT_FILTER_DESCRIPTOR@@PAX@Z
?TlgAggregateInternalRegisteredProviderEtwCallback@@YGXPBU_GUID@@KE_K1PAU_EVENT_FILTER_DESCRIPTOR@@PAX@Z
?UpdateStorageProperty@SC_DEVICE@@QAEJW4_STORAGE_PROPERTY_ID@@@Z
?Validate@MBR_ENTRY@@QAEEK_K@Z
?VerifyPartitionTable@SC_DISK@@QAEJE@Z
?VerifyPartitionTable@SC_GPT@@QAEJE@Z
?Write@NT_DISK@@UAEJ_KKPAE@Z
?WritePartitionTable@SC_DISK@@QAEJPAVSC_DISK_LAYOUT@@@Z
?WritePartitionTable@SC_GPT@@QAEJPAVSC_DISK_LAYOUT@@E@Z
?WritePartitionTable@SC_MBR@@QAEJPAVSC_DISK_LAYOUT@@@Z
?WriteSectors@SC_DISK@@QAEJK_KPAX@Z
?wil_details_FeatureReporting_IncrementOpportunityInCache@@YGXPAUwil_details_FeatureReportingCache@@W4wil_details_ServiceReportingKind@@IPAUwil_details_RecordUsageResult@@@Z
?wil_details_FeatureReporting_IncrementUsageInCache@@YGXPAUwil_details_FeatureReportingCache@@W4wil_details_ServiceReportingKind@@IPAUwil_details_RecordUsageResult@@@Z
?wil_details_FeatureReporting_RecordUsageInCache@@YG?AUwil_details_RecordUsageResult@@PAUwil_details_FeatureReportingCache@@W4wil_details_ServiceReportingKind@@II@Z
?wil_details_FeatureReporting_ReportUsageToService@@YGXPAUwil_details_FeatureReportingCache@@IHHPBUFEATURE_LOGGED_TRAITS@@HW4wil_ReportingKind@@K@Z
?wil_details_FeatureReporting_ReportUsageToServiceDirect@@YGHPAUwil_details_FeatureReportingCache@@IHHW4wil_details_ServiceReportingKind@@IK@Z
?wil_details_MapReportingKind@@YG?AW4wil_details_ServiceReportingKind@@W4wil_ReportingKind@@H@Z
@AlpcAddHandleTableEntry@8
@AlpcDeleteBlobByHandle@12
@AlpcReferenceBlobByHandle@12
@AlpcRegisterLogRoutine@4
@AlpcUnregisterLogRoutine@4
@AlpcpAllocateBlob@12
@AlpcpAllocateMessage@12
@AlpcpCancelMessage@12
@AlpcpCaptureAttributes@20
@AlpcpCaptureContextAttribute@16
@AlpcpCaptureDirectAttribute@20
@AlpcpCaptureHandleAttribute@8
@AlpcpCaptureHandleAttributeInternal@8
@AlpcpCaptureMessageData@12
@AlpcpCaptureSecurityAttribute@12
@AlpcpCaptureSecurityAttributeInternal@20
@AlpcpCaptureViewAttribute@16
@AlpcpCaptureViewAttributeInternal@16
@AlpcpCompleteDeferSignalRequest@4
@AlpcpCompleteDeferSignalRequestAndWait@20
@AlpcpCompleteDispatchMessage@4
@AlpcpDeleteBlob@4
@AlpcpDestroyBlob@8
@AlpcpDispatchCloseMessage@4
@AlpcpDispatchConnectionRequest@4
@AlpcpDispatchNewMessage@4
@AlpcpDispatchReplyToWaitingThread@4
@AlpcpEndInitialization@4
@AlpcpExposeAttributes@20
@AlpcpExposeContextAttribute@16
@AlpcpExposeHandleAttribute@16
@AlpcpExposeTokenAttribute@16
@AlpcpExposeViewAttribute@16
@AlpcpExposeViewAttributeInSenderContext@8
@AlpcpExposeWorkOnBehalfAttribute@16
@AlpcpFlushMessagesByRequestor@16
@AlpcpFlushQueue@12
@AlpcpInsertCompletionListEntry@8
@AlpcpLockCommunicationInfoForReply@16
@AlpcpLookupMessage@20
@AlpcpQueryHandleInformationMessage@20
@AlpcpReadMessageData@8
@AlpcpReceiveDirectMessagePort@20
@AlpcpReceiveLegacyMessage@16
@AlpcpReceiveMessage@20
@AlpcpReceiveMessagePort@20
@AlpcpReceiveSynchronousReply@20
@AlpcpReferenceAndLockTargetPortsAndCommunicationInfo@12
@AlpcpReferenceConnectedPort@4
@AlpcpReferenceReplyTargetPorts@8
@AlpcpReleaseAttributes@4
@AlpcpReleaseMessageAttributesOnCancel@8
@AlpcpSendMessage@16
@AlpcpSignal@12
@AlpcpSignalAndWait@24
@AlpcpUnlockAndDereferenceTargetPortsAndCommunicationInfo@12
@CcCreateVacbArray@12
@CcDeallocateBcb@4
@CcDeleteSharedCacheMap@20
@CcFreeVirtualAddress@4
@CcPerformReadAhead@8
@CcPostWorkQueueAsyncRead@8
@CcPostWorkQueueCachemapUninit@8
@CcPostWorkQueueRegular@8
@CcUnmapVacbArray@24
@CcUnpinFileDataEx@12
@CcWriteBehind@8
@DbgkFlushErrorPort@4
@DbgkpDeleteErrorPort@4
@DifExAcquireFastMutexWrapper@4
@DifExReleaseResourceAndLeaveCriticalRegionWrapper@4
@DifExReleaseResourceAndLeavePriorityRegionWrapper@4
@DifExTryToAcquireFastMutexWrapper@4
@DifIoReadPartitionTableWrapper@16
@DifIoSetPartitionInformationWrapper@16
@DifIoWritePartitionTableWrapper@20
@DifIofCallDriverWrapper@16
@DifIofCompleteRequestWrapper@8
@DifKeAcquireGuardedMutexUnsafeWrapper@4
@DifKeAcquireGuardedMutexWrapper@4
@DifKeAcquireInStackQueuedSpinLockAtDpcLevelWrapper@8
@DifKeAcquireInStackQueuedSpinLockForDpcWrapper@8
@DifKeAcquireInStackQueuedSpinLockWrapper@8
@DifKeAcquireQueuedSpinLockWrapper@4
@DifKeReleaseGuardedMutexUnsafeWrapper@4
@DifKeReleaseGuardedMutexWrapper@4
@DifKeReleaseInStackQueuedSpinLockForDpcWrapper@4
@DifKeReleaseInStackQueuedSpinLockFromDpcLevelWrapper@4
@DifKeReleaseInStackQueuedSpinLockWrapper@4
@DifKeReleaseQueuedSpinLockWrapper@8
@DifKeTryToAcquireGuardedMutexWrapper@4
@DifKeTryToAcquireQueuedSpinLockWrapper@8
@DifKeTryToAcquireSpinLockAtDpcLevelWrapper@4
@DifKefAcquireSpinLockAtDpcLevelWrapper@4
@DifKefReleaseSpinLockFromDpcLevelWrapper@4
@DifKfAcquireSpinLockWrapper@4
@DifKfReleaseSpinLockWrapper@8
@EtwGetKernelTraceTimestamp@8
@EtwGetKernelTraceTimestampSilo@12
@EtwTraceContextSwap@8
@EtwTraceDebuggerEvent@12
@EtwTraceJob@16
@EtwTracePageFault@16
@EtwTraceProcess@8
@EtwpAcquireLoggerContext@12
@EtwpAcquireLoggerContextByLoggerId@12
@EtwpAcquireLoggerContextByLoggerName@12
@EtwpCCSwapTrace@16
@EtwpCovSampProfileInterrupt@8
@EtwpDisableKernelTrace@16
@EtwpEnableKernelTrace@16
@EtwpEnqueueOverflowBuffer@8
@EtwpGetLoggerInfoFromContext@8
@EtwpPmcInterrupt@8
@EtwpPrepareDirtyBuffer@8
@EtwpProfileInterrupt@8
@EtwpReleaseLoggerContext@8
@EtwpReserveTraceBuffer@20
@EtwpResetBufferHeader@8
@EtwpTraceALPC@8
@EtwpValidateLoggerInfo@4
@ExAcquireAutoExpandPushLockExclusive@8
@ExAcquireAutoExpandPushLockShared@8
@ExAcquireCacheAwarePushLockExclusiveEx@8
@ExAcquireCacheAwarePushLockSharedEx@8
@ExAcquireFastMutex@4
@ExAcquireFastMutexUnsafe@4
@ExAcquirePushLockExclusiveEx@8
@ExAcquirePushLockSharedEx@8
@ExAcquireRundownProtection@4
@ExAcquireRundownProtectionCacheAware@4
@ExAcquireRundownProtectionCacheAwareEx@8
@ExAcquireRundownProtectionEx@8
@ExBlockOnAddressPushLock@20
@ExBlockPushLock@8
@ExEnterCriticalRegionAndAcquireFastMutexUnsafe@4
@ExInitializeRundownProtection@4
@ExInterlockedAddLargeStatistic@8
@ExInterlockedAddUlong@12
@ExInterlockedCompareExchange64@16
@ExInterlockedFlushSList@4
@ExInterlockedInsertHeadList@12
@ExInterlockedInsertTailList@12
@ExInterlockedPopEntryList@8
@ExInterlockedPopEntrySList@8
@ExInterlockedPushEntryList@12
@ExInterlockedPushEntrySList@12
@ExInterlockedRemoveHeadList@8
@ExReInitializeRundownProtection@4
@ExReInitializeRundownProtectionCacheAware@4
@ExReleaseAutoExpandPushLockExclusive@8
@ExReleaseAutoExpandPushLockShared@8
@ExReleaseCacheAwarePushLockExclusiveEx@8
@ExReleaseCacheAwarePushLockSharedEx@8
@ExReleaseFastMutex@4
@ExReleaseFastMutexUnsafe@4
@ExReleaseFastMutexUnsafeAndLeaveCriticalRegion@4
@ExReleasePushLockEx@8
@ExReleasePushLockExclusiveEx@8
@ExReleasePushLockSharedEx@8
@ExReleaseResourceAndLeaveCriticalRegion@4
@ExReleaseResourceAndLeavePriorityRegion@4
@ExReleaseResourceLite@4
@ExReleaseRundownProtection@4
@ExReleaseRundownProtectionCacheAware@4
@ExReleaseRundownProtectionCacheAwareEx@8
@ExReleaseRundownProtectionEx@8
@ExRundownCompleted@4
@ExRundownCompletedCacheAware@4
@ExSaDecodeHandleForIndex@8
@ExTimedWaitForUnblockPushLock@12
@ExTryAcquireAutoExpandPushLockExclusive@8
@ExTryAcquireAutoExpandPushLockShared@8
@ExTryAcquireCacheAwarePushLockExclusiveEx@8
@ExTryAcquireCacheAwarePushLockSharedEx@8
@ExTryAcquirePushLockExclusiveEx@8
@ExTryAcquirePushLockSharedEx@8
@ExTryConvertPushLockSharedToExclusiveEx@8
@ExTryToAcquireFastMutex@4
@ExUnblockOnAddressPushLockEx@8
@ExUnblockPushLockEx@8
@ExWaitForRundownProtectionRelease@4
@ExWaitForRundownProtectionReleaseCacheAware@4
@ExWaitForUnblockPushLock@8
@ExfAcquireCacheAwarePushLockExclusiveEx@12
@ExfAcquirePushLockExclusive@4
@ExfAcquirePushLockExclusiveEx@12
@ExfAcquirePushLockShared@4
@ExfAcquirePushLockSharedEx@12
@ExfAcquireReleasePushLockExclusive@4
@ExfAcquireRundownProtection@4
@ExfInterlockedAddUlong@12
@ExfInterlockedCompareExchange64@12
@ExfInterlockedInsertHeadList@12
@ExfInterlockedInsertTailList@12
@ExfInterlockedPopEntryList@8
@ExfInterlockedPushEntryList@12
@ExfInterlockedRemoveHeadList@8
@ExfReleasePushLock@4
@ExfReleasePushLockExclusive@4
@ExfReleasePushLockShared@4
@ExfReleasePushLockSharedEx@8
@ExfReleaseRundownProtection@4
@ExfTryAcquirePushLockShared@4
@ExfTryToWakePushLock@4
@ExfUnblockPushLock@8
@ExfWaitForRundownProtectionRelease@8
@Exfi386InterlockedDecrementLong@4
@Exfi386InterlockedExchangeUlong@8
@Exfi386InterlockedIncrementLong@4
@ExpAcquireFannedOutPushLockExclusive@12
@ExpAcquireFannedOutPushLockShared@12
@ExpAcquireSpinLockExclusiveAtDpcLevelInstrumented@8
@ExpAcquireSpinLockSharedAtDpcLevelInstrumented@8
@ExpBoostIoAfterAcquire@12
@ExpFindCurrentThread@24
@ExpFindEmptyEntry@8
@ExpMarkRundownProtectionActiveCacheAware@8
@ExpOptimizePushLockList@8
@ExpReleaseResourceExclusiveForThreadLite@12
@ExpReleaseResourceForThreadLite@8
@ExpReleaseResourceSharedForThreadLite@12
@ExpReleaseSpinLockExclusiveFromDpcLevelInstrumented@8
@ExpReleaseSpinLockSharedFromDpcLevelInstrumented@8
@ExpTryAcquireFannedOutPushLockShared@4
@ExpTryAcquireSpinLockExclusiveAtDpcLevelInstrumented@4
@ExpTryAcquireSpinLockSharedAtDpcLevelInstrumented@4
@ExpTryExpandAutoExpandPushLock@4
@ExpUnblockPushLock@12
@ExpWaitForResource@16
@ExpWakePushLock@8
@HalExamineMBR@16
@InterlockedPopEntrySList@4
@InterlockedPushEntrySList@8
@InterlockedPushListSList@16
@IoGetPagingIoPriority@4
@IoReadPartitionTable@16
@IoSetPartitionInformation@16
@IoWritePartitionTable@20
@IofCallDriver@8
@IofCallDriverSpecifyReturn@12
@IofCompleteRequest@8
@IopInterlockedDecrementUlong@8
@IopInterlockedInsertHeadList@8
@IopInterlockedInsertTailList@8
@IopInterlockedRemoveHeadList@4
@IopPerfCallDriver@8
@IopPerfCompleteRequest@8
@IopPoHandleIrp@4
@IopfCompleteRequest@8
@IovCallDriver@12
@IovCompleteRequest@8
@IovpCallDriverNoIrpTracking@12
@IovpCallDriverWithStackBuffer@12
@IovpCancelRoutine@12
@KeAccumulateTicks@20
@KeAcquireGuardedMutex@4
@KeAcquireGuardedMutexUnsafe@4
@KeAcquireInStackQueuedSpinLock@8
@KeAcquireInStackQueuedSpinLockAtDpcLevel@8
@KeAcquireInStackQueuedSpinLockForDpc@8
@KeAcquireInStackQueuedSpinLockRaiseToSynch@8
@KeAcquireQueuedSpinLock@4
@KeAcquireQueuedSpinLockRaiseToSynch@4
@KeAcquireSpinLockForDpc@4
@KeAcquireSpinLockRaiseToSynch@4
@KeCaptureWaitChainHeadEx@12
@KeCheckAndApplyBamQos@8
@KeCheckForZeroPage@4
@KeClockInterruptNotify@8
@KeFlushSingleCurrentTb@8
@KeFlushSingleTb@12
@KeInitializeGate@8
@KeInitializeGuardedMutex@4
@KeInitializeWaitChain@4
@KeInvalidAccessAllowed@8
@KeInvalidateRangeAllCaches@8
@KeIsContextSwapActive@4
@KeQueryHeteroCpuPolicyThread@8
@KeReleaseGuardedMutex@4
@KeReleaseGuardedMutexUnsafe@4
@KeReleaseInStackQueuedSpinLock@4
@KeReleaseInStackQueuedSpinLockForDpc@4
@KeReleaseInStackQueuedSpinLockFromDpcLevel@4
@KeReleaseQueuedSpinLock@8
@KeReleaseQueuedSpinLockFromDpcLevel@4
@KeReleaseSemaphoreEx@20
@KeReleaseSpinLockForDpc@8
@KeSelectNodeForAffinity@4
@KeSetPriorityBoost@8
@KeSignalGate@8
@KeTestSpinLock@4
@KeTryToAcquireGuardedMutex@4
@KeTryToAcquireQueuedSpinLock@8
@KeTryToAcquireQueuedSpinLockRaiseToSynch@8
@KeTryToAcquireSpinLockAtDpcLevel@4
@KeWaitForGate@12
@KeWakeWaitChain@12
@KefAcquireSpinLockAtDpcLevel@4
@KefReleaseSpinLockFromDpcLevel@4
@KfAcquireSpinLock@4
@KfLowerIrql@4
@KfReleaseSpinLock@8
@KiAbProcessContextSwitch@8
@KiAccumulateCycleStats@16
@KiAccumulateProcessorCycleStats@12
@KiAcquireQueuedSpinLockCheckForFreeze@8
@KiAcquireQueuedSpinLockInstrumented@8
@KiAcquireSpinLockInstrumented@4
@KiActivateWaiterKQueue@4
@KiActivateWaiterPriQueue@8
@KiActivateWaiterQueueWithNoLocks@12
@KiAlertThread@12
@KiAttemptFastRemovePriQueue@12
@KiAttemptFastRemoveQueue@12
@KiBeginCounterAccumulation@8
@KiBeginThreadAccountingPeriod@16
@KiCallInterruptServiceRoutine@8
@KiCanSelectSoftParkedProcessor@8
@KiCheckForSListAddress@4
@KiCheckForThreadDispatch@8
@KiComputeDueTime@20
@KiDecrementProcessStackCount@4
@KiDeferGroupSchedulingPreemption@8
@KiDeferredReadySingleThread@12
@KiDirectSwitchThread@12
@KiEndThreadAccountingPeriod@16
@KiEntropyQueueDpc@4
@KiExecuteAllDpcs@16
@KiExitThreadWait@12
@KiExpireTimerTable@36
@KiFindRankBiasedIdleSmtSet@8
@KiFindReadyThread@16
@KiGetIsrStackToSwitch@4
@KiGetPendingTick@0
@KiIdleLoop@0
@KiIdleSchedule@4
@KiInSwapSingleProcess@12
@KiInsertQueueApc@4
@KiInsertQueueInternal@8
@KiInsertTimerTable@20
@KiInswapAndReadyThread@8
@KiIpiSignalPacketDoneAndStall@8
@KiLoadLdtr@4
@KiMonitorCacheErrata@8
@KiPriQueueThreadPriorityChanged@8
@KiProcessDebugRegister@8
@KiProcessDeferredReadyList@12
@KiProcessThreadWaitList@16
@KiQueueReadyThread@8
@KiRecordDr7@8
@KiReduceByEffectiveIdleSmtSet@8
@KiReleaseQueuedSpinLockInstrumented@8
@KiReleaseSpinLockInstrumented@8
@KiRemoveBoostThread@8
@KiRequestProcessInSwap@8
@KiResetProcessorTraceBuffer@0
@KiRestoreThreadIptState@4
@KiRetireDpcList@4
@KiSaveThreadIptState@4
@KiSearchForNewThread@8
@KiSearchForNewThreadOnNode@8
@KiSelectCandidateProcessor@12
@KiSelectIdleProcessor@28
@KiSelectNextThread@8
@KiSelectReadyThread@8
@KiSetAffinityThread@12
@KiSetPendingTick@4
@KiSetPriorityThread@12
@KiSignalSynchronizationObjectEx@12
@KiSignalThread@16
@KiSwapContext@12
@KiSwapThread@12
@KiSwitchPriQueue@12
@KiSwitchQueue@12
@KiTimerExpiration@24
@KiTryToAcquireQueuedSpinLockInstrumented@8
@KiTryToAcquireSpinLockInstrumented@4
@KiTryUnwaitThread@16
@KiTryUnwaitThreadWithPriority@16
@KiUnlockKobjectArray@8
@KiUpdateDr7@4
@KiUpdateRunTime@8
@KiUpdateSpeculationControl@4
@KiUpdateTime@8
@KiWakeOtherQueueWaiters@8
@KiWakePriQueueWaiter@16
@KiWakeQueueWaiter@12
@KiXMMIZeroPages@8
@KiXMMIZeroPagesNoSave@8
@KiZeroPages@8
@KxFlushSingleTb@12
@KxTryToAcquireQueuedSpinLock@8
@KxWaitForLockChainValid@4
@KxWaitForLockOwnerShip@8
@KxWaitForLockOwnerShipWithIrql@12
@ObDereferenceObjectEx@8
@ObFastDereferenceObject@8
@ObFastReferenceObject@4
@ObFastReferenceObjectLocked@4
@ObFastReplaceObject@8
@ObFreeObjectCreateInfoBuffer@4
@ObInitializeFastReference@8
@ObReferenceObjectExWithTag@12
@ObReferenceObjectSafe@4
@ObReferenceObjectSafeWithTag@8
@ObfDereferenceDeviceMap@4
@ObfDereferenceObject@4
@ObfDereferenceObjectWithTag@8
@ObfReferenceObject@4
@ObfReferenceObjectWithTag@8
@ObpFreeObject@4
@ObpFreeObjectNameBuffer@4
@PerfInfoLogInterrupt@12
@PerfInfoLogSysCallEntry@4
@PerfInfoLogSysCallExit@4
@PerfInfoLogUnexpectedInterrupt@4
@PerfLogExecutiveResourceAcquire@16
@PerfLogExecutiveResourceInitialize@16
@PerfLogExecutiveResourceRelease@16
@PerfLogExecutiveResourceSetOwnerPointer@8
@PerfLogExecutiveResourceWait@12
@PerfLogImageUnload@36
@PerfLogSpinLockAcquire@28
@PerfLogSpinLockRelease@16
@PoIdle@4
@PoInitializePrcb@4
@PoNotifyMediaBuffering@4
@PoNotifyVSyncChange@4
@PopInternalAddToDumpFile@12
@PopInternalSaveStackToDumpFile@4
@PopIsAddressRangeValid@8
@PpmCancelExitLatencyTrace@4
@PpmGetExitSamplingCountdown@0
@PpmIdleDefaultComplete@20
@PpmIdleDefaultExecute@32
@PpmIdleDefaultInitiateWake@4
@PpmIdleDefaultIsHalted@4
@PpmIdleEvaluateConstraints@8
@PpmIdleExecuteTransition@44
@PpmIdleGuestComplete@20
@PpmIdleGuestExecute@32
@PpmIdleGuestPreExecute@20
@PpmIdleGuestPreselect@8
@PpmIdleGuestTest@12
@PpmIdlePrepare@24
@PpmPerfControlActionCallback@0
@PpmPrepareExitLatencyTrace@4
@PpvUtilCallAddDevice@16
@PpvUtilFailDriver@16
@PpvUtilGetDevnodeRemovalOption@4
@PpvUtilIsHardwareBeingVerified@4
@PpvUtilIsPdo@4
@PpvUtilTestStartedPdoStack@4
@PsPicoAltSystemCallDispatch@4
@PsPicoSystemCallDispatch@4
@PsSynchronizeWithThreadInsertion@8
@PspBindProcessSessionToJob@8
@PspChargeQuota@16
@PspConvertJobToMixed@8
@PspHashKeyValue@8
@PspLocateSystemDll@8
@PspLockQuotaExpansion@8
@PspReturnQuota@16
@PspReturnResourceQuota@16
@PspSetProcessAffinityUpdateMode@8
@PspUnlockQuotaExpansion@8
@PspWriteTebIdealProcessor@8
@ReadAMDMsr@4
@RtlFailFast2@8
@RtlFcpCompareFeatureIdToFeature@8
@RtlFcpCompareFeatureIdToFeatureUsageSubscription@8
@RtlInsertHeadCircularList@8
@RtlInterlockedCompareExchange64@12
@RtlInterlockedSetClearBits@12
@RtlPrefetchMemoryNonTemporal@8
@RtlRemoveEntryCircularList@8
@RtlUlongByteSwap@4
@RtlUlonglongByteSwap@8
@RtlUshortByteSwap@4
@RtlpAllocateHeap@24
@RtlpCreateSplitBlock@28
@RtlpFindUCREntry@8
@RtlpFreeHeap@16
@RtlpInsertUCRBlock@8
@RtlpInterlockedFlushSList@4
@RtlpInterlockedPopEntrySList@4
@RtlpInterlockedPushEntrySList@8
@RtlpOpenBaseImageFileOptionsKey@4
@RtlpOpenBaseImageFileOptionsKeyEx@12
@RtlpProbeUserBufferSafe@8
@RtlpSearchUCRBlock@8
@RtlpSetupExtendedBlock@24
@RtlpUpdateHeapRates@8
@SeAuditingWithTokenForSubcategory@8
@SymCryptCallbackAlloc@4
@SymCryptCallbackFree@4
@SymCryptCallbackRandom@8
@SymCryptCpuFeaturesNeverPresent@0
@SymCryptCpuFeaturesNeverPresentEnvWindowsKernelmodeWin8_1nLater@0
@SymCryptCpuidExFunc@12
@SymCryptCpuidExFuncEnvWindowsKernelmodeWin8_1nLater@12
@SymCryptCrtGenerateForTwoCoprimes@28
@SymCryptCrtGenerateInverses@24
@SymCryptDetectCpuFeaturesByCpuid@4
@SymCryptDivisorCreate@12
@SymCryptDivisorFromModulus@4
@SymCryptEcDsaTruncateHash@32
@SymCryptEcDsaVerify@28
@SymCryptEckeyAllocate@4
@SymCryptEckeyCreate@12
@SymCryptEckeyFree@4
@SymCryptEckeySetValue@32
@SymCryptEckeySizeofPublicKey@8
@SymCryptEckeyWipe@4
@SymCryptEcpointAdd@28
@SymCryptEcpointAddDiffNonZero@24
@SymCryptEcpointCreate@12
@SymCryptEcpointCreateEx@16
@SymCryptEcpointDouble@24
@SymCryptEcpointGenericSetRandom@20
@SymCryptEcpointGetValue@36
@SymCryptEcpointIsZero@16
@SymCryptEcpointMultiScalarMul@32
@SymCryptEcpointMultiScalarMulWnafWithInterleaving@32
@SymCryptEcpointNegate@20
@SymCryptEcpointOnCurve@16
@SymCryptEcpointScalarMul@28
@SymCryptEcpointScalarMulFixedWindow@28
@SymCryptEcpointSetValue@36
@SymCryptEcpointSetZero@16
@SymCryptEcpointTransform@32
@SymCryptEcurveAllocate@8
@SymCryptEcurveBitsizeofGroupOrder@4
@SymCryptEcurveDigitsofFieldElement@4
@SymCryptEcurveDigitsofScalarMultiplier@4
@SymCryptEcurveFree@4
@SymCryptEcurveSizeofFieldElement@4
@SymCryptEcurveSizeofScalarMultiplier@4
@SymCryptEqual@12
@SymCryptFatal@4
@SymCryptFatalEnvWindowsKernelmodeWin8_1nLater@4
@SymCryptFatalIntercept@4
@SymCryptFdefBitsizeOfUint32@4
@SymCryptFdefClaimScratch@12
@SymCryptFdefConditionalSwap@16
@SymCryptFdefConditionalSwapC@16
@SymCryptFdefDecideModulusType@16
@SymCryptFdefDivisorCreate@12
@SymCryptFdefDivisorFromModulus@4
@SymCryptFdefIntAddMixedSize@12
@SymCryptFdefIntAddUint32@12
@SymCryptFdefIntBitsizeOfObject@4
@SymCryptFdefIntBitsizeOfValue@4
@SymCryptFdefIntConditionalCopy@12
@SymCryptFdefIntConditionalSwap@12
@SymCryptFdefIntCreate@12
@SymCryptFdefIntDivMod@24
@SymCryptFdefIntDivPow2@12
@SymCryptFdefIntFromDivisor@4
@SymCryptFdefIntFromModulus@4
@SymCryptFdefIntGetBit@8
@SymCryptFdefIntGetBits@12
@SymCryptFdefIntGetValueLsbits32@4
@SymCryptFdefIntIsEqualUint32@8
@SymCryptFdefIntIsLessThan@8
@SymCryptFdefIntMulMixedSize@20
@SymCryptFdefIntNeg@8
@SymCryptFdefIntSetValue@16
@SymCryptFdefIntSetValueUint32@8
@SymCryptFdefIntSetValueUint64@12
@SymCryptFdefIntShr1@12
@SymCryptFdefIntSubMixedSize@12
@SymCryptFdefIntSubSameSize@12
@SymCryptFdefIntSubUint32@12
@SymCryptFdefIntToDivisor@24
@SymCryptFdefIntToModElement@20
@SymCryptFdefIntToModulus@24
@SymCryptFdefMaskedCopy@16
@SymCryptFdefMaskedCopyAsm@16
@SymCryptFdefModAddGeneric@24
@SymCryptFdefModDivPow2@24
@SymCryptFdefModElementCreate@12
@SymCryptFdefModElementGetValue@28
@SymCryptFdefModElementIsEqual@12
@SymCryptFdefModElementIsZero@8
@SymCryptFdefModElementSetValueGeneric@28
@SymCryptFdefModElementSetValueUint32Generic@20
@SymCryptFdefModElementToIntGeneric@20
@SymCryptFdefModInvGeneric@24
@SymCryptFdefModInvMontgomery@24
@SymCryptFdefModMulGeneric@24
@SymCryptFdefModMulMontgomery@24
@SymCryptFdefModNegGeneric@20
@SymCryptFdefModPreGetGeneric@16
@SymCryptFdefModPreGetMontgomery@16
@SymCryptFdefModSetPostGeneric@16
@SymCryptFdefModSetPostMontgomery@16
@SymCryptFdefModSetRandomGeneric@20
@SymCryptFdefModSquareGeneric@20
@SymCryptFdefModSquareMontgomery@20
@SymCryptFdefModSubGeneric@24
@SymCryptFdefModulusCopyFixupGeneric@8
@SymCryptFdefModulusCopyFixupMontgomery@8
@SymCryptFdefModulusCreate@12
@SymCryptFdefModulusInitGeneric@12
@SymCryptFdefModulusInitMontgomery@12
@SymCryptFdefModulusInitMontgomeryInternal@16
@SymCryptFdefMontgomeryReduceAsm@12
@SymCryptFdefRawAdd@16
@SymCryptFdefRawAddAsm@16
@SymCryptFdefRawAddUint32@16
@SymCryptFdefRawDivMod@28
@SymCryptFdefRawGetValue@20
@SymCryptFdefRawIsEqualUint32@12
@SymCryptFdefRawIsLessThanC@12
@SymCryptFdefRawIsZeroC@8
@SymCryptFdefRawMaskedAddSubdigit@16
@SymCryptFdefRawMul@20
@SymCryptFdefRawMulAsm@20
@SymCryptFdefRawMultSubUint32@16
@SymCryptFdefRawNeg@16
@SymCryptFdefRawSetValue@20
@SymCryptFdefRawSquare@12
@SymCryptFdefRawSub@16
@SymCryptFdefRawSubAsm@16
@SymCryptFdefRawSubUint32@16
@SymCryptFdefSizeofDivisorFromDigits@4
@SymCryptFdefSizeofIntFromDigits@4
@SymCryptFdefSizeofModElementFromModulus@4
@SymCryptFdefSizeofModulusFromDigits@4
@SymCryptFixedWindowRecoding@24
@SymCryptHashAppendInternal@16
@SymCryptHashCommonPaddingMd4Style@8
@SymCryptInit@0
@SymCryptInitEnvCommon@4
@SymCryptInitEnvWindowsKernelmodeWin8_1nLater@4
@SymCryptIntAddMixedSize@12
@SymCryptIntAddUint32@12
@SymCryptIntBitsizeOfObject@4
@SymCryptIntBitsizeOfValue@4
@SymCryptIntConditionalCopy@12
@SymCryptIntConditionalSwap@12
@SymCryptIntCopy@8
@SymCryptIntCopyMixedSize@8
@SymCryptIntCreate@12
@SymCryptIntDigitsizeOfObject@4
@SymCryptIntDivMod@24
@SymCryptIntDivPow2@12
@SymCryptIntExtendedGcd@36
@SymCryptIntFromDivisor@4
@SymCryptIntFromModulus@4
@SymCryptIntGetBit@8
@SymCryptIntGetBits@12
@SymCryptIntGetValueLsbits32@4
@SymCryptIntIsEqualUint32@8
@SymCryptIntIsLessThan@8
@SymCryptIntMaskedCopy@12
@SymCryptIntMulMixedSize@20
@SymCryptIntNeg@8
@SymCryptIntSetValue@16
@SymCryptIntSetValueUint32@8
@SymCryptIntSetValueUint64@12
@SymCryptIntShr1@12
@SymCryptIntSubMixedSize@12
@SymCryptIntSubSameSize@12
@SymCryptIntSubUint32@12
@SymCryptIntToDivisor@24
@SymCryptIntToModElement@20
@SymCryptIntToModulus@24
@SymCryptIntWipe@4
@SymCryptLoadMsbFirstUint64@12
@SymCryptMarvin32@16
@SymCryptMarvin32Append@12
@SymCryptMarvin32AppendBlocks@12
@SymCryptMarvin32ExpandSeed@12
@SymCryptMarvin32Init@8
@SymCryptMarvin32Result@8
@SymCryptMd5Append@12
@SymCryptMd5AppendBlocks@16
@SymCryptMd5Init@4
@SymCryptMd5Result@8
@SymCryptModAdd@24
@SymCryptModDivPow2@24
@SymCryptModElementCreate@12
@SymCryptModElementGetValue@28
@SymCryptModElementIsEqual@12
@SymCryptModElementIsZero@8
@SymCryptModElementSetValue@28
@SymCryptModElementSetValueUint32@20
@SymCryptModElementToInt@20
@SymCryptModExp@32
@SymCryptModExpGeneric@32
@SymCryptModExpSquareAndMultiply32@24
@SymCryptModExpWindowed@28
@SymCryptModInv@24
@SymCryptModMul@24
@SymCryptModNeg@20
@SymCryptModSetRandom@20
@SymCryptModSquare@20
@SymCryptModSub@24
@SymCryptModulusCreate@12
@SymCryptModulusDigitsizeOfObject@4
@SymCryptMontgomeryFillScratchSpaces@4
@SymCryptMontgomeryIsZero@16
@SymCryptMontgomeryPointScalarMul@28
@SymCryptMontgomerySetDistinguished@16
@SymCryptOfflinePrecomputation@12
@SymCryptPrecomputation@24
@SymCryptRestoreXmm@4
@SymCryptRestoreXmmEnvWindowsKernelmodeWin8_1nLater@4
@SymCryptRsaCoreEnc@36
@SymCryptRsaCoreEncScratchSpace@4
@SymCryptRsaPkcs1ApplySignaturePadding@28
@SymCryptRsaPkcs1CheckSignaturePadding@32
@SymCryptRsaPkcs1Verify@36
@SymCryptRsaPkcs1VerifySignaturePadding@36
@SymCryptRsakeyCalculatePrivateFields@24
@SymCryptRsakeyCreate@12
@SymCryptRsakeyCreateAllObjects@4
@SymCryptRsakeySetValue@40
@SymCryptRsakeySizeofModulus@4
@SymCryptRsakeyWipe@4
@SymCryptSaveXmm@4
@SymCryptSaveXmmEnvWindowsKernelmodeWin8_1nLater@4
@SymCryptScsTableInit@12
@SymCryptScsTableLoad@16
@SymCryptScsTableLoadC@16
@SymCryptScsTableSetBuffer@12
@SymCryptScsTableStore@16
@SymCryptScsTableStoreC@16
@SymCryptSha1Append@12
@SymCryptSha1AppendBlocks@16
@SymCryptSha1Init@4
@SymCryptSha1Result@8
@SymCryptSha256@12
@SymCryptSha256Append@12
@SymCryptSha256AppendBlocks@16
@SymCryptSha256AppendBlocks_shani@16
@SymCryptSha256AppendBlocks_ul1@16
@SymCryptSha256Init@4
@SymCryptSha256Result@8
@SymCryptSha384Append@12
@SymCryptSha384Init@4
@SymCryptSha384Result@8
@SymCryptSha512Append@12
@SymCryptSha512AppendBlocks@16
@SymCryptSha512AppendBlocks_ull@16
@SymCryptSha512AppendBlocks_xmm@16
@SymCryptSha512Init@4
@SymCryptSha512Result@8
@SymCryptShortWeierstrassAdd@28
@SymCryptShortWeierstrassAddDiffNonZero@24
@SymCryptShortWeierstrassAddSideChannelUnsafe@24
@SymCryptShortWeierstrassDouble@24
@SymCryptShortWeierstrassFillScratchSpaces@4
@SymCryptShortWeierstrassIsEqual@24
@SymCryptShortWeierstrassIsZero@16
@SymCryptShortWeierstrassNegate@20
@SymCryptShortWeierstrassOnCurve@16
@SymCryptShortWeierstrassSetDistinguished@16
@SymCryptShortWeierstrassSetZero@16
@SymCryptSizeofDivisorFromDigits@4
@SymCryptSizeofEckeyFromCurve@4
@SymCryptSizeofEcpointEx@8
@SymCryptSizeofEcpointFromCurve@4
@SymCryptSizeofIntFromDigits@4
@SymCryptSizeofModElementFromModulus@4
@SymCryptSizeofModulusFromDigits@4
@SymCryptSizeofRsakeyFromParams@4
@SymCryptTwistedEdwardsAdd@28
@SymCryptTwistedEdwardsAddDiffNonZero@24
@SymCryptTwistedEdwardsDouble@24
@SymCryptTwistedEdwardsFillScratchSpaces@4
@SymCryptTwistedEdwardsIsEqual@24
@SymCryptTwistedEdwardsIsZero@16
@SymCryptTwistedEdwardsNegate@20
@SymCryptTwistedEdwardsOnCurve@16
@SymCryptTwistedEdwardsSetDistinguished@16
@SymCryptTwistedEdwardsSetZero@16
@SymCryptWidthNafRecoding@20
@SymCryptWipe@8
@SymCryptWipeAsm@8
@VerifierExAcquireFastMutex@4
@VerifierExAcquireFastMutexNoReboot@4
@VerifierExAcquireFastMutexUnsafe@4
@VerifierExAcquireFastMutexUnsafeNoReboot@4
@VerifierExAcquireRundownProtection@4
@VerifierExAcquireRundownProtectionCacheAware@4
@VerifierExAcquireRundownProtectionCacheAwareEx@8
@VerifierExAcquireRundownProtectionEx@8
@VerifierExReleaseFastMutex@4
@VerifierExReleaseFastMutexNoReboot@4
@VerifierExReleaseFastMutexUnsafe@4
@VerifierExReleaseFastMutexUnsafeNoReboot@4
@VerifierExReleaseResourceAndLeaveCriticalRegion@4
@VerifierExReleaseResourceAndLeaveCriticalRegionNoReboot@4
@VerifierExReleaseResourceAndLeavePriorityRegion@4
@VerifierExReleaseResourceAndLeavePriorityRegionNoReboot@4
@VerifierExReleaseResourceLite@4
@VerifierExReleaseResourceLiteNoReboot@4
@VerifierExReleaseRundownProtection@4
@VerifierExReleaseRundownProtectionCacheAware@4
@VerifierExReleaseRundownProtectionEx@8
@VerifierExTryToAcquireFastMutex@4
@VerifierExTryToAcquireFastMutexNoReboot@4
@VerifierExWaitForRundownProtectionRelease@4
@VerifierExWaitForRundownProtectionReleaseCacheAware@4
@VerifierExfAcquirePushLockExclusive@4
@VerifierExfAcquirePushLockShared@4
@VerifierExfInterlockedCompareExchange64@12
@VerifierExfInterlockedInsertHeadList@12
@VerifierExfInterlockedInsertTailList@12
@VerifierExfInterlockedPopEntryList@8
@VerifierExfInterlockedPushEntryList@12
@VerifierExfInterlockedRemoveHeadList@8
@VerifierExfReleasePushLock@4
@VerifierExfReleasePushLockShared@4
@VerifierExfTryAcquirePushLockShared@4
@VerifierExfTryToWakePushLock@4
@VerifierHalExamineMBR@16
@VerifierInterlockedPopEntrySList@4
@VerifierInterlockedPushEntrySList@8
@VerifierIoReadPartitionTable@16
@VerifierIoSetPartitionInformation@16
@VerifierIoWritePartitionTable@20
@VerifierIofCompleteRequest@8
@VerifierKeAcquireGuardedMutex@4
@VerifierKeAcquireGuardedMutexUnsafe@4
@VerifierKeAcquireInStackQueuedSpinLock@8
@VerifierKeAcquireInStackQueuedSpinLockAtDpcLevel@8
@VerifierKeAcquireInStackQueuedSpinLockAtDpcLevelCommon@12
@VerifierKeAcquireInStackQueuedSpinLockAtDpcLevelNoReboot@8
@VerifierKeAcquireInStackQueuedSpinLockCommon@12
@VerifierKeAcquireInStackQueuedSpinLockForDpc@8
@VerifierKeAcquireInStackQueuedSpinLockForDpcCommon@12
@VerifierKeAcquireInStackQueuedSpinLockForDpcNoReboot@8
@VerifierKeAcquireInStackQueuedSpinLockNoReboot@8
@VerifierKeAcquireInStackQueuedSpinLockRaiseToSynch@8
@VerifierKeAcquireInStackQueuedSpinLockRaiseToSynchCommon@12
@VerifierKeAcquireInStackQueuedSpinLockRaiseToSynchNoReboot@8
@VerifierKeAcquireQueuedSpinLock@4
@VerifierKeAcquireQueuedSpinLockRaiseToSynch@4
@VerifierKeAcquireSpinLockAtDpcLevel@4
@VerifierKeAcquireSpinLockAtDpcLevelNoReboot@4
@VerifierKeAcquireSpinLockForDpc@4
@VerifierKeInitializeGuardedMutex@4
@VerifierKeReleaseGuardedMutex@4
@VerifierKeReleaseGuardedMutexUnsafe@4
@VerifierKeReleaseInStackQueuedSpinLock@4
@VerifierKeReleaseInStackQueuedSpinLockCommon@4
@VerifierKeReleaseInStackQueuedSpinLockForDpc@4
@VerifierKeReleaseInStackQueuedSpinLockForDpcCommon@4
@VerifierKeReleaseInStackQueuedSpinLockForDpcNoReboot@4
@VerifierKeReleaseInStackQueuedSpinLockFromDpcLevel@4
@VerifierKeReleaseInStackQueuedSpinLockFromDpcLevelCommon@4
@VerifierKeReleaseInStackQueuedSpinLockFromDpcLevelNoReboot@4
@VerifierKeReleaseInStackQueuedSpinLockNoReboot@4
@VerifierKeReleaseQueuedSpinLock@8
@VerifierKeReleaseSpinLockForDpc@8
@VerifierKeReleaseSpinLockFromDpcLevel@4
@VerifierKeReleaseSpinLockFromDpcLevelNoReboot@4
@VerifierKeTestSpinLock@4
@VerifierKeTryToAcquireGuardedMutex@4
@VerifierKeTryToAcquireQueuedSpinLock@8
@VerifierKeTryToAcquireQueuedSpinLockRaiseToSynch@8
@VerifierKeTryToAcquireSpinLockAtDpcLevel@4
@VerifierKeTryToAcquireSpinLockAtDpcLevelNoReboot@4
@VerifierKfAcquireSpinLock@4
@VerifierKfAcquireSpinLockNoReboot@4
@VerifierKfLowerIrql@4
@VerifierKfRaiseIrql@4
@VerifierKfReleaseSpinLock@8
@VerifierKfReleaseSpinLockNoReboot@8
@VerifierObfDereferenceObject@4
@VerifierObfDereferenceObjectWithTag@8
@VerifierObfReferenceObject@4
@VerifierObfReferenceObjectWithTag@8
@VfGetPristineDispatchRoutine@8
@VfGetPristineDriverInit@4
@VfMajorAdvanceIrpStatus@12
@VfMajorBuildIrpLogEntry@16
@VfMajorIsNewRequest@8
@VfMajorIsValidIrpStatus@8
@VfMajorTestStartedPdoStack@4
@VfMajorVerifyFinalIrpStack@8
@VfMajorVerifyIrpStackDownward@24
@VfMajorVerifyIrpStackUpward@20
@VfMajorVerifyNewIrp@20
@VfMajorVerifyNewRequest@24
@VfPnpAdvanceIrpStatus@12
@VfPnpDumpIrpStack@4
@VfPnpIsSystemRestrictedIrp@4
@VfPnpTestStartedPdoStack@4
@VfPnpVerifyIrpStackDownward@28
@VfPnpVerifyIrpStackUpward@24
@VfPnpVerifyNewRequest@24
@VfPowerDumpIrpStack@4
@VfPowerIsSystemRestrictedIrp@4
@VfPowerTestStartedPdoStack@4
@VfPowerVerifyIrpStackDownward@28
@VfPowerVerifyIrpStackUpward@24
@VfPowerVerifyNewRequest@24
@VfWmiDumpIrpStack@4
@VfWmiTestStartedPdoStack@4
@VfWmiVerifyIrpStackDownward@28
@VfWmiVerifyIrpStackUpward@24
@VfWmiVerifyNewRequest@24
@ViGenericBuildIrpLogEntry@16
@ViGenericDumpIrpStack@4
@ViGenericIsNewRequest@8
@ViGenericIsValidIrpStatus@8
@ViGenericVerifyFinalIrpStack@8
@ViGenericVerifyIrpStackDownward@28
@ViGenericVerifyIrpStackUpward@24
@ViGenericVerifyNewIrp@20
@ViGenericVerifyNewRequest@24
@ViGetContextPointer@8
@ViIrpLogDatabaseFindPointer@8
@ViIsContextIdValid@8
@ViLockContextPointer@4
@ViResourceReleaseSanityChecks@4
@ViUnlockContextPointer@4
@WmiGetClock@8
@_EH4_CallFilterFunc@8
@_EH4_GlobalUnwind@4
@_EH4_LocalUnwind@16
@_EH4_TransferToHandler@8
@_PopInternalError@4
@__InterlockedCompareExchange@12
@__InterlockedDecrement@4
@__InterlockedExchangeAdd@8
@__InterlockedIncrement@4
@__security_check_cookie@4
@_guard_check_icall_nop@4
@xHalHandlerForBus@8
@xHalReferenceHandler@4
CheckEip
CheckEsp
CsToLinear
EnlightenedSwapContext
ExecuteHandler2@20
ExecuteHandler@20
FinalExceptionHandlerPad0
FinalExceptionHandlerPad1
FinalExceptionHandlerPad10
FinalExceptionHandlerPad11
FinalExceptionHandlerPad12
FinalExceptionHandlerPad13
FinalExceptionHandlerPad14
FinalExceptionHandlerPad15
FinalExceptionHandlerPad16
FinalExceptionHandlerPad17
FinalExceptionHandlerPad18
FinalExceptionHandlerPad19
FinalExceptionHandlerPad2
FinalExceptionHandlerPad20
FinalExceptionHandlerPad21
FinalExceptionHandlerPad22
FinalExceptionHandlerPad23
FinalExceptionHandlerPad24
FinalExceptionHandlerPad25
FinalExceptionHandlerPad26
FinalExceptionHandlerPad27
FinalExceptionHandlerPad28
FinalExceptionHandlerPad29
FinalExceptionHandlerPad3
FinalExceptionHandlerPad30
FinalExceptionHandlerPad31
FinalExceptionHandlerPad32
FinalExceptionHandlerPad33
FinalExceptionHandlerPad34
FinalExceptionHandlerPad35
FinalExceptionHandlerPad36
FinalExceptionHandlerPad37
FinalExceptionHandlerPad38
FinalExceptionHandlerPad39
FinalExceptionHandlerPad4
FinalExceptionHandlerPad40
FinalExceptionHandlerPad41
FinalExceptionHandlerPad42
FinalExceptionHandlerPad43
FinalExceptionHandlerPad44
FinalExceptionHandlerPad45
FinalExceptionHandlerPad46
FinalExceptionHandlerPad47
FinalExceptionHandlerPad48
FinalExceptionHandlerPad49
FinalExceptionHandlerPad5
FinalExceptionHandlerPad50
FinalExceptionHandlerPad51
FinalExceptionHandlerPad52
FinalExceptionHandlerPad53
FinalExceptionHandlerPad54
FinalExceptionHandlerPad55
FinalExceptionHandlerPad56
FinalExceptionHandlerPad57
FinalExceptionHandlerPad58
FinalExceptionHandlerPad59
FinalExceptionHandlerPad6
FinalExceptionHandlerPad60
FinalExceptionHandlerPad61
FinalExceptionHandlerPad62
FinalExceptionHandlerPad63
FinalExceptionHandlerPad7
FinalExceptionHandlerPad8
FinalExceptionHandlerPad9
GetHandlerAddress
GetMachineBootPointers@0
GetVirtualBits
Kei386EoiHelper@0
KiDispatchTrapException
KiVdmSetUserCR0
Opcode0F
Opcode0FV86
OpcodeADDR32Prefix
OpcodeADDR32PrefixV86
OpcodeCLI
OpcodeCLIV86
OpcodeCSPrefix
OpcodeCSPrefixV86
OpcodeDSPrefix
OpcodeDSPrefixV86
OpcodeESPrefix
OpcodeESPrefixV86
OpcodeFSPrefix
OpcodeFSPrefixV86
OpcodeGSPrefix
OpcodeGSPrefixV86
OpcodeGenericPrefix
OpcodeGenericPrefixV86
OpcodeHLTV86
OpcodeINB
OpcodeINBV86
OpcodeINBimm
OpcodeINBimmV86
OpcodeINSB
OpcodeINSBV86
OpcodeINSW
OpcodeINSWV86
OpcodeINTO
OpcodeINTOV86
OpcodeINTnn
OpcodeINTnnV86
OpcodeINW
OpcodeINWV86
OpcodeINWimm
OpcodeINWimmV86
OpcodeIRETV86
OpcodeInvalid
OpcodeInvalidV86
OpcodeLOCKPrefix
OpcodeLOCKPrefixV86
OpcodeNPXV86
OpcodeOPER32Prefix
OpcodeOPER32PrefixV86
OpcodeOUTB
OpcodeOUTBV86
OpcodeOUTBimm
OpcodeOUTBimmV86
OpcodeOUTSB
OpcodeOUTSBV86
OpcodeOUTSW
OpcodeOUTSWV86
OpcodeOUTW
OpcodeOUTWV86
OpcodeOUTWimm
OpcodeOUTWimmV86
OpcodePOPFV86
OpcodePUSHFV86
OpcodeREPNEPrefix
OpcodeREPNEPrefixV86
OpcodeREPPrefix
OpcodeREPPrefixV86
OpcodeSSPrefix
OpcodeSSPrefixV86
OpcodeSTI
OpcodeSTIV86
PushException
PushInt
SsToLinear
SwapContext
SwitchToHandlerStack
VdmDecodeOperand
VdmDispatchIntAck
VdmFixEspEbp
VdmOpcode0f
VdmOpcodeClts
VdmOpcodeGetCrx
VdmOpcodeGetDrx
VdmOpcodeLmsw
VdmOpcodeSetCrx
VdmOpcodeSetDrx
VdmSegParams
_ADD_MAP_REGISTERS@12
_AdminlessTelemetryEnabled@12
_AdtpAppendString@16
_AdtpAppendZString@16
_AdtpBuildAccessReasonAuditString@36
_AdtpBuildAccessReasonAuditStringInternal@48
_AdtpBuildAccessesString@36
_AdtpBuildContextFromSecurityDescriptor@8
_AdtpBuildGuidString@24
_AdtpBuildHexInt64String@24
_AdtpBuildIPv4Strings@20
_AdtpBuildIPv6Strings@20
_AdtpBuildLogonIdStrings@28
_AdtpBuildMacStrings@12
_AdtpBuildMessageString@24
_AdtpBuildMultiSzStringListString@12
_AdtpBuildObjectTypeStrings@24
_AdtpBuildPrivilegeAuditString@24
_AdtpBuildRegistryValueString@20
_AdtpBuildReplacementString@8
_AdtpBuildSecurityDescriptorChangeString@44
_AdtpBuildSecurityDescriptorUnicodeString@28
_AdtpBuildSidListString@24
_AdtpBuildSockAddrString@20
_AdtpBuildStagingReasonAuditStringInternal@36
_AdtpBuildStringListString@24
_AdtpBuildUlongString@24
_AdtpBuildUserAccountControlString@32
_AdtpCleanupParameterAllocations@12
_AdtpDbInitializePrivilegeObject@0
_AdtpEtwBuildDashString@4
_AdtpEtwBuildString@20
_AdtpFormatPrefix@12
_AdtpGetCapID@8
_AdtpGetCategoryAndSubCategoryId@12
_AdtpInitializeAuditingCommon@0
_AdtpInitializeDriveLetters@0
_AdtpIsCorrectlyFormedUnicodeString@4
_AdtpLookupDriveLetter@12
_AdtpLookupKnownPrivilegeNameQuickly@8
_AdtpNormalizeAuditInfoHelper@8
_AdtpObjsInitialize@0
_AdtpPackageParameters@32
_AdtpSubstituteDriveLetter@4
_AdtpWriteToEtw@8
_AdtpWriteToEtwEx@8
_AhcCacheQueryHwId@4
_AlpcConnectionCleanupProcedure@4
_AlpcConnectionDeleteProcedure@4
_AlpcConnectionDestroyProcedure@4
_AlpcCreateSecurityContext@16
_AlpcGetHeaderSize@4
_AlpcGetMessageAttribute@8
_AlpcHandleDataCleanupProcedure@4
_AlpcHandleDataDeleteProcedure@4
_AlpcHandleDataDestroyProcedure@4
_AlpcInitializeHandleTable@8
_AlpcInitializeMessageAttribute@16
_AlpcMessageCleanupProcedure@4
_AlpcMessageDeleteProcedure@4
_AlpcMessageDestroyProcedure@4
_AlpcRegionCleanupProcedure@4
_AlpcRegionDeleteProcedure@4
_AlpcRegionDestroyProcedure@4
_AlpcReserveCleanupProcedure@4
_AlpcReserveDeleteProcedure@4
_AlpcReserveDestroyProcedure@4
_AlpcSectionCleanupProcedure@4
_AlpcSectionDeleteProcedure@4
_AlpcSectionDestroyProcedure@4
_AlpcSecurityCleanupProcedure@4
_AlpcSecurityDeleteProcedure@4
_AlpcSecurityDestroyProcedure@4
_AlpcViewCleanupProcedure@4
_AlpcViewDeleteProcedure@4
_AlpcViewDestroyProcedure@4
_AlpciDestroyDeferredMessageContext@4
_AlpcpAcceptConnectPort@48
_AlpcpAdjustCompletionListConcurrencyCount@8
_AlpcpAllocateBuffer@12
_AlpcpAllocateCompletionBuffer@8
_AlpcpAllocateCompletionPacketLookaside@12
_AlpcpAllocateFromBitmap@12
_AlpcpAllocateMessageFromExtendedTables@4
_AlpcpAllocateMessageFunction@12
_AlpcpAllocateMessageLog@0
_AlpcpAllocateSnapshotMessageLog@0
_AlpcpAssociateIoCompletionPort@12
_AlpcpCancelMessagesByRequestor@20
_AlpcpCaptureIdMessage@12
_AlpcpCaptureMessageDataSafe@4
_AlpcpChargePagedPoolQuota@8
_AlpcpCheckConnectionSecurity@16
_AlpcpCleanupProcessViews@4
_AlpcpClearOwnerPortMessage@4
_AlpcpClosePort@16
_AlpcpConnectPort@52
_AlpcpCreateClientPort@44
_AlpcpCreateConnectionPort@24
_AlpcpCreatePort@12
_AlpcpCreateRegion@16
_AlpcpCreateReserve@12
_AlpcpCreateSection@24
_AlpcpCreateSectionView@20
_AlpcpCreateSecurityContext@20
_AlpcpCreateView@12
_AlpcpDeferredFreeCompletionPacketLookaside@4
_AlpcpDeletePort@4
_AlpcpDeleteView@4
_AlpcpDereferenceBlobEx@8
_AlpcpDestroyPort@4
_AlpcpDisconnectPort@8
_AlpcpDispatchMessage@4
_AlpcpDispatchReplyToPort@4
_AlpcpDoPortCleanup@4
_AlpcpEnterAllocationEventMessageLog@4
_AlpcpEnterFreeEventMessageLog@4
_AlpcpEnterStateChangeEventMessageLog@4
_AlpcpEnumerateResourcesPort@16
_AlpcpExposeCapturedContextAttribute@16
_AlpcpFlushCancelQueue@8
_AlpcpFlushMessagesPort@4
_AlpcpFlushResourcesPort@4
_AlpcpForceUnlinkSecureView@4
_AlpcpFormatConnectionRequest@40
_AlpcpFreeBitmap@16
_AlpcpFreeBuffer@4
_AlpcpFreeCompletionList@4
_AlpcpFreeCompletionPacketLookaside@4
_AlpcpFreeMessageFunction@4
_AlpcpGetDataFromUserVaSafe@8
_AlpcpGetEffectiveTokenMessage@20
_AlpcpGetMessageAttributeOffset@8
_AlpcpGetMessageAttributeSize@4
_AlpcpGetPortNameInformation@12
_AlpcpGetValidPointer@4
_AlpcpImpersonateMessage@20
_AlpcpInitSystem@0
_AlpcpInitializeCompletionList@24
_AlpcpInitializeDefaultPortAttributes@4
_AlpcpInitializeMessageLog@8
_AlpcpInitializePort@12
_AlpcpInsertMessageCanceledQueue@8
_AlpcpInsertMessageDirectQueue@8
_AlpcpInsertMessageLargeMessageQueue@8
_AlpcpInsertMessageMainQueue@8
_AlpcpInsertMessagePendingQueue@8
_AlpcpInsertResourcePort@8
_AlpcpInvokeLogCallbacks@8
_AlpcpIsImpersonationAllowed@8
_AlpcpLocateMessageLog@4
_AlpcpLocateSectionView@16
_AlpcpLocateView@8
_AlpcpLockCommunicationInfoExclusive@4
_AlpcpLockCommunicationInfoShared@4
_AlpcpLockForCachedReferenceBlob@4
_AlpcpLockIncomingQueue@4
_AlpcpLockPortExclusive@4
_AlpcpLockPortShared@4
_AlpcpLogClosePort@4
_AlpcpLogConnectFail@8
_AlpcpLogConnectRequest@4
_AlpcpLogConnectSuccess@4
_AlpcpLogReceiveMessage@4
_AlpcpLogSendMessage@4
_AlpcpLogUnwait@4
_AlpcpLogWaitForNewMessage@4
_AlpcpLogWaitForReply@4
_AlpcpLookasidePacketCallbackRoutine@8
_AlpcpMapLegacyPortRemoteView@12
_AlpcpMapLegacyPortView@12
_AlpcpOpenPort@24
_AlpcpPortQueryBasicInfo@20
_AlpcpPortQueryConnectedSidInfo@20
_AlpcpPortQueryServerInfo@20
_AlpcpPortQueryServerSessionInfo@16
_AlpcpPrepareViewForDelivery@12
_AlpcpProbeMessageAttributes@12
_AlpcpProcessConnectionRequest@32
_AlpcpProcessSynchronousRequest@36
_AlpcpQueryHeadLargeQueue@4
_AlpcpQueryHeadMainQueue@4
_AlpcpQueryRemoteView@12
_AlpcpQuerySidMessage@20
_AlpcpQuerySidToken@16
_AlpcpQueryTokenModifiedIdMessage@20
_AlpcpQueueIoCompletionPort@16
_AlpcpReceiveLegacyConnectionReply@24
_AlpcpReceiveView@12
_AlpcpReferenceBlob@4
_AlpcpReferenceMessageByWaitingThread@8
_AlpcpReferenceMessageByWaitingThreadPort@8
_AlpcpReferenceMessageByWaitingThreadPortQueue@8
_AlpcpRegisterCompletionListDatabase@4
_AlpcpReleasePagedPoolQuota@8
_AlpcpReleaseViewAttribute@4
_AlpcpRemoveMessageFromPendingQueue@4
_AlpcpRemoveMessagePort@8
_AlpcpRemoveResourcePort@8
_AlpcpReplyLegacySynchronousRequest@12
_AlpcpRestoreWriteAccess@4
_AlpcpReturnMessageOnInsufficientBuffer@12
_AlpcpSendCloseMessage@4
_AlpcpSendLegacySynchronousRequest@16
_AlpcpSetOwnerPortMessage@12
_AlpcpSetOwnerProcessPort@8
_AlpcpSetupMessageDataForDeferredCopy@24
_AlpcpSignalPortAndUnlock@4
_AlpcpTrackPortReferences@4
_AlpcpTransferQuotaMessage@4
_AlpcpTryLockForCachedReferenceBlob@4
_AlpcpUnlockBlob@4
_AlpcpUnlockCommunicationInfoExclusive@4
_AlpcpUnlockCommunicationInfoShared@4
_AlpcpUnlockIncomingQueue@4
_AlpcpUnlockMessage@4
_AlpcpUnlockPortExclusive@4
_AlpcpUnlockPortShared@4
_AlpcpUnlockSecurityData@4
_AlpcpUnregisterCompletionListDatabase@4
_AlpcpValidateAndSetPortAttributes@28
_AlpcpValidateConnectionMessage@12
_AlpcpValidateDataInformation@8
_AlpcpValidateMessage@8
_AlpcpViewSearchCallbackFunction@8
_AlpcpWaitForPortReferences@20
_AlpcpWaitForSingleObject@20
_AlpcpWalkConnectionList@4
_AnFwConfigureProgressResources@4
_AnFwDisplayBackgroundUpdate@4
_AnFwDisplayFade@0
_AnFwDisplayProgressIndicator@4
_AnFwFadeCompletion@0
_AnFwProgressIndicatorTransition@0
_AnFwpBackgroundUpdateTimer@16
_AnFwpDisableProgressTimer@0
_AnFwpFadeAnimationTimer@16
_AnFwpProgressAnimationManual@0
_AnFwpProgressIndicatorTimer@16
_ApiSetComposeSchema@16
_ApiSetIsSchemaSealed@4
_ApiSetLoadSchemaEx@12
_ApiSetLoadSchemaWithExtensions@12
_ApiSetQuerySchemaInfo@16
_ApiSetReleaseSchema@4
_ApiSetResolveToHost@20
_ApiSetValidateSchemaFormat@8
_ApiSetpSearchForApiSet@12
_ApiSetpSearchForApiSetHost@16
_AppModelFreeUnicodeString@4
_AppModelPolicy_GetPolicy_Internal@20
_AppendCondition@20
_ArbAddAllocation@8
_ArbAddInaccessibleAllocationRange@8
_ArbAddMmConfigRangeAsBootReserved@8
_ArbAddOrdering@20
_ArbAddReserved@8
_ArbAllocateEntry@8
_ArbArbiterHandler@12
_ArbBacktrackAllocation@8
_ArbBootAllocation@8
_ArbBuildAssignmentOrdering@16
_ArbCommitAllocation@4
_ArbDeleteOwnerRanges@8
_ArbFindSuitableRange@8
_ArbFreeOrderingList@4
_ArbGetNextAllocationRange@8
_ArbInitializeArbiterInstance@24
_ArbInitializeOrderingList@4
_ArbInitializeOsInaccessibleRange@4
_ArbInitializeRangeList@16
_ArbIsConflictWithMmConfigRange@16
_ArbOverrideConflict@8
_ArbPreprocessEntry@8
_ArbPruneOrdering@20
_ArbQueryArbitrate@8
_ArbQueryConflict@8
_ArbRetestAllocation@8
_ArbRollbackAllocation@4
_ArbShareDriverExclusive@8
_ArbStartArbiter@8
_ArbTestAllocation@8
_ArbpBuildAllocationStack@12
_ArbpBuildAlternative@12
_ArbpGetRegistryValue@12
_ArbpQueryConflictCallback@8
_ArbpUpdatePriority@8
_ArrayContains@20
_AsiAddDataToSchema@16
_AsiPopulateHashes@4
_AsiSortHashTableHelper
_AsiSortValueList@8
_AslAlloc@12
_AslComputeCrc32@12
_AslDoesDirectoryExistNtPath@4
_AslDoesFileExistNtPath@4
_AslEnvExpandStrings2@28
_AslEnvExpandStrings@24
_AslEnvGetProcessWowInfo@20
_AslEnvGetSysNativeDirPathForGuestBuf@20
_AslEnvGetSystem32DirPathBuf@20
_AslEnvVarQuery@24
_AslEnvVerifyGuestProcessorSupport@8
_AslFileAllocAndGetAttributes@16
_AslFileFreeAttributes@4
_AslFileMappingCreate@20
_AslFileMappingCreateFromImageView@16
_AslFileMappingDelete@4
_AslFileMappingEnsure@4
_AslFileMappingEnsureMappedAs@8
_AslFileMappingGetFileKindDetail@8
_AslFileMappingGetImageTypeEx@20
_AslFileNotFound@4
_AslFileResourceNotFound@4
_AslFree@8
_AslGuidToString@12
_AslGuidToString_UStr@8
_AslHashFree@4
_AslImageFileToArchitecture@4
_AslLogCallPrintf
_AslPathClean@12
_AslPathCleanUstr@4
_AslPathCombine@16
_AslPathSplit@28
_AslPathToNetworkPathNt@8
_AslPathToSystemPathBuf@12
_AslPathWildcardFindClose@4
_AslPathWildcardFindFirst@16
_AslPathWildcardFindNext@12
_AslRegWildcardFindClose@4
_AslRegWildcardFindFirst@12
_AslRegWildcardFindNext@8
_AslRegistryBuildMachinePath@8
_AslRegistryBuildUserPath@8
_AslRegistryEnumKey@16
_AslRegistryGetKey@20
_AslRegistryGetUInt32@12
_AslRegistryGetUInt32_UStr@12
_AslRegistryOpenSubKey@16
_AslStringAnsiToUnicode@8
_AslStringDuplicate@8
_AslStringHasWildcard@4
_AslStringPatternMatchA@8
_AslStringPatternMatchW@8
_AslStringSearchA@16
_AslStringSearchW@16
_AslStringUpcaseToMultiByteN@12
_AslStringXmlSanitize@4
_AslUnicodeStringFree@4
_AslpAllocMatchNode@12
_AslpDetermineDosPathNameType@4
_AslpEnvResolveVars@28
_AslpFileGet16BitDescription@8
_AslpFileGet16BitModuleName@8
_AslpFileGetChecksum@8
_AslpFileGetChecksumAttributes@8
_AslpFileGetClrVersion@8
_AslpFileGetClrVersionAttribute@8
_AslpFileGetCrcChecksum@8
_AslpFileGetExeWrapper@8
_AslpFileGetExportName@8
_AslpFileGetFileKindDetailAttribute@8
_AslpFileGetHeaderAttributesNE@8
_AslpFileGetHeaderAttributesPE@8
_AslpFileGetImageNtHeader@8
_AslpFileGetModuleType@8
_AslpFileGetNtHeaderAttributes@36
_AslpFileGetPeExportNameExeWrapper@8
_AslpFileGetSizeAttributes@8
_AslpFileGetVersionAttributes@8
_AslpFileGetVersionBlock@12
_AslpFileHasActiveMarkWrapper@12
_AslpFileHasArmadilloWrapper@4
_AslpFileHasSecuromWrapper@4
_AslpFileLargeAssignViewAndDelete@8
_AslpFileLargeEnsureLargeFileMapping@8
_AslpFileLargeGetChecksum@8
_AslpFileLargeGetChecksumAttributes@8
_AslpFileLargeGetCrcChecksum@8
_AslpFileLargeMapCreate@8
_AslpFileLargeMapDelete@4
_AslpFileMakeBinVersionAttributes@8
_AslpFileMakeStringVersionAttributes@8
_AslpFileMappingGetFileKind@8
_AslpFilePartialViewFree@4
_AslpFileQuery16BitDescription@8
_AslpFileQuery16BitModuleName@8
_AslpFileQueryExportName@8
_AslpFileQueryVersionString@24
_AslpFileStringTokenize@12
_AslpFileVerBlockGetValueOffset@12
_AslpFileVerQueryBlock@16
_AslpFileVerStringBlockGetValue@16
_AslpHasStarForceWrapper@4
_AslpImageRvaToSection@8
_AslpImageRvaToVa@12
_AslpParsePattern@8
_AslpPathWildcardAllocMatchNode@24
_AslpPathWildcardFreeFindContext@4
_AslpPathWildcardFreeMatchNode@4
_AslpPathWildcardMakeLeaves@4
_AslpProcessMatchRegNode@8
_AuthzBasepAddAccessTypeList@24
_AuthzBasepAddSecurityAttribute@8
_AuthzBasepAddSecurityAttributeToLists@16
_AuthzBasepAddSecurityAttributeValueToLists@16
_AuthzBasepAddSecurityAttributeValues@8
_AuthzBasepAllocateClaimCollectionNoLists@0
_AuthzBasepAllocateSecurityAttribute@4
_AuthzBasepAllocateSecurityAttributeValue@4
_AuthzBasepAllocateSecurityAttributesList@0
_AuthzBasepCommitSecurityAttributeChanges@8
_AuthzBasepCompareFQBNOperands@12
_AuthzBasepCompareIntegerOperands@8
_AuthzBasepCompareLegacySecurityAttributesInformation@8
_AuthzBasepCompareOctetStringOperands@8
_AuthzBasepCompareSecurityAttribute@8
_AuthzBasepCompareSecurityAttributesInformation@8
_AuthzBasepCompareSigned@20
_AuthzBasepCompareUnicodeStringCaseSensitive@8
_AuthzBasepCompareUnicodeStringOperands@12
_AuthzBasepCompareUnsigned@20
_AuthzBasepComputeBitwise@8
_AuthzBasepComputeExpression@12
_AuthzBasepConvertRelativeToAbsoluteTokenAttribute@16
_AuthzBasepCopyoutClaimAttributeValues@20
_AuthzBasepCopyoutClaimAttributes@12
_AuthzBasepCopyoutInternalSecurityAttributeValues@20
_AuthzBasepCopyoutInternalSecurityAttributes@12
_AuthzBasepCopyoutSecurityAttributeValues@20
_AuthzBasepCopyoutSecurityAttributes@20
_AuthzBasepDeleteAllSecurityAttributeValues@4
_AuthzBasepDeleteAllSecurityAttributes@4
_AuthzBasepDeleteSecurityAttribute@8
_AuthzBasepDeleteSecurityAttributeValues@12
_AuthzBasepDeviceMemberOf@24
_AuthzBasepDuplicateSecurityAttributes@12
_AuthzBasepEqualUnicodeString@12
_AuthzBasepEqualUnicodeStringCaseSensitive@8
_AuthzBasepEvaluateAceCondition@48
_AuthzBasepEvaluateAttribute@4
_AuthzBasepEvaluateExpression@12
_AuthzBasepEvaluateSetRelationship@12
_AuthzBasepFinaliseSecurityAttributesList@8
_AuthzBasepFindSecurityAttribute@8
_AuthzBasepFindSecurityAttributeValue@16
_AuthzBasepFindSystemSecurityAttribute@4
_AuthzBasepFindTokenAttribute@4
_AuthzBasepFreeSecurityAttributeValues@8
_AuthzBasepFreeSecurityAttributesList@4
_AuthzBasepGetClaimAttributeValueCopyoutBufferSize@8
_AuthzBasepGetClaimAttributesCopyoutBufferSize@8
_AuthzBasepGetConstantOperand@16
_AuthzBasepGetInternalSecurityAttributeValueCopyoutBufferSize@8
_AuthzBasepGetInternalSecurityAttributesCopyoutBufferSize@8
_AuthzBasepGetNextValue@8
_AuthzBasepGetOperandStringCaseForEvaluation@8
_AuthzBasepGetSecurityAttributeValueCopyoutBufferSize@8
_AuthzBasepGetSecurityAttributesCopyoutBufferSize@16
_AuthzBasepInitializeResourceClaimsFromSacl@8
_AuthzBasepInitializeSystemSecurityAttributes@4
_AuthzBasepIsCompareRelevantAttribute@4
_AuthzBasepIsValidExpression@16
_AuthzBasepMemAlloc@12
_AuthzBasepMemberOf@24
_AuthzBasepMergeAccessReasons@12
_AuthzBasepObjectInTypeList@16
_AuthzBasepOperandValueTypesCompatible@4
_AuthzBasepPopResult@12
_AuthzBasepPushResult@12
_AuthzBasepQueryClaimAttributesToken@16
_AuthzBasepQueryInternalSecurityAttributesToken@16
_AuthzBasepQuerySecurityAttributeAndValues@4
_AuthzBasepQuerySecurityAttributesToken@24
_AuthzBasepQuerySystemSecurityAttributeAndValues@4
_AuthzBasepQueryTokenAttributeAndValues@4
_AuthzBasepRemoveSecurityAttributeFromLists@16
_AuthzBasepRemoveSecurityAttributeValueFromLists@16
_AuthzBasepReplaceSecurityAttribute@8
_AuthzBasepResetOperands@8
_AuthzBasepRestartOperandValueEnumeration@4
_AuthzBasepRollbackSecurityAttributeChanges@8
_AuthzBasepSetAccessReasons@20
_AuthzBasepSetAppContainerAccessReasons@16
_AuthzBasepSetSecurityAttributesToken@12
_AuthzBasepSetTypeListAccessReasons@24
_AuthzBasepUnicodeStringFromOperandValue@16
_AuthzBasepUpdateParentTypeList@20
_AuthzBasepValidateSecurityAttributes@8
_AuthzBasepValueInSet@16
_BCryptCloseAlgorithmProvider@8
_BCryptCreateHash@28
_BCryptDecrypt@40
_BCryptDestroyHash@4
_BCryptDestroyKey@4
_BCryptEncrypt@40
_BCryptFinishHash@16
_BCryptGenRandom@16
_BCryptGenerateSymmetricKey@28
_BCryptGetProperty@24
_BCryptHashData@16
_BCryptImportKeyPair@28
_BCryptOpenAlgorithmProvider@16
_BCryptSetProperty@20
_BapdGetISRegistryKey@4
_BapdRecordFirmwareBootStats@0
_BapdRegisterEtwProvider@12
_BapdRegisterSiData@12
_BapdWriteEtwEvents@8
_BapdpIsTime1MoreRecentThanTime2@8
_BapdpKsrCancelScenario@8
_BapdpKsrComplete@8
_BapdpKsrCompleteScenario@8
_BapdpKsrCompleteScenarioPhase0@8
_BapdpKsrInitiateScenarioPhase0@8
_BapdpKsrpInitiateScenario@8
_BapdpMarshallBootDataToRegistry@0
_BapdpParseEventParts@20
_BapdpProcessBitlockerStatus@0
_BapdpProcessBootMetadata@0
_BapdpProcessEDrvHintInfo@0
_BapdpProcessEtwEvents@0
_BapdpProcessFwUpdateResults@0
_BapdpProcessHSTIResults@0
_BapdpProcessResumeInformation@0
_BapdpProcessSpacesBootInformation@0
_BapdpProcessWmdResults@0
_BapdpQueryData@20
_BapdpRegisterBitlockerStatus@8
_BapdpRegisterEDrvHintInfo@4
_BapdpRegisterFwUpdateResults@8
_BapdpRegisterResumeInformation@8
_BapdpRegisterWbclData@4
_BapdpRegisterWmdResult@4
_BapdpWriteEventDataToRegistry@12
_BcdCloseObject@4
_BcdCloseStore@4
_BcdCreateObject@16
_BcdDeleteObject@4
_BcdEnumerateObjects@20
_BcdFlushStore@4
_BcdForciblyUnloadStore@4
_BcdGetElementData@16
_BcdGetElementDataWithFlags@20
_BcdGetSystemStorePath@4
_BcdInitializeBcdSyncMutant@0
_BcdOpenObject@12
_BcdOpenStore@12
_BcdOpenSystemStore@4
_BcdQueryObject@16
_BcdSetElementData@16
_BcdSetElementDataWithFlags@20
_BcdUtilGetBootOption@8
_BcdUtilGetBootOptionBoolean@12
_BcdUtilGetBootOptionInteger@12
_BcdUtilGetBootOptionString@12
_BcpConvertBugDataToString@8
_BcpConvertProgressToString@8
_BcpCursorLessThan@8
_BcpDisplayCriticalCharacter@12
_BcpDisplayCriticalString@16
_BcpDisplayEarlyBugCheckScreen@12
_BcpDisplayErrorInformation@24
_BcpDisplayProgress@8
_BcpFindMessage@4
_BcpGetCharacterMaxResourceProfile@16
_BcpGetComponentOffsets@24
_BcpGetDisplayType@12
_BcpGetMaxResourceProfile@8
_BcpGetProgressMessages@12
_BcpPrintSpaces@24
_BcpSanitizeDriverName@8
_BgAcquireSpinLock@0
_BgConsoleDestroyInterface@4
_BgConsoleGetInterface@4
_BgConvertResources@4
_BgDisplayBackgroundUpdate@4
_BgDisplayFade@0
_BgDisplayProgressIndicator@4
_BgDisplaySafeToPowerOffScreen@0
_BgDisplayString@4
_BgFreeContext@4
_BgGetContext@0
_BgGetDisplayContext@0
_BgGetIsColorOverridden@4
_BgLibraryDestroy@0
_BgLibraryDisable@0
_BgLibraryEnable@8
_BgLibraryInitialize@8
_BgMarkHiberPhase@0
_BgQueryBootGraphicsInformation@8
_BgReleaseSpinLock@0
_BgSetBootGraphicsInformation@8
_BgSetFrameBufferAccess@12
_BgfxGrowDirtyRect@12
_BgkAcquireDisplayOwnership@0
_BgkDestroy@0
_BgkDisplayBackgroundUpdate@0
_BgkDisplayCharacter@20
_BgkDisplayProgressIndicator@0
_BgkDisplayString@4
_BgkDisplayStringEx@4
_BgkDrawText@4
_BgkGetConsoleState@4
_BgkGetCursorState@12
_BgkInitialize@8
_BgkNotifyDisplayOwnershipChange@8
_BgkNotifyDisplayOwnershipLost@4
_BgkQueryBootGraphicsInformation@8
_BgkResumeFinished@0
_BgkResumeInitialize@0
_BgkResumePrepare@4
_BgkSetBootGraphicsInformation@8
_BgkSetCursor@12
_BgkSetDisplayOwnership@4
_BgkSetTextColor@4
_BgkSetVirtualFrameBuffer@8
_BgkSolidColorFill@20
_BgkpAcquireConsole@0
_BgkpDisableConsole@0
_BgkpLockBgfxCodeSection@0
_BgkpReleaseConsole@0
_BgkpResetDisplay@12
_BgkpTryEnableConsole@0
_BgkpUnlockBgfxCodeSection@0
_BgkpVgaBltRoutine@12
_BgpBcInitializeCriticalMode@8
_BgpClearScreen@4
_BgpConsoleClearScreen@0
_BgpConsoleClearScreenEx@0
_BgpConsoleDisplayCharacter@20
_BgpConsoleDisplayCharacterEx@24
_BgpConsoleDisplayString@4
_BgpConsoleDrawCursor@0
_BgpConsoleGetCursorState@12
_BgpConsoleGetFontName@8
_BgpConsoleGetState@4
_BgpConsoleInitialize@16
_BgpConsoleScrollScreen@0
_BgpConsoleSetCursor@12
_BgpConsoleSetPointSize@24
_BgpConsoleSetTextColor@8
_BgpDisplayCharacterDestroyContext@4
_BgpDisplayCharacterEx@40
_BgpDisplayCharacterGetContext@12
_BgpDisplaySafeToPowerOffScreen@0
_BgpFmRoundDefault@4
_BgpFmRoundUp@4
_BgpFmSqrt@12
_BgpFoDestroy@4
_BgpFoDetermineFontInformation@24
_BgpFoGetAdvanceWidth@20
_BgpFoGetFontHandle@8
_BgpFoGetStringAdvanceWidth@20
_BgpFoGetTextMetrics@8
_BgpFoInitialize@8
_BgpFwAcquireLock@0
_BgpFwAllocateMemory@4
_BgpFwDisplayBugCheckProgressUpdate@12
_BgpFwDisplayBugCheckScreen@20
_BgpFwFreeMemory@4
_BgpFwGetCurrentIrql@0
_BgpFwInitializeLock@0
_BgpFwInitializeReservePool@12
_BgpFwLibraryDestroy@0
_BgpFwLibraryDisable@0
_BgpFwLibraryEnable@4
_BgpFwLibraryInitialize@8
_BgpFwMapFrameBuffer@4
_BgpFwMarkHiberPhase@0
_BgpFwQueryBootGraphicsInformation@8
_BgpFwQueryPerformanceCounter@4
_BgpFwReleaseLock@0
_BgpFwReserveAllocate@4
_BgpFwReserveFree@4
_BgpFwReservePoolSwap@16
_BgpFwSetBootGraphicsInformation@8
_BgpGetBitsPerPixel@0
_BgpGetResolution@0
_BgpGxBlendColor@12
_BgpGxBlendRectangle@16
_BgpGxConvertRectangle@8
_BgpGxConvertRectangleEx@16
_BgpGxCopyBitmapToRectangle@12
_BgpGxCopyRectangle@16
_BgpGxDrawBitmapImage@12
_BgpGxDrawRectangle@8
_BgpGxFillRectangle@8
_BgpGxFindSubRectangle@20
_BgpGxInitializeRectangle@16
_BgpGxIsRectangleValid@4
_BgpGxMarkClean@4
_BgpGxParseBitmap@12
_BgpGxProcessQrCodeBitmap@8
_BgpGxReadRectangle@12
_BgpGxRectangleCreate@12
_BgpGxRectangleDestroy@4
_BgpGxRectangleSize@12
_BgpGxReservePoolRectangleSize@12
_BgpRasGetGlyphAdvanceWidth@20
_BgpRasGetGlyphTextCellDimensions@12
_BgpRasInitializeRasterizer@4
_BgpRasPrintGlyph@36
_BgpTxtAdjustStaticRegion@12
_BgpTxtClearRegion@4
_BgpTxtCreateRegion@28
_BgpTxtDestroyRegion@4
_BgpTxtDisplayCharacter@28
_BgpTxtDisplayString@20
_BgpTxtGetRegionContext@4
_BgpTxtRegionSize@4
_BiAcquireBcdSyncMutant@4
_BiAcquirePrivilege@8
_BiAddBootEntry@8
_BiAddBootEntryToEfiBootManagerDisplayOrder@8
_BiAddBootEntryToNvramDisplayOrder@4
_BiAddStoreFromFile@12
_BiAdjustPrivilege@12
_BiAreBootEntriesEqual@8
_BiBindEfiBootManager@8
_BiBindEfiEntries@8
_BiBindEfiEntryToBcdObject@8
_BiBindEfiNamespaceObjects@4
_BiBuildIdentifierList@12
_BiCleanupLoadedStores@4
_BiCloseKey@4
_BiCloseStore@8
_BiConvertBootEnvironmentDeviceToNt@20
_BiConvertBootEnvironmentDeviceToQualifiedPartition@12
_BiConvertBootEnvironmentDeviceToUnknown@12
_BiConvertElementFormatToValueType@4
_BiConvertElementToRegistryData@24
_BiConvertNtDeviceToBootEnvironment@16
_BiConvertNtFilePathToBootEnvironment@20
_BiConvertQualifiedPartitionToBootEnvironment@12
_BiConvertRegistryDataToElement@28
_BiCreateBootEntry@8
_BiCreateEfiEntry@8
_BiCreateFileDeviceElement@12
_BiCreateKey@24
_BiCreateKeySecurityDescriptor@4
_BiCreateMergedBootEntry@20
_BiCreateObject@20
_BiCreatePartitionDevice@16
_BiDeleteBootEntry@4
_BiDeleteEfiVariable@4
_BiDeleteElement@12
_BiDeleteKey@4
_BiDeleteRegistryValue@12
_BiDoesHiveExist@4
_BiDoesHiveKeyExist@4
_BiEnumerateBootEntries@8
_BiEnumerateSubKeys@12
_BiExportBcdObjects@8
_BiExportEfiBootManager@12
_BiExportStoreAlterationsToEfi@4
_BiExportStoreAlterationsToFirmware@4
_BiFreeIdentifierList@4
_BiGetCurrentBootEntryIdentifier@4
_BiGetDefaultBootEntryIdentifier@8
_BiGetDeviceFromEfiPath@12
_BiGetDriveLayoutBlock@12
_BiGetDriveLayoutInformation@8
_BiGetElement@16
_BiGetFilePathFromEfiPath@12
_BiGetFirmwareType@0
_BiGetKeyName@8
_BiGetNtPartitionPath@8
_BiGetObjectDescription@8
_BiGetObjectIdentifier@8
_BiGetObjectReferenceFromEfiEntry@8
_BiGetPartitionInformation@12
_BiGetPartitionVhdFilePath@4
_BiGetPartitionVhdFilePathFromUnicodeString@4
_BiGetPhysicalDriveName@8
_BiGetRegistryValue@24
_BiGetSavedBootEntry@8
_BiGetSystemPartition@4
_BiGetVolumeDiskExtentsInformation@8
_BiHandleFirmwareDefaultEntry@16
_BiIsEnumerateMatch@8
_BiIsImpersonating@0
_BiIsLinkedToEfiVariable@8
_BiIsLinkedToFirmwareVariable@8
_BiIsLogEnabled@0
_BiIsObjectAliased@8
_BiIsOfflineHandle@4
_BiIsPortableWorkspaceBoot@0
_BiIsSynchFirmwareEntries@4
_BiIsSystemStore@4
_BiIsSystemStoreCandidate@4
_BiIsValidDiskDevice@8
_BiIsValidObject@12
_BiIsVolumePartitionInformationRetained@4
_BiIsWinPEBoot@0
_BiIsWindowsEfiEntry@4
_BiIssueGetDriveLayoutIoctl@8
_BiLoadHive@12
_BiLoadSystemStore@4
_BiLogFileOwnerProcess@8
_BiLogMessage
_BiLookupObjectByBootEntry@12
_BiLookupObjectByIdentifier@12
_BiLookupObjectByIdentifierAndBootEntry@16
_BiMapEfiDeviceForSpaces@12
_BiMarkTreatAsSystemStore@8
_BiModifyBootEntry@4
_BiOpenKey@16
_BiOpenKeyNonBcd@16
_BiOpenStoreKeyFromObject@8
_BiOpenSystemStore@8
_BiQueryBootEntryOrder@8
_BiQueryBootOptions@8
_BiReleaseBcdSyncMutant@4
_BiReleasePrivilege@4
_BiRemoveBootEntryFromNvramDisplayOrder@4
_BiRemoveEntryFromBootOrder@12
_BiResolveLocateDevice@8
_BiSanitizeHandle@4
_BiSetBootEntryOrder@8
_BiSetBootOptions@8
_BiSetFirmwareModified@8
_BiSetFirmwareModifiedFromObject@8
_BiSetObjectDescription@8
_BiSetRegistryValue@24
_BiSpacesUpdatePhysicalDevicePath@4
_BiTranslateBootEntryId@12
_BiTranslateBootOrder@16
_BiTranslateDisplayOrder@16
_BiTranslateFilePath@12
_BiTranslateObjectIdentifier@12
_BiTranslateSymbolicLink@8
_BiTranslateSymbolicLinkFile@8
_BiUnloadHiveByHandle@8
_BiUnloadHiveByName@12
_BiUpdateBcdObject@8
_BiUpdateEfiEntry@8
_BiUpdateObjectReferenceInEfiEntry@8
_BiVerifyBootPartition@24
_BiWasFirmwareModified@4
_BiZwClose@4
_BiZwCreateKey@28
_BiZwDeleteKey@4
_BiZwDeleteValueKey@8
_BiZwEnumerateKey@24
_BiZwOpenKey@12
_BiZwQueryKey@20
_BiZwQueryValueKey@24
_BiZwSetSecurityObject@12
_BiZwSetValueKey@24
_BootApplicationPersistentDataInitialize@4
_BootApplicationPersistentDataProcess@4
_BuildQueryDirectoryIrp@64
_BvgaAcquireDisplayOwnership@0
_BvgaAcquireLock@0
_BvgaBitBlt@12
_BvgaCheckDisplayOwnership@0
_BvgaDisplayString@4
_BvgaDriverInitialize@12
_BvgaEnableBootDriver@4
_BvgaGetDisplayState@0
_BvgaGetResourceAddress@4
_BvgaIndicateProgress@0
_BvgaIsBootDriverInstalled@0
_BvgaNotifyDisplayOwnershipChange@8
_BvgaNotifyDisplayOwnershipLost@4
_BvgaReleaseLock@0
_BvgaReleaseResources@0
_BvgaResetDisplay@0
_BvgaSaveResources@0
_BvgaSetDisplayOwnership@4
_BvgaSetProgressBarSubset@8
_BvgaSetScrollRegion@16
_BvgaSetTextColor@4
_BvgaSetVirtualFrameBuffer@8
_BvgaSolidColorFill@20
_BvgaUpdateProgressBar@4
_CMFAllocFn@8
_CMFCheckAccess@12
_CMFCreateSecurityDescriptor@8
_CMFFlushHitsFile@8
_CMFFreeFn@8
_CMFGetFileSizeEx@8
_CMFGetLargePageSectionSize@8
_CMFReadCompressedSegment@16
_CMFRegisterEventTime@4
_CMFSystemThreadRoutine@4
_CMFUnmapModules@4
_CalculateBatteryCount@12
_CanComposeHangul@8
_CcAcquireByteRangeForWrite@36
_CcAddDirtyPagesToExternalCache@8
_CcAddExternalCache@4
_CcAdjustCurrentThresholdWrtTop@16
_CcAdjustThrottle@16
_CcAdjustTopBottomThresholds@8
_CcAdjustVacbLevelLockCount@16
_CcAdjustWriteBehindThreadPool@8
_CcAdjustWriteBehindThreadPoolIfNeeded@8
_CcAggregateCumulativeGlobalTelemetry@0
_CcAggregateCumulativeVolumeTelemetry@4
_CcAllocateInitializeBcb@16
_CcAllocateInitializeMbcb@0
_CcAllocateInitializeVacbArray@0
_CcAllocateObcb@12
_CcAllocateVacbLevel@8
_CcAllocateVacbLevels@12
_CcAllocateWorkQueueEntry@8
_CcAmILowPriorityWriter@4
_CcApplyLowIoPriorityToThread@12
_CcAreOffsetsRoughlyEqual@8
_CcAsyncCopyRead@32
_CcAsyncReadPrefetch@4
_CcAsyncReadWorker@4
_CcAsyncReadWorkerThread@4
_CcBoostLowPriorityWorkerThread@8
_CcBuildUpHighPriorityMappings@8
_CcCachemapUninitWorkerThread@4
_CcCalculatePagesToWrite@20
_CcCalculateVacbLevelLockCount@12
_CcCanIWrite@16
_CcCanIWriteStreamEx@24
_CcCanReuseVacb@8
_CcCancelMmWaitForUninitializeCacheMap@4
_CcChangeBackingFileObject@8
_CcChargeDirtyPages@16
_CcChargeThreadForReadAhead@20
_CcCoalescingCallBack@12
_CcCoalescingCallBackHelper@8
_CcCoherencyFlushAndPurgeCache@20
_CcCompleteAsyncRead@4
_CcCompleteAsyncReadWorker@4
_CcComputeNextScanTime@12
_CcCopyBytesToUserBuffer@16
_CcCopyRead@24
_CcCopyReadEx@28
_CcCopyReadExceptionFilter@8
_CcCopyWrite@20
_CcCopyWriteEx@24
_CcCopyWriteWontFlush@12
_CcCrossPartitionDrainSectionDeletion@0
_CcDeallocateVacbLevel@8
_CcDecrementOpenCount@12
_CcDecrementVolumeUseCount@4
_CcDeductDirtyPages@8
_CcDeductDirtyPagesFromExternalCache@8
_CcDeferWrite@24
_CcDeleteBcbs@4
_CcDeleteMbcb@4
_CcDeletePartition@4
_CcDeleteSectionsForPartition@8
_CcDereferenceFileOffset@12
_CcDereferencePartition@4
_CcDereferenceVacbArray@8
_CcDetermineReadPattern@8
_CcErrorCallbackRoutine@4
_CcExceptionFilter@4
_CcExitPartition@8
_CcExtendVacbArray@12
_CcFastCopyRead@24
_CcFastCopyWrite@16
_CcFetchDataForRead@32
_CcFindBcb@16
_CcFindBitmapRangeToClean@12
_CcFindBitmapRangeToDirty@16
_CcFindNextWorkQueueEntry@8
_CcFlushCache@16
_CcFlushCachePriv@24
_CcFlushCacheToLsn@12
_CcForEachPartition@12
_CcForceWriteThrough@16
_CcFreeUnusedVacbLevels@4
_CcFreeVacbArray@4
_CcFreeWorkQueueEntry@4
_CcGetBcbListHead@16
_CcGetBcbListHeadLargeOffset@16
_CcGetCachedDirtyPageCountForFile@4
_CcGetDeviceGuid@8
_CcGetDirtyPages@16
_CcGetDirtyPagesHelper@8
_CcGetFileObjectFromBcb@4
_CcGetFileObjectFromSectionPtrs@4
_CcGetFileObjectFromSectionPtrsRef@4
_CcGetFirstVacbArrayWithReference@4
_CcGetFlushedValidData@8
_CcGetLsnForFileObject@8
_CcGetNumberOfMappedPages@12
_CcGetPartitionFromFileObject@4
_CcGetRandomVacbArrayWithReference@0
_CcGetVacbFromFreeList@8
_CcGetVacbLargeOffset@12
_CcGetVacbMiss@20
_CcGetVirtualAddress@28
_CcGetVirtualAddressIfMapped@20
_CcHasGlobalTelemetryChanged@0
_CcHasTimeInMsElapsed@8
_CcHasVolumeCumulativeTelemetryChanged@4
_CcIncrementVacbActiveCount@8
_CcIncrementWriteBehindPriority@4
_CcInitializeAsyncRead@4
_CcInitializeCacheManager@0
_CcInitializeCacheMap@20
_CcInitializeCacheMapEx@24
_CcInitializeEtwLogging@0
_CcInitializePartition@8
_CcInitializePartitionVacbs@4
_CcInitializeProcessor@4
_CcInitializeTelemetry@0
_CcInitializeVacbs@0
_CcInitializeVolumeCacheMap@8
_CcInsertIntoCleanSharedCacheMapList@4
_CcInsertIntoDirtySharedCacheMapList@4
_CcInsertVacbArray@8
_CcIsCacheManagerCallbackNeeded@4
_CcIsFatalWriteError@8
_CcIsFileObjectDirectMapped@8
_CcIsLazyWriteScanQueued@8
_CcIsThereDirtyData@4
_CcIsThereDirtyDataEx@8
_CcIsThereDirtyDataHelper@8
_CcIsThereDirtyLoggedPages@8
_CcLazyWriteScan@12
_CcLockSystemCacheBuffer@20
_CcLogExtraWBThreadAction@8
_CcMapAndCopyFromCache@36
_CcMapAndCopyInToCache@36
_CcMapAndRead@16
_CcMapData@24
_CcMapDataCommon@24
_CcMapDataForOverwrite@20
_CcMdlRead@20
_CcMdlReadComplete2@8
_CcMdlReadComplete@8
_CcMdlWriteAbort@8
_CcMdlWriteComplete2@12
_CcMdlWriteComplete@12
_CcMmLogLostDelayedWriteError@8
_CcNotifyExternalCaches@4
_CcNotifyOfMappedWrite@16
_CcNotifyOfMappedWriteComplete@20
_CcNotifyWriteBehind@4
_CcNotifyWriteBehindHelper@8
_CcNotifyWriteBehindInternal@8
_CcOkToAddWriteBehindThread@4
_CcPartitionTelemetryCallback@8
_CcPerfLogCanWriteFail@16
_CcPerfLogExtraWBThreadAction@20
_CcPerfLogFlushCache@28
_CcPerfLogFlushSection@20
_CcPerfLogLazyWriteScan@56
_CcPerfLogLoggedStreamsStats@8
_CcPerfLogReadAhead@20
_CcPerfLogReadAheadPrefetch@16
_CcPerfLogScheduleReadAhead@28
_CcPerfLogVolumeLogHandleInfo@28
_CcPerfLogWorkItemEnqueue@16
_CcPinFileData@36
_CcPinMappedData@20
_CcPinRead@24
_CcPostDeferredWrites@4
_CcPostVolumeTelemetry@0
_CcPrepareMdlWrite@20
_CcPreparePinWrite@28
_CcPurgeAndClearCacheSection@8
_CcPurgeCacheSection@16
_CcQueryRegKeyValue@20
_CcQueueLazyWriteScanThread@4
_CcReEngageWorkerThreads@12
_CcRecalculateVacbArrayHighwaterMark@4
_CcReferenceFileOffset@12
_CcReferencePartition@4
_CcReferenceSharedCacheMapByVacb@4
_CcReferenceVacbArray@4
_CcRegisterExternalCache@8
_CcRegistryChangeCallback@4
_CcReleaseBcbLockAndVacbLock@8
_CcReleaseByteRangeFromWrite@20
_CcRemapBcb@4
_CcRemoveExternalCache@4
_CcRemoveVacbArray@4
_CcRepinBcb@4
_CcRescheduleLazyWriteScan@8
_CcResetGlobalTelemetry@0
_CcScanDpc@16
_CcScanLogHandleList@16
_CcScheduleLazyWriteScan@12
_CcScheduleReadAhead@12
_CcScheduleReadAheadEx@16
_CcSetAdditionalCacheAttributes@12
_CcSetAdditionalCacheAttributesEx@8
_CcSetBcbOwnerPointer@8
_CcSetDirtyInMask@16
_CcSetDirtyPageThreshold@8
_CcSetDirtyPinnedData@8
_CcSetFileSizes@8
_CcSetFileSizesEx@8
_CcSetLazyWriteScanQueued@12
_CcSetLogHandleForFile@12
_CcSetLogHandleForFileEx@20
_CcSetLoggedDataThreshold@8
_CcSetParallelFlushFile@8
_CcSetReadAheadGranularity@8
_CcSetReadAheadGranularityEx@8
_CcSetTelemetryPeriodicTimer@8
_CcSetVacbInFreeList@12
_CcSetVacbLargeOffset@20
_CcSetValidData@8
_CcSetupWatchForRegistryChanges@8
_CcShouldIssueVDLUpdate@4
_CcShouldLazyWriteCacheMap@16
_CcShouldSpinAsyncReadWorkerThread@12
_CcShouldWorkOnThisQueue@12
_CcSlowReferenceSharedCacheMapFileObject@4
_CcTelemetryBucketizeLatency@16
_CcTelemetryPeriodicTimerCallback@4
_CcTelemetryPeriodicTimerDpc@16
_CcTestControl@12
_CcUninitializeAsyncRead@4
_CcUninitializeCacheMap@12
_CcUninitializePartitionVacbs@4
_CcUninitializeVolumeCacheMap@4
_CcUnmapAndPurge@8
_CcUnmapFileOffsetFromSystemCache@16
_CcUnmapInactiveViews@16
_CcUnmapInactiveViewsInternal@16
_CcUnmapVacb@12
_CcUnpinData@4
_CcUnpinDataForThread@8
_CcUnpinRepinnedBcb@12
_CcUnregisterExternalCache@4
_CcUpdateDynamicRegistrySettings@4
_CcUpdateReadHistory@12
_CcUpdateSharedCacheMapFlag@12
_CcUpdateTimeOnLogHandles@4
_CcWaitForCurrentLazyWriterActivity@0
_CcWaitForCurrentLazyWriterActivityHelper@8
_CcWaitForCurrentLazyWriterActivityInternal@4
_CcWaitForUninitializeCacheMap@4
_CcWorkerThread@4
_CcWrapperMmCopyToCachedPage@24
_CcWriteBehindInternal@4
_CcZeroData@16
_CcZeroDataInCache@16
_CcZeroDataOnDisk@16
_CcZeroEndOfLastPage@4
_CfgAddressToBitState@12
_CheckOneBitValidFlag@8
_ClipInitHandles@0
_CmAddLogForAction@8
_CmAllocateExtraParameter@12
_CmBootLastKnownGood@16
_CmCallbackGetKeyObjectID@16
_CmCallbackGetKeyObjectIDEx@20
_CmCallbackReleaseKeyObjectIDEx@4
_CmCheckNoTxContext@0
_CmCheckRegistry@12
_CmCloseRmHandle@8
_CmCloseTmHandle@8
_CmCompleteRegistryInitialization@4
_CmCompressKey@8
_CmConvertHandleToKernelHandle@20
_CmCreateKey@32
_CmDeleteKey@4
_CmDeleteKeyRecursive@20
_CmDeleteLayeredKey@12
_CmDeleteValueKey@20
_CmDumpKeyToFile@12
_CmEnumerateKey@28
_CmEnumerateValueFromLayeredKey@24
_CmEnumerateValueKey@24
_CmEnumerateValueKeyFromMergedView@36
_CmEqualTrans@8
_CmEtwRunDown@20
_CmFcInitSystem0@4
_CmFcInitSystem2@0
_CmFcManagerDrainAllFeatureUsageNotifications@4
_CmFcManagerInitialize@4
_CmFcManagerNotifyFeatureUsage@8
_CmFcManagerQueryFeatureConfigurationSectionInformation@16
_CmFcManagerRegisterFeatureConfigurationChangeNotification@20
_CmFcManagerStartBootPhase@28
_CmFcManagerStartRuntimePhase@4
_CmFcManagerUnregisterFeatureConfigurationChangeNotification@8
_CmFcManagerUpdateFeatureConfigurations@28
_CmFcManagerUpdateFeatureUsageSubscriptions@16
_CmFcpChangeSubscriptionWrapper@8
_CmFcpCleanupSectionState@4
_CmFcpCopySectionState@8
_CmFcpIncrementChangeStamp@8
_CmFcpInitializeSectionState@4
_CmFcpManagerAllocateChangeSubscription@12
_CmFcpManagerArmFeatureUsageRetryTimer@4
_CmFcpManagerCreateSection@20
_CmFcpManagerCreateSectionFromBuffer@24
_CmFcpManagerDrainUsageNotifications@8
_CmFcpManagerDrainUsageNotificationsDpc@16
_CmFcpManagerDrainUsageNotificationsWorker@8
_CmFcpManagerPublishChangeNotifications@12
_CmFcpManagerRetryUsageNotificationsTimerRoutine@8
_CmFcpManagerRetryUsageNotificationsWorker@8
_CmFcpManagerSoftwareHiveReady@4
_CmFcpMapSection@8
_CmFcpSwapSectionState@8
_CmFcpUnmapSection@4
_CmFcpWorkItemInitialize@16
_CmFcpWorkItemQueueWork@4
_CmFcpWorkItemWrapper@4
_CmFreezeRegistry@4
_CmGetBoundTransaction@8
_CmGetCallbackVersion@8
_CmGetKCBCacheSecurity@8
_CmGetKeyFlags@8
_CmGetKeyLastWriteTime@12
_CmGetRootKeyObjectForSilo@4
_CmGetSystemDriverList@4
_CmGetVisibleMaxNameLenAndClassLen@20
_CmGetVisibleMaxValueNameLenAndDataLen@20
_CmGetVisibleSubkeyCount@12
_CmGetVisibleValueCount@12
_CmInitBootFeatureConfigurations@4
_CmInitServerSiloState@4
_CmInitSiloNamespace@4
_CmInitSystem0@4
_CmInitSystem1@4
_CmInitSystem2@0
_CmInitializeProcessor@4
_CmIsLastKnownGoodBoot@0
_CmIsStateSeparationDevModeEnabled@0
_CmIsStateSeparationEnabled@0
_CmKeyBodyNeedsVirtualImage@4
_CmKeyBodyRemapToVirtual@20
_CmKeyBodyRemapToVirtualForEnum@16
_CmKeyBodyReplicateToVirtual@20
_CmKtmNotification@28
_CmListGetNextElement@12
_CmListGetPrevElement@12
_CmLoadAppKey@36
_CmLoadDifferencingKey@48
_CmLoadKey@44
_CmLockHive@4
_CmLockHiveSecurityExclusive@4
_CmLockHiveSecurityShared@4
_CmLockKeyForWrite@4
_CmLogTmRmAction@12
_CmNotifyRunDown@4
_CmObReferenceObjectByHandle@24
_CmOpenKey@20
_CmPostCallbackNotification@20
_CmPostCallbackNotificationEx@24
_CmQueryFeatureConfigurationSections@24
_CmQueryKey@24
_CmQueryLayeredKey@20
_CmQueryMultipleValueForLayeredKey@24
_CmQueryMultipleValueKey@28
_CmQueryRegistryQuotaInformation@4
_CmQuerySingleFeatureConfiguration@24
_CmQueryValueKey@28
_CmRealKCBToVirtualPath@16
_CmReconcileAndValidateAllHives@0
_CmReferenceKtmTransaction@4
_CmRegisterCallback@12
_CmRegisterCallbackEx@24
_CmRegisterInternalCallback@24
_CmRegisterMachineHiveLoadedNotification@16
_CmRegisterSystemHiveLimitCallback@16
_CmReleaseLoadKeyContext@8
_CmRenameKey@16
_CmReplaceKey@16
_CmRestoreKey@16
_CmRetrieveExtraParameter@12
_CmRmFinalizeRecovery@4
_CmRmIsKCBVisible@8
_CmSaveKey@16
_CmSaveKeyToBuffer@16
_CmSaveMergedKeys@16
_CmSelectQualifiedInstallLanguage@16
_CmSetAcpiHwProfile@20
_CmSetCallbackObjectContext@16
_CmSetKeyFlags@12
_CmSetLastWriteTimeKey@8
_CmSetLazyFlushState@4
_CmSetRegistryQuotaInformation@4
_CmSetValueKey@28
_CmShutdownCmRM@8
_CmShutdownSystem@4
_CmSiAllocateMemory@8
_CmSiBugCheck@16
_CmSiCloseSection@4
_CmSiCreateSectionForFile@20
_CmSiExtendSection@12
_CmSiFreeMemory@4
_CmSiGetMemoryAllocationGranularity@0
_CmSiGetSectionLength@8
_CmSiLockViewOfSection@16
_CmSiMapViewOfSection@32
_CmSiPrefetchVirtualMemoryRange@12
_CmSiProcessTupleInitialize@4
_CmSiProcessTupleStartFromHandle@12
_CmSiProtectViewOfSection@24
_CmSiRWLockAcquireExclusive@4
_CmSiRWLockInitialize@4
_CmSiRWLockReleaseExclusive@4
_CmSiUnlockViewOfSection@16
_CmSiUnmapViewOfSection@12
_CmSnapshotRMTxArray@8
_CmThawRegistry@0
_CmTmCreateEnlistment@16
_CmUnRegisterCallback@8
_CmUnloadKey@16
_CmUnlockHive@4
_CmUnlockHiveSecurity@4
_CmUnregisterMachineHiveLoadedNotification@4
_CmUpdateFeatureConfiguration@12
_CmUpdateFeatureUsageSubscription@12
_CmVirtualKCBToRealPath@8
_CmWorkerEngineDequeueWorkItem@4
_CmWorkerEngineQueueWorkItem@4
_CmpAbortLightWeightTransaction@4
_CmpAbortRollbackPacket@8
_CmpAcceptBoot@4
_CmpAccountForLogReservation@12
_CmpAcquireShutdownRundown@4
_CmpAcquireSystemDriverHiveContext@4
_CmpAcquireWriteQueue@4
_CmpAddAcpiAliasEntry@32
_CmpAddAliasEntry@12
_CmpAddDockingInfo@8
_CmpAddDriverToList@28
_CmpAddEnlistmentToRollbackPacket@8
_CmpAddExtraParameterToBlock@8
_CmpAddKeyHashToEntry@12
_CmpAddPointerToRollbackPacket@8
_CmpAddProcessorConfigurationEntry@12
_CmpAddRemoveContainerToCLFSLog@32
_CmpAddRemoveRMLogContainer@8
_CmpAddSecurityCellToCache@16
_CmpAddStringToMapping@8
_CmpAddSubKey@12
_CmpAddSubKeyEx@16
_CmpAddSubKeyToList@12
_CmpAddToDelayedClose@4
_CmpAddToHiveFileList@4
_CmpAddToLeaf@16
_CmpAddUoWToRollbackPacket@8
_CmpAddValueKeyNew@24
_CmpAddValueKeyTombstone@12
_CmpAddValueToList@20
_CmpAddValueToListEx@24
_CmpAdjustRequestedFileSize@24
_CmpAdjustSecurityCacheSize@4
_CmpAdminSystemSecurityDescriptor@0
_CmpAllocate@12
_CmpAllocateKeyControlBlock@0
_CmpAllocateLayerInfoForKcb@4
_CmpAllocatePoolWithQuotaTag@12
_CmpAllocatePoolWithTag@12
_CmpAllocatePoolWithTagLookaside@16
_CmpAllocatePostBlock@16
_CmpAllocateSiloContext@8
_CmpAllocateTransientPoolWithQuotaTag@12
_CmpAllocateTransientPoolWithTag@12
_CmpAllocateUnitOfWork@0
_CmpAppendLine@12
_CmpAppendSection@12
_CmpAppendValue@12
_CmpArmDelayedCloseTimer@0
_CmpArmLazyWriter@12
_CmpAssignKeySecurity@8
_CmpAssignSecurityDescriptor@20
_CmpAssignSecurityToKcb@20
_CmpAttachToRegistryProcess@4
_CmpBecomeActiveFlusherAndReconciler@4
_CmpBindHiveToTrans@8
_CmpBlockHiveWrites@12
_CmpBlockTwoHiveWrites@12
_CmpBounceContextCleanup@4
_CmpBounceContextCopyDataToCallerBuffer@8
_CmpBounceContextStart@20
_CmpBuildAdminInformation@8
_CmpBuildMachineHiveMountPoint@8
_CmpBuildRegMultiSz@20
_CmpBuildVirtualReplicationStack@16
_CmpCallCallBacks@24
_CmpCallCallBacksEx@28
_CmpCallbackFatalFilter@8
_CmpCanGrowHive@8
_CmpCancelSubordinatePost@8
_CmpCaptureKeyValueArray@20
_CmpCheckAdminAccess@16
_CmpCheckAndFixSecurityCellsRefcount@4
_CmpCheckCreateAccess@24
_CmpCheckCreateAccessOnKcbStack@36
_CmpCheckExeOwnerForPca@0
_CmpCheckHivePrimaryFileReadWriteAccess@4
_CmpCheckKey@28
_CmpCheckKeyAccess@20
_CmpCheckKeyBodyAccess@20
_CmpCheckKeyNodeStackAccess@16
_CmpCheckKeyOwnerForPca@4
_CmpCheckKeySecurityDescriptorAccess@16
_CmpCheckLeaf@20
_CmpCheckLexicographicalOrder@12
_CmpCheckNotifyAccess@12
_CmpCheckOpenAccessOnKeyBody@36
_CmpCheckRegistry2@32
_CmpCheckSecurityCellAccess@20
_CmpCheckValueList@40
_CmpClaimGlobalQuota@4
_CmpCleanUpHigherLayerKcbCachesPostCallback@12
_CmpCleanUpHigherLayerKcbCachesPreCallback@8
_CmpCleanUpKCBCacheTable@4
_CmpCleanUpKcbCacheWithLock@8
_CmpCleanUpKcbCachedSymlink@8
_CmpCleanUpSubKeyInfo@8
_CmpCleanupDiscardReplaceContext@8
_CmpCleanupDiscardReplacePost@12
_CmpCleanupDiscardReplacePre@8
_CmpCleanupKcbStack@4
_CmpCleanupKeyNodeStack@4
_CmpCleanupLightWeightPrepare@12
_CmpCleanupLightWeightTransaction@8
_CmpCleanupParseContext@8
_CmpCleanupPathInfo@4
_CmpCleanupRollbackPacket@4
_CmpCleanupTransactionState@16
_CmpClearKeyAccessBits@8
_CmpCloneHwProfile@28
_CmpCloneKCBValueListForTrans@12
_CmpCloneToUnbackedKcb@8
_CmpCloseKeyObject@16
_CmpCloseLightWeightTransaction@16
_CmpCloseSystemDriverHiveContext@4
_CmpCmdHiveClose@4
_CmpCmdHiveOpen@36
_CmpCmdInit@4
_CmpCmdRenameHive@20
_CmpCoalescingCallback@12
_CmpCommitAddKeyUoW@8
_CmpCommitDeleteKeyUoW@12
_CmpCommitDeleteValueKeyUoW@12
_CmpCommitDiscardAndReplaceKcbAndUnbackedHigherLayers@12
_CmpCommitDiscardReplacePost@12
_CmpCommitDiscardReplacePre@8
_CmpCommitLightWeightTransaction@4
_CmpCommitPreparedLightWeightTransaction@8
_CmpCommitRenameKeyUoW@12
_CmpCommitSetSecurityUoW@8
_CmpCommitSetValueKeyUoW@12
_CmpCompareCompressedName@16
_CmpCompareInIndex@20
_CmpCompareKeysByName@8
_CmpCompareNewValueDataAgainstKCBCache@20
_CmpCompareTwoCompressedNames@16
_CmpCompareUnicodeString@12
_CmpCompleteFlushAndPurgeIrp@12
_CmpCompleteLazyWrite@8
_CmpCompleteUnloadKey@12
_CmpComputeComponentHashes@12
_CmpComputeLogFillLevel@24
_CmpConcatenateValueLists@20
_CmpConstructAndCacheName@12
_CmpConstructName@4
_CmpConstructNameFromKcbNameBlocks@8
_CmpConstructNameFromKeyNodes@8
_CmpConstructNameWithStatus@8
_CmpConvertLangId@8
_CmpCopyCell@16
_CmpCopyCompressedName@16
_CmpCopyKeyPartial@28
_CmpCopyMergeOfLayeredKeyNode@24
_CmpCopyName@8
_CmpCopySaclToVirtualKey@20
_CmpCopySyncTree2@28
_CmpCopySyncTree@24
_CmpCopyValue@16
_CmpCreateChild@32
_CmpCreateControlSet@8
_CmpCreateControlSetOverride@4
_CmpCreateEmptyHiveClone@8
_CmpCreateEmptyKey@16
_CmpCreateEvent@12
_CmpCreateExtendedControlSets@4
_CmpCreateGlobalKeyLockEntry@4
_CmpCreateHardwareProfiles@4
_CmpCreateHive@48
_CmpCreateHiveRootCell@20
_CmpCreateHwProfileFriendlyName@16
_CmpCreateKeyBody@32
_CmpCreateKeyControlBlock@36
_CmpCreateLayerLink@8
_CmpCreateObjectTypes@0
_CmpCreatePerfKeys@0
_CmpCreatePredefined@12
_CmpCreateRegistryProcessToken@4
_CmpCreateRegistryRoot@0
_CmpCreateRegistryThread@16
_CmpCreateRootNode@12
_CmpCreateSiloKeyLockEntry@4
_CmpCreateTemporaryHive@8
_CmpCreateTombstone@8
_CmpDecrementAppHiveUnloadCount@0
_CmpDelayCloseWorker@4
_CmpDelayDerefKeyControlBlock@8
_CmpDelayFreeCmRm@4
_CmpDelayFreeRMDpcRoutine@16
_CmpDelayFreeRMWorker@4
_CmpDelayedDerefKeys@4
_CmpDeleteHive@4
_CmpDeleteKcbCache@4
_CmpDeleteKeyObject@4
_CmpDeleteLightWeightTransaction@4
_CmpDeleteTree@8
_CmpDereferenceHive@4
_CmpDereferenceKeyControlBlock@4
_CmpDereferenceKeyControlBlockUnsafe@4
_CmpDereferenceKeyControlBlockWithLock@12
_CmpDereferenceNameControlBlockWithLock@4
_CmpDestroyHive@4
_CmpDestroySecurityCache@4
_CmpDestroyVirtualStack@12
_CmpDetachFromRegistryProcess@4
_CmpDisableLazyFlush@4
_CmpDiscardKcb@8
_CmpDiskFullWarning@0
_CmpDiskFullWarningWorker@4
_CmpDoAccessCheckOnKCB@16
_CmpDoAccessCheckOnLayeredSubtree@24
_CmpDoAccessCheckOnSubtree@20
_CmpDoBuildVirtualStack@12
_CmpDoCompareKeyName@12
_CmpDoFileFlush@4
_CmpDoFileRead@28
_CmpDoFileSetSizeEx@20
_CmpDoFileWrite@24
_CmpDoFindSubKeyByNumber@12
_CmpDoFlushAll@4
_CmpDoFlushNextHive@8
_CmpDoLocalizeNextHive@8
_CmpDoParseKey@36
_CmpDoQueryKeyName@24
_CmpDoQueueLateUnloadWorker@4
_CmpDoQueueSystemHiveHysteresis@4
_CmpDoReDoCreateKey@8
_CmpDoReDoDeleteKey@8
_CmpDoReDoDeleteValue@8
_CmpDoReDoRecord@8
_CmpDoReDoRenameKey@8
_CmpDoReDoSetKeyUserFlags@8
_CmpDoReDoSetLastWriteTime@8
_CmpDoReDoSetSecurityDescriptor@8
_CmpDoReDoSetValueExisting@8
_CmpDoReDoSetValueNew@8
_CmpDoReOpenTransKey@16
_CmpDoReadTxRBigLogRecord@12
_CmpDoReconcileNextHive@8
_CmpDoSort@8
_CmpDoWritethroughReparse@28
_CmpDoesBufferRequireCapturing@8
_CmpDoesKeyHaveOpenSubkeys@4
_CmpDoesKeyHaveOpenSubkeysWorker@8
_CmpDoesParseEnterRegistryA@8
_CmpDoesProcessBelongToServiceSession@4
_CmpDrainDelayDerefContext@8
_CmpDummyApc@12
_CmpDummyThreadRoutine@4
_CmpDumpKeyBodyList@12
_CmpDumpKeyToBuffer@16
_CmpDumpOneKeyBody@16
_CmpDuplicateIndex@12
_CmpEffectiveTokenForSubject@8
_CmpEnableLazyFlush@4
_CmpEnableLazyFlushDpcRoutine@16
_CmpEnumerateAllHigherLayerKcbs@28
_CmpEnumerateAllOpenSubKeys@16
_CmpEnumerateKcbCacheBucket@16
_CmpEnumerateLayeredKey@32
_CmpEtwDumpKcb@8
_CmpEtwReleaseHivePath@4
_CmpExamineSaclForAuditEvent@12
_CmpExpandPathInfo@4
_CmpFatalFilter@8
_CmpFileFlushAndPurge@8
_CmpFileRead@20
_CmpFileWrite@20
_CmpFilterAcpiDockingState@24
_CmpFindCellInIndex@8
_CmpFindControlSet@16
_CmpFindDrivers@44
_CmpFindExtraParameterInBlock@12
_CmpFindGroupOrderList@8
_CmpFindHiveSubKey@20
_CmpFindKcbInHashEntryByCellIndex@12
_CmpFindKcbInHashEntryByCompressedName@20
_CmpFindKcbInHashEntryByName@16
_CmpFindMachineHiveByMountPoint@8
_CmpFindMatchingDescriptorCell@20
_CmpFindNameInList@24
_CmpFindNameInListCellWithStatus@28
_CmpFindNameInListWithStatus@24
_CmpFindPathByName@20
_CmpFindRedirectedDriverServiceStateNode@28
_CmpFindSecurityCellCacheIndex@12
_CmpFindSubKeyByHashWithStatus@16
_CmpFindSubKeyByName@12
_CmpFindSubKeyByNameWithStatus@16
_CmpFindSubKeyByNumber@16
_CmpFindSubKeyByNumberEx@36
_CmpFindSubKeyByNumberFromMergedView@36
_CmpFindSubKeyInLeafWithStatus@20
_CmpFindSubKeyInRoot@16
_CmpFindSubkeyInHashByChildCell@20
_CmpFindTagIndex@16
_CmpFindValueByName@12
_CmpFinishBeingActiveFlusherAndReconciler@4
_CmpFinishSystemHivesLoad@4
_CmpFireCleanupNotifications@4
_CmpFlushBackupHive@4
_CmpFlushHive@8
_CmpFlushNotifiesOnAllUnbackedHigherLayerKcbs@16
_CmpFlushNotifiesOnKeyBodyList@16
_CmpFlushNotifiesPostCallback@12
_CmpFlushNotifiesPreCallback@8
_CmpFlushNotify@12
_CmpFlushUnsupportedOperationTelemetry@0
_CmpForceFlushForCoalescing@0
_CmpForceFlushWorker@4
_CmpFree@8
_CmpFreeAllMemory@0
_CmpFreeBootRegistry@0
_CmpFreeCallbackContext@4
_CmpFreeCallbackObjectContexts@4
_CmpFreeDriverList@8
_CmpFreeExtraParameter@4
_CmpFreeIndexByCell@8
_CmpFreeKeyBody@8
_CmpFreeKeyByCell@12
_CmpFreeKeyControlBlock@4
_CmpFreeKeyValueList@8
_CmpFreeKeyValues@12
_CmpFreeLineList@4
_CmpFreeOffsetArray@8
_CmpFreePool@4
_CmpFreePoolLookaside@8
_CmpFreePoolWithTag@8
_CmpFreePostBlock@4
_CmpFreeSectionList@4
_CmpFreeSecurityDescriptor@8
_CmpFreeSiloContextCallback@4
_CmpFreeSiloKeyLockEntry@4
_CmpFreeSubordinatePost@4
_CmpFreeTransientPool@4
_CmpFreeTransientPoolWithTag@8
_CmpFreeValue@8
_CmpFreeValueData@12
_CmpFreeValueList@4
_CmpFreezeHive@8
_CmpFreezeThawDpcRoutine@16
_CmpFreezeThawWorker@4
_CmpFullPromoteHiveRootFromKcbStack@4
_CmpFullPromoteSingleKeyFromKeyNodeStacks@8
_CmpGenerateAppHiveSecurityDescriptor@4
_CmpGenerateFastLeafHintForCompressedString@8
_CmpGenerateFastLeafHintForUnicodeString@4
_CmpGenerateFlushControlData@12
_CmpGetAcpiBiosInformation@8
_CmpGetAcpiBiosVersion@12
_CmpGetAcpiProfileInformation@24
_CmpGetBiosDate@16
_CmpGetBiosVersion@12
_CmpGetBootValueData@16
_CmpGetCallbackObjectContext@8
_CmpGetCmHiveFromVirtualPath@8
_CmpGetComponentHashAtIndex@8
_CmpGetComponentNameAtIndex@8
_CmpGetCorrectKcbLockOrder@16
_CmpGetDeletedHashIndexInHive@8
_CmpGetEffectiveKcbSemantics@4
_CmpGetEffectiveKeyNodeSemantics@8
_CmpGetFileSize@8
_CmpGetHashIndex@4
_CmpGetHashIndexInHive@8
_CmpGetIndexElementSize@4
_CmpGetKcbAtLayerHeight@8
_CmpGetKeyName@12
_CmpGetKeyNodeForKcb@12
_CmpGetKnownHivePathNode@32
_CmpGetLastHive@0
_CmpGetLastSetFileSize@8
_CmpGetMappingHiveForString@8
_CmpGetNameControlBlock@12
_CmpGetNextActiveHive@4
_CmpGetNextHive@4
_CmpGetNextName@12
_CmpGetNodeName@12
_CmpGetOrCreateContextForSiloNoRef@8
_CmpGetPhaseAccessBit@0
_CmpGetRegistryNamespaceRootForSilo@4
_CmpGetRegistryValue@12
_CmpGetSectionLineIndex@16
_CmpGetSectionLineIndexValueCount@12
_CmpGetSecurityCacheEntryForKcbStack@8
_CmpGetSecurityCellForKeyNodeStack@12
_CmpGetSecurityDescriptorForKcbStack@8
_CmpGetSecurityDescriptorNode@24
_CmpGetSubKeyCountForKcbStack@8
_CmpGetSubKeyCountForKeyNodeStack@8
_CmpGetSymbolicLinkTarget@36
_CmpGetSystemControlValues@12
_CmpGetSystemRelativeRegistryHiveFilePath@4
_CmpGetToken@12
_CmpGetValueCountForKeyNodeStack@8
_CmpGetValueData@28
_CmpGetValueForAudit@16
_CmpGetVirtualStoreRoot@12
_CmpGetVirtualizationID@8
_CmpGetVirtualizationIDFromFullVirtualPath@8
_CmpGetVolumeClusterSize@8
_CmpGetVolumeClusterSizeCompletion@12
_CmpGetVolumeLogFileSizeCap@4
_CmpGlobalLockKeyForWrite@8
_CmpGlobalUnlockKeyForWrite@8
_CmpHKeyNameLen@4
_CmpHandlePageFileOpenNotification@0
_CmpHashCompressedComponent@8
_CmpHashUnicodeComponent@4
_CmpHiveInitialize@4
_CmpHiveRootSecurityDescriptor@4
_CmpHwprofileDefaultSelect@12
_CmpIncrementKcbSequenceNumber@4
_CmpInitBackupHive@8
_CmpInitCallbacks@0
_CmpInitCmRM@8
_CmpInitGlobalQuotaAllowed@0
_CmpInitHiveFromFile@40
_CmpInitSIDToHiveMapping@0
_CmpInitSecurityCache@4
_CmpInitSiloSupport@4
_CmpInitializeActualFileSizes@8
_CmpInitializeDelayDerefContext@4
_CmpInitializeDelayedCloseTable@0
_CmpInitializeDiscardReplaceContext@4
_CmpInitializeDriverStores@4
_CmpInitializeFreezeThaw@0
_CmpInitializeGlobalKeyLockTracker@0
_CmpInitializeHardwareConfiguration@4
_CmpInitializeKcbCache@8
_CmpInitializeKcbStack@4
_CmpInitializeKeyNameString@12
_CmpInitializeKeyNodeStack@4
_CmpInitializeLazyWriters@0
_CmpInitializeLightWeightTransactionType@0
_CmpInitializeLoadOptions@4
_CmpInitializeMachineDependentConfiguration@4
_CmpInitializeMachineHiveLoadedCallbacks@0
_CmpInitializeNameCache@0
_CmpInitializeParseContext@4
_CmpInitializePreloadedHive@16
_CmpInitializePreloadedHives@8
_CmpInitializeRegistryNames@0
_CmpInitializeRegistryNode@28
_CmpInitializeRegistryProcess@0
_CmpInitializeRollbackPacket@4
_CmpInitializeSystemBiosInformation@4
_CmpInitializeSystemHive@12
_CmpInitializeSystemHivesLoad@0
_CmpInitializeTransactions@0
_CmpInitializeTrustedInstallerSid@0
_CmpInitializeValueNameString@12
_CmpInsertCallbackInListByAltitude@8
_CmpInsertKeyHash@12
_CmpInsertSecurityCellList@16
_CmpInterlockedFunction@8
_CmpInvalidateAllHigherLayerKcbs@16
_CmpInvalidateAllHigherLayerKcbsPostCallback@12
_CmpInvalidateAllHigherLayerKcbsPreCallback@8
_CmpInvalidateSubtree@16
_CmpInvalidateSubtreeWorker@8
_CmpIsBufferGloballyVisible@4
_CmpIsCmRm@4
_CmpIsHiveAlreadyLoaded@20
_CmpIsHiveBoundToTrans@8
_CmpIsHiveEligibleForLazyReconcile@4
_CmpIsKcbImmutable@4
_CmpIsKcbInsideVirtualizedHive@4
_CmpIsKcbLockAllowed@12
_CmpIsKeyBodyEligibleForDump@8
_CmpIsKeyDeleted@8
_CmpIsKeyDeletedForKeyBody@8
_CmpIsKeyStackDeleted@8
_CmpIsKeyStackSymlink@4
_CmpIsLoadType@40
_CmpIsRegistryLockContended@0
_CmpIsSystemEntity@12
_CmpIsThisSameFile@8
_CmpIsValueTombstone@8
_CmpIsVirtEnabledForSubject@4
_CmpIsWriteQueueActive@4
_CmpIssueNewDirtyCallback@0
_CmpJoinClassOfTrust@12
_CmpKeyEnumStackAdvance@4
_CmpKeyEnumStackAdvanceInternal@4
_CmpKeyEnumStackBeginEnumerationForKeyNodeStack@12
_CmpKeyEnumStackCleanup@4
_CmpKeyEnumStackCreateResumeContext@20
_CmpKeyEnumStackEntryAdvance@4
_CmpKeyEnumStackEntryBegin@12
_CmpKeyEnumStackEntryCleanup@4
_CmpKeyEnumStackEntryInitialize@4
_CmpKeyEnumStackEntryNotifyPromotion@4
_CmpKeyEnumStackFreeResumeContext@12
_CmpKeyEnumStackGetEntryAtLayerHeight@8
_CmpKeyEnumStackInitialize@4
_CmpKeyEnumStackNotifyPromotion@4
_CmpKeyEnumStackReset@4
_CmpKeyEnumStackStart@8
_CmpKeyEnumStackStartFromKcbStack@12
_CmpKeyEnumStackStartFromKeyNodeStack@12
_CmpKeyEnumStackVerifyResumeContext@8
_CmpKeyFullNameLength@4
_CmpKeyNodeNeedsAccessBitUpdate@8
_CmpKeyNodeStackEntryPopulate@12
_CmpKeyNodeStackEntryReset@4
_CmpKeyNodeStackGetEntryAtLayerHeight@8
_CmpLateUnloadHiveWorker@4
_CmpLazyCommitDpcRoutine@16
_CmpLazyCommitWorker@4
_CmpLazyFlushDpcRoutine@16
_CmpLazyWriteWorker@4
_CmpLightWeightCleanupModifyKeyDataUoW@8
_CmpLightWeightCleanupSetValueKeyUoW@8
_CmpLightWeightCommitAddKeyUoW@8
_CmpLightWeightCommitDeleteKeyUoW@12
_CmpLightWeightCommitDeleteValueKeyUoW@12
_CmpLightWeightCommitRenameKeyUoW@12
_CmpLightWeightCommitSetSecDescUoW@8
_CmpLightWeightCommitSetUserFlagsUoW@8
_CmpLightWeightCommitSetValueKeyUoW@12
_CmpLightWeightCreateModificationData@8
_CmpLightWeightCreateSetValueData@8
_CmpLightWeightDuplicateParentLists@12
_CmpLightWeightPrepareAddKeyUoW@4
_CmpLightWeightPrepareDeleteKeyUoW@8
_CmpLightWeightPrepareDeleteValueKeyUoW@4
_CmpLightWeightPrepareRenameKeyUoW@4
_CmpLightWeightPrepareSetKeyUserFlags@4
_CmpLightWeightPrepareSetSecDescUoW@4
_CmpLightWeightPrepareSetValueKeyUoW@4
_CmpLightWeightSwapParentSubKeyList@12
_CmpLightWeightUpdateModificationActions@12
_CmpLightWeightUpdateSharedSetValueData@8
_CmpLinkHiveToMaster@48
_CmpLinkKeyToHive@8
_CmpLoadHiveThread@4
_CmpLoadHiveVolatile@8
_CmpLoadKeyCommon@44
_CmpLoadManufacturingModeNode@16
_CmpLoadManufacturingProfileNode@20
_CmpLoadManufacturingProfileServicesNode@20
_CmpLoadServicesNode@16
_CmpLockAppHiveLoadList@0
_CmpLockDeletedHashEntryExclusiveByKcb@4
_CmpLockHashEntryExclusive@8
_CmpLockHashEntryExclusiveByKcb@4
_CmpLockHashEntryShared@8
_CmpLockHashEntrySharedByKcb@4
_CmpLockHiveListExclusive@0
_CmpLockIXLockExclusive@12
_CmpLockIXLockIntent@12
_CmpLockKcbExclusive@4
_CmpLockKcbShared@4
_CmpLockKcbStackExclusive@4
_CmpLockKcbStackFlusherLocksExclusive@4
_CmpLockKcbStackShared@4
_CmpLockKcbStackTopExclusiveRestShared@4
_CmpLockRegistry@0
_CmpLockRegistryExclusive@0
_CmpLockRegistryFreezeAware@4
_CmpLockTwoKcbsShared@8
_CmpLockTwoSecurityCachesExclusiveShared@8
_CmpLogCheckpoint@12
_CmpLogClearAccessBitsEvent@12
_CmpLogDirtyVectorUse@16
_CmpLogEvent@12
_CmpLogFailureToGetFileSize@12
_CmpLogFlushPhaseEnd@12
_CmpLogFlushPhaseStart@8
_CmpLogHiveDestroyEvent@4
_CmpLogHiveFileInaccessible@16
_CmpLogHiveInitializeEvent@16
_CmpLogHiveLinkEvent@8
_CmpLogHiveRundownEvent@12
_CmpLogReorganizeEvent@12
_CmpLogTransactionAbortedByName@16
_CmpLogTransactionAbortedForRollbackPacket@12
_CmpLogTransactionAbortedWithChildName@20
_CmpLogTxrInitEvent@12
_CmpLogUnload@8
_CmpLogUnsupportedOperation@4
_CmpMachineHiveCallbackFatalFilter@8
_CmpMachineHiveLoadedWorkItem@4
_CmpMarkAllChildrenDirty@8
_CmpMarkCurrentProfileDirty@0
_CmpMarkCurrentValueDirty@8
_CmpMarkEntireIndexDirty@8
_CmpMarkIndexDirty@12
_CmpMarkKeyDirty@16
_CmpMarkKeyParentDirty@8
_CmpMarkKeyUnbacked@8
_CmpMarkKeyValuesDirty@12
_CmpMarkValueDataDirty@8
_CmpMergeKeyValues@24
_CmpMigrateOOBELanguageToInstallationLanguage@0
_CmpMountPreloadedHives@0
_CmpMoveBiosAliasTable@32
_CmpNameFromAttributes@12
_CmpNameSize@4
_CmpNotifyChangeKey@28
_CmpNotifyMachineHiveLoaded@4
_CmpNotifyTriggerCheck@12
_CmpOKToFollowLink@8
_CmpOpenDevicesControlSet@12
_CmpOpenFileWithExtremePrejudice@20
_CmpOpenHiveFile@36
_CmpOpenSystemDriverHiveContext@8
_CmpParseInfBuffer@12
_CmpParseKey@44
_CmpPartialPromoteSingleKeyFromKeyNodeStacks@8
_CmpPartialPromoteSubkeys@4
_CmpPerformCompleteKcbCacheLookup@32
_CmpPerformKcbUnloadCheck@4
_CmpPerformKeyBodyDeletionCheck@8
_CmpPerformSiloKeyLockTrackerEnabledCheck@4
_CmpPerformTrustClassAccessCheck@8
_CmpPerformUnloadKey@16
_CmpPopulateKcbStack@8
_CmpPopulateKeyBasicInformation@20
_CmpPopulateKeyCachedInformation@16
_CmpPopulateKeyFullInformation@24
_CmpPopulateKeyNodeInformation@28
_CmpPopulateKeyNodeStackFromKcbStack@8
_CmpPopulateKeyNodeStackFromKeyNodeStack@8
_CmpPostApc@20
_CmpPostApcRunDown@4
_CmpPostNotify@28
_CmpPrepareDiscardAndReplaceKcbAndUnbackedHigherLayers@8
_CmpPrepareDiscardReplacePost@12
_CmpPrepareDiscardReplacePre@8
_CmpPrepareForSubtreeInvalidation@8
_CmpPrepareForSubtreeInvalidationWorker@8
_CmpPrepareLightWeightTransaction@8
_CmpPrepareToInvalidateAllHigherLayerKcbs@12
_CmpPrepareToInvalidateAllHigherLayerKcbsPostCallback@12
_CmpPrepareToInvalidateAllHigherLayerKcbsPreCallback@8
_CmpPreserveSystemHiveData@8
_CmpProcessForSimpleStringSub@8
_CmpProcessLightWeightUOW@16
_CmpPromoteKey@12
_CmpPromoteSingleKeyFromKcbStacks@12
_CmpPromoteSingleKeyFromParentKcbAndChildKeyNode@12
_CmpPromoteSubtree@12
_CmpProtectPool@12
_CmpPublishEventForPcaResolver@8
_CmpQueryEditionVersion@12
_CmpQueryFileSecurityDescriptor@8
_CmpQueryHiveRedirectionFileList@8
_CmpQueryKeyData@24
_CmpQueryKeyDataFromCache@24
_CmpQueryKeyDataFromKeyNodeStack@20
_CmpQueryKeyDataFromNode@32
_CmpQueryKeyName@24
_CmpQueryKeySecurity@20
_CmpQueryKeyValueData@28
_CmpQueryNameString@8
_CmpQueueLazyCommitWorker@4
_CmpQuitNextActiveHive@4
_CmpQuitNextHive@4
_CmpQuotaWarningWorker@4
_CmpReadBuildLab@8
_CmpRealignLogBuffers@4
_CmpRebuildKcbCache@8
_CmpRebuildKcbCacheFromNode@16
_CmpRecheckHiveVolumePolicy@4
_CmpRecordParseFailure@12
_CmpRecordShutdownStopTime@0
_CmpRecordUnloadEventForHive@8
_CmpRecoverEnlistment@12
_CmpReferenceHive@4
_CmpReferenceKeyControlBlock@4
_CmpReferenceKeyControlBlockLockNotHeld@4
_CmpReferenceKeyControlBlockUnsafe@4
_CmpRefreshHive@4
_CmpRefreshParent@16
_CmpRefreshWorkerRoutine@16
_CmpRegisterCallbackInternal@24
_CmpRegisterTraceLoggingProvider@0
_CmpRehashKcbSubtree@8
_CmpReleaseGlobalQuota@4
_CmpReleaseShutdownRundown@4
_CmpRemoveCellFromIndex@8
_CmpRemoveFromDelayedClose@4
_CmpRemoveFromSecurityCache@8
_CmpRemoveHiveFromNamespace@12
_CmpRemoveKeyControlBlock@4
_CmpRemoveKeyHash@8
_CmpRemoveKeyHashFromTableEntry@8
_CmpRemoveSecurityCellList@8
_CmpRemoveSubKey@12
_CmpRemoveSubKeyCellNoCellRef@12
_CmpRemoveSubKeyFromList@12
_CmpRemoveValueFromList@12
_CmpReorganizeHive@12
_CmpReparseToVirtualPath@16
_CmpReplicateKeyToVirtual@16
_CmpReportAuditVirtualizationEvent@8
_CmpReportNotify@16
_CmpReportNotifyForKcbStack@16
_CmpReportNotifyHelper@20
_CmpReserveRollbackPacketSpace@8
_CmpResetKeyNodeStack@4
_CmpResolveHiveLoadConflict@36
_CmpRestampVersion@8
_CmpRetryBackOff@4
_CmpRmAnalysisPhase@12
_CmpRmReDoPhase@12
_CmpRmRecover@12
_CmpRmUnDoPhase@4
_CmpRollbackLightWeightTransaction@4
_CmpRollbackTransactionArray@16
_CmpRunDownCmRM@8
_CmpRundownUnitOfWork@4
_CmpSaveBootControlSet@4
_CmpSaveKeyByFileCopy@8
_CmpSearchAndCountWorker@8
_CmpSearchAndRehashWorker@8
_CmpSearchAndTagNoDelayCloseWorker@8
_CmpSearchForOpenSubKeys@12
_CmpSearchForTrans@12
_CmpSearchKeyControlBlockTreeEx@20
_CmpSearchLineInSectionByIndex@8
_CmpSearchSectionByName@8
_CmpSearchValueInLine@8
_CmpSecConvKey@8
_CmpSecurityMethod@36
_CmpSelectLeaf@20
_CmpSendUnsupportedOperationTelemetryEvent@8
_CmpSetAccessStateForBackupRestore@16
_CmpSetGlobalQuotaAllowed@0
_CmpSetIoPriorityThread@8
_CmpSetKcbAtLayerHeight@12
_CmpSetKeySecurity@24
_CmpSetNetworkValue@4
_CmpSetPriorityThread@8
_CmpSetRespectIoPriorityThread@8
_CmpSetSecurityDescriptorInfo@36
_CmpSetSystemBiosInformation@12
_CmpSetSystemRegistryString@12
_CmpSetSystemValues@4
_CmpSetValueDataExisting@20
_CmpSetValueDataNew@20
_CmpSetValueKeyExisting@28
_CmpSetValueKeyNew@32
_CmpSetValueKeyTombstone@20
_CmpSetVersionData@0
_CmpSetVideoBiosInformation@8
_CmpSetupConfigurationTree@16
_CmpSetupLoggingState@8
_CmpSignalDeferredPosts@4
_CmpSignalUnloadEventArrayForHive@4
_CmpSnapshotKcbStackSecurity@16
_CmpSnapshotTxOwnerArray@12
_CmpSnapshotTxOwnerArrayToRollbackPacket@8
_CmpSortByTag@4
_CmpSortDriverList@12
_CmpSortedValueEnumStackAdvance@4
_CmpSortedValueEnumStackAdvanceInternal@4
_CmpSortedValueEnumStackCleanup@4
_CmpSortedValueEnumStackEntryCleanup@4
_CmpSortedValueEnumStackEntryStart@12
_CmpSortedValueEnumStackGetEntryAtLayerHeight@8
_CmpSortedValueEnumStackInitialize@4
_CmpSortedValueEnumStackStartFromKeyNodeStack@8
_CmpSortedValueEnumStackValueCompareFunction
_CmpSplitLeaf@16
_CmpStartCLFSLog@36
_CmpStartKcbStack@8
_CmpStartKcbStackForTopLayerKcb@8
_CmpStartKeyNodeStack@8
_CmpStartKeyNodeStackFromKcbStack@8
_CmpStartRMLog@8
_CmpStartRMLogs@4
_CmpStartSiloRegistryNamespace@4
_CmpStopRMLog@4
_CmpStopSiloKeyLockTracker@4
_CmpSubtreeEnumeratorAdvance@4
_CmpSubtreeEnumeratorBeginForKcbStack@8
_CmpSubtreeEnumeratorBeginForKeyNodeStack@8
_CmpSubtreeEnumeratorCleanup@4
_CmpSubtreeEnumeratorGetCurrentKeyStacks@12
_CmpSubtreeEnumeratorInitialize@4
_CmpSubtreeEnumeratorReset@4
_CmpSubtreeEnumeratorStart@8
_CmpSubtreeEnumeratorStartForKcbStack@8
_CmpSubtreeEnumeratorStartForKeyNodeStack@8
_CmpSwapHiveStorage@8
_CmpSwapValueInList@16
_CmpSyncKcbCacheForHive@16
_CmpSyncKeyValues@28
_CmpSyncNextBackupHive@0
_CmpSyncSubKeysAfterDelete@20
_CmpSystemHiveHysteresisWorker@4
_CmpSystemQuotaWarningWorker@4
_CmpTraceHiveFlushFinishWaitForActive@0
_CmpTraceHiveFlushStartWaitForActive@0
_CmpTraceHiveFlushStop@4
_CmpTraceHiveFlushWroteLogFile@8
_CmpTraceHiveFlushWrotePrimaryFile@8
_CmpTraceHiveLoadStart@8
_CmpTraceHiveLoadStop@4
_CmpTraceHiveMountBaseFileMounted@8
_CmpTraceHiveMountLogEntryApplied@8
_CmpTraceHiveMountStart@0
_CmpTraceHiveMountStop@4
_CmpTraceHiveRestoreStart@8
_CmpTraceHiveRestoreStop@4
_CmpTraceHiveSaveFileCopied@0
_CmpTraceHiveSaveStart@4
_CmpTraceHiveSaveStop@4
_CmpTraceHiveSaveTreeCopied@0
_CmpTraceSecurityChanging@20
_CmpTraceShutdownFlushStart@0
_CmpTraceShutdownFlushStop@0
_CmpTraceShutdownRundownComplete@0
_CmpTraceShutdownStart@0
_CmpTraceShutdownStop@0
_CmpTransAllocateTrans@16
_CmpTransDereferenceTransaction@4
_CmpTransEnlistUowInCmTrans@8
_CmpTransEnlistUowInKcb@8
_CmpTransGetTransPtr@4
_CmpTransGetUOW@4
_CmpTransInitializeTransaction@4
_CmpTransIsTransActive@4
_CmpTransMgrCommit@12
_CmpTransMgrCommitUoW@12
_CmpTransMgrFreeVolatileData@8
_CmpTransMgrPrepare@16
_CmpTransMgrRollback@8
_CmpTransMgrSyncHive@4
_CmpTransReferenceTransaction@4
_CmpTransSearchAddLightWeightTrans@16
_CmpTransSearchAddTrans@24
_CmpTransSearchAddTransFromHive@20
_CmpTransSearchAddTransFromKeyBody@8
_CmpTransSearchAddTransFromRm@20
_CmpTransSilentIgnore@0
_CmpTransUowIsEqual@8
_CmpTransWriteLog@20
_CmpTrimHive@4
_CmpTryAcquireIXLockWithRollbackPacket@12
_CmpTryAcquireKcbIXLocks@16
_CmpTryConvertKcbLockSharedToExclusive@4
_CmpTryToLockHashEntryExclusive@8
_CmpTryToLockKcbExclusive@4
_CmpTryToRundownHive@16
_CmpUnJoinClassOfTrust@4
_CmpUnblockHiveWrites@12
_CmpUnblockTwoHiveWrites@8
_CmpUndoDeleteKeyForTrans@8
_CmpUnfreezeHive@4
_CmpUnlockAppHiveLoadList@0
_CmpUnlockDeletedHashEntryByKcb@4
_CmpUnlockHashEntry@8
_CmpUnlockHashEntryByIndex@8
_CmpUnlockHashEntryByKcb@4
_CmpUnlockHiveList@0
_CmpUnlockKcb@4
_CmpUnlockKcbStack@4
_CmpUnlockKcbStackFlusherLocksExclusive@4
_CmpUnlockRegistry@0
_CmpUnlockTwoKcbs@8
_CmpUpdateGlobalQuotaAllowed@0
_CmpUpdateHiveRootCellFlags@8
_CmpUpdateKeyNodeAccessBits@12
_CmpUpdateParentForEachSon@12
_CmpUpdatePhaseAccessBit@0
_CmpUpdateReorganizeRegistryValues@0
_CmpUpdateStateSeparationHiveOptions@0
_CmpUpdateSystemHiveHysteresis@12
_CmpUserPresenceCallback@16
_CmpUuidCreate@4
_CmpVEAddHiveToSIDMappingTable@8
_CmpVEExecuteCreateLogic@36
_CmpVEExecuteOpenLogic@24
_CmpVEExecuteParseLogic@24
_CmpVEExecuteRealStoreParseLogic@20
_CmpVEExecuteVirtualStoreParseLogic@16
_CmpVEPerformOpenAccessCheck@24
_CmpVERemoveHiveFromSIDMappingTable@4
_CmpValidateComponents@8
_CmpValidateGlobalFlushControlFlags@0
_CmpValidateHiveSecurityDescriptors@20
_CmpValueEnumStackAdvance@4
_CmpValueEnumStackCleanup@4
_CmpValueEnumStackEntryCleanup@4
_CmpValueEnumStackEntryInitialize@4
_CmpValueEnumStackGetCurrentValueHive@4
_CmpValueEnumStackGetEntryAtLayerHeight@8
_CmpValueEnumStackInitialize@4
_CmpValueEnumStackMatchingValueInUpperLayer@16
_CmpValueEnumStackStartFromKcbStack@8
_CmpValueEnumStackStartFromKeyNodeStack@8
_CmpValueToData@20
_CmpVirtualBranchIsReplicated@12
_CmpVirtualPathPresent@4
_CmpVolumeContextCleanup@4
_CmpVolumeContextCreate@12
_CmpVolumeContextDecrementRefCount@4
_CmpVolumeContextFree@4
_CmpVolumeContextMustHiveFilePagesBeKeptLocal@4
_CmpVolumeContextSendDeviceUsageNotification@4
_CmpVolumeContextStart@12
_CmpVolumeManagerGetContextForFile@16
_CmpVolumeManagerGetContextForFilePath@16
_CmpVolumeManagerGetContextForGuidUnsafe@8
_CmpVolumeManagerInitialize@4
_CmpVolumeManagerUnlockContextListExclusive@4
_CmpVolumeManagerUnlockContextListShared@4
_CmpWaitForHiveMount@16
_CmpWaitForLateUnloadWorker@0
_CmpWaitOnHiveWriteQueue@8
_CmpWakeWriteQueueWaiters@12
_CmpWalkOneLevel@44
_CmpWalkPath@12
_CmpWalkUnicodeStringPath@12
_CmpWorkerEngineWorker@4
_CmpWriteOffsetArrayToFile@20
_CompareFileTimeType@8
_CompareNamesCaseSensitive@8
_CompareObjectTypes
_CompareUnicodeStrings@12
_ComposeHangulLV@8
_ComposeHangulLVT@8
_ComputeNameLength@4
_ComputeUnicodeNameLength@4
_ConstraintEval@20
_ConsumerGetBuffer@12
_ConsumerPeekAndConsumeBuffer@20
_ConvertDevpropcompkeyToString@16
_ConvertDevpropertyToString@16
_CountUTF8ToUnicode@12
_CountUnicodeToUTF8@12
_CreateMiniNtBootKey@0
_CreateSystemRootLink@4
_DECREMENT_ADAPTER_CHANNELS@4
_DECREMENT_COMMON_BUFFERS@4
_DECREMENT_SCATTER_GATHER_LISTS@4
_DbgBreakPoint@0
_DbgBreakPointWithStatus@4
_DbgCommandString@8
_DbgLoadImageSymbols@12
_DbgLoadImageSymbolsUnicode@12
_DbgLoadUserImageSymbols@20
_DbgPrint
_DbgPrintEx
_DbgPrintReturnControlC
_DbgPrompt@12
_DbgQueryDebugFilterState@8
_DbgSetDebugFilterState@12
_DbgSetDebugPrintCallback@8
_DbgUnLoadImageSymbols@12
_DbgUnLoadImageSymbolsUnicode@12
_DbgUnicodeStringToAnsiString@8
_DbgUserBreakPoint@0
_DbgkCaptureLiveDump@16
_DbgkCaptureLiveKernelDump@4
_DbgkClearProcessDebugObject@8
_DbgkCopyProcessDebugPort@16
_DbgkCreateMinimalProcess@4
_DbgkCreateMinimalThread@4
_DbgkCreateThread@4
_DbgkExitProcess@4
_DbgkExitThread@4
_DbgkForwardException@12
_DbgkInitialize@0
_DbgkInitializeServerSilo@4
_DbgkLkmdRegisterCallback@12
_DbgkLkmdUnregisterCallback@4
_DbgkMapViewOfSection@28
_DbgkOpenProcessDebugPort@12
_DbgkPostModuleMessage@24
_DbgkQueueUserExceptionReport@12
_DbgkRegisterErrorPort@8
_DbgkSendSystemDllMessages@12
_DbgkUnMapViewOfSection@8
_DbgkUserReportWorkRoutine@4
_DbgkWerAddSecondaryData@16
_DbgkWerCaptureLiveKernelDump@36
_DbgkpCloseObject@16
_DbgkpConvertKernelToUserStateChange@8
_DbgkpCreateNotificationEvent@8
_DbgkpDeleteObject@4
_DbgkpDereferenceErrorPort@4
_DbgkpFreeDebugEvent@4
_DbgkpGetServerSiloState@4
_DbgkpInitializePhase0@0
_DbgkpInitializePhase0SiloState@4
_DbgkpInitializePhase1@0
_DbgkpInitializePhase1SiloState@4
_DbgkpLkmdFireCallbacks@12
_DbgkpLkmdIsMemoryBlockPresentFromCallback@12
_DbgkpLkmdLaunchSnapApc@16
_DbgkpLkmdSnapData@12
_DbgkpLkmdSnapDataEx@24
_DbgkpLkmdSnapGlobals@4
_DbgkpLkmdSnapKernelStack@24
_DbgkpLkmdSnapKernelStackSegmentCallback@12
_DbgkpLkmdSnapObject@12
_DbgkpLkmdSnapPendingIrps@12
_DbgkpLkmdSnapThread@16
_DbgkpLkmdSnapThreadApc@20
_DbgkpLkmdSnapThreadInContext@12
_DbgkpLkmdSqmIncrementDword@16
_DbgkpLkmdSqmIsOptedIn@0
_DbgkpLkmdSqmStatus@12
_DbgkpMarkProcessPeb@4
_DbgkpOpenHandles@12
_DbgkpPostFakeProcessCreateMessages@12
_DbgkpPostFakeThreadMessages@20
_DbgkpPostModuleMessages@12
_DbgkpQueueMessage@20
_DbgkpRemoveErrorPort@12
_DbgkpSectionToFileHandle@4
_DbgkpSendApiMessage@12
_DbgkpSendApiMessageLpc@12
_DbgkpSendErrorMessage@12
_DbgkpSetProcessDebugObject@16
_DbgkpStartSystemErrorHandler@0
_DbgkpSuppressDbgMsg@4
_DbgkpSuspendProcess@4
_DbgkpTriageDumpCheckPresentHashTable@16
_DbgkpTriageDumpFillHeaders@24
_DbgkpTriageDumpInitialize@16
_DbgkpTriageDumpIsMemoryBlockPresent@12
_DbgkpTriageDumpRestoreState@4
_DbgkpTriageDumpSaveState@4
_DbgkpTriageDumpSnapData@24
_DbgkpTriageDumpWrite@8
_DbgkpValidateDebugTarget@12
_DbgkpWakeTarget@4
_DbgkpWerAllocateNonpagedPool@4
_DbgkpWerAllocatePool@4
_DbgkpWerCaptureLiveFullDump@8
_DbgkpWerCaptureLiveTriageDump@4
_DbgkpWerCleanupContext@4
_DbgkpWerDeferredWriteRoutine@4
_DbgkpWerFreePool@4
_DbgkpWerInitializeDeferredLiveDump@4
_DbgkpWerInvokeCallbacks@4
_DbgkpWerIsFullLiveDumpDisabled@0
_DbgkpWerProcessPolicyResult@16
_DbgkpWerUpdateTriageDumpHeader@4
_DbgkpWerWriteSecondaryData@8
_DbgkpWerWriteTriageDump@4
_DbgpInsertDebugPrintCallback@4
_DbgpRemoveDebugPrintCallback@4
_DebugPrint@12
_DebugPrompt@8
_DebugService@20
_DecodeAttributeName@12
_DeleteNodeFromTree@8
_DelistKeyBodyFromKCB@8
_DifAddDeviceWrapper@8
_DifAddPerDriverDataForPlugins@4
_DifCcCopyWriteExWrapper@24
_DifCcCopyWriteWrapper@20
_DifCcDeferWriteWrapper@24
_DifCcFastCopyWriteWrapper@16
_DifCmRegisterCallbackExWrapper@24
_DifCmRegisterCallbackWrapper@12
_DifCmUnRegisterCallbackWrapper@8
_DifCreateAPIThunkContext@12
_DifDeregisterPlugin@4
_DifDriverCancelWrapper@12
_DifDriverEntryWrapper@8
_DifDriverStartIoWrapper@8
_DifDriverUnloadWrapper@4
_DifExAcquireResourceExclusiveLiteWrapper@8
_DifExAcquireResourceSharedLiteWrapper@8
_DifExAcquireSharedStarveExclusiveWrapper@8
_DifExAcquireSharedWaitForExclusiveWrapper@8
_DifExAllocatePool2Wrapper@24
_DifExAllocatePool3Wrapper@24
_DifExAllocatePoolWithQuotaTagWrapper@24
_DifExAllocatePoolWithQuotaWrapper@24
_DifExAllocatePoolWithTagPriorityWrapper@24
_DifExAllocatePoolWithTagWrapper@24
_DifExAllocatePoolWrapper@24
_DifExConvertExclusiveToSharedLiteWrapper@4
_DifExCreateCallbackWrapper@16
_DifExDeletePagedLookasideListWrapper@4
_DifExDeleteResourceLiteWrapper@4
_DifExEnterCriticalRegionAndAcquireResourceExclusiveWrapper@4
_DifExEnterCriticalRegionAndAcquireResourceSharedWrapper@4
_DifExEnterCriticalRegionAndAcquireSharedWaitForExclusiveWrapper@4
_DifExEnterPriorityRegionAndAcquireResourceExclusiveWrapper@4
_DifExEnterPriorityRegionAndAcquireResourceSharedWrapper@4
_DifExFreePoolWithTagWrapper@8
_DifExFreePoolWrapper@4
_DifExInitializePagedLookasideListWrapper@36
_DifExIsProcessorFeaturePresentWrapper@4
_DifExRaiseAccessViolationWrapper@0
_DifExRaiseDatatypeMisalignmentWrapper@0
_DifExRaiseStatusWrapper@4
_DifExRegisterCallbackWrapper@12
_DifExSetTimerResolutionWrapper@8
_DifExUnregisterCallbackWrapper@4
_DifExUuidCreateWrapper@4
_DifGetAPIThunkContextById@4
_DifGetAvailableSystemPages@4
_DifGetPluginPerDriverData@8
_DifGetReturnAddressForWrappers@0
_DifIRP_MJ_CLEANUPWrapper@8
_DifIRP_MJ_CLOSEWrapper@8
_DifIRP_MJ_CREATEWrapper@8
_DifIRP_MJ_CREATE_MAILSLOTWrapper@8
_DifIRP_MJ_CREATE_NAMED_PIPEWrapper@8
_DifIRP_MJ_DEVICE_CHANGEWrapper@8
_DifIRP_MJ_DEVICE_CONTROLWrapper@8
_DifIRP_MJ_DIRECTORY_CONTROLWrapper@8
_DifIRP_MJ_FILE_SYSTEM_CONTROLWrapper@8
_DifIRP_MJ_FLUSH_BUFFERSWrapper@8
_DifIRP_MJ_INTERNAL_DEVICE_CONTROLWrapper@8
_DifIRP_MJ_LOCK_CONTROLWrapper@8
_DifIRP_MJ_PNPWrapper@8
_DifIRP_MJ_POWERWrapper@8
_DifIRP_MJ_QUERY_EAWrapper@8
_DifIRP_MJ_QUERY_INFORMATIONWrapper@8
_DifIRP_MJ_QUERY_QUOTAWrapper@8
_DifIRP_MJ_QUERY_SECURITYWrapper@8
_DifIRP_MJ_QUERY_VOLUME_INFORMATIONWrapper@8
_DifIRP_MJ_READWrapper@8
_DifIRP_MJ_SET_EAWrapper@8
_DifIRP_MJ_SET_INFORMATIONWrapper@8
_DifIRP_MJ_SET_QUOTAWrapper@8
_DifIRP_MJ_SET_SECURITYWrapper@8
_DifIRP_MJ_SET_VOLUME_INFORMATIONWrapper@8
_DifIRP_MJ_SHUTDOWNWrapper@8
_DifIRP_MJ_SYSTEM_CONTROLWrapper@8
_DifIRP_MJ_WRITEWrapper@8
_DifInit@0
_DifIoAllocateControllerWrapper@16
_DifIoAllocateIrpWrapper@20
_DifIoAllocateMdlWrapper@28
_DifIoAllocateWorkItemWrapper@12
_DifIoAttachDeviceWrapper@12
_DifIoBuildDeviceIoControlRequestWrapper@44
_DifIoCheckShareAccessWrapper@20
_DifIoConnectInterruptWrapper@44
_DifIoCreateControllerWrapper@4
_DifIoCreateDeviceWrapper@28
_DifIoCreateFileExWrapper@60
_DifIoCreateFileSpecifyDeviceObjectHintWrapper@60
_DifIoCreateFileWrapper@56
_DifIoCreateNotificationEventWrapper@8
_DifIoCreateSymbolicLinkWrapper@8
_DifIoCreateSynchronizationEventWrapper@8
_DifIoCreateUnprotectedSymbolicLinkWrapper@8
_DifIoDeleteControllerWrapper@4
_DifIoDeleteDeviceWrapper@4
_DifIoDeleteSymbolicLinkWrapper@4
_DifIoDetachDeviceWrapper@4
_DifIoDisconnectInterruptWrapper@4
_DifIoFreeControllerWrapper@4
_DifIoGetConfigurationInformationWrapper@0
_DifIoGetDeviceDirectoryWrapper@20
_DifIoGetDeviceObjectPointerWrapper@16
_DifIoGetDeviceToVerifyWrapper@4
_DifIoGetDmaAdapterWrapper@12
_DifIoGetDriverDirectoryWrapper@16
_DifIoGetFileObjectGenericMappingWrapper@0
_DifIoGetInitialStackWrapper@0
_DifIoInitializeTimerWrapper@12
_DifIoIsWdmVersionAvailableWrapper@8
_DifIoOpenDeviceInterfaceRegistryKeyWrapper@12
_DifIoOpenDeviceRegistryKeyWrapper@16
_DifIoOpenDriverRegistryKeyWrapper@20
_DifIoRaiseHardErrorWrapper@12
_DifIoRaiseInformationalHardErrorWrapper@12
_DifIoRegisterDeviceInterfaceWrapper@16
_DifIoRegisterDriverReinitializationWrapper@12
_DifIoRegisterShutdownNotificationWrapper@4
_DifIoRemoveShareAccessWrapper@8
_DifIoSetDeviceInterfaceStateWrapper@8
_DifIoSetDeviceToVerifyWrapper@8
_DifIoSetShareAccessWrapper@16
_DifIoStartNextPacketWrapper@8
_DifIoUnregisterShutdownNotificationWrapper@4
_DifIoUpdateShareAccessWrapper@8
_DifIoWMIAllocateInstanceIdsWrapper@12
_DifIoWMIRegistrationControlWrapper@8
_DifIoWriteErrorLogEntryWrapper@4
_DifKeCancelTimerWrapper@4
_DifKeClearEventWrapper@4
_DifKeDelayExecutionThreadWrapper@12
_DifKeDeregisterNmiCallbackWrapper@4
_DifKeEnterCriticalRegionWrapper@0
_DifKeEnterGuardedRegionWrapper@0
_DifKeInitializeDeviceQueueWrapper@4
_DifKeInitializeSemaphoreWrapper@12
_DifKeInitializeTimerExWrapper@8
_DifKeInitializeTimerWrapper@4
_DifKeInsertByKeyDeviceQueueWrapper@12
_DifKeInsertDeviceQueueWrapper@8
_DifKeLeaveCriticalRegionWrapper@0
_DifKeLeaveGuardedRegionWrapper@0
_DifKePulseEventWrapper@12
_DifKeQueryActiveProcessorsWrapper@0
_DifKeRaiseIrqlToDpcLevelWrapper@0
_DifKeReadStateEventWrapper@4
_DifKeReadStateTimerWrapper@4
_DifKeRegisterNmiCallbackWrapper@8
_DifKeReleaseMutantWrapper@16
_DifKeReleaseMutexWrapper@8
_DifKeRemoveByKeyDeviceQueueWrapper@8
_DifKeRemoveDeviceQueueWrapper@4
_DifKeRemoveEntryDeviceQueueWrapper@8
_DifKeResetEventWrapper@4
_DifKeRestoreExtendedProcessorStateWrapper@4
_DifKeSaveExtendedProcessorStateWrapper@12
_DifKeSaveFloatingPointStateWrapper@4
_DifKeSetEventWrapper@12
_DifKeSetTimerExWrapper@20
_DifKeSetTimerWrapper@16
_DifMmAllocateContiguousMemorySpecifyCacheWrapper@32
_DifMmAllocateContiguousMemoryWrapper@12
_DifMmAllocateNonCachedMemoryWrapper@4
_DifMmAllocatePagesForMdlExWrapper@36
_DifMmAllocatePagesForMdlWrapper@28
_DifMmFreeContiguousMemoryWrapper@4
_DifMmFreeNonCachedMemoryWrapper@8
_DifMmFreePagesFromMdlWrapper@4
_DifMmLockPagableDataSectionWrapper@4
_DifMmLockPagableSectionByHandleWrapper@4
_DifMmMapIoSpaceWrapper@16
_DifMmMapLockedPagesSpecifyCacheWrapper@24
_DifMmPageEntireDriverWrapper@4
_DifMmResetDriverPagingWrapper@4
_DifMmSecureVirtualMemoryWrapper@12
_DifMmUnlockPagableImageSectionWrapper@4
_DifMmUnsecureVirtualMemoryWrapper@4
_DifNtCreateFileWrapper@44
_DifNtSetInformationFileWrapper@20
_DifNtWriteFileWrapper@36
_DifObGetObjectSecurityWrapper@12
_DifObReferenceObjectByHandleWrapper@24
_DifObReleaseObjectSecurityWrapper@8
_DifPluginSimplePerfControl@12
_DifPoCallDriverWrapper@16
_DifPoFxActivateComponentWrapper@12
_DifPoFxCompleteDevicePowerNotRequiredWrapper@4
_DifPoFxCompleteIdleConditionWrapper@8
_DifPoFxCompleteIdleStateWrapper@8
_DifPoFxIdleComponentWrapper@12
_DifPoFxNotifySurprisePowerOnWrapper@4
_DifPoFxPowerControlWrapper@28
_DifPoFxRegisterDeviceWrapper@12
_DifPoFxReportDevicePoweredOnWrapper@4
_DifPoFxSetComponentLatencyWrapper@16
_DifPoFxSetComponentResidencyWrapper@16
_DifPoFxSetComponentWakeWrapper@12
_DifPoFxSetDeviceIdleTimeoutWrapper@12
_DifPoFxStartDevicePowerManagementWrapper@4
_DifPoFxUnregisterDeviceWrapper@4
_DifPoRequestPowerIrpWrapper@24
_DifProbeForReadWrapper@12
_DifProbeForWriteWrapper@12
_DifPsCreateSystemThreadWrapper@28
_DifPsGetVersionWrapper@16
_DifPsSetCreateProcessNotifyRoutineWrapper@8
_DifPsSetCreateThreadNotifyRoutineWrapper@4
_DifPsSetLoadImageNotifyRoutineWrapper@4
_DifPsTerminateSystemThreadWrapper@4
_DifRegisterPlugin@16
_DifRtlCheckRegistryKeyWrapper@8
_DifRtlCreateRegistryKeyWrapper@8
_DifRtlCreateSystemVolumeInformationFolderWrapper@4
_DifRtlDeleteRegistryValueWrapper@12
_DifRtlQueryRegistryValueWithFallbackWrapper@28
_DifRtlQueryRegistryValuesExWrapper@20
_DifRtlQueryRegistryValuesWrapper@20
_DifRtlWriteRegistryValueWrapper@24
_DifUpdatePluginState@8
_DifUtilDbgPrint
_DifZwCloseWrapper@4
_DifZwCreateDirectoryObjectWrapper@12
_DifZwCreateFileWrapper@44
_DifZwCreateKeyTransactedWrapper@32
_DifZwCreateKeyWrapper@28
_DifZwDeleteFileWrapper@4
_DifZwDeleteKeyWrapper@4
_DifZwDeleteValueKeyWrapper@8
_DifZwEnumerateKeyWrapper@24
_DifZwEnumerateValueKeyWrapper@24
_DifZwFlushBuffersFileExWrapper@20
_DifZwFlushBuffersFileWrapper@8
_DifZwFlushKeyWrapper@4
_DifZwOpenKeyExWrapper@16
_DifZwOpenKeyTransactedExWrapper@20
_DifZwOpenKeyTransactedWrapper@16
_DifZwOpenKeyWrapper@12
_DifZwQueryKeyWrapper@20
_DifZwQueryValueKeyWrapper@24
_DifZwRenameKeyWrapper@8
_DifZwSetEaFileWrapper@16
_DifZwSetInformationFileWrapper@20
_DifZwSetInformationKeyWrapper@16
_DifZwSetValueKeyWrapper@24
_DifZwWriteFileWrapper@36
_DifiDbgPrint
_DifpExAllocatePool2_LwSP_Enter@4
_DifpExAllocatePool2_LwSP_Exit@4
_DifpExAllocatePool3_LwSP_Enter@4
_DifpExAllocatePool3_LwSP_Exit@4
_DifpExAllocatePoolWithQuotaTag_LwSP_Enter@4
_DifpExAllocatePoolWithQuotaTag_LwSP_Exit@4
_DifpExAllocatePoolWithQuota_LwSP_Enter@4
_DifpExAllocatePoolWithQuota_LwSP_Exit@4
_DifpExAllocatePoolWithTagPriority_LwSP_Enter@4
_DifpExAllocatePoolWithTagPriority_LwSP_Exit@4
_DifpExAllocatePoolWithTag_LwSP_Enter@4
_DifpExAllocatePoolWithTag_LwSP_Exit@4
_DifpExAllocatePool_LwSP_Enter@4
_DifpExAllocatePool_LwSP_Exit@4
_DifpExFreePoolWithTag_LwSP_Enter@4
_DifpExFreePool_LwSP_Enter@4
_DifpLwSPEntry@0
_DifpLwSPProcessPrePoolAlloc@8
_DisplayBootBitmap@4
_DisplayFilter@4
_DownLevelGetParentLanguageName@16
_DownLevelLangIDToLanguageName@16
_DownLevelLanguageNameToLangID@8
_DrvDbAcquireDatabaseNodeBaseKey@16
_DrvDbBuildDeviceIdDriverInfMatch@16
_DrvDbCheckSchemaVersionSupported@4
_DrvDbCreateDatabaseNode@32
_DrvDbCreateDeviceId@20
_DrvDbCreateDriverDatabase@20
_DrvDbCreateDriverFile@20
_DrvDbCreateDriverInfFile@20
_DrvDbCreateDriverPackage@20
_DrvDbDeleteDriverDatabase@8
_DrvDbDeleteObjectRegKey@16
_DrvDbDeleteObjectSubKey@16
_DrvDbDestroyDatabaseNode@8
_DrvDbDispatchDeviceId@20
_DrvDbDispatchDriverDatabase@20
_DrvDbDispatchDriverFile@20
_DrvDbDispatchDriverInfFile@20
_DrvDbDispatchDriverPackage@20
_DrvDbFindDatabaseNode@12
_DrvDbGetCompositeMappedPropertyKeys@24
_DrvDbGetConfigurationSubKeyCallback@16
_DrvDbGetDeviceIdDriverInfMatches@24
_DrvDbGetDeviceIdMappedProperty@32
_DrvDbGetDeviceIdMappedPropertyKeys@24
_DrvDbGetDriverDatabaseList@24
_DrvDbGetDriverDatabaseMappedProperty@32
_DrvDbGetDriverDatabaseMappedPropertyKeys@24
_DrvDbGetDriverFileMappedProperty@32
_DrvDbGetDriverFileMappedPropertyKeys@24
_DrvDbGetDriverInfFileMappedProperty@32
_DrvDbGetDriverInfFileMappedPropertyKeys@24
_DrvDbGetDriverPackageMappedProperty@32
_DrvDbGetDriverPackageMappedPropertyKeys@24
_DrvDbGetDriverPackageSignerName@24
_DrvDbGetDriverPackageSignerScore@16
_DrvDbGetObjectDatabaseNode@16
_DrvDbGetObjectDatabaseNodeName@24
_DrvDbGetObjectList@32
_DrvDbGetObjectSubKeyCallback@16
_DrvDbGetObjectSubKeyList@32
_DrvDbGetRegValueMappedProperty@28
_DrvDbGetRegValueMappedPropertyKeys@28
_DrvDbGetSecurityDescriptor@0
_DrvDbInitializeDatabaseNodeVersion@8
_DrvDbLoadDatabaseNode@8
_DrvDbOpenContext@8
_DrvDbOpenDriverDatabaseRegKey@24
_DrvDbOpenObjectRegKey@36
_DrvDbRegisterDatabase@28
_DrvDbRegisterObjects@8
_DrvDbReleaseDatabaseNodeBaseKey@16
_DrvDbSetDeviceIdDriverInfMatches@16
_DrvDbSetDeviceIdMappedProperty@28
_DrvDbSetDriverDatabaseMappedProperty@28
_DrvDbSetDriverFileMappedProperty@28
_DrvDbSetDriverInfFileMappedProperty@28
_DrvDbSetDriverPackageMappedProperty@28
_DrvDbSetRegValueMappedProperty@24
_DrvDbSplitDeviceIdDriverInfMatch@16
_DrvDbSuspendDatabase@12
_DrvDbUnloadDatabaseNode@8
_DrvDbUnregisterDatabase@8
_DrvDbValidateDeviceIdName@8
_DrvDbValidateDriverDatabaseName@8
_DrvDbValidateDriverFileName@8
_DrvDbValidateDriverInfFileName@8
_DrvDbValidateDriverPackageName@8
_ElapsedDaysToYears@4
_EmClientQueryRuleState@8
_EmClientRuleDeregisterNotification@4
_EmClientRuleEvaluate@16
_EmClientRuleRegisterNotification@16
_EmCpuMatchCallback@28
_EmFalseCallback@28
_EmInitSystem@8
_EmMatchDate@28
_EmPowerPagingEnabled@4
_EmProviderDeregister@4
_EmProviderDeregisterEntry@4
_EmProviderRegister@24
_EmProviderRegisterEntry@16
_EmRemoveBadS3PagesCallback@28
_EmSystemArchitectureCallback@28
_EmTrueCallback@28
_EmpAcquirePagingReference@0
_EmpAllocatePool@12
_EmpCacheBiosDate@0
_EmpCheckOperator@12
_EmpClientRuleRegisterNotification@16
_EmpCreateRuleParserStack@0
_EmpEvaluateNodeLink@44
_EmpEvaluateParseNodeMapping@56
_EmpEvaluatePermuteRuleEntries@16
_EmpEvaluateTargetRule@12
_EmpEvaluateUpdateRuleEvalState@8
_EmpFreePool@12
_EmpInfParseGetGuidFromName@16
_EmpInfParseGetSectionLineCount@8
_EmpInfParseGetStringIndexFromName@12
_EmpInfParseGetValueFromSectionAndKeyName@20
_EmpInfParseSearchDependencyList@8
_EmpMapPhysicalAddress@20
_EmpParseCallbacks@4
_EmpParseEntryTypes@4
_EmpParseInfDatabase@8
_EmpParseRuleExpression@12
_EmpParseRuleTerm@20
_EmpParseRuleTermArgMapping@20
_EmpParseRules@4
_EmpParseStrings@4
_EmpParseTargetRuleStringIndexList@28
_EmpParseTargetRules@4
_EmpProviderDeregisterEntry@4
_EmpProviderRegister@24
_EmpQueueRuleUpdateState@8
_EmpReleasePagingReference@0
_EmpRemoveBadS3PageWorker@4
_EmpRuleParserStackPop@20
_EmpRuleParserStackPush@20
_EmpRuleUpdateWorkerThread@4
_EmpSearchCallbackDatabase@4
_EmpSearchEntryDatabase@4
_EmpSearchRuleDatabase@4
_EmpSearchTargetRuleList@4
_EmpUpdateRuleState@8
_EncloseSubCondition@4
_EncodeAttributeName@12
_EnlightenedSwapContext@0
_EnlistKeyBodyWithKCB@8
_EtwActivityIdControl@8
_EtwAdjustTraceBuffers@0
_EtwCleanupSiloState@4
_EtwCovSampHash@16
_EtwDeleteProcessor@4
_EtwDereferenceSpinLockCounters@0
_EtwEnableTrace@44
_EtwEventEnabled@12
_EtwExitProcess@4
_EtwGetNotifyRoutineGroup@8
_EtwGetProcessAppSessionGuid@8
_EtwGetProcessorBuffer@12
_EtwGetProviderIdFromHandle@16
_EtwInitialize@8
_EtwInitializeProcessor@4
_EtwInitializeProcessorActivityId@4
_EtwInitializeSiloState@4
_EtwKernelMemoryRundown@0
_EtwLogPfnInfoRundown@16
_EtwProviderEnabled@20
_EtwQueryPerformanceTraceInformation@16
_EtwQueryProcessTelemetryCoverage@16
_EtwQueryProcessTelemetryInfo@20
_EtwQueryTraceHandleByLoggerName@8
_EtwReferenceSpinLockCounters@0
_EtwRegister@16
_EtwRegisterClassicProvider@20
_EtwRegisterCounters@0
_EtwSendTraceBuffer@24
_EtwSetInformation@20
_EtwSetPerformanceTraceInformation@12
_EtwSetProcessTelemetryCoverage@8
_EtwShutdown@4
_EtwStartAutoLogger@12
_EtwTelemetryCoverageReport@4
_EtwTiLogAllocExecVm@24
_EtwTiLogDeviceObjectLoadUnload@12
_EtwTiLogDriverObjectLoad@4
_EtwTiLogDriverObjectUnLoad@4
_EtwTiLogInsertQueueUserApc@28
_EtwTiLogMapExecView@24
_EtwTiLogProtectExecVm@24
_EtwTiLogReadWriteVm@24
_EtwTiLogSetContextThread@16
_EtwTiLogSuspendResumeProcess@16
_EtwTiLogSuspendResumeThread@16
_EtwTimLogProhibitChildProcessCreation@16
_EtwTimLogProhibitDynamicCode@8
_EtwTimLogProhibitLowILImageMap@12
_EtwTimLogProhibitNonMicrosoftBinaries@20
_EtwTimLogProhibitRemoteImageMap@8
_EtwTimLogProhibitWin32kSystemCalls@8
_EtwTimeProfileReset@0
_EtwTraceAdminlessAccessFailure@16
_EtwTraceAntiStarvationBoost@8
_EtwTraceAppStateChange@8
_EtwTraceAutoBoostClearFloor@12
_EtwTraceAutoBoostEntryExhaustion@8
_EtwTraceAutoBoostSetFloor@40
_EtwTraceCpuCacheFlush@24
_EtwTraceDequeueWork@12
_EtwTraceDpcEnqueueEvent@24
_EtwTraceDuplicateHandle@24
_EtwTraceEnqueueWork@12
_EtwTraceEvent@24
_EtwTraceFreezeThawProcess@8
_EtwTraceIdealProcessor@16
_EtwTraceInswapProcess@4
_EtwTraceIoTimerEvent@12
_EtwTraceJobAssignProcess@12
_EtwTraceJobRemoveProcess@12
_EtwTraceJobSendNotification@8
_EtwTraceJobServerSiloMonitorCallback@16
_EtwTraceJobServerSiloStateChange@8
_EtwTraceJobSetQuery@24
_EtwTraceKernelEvent@20
_EtwTraceLeapSecondDataParseFailure@4
_EtwTraceLeapSecondDataUpdate@16
_EtwTraceLpacAccessFailure@4
_EtwTraceMemoryAcg@4
_EtwTraceObject@8
_EtwTraceObjectOperation@16
_EtwTracePool@20
_EtwTracePriority@20
_EtwTraceProcessSetInPrivateMode@4
_EtwTraceProcessTerminate@4
_EtwTracePsIoAttribution@16
_EtwTracePsIoRateControl@16
_EtwTraceRaw@20
_EtwTraceReadyThread@16
_EtwTraceShouldYieldProcessor@12
_EtwTraceSiloDcEvent@24
_EtwTraceSiloKernelEvent@24
_EtwTraceSiloTimedEvent@28
_EtwTraceSystemTimeChange@12
_EtwTraceThread@12
_EtwTraceThreadAffinity@8
_EtwTraceThreadSetName@4
_EtwTraceThreadWorkItem@8
_EtwTraceThreadWorkOnBehalfUpdate@8
_EtwTraceTimeZoneBiasChange@8
_EtwTraceTimeZoneInformationRefresh@20
_EtwTraceTimedEvent@24
_EtwTraceWakeCounter@24
_EtwTraceWakeEvent@8
_EtwTraceWorkingSetInSwapStoreFail@8
_EtwTraceWorkingSetSwap@12
_EtwUnregister@8
_EtwUnregisterCounters@0
_EtwWmitraceWorker@0
_EtwWrite@24
_EtwWriteEndScenario@24
_EtwWriteErrorLogEntry@36
_EtwWriteEx@40
_EtwWriteKMSecurityEvent@16
_EtwWriteStartScenario@24
_EtwWriteString@28
_EtwWriteTransfer@28
_EtwpAccessCheck@12
_EtwpAccessCheckFromState@12
_EtwpAcquireTokenAccessInformation@4
_EtwpAddBinaryInfoEvents@16
_EtwpAddDataSource@4
_EtwpAddDebugInfoEvents@20
_EtwpAddEventToBuffer@28
_EtwpAddGuidEntry@12
_EtwpAddKmRegEntry@20
_EtwpAddLastDroppedEvent@12
_EtwpAddLogHeader@8
_EtwpAddMicroarchitecturalPmcToPmcGroup@8
_EtwpAddMicroarchitecturalPmcToRegistry@8
_EtwpAddNotificationEvent@8
_EtwpAddRegEntryToGroup@20
_EtwpAddReplyIndex@8
_EtwpAddUmRegEntry@24
_EtwpAdjustFreeBuffers@4
_EtwpAdjustSiloTraceBuffers@4
_EtwpAdjustTraceBuffers@4
_EtwpAllocDataBlock@12
_EtwpAllocGuidEntry@8
_EtwpAllocateEventNameFilter@8
_EtwpAllocateFilter@16
_EtwpAllocateFreeBuffers@8
_EtwpAllocateKeyNameEntry@8
_EtwpAllocateLbrData@4
_EtwpAllocatePartitionMemory@8
_EtwpAllocatePayloadFilterData@12
_EtwpAllocatePmcData@4
_EtwpAllocateStringFilterData@8
_EtwpAllocateTraceBuffer@8
_EtwpAllocateTraceBufferPool@4
_EtwpApplyContainerFilter@8
_EtwpApplyEventIdPayloadFilter@36
_EtwpApplyEventIdPayloadFilterOnUserEvent@24
_EtwpApplyEventNameFilter@40
_EtwpApplyExeFilter@8
_EtwpApplyLevelKwFilter@20
_EtwpApplyPackageIdFilter@12
_EtwpApplyPayloadFilterInternal@28
_EtwpApplyScopeFilters@20
_EtwpApplyStackWalkFilterOnUserEvent@12
_EtwpApplyStackWalkIdFilter@16
_EtwpApplyTransientFilters@20
_EtwpAvlCompareKeyNames@12
_EtwpBufferQueueRemoveAfter@8
_EtwpBufferingModeCompressionFlush@4
_EtwpBufferingModeFlush@4
_EtwpBuffersFlushRequired@4
_EtwpBugCheckMultiPartCallback@16
_EtwpBuildMdlForTraceBuffer@12
_EtwpBuildNotificationPacket@16
_EtwpBuildProcessEvent@44
_EtwpCCSwapDeleteProcessor@4
_EtwpCCSwapFlush@8
_EtwpCCSwapInitializeProcessor@4
_EtwpCCSwapStart@4
_EtwpCCSwapStop@8
_EtwpCalculateUpdateNotification@32
_EtwpCancelMemoryPreservation@4
_EtwpCancelPendingStackwalkApcs@4
_EtwpCancelStackWalkApc@4
_EtwpCancelTraceImageUnloadApc@4
_EtwpCapturePreviousRegistryData@4
_EtwpCaptureRegistryData@12
_EtwpCaptureString@8
_EtwpCheckCurrentUserProcessAccess@4
_EtwpCheckDebugInfoEqual@8
_EtwpCheckForPoolTagFilterExtension@12
_EtwpCheckForStackTracingExtension@8
_EtwpCheckGuidAccess@12
_EtwpCheckGuidAccessAndDoRundown@24
_EtwpCheckLoggerAccessAndDoRundown@16
_EtwpCheckLoggerControlAccess@8
_EtwpCheckNotificationAccess@8
_EtwpCheckPoolTagFilters@8
_EtwpCheckProviderLoggingAccess@12
_EtwpCheckSecurityLoggerAccess@4
_EtwpCheckSiloGroupMasks@4
_EtwpCheckSystemTraceAccess@8
_EtwpCleanupSiloState@4
_EtwpClearPartitionContext@4
_EtwpClearSessionAndUnreferenceEntry@12
_EtwpClockSourceRunDown@8
_EtwpCloseLogger@12
_EtwpCloseRealTimeConnectionObject@16
_EtwpCloseRegistrationObject@16
_EtwpCompareGuid
_EtwpComparePfn
_EtwpCompleteBuffer@12
_EtwpCompressBuffer@8
_EtwpCompressPendingBuffers@4
_EtwpCompressionDpc@16
_EtwpCompressionProc@4
_EtwpComputeRegEntryEnableInfo@8
_EtwpConstructIptData@4
_EtwpContainerResumeWnfCallback@24
_EtwpCopyEventData@16
_EtwpCopyJobGuidSafe@8
_EtwpCopyJobIdSafe@8
_EtwpCopySchematizedFilters@12
_EtwpCovSampAcquireSamplerRundown@4
_EtwpCovSampAlloc@8
_EtwpCovSampApplyBounds@16
_EtwpCovSampCalculateModuleId@24
_EtwpCovSampCaptureAllocateApc@8
_EtwpCovSampCaptureAllocateCaptureBuffer@8
_EtwpCovSampCaptureAllocateSampleBuffer@8
_EtwpCovSampCaptureApc@20
_EtwpCovSampCaptureApcRelease@4
_EtwpCovSampCaptureApcRundown@4
_EtwpCovSampCaptureBufferAddIP@8
_EtwpCovSampCaptureBufferGet@4
_EtwpCovSampCaptureBufferIsEmpty@4
_EtwpCovSampCaptureBufferMapAddressesAndQueue@8
_EtwpCovSampCaptureBufferOptimizeIP@4
_EtwpCovSampCaptureBufferProcess@8
_EtwpCovSampCaptureBufferQueue@8
_EtwpCovSampCaptureBufferRelease@8
_EtwpCovSampCaptureCancelApcs@4
_EtwpCovSampCaptureCleanupDpc@16
_EtwpCovSampCaptureCleanupLookasides@4
_EtwpCovSampCaptureContextSetPaused@12
_EtwpCovSampCaptureContextStart@4
_EtwpCovSampCaptureContextStop@4
_EtwpCovSampCaptureFlush@4
_EtwpCovSampCaptureFlushSampleBuffers@4
_EtwpCovSampCaptureFlushStats@8
_EtwpCovSampCaptureFreeLookasides@8
_EtwpCovSampCaptureKernelStack@8
_EtwpCovSampCaptureQueueApc@4
_EtwpCovSampCaptureQueueBuffer@8
_EtwpCovSampCaptureQueueDpc@16
_EtwpCovSampCaptureQueueRebalance@4
_EtwpCovSampCaptureRebalanceDpc@16
_EtwpCovSampCaptureReleaseToLookaside@12
_EtwpCovSampCaptureSample@8
_EtwpCovSampCaptureUserAddresses@8
_EtwpCovSampCaptureUserStack@4
_EtwpCovSampCaptureWorkerThread@4
_EtwpCovSampCheckForSegments@12
_EtwpCovSampContextAddAddresses@16
_EtwpCovSampContextAddSamples@12
_EtwpCovSampContextCleanup@4
_EtwpCovSampContextFastFindModule@12
_EtwpCovSampContextGetModule@24
_EtwpCovSampContextInitialize@4
_EtwpCovSampContextPruneModules@4
_EtwpCovSampContextRemoveAndFreeModule@8
_EtwpCovSampEnumerateDriver@8
_EtwpCovSampEnumerateProcess@8
_EtwpCovSampFree@8
_EtwpCovSampHashLookup@16
_EtwpCovSampHashLookupInTable@12
_EtwpCovSampHashMakeRoomAndAcquireLock@12
_EtwpCovSampImageNotify@12
_EtwpCovSampLookasideControlInitialize@20
_EtwpCovSampLookasideFlushFreeListToCleanupList@4
_EtwpCovSampLookasideGrow@8
_EtwpCovSampLookasideInitialize@12
_EtwpCovSampLookasidePop@8
_EtwpCovSampModuleCleanup@4
_EtwpCovSampModuleDereference@8
_EtwpCovSampModuleGetName@12
_EtwpCovSampModuleNameInfoCleanup@4
_EtwpCovSampModuleReference@8
_EtwpCovSampProcessAddModule@16
_EtwpCovSampProcessCleanup@8
_EtwpCovSampProcessEnsureContext@4
_EtwpCovSampProcessMapAddresses@28
_EtwpCovSampProcessRemoveModule@16
_EtwpCovSampProcessUpperBoundModule@8
_EtwpCovSampPushListSList@12
_EtwpCovSampSafeForUserAddressCapture@8
_EtwpCovSampSampleBufferProcess@8
_EtwpCovSampSampleBufferReserve@12
_EtwpCovSampSplitSegments@12
_EtwpCovSampStackHashCheck@16
_EtwpCovSampStackHashLookup@12
_EtwpCovSampStackHashTableAlloc@8
_EtwpCovSampStrideSamplerInitialize@12
_EtwpCovSampTryAcquireBufferLock@8
_EtwpCoverageAddToStringBuffer@12
_EtwpCoverageCheckCP@8
_EtwpCoverageEnsureContext@0
_EtwpCoverageEnsureStringBuffer@4
_EtwpCoverageEnsureUserModeView@4
_EtwpCoverageFlushPending@4
_EtwpCoverageFlushTimerCallback@8
_EtwpCoverageFlushWorkItemCallback@4
_EtwpCoverageFreeStringBuffers@8
_EtwpCoverageHighIrqlCPWorkItemCallback@4
_EtwpCoverageInitializeStringBuffer@8
_EtwpCoverageProvEnableCallback@36
_EtwpCoverageRecord@8
_EtwpCoverageRecordAtHighIrql@4
_EtwpCoverageReset@8
_EtwpCoverageResetCP@8
_EtwpCoverageResetTimerCallback@8
_EtwpCoverageResetWorkItemCallback@4
_EtwpCoverageSamplerAllocateTable@4
_EtwpCoverageSamplerCleanup@4
_EtwpCoverageSamplerClose@16
_EtwpCoverageSamplerContextSwap@4
_EtwpCoverageSamplerDelete@4
_EtwpCoverageSamplerFreeTable@4
_EtwpCoverageSamplerInitialize@4
_EtwpCoverageSamplerPageFault@12
_EtwpCoverageSamplerQuery@16
_EtwpCoverageSamplerQueryStatusInformation@4
_EtwpCoverageSamplerReadyThread@4
_EtwpCoverageSamplerSetBloomFilter@12
_EtwpCoverageSamplerStart@4
_EtwpCoverageSamplerStop@4
_EtwpCoverageSamplerUnloadImage@12
_EtwpCoverageUserIsAdmin@0
_EtwpCoverageValidateCP@8
_EtwpCreateActivityId@4
_EtwpCreateDirectoryFile@28
_EtwpCreateEventKey@4
_EtwpCreateKey@4
_EtwpCreateKeyTreeForPath@4
_EtwpCreateLogFile@8
_EtwpCreateNtFileName@12
_EtwpCreatePerfectHashFunction@16
_EtwpCreateUmReplyObject@12
_EtwpCrimsonProvEnableCallback@36
_EtwpCrimsonStackWalkApc@20
_EtwpDelayCreate@24
_EtwpDeleteRealTimeConnectionObject@4
_EtwpDeleteRegistrationObject@4
_EtwpDeleteSessionDemuxObject@4
_EtwpDemuxPrivateTraceHandle@12
_EtwpDequeueBuffer@8
_EtwpDequeueBufferPendingCompression@4
_EtwpDequeueBufferPendingCompressionFromQueue@12
_EtwpDequeueFreeBuffer@4
_EtwpDereferenceStackEntry@8
_EtwpDestructIptData@4
_EtwpDisableCompression@4
_EtwpDisableStackWalkApc@0
_EtwpDisableTraceProviders@8
_EtwpDisallowedGuidAddition@8
_EtwpDisallowedGuidRemoval@8
_EtwpDisassociateConsumer@8
_EtwpDiskProvTraceDisk@16
_EtwpEnableAutoLoggerProvider@24
_EtwpEnableDisableSpecialGuids@32
_EtwpEnableDisableUMGL@20
_EtwpEnableGuid@12
_EtwpEnableKeyProviders@20
_EtwpEnableStackCaching@12
_EtwpEnableTrace@84
_EtwpEnqueueAvailableBuffer@12
_EtwpEnumerateAddressSpace@12
_EtwpEnumerateAutologgerPath@12
_EtwpEnumerateKeyProviders@32
_EtwpEnumerateTraceGuids@12
_EtwpEnumerateWorkingSet@8
_EtwpEventNameFilterSearch@12
_EtwpEventTracingCounterSetCallback@12
_EtwpEventWriteDebugLookupFailed@28
_EtwpEventWriteEnableInfo@16
_EtwpEventWriteFull@72
_EtwpEventWriteGroupJoin@16
_EtwpEventWriteGuidEntry@16
_EtwpEventWriteProviderAccessCheckStatus@28
_EtwpEventWriteProviderEnabled@48
_EtwpEventWriteRegEntry@12
_EtwpEventWriteRegistrationStatus@24
_EtwpEventWriteTemplateAdmin@32
_EtwpEventWriteTemplateBackingFile@28
_EtwpEventWriteTemplateMaxFileSize@40
_EtwpEventWriteTemplateSessAndProv@28
_EtwpEventWriteTemplateSession@16
_EtwpEventWriteTemplateSessionEnd@36
_EtwpExecutiveResourceConfigRunDown@8
_EtwpExpandFileName@16
_EtwpFailLogging@48
_EtwpFileProvTrace@16
_EtwpFillPerfectHashTable@24
_EtwpFinalizeHeader@8
_EtwpFinalizePendingApc@8
_EtwpFindAndLockBufferForFlushing@12
_EtwpFindDebugId@16
_EtwpFindGuidEntryByGuid@12
_EtwpFindMatchingPmcRegistryGroup@20
_EtwpFindUserBufferSpace@16
_EtwpFlushActiveBuffers@8
_EtwpFlushBuffer@12
_EtwpFlushBufferToLogfile@8
_EtwpFlushBufferToRealtime@12
_EtwpFlushCoverage@0
_EtwpFlushTrace@8
_EtwpFreeCompression@4
_EtwpFreeEventNameFilter@4
_EtwpFreeFilterInfo@4
_EtwpFreeGuidEntry@4
_EtwpFreeKeyNameEntry@8
_EtwpFreeKeyNameList@4
_EtwpFreeLbrData@4
_EtwpFreeLoggerContext@4
_EtwpFreePartitionMemory@8
_EtwpFreePlaceholderList@4
_EtwpFreePmcData@4
_EtwpFreeSecurityDescriptor@4
_EtwpFreeStackCache@4
_EtwpFreeTraceBuffer@8
_EtwpFreeTraceBufferPool@4
_EtwpFreeUserBufferSpace@12
_EtwpGenerateFileName@12
_EtwpGetAutoLoggerEventNameFilter@20
_EtwpGetAutoLoggerLevelKwFilter@12
_EtwpGetAutoLoggerProviderFilter@44
_EtwpGetCompressionSettings@8
_EtwpGetCurrentSiloMaxLoggers@0
_EtwpGetDirectMappingCount@20
_EtwpGetDisallowList@16
_EtwpGetDurationSince@16
_EtwpGetEventNameFromEventMetadata@12
_EtwpGetFirstBuffer@4
_EtwpGetFlagExtension@8
_EtwpGetGuidSecurityDescriptor@8
_EtwpGetImageSize@8
_EtwpGetLoggerTimeStamp@4
_EtwpGetMaxTrackingEventBufferSize@4
_EtwpGetMicroarchitecturalPmcAffinity@8
_EtwpGetNextEventOffsetType@12
_EtwpGetNextGuidEntry@12
_EtwpGetPidDemuxList@8
_EtwpGetPlaceholderBuffer@4
_EtwpGetPmcCpuHierarchyRegistry@12
_EtwpGetPrivateSessionTraceHandle@12
_EtwpGetProcessStartKey@4
_EtwpGetPsmKeyExtendedHeaderItem@4
_EtwpGetSchematizedFilterSize@8
_EtwpGetScsiPassThroughCdb@4
_EtwpGetSecurityDescriptorByGuid@8
_EtwpGetSidExtendedHeaderItem@4
_EtwpGetSoftRestartInformation@12
_EtwpGetStackExtendedHeaderItem@24
_EtwpGetStackLookasideListEntry@0
_EtwpGetSystemMaximumBufferCount@4
_EtwpGetTimeStampAndQpcDelta@12
_EtwpGetTraceGroupInfo@16
_EtwpGetTraceGroupList@12
_EtwpGetTraceGuidInfo@16
_EtwpGetTraceGuidList@12
_EtwpGetTrackingLockSlotForThread@8
_EtwpIncrementTraceFile@8
_EtwpInitLoggerContext@8
_EtwpInitialize@12
_EtwpInitializeActivityIdSeed@8
_EtwpInitializeAutoLoggers@4
_EtwpInitializeBufferHeader@8
_EtwpInitializeCompressedWriter@12
_EtwpInitializeCompression@4
_EtwpInitializeCoverage@0
_EtwpInitializeCoverageSampler@0
_EtwpInitializeLastBranchTracing@0
_EtwpInitializeLoggerSecurityDescriptor@8
_EtwpInitializePrivateSessionDemuxObject@0
_EtwpInitializeProcessorTrace@0
_EtwpInitializeProviderInfoBuffer@12
_EtwpInitializeProviderTraits@0
_EtwpInitializeRealTimeConnection@0
_EtwpInitializeRegistration@0
_EtwpInitializeSecurity@0
_EtwpInitializeSiloAllowedGroupMask@0
_EtwpInitializeSiloState@8
_EtwpInitializeStackLookasideList@0
_EtwpInitializeStackTracing@4
_EtwpInitializeTimeStamp@4
_EtwpInsertQueueDpc@4
_EtwpInvokeEventCallback@16
_EtwpIsEventNameFilterEnabled@24
_EtwpIsExecutingInArbitraryThreadContext@0
_EtwpIsGuidAllowed@8
_EtwpIsProcessZombie@4
_EtwpIsRealtimeLogfileSpaceAvailable@4
_EtwpIsRegEntryAllowed@28
_EtwpIsSoftRestartSupported@0
_EtwpIsSpecialGuidEnabledOnDifferentLogger@12
_EtwpIsValidImageAddress@20
_EtwpKernelProvEnableCallback@36
_EtwpKernelTraceRundown@24
_EtwpKsrCallback@12
_EtwpKsrMemoryEnumCallback@16
_EtwpLevelKeywordEnabled@16
_EtwpLoadMicroarchitecturalPmcs@0
_EtwpLoadMicroarchitecturalProfileGroup@8
_EtwpLoadMicroarchitecturalProfileSource@12
_EtwpLocateBinaryForRegEntry@12
_EtwpLocateDbgIdForRegEntry@16
_EtwpLockBufferList@8
_EtwpLockUnlockBufferList@4
_EtwpLogAlwaysPresentRundown@8
_EtwpLogContextSwapEvent@12
_EtwpLogFileNameRundown@8
_EtwpLogGroupMask@16
_EtwpLogKernelEvent@24
_EtwpLogKernelTraceRundown@24
_EtwpLogMemInfo@8
_EtwpLogMemInfoRundown@4
_EtwpLogMemInfoTimerCallback@8
_EtwpLogMemInfoWs@8
_EtwpLogMemInfoWsHelper@8
_EtwpLogMemNodeInfo@0
_EtwpLogPmcCounterRundown@8
_EtwpLogProcessPerfCtrs@4
_EtwpLogRefSetAutoMark@8
_EtwpLogRegistryEvent@28
_EtwpLogSessionWorkingSetInfo@4
_EtwpLogSystemEventUnsafe@32
_EtwpLogTxREvent@28
_EtwpLogger@4
_EtwpLoggerDpc@16
_EtwpLookupLoggerIdByName@12
_EtwpMapEnableFlags@8
_EtwpMdlHashTableAllocator@8
_EtwpMdlHashTableDeallocator@8
_EtwpNetProvTraceNetwork@8
_EtwpNotifyGuid@12
_EtwpObjectHandleEnumCallback@16
_EtwpObjectHandleRundown@8
_EtwpObjectTypeRundown@8
_EtwpOpenConsumer@4
_EtwpOpenLogger@16
_EtwpOpenRealTimeConnectionObject@24
_EtwpOpenRegistrationObject@24
_EtwpOpenSessionDemuxObject@24
_EtwpParsePoolTagFilter@8
_EtwpPerfMemInfoWork@4
_EtwpPerfectHashFunctionSearch@8
_EtwpPoolRunDown@8
_EtwpPowerStateCallback@12
_EtwpPreInitializeSiloState@8
_EtwpPrepareHeader@12
_EtwpPrepareWmitraceLoggerInfo@4
_EtwpPreserveLogger@4
_EtwpPreserveMdlList@16
_EtwpProcessEnumCallback@8
_EtwpProcessPerfCtrsRundown@8
_EtwpProcessThreadImageRundown@20
_EtwpProcessorRundown@8
_EtwpProviderArrivalCallback@12
_EtwpPsProvCaptureState@12
_EtwpPsProvProcessEnumCallback@8
_EtwpPsProvTraceImage@16
_EtwpPsProvTraceJob@12
_EtwpPsProvTracePriority@16
_EtwpPsProvTraceProcess@20
_EtwpPsProvTraceThread@12
_EtwpQueryCoverageSamplerInformation@16
_EtwpQueryMaximumFileSize@4
_EtwpQueryPartitionRegistryInformation@24
_EtwpQueryPersistedMemory@20
_EtwpQueryProcessCommandLine@8
_EtwpQueryProcessOtherInfo@8
_EtwpQueryPsmKey@12
_EtwpQueryReferenceTime@12
_EtwpQueryRegistryCallback@24
_EtwpQuerySessionDemuxObject@8
_EtwpQueryTokenPackageInfo@12
_EtwpQueryTrace@8
_EtwpQueryUsedProcessorCount@4
_EtwpQueueNotification@12
_EtwpQueuePerfMemInfoWorkItem@4
_EtwpQueueReply@8
_EtwpQueueStackWalkApc@16
_EtwpQueueStackWalkDpc@12
_EtwpReadConfigParameters@0
_EtwpRealtimeConnect@4
_EtwpRealtimeCreateLogfile@4
_EtwpRealtimeDeliverBuffer@8
_EtwpRealtimeDisconnectAllConsumers@4
_EtwpRealtimeDisconnectConsumer@4
_EtwpRealtimeDisconnectConsumerByHandle@4
_EtwpRealtimeFlushSavedBuffers@4
_EtwpRealtimeInjectEtwBuffer@12
_EtwpRealtimeNotifyConsumers@4
_EtwpRealtimeResetReferenceTime@4
_EtwpRealtimeRestoreBuffer@8
_EtwpRealtimeRestoreState@4
_EtwpRealtimeSaveBuffer@8
_EtwpRealtimeSaveState@4
_EtwpRealtimeSendEmptyMarker@4
_EtwpRealtimeUpdateConsumers@4
_EtwpRealtimeUpdateReferenceTime@8
_EtwpRealtimeZeroTruncateLogfile@4
_EtwpReceiveNotification@16
_EtwpReceiveReplyDataBlock@12
_EtwpReenableCompression@4
_EtwpReenableStackWalkApc@4
_EtwpReferenceGuidEntry@4
_EtwpReferenceLastBranchLookasideList@0
_EtwpReferenceLoggerSecurityDescriptor@4
_EtwpReferenceStackLookasideList@0
_EtwpRegTraceCallback@12
_EtwpRegTraceEnableCallback@36
_EtwpRegisterPartitionPages@12
_EtwpRegisterPrivateSession@16
_EtwpRegisterProvider@28
_EtwpRegisterSecurityProvider@4
_EtwpRegisterUMGuid@20
_EtwpReleaseProviderTraitsReference@4
_EtwpReleaseQueueEntry@8
_EtwpReleaseTraceBuffer@4
_EtwpRelinquishCompressionTarget@4
_EtwpRemoveMicroarchitecturalPmcFromPmcGroup@12
_EtwpRemoveMicroarchitecturalPmcFromRegistry@12
_EtwpRequestFlushTimer@8
_EtwpReserveWithPebsIndex@24
_EtwpReserveWithPmcCounters@24
_EtwpResetFlushTimer@8
_EtwpRotateCompressionTarget@4
_EtwpRotateCompressionTargetIfNeeded@4
_EtwpRundownNotifications@8
_EtwpSampledProfileRunDown@12
_EtwpSavePersistedLogger@12
_EtwpSavePersistedLoggers@0
_EtwpSavePersistedLoggersWorker@0
_EtwpSendBufferToDebugger@4
_EtwpSendDataBlock@8
_EtwpSendDbgId@4
_EtwpSendReplyDataBlock@4
_EtwpSendSessionNotification@12
_EtwpSendTraceEvent@8
_EtwpSetCompressionSettings@4
_EtwpSetCoverageSamplerInformation@12
_EtwpSetMark@20
_EtwpSetPartitionContext@8
_EtwpSetPmcProfileSource@8
_EtwpSetProviderBinaryTracking@12
_EtwpSetProviderTraitsKm@12
_EtwpSetProviderTraitsUm@12
_EtwpSetQpcDeltaTracking@4
_EtwpSetSoftRestartInformation@8
_EtwpShutdownConsumers@4
_EtwpSpinLockConfigRunDown@8
_EtwpStackRundown@12
_EtwpStackTraceDispatcher@16
_EtwpStackWalkApc@20
_EtwpStackWalkDpc@16
_EtwpStartLogger@8
_EtwpStartLoggerThread@8
_EtwpStartTrace@8
_EtwpStopLoggerInstance@4
_EtwpStopTrace@12
_EtwpSwitchBuffer@20
_EtwpSynchronizationDpc@16
_EtwpSynchronizeWithLogger@8
_EtwpSysModuleRunDown@8
_EtwpSystemImageEnumCallback@8
_EtwpSystemTraceWdf@20
_EtwpThreadEnumCallback@12
_EtwpThreadRundownApc@20
_EtwpTiAllocVadQueryEventWriteWorkItemContext@32
_EtwpTiAsyncVadQueryEventWrite@28
_EtwpTiFillProcessIdentity@12
_EtwpTiFillThreadIdentity@8
_EtwpTiFillVad@8
_EtwpTiFillVadEventWrite@28
_EtwpTiFillZeroVad@4
_EtwpTiParseContextRecord@12
_EtwpTiQueryCodeIntegrityOptions@4
_EtwpTiQueryVad@20
_EtwpTiVadQueryEventWrite@32
_EtwpTiVadQueryEventWriteCallback@4
_EtwpTimLogMitigationForProcess@16
_EtwpTimeProfileStart@0
_EtwpTraceCachedStack@16
_EtwpTraceDebugPrint@12
_EtwpTraceFileIo@24
_EtwpTraceFileName@24
_EtwpTraceFltIo@16
_EtwpTraceFltTimedIo@20
_EtwpTraceHandle@16
_EtwpTraceImageRundown@28
_EtwpTraceImageUnload@40
_EtwpTraceImageUnloadApc@12
_EtwpTraceImageUnloadApcStub@20
_EtwpTraceIo@12
_EtwpTraceIoInit@4
_EtwpTraceKernelEventWithFilter@20
_EtwpTraceLastBranchRecord@16
_EtwpTraceLoggingProvEnableCallback@36
_EtwpTraceLostEvent@32
_EtwpTraceLostSystemEvent@12
_EtwpTraceLostWppEvent@16
_EtwpTraceMessageVa@28
_EtwpTraceNetwork@16
_EtwpTraceOpticalIo@20
_EtwpTraceOpticalIoInit@4
_EtwpTraceProcessRundown@16
_EtwpTraceProcessorTrace@16
_EtwpTraceRedirectedIo@8
_EtwpTraceRegistry@24
_EtwpTraceRegistryTransaction@24
_EtwpTraceSavePersistedLoggerStop@24
_EtwpTraceSplitIo@12
_EtwpTraceStackKey@24
_EtwpTraceStackWalk@16
_EtwpTraceSystemInitialization@0
_EtwpTraceSystemShutdown@0
_EtwpTraceThreadRundown@8
_EtwpTraceThreadRundownWithStack@8
_EtwpTraceWdf@20
_EtwpTracingProvEnableCallback@36
_EtwpTrackBinaryForSession@12
_EtwpTrackDebugIdForSession@12
_EtwpTrackDecodeGuidForSession@8
_EtwpTrackGuidEntryRegistrations@12
_EtwpTrackProviderBinary@8
_EtwpTrackProviderRegistration@4
_EtwpTransitionToRealtime@8
_EtwpUMGLEnabled@8
_EtwpUnlockBufferList@8
_EtwpUnreferenceDataBlock@4
_EtwpUnreferenceGuidEntry@4
_EtwpUnregisterPartitionPages@8
_EtwpUpdateDisallowList@16
_EtwpUpdateDisallowedGuids@28
_EtwpUpdateEnableMask@20
_EtwpUpdateEventsLostCount@4
_EtwpUpdateFileHeader@8
_EtwpUpdateFileInfoDriverRegistration@4
_EtwpUpdateFileInfoDriverState@20
_EtwpUpdateFilterData@20
_EtwpUpdateGlobalGroupMasks@12
_EtwpUpdateGroupMasks@8
_EtwpUpdateGuidEnableInfo@24
_EtwpUpdateKernelGroupsWork@4
_EtwpUpdateLastBranchTracingConfiguration@8
_EtwpUpdateLastBranchTracingEvents@12
_EtwpUpdateLevelKwFilter@12
_EtwpUpdateLoggerGroupMasks@8
_EtwpUpdateLoggerSecurityDescriptor@8
_EtwpUpdatePerProcessTracing@16
_EtwpUpdatePeriodicCaptureState@16
_EtwpUpdatePidFilterData@12
_EtwpUpdatePmcCounters@12
_EtwpUpdatePmcEvents@12
_EtwpUpdateProcessTracingCallback@8
_EtwpUpdateProcessorTraceConfiguration@8
_EtwpUpdateProcessorTraceEvents@12
_EtwpUpdateSchematizedFilterData@16
_EtwpUpdateStackTracing@12
_EtwpUpdateStringFilterData@12
_EtwpUpdateTagFilter@12
_EtwpUpdateTrace@8
_EtwpUseDescriptorTypeKm@8
_EtwpUseDescriptorTypeUm@4
_EtwpUserInAdminOrLogUsersGroup@0
_EtwpValidateEnableNotification@24
_EtwpValidateFilterDescriptors@8
_EtwpValidateFlagExtension@4
_EtwpValidatePayloadFilter@12
_EtwpValidateTraceControlFilterDescriptors@16
_EtwpValidateUserModeLoggerInfo@12
_EtwpWaitForBufferReferenceCount@4
_EtwpWriteBufferCompressed@8
_EtwpWriteProcessorTrace@16
_EtwpWriteRemainingCompressedData@12
_EtwpWriteUserEvent@72
_ExAcquireCacheAwarePushLockExclusive@4
_ExAcquireFastResourceExclusive@12
_ExAcquireFastResourceShared@12
_ExAcquireFastResourceSharedStarveExclusive@12
_ExAcquireResourceExclusiveLite@8
_ExAcquireResourceSharedLite@8
_ExAcquireSharedStarveExclusive@8
_ExAcquireSharedWaitForExclusive@8
_ExAcquireSpinLockExclusive@4
_ExAcquireSpinLockExclusiveAtDpcLevel@4
_ExAcquireSpinLockShared@4
_ExAcquireSpinLockSharedAtDpcLevel@4
_ExAcquireTimeRefreshLock@4
_ExAddPrivateDataToCrashDump@8
_ExAdjustLookasideDepth@0
_ExAllocateAutoExpandPushLock@4
_ExAllocateCacheAwarePushLock@4
_ExAllocateCacheAwareRundownProtection@8
_ExAllocateCallBack@8
_ExAllocateContiguousHeapPool@20
_ExAllocateFromNPagedLookasideList@4
_ExAllocateFromPagedLookasideList@4
_ExAllocateHeapPages@8
_ExAllocateHeapPool@20
_ExAllocateHeapSpecialPool@12
_ExAllocateLocallyUniqueId@4
_ExAllocatePool2@16
_ExAllocatePool3@24
_ExAllocatePool@8
_ExAllocatePoolEx@16
_ExAllocatePoolMm@20
_ExAllocatePoolSanityChecks@16
_ExAllocatePoolWithQuota@8
_ExAllocatePoolWithQuotaTag@12
_ExAllocatePoolWithTag@12
_ExAllocatePoolWithTagPriority@16
_ExAllocatePrivateWorkerPool@12
_ExAllocateTimer@12
_ExAllocateTimerInternal2@16
_ExAllocateTimerInternal@12
_ExAreApcsDisabledForThread@8
_ExBurnMemory@16
_ExCallCallBack@12
_ExCallSessionCallBack@16
_ExCancelTimer@8
_ExCheckFullProcessInformationAccess@4
_ExCheckSingleFilter@8
_ExCheckValidIRTimerId@8
_ExCleanTimerResolutionRequest@0
_ExCleanupAutoExpandPushLock@4
_ExCleanupRundownProtectionCacheAware@4
_ExCleanupSessionHeapManager@0
_ExClearPoolFlags@4
_ExCompareExchangeCallBack@12
_ExComputeTickCountMultiplier@4
_ExConvertExclusiveToSharedLite@4
_ExConvertFastResourceExclusiveToShared@8
_ExConvertPushLockExclusiveToShared@4
_ExCopyWakeTimerInfo@8
_ExCovAddInfoToLoaderEntry@4
_ExCpuSetResourceManagerAccessCheck@4
_ExCreateCallback@16
_ExCreateHandle@8
_ExCreateHandleEx@20
_ExCreateHandleTable@8
_ExCreateHeap@16
_ExCreatePoolTagTable@8
_ExDeleteFastResource@4
_ExDeleteLookasideListEx@4
_ExDeleteNPagedLookasideList@4
_ExDeletePagedLookasideList@4
_ExDeletePoolTagTable@4
_ExDeleteResourceLite@4
_ExDeleteTimer@16
_ExDeleteWakeTimerInfo@4
_ExDereferenceCallBackBlock@8
_ExDereferenceHandleDebugInfo@8
_ExDestroyHandle@12
_ExDisableAllLookasideLists@0
_ExDisableHandleTracing@4
_ExDisableResourceBoostLite@4
_ExDisownFastResource@8
_ExDupHandleTable@20
_ExEnableHandleExceptions@8
_ExEnableHandleTracing@8
_ExEnableRaiseUMExceptionOnInvalidHandleClose@8
_ExEnterCriticalRegionAndAcquireResourceExclusive@4
_ExEnterCriticalRegionAndAcquireResourceShared@4
_ExEnterCriticalRegionAndAcquireSharedWaitForExclusive@4
_ExEnterPriorityRegionAndAcquireResourceExclusive@4
_ExEnterPriorityRegionAndAcquireResourceShared@4
_ExEnumHandleTable@16
_ExEnumerateSystemFirmwareTables@16
_ExExtendZone@12
_ExFastReferenceHandleTableEntry@12
_ExFastReplenishHandleTableEntry@12
_ExFlushLookasideListEx@4
_ExFlushTb@12
_ExFreeAutoExpandPushLock@4
_ExFreeCacheAwarePushLock@4
_ExFreeCacheAwareRundownProtection@4
_ExFreeCallBack@4
_ExFreeHeapPool@4
_ExFreePool@4
_ExFreePoolEx@8
_ExFreePoolSanityChecks@4
_ExFreePoolWithTag@8
_ExFreeSvmAsid@0
_ExFreeToNPagedLookasideList@8
_ExFreeToPagedLookasideList@8
_ExGenRandom@4
_ExGetAttachedSessionPoolTagInfo@16
_ExGetBigPoolInfo@16
_ExGetCurrentProcessorCounts@12
_ExGetCurrentProcessorCpuUsage@4
_ExGetExclusiveWaiterCount@4
_ExGetExpirationDate@4
_ExGetExtensionTable@4
_ExGetFirmwareEnvironmentVariable@20
_ExGetFirmwareType@0
_ExGetHandleAttributes@8
_ExGetHeapFromType@12
_ExGetHeapFromVA@4
_ExGetLicenseTamperState@4
_ExGetNextProcess@8
_ExGetNextWakeTime@28
_ExGetNextWakeTimeForDeepSleep@0
_ExGetPoolTagInfo@12
_ExGetPreviousMode@0
_ExGetSessionBigPoolInformation@16
_ExGetSessionPoolTagInfo@16
_ExGetSessionPoolTagInformation@16
_ExGetSharedWaiterCount@4
_ExGetSuiteMask@8
_ExGetSystemFirmwareTable@20
_ExGetWakeTimerList@8
_ExHandleLogBadReference@12
_ExHandleTableQuery@12
_ExHeapLookasideRebalance@0
_ExHeapQueryPoolUsage@32
_ExInitLicenseCallback@0
_ExInitPoolLookasidePointers@0
_ExInitSystem@0
_ExInitSystemPhase2@0
_ExInitializeAutoExpandPushLock@8
_ExInitializeCallBack@4
_ExInitializeExternalBootSupport@0
_ExInitializeFastOwnerEntry@4
_ExInitializeFastResource@8
_ExInitializeHandleTablePackage@0
_ExInitializeLeapSecondData@0
_ExInitializeLookasideListEx@32
_ExInitializeLookasideListExInternal@36
_ExInitializeNPagedLookasideList@28
_ExInitializeNPagedLookasideListInternal@32
_ExInitializeNls@0
_ExInitializePagedHeaps@0
_ExInitializePagedLookasideList@28
_ExInitializePagedLookasideListInternal@32
_ExInitializePoolHeapManagement@4
_ExInitializePoolTracker@0
_ExInitializeProcessor@8
_ExInitializePushLock@4
_ExInitializeResourceLite@4
_ExInitializeRundownProtectionCacheAware@8
_ExInitializeRundownProtectionCacheAwareEx@8
_ExInitializeSessionHeapManager@8
_ExInitializeSessionPoolTrackTable@0
_ExInitializeSystemLookasideList@24
_ExInitializeTimeRefresh@0
_ExInitializeUtcTimeZoneBias@4
_ExInitializeZone@16
_ExInsertPoolTag@20
_ExInterlockedAddLargeInteger@16
_ExInterlockedDecrementLong@8
_ExInterlockedExchangeUlong@12
_ExInterlockedExtendZone@16
_ExInterlockedIncrementLong@8
_ExIsFastResourceContended@4
_ExIsFastResourceHeld@4
_ExIsFastResourceHeldExclusive@4
_ExIsManufacturingModeEnabled@0
_ExIsMultiSessionSku@4
_ExIsProcessorFeaturePresent@4
_ExIsResourceAcquiredExclusiveLite@4
_ExIsResourceAcquiredSharedLite@4
_ExIsRestrictedCaller@4
_ExIsSoftBoot@0
_ExIsSpecialPoolAddress@4
_ExLocalTimeToSystemTime@8
_ExLockHandleTableEntry@8
_ExLockUserBuffer@24
_ExLogTimeZoneInformation@0
_ExMapHandleToPointer@8
_ExMapHandleToPointerEx@12
_ExNotifyBootDeviceRemoval@4
_ExNotifyCallback@12
_ExNotifyPlatformBinaryExecuted@0
_ExNotifyWithProcessing@16
_ExPoolCleanupExpansionTable@8
_ExProcessCounterSetCallback@12
_ExProcessorCounterSetCallback@12
_ExProtectPool@12
_ExProtectPoolEx@16
_ExQueryBootEntropyInformation@4
_ExQueryHandleExceptionsPermanency@12
_ExQueryPoolBlockSize@8
_ExQueryPoolUsage@32
_ExQueryProcessHandleInformation@16
_ExQuerySystemLockInformation@12
_ExQueryTimerResolution@12
_ExQueryWnfStateData@16
_ExQueueDebuggerWorker@0
_ExQueueWorkItem@8
_ExQueueWorkItemEx@12
_ExQueueWorkItemExFromIo@12
_ExQueueWorkItemFromIo@8
_ExQueueWorkItemToPartition@16
_ExQueueWorkItemToPrivatePool@16
_ExRaiseAccessViolation@0
_ExRaiseDatatypeMisalignment@0
_ExRaiseHardError@24
_ExRealTimeIsUniversal@0
_ExRecordOneTimerExpiry@16
_ExReferenceCallBackBlock@4
_ExReferenceHandleDebugInfo@4
_ExRegisterBootDevice@8
_ExRegisterCallback@12
_ExRegisterExtension@12
_ExRegisterHost@12
_ExReinitializeFastResource@4
_ExReinitializeResourceLite@4
_ExReleaseCacheAwarePushLockExclusive@4
_ExReleaseDisownedFastResource@8
_ExReleaseDisownedFastResourceExclusive@8
_ExReleaseDisownedFastResourceShared@8
_ExReleaseExtensionTable@4
_ExReleaseFastResource@8
_ExReleaseFastResourceExclusive@8
_ExReleaseFastResourceShared@8
_ExReleaseResourceForThreadLite@8
_ExReleaseSpinLockExclusive@8
_ExReleaseSpinLockExclusiveFromDpcLevel@4
_ExReleaseSpinLockShared@8
_ExReleaseSpinLockSharedFromDpcLevel@4
_ExReleaseTimeRefreshLock@0
_ExRemoveLowBoxAtomReferences@8
_ExRemovePoolTag@16
_ExRemoveVirtualizedTimer@12
_ExReturnPoolQuota@4
_ExRngInitializeSystem@0
_ExSaAllocate@12
_ExSaFree@8
_ExSetFirmwareEnvironmentVariable@20
_ExSetHandleAttributes@12
_ExSetLeapSecondEnabled@4
_ExSetLicenseTamperState@4
_ExSetPoolFlags@4
_ExSetResourceOwnerPointer@8
_ExSetResourceOwnerPointerEx@12
_ExSetTimer@24
_ExSetTimerResolution@8
_ExShareAddressSpaceWithDevice@8
_ExShutdownSystem@4
_ExSizeOfAutoExpandPushLock@4
_ExSizeOfRundownProtectionCacheAware@0
_ExSlowReplenishHandleTableEntry@4
_ExStartRecordingIRTimerExpiries@0
_ExStopRecordingIRTimerExpiries@0
_ExSubscribeWnfStateChange@24
_ExSvmBeginDeviceReset@8
_ExSvmDevicePowerCallback@12
_ExSvmFinalizeDeviceReset@4
_ExSwapinWorkerThreads@4
_ExSweepHandleTable@12
_ExSystemExceptionFilter@0
_ExSystemTimeToLocalTime@8
_ExTimerResume@12
_ExTimerRundown@0
_ExTraceTimerResolution@0
_ExTryAcquireSpinLockExclusiveAtDpcLevel@4
_ExTryAcquireSpinLockSharedAtDpcLevel@4
_ExTryConvertSharedSpinLockExclusive@4
_ExTryConvertSharedToExclusiveLite@4
_ExTryQueueWorkItem@8
_ExTryToAcquireResourceExclusiveLite@4
_ExTryToConvertFastResourceSharedToExclusive@8
_ExUnlockHandleTableEntry@8
_ExUnlockUserBuffer@4
_ExUnregisterCallback@4
_ExUnregisterExtension@4
_ExUnsubscribeWnfStateChange@4
_ExUpdateLicenseData@8
_ExUpdateOsPfnInRegistry@16
_ExUpdateSystemTimeFromCmos@8
_ExUuidCreate@4
_ExVerifySuite@4
_ExWaitForCallBacks@4
_ExWakeTimersPause@0
_ExWakeTimersResume@0
_ExWnfCleanupServerSiloState@4
_ExWnfExitProcess@8
_ExceptionRecord32To64@8
_ExpAcquireFastMutexContended@8
_ExpAcquireResourceExclusiveLite@8
_ExpAcquireResourceSharedLite@8
_ExpAcquireSharedStarveExclusive@8
_ExpAcquireSpinLockDisabled@4
_ExpAcquireSpinLockExclusive@8
_ExpAddCurrentThreadToThreadHistory@4
_ExpAddFastOwnerEntryToThreadList@16
_ExpAddResourceToSystemResourceList@4
_ExpAddTagForBigPages@24
_ExpAeMeasureContention@4
_ExpAeStartMeasurement@8
_ExpAeStopMeasurement@8
_ExpAeThresholdInitWorker@16
_ExpAeThresholdInitialization@0
_ExpAeUpdateStatsAfterMeasurement@12
_ExpAeUpdateStatsAfterSharedRelease@4
_ExpAeUpdateStatsForExclusiveRelease@4
_ExpAllocateAsid@0
_ExpAllocateFannedOutPushLock@8
_ExpAllocateHandleTable@8
_ExpAllocateHandleTableEntry@8
_ExpAllocateHandleTableEntrySlow@8
_ExpAllocateLowLevelTable@8
_ExpAllocateMidLevelTable@12
_ExpAllocateOwnerEntryForLegacyShim@0
_ExpAllocatePoolWithTagFromNode@20
_ExpAllocateStringRoutine@4
_ExpAllocateTablePagedPool@8
_ExpAllocateTablePagedPoolNoZero@8
_ExpAllocateUuids@12
_ExpApplyPrewaitBoost@4
_ExpApplyPriorityBoost@12
_ExpApplyRewaitBoost@4
_ExpAssignPasid@8
_ExpBigPoolGetTrackerEntry@20
_ExpBlockOnLockedHandleEntry@12
_ExpCalcAdjustedDueTime@36
_ExpCalcDueTimeWithDelay@8
_ExpCallProcessing@20
_ExpCancelTimer@4
_ExpCapabilityCheck@4
_ExpCaptureWnfStateName@12
_ExpCenturyDpcRoutine@16
_ExpCheckForFreedEnhancedTimer@4
_ExpCheckForLookaside@8
_ExpCheckForLookasideList@16
_ExpCheckForResource@8
_ExpCheckForWorker@8
_ExpCheckIRTimerAccess@8
_ExpCheckTestsigningEnabled@0
_ExpCheckThreadHistory@4
_ExpCheckWakeTimerAccess@4
_ExpCloseWorkerFactory@16
_ExpCloudbookHardwareIDProvider@24
_ExpCloudbookHardwareLockedProvider@24
_ExpCommitWaitForResourceShared@12
_ExpCommitWakeResourceExclusive@20
_ExpCommitWakeResourceShared@20
_ExpComputeCyclesPerYield@0
_ExpComputeLookasideDepth@12
_ExpConsumeAddonPolicySetCacheProvider@24
_ExpConvertArcName@24
_ExpConvertExclusiveToSharedLite@4
_ExpConvertFastResourceExclusiveToShared@8
_ExpConvertLdrEntryToModuleInfo@12
_ExpConvertSignatureName@24
_ExpCopyProcessInfo@16
_ExpCovCreateUnloadedModuleEntry@4
_ExpCovDeleteUnloadedModuleEntry@4
_ExpCovFreeUnloadedModuleEntry@4
_ExpCovGetSectionInfo@8
_ExpCovIsModulePresent@20
_ExpCovQueryInfoCallBack@8
_ExpCovQueryInformation@12
_ExpCovQueryLoadedModule@24
_ExpCovReadFriendlyName@12
_ExpCovReadRequestBuffer@16
_ExpCovResetInfoCallBack@8
_ExpCovResetInformation@8
_ExpCreateOutputARC@16
_ExpCreateOutputEFI@32
_ExpCreateOutputNT@16
_ExpCreateOutputSIGNATURE@32
_ExpCreateWorkerThread@8
_ExpCrossVmWnfPush@24
_ExpDebuggerDpcRoutine@16
_ExpDebuggerWorker@4
_ExpDeleteCallback@4
_ExpDeleteMutant@4
_ExpDeleteResource@4
_ExpDeleteSiloState@4
_ExpDeleteTimer2@4
_ExpDeleteTimer@4
_ExpDeleteWorkerFactory@4
_ExpDuplicateSingleHandle@28
_ExpEventInitialization@0
_ExpExTimerAttributesAreValid@4
_ExpExpandResourceOwnerTable@8
_ExpExpirationThread@4
_ExpFastResourceLegacyAcquireExclusive@8
_ExpFastResourceLegacyAcquireShared@8
_ExpFastResourceLegacyAcquireSharedStarveExclusive@8
_ExpFastResourceLegacyConvertExclusiveToShared@4
_ExpFastResourceLegacyIsAcquiredShared@4
_ExpFastResourceLegacyRelease@4
_ExpFinalizeTimerDeletion@4
_ExpFindArcName@8
_ExpFindDiskSignature@24
_ExpFindFastOwnerEntryForThread@16
_ExpFindHost@8
_ExpFirmwareAccessAppContainerCheck@4
_ExpFlushGeneralLookaside@8
_ExpFreeAsid@4
_ExpFreeFannedOutPushLock@4
_ExpFreeHandleTable@4
_ExpFreeHandleTableEntry@12
_ExpFreeHeapSpecialPool@8
_ExpFreeLowLevelTable@8
_ExpFreeOwnerEntry@4
_ExpFreePoolChecks@12
_ExpGenuinePolicyPostProcess@24
_ExpGetDeviceDataInformation@12
_ExpGetDriveGeometry@8
_ExpGetEntryBilledProcess@4
_ExpGetFirmwareEnvironmentVariable@24
_ExpGetGlobalLocaleSection@8
_ExpGetHandleExtraInfo@8
_ExpGetHandleInformation@12
_ExpGetHandleInformationEx@12
_ExpGetInstemulInformation@4
_ExpGetLeapSecondDataRegistryKeyHandle@4
_ExpGetLicenseTamperState@8
_ExpGetLockInformation@12
_ExpGetLookasideInformation@12
_ExpGetNextHandleTableEntry@12
_ExpGetNlsSystemCodePages@8
_ExpGetNonMatchingSuiteMask@4
_ExpGetNtProductTypeFromLicenseValue@4
_ExpGetNumberOfInitialSessionsFromRegistry@4
_ExpGetObjectInformation@12
_ExpGetPartitionTableInfo@8
_ExpGetPoolTagInfoTarget@16
_ExpGetProcessInformation@20
_ExpGetProductInfoSuiteTypeMap@8
_ExpGetStackTraceInformation@12
_ExpGetSystemBasicInformation@4
_ExpGetSystemFirmwareTableInformation@16
_ExpGetSystemFlushInformation@4
_ExpGetSystemPlatformBinary@12
_ExpGetSystemProcessorFeaturesInformation@4
_ExpGetSystemProcessorInformation@4
_ExpGetSystemWriteConstraintInformation@4
_ExpGetThreadResourceHint@4
_ExpHeapGCInitialization@0
_ExpHeapQueryPoolPages@16
_ExpHpCompactSessionPools@0
_ExpHpCompactionRoutine@4
_ExpHpGCTimerCallback@8
_ExpHpIsSpecialPoolHeap@4
_ExpInitBootEntropyInformation@12
_ExpInitExpCheckTestSigningInfo@12
_ExpInitFullProcessSecurityInfo@12
_ExpInitLicensing@4
_ExpInitSystemPhase0@0
_ExpInitSystemPhase1@0
_ExpInitializeAutoExpandPushLock@8
_ExpInitializeBootEnvironment@4
_ExpInitializeCallbacks@0
_ExpInitializePcw@0
_ExpInitializeResource@4
_ExpInitializeSessionDriver@8
_ExpInitializeSvm@0
_ExpInitializeThreadHistory@4
_ExpInsertLowLevelTableIntoFreeList@16
_ExpInsertPoolTrackerExpansion@12
_ExpInsertTimerResolutionEntry@4
_ExpIoPoolDeadlockWorker@4
_ExpIsBootEntry@8
_ExpIsDevicePathForRemovableMedia@4
_ExpIsDriverEntry@8
_ExpIsPoolReadyForWork@12
_ExpIsPoolTagPrintable@4
_ExpKdPullRemoteFileForUser@4
_ExpKernelExpirationDateCacheProvider@24
_ExpKeyedEventInitialization@0
_ExpLeapSecondDataRegistryNotifyHandler@4
_ExpLeaveWorkerFactoryAwayMode@4
_ExpLegacyWorkerInitialization@0
_ExpLicUpdateChecksum@12
_ExpLockResourceAtDpcLevel@8
_ExpLockThreadDisownedOwnerEntryListAtDpcLevel@8
_ExpLogRefreshTimeZoneInformationCutoverFail@16
_ExpLogRefreshTimeZoneInformationQueryFail@8
_ExpLogRefreshTimeZoneInformationSuccess@20
_ExpLookupHandleTableEntry@8
_ExpMutantInitialization@0
_ExpNewThreadNecessary@8
_ExpNextYearDpcRoutine@16
_ExpNlsDeleteSiloState@4
_ExpNlsInitSiloState@4
_ExpNodeCreateSystemThread@36
_ExpNodeHotAddProcessorWorker@4
_ExpNodeInitialize@4
_ExpNtDeleteWnfStateData@12
_ExpNtUpdateWnfStateData@32
_ExpOsProductCacheProviderHelper@28
_ExpOsProductContentIdCacheProvider@24
_ExpOsProductPfnCacheProvider@24
_ExpOwnerEntryToThread@4
_ExpParseAndUpdateLeapSecondData@8
_ExpParseArcPathName@20
_ExpParseEfiPath@16
_ExpParseSignatureName@32
_ExpParseSuiteMask@4
_ExpPartitionCreatePool@16
_ExpPartitionCreatePoolDelayed@12
_ExpPartitionCreatePoolInternal@20
_ExpPartitionCreateSystemThread@36
_ExpPartitionCreateThreadIfNecessary@12
_ExpPartitionDestroy@4
_ExpPartitionGetQueue@12
_ExpPartitionInitialize@4
_ExpPartitionStart@4
_ExpPcwDisabledStatus@0
_ExpPcwHostCallback@8
_ExpPoolFlagsToPoolType@24
_ExpPrepareNewSvmDevice@16
_ExpPrepareToWakeResourceExclusive@16
_ExpPrepareToWakeResourceShared@16
_ExpProfileCreate@44
_ExpProfileDelete@4
_ExpProfileInitialization@0
_ExpQueryChannelInformation@12
_ExpQueryCodeIntegrityCertificateInfo@8
_ExpQueryElamCertInfo@4
_ExpQueryInterruptSteeringInformation@20
_ExpQueryLegacyDriverInformation@8
_ExpQueryMemoryTopologyInformation@12
_ExpQueryModuleInformation@16
_ExpQueryModuleInformationEx@20
_ExpQueryNumaAvailableMemory@12
_ExpQueryNumaProcessorMap@12
_ExpQueryNumaProximityNode@12
_ExpQueryPortableWorkspaceEfiLauncherInformation@12
_ExpQueryProcessorInformationCounters@20
_ExpQueryRegistryRoutine@24
_ExpQuerySingleModuleInformation@16
_ExpQuerySystemInformation@24
_ExpQuerySystemPerformanceInformation@12
_ExpQueueWorkItem@20
_ExpQueueWorkItemNode@20
_ExpRaiseHardError@28
_ExpReadComPlusPackage@0
_ExpReadLeapSecondData@4
_ExpRecordShutdownTime@0
_ExpReducedLicenseData@0
_ExpRefreshSystemTime@0
_ExpRefreshTimeZoneInformation@0
_ExpRegisterFirmwareTableInformationHandler@12
_ExpReleaseDisownedFastResourceExclusive@8
_ExpReleaseDisownedFastResourceShared@8
_ExpReleaseFannedOutPushLockExclusive@4
_ExpReleaseFastMutexContended@8
_ExpReleaseFastResourceExclusive@8
_ExpReleaseFastResourceShared@8
_ExpRemoveCurrentThreadFromThreadHistory@4
_ExpRemoveFastOwnerEntryFromResourceList@4
_ExpRemoveFastOwnerEntryFromSublist@4
_ExpRemoveFastOwnerEntryFromThreadList@4
_ExpRemoveGeneralLookaside@8
_ExpRemoveHandleTable@4
_ExpRemovePoolTrackerExpansion@12
_ExpRemoveTagForBigPages@28
_ExpReplaceListEntry@8
_ExpResizeBigPageTable@12
_ExpResourceEnforcesOwnershipTransfer@4
_ExpResourceTimeoutCaptureLiveDump@4
_ExpRotateFastOwnerEntrySublistHead@12
_ExpSaAllocatorAllocate@12
_ExpSaAllocatorFree@16
_ExpSaAllocatorInitialize@8
_ExpSaAllocatorOptimizeList@4
_ExpSaBinaryArrayChunkAllocate@8
_ExpSaBinaryArrayInsert@12
_ExpSaBinaryArrayRemove@8
_ExpSaInitialize@0
_ExpSaPageGroupAllocateMemory@8
_ExpSaPageGroupDescriptorAllocate@8
_ExpSaPageGroupDescriptorFree@4
_ExpSaPageGroupFreeMemory@12
_ExpSafeWcslen@8
_ExpSafeWcslenUnaligned@8
_ExpScanGeneralLookasideList@8
_ExpScanSystemLookasideList@0
_ExpSeedHotTags@0
_ExpSemaphoreInitialization@0
_ExpSetBootEntry@12
_ExpSetBorrowedTimeOnTimestamp@8
_ExpSetDriverEntry@12
_ExpSetFirmwareEnvironmentVariable@24
_ExpSetHandleExtraInfo@12
_ExpSetLicenseTamperState@8
_ExpSetPendingUILanguage@0
_ExpSetProcessorMicrocodeUpdateInformation@12
_ExpSetResourceOwnerPointerEx@12
_ExpSetSoftRebootFlags@4
_ExpSetSwappingKernelApc@20
_ExpSetSystemTime@24
_ExpSetTimeZoneInformation@8
_ExpSetTimer2@16
_ExpSetTimer@40
_ExpSetTimerObject2@20
_ExpSetTimerObject@40
_ExpSetWorkerFactoryDeferredCreateTimer@4
_ExpShutdownWorkerFactory@4
_ExpSizeHeapPool@4
_ExpSnapShotHandleTables@20
_ExpStampBigPoolEntry@20
_ExpStampPoolEntryWithQuotaProcess@8
_ExpStampPoolWithQuotaProcess@24
_ExpStringCapture@8
_ExpStringFree@4
_ExpSvmDereferenceAsid@4
_ExpSvmDereferenceDevice@4
_ExpSvmDpcRoutine@16
_ExpSvmFaultRoutine@4
_ExpSvmReferenceAsid@4
_ExpSvmServicePageFault@12
_ExpSvmWorkerThread@4
_ExpSysInfoShouldSkipProcess@4
_ExpSystemErrorHandler@20
_ExpTimeRefreshCallback@8
_ExpTimeRefreshDpcRoutine@16
_ExpTimeRefreshWork@4
_ExpTimeZoneDpcRoutine@16
_ExpTimeZoneWork@4
_ExpTimerAdjust@32
_ExpTimerApcRoutine@20
_ExpTimerDpcRoutine@16
_ExpTimerInitialization@0
_ExpTimerPause@24
_ExpTimerResume@12
_ExpTimerSetParametersAreValid@4
_ExpTranslateArcPath@16
_ExpTranslateBootEntryNameToId@8
_ExpTranslateDriverEntryNameToId@8
_ExpTranslateEfiPath@16
_ExpTranslateHexStringToGUID@8
_ExpTranslateHexStringToULONG@8
_ExpTranslateHexStringToULONGLONG@8
_ExpTranslateNtPath@16
_ExpTranslateSymbolicLink@8
_ExpTryAcquireFannedOutPushLockExclusive@4
_ExpTryAcquireResourceExclusive@4
_ExpTryAcquireResourceShared@4
_ExpTryAcquireResourceSharedStarveExclusive@4
_ExpTryAcquireSpinLockShared@4
_ExpTryConvertSharedSpinLockExclusiveInstrumented@8
_ExpTryConvertSharedToExclusiveLite@4
_ExpTryEnterWorkerFactoryAwayMode@4
_ExpTryQueueWorkItem@16
_ExpTryToAcquireResourceExclusiveLite@4
_ExpUmdfSidCheck@0
_ExpUnicodeStringToNonpagedWStr@4
_ExpUnlockResourceAtDpcLevel@8
_ExpUnlockThreadDisownedOwnerEntryListAtDpcLevel@8
_ExpUpdateComPlusPackage@4
_ExpUpdateDebugInfo@16
_ExpUpdateProductSuiteTypeInRegistry@4
_ExpUpdateProductType@0
_ExpUpdateTimerConfiguration@12
_ExpUpdateTimerConfigurationWorker@8
_ExpUpdateTimerResolution@12
_ExpUuidGetValues@4
_ExpUuidLoadSequenceNumber@4
_ExpUuidSaveSequenceNumber@4
_ExpUuidSaveSequenceNumberIf@0
_ExpValidateLoader@4
_ExpValidateWorkItem@8
_ExpVerifyFilePath@8
_ExpVerifyWindowsOsOptions@8
_ExpWaitForBootDevices@4
_ExpWaitForSpinLockExclusiveAndAcquire@8
_ExpWaitForSpinLockSharedAndAcquire@8
_ExpWin32CloseProcedure@16
_ExpWin32DeleteProcedure@4
_ExpWin32Initialization@0
_ExpWin32OkayToCloseProcedure@16
_ExpWin32OpenProcedure@24
_ExpWin32ParseProcedure@40
_ExpWnfAcquireSubscriptionByName@16
_ExpWnfAcquireSubscriptionNameInstance@8
_ExpWnfAllocateDispatcher@0
_ExpWnfAllocateNextPersistentNameSequence@8
_ExpWnfAllocateScopeInstance@16
_ExpWnfAllocateScopeMap@4
_ExpWnfCaptureScopeInstanceId@20
_ExpWnfCheckCallerAccess@8
_ExpWnfCheckCrossScopeAccess@8
_ExpWnfCompleteThreadSubscriptions@24
_ExpWnfComposeValueName@12
_ExpWnfCreateNameInstance@24
_ExpWnfCreateProcessContext@8
_ExpWnfDeleteNameInstance@12
_ExpWnfDeleteNameInstanceCallback@8
_ExpWnfDeletePermanentName@8
_ExpWnfDeletePermanentStateData@12
_ExpWnfDeleteProcessContext@8
_ExpWnfDeleteScopeById@12
_ExpWnfDeleteScopeInstances@8
_ExpWnfDeleteStateData@4
_ExpWnfDeleteSubscription@8
_ExpWnfDeliverThreadNotifications@12
_ExpWnfDispatchKernelSubscription@0
_ExpWnfEnumeratePermanentDataStores@16
_ExpWnfEnumerateScopeInstances@8
_ExpWnfFindScopeInstance@12
_ExpWnfFindStateName@12
_ExpWnfFreeScopeInstance@8
_ExpWnfGenerateStateName@16
_ExpWnfGetCurrentScopeInstance@24
_ExpWnfGetNameStoreRegistryRoot@8
_ExpWnfGetPermanentDataStoreHandle@16
_ExpWnfGetPermanentDataStoreHandleByScopeId@28
_ExpWnfGetPermanentPerUserDataStoreHandle@8
_ExpWnfGetScopeInstanceIdSize@8
_ExpWnfInsertSubscriptionInPendingQueue@8
_ExpWnfLookupNameInstance@16
_ExpWnfLookupPermanentName@12
_ExpWnfNotifyNameSubscribers@16
_ExpWnfNotifySubscription@16
_ExpWnfPopulateStateData@4
_ExpWnfPopulateStateDataRemoteCallback@24
_ExpWnfQueryCurrentUserSID@20
_ExpWnfReadStateData@20
_ExpWnfRegisterPermanentName@12
_ExpWnfReleaseCapturedScopeInstanceId@12
_ExpWnfResolveScopeInstance@20
_ExpWnfSpecializeSecurityDescriptor@4
_ExpWnfStartKernelDispatcher@4
_ExpWnfSubscribeNameInstance@44
_ExpWnfSubscribeWnfStateChange@32
_ExpWnfUpdateSubscription@36
_ExpWnfValidatePubSubPreconditions@20
_ExpWnfWorkItemRoutine@4
_ExpWnfWriteStateData@20
_ExpWorkQueueCreateMinimumThreads@8
_ExpWorkQueueDestroy@4
_ExpWorkQueueInitialize@24
_ExpWorkQueueManagerDestroy@4
_ExpWorkQueueManagerInitialize@12
_ExpWorkQueueManagerReaperTimer@8
_ExpWorkQueueManagerStart@4
_ExpWorkQueueManagerThread@4
_ExpWorkerFactoryCheckCreate@12
_ExpWorkerFactoryCompletionPacketRoutine@8
_ExpWorkerFactoryCreateThread@4
_ExpWorkerFactoryDeferredThreadCreation@0
_ExpWorkerFactoryInitialization@0
_ExpWorkerFactoryManagerThread@4
_ExpWorkerFactoryStartDeferredWork@8
_ExpWorkerFactoryWantsToCreate@8
_ExpWorkerInitialization@0
_ExpWorkerThread@4
_ExpressionConvertToString@16
_FContainCallBackAce@4
_FadePalette@4
_Feature_BamQosGrouping__private_IsEnabledPreCheck@0
_Feature_DirectedFx__private_IsEnabledPreCheck@0
_Feature_Leap_Seconds_Sixty_Second__private_IsEnabledPreCheck@0
_Feature_LogErrorRecords__private_IsEnabledPreCheck@0
_Feature_PPLEnforcement__private_IsEnabledPreCheck@0
_Feature_PdttSupport__private_IsEnabledPreCheck@0
_Feature_PowerButtonBugcheck__private_IsEnabledPreCheck@0
_Feature_PowerButtonSuppression__private_IsEnabled@0
_Feature_PowerEventProcessorSystemIdle__private_IsEnabledPreCheck@0
_Feature_ReduceTimerWakes__private_IsEnabledPreCheck@0
_Feature_RelaxTcbForUWP__private_IsEnabledPreCheck@0
_Feature_SchedulerAggressiveForegroundBoost__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistAllowRealTime__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistEnableBAM__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistForegroundBoostBias__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistHRTimer__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistLongSpinWait__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistPreemptionPriorityKick__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistReflectPriority__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistSpinLock__private_IsEnabledPreCheck@0
_Feature_SchedulerAssistThreadFlag__private_IsEnabledPreCheck@0
_Feature_SchedulerFavoredCoreRotation__private_IsEnabledPreCheck@0
_Feature_SchedulerQosPreemption__private_IsEnabledPreCheck@0
_Feature_SwapToDpcDelegateForLongDpcs__private_IsEnabled@0
_FilterConvertToString@20
_FilterEval@20
_FilterEvalImpliedAnd@20
_FilterEvalStrict@20
_FinalExceptionHandler@16
_FinalizeBootLogo@0
_FindBitmapResource@8
_FindEmailAt@8
_FindFilterOperatorClose@12
_FindLabelEnd@12
_FindNodeOrParent@12
_FioFwReadBytesAtOffset@16
_FioFwReadUlongAtOffset@12
_FioFwReadUshortAtOffset@12
_FirstEntrySList@4
_FopFreeFontData@4
_FopFreeMappingTable@4
_FopGetTableOffsetAndSize@20
_FopInitializeFonts@4
_FopReadCmapTable@12
_FopReadEncodingRecord@12
_FopReadMappingTable@12
_FopReadNameRecord@12
_FopReadNamingTable@12
_FopReadOffsetTable@12
_FopReadPushortAtOffset@16
_FopReadSegmentMapHeader@12
_FopValidateFontNameTable@12
_FreeOperandValue@4
_FsFilterAllocateCompletionStack@12
_FsFilterCtrlFree@4
_FsFilterCtrlInit@24
_FsFilterFreeCompletionStack@4
_FsFilterInit@0
_FsFilterPerformCallbacks@16
_FsFilterPerformCompletionCallbacks@8
_FsRtlAcknowledgeEcp@4
_FsRtlAcquireEofLock@8
_FsRtlAcquireFileExclusive@4
_FsRtlAcquireFileExclusiveCommon@20
_FsRtlAcquireFileForCcFlushEx@4
_FsRtlAcquireFileForModWriteEx@12
_FsRtlAcquireHeaderMutex@8
_FsRtlAcquireToCreateMappedSection@20
_FsRtlAddBaseMcbEntry@28
_FsRtlAddBaseMcbEntryEx@28
_FsRtlAddDiskIOCounterInstance@8
_FsRtlAddEntry@12
_FsRtlAddLargeMcbEntry@28
_FsRtlAddMcbEntry@16
_FsRtlAddToTunnelCache@32
_FsRtlAddToTunnelCacheEx@32
_FsRtlAllocateExtraCreateParameter@24
_FsRtlAllocateExtraCreateParameterFromLookasideList@24
_FsRtlAllocateExtraCreateParameterList@8
_FsRtlAllocateFileLock@8
_FsRtlAllocatePool@8
_FsRtlAllocatePoolWithQuota@8
_FsRtlAllocatePoolWithQuotaTag@12
_FsRtlAllocatePoolWithTag@12
_FsRtlAllocateResource@0
_FsRtlAreThereCurrentOrInProgressFileLocks@4
_FsRtlAreThereWaitingFileLocks@4
_FsRtlAreVolumeStartupApplicationsComplete@0
_FsRtlBalanceReads@4
_FsRtlCancelNotify@8
_FsRtlCancellableWaitForMultipleObjects@24
_FsRtlCancellableWaitForSingleObject@12
_FsRtlChangeBackingFileObject@16
_FsRtlCheckLockForOplockRequest@8
_FsRtlCheckLockForReadAccess@8
_FsRtlCheckLockForWriteAccess@8
_FsRtlCheckNoExclusiveConflict@24
_FsRtlCheckNoSharedConflict@12
_FsRtlCheckNotifyForDelete@8
_FsRtlCheckNotifyForDeleteLite@4
_FsRtlCheckOplock@20
_FsRtlCheckOplockEx2@44
_FsRtlCheckOplockEx@24
_FsRtlCheckUpperOplock@24
_FsRtlCompareNodeAndKey@20
_FsRtlCompleteLockIrpReal@24
_FsRtlCopyRead@32
_FsRtlCopyWrite@32
_FsRtlCreateSectionForDataScan@40
_FsRtlCurrentBatchOplock@4
_FsRtlCurrentOplock@4
_FsRtlCurrentOplockH@4
_FsRtlDeleteExtraCreateParameterLookasideList@8
_FsRtlDeleteKeyFromTunnelCache@12
_FsRtlDeleteTunnelCache@4
_FsRtlDeregisterUncProvider@4
_FsRtlDiskIOCounterSetCallback@12
_FsRtlDismountComplete@8
_FsRtlDissectDbcs@16
_FsRtlDoesDbcsContainWildCards@4
_FsRtlEmptyFreePoolList@4
_FsRtlFastCheckLockForRead@24
_FsRtlFastCheckLockForWrite@24
_FsRtlFastUnlockAll@16
_FsRtlFastUnlockAllByKey@20
_FsRtlFastUnlockSingle@32
_FsRtlFastUnlockSingleExclusive@36
_FsRtlFastUnlockSingleShared@36
_FsRtlFindExtraCreateParameter@16
_FsRtlFindFirstOverlapInNode@12
_FsRtlFindFirstOverlappingExclusiveNode@20
_FsRtlFindFirstOverlappingSharedNode@20
_FsRtlFindInTunnelCache@32
_FsRtlFindInTunnelCacheEx@36
_FsRtlFindLargeIndex@12
_FsRtlFreeExtraCreateParameter@4
_FsRtlFreeExtraCreateParameterList@4
_FsRtlFreeFileLock@4
_FsRtlFreeTunnelNode@8
_FsRtlGetCompatibilityModeValue@8
_FsRtlGetCurrentProcessLoaderList@0
_FsRtlGetDirectImageOriginalBase@8
_FsRtlGetEcpListFromIrp@8
_FsRtlGetFileExtents@28
_FsRtlGetFileNameInformation@16
_FsRtlGetFileSize@8
_FsRtlGetIoAtEof@32
_FsRtlGetNextBaseMcbEntry@20
_FsRtlGetNextExtraCreateParameter@20
_FsRtlGetNextFileLock@8
_FsRtlGetNextLargeMcbEntry@20
_FsRtlGetNextMcbEntry@20
_FsRtlGetSectorSizeInformation@8
_FsRtlGetSupportedFeatures@8
_FsRtlGetTunnelParameterValue@8
_FsRtlGetVirtualDiskNestingLevel@12
_FsRtlHeatInit@12
_FsRtlHeatLogIo@20
_FsRtlHeatLogTierMove@32
_FsRtlHeatUninit@8
_FsRtlIncrementCcFastMdlReadWait@0
_FsRtlIncrementCcFastReadNoWait@0
_FsRtlIncrementCcFastReadNotPossible@0
_FsRtlIncrementCcFastReadResourceMiss@0
_FsRtlIncrementCcFastReadWait@0
_FsRtlInitExtraCreateParameterLookasideList@16
_FsRtlInitSystem@0
_FsRtlInitializeBaseMcb@8
_FsRtlInitializeBaseMcbEx@12
_FsRtlInitializeEofLock@8
_FsRtlInitializeExtraCreateParameter@24
_FsRtlInitializeExtraCreateParameterList@4
_FsRtlInitializeFileLock@12
_FsRtlInitializeFileLocks@0
_FsRtlInitializeLargeMcb@8
_FsRtlInitializeLargeMcbs@0
_FsRtlInitializeMcb@8
_FsRtlInitializeOplock@4
_FsRtlInitializeSmssEvent@0
_FsRtlInitializeTieringHeat@0
_FsRtlInitializeTunnelCache@4
_FsRtlInitializeTunnels@0
_FsRtlInitializeWorkerThread@0
_FsRtlInsertExtraCreateParameter@8
_FsRtlInsertPerFileContext@8
_FsRtlInsertPerFileObjectContext@8
_FsRtlInsertPerStreamContext@8
_FsRtlIs32BitProcess@4
_FsRtlIsDaxVolume@4
_FsRtlIsDbcsInExpression@8
_FsRtlIsEcpAcknowledged@4
_FsRtlIsEcpFromUserMode@4
_FsRtlIsExtentDangling@12
_FsRtlIsFatDbcsLegal@20
_FsRtlIsHpfsDbcsLegal@20
_FsRtlIsMobileOS@0
_FsRtlIsNonEmptyDirectoryReparsePointAllowed@4
_FsRtlIsNotifyOnList@8
_FsRtlIsNtstatusExpected@4
_FsRtlIsPagingFile@4
_FsRtlIsSystemPagingFile@4
_FsRtlIsTotalDeviceFailure@4
_FsRtlIssueDeviceIoControl@32
_FsRtlIssueFileNotificationFsctl@12
_FsRtlKernelFsControlFile@28
_FsRtlLogCcFlushError@20
_FsRtlLookupBaseMcbEntry@32
_FsRtlLookupLargeMcbEntry@32
_FsRtlLookupLastBaseMcbEntry@12
_FsRtlLookupLastBaseMcbEntryAndIndex@16
_FsRtlLookupLastLargeMcbEntry@12
_FsRtlLookupLastLargeMcbEntryAndIndex@16
_FsRtlLookupLastMcbEntry@12
_FsRtlLookupMcbEntry@20
_FsRtlLookupPerFileContext@12
_FsRtlLookupPerFileObjectContext@12
_FsRtlLookupPerStreamContextInternal@12
_FsRtlMdlRead@24
_FsRtlMdlReadComplete@8
_FsRtlMdlReadCompleteDev@12
_FsRtlMdlReadDev@28
_FsRtlMdlReadEx@24
_FsRtlMdlWriteComplete@12
_FsRtlMdlWriteCompleteDev@16
_FsRtlMupGetProviderIdFromName@8
_FsRtlMupGetProviderInfoFromFileObject@16
_FsRtlNormalizeNtstatus@8
_FsRtlNotifyChangeDirectory@28
_FsRtlNotifyCleanup@12
_FsRtlNotifyCleanupAll@8
_FsRtlNotifyCleanupOneEntry@8
_FsRtlNotifyCompleteIrp@20
_FsRtlNotifyCompleteIrpList@8
_FsRtlNotifyFilterChangeDirectory@44
_FsRtlNotifyFilterChangeDirectoryLite@36
_FsRtlNotifyFilterReportChange@40
_FsRtlNotifyFilterReportChangeLite@36
_FsRtlNotifyFilterReportChangeLiteEx@40
_FsRtlNotifyFullChangeDirectory@40
_FsRtlNotifyFullReportChange@36
_FsRtlNotifyInitializeSync@4
_FsRtlNotifyReportChange@20
_FsRtlNotifySetCancelRoutine@8
_FsRtlNotifyUninitializeSync@4
_FsRtlNotifyUpdateBuffer@28
_FsRtlNotifyVolumeEvent@8
_FsRtlNotifyVolumeEventEx@12
_FsRtlNumberOfRunsInBaseMcb@4
_FsRtlNumberOfRunsInLargeMcb@4
_FsRtlNumberOfRunsInMcb@4
_FsRtlOplockBreakH@24
_FsRtlOplockBreakToNone@24
_FsRtlOplockBreakToNoneEx@24
_FsRtlOplockFsctrl@12
_FsRtlOplockFsctrlEx@16
_FsRtlOplockGetAnyBreakOwnerProcess@4
_FsRtlOplockIsFastIoPossible@4
_FsRtlOplockIsSharedRequest@4
_FsRtlOplockKeysEqual@8
_FsRtlPTeardownPerFileObjectContexts@4
_FsRtlPostPagingFileStackOverflow@12
_FsRtlPostStackOverflow@12
_FsRtlPrepareMdlWrite@24
_FsRtlPrepareMdlWriteDev@28
_FsRtlPrepareMdlWriteEx@24
_FsRtlPrepareToReuseEcp@4
_FsRtlPrivateCancelFileLockIrp@8
_FsRtlPrivateCheckForExclusiveLockAccess@8
_FsRtlPrivateCheckForSharedLockAccess@8
_FsRtlPrivateCheckWaitingLocks@12
_FsRtlPrivateFastUnlockAll@24
_FsRtlPrivateInitializeFileLock@8
_FsRtlPrivateInsertExclusiveLock@8
_FsRtlPrivateInsertLock@12
_FsRtlPrivateInsertSharedLock@8
_FsRtlPrivateLock@48
_FsRtlPrivateRemoveLock@12
_FsRtlPrivateResetLowestLockOffset@4
_FsRtlProcessFileLock@12
_FsRtlPruneTunnelCache@8
_FsRtlQueryCachedVdl@8
_FsRtlQueryInformationFile@20
_FsRtlQueryKernelEaFile@36
_FsRtlQueryMaximumVirtualDiskNestingLevel@0
_FsRtlQueryOpen@20
_FsRtlRegisterFileSystemFilterCallbacks@8
_FsRtlRegisterFltMgrCalls@4
_FsRtlRegisterMupCalls@4
_FsRtlRegisterUncProvider@12
_FsRtlRegisterUncProviderEx2@16
_FsRtlRegisterUncProviderEx@16
_FsRtlReleaseEofLock@8
_FsRtlReleaseFile@4
_FsRtlReleaseFileForCcFlush@4
_FsRtlReleaseFileForModWrite@8
_FsRtlReleaseFileNameInformation@4
_FsRtlReleaseHeaderMutex@8
_FsRtlRemoveBaseMcbEntry@20
_FsRtlRemoveDotsFromPath@12
_FsRtlRemoveExtraCreateParameter@16
_FsRtlRemoveLargeEntry@12
_FsRtlRemoveLargeMcbEntry@20
_FsRtlRemoveMcbEntry@12
_FsRtlRemoveNodeFromTunnel@16
_FsRtlRemovePerFileContext@12
_FsRtlRemovePerFileObjectContext@12
_FsRtlRemovePerStreamContext@12
_FsRtlResetBaseMcb@4
_FsRtlResetLargeMcb@8
_FsRtlSendModernAppTermination@12
_FsRtlSetDriverBacking@8
_FsRtlSetEcpListIntoIrp@8
_FsRtlSetFileSize@8
_FsRtlSetKernelEaFile@12
_FsRtlSplitBaseMcb@20
_FsRtlSplitLargeMcb@20
_FsRtlSplitLocks@16
_FsRtlStackOverflowRead@4
_FsRtlSyncVolumes@12
_FsRtlTeardownPerFileContexts@4
_FsRtlTeardownPerStreamContexts@4
_FsRtlTruncateBaseMcb@12
_FsRtlTruncateLargeMcb@12
_FsRtlTruncateMcb@8
_FsRtlTryToAcquireHeaderMutex@8
_FsRtlUninitializeBaseMcb@4
_FsRtlUninitializeFileLock@4
_FsRtlUninitializeLargeMcb@4
_FsRtlUninitializeMcb@4
_FsRtlUninitializeOplock@4
_FsRtlUpdateDiskCounters@16
_FsRtlUpperOplockFsctrl@20
_FsRtlValidateReparsePointBuffer@8
_FsRtlVolumeDeviceToCorrelationId@8
_FsRtlWaitForSmssEvent@4
_FsRtlWorkerThread@4
_FsRtlpAcknowledgeOplockBreak@20
_FsRtlpAcknowledgeOplockBreakByCacheFlags@24
_FsRtlpAllocateOplock@0
_FsRtlpAttachOplockKey@4
_FsRtlpCallerIsAtomicRequestor@12
_FsRtlpCancelExclusiveIrp@12
_FsRtlpCancelOplockRHIrp@12
_FsRtlpCancelReadOnlyOplockIrp@8
_FsRtlpCancelWaitingIrp@8
_FsRtlpCleanupEcps@4
_FsRtlpClearOwner@8
_FsRtlpComputeShareableOplockState@4
_FsRtlpDoBoost@20
_FsRtlpExclusiveIrpCancelRoutine@8
_FsRtlpFreeMdlChain@4
_FsRtlpGenericCompletion@12
_FsRtlpGetMaxVirtualDiskNestingLevel@0
_FsRtlpGrantAnyOplockFromExclusive@40
_FsRtlpHeatRegisterVolume@12
_FsRtlpHeatUnregisterVolume@8
_FsRtlpModifyThreadPriorities@12
_FsRtlpNotifyOplockBreakComplete@8
_FsRtlpOpBatchBreakClosePending@12
_FsRtlpOpenDev@8
_FsRtlpOplockBreakByCacheFlags@60
_FsRtlpOplockBreakNotify@12
_FsRtlpOplockBreakToII@56
_FsRtlpOplockBreakToNone@56
_FsRtlpOplockCleanup@8
_FsRtlpOplockDequeueRH@4
_FsRtlpOplockEnqueueRH@8
_FsRtlpOplockFsctrlInternal@20
_FsRtlpOplockKeysEqual@12
_FsRtlpOplockRHIrpCancelRoutine@8
_FsRtlpOplockSendModernAppTermination@8
_FsRtlpOplockStoreKeyForDeleteOperation@12
_FsRtlpOplockUpperLowerCompatible@8
_FsRtlpOplockWaitCompleteRoutine@8
_FsRtlpPostStackOverflow@16
_FsRtlpPrepareExtraCreateParametersForCreate@4
_FsRtlpQueryValueKey@20
_FsRtlpReadOnlyOplockIrpCancelRoutine@8
_FsRtlpRegisterProviderWithMUP@16
_FsRtlpRegisterUncProvider@16
_FsRtlpReleaseIrpsWaitingForRH@4
_FsRtlpRemoveAndBreakRHIrp@32
_FsRtlpRemoveAndCompleteReadOnlyIrp@12
_FsRtlpRemoveAndCompleteWaitingIrp@4
_FsRtlpRequestExclusiveOplock@28
_FsRtlpRequestShareableOplock@32
_FsRtlpWaitForIoAtEof@16
_FsRtlpWaitOnIrp@48
_FsRtlpWaitingIrpCancelRoutine@8
_FstubTranslateRequirement@20
_FstubTranslateResource@28
_FstubTranslatorNull@4
_GetAttributeName@12
_GetBinaryOperandLen@8
_GetBootSystemTime@8
_GetConditionToken@8
_GetDigitFromChar2@8
_GetDigitFromChar@8
_GetFlags@12
_GetGlobalizationUserModelType@0
_GetHangulT@4
_GetIretHookAddress@12
_GetNextNoneWhiteSpace@8
_GetNextWchar@16
_GetOperandValue@36
_GetOperatorIndexByName@4
_GetOperatorIndexByToken@4
_GetPrintableAttributeName@20
_GetPrintableOperandValue@32
_GetPropertyFromPropArray@20
_GetStringOperandValue@12
_GetSurrogateLow@4
_GetUTF32@4
_GetValueType@12
_GxpAdjustRectangleToFrameBuffer@24
_GxpBitsToBytes@4
_GxpGetRotatedPixelOffset@40
_GxpMatchPaletteColor@8
_GxpReadFrameBufferPixels@8
_GxpWriteFrameBufferPixels@8
_HalAllocateCommonBuffer@16
_HalFreeCommonBuffer@24
_HalGetAdapter@8
_HalGetInterruptVector@24
_HalInitializeBios@8
_HalReadDmaCounter@4
_HashpFinalizeHash@8
_HashpHashBytes@12
_HashpHashMemory@20
_HashpInitHash@8
_HashpVerifyEcdsaSignature@28
_HashpVerifyPkcs1Signature@36
_HdlspAddLogEntry@4
_HdlspBugCheckProcessing@0
_HdlspDispatch@20
_HdlspEnableTerminal@4
_HdlspGetLine@8
_HdlspKernelAddLogEntry@8
_HdlspProcessDumpCommand@4
_HdlspPutData@8
_HdlspPutMore@4
_HdlspPutString@4
_HdlspPutWideString@4
_HdlspSendBlueScreenInfo@4
_HdlspSendStringAtBaud@4
_HdlspSetBlueScreenInformation@8
_HdlspUTF8Encode@8
_HeadlessDispatch@20
_HeadlessInit@4
_HeadlessKernelAddLogEntry@8
_HeadlessTerminalAddResources@20
_HvAddToLayoutStats@8
_HvAllocateCell@20
_HvAllocateOffsetArraysForHiveSnapshot@16
_HvAnalyzeLogFiles@32
_HvApplyLogFile@48
_HvBufferCheckSum@8
_HvCheckAndUpdateHiveBackupTimeStamp@4
_HvCheckBin@28
_HvCheckHive@24
_HvClearBinTrimStatus@8
_HvCountFreeLogsLockFree@4
_HvDuplicateCell@16
_HvExtendHivePrimaryFileValidDataLength@12
_HvFoldBackDirtyData@4
_HvFoldBackUnreconciledData@4
_HvFreeCell@8
_HvFreeDirtyData@4
_HvFreeHivePartial@12
_HvFreeUnreconciledData@4
_HvGetCurrentLogFileSizePointer@4
_HvGetEffectiveLogSizeCapForHive@4
_HvGetHiveLogFileStatus@12
_HvHiveCleanup@4
_HvHiveConvertLockedPagesToCowByPolicy@4
_HvHiveInitialize@4
_HvHiveStartEmptyClone@8
_HvHiveStartFileBacked@52
_HvHiveStartMemoryBacked@52
_HvInitializeHashLibrary@0
_HvIsCellAllocated@12
_HvIsCurrentLogSwappable@4
_HvIsInPlaceBaseBlockValid@4
_HvIsRangeDirty@12
_HvLoadHive@8
_HvLockHiveFlusherExclusive@4
_HvLockHiveFlusherShared@4
_HvLockHiveWriter@4
_HvMarkBaseBlockDirty@4
_HvMarkCellDirty@12
_HvMoveLayoutStats@4
_HvReallocateCell@24
_HvResetDirtyData@4
_HvResetInactiveLogFileStatus@4
_HvResetLogFileStatusAll@4
_HvResetUnreconciledData@4
_HvSnapshotHiveToOffsetArray@12
_HvStoreModifiedData@12
_HvSwapHiveStorage@8
_HvSwapLogFiles@8
_HvTrimHive@12
_HvTruncateAllLogFilesIfRequired@4
_HvTruncateCurrentLogFileIfRequired@4
_HvUnCOWReconciledPages@4
_HvUnlockHiveFilePages@4
_HvUnlockHiveFlusherExclusive@4
_HvUnlockHiveFlusherShared@4
_HvUnlockHiveWriter@4
_HvUpdateUnreconciledVector@8
_HvValidateOrInvalidatePrimaryFileHeader@16
_HvViewMapContainsLockedPages@4
_HvWriteExternal@4
_HvWriteHivePrimaryFile@12
_HvWriteLogFile@16
_HvcallInitInputControl@8
_HvcallInitiateHypercall@24
_HvcallpNoHypervisorPresent@0
_HviCopyMemory@12
_HviGetDebugDeviceOptions@4
_HviGetEnlightenmentInformation@4
_HviGetHardwareFeatures@4
_HviGetHypervisorFeatures@4
_HviGetHypervisorInterface@4
_HviGetHypervisorVendorAndMaxFunction@4
_HviGetHypervisorVersion@4
_HviGetImplementationLimits@4
_HviGetIptFeatures@4
_HviIsAnyHypervisorPresent@0
_HviIsHypervisorMicrosoftCompatible@0
_HviIsHypervisorVendorMicrosoft@0
_HviIsIommuInUse@0
_HvlConfigureDynamicMemory@12
_HvlConfigureIdleStates@8
_HvlConfigureMemoryZeroingOnReset@4
_HvlConfigurePcc@8
_HvlConfigurePerfStateCap@8
_HvlConfigurePerfStates@8
_HvlConfigureThrottleStates@8
_HvlDeleteProcessor@4
_HvlDisableEnlightenment@4
_HvlDummyInterruptCallback@4
_HvlEndSystemInterrupt@0
_HvlEnlightenProcessor@4
_HvlEnterSleepState@4
_HvlFlushRangeListTb@28
_HvlGetApicIdFromLpIndex@8
_HvlGetDisabledSleepStates@0
_HvlGetEncryptedData@20
_HvlGetEnlightenmentInfo@4
_HvlGetIdleGenerationCounter@8
_HvlGetImplementedPhysicalBits@4
_HvlGetLogicalProcessorRunTime@12
_HvlGetLpIndexFromApicId@4
_HvlGetLpIndexFromProcessorIndex@4
_HvlGetPpmStatsForProcessor@12
_HvlGetProcessorIndexFromVpIndex@4
_HvlGetQpcBias@0
_HvlGetReferenceTime@0
_HvlGetReferenceTimeUsingTscPage@0
_HvlHalGetVpIndexFromApicId@8
_HvlHalStartVirtualProcessor@8
_HvlHalVpStartEnabled@0
_HvlInitializeProcessor@8
_HvlInvokeHypervisorDebugger@8
_HvlInvokeWheaErrorNotificationCallback@12
_HvlIsCoreSharingPossible@0
_HvlIsNestedRootPartition@0
_HvlLogGuestCrashInformation@24
_HvlLpGetMachineCheckContext@16
_HvlLpReadCpuid@24
_HvlLpReadMultipleMsr@16
_HvlLpWriteMultipleMsr@16
_HvlLpWritebackInvalidate@4
_HvlMapDeviceInterrupt@20
_HvlMarkHiberPhase@0
_HvlNotifyAllProcessorsStarted@0
_HvlNotifyDebugDeviceAvailable@0
_HvlNotifyLongSpinWait@4
_HvlNotifyPageHeat@16
_HvlParkedVirtualProcessors@4
_HvlPhase0Initialize@4
_HvlPhase1Initialize@4
_HvlPhase2Initialize@4
_HvlQueryActiveHypervisorProcessorCount@4
_HvlQueryActiveProcessors@8
_HvlQueryAssociatedProcessors@12
_HvlQueryConnection@4
_HvlQueryDetailInfo@16
_HvlQueryEnlightenmentInfo@16
_HvlQueryHypervisorProcessorNodeNumber@8
_HvlQueryHypervisorTscAdjustment@0
_HvlQueryL1tfMitigationInformation@4
_HvlQueryNumaDistance@12
_HvlQueryProcessorTopology@16
_HvlQueryProcessorTopologyCount@8
_HvlQueryProcessorTopologyEx@20
_HvlQueryProcessorTopologyHighestId@8
_HvlQueryStartedProcessors@8
_HvlQueryVsmProtectionInfo@12
_HvlReadPerformanceStateCounters@16
_HvlRegisterInterruptCallback@12
_HvlRegisterLogicalProcessorFrequency@8
_HvlRegisterPerfFeedbackCounters@8
_HvlRegisterWheaErrorNotification@4
_HvlRescindEnlightenments@4
_HvlRestoreEnlightenment@4
_HvlResumePartition@8
_HvlRetargetDeviceInterrupt@24
_HvlSendSyntheticClusterIpi@8
_HvlSetEnlightenmentInfo@16
_HvlSetPartitionProperty@20
_HvlSetPlatformIdleState@4
_HvlSetQpcBias@8
_HvlSetSystemMachineCheckProperty@4
_HvlSetSystemSleepProperty@12
_HvlStartBootLogicalProcessors@4
_HvlSuspendPartition@8
_HvlSwitchVirtualAddressSpace@4
_HvlUnmapDeviceInterrupt@12
_HvlUnregisterInterruptCallback@8
_HvlUnregisterWheaErrorNotification@4
_HvlUpdatePerformanceStateCountersForLp@4
_HvlWriteApicCommandRegister@8
_HvlpAcquireHypercallPage@16
_HvlpAddPhysicalMemory@12
_HvlpAffinityToHvProcessorSet@12
_HvlpAffinityToVirtualAffinity@4
_HvlpAllocateOverlayPages@4
_HvlpCommitLpIndices@0
_HvlpCompareActiveLpcbs
_HvlpComputeLpComparisonMetrics@12
_HvlpConfigureLegacyPowerPolicySetting@4
_HvlpCopyFlushVaList@16
_HvlpDepositPages@12
_HvlpDetermineEnlightenments@0
_HvlpDiscoverTopologyAmd@16
_HvlpDiscoverTopologyComplete@0
_HvlpDiscoverTopologyIntel@16
_HvlpDiscoverTopologyLocal@16
_HvlpEnlightenSwapContext@0
_HvlpEtwRegister@0
_HvlpFlushRangeListTb@28
_HvlpFreeOverlayPages@4
_HvlpGetLogicalProcessorProperty@12
_HvlpGetLpcbByLpIndex@4
_HvlpGetRegister64@8
_HvlpGetVpIndexFromApicId@8
_HvlpHvIdentityInfoCallback@16
_HvlpHvToNtStatus@4
_HvlpInitializeBootProcessor@4
_HvlpInitializeHvCrashdumpPhase2@0
_HvlpInitializePartitionInfoPage@4
_HvlpInitializePowerStatistics@0
_HvlpLegacyPowerPolicySettingCallback@16
_HvlpLockHypercallMsr@0
_HvlpLogGuestStateScrubbingStatus@0
_HvlpLogHypervisorLaunchError@40
_HvlpLogHypervisorSchedulerType@0
_HvlpLogIommuEvent@4
_HvlpLogIommuInitStatus@0
_HvlpLogProcessorStartupFailure@12
_HvlpLpComparison@16
_HvlpLpCpuid@16
_HvlpMapStatisticsPage@12
_HvlpMarkHvlPagesForHibernation@0
_HvlpPhase0Enlightenments@4
_HvlpPowerPolicySettingCallback@16
_HvlpPrepareFlushHeader@16
_HvlpProcessIommu@0
_HvlpQueryExtendedCapabilities@4
_HvlpRegisterPowerPolicyCallbacks@0
_HvlpReleaseHypercallPage@4
_HvlpSelectLpSet@12
_HvlpSelectVpSet@12
_HvlpSetLogicalProcessorProperty@12
_HvlpSetPowerProperty@4
_HvlpSetRegister64@12
_HvlpSetupBootProcessorEarlyHypercallPages@4
_HvlpSetupCachedHypercallPages@4
_HvlpSetupSchedulerAssist@4
_HvlpSlowFlushAddressSpaceTb@12
_HvlpSlowFlushListTb@24
_HvlpStartVirtualProcessor@8
_HvlpTryConfigureInterface@4
_HvlpTryToLockCpuManagementVersion@4
_HvpAddBin@12
_HvpAddDummyBinToHive@16
_HvpAddFreeCellHint@16
_HvpAdjustBitmap@12
_HvpAdjustHiveFreeDisplay@12
_HvpAllExceptionsFatalFilter@4
_HvpAllocateBin@20
_HvpAllocateLogBuffers@12
_HvpAllocateMap@16
_HvpApplyIncrementalLogFile@52
_HvpApplyLegacyLogFile@32
_HvpApplyLogEntryDataToFileBackedHive@24
_HvpBuildMapForMemoryBackedHive@12
_HvpCopyDataToOffsetArray@24
_HvpCopyModifiedData@16
_HvpCountSetRangesInVector@4
_HvpDelistFreeCell@12
_HvpDetermineFinalViewReservationEnd@28
_HvpDetermineIncrementalLogFileMaximums@16
_HvpDetermineLatestLogFile@4
_HvpDoAllocateCell@20
_HvpDropPagedBins@4
_HvpEnlistFreeCell@16
_HvpEnlistFreeCells@16
_HvpExpandMap@16
_HvpFillFileName@8
_HvpFindFreeBin@16
_HvpFindFreeCell@24
_HvpFindFreeCellInBin@28
_HvpFindNextDirtyBlock@28
_HvpFindNextDirtyRun@20
_HvpFinishPrimaryWrite@16
_HvpFreeHiveFreeDisplay@4
_HvpFreeMap@16
_HvpGenerateLogEntry@16
_HvpGenerateLogEntryChecksums@12
_HvpGenerateLogEntryDirtyData@24
_HvpGenerateLogEntryHeader@32
_HvpGenerateLogEntryMetadata@28
_HvpGenerateLogMetadata@12
_HvpGetCellContextInitialize@4
_HvpGetCellFlat@12
_HvpGetCellMap@8
_HvpGetCellPaged@12
_HvpGetHiveHeader@12
_HvpGrowDirtyVectors@8
_HvpHeaderCheckSum@4
_HvpInitMap@4
_HvpInpageErrorFilter@8
_HvpIsFreeNeighbor@20
_HvpIsLogEntryHeaderCoherent@12
_HvpIsLogFileBaseBlockValid@8
_HvpIsMetadataArrayCoherent@12
_HvpIsReadErrorTransient@4
_HvpLogEntryCheckDataChecksum@12
_HvpLogEntryCheckHeaderChecksum@4
_HvpLogIneligibleLogHeader@12
_HvpLogInvalidLogHeader@12
_HvpLogUnreadableLog@8
_HvpMapHiveImage@20
_HvpMapHiveImageFromFile@20
_HvpMapHiveImageFromViewMap@12
_HvpMappedViewConvertLockedPagesToCOWByPolicy@8
_HvpMappedViewConvertRegionFromLockedToCOWByPolicy@24
_HvpMarkCellDirty@16
_HvpMarkDirty@16
_HvpMinLong64@16
_HvpPerformLogFileRecovery@16
_HvpPointMapEntriesToBuffer@24
_HvpProtectBin@16
_HvpReadHiveDataFromFile@12
_HvpReadLogEntryHeader@16
_HvpRecoverDataReadRoutine@16
_HvpReleaseCellFlat@8
_HvpReleaseCellPaged@8
_HvpRemapAndEnlistHiveBins@4
_HvpRemoveFreeCellHint@20
_HvpResetPageProtection@4
_HvpSetCurrentLogDataPresent@4
_HvpSetRangeProtection@16
_HvpShouldTruncateLogFile@8
_HvpShrinkMap@16
_HvpSwapDual@8
_HvpTruncateBins@4
_HvpUpdateRecoveryVector@12
_HvpValidateLoadedBin@12
_HvpViewMapAdjustFlag@12
_HvpViewMapCOWAndUnsealRange@12
_HvpViewMapCleanup@4
_HvpViewMapConvertLockedPagesToCOWByPolicy@4
_HvpViewMapCreateView@24
_HvpViewMapCreateViewsForRegion@24
_HvpViewMapDeleteViewTreeNode@8
_HvpViewMapExtendStorage@8
_HvpViewMapGetLastView@4
_HvpViewMapGetMaxStorageLength@4
_HvpViewMapGetPageAddress@8
_HvpViewMapMakeViewRangeCOWByCaller@24
_HvpViewMapMakeViewRangeInvalid@24
_HvpViewMapMakeViewRangeReadOnly@24
_HvpViewMapMakeViewRangeUnCOWByCaller@24
_HvpViewMapMakeViewRangeUnCOWByPolicy@24
_HvpViewMapMakeViewRangeValid@28
_HvpViewMapMigrateCOWData@12
_HvpViewMapPromoteRangeToMapping@16
_HvpViewMapSealRange@12
_HvpViewMapShrinkStorage@8
_HvpViewMapStart@20
_HvpViewMapTouchPages@12
_HvpViewMapUnCOWAndSealRange@12
_INCREASE_MAPPED_TRANSFER_BYTE_COUNT@12
_INCREMENT_ADAPTER_CHANNELS@4
_IS_PTE_NOT_DEMAND_ZERO@8
_I_MinCryptAddCertToCache@24
_I_MinCryptBuildErrorPolicy@12
_I_MinCryptCheckEKU@12
_I_MinCryptFindCertInCache@20
_I_MinCryptFindIssuerCertificateByName@12
_I_MinCryptFindRootByKey@4
_I_MinCryptFindRootByName@4
_I_MinCryptFlightIsRevoked@8
_I_MinCryptGetCertValidityPeriod@12
_I_MinCryptGetCertificateEKUs@12
_I_MinCryptGetCommonName@8
_I_MinCryptSignerCertExpired@12
_I_MincryptAddChainInfo@40
_IdnaMemAlloc@4
_IdpValidateAcpiName@8
_IdpValidatePciPath@8
_InbvAcquireDisplayOwnership@0
_InbvAcquireLock@0
_InbvBitBlt@12
_InbvCheckDisplayOwnership@0
_InbvDetermineFunction@4
_InbvDisplayString@4
_InbvDriverInitialize@12
_InbvEnableBootDriver@4
_InbvEnableDisplayString@4
_InbvGetDisplayState@0
_InbvGetResourceAddress@4
_InbvIndicateProgress@0
_InbvInstallDisplayStringFilter@4
_InbvIsBootDriverInstalled@0
_InbvNotifyDisplayOwnershipChange@8
_InbvNotifyDisplayOwnershipLost@4
_InbvPortGetByte@8
_InbvPortInitialize@32
_InbvPortPollOnly@4
_InbvPortPutByte@8
_InbvPortTerminate@4
_InbvReleaseLock@0
_InbvReleaseResources@0
_InbvResetDisplay@0
_InbvRotateGuiBootDisplay@4
_InbvSetFunction@4
_InbvSetProgressBarSubset@8
_InbvSetScrollRegion@16
_InbvSetTextColor@4
_InbvSetVirtualFrameBuffer@8
_InbvSolidColorFill@20
_InitBootProcessor@4
_InitOnceGetStringTableOffset@12
_InitOnceScanIndexes@12
_InitOtherProcessors@0
_InitSafeBoot@4
_InitSkuSessionParameters@0
_InitializeBuildStrings@4
_InitializeDynamicPartitioningPolicy@4
_InitializeKCBKeyBodyList@4
_InitializeListHeadPte@8
_InitializeSidLookupTable@4
_InsertChar@12
_InsertTailListPte@8
_InterlockedCompareExchange64@20
_InternalBreakpointCheck@16
_IoAcquireCancelSpinLock@4
_IoAcquireKsrPersistentMemory@16
_IoAcquireRemoveLockEx@20
_IoAcquireVpbSpinLock@4
_IoAddPagesForPartialKernelDump@32
_IoAddTriageDumpDataBlock@8
_IoAdjustStackSizeForRedirection@12
_IoAllocateAdapterChannel@20
_IoAllocateController@16
_IoAllocateDriverObjectExtension@16
_IoAllocateErrorLogEntry@8
_IoAllocateGenericErrorLogEntry@4
_IoAllocateIrp@8
_IoAllocateIrpEx@12
_IoAllocateMdl@20
_IoAllocateMiniCompletionPacket@8
_IoAllocateSfioStreamIdentifier@16
_IoAllocateWorkItem@4
_IoAllowExecution@4
_IoApplyPriorityInfoThread@12
_IoAssignResources@24
_IoAsynchronousPageWrite@44
_IoAttachDevice@12
_IoAttachDeviceByPointer@8
_IoAttachDeviceToDeviceStack@8
_IoAttachDeviceToDeviceStackSafe@12
_IoBoostThreadIo@16
_IoBoostThreadIoPriority@12
_IoBoostThreadOutstandingIo@4
_IoBugCheckTriageDumpDataCallback@16
_IoBuildAsynchronousFsdRequest@24
_IoBuildDeviceIoControlRequest@36
_IoBuildPartialMdl@16
_IoBuildPoDeviceNotifyList@8
_IoBuildSynchronousFsdRequest@28
_IoCallDriver@8
_IoCallDriverWithTracing@8
_IoCancelFileOpen@8
_IoCancelIrp@4
_IoCancelMiniCompletionPacket@8
_IoCancelThreadIo@4
_IoCaptureLiveDump@28
_IoChangeFileObjectFilterContext@12
_IoCheckDesiredAccess@8
_IoCheckEaBufferValidity@12
_IoCheckFunctionAccess@24
_IoCheckLinkShareAccess@24
_IoCheckQuerySetFileInformation@12
_IoCheckQuerySetVolumeInformation@12
_IoCheckQuotaBufferValidity@12
_IoCheckShareAccess@20
_IoCheckShareAccessEx@24
_IoCleanupIrp@4
_IoClearActivityIdThread@4
_IoClearAdapterCryptoEngineExtension@4
_IoClearFsTrackOffsetState@4
_IoClearIrpExtraCreateParameter@4
_IoCollectTriageDumpData@36
_IoCompleteRequest@8
_IoConfigureCrashDump@8
_IoConnectInterrupt@44
_IoConnectInterruptEx@4
_IoControlPnpDeviceActionQueue@4
_IoConvertFileHandleToKernelHandle@20
_IoCopyDeviceObjectHint@8
_IoCreateArcName@4
_IoCreateController@4
_IoCreateDevice@28
_IoCreateDeviceSecure@36
_IoCreateDisk@8
_IoCreateDriver@8
_IoCreateFile@56
_IoCreateFileEx@60
_IoCreateFileSpecifyDeviceObjectHint@60
_IoCreateNotificationEvent@8
_IoCreateObjectTypes@0
_IoCreateStreamFileObject@8
_IoCreateStreamFileObjectEx2@20
_IoCreateStreamFileObjectEx@12
_IoCreateStreamFileObjectLite@8
_IoCreateSymbolicLink@8
_IoCreateSynchronizationEvent@8
_IoCreateSystemThread@32
_IoCreateUnprotectedSymbolicLink@8
_IoCsqInitialize@28
_IoCsqInitializeEx@28
_IoCsqInsertIrp@12
_IoCsqInsertIrpEx@16
_IoCsqRemoveIrp@8
_IoCsqRemoveNextIrp@8
_IoDecrementKeepAliveCount@8
_IoDeleteController@4
_IoDeleteDevice@4
_IoDeleteDriver@4
_IoDeleteSymbolicLink@4
_IoDetachDevice@4
_IoDiagTraceDevicesRundown@0
_IoDiagTraceDirectedDripsCandidateDevices@0
_IoDiscardDeferredLiveDumpData@4
_IoDisconnectInterrupt@4
_IoDisconnectInterruptEx@4
_IoDiskIoAttributionAllocate@8
_IoDiskIoAttributionDereference@4
_IoDiskIoAttributionQuery@12
_IoDiskIoAttributionReference@4
_IoDumpStackResumeCapable@4
_IoDuplicateDependency@8
_IoEnableIrpCredits@0
_IoEnqueueIrp@4
_IoEnumerateDeviceObjectList@16
_IoEnumerateEnvironmentVariablesEx@16
_IoEnumerateRegisteredFiltersList@12
_IoFastFailCrashDump@0
_IoFastQueryNetworkAttributes@20
_IoFillDumpHeader@32
_IoFillTriageDumpBuffer@52
_IoFindDeviceThatFailedIrp@4
_IoFlushAdapterBuffers@24
_IoForwardIrpSynchronously@8
_IoFreeAdapterChannel@4
_IoFreeController@4
_IoFreeDumpRange@16
_IoFreeErrorLogEntry@4
_IoFreeIrp@4
_IoFreeKsrPersistentMemory@4
_IoFreeMapRegisters@12
_IoFreeMdl@4
_IoFreeMiniCompletionPacket@4
_IoFreePoDeviceNotifyList@4
_IoFreeSfioStreamIdentifier@8
_IoFreeWorkItem@4
_IoGetActivityIdIrp@8
_IoGetActivityIdThread@0
_IoGetAdapterCryptoEngineExtension@8
_IoGetAffinityInterrupt@8
_IoGetAttachedDevice@4
_IoGetAttachedDeviceReference@4
_IoGetAttachedDeviceReferenceWithTag@8
_IoGetBaseFileSystemDeviceObject@4
_IoGetBootDiskInformation@8
_IoGetBootDiskInformationLite@4
_IoGetConfigurationInformation@0
_IoGetContainerInformation@16
_IoGetDeviceAttachmentBaseRef@4
_IoGetDeviceAttachmentBaseRefWithTag@8
_IoGetDeviceDirectory@20
_IoGetDeviceInstanceName@8
_IoGetDeviceInterfaceAlias@12
_IoGetDeviceInterfacePropertyData@32
_IoGetDeviceInterfaces@16
_IoGetDeviceNumaNode@8
_IoGetDeviceObjectPointer@16
_IoGetDeviceProperty@20
_IoGetDevicePropertyData@32
_IoGetDeviceToVerify@4
_IoGetDiskDeviceObject@8
_IoGetDmaAdapter@12
_IoGetDriverDirectory@16
_IoGetDriverObjectExtension@8
_IoGetDumpHiberRanges@8
_IoGetDumpStack@16
_IoGetDumpStackTransferSizes@8
_IoGetEnvironmentVariableEx@20
_IoGetFileObjectFilterContext@12
_IoGetFileObjectGenericMapping@0
_IoGetFsTrackOffsetState@12
_IoGetFsZeroingOffset@8
_IoGetGenericIrpExtension@12
_IoGetInitialStack@0
_IoGetInitiatorProcess@4
_IoGetIoAttributionHandle@8
_IoGetIoPriorityHint@4
_IoGetIoRateControl@32
_IoGetIommuInterface@8
_IoGetIrpExtraCreateParameter@8
_IoGetLegacyVetoList@8
_IoGetLoadedDriverInfo@12
_IoGetLowerDeviceObject@4
_IoGetLowerDeviceObjectWithTag@8
_IoGetOplockFullFoExt@4
_IoGetOplockKeyContext@4
_IoGetOplockKeyContextEx@4
_IoGetRelatedDeviceObject@4
_IoGetRelatedTargetDevice@8
_IoGetRequestorProcess@4
_IoGetRequestorProcessId@4
_IoGetRequestorSessionId@8
_IoGetSfioStreamIdentifier@8
_IoGetSilo@4
_IoGetSiloParameters@4
_IoGetStackLimits@8
_IoGetSymlinkSupportInformation@8
_IoGetTopLevelIrp@0
_IoGetTransactionParameterBlock@4
_IoIncrementKeepAliveCount@8
_IoInitSystem@4
_IoInitSystemPreDrivers@4
_IoInitializeBugCheckProgress@8
_IoInitializeCrashDump@12
_IoInitializeDumpStack@8
_IoInitializeIrp@12
_IoInitializeIrpEx@16
_IoInitializeLiveDump@0
_IoInitializeMiniCompletionPacket@12
_IoInitializeProcessor@8
_IoInitializeRemoveLockEx@20
_IoInitializeTimer@12
_IoInitializeWorkItem@8
_IoInvalidateDeviceRelations@8
_IoInvalidateDeviceState@4
_IoIrpHasFsTrackOffsetExtensionType@4
_IoIsActivityTracingEnabled@0
_IoIsDeviceEjectable@4
_IoIsFileObjectIgnoringSharing@4
_IoIsFileOriginRemote@4
_IoIsIoPriorityBoostActive@4
_IoIsKernelPagingRead@4
_IoIsOperationSynchronous@4
_IoIsPartialDumpRetry@0
_IoIsProcessAntiMalware@4
_IoIsSystemThread@4
_IoIsValidIrpStatus@4
_IoIsValidNameGraftingBuffer@8
_IoIsWdmVersionAvailable@8
_IoLockUnlockPnpDeviceTree@4
_IoMakeAssociatedIrp@8
_IoMakeAssociatedIrpEx@12
_IoMakeAssociatedIrpPriv@12
_IoMapTransfer@24
_IoMarkTriageDumpBlock@0
_IoNotifyDump@4
_IoNotifyPowerOperationVetoed@12
_IoNotifyQuotaState@20
_IoOpenDeviceInterfaceRegistryKey@12
_IoOpenDeviceRegistryKey@16
_IoOpenDriverRegistryKey@20
_IoPageRead@20
_IoPageReadEx@28
_IoPerfInit@4
_IoPerfReset@4
_IoProcessPassiveInterrupts@4
_IoPropagateActivityIdToThread@12
_IoPropagateIrpExtension@12
_IoPropagateIrpExtensionEx@20
_IoQueryDeviceDescription@32
_IoQueryEnvironmentVariableInfoEx@16
_IoQueryFileDosDeviceName@8
_IoQueryFileInformation@20
_IoQueryFullDriverPath@8
_IoQueryInformationByName@28
_IoQueryInterface@28
_IoQueryKsrPersistentMemorySize@12
_IoQueryLowPriorityIoInformation@16
_IoQuerySystemDeviceName@16
_IoQueryVhdBootInformation@16
_IoQueryVolumeInformation@20
_IoQueueThreadIrp@4
_IoQueueWorkItem@16
_IoQueueWorkItemEx@16
_IoQueueWorkItemToNode@20
_IoRaiseHardError@12
_IoRaiseInformationalHardError@12
_IoReadDiskSignature@12
_IoReadPartitionTableEx@8
_IoRecordIoAttribution@8
_IoReferenceIoAttributionFromThread@8
_IoRegisterBootDriverCallback@8
_IoRegisterBootDriverReinitialization@12
_IoRegisterContainerNotification@20
_IoRegisterDeviceInterface@16
_IoRegisterDriverReinitialization@12
_IoRegisterFileSystem@4
_IoRegisterFsRegistrationChange@8
_IoRegisterFsRegistrationChangeMountAware@12
_IoRegisterIoTracking@8
_IoRegisterLastChanceShutdownNotification@4
_IoRegisterPlugPlayNotification@28
_IoRegisterPriorityCallback@8
_IoRegisterShutdownNotification@4
_IoReleaseCancelSpinLock@4
_IoReleaseIoRateControl@4
_IoReleaseRemoveLockAndWaitEx@12
_IoReleaseRemoveLockEx@12
_IoReleaseVpbSpinLock@4
_IoRemoveIoCompletion@32
_IoRemoveLinkShareAccess@12
_IoRemoveLinkShareAccessEx@16
_IoRemoveShareAccess@8
_IoReplaceFileObjectName@12
_IoReplacePartitionUnit@12
_IoReportDetectedDevice@32
_IoReportHalResourceUsage@16
_IoReportInterruptActive@4
_IoReportInterruptInactive@4
_IoReportResourceForDetection@28
_IoReportResourceUsage@36
_IoReportResourceUsageInternal@40
_IoReportRootDevice@4
_IoReportTargetDeviceChange@8
_IoReportTargetDeviceChangeAsynchronous@16
_IoRequestDeviceEject@4
_IoRequestDeviceEjectEx@16
_IoRequestDeviceRemovalForReset@8
_IoReserveDependency@12
_IoReserveKsrPersistentMemory@20
_IoResolveDependency@8
_IoRetrievePriorityInfo@16
_IoReuseIrp@8
_IoRevokeHandlesForProcess@8
_IoSaveBugCheckProgress@4
_IoSetActivityIdIrp@8
_IoSetActivityIdThread@4
_IoSetAdapterCryptoEngineExtension@8
_IoSetBugCheckProgressAndFlag@8
_IoSetCompletionRoutineEx@28
_IoSetDependency@12
_IoSetDeviceInterfacePropertyData@28
_IoSetDeviceInterfaceState@8
_IoSetDevicePropertyData@28
_IoSetDeviceToVerify@8
_IoSetDiskIoAttributionFromThread@8
_IoSetDiskIoAttributionOnProcess@8
_IoSetDumpRange@16
_IoSetDumpRangeForPartialKernelDump@16
_IoSetEnvironmentVariableEx@20
_IoSetFileObjectIgnoreSharing@4
_IoSetFileOrigin@8
_IoSetFsTrackOffsetState@16
_IoSetFsZeroingOffset@8
_IoSetFsZeroingOffsetRequired@4
_IoSetGenericIrpExtension@16
_IoSetHardErrorOrVerifyDevice@8
_IoSetInformation@16
_IoSetIoAttributionIrp@12
_IoSetIoCompletion@24
_IoSetIoCompletionEx2@32
_IoSetIoCompletionEx3@36
_IoSetIoCompletionEx@28
_IoSetIoPriorityHint@8
_IoSetIoPriorityHintIntoFileObject@8
_IoSetIoPriorityHintIntoThread@8
_IoSetIrpExtraCreateParameter@8
_IoSetLinkShareAccess@24
_IoSetMasterIrpStatus@8
_IoSetOplockKeyContext@12
_IoSetOplockPrivateFoExt@8
_IoSetPartitionInformationEx@12
_IoSetShareAccess@16
_IoSetShareAccessEx@20
_IoSetStartIoAttributes@12
_IoSetSystemPartition@4
_IoSetThreadHardErrorMode@4
_IoSetTopLevelIrp@4
_IoShutdownSystem@4
_IoSizeOfIrpEx@8
_IoSizeofGenericIrpExtension@0
_IoSizeofWorkItem@0
_IoStartDiskIoAttributionForContext@4
_IoStartIoRateControl@20
_IoStartNextPacket@8
_IoStartNextPacketByKey@12
_IoStartPacket@16
_IoStartTimer@4
_IoSteerInterrupt@8
_IoStopDiskIoAttributionForContext@4
_IoStopIoRateControl@4
_IoStopTimer@4
_IoSynchronousCallDriver@8
_IoSynchronousPageWrite@20
_IoSynchronousPageWriteEx@28
_IoTestDependency@16
_IoThreadToProcess@4
_IoTransferActivityId@8
_IoTranslateBusAddress@24
_IoTryQueueWorkItem@16
_IoUninitializeWorkItem@4
_IoUnregisterBootDriverCallback@4
_IoUnregisterContainerNotification@4
_IoUnregisterFileSystem@4
_IoUnregisterFsRegistrationChange@8
_IoUnregisterIoTracking@4
_IoUnregisterPlugPlayNotification@4
_IoUnregisterPlugPlayNotificationEx@4
_IoUnregisterPriorityCallback@4
_IoUnregisterShutdownNotification@4
_IoUpdateBugCheckProgressEnvVariable@0
_IoUpdateDumpPhysicalRanges@0
_IoUpdateIrpIoAttributionHandle@8
_IoUpdateLinkShareAccess@12
_IoUpdateLinkShareAccessEx@16
_IoUpdateShareAccess@8
_IoUpdateThreadIoRateThrottle@8
_IoValidateDeviceIoControlAccess@8
_IoVerifierCheckForSettingsChange@4
_IoVerifierInit@4
_IoVerifyPartitionTable@8
_IoVerifyVolume@8
_IoVolumeDeviceNameToGuid@8
_IoVolumeDeviceNameToGuidPath@8
_IoVolumeDeviceToDosName@8
_IoVolumeDeviceToGuid@8
_IoVolumeDeviceToGuidPath@8
_IoWMIAllocateInstanceIds@12
_IoWMICompleteRequest@24
_IoWMIDeviceObjectToInstanceName@12
_IoWMIExecuteMethod@24
_IoWMIHandleToInstanceName@12
_IoWMIOpenBlock@12
_IoWMIQueryAllData@12
_IoWMIQueryAllDataMultiple@16
_IoWMIQuerySingleInstance@16
_IoWMIQuerySingleInstanceMultiple@20
_IoWMIRegistrationControl@8
_IoWMISetNotificationCallback@12
_IoWMISetSingleInstance@20
_IoWMISetSingleItem@24
_IoWMISuggestInstanceName@16
_IoWMISystemControl@12
_IoWMIWriteEvent@4
_IoWithinStackLimits@8
_IoWriteCrashDump@40
_IoWriteDeferredLiveDumpData@4
_IoWriteErrorLogEntry@4
_IoWriteKsrPersistentMemory@12
_IoWritePartitionTableEx@8
_IopAbortRequest@4
_IopAcquireReferencesFromIoAttributionHandle@12
_IopAcquireReleaseConnectLockInternal@12
_IopAcquireReleaseDispatcherLock@8
_IopAddBootDiskInformation@8
_IopAddBugcheckPnpTriageData@8
_IopAddBugcheckPnpWatchdogTriageData@8
_IopAddBugcheckPowerTriageData@12
_IopAddBugcheckTriageCompletionQueue@4
_IopAddBugcheckTriageDataFromParameters@20
_IopAddBugcheckTriageDevice@4
_IopAddBugcheckTriageDeviceNode@4
_IopAddBugcheckTriageDriver@4
_IopAddBugcheckTriageIrp@8
_IopAddBugcheckTriagePoFxDevice@4
_IopAddBugcheckTriageThread@4
_IopAddBugcheckTriageUnicodeString@8
_IopAddBugcheckTriageWorkQueue@4
_IopAddLiveDumpPagesToPartialKernelDump@20
_IopAddMiniDumpPagesToPartialKernelDump@32
_IopAddPageDumpRange@8
_IopAddPageRangeToPageMaps@20
_IopAddPageToPageMap@28
_IopAddRelationToList@16
_IopAddRemoveReqDescs@16
_IopAddRunTimeTriageDataBlocks@24
_IopAddTriageDumpDataBlock@20
_IopAddTriageDumpDataToPartialKernelDump@8
_IopAdjustFileObjectKeepAliveCount@20
_IopAllocRealFileObject@36
_IopAllocateBackpocketIrp@12
_IopAllocateBootResources@12
_IopAllocateBootResourcesInternal@12
_IopAllocateErrorLogEntry@12
_IopAllocateFileObjectExtension@8
_IopAllocateFoExtensionsOnCreate@20
_IopAllocateGenericTableEntry@8
_IopAllocateIrpCleanup@8
_IopAllocateIrpExReturn@16
_IopAllocateIrpExtension@8
_IopAllocateIrpMustSucceed@8
_IopAllocateIrpPrivate@16
_IopAllocateIrpWithExtension@16
_IopAllocateLegacyBootResources@8
_IopAllocateMiniCompletionPacket@8
_IopAllocatePassiveInterruptBlock@8
_IopAllocateRelationList@4
_IopAllocateReserveIrp@12
_IopAllocateUnicodeString@8
_IopAllowRemoteDASD@0
_IopApcHardError@4
_IopAppendLegacyVeto@8
_IopApplyMutableTagToRegistryKey@4
_IopAssignBootDriveLetter@0
_IopAttachDeviceToDeviceStackSafe@12
_IopBoostThreadCallback@12
_IopBootAllocation@4
_IopBootLog@8
_IopBootLogToFile@4
_IopBuildAsynchronousFsdRequest@28
_IopBuildDeviceIoControlRequest@40
_IopBuildFullDriverPath@12
_IopBuildGlobalSymbolicLinkString@8
_IopBuildSpecialMemoryTable@4
_IopBuildSynchronousFsdRequest@32
_IopBusNumberInitialize@0
_IopBusNumberPackResource@16
_IopBusNumberScoreRequirement@4
_IopBusNumberUnpackRequirement@20
_IopBusNumberUnpackResource@12
_IopCachePreviousBootData@4
_IopCalculateStackInformation@16
_IopCallArbiter@20
_IopCallBootDriverReinitializationRoutines@0
_IopCallDriverReference@20
_IopCallDriverReinitializationRoutines@4
_IopCancelAlertedRequest@8
_IopCancelApcRequired@12
_IopCancelIrpsInCurrentThreadList@16
_IopCancelIrpsInCurrentThreadListApcRoutine@12
_IopCancelIrpsInCurrentThreadListDummyApc@20
_IopCancelIrpsInCurrentThreadListSpecialApc@20
_IopCancelIrpsInFileObjectList@24
_IopCancelIrpsInThreadList@8
_IopCancelIrpsInThreadListForCurrentProcess@8
_IopCancelPendingEject@4
_IopCancelSynchronousIrpsForThread@8
_IopCancelWaitCompletionPacket@12
_IopCaptureObjectName@4
_IopChangeInterfaceType@8
_IopCheckAndUpdateStopOnSymlinkEcp@12
_IopCheckBackupRestorePrivilege@16
_IopCheckDeviceAndDriver@8
_IopCheckDeviceFlags@8
_IopCheckDeviceType@8
_IopCheckDiskName@12
_IopCheckFileObjectExtensionFlag@8
_IopCheckGetQuotaBufferValidity@12
_IopCheckHandleForRevocation@16
_IopCheckHardErrorEmpty@0
_IopCheckIfMergeRequired@8
_IopCheckInitiatorHint@8
_IopCheckListForCancelableIrp@24
_IopCheckSessionDeviceAccess@4
_IopCheckStackForTransactionSupport@4
_IopCheckTopDeviceHint@16
_IopCheckUnloadDriver@8
_IopCheckVpbMounted@16
_IopChildToRootTranslation@24
_IopCleanupExtraCreateParameters@4
_IopCleanupFileObjectIosbRange@4
_IopCleanupNotifications@8
_IopCleanupProcessResources@12
_IopCleanupSelectedConfiguration@8
_IopCloseFile@16
_IopCloseFileObjectExtension@4
_IopCloseIoCompletion@16
_IopCloseWaitCompletionPacket@16
_IopCombineCmResourceList@8
_IopCombineLegacyResources@4
_IopCommitConfiguration@4
_IopCompareIosbRanges@12
_IopCompareReqAlternativePriority
_IopCompleteIrpInFileObjectList@12
_IopCompletePageWrite@20
_IopCompleteRequest@20
_IopCompleteUnloadOrDelete@12
_IopConnectInterrupt@44
_IopConnectInterruptFullySpecified@48
_IopConnectLineBasedInterrupt@28
_IopConnectLinkTrackingPort@4
_IopConnectMessageBasedInterrupt@32
_IopConstructInMemoryDumpHeader@0
_IopCopyBootLogRegistryToFile@0
_IopCopyOffloadCapable@8
_IopCopyOverNewPath@20
_IopCreateArcName@8
_IopCreateArcNames@4
_IopCreateArcNamesCd@4
_IopCreateArcNamesDisk@4
_IopCreateCmResourceList@16
_IopCreateDefaultDeviceSecurityDescriptor@28
_IopCreateFile@64
_IopCreateLegacyDeviceIds@12
_IopCreatePassiveInterruptRealtimeThreads@8
_IopCreateRegistryKeyEx@24
_IopCreateRootDirectories@0
_IopCreateRootEnumeratedDeviceObject@4
_IopCreateSecureDeviceClassSettings@12
_IopCreateSecurityCheck@44
_IopCreateSecurityDescriptorPerType@16
_IopCreateUmdfDirectory@0
_IopCreateUnicodeFromAnsiBuffer@8
_IopCreateVpb@4
_IopCsqCancelRoutine@8
_IopDeallocateApc@20
_IopDebugPrint
_IopDecDisableableDepends@4
_IopDecrementDeviceObjectHandleCount@4
_IopDecrementDeviceObjectRef@12
_IopDecrementDeviceObjectRefCount@8
_IopDecrementVpbRefCount@8
_IopDeleteDevice@4
_IopDeleteDriver@4
_IopDeleteFile@4
_IopDeleteFileObjectExtension@4
_IopDeleteIoCompletion@4
_IopDeleteIoCompletionInternal@8
_IopDequeueIrpFromFileObject@8
_IopDequeueIrpFromThread@4
_IopDereferencePassiveInterruptBlock@4
_IopDereferenceVpbAndFree@4
_IopDestroyActiveConnectBlock@4
_IopDestroyDeviceNode@4
_IopDeviceEjectComplete@12
_IopDeviceInterfaceFilterCallback@16
_IopDeviceObjectFromSymbolicName@4
_IopDeviceRemovalForResetComplete@4
_IopDisableCrashDump@0
_IopDisableTimer@4
_IopDisassociateThreadIrp@0
_IopDiskIoAttributionTreeCompare@8
_IopDispatchSessionNotifications@12
_IopDmaInitialize@0
_IopDmaOverrideConflict@8
_IopDmaPackResource@16
_IopDmaScoreRequirement@4
_IopDmaUnpackRequirement@20
_IopDmaUnpackResource@12
_IopDoDeferredSetInterfaceState@4
_IopDoFullTraverseCheck@12
_IopDropIrp@8
_IopDumpCallAddPagesCallbacks@4
_IopDumpCallRemovePagesCallbacks@4
_IopDuplicateDetection@16
_IopEfiStatusToNTSTATUS@4
_IopEjectDevice@8
_IopEliminateBogusConflict@8
_IopEnableTimer@4
_IopEnumerateEnvironmentVariablesHal@24
_IopEnumerateEnvironmentVariablesSysEnv@24
_IopEnumerateEnvironmentVariablesTrEE@24
_IopEnumerateRelations@20
_IopErrorLogConnectSession@0
_IopErrorLogDpc@16
_IopErrorLogGetEntry@0
_IopErrorLogQueueRequest@0
_IopErrorLogRequeueEntry@4
_IopErrorLogThread@4
_IopEtwEnableCallback@36
_IopExceptionCleanup@16
_IopExceptionFilter@8
_IopExceptionFilterMode@4
_IopExecuteHardwareProfileChange@20
_IopExecuteHwpDefaultSelect@12
_IopFastQueryNetworkAttributes@36
_IopFetchConfigurationInformation@28
_IopFileObjectRevoked@4
_IopFileUtilClearAttributes@8
_IopFileUtilRename@12
_IopFileUtilWalkDirectoryTreeBottomUp@16
_IopFileUtilWalkDirectoryTreeHelper@28
_IopFileUtilWalkDirectoryTreeTopDown@16
_IopFillTriageDumpDataBlocks@16
_IopFilterResourceRequirementsCall@12
_IopFindActiveConnectBlockLocked@4
_IopFindDiskIoAttribution@4
_IopFindLegacyBusDeviceNode@8
_IopFindLegacyDeviceNode@16
_IopFindMatchingComponentsLengthR@8
_IopFindPassiveInterruptBlock@4
_IopFindPassiveInterruptBlockLocked@4
_IopFindResourceHandlerInfo@16
_IopFindSystemDevice@8
_IopFreeBackpocketIrp@8
_IopFreeBandwidthContract@8
_IopFreeCompletionListPackets@8
_IopFreeGenericTableEntry@8
_IopFreeIrp@4
_IopFreeIrpAndMdls@4
_IopFreeIrpExtension@12
_IopFreeMiniCompletionPacket@4
_IopFreePoDeviceNotifyListHead@4
_IopFreeRelationList@4
_IopFreeReqAlternative@4
_IopFreeReqList@4
_IopFreeReserveIrp@8
_IopFreeResetRemovalContext@4
_IopFreeWaitCompletionPacket@8
_IopGenericPackResource@16
_IopGenericScoreRequirement@4
_IopGenericTranslateOrdering@8
_IopGenericUnpackRequirement@20
_IopGenericUnpackResource@12
_IopGetBasicInformationFile@8
_IopGetBootDiskInformation@8
_IopGetBootDiskInformationLite@4
_IopGetDeviceAttachmentBase@4
_IopGetDeviceInterfaces@24
_IopGetDevicePDO@4
_IopGetDriverNameFromKeyNode@8
_IopGetDriverPathInformation@12
_IopGetEnvironmentVariableHal@28
_IopGetEnvironmentVariableSysEnv@28
_IopGetEnvironmentVariableTrEE@28
_IopGetFileInformation@20
_IopGetFileObjectExtension@12
_IopGetFileVolumeNameInformation@16
_IopGetFsRegistrationInProgress@0
_IopGetInterruptConnectionData@8
_IopGetLegacyVetoListDeviceNode@8
_IopGetLegacyVetoListDrivers@4
_IopGetMaxValidMemorySize@8
_IopGetMaxValidMemorySizeDown@8
_IopGetModeInformation@4
_IopGetMountFlag@4
_IopGetNetworkOpenInformation@8
_IopGetNumaNodeInformation@8
_IopGetPersistedStateLocation@20
_IopGetPhysicalMemoryBlock@0
_IopGetRegistryKeyInformation@8
_IopGetRegistryValue@16
_IopGetRegistryValues@12
_IopGetRelatedFileName@16
_IopGetRootDevices@4
_IopGetSecurityDescriptorInformation@12
_IopGetSessionIdFromPDO@4
_IopGetSessionIdFromSymbolicName@4
_IopGetSetObjectId@16
_IopGetSetSecurityObject@36
_IopGetSetSpecificExtension@24
_IopGetSetStreamIdentifier@20
_IopGetThreadActiveConsoleId@4
_IopGetVolumeId@12
_IopGraftName@12
_IopHardErrorThread@4
_IopIncDisableableDepends@4
_IopIncrementDeviceObjectRefCount@8
_IopIncrementVpbRefCount@8
_IopInitActivityIdIrp@4
_IopInitCrashDumpDuringSysInit@4
_IopInitCrashDumpRegCallback@24
_IopInitDumpCapsuleSupport@0
_IopInitializeActiveConnectBlock@8
_IopInitializeActiveConnectList@0
_IopInitializeAttributesAndCreateObject@12
_IopInitializeBootDrivers@8
_IopInitializeBootLogging@8
_IopInitializeBuiltinDriver@24
_IopInitializeCrashDump@12
_IopInitializeDeviceInstanceKey@12
_IopInitializeInMemoryDumpData@0
_IopInitializeIoRate@0
_IopInitializeOfflineCrashDump@4
_IopInitializePassiveInterruptServices@0
_IopInitializePlugPlayServices@8
_IopInitializeReserveIrps@4
_IopInitializeResourceMap@4
_IopInitializeSessionNotifications@0
_IopInitializeSystemDrivers@0
_IopInitializeSystemVariableService@0
_IopInitializeTriageDumpData@0
_IopInsertActiveConnectListLocked@4
_IopInsertIrpInCompletionQueue@12
_IopInsertLegacyBusDeviceNode@12
_IopInsertPassiveInterruptBlock@8
_IopInsertRemoveDevice@12
_IopInvalidDeviceRequest@8
_IopInvalidateVolumesForDevice@4
_IopIoRateStartRateControl@28
_IopIrpExtensionControl@8
_IopIrpHasExtensionType@8
_IopIrpHasValidCombinationOfExtensionTypes@8
_IopIrpStackProfilerDpcRoutine@16
_IopIrqInitialize@0
_IopIrqPackResource@16
_IopIrqScoreRequirement@4
_IopIrqTranslateOrdering@8
_IopIrqUnpackRequirement@20
_IopIrqUnpackResource@12
_IopIsActivityTracingEnabled@0
_IopIsActivityTracingEventEnabled@4
_IopIsAddressRangeValid@8
_IopIsBitlockerOn@0
_IopIsDescendantNode@8
_IopIsFileOpenOrSection@16
_IopIsKnownGoodLegacyFsFilter@4
_IopIsNotifyInBroadcast@8
_IopIsPciRootBus@8
_IopIsRelationInList@8
_IopIsReportedAlready@20
_IopIsRootEnumeratedDeviceObjectActive@4
_IopIssueSystemEnvironmentCallout@4
_IopIssueSystemEnvironmentRequest@36
_IopIssueTrEERequest@36
_IopKeepAliveWorker@4
_IopLegacyResourceAllocation@20
_IopLiveDumpAddTriageDumpData@8
_IopLiveDumpAllocAndInitResources@4
_IopLiveDumpAllocateDumpBuffers@4
_IopLiveDumpAllocateFromVMMemoryPartition@12
_IopLiveDumpAllocateIptBuffers@4
_IopLiveDumpAllocateMappingResources@4
_IopLiveDumpBufferDumpData@8
_IopLiveDumpCallRemovePagesCallbacks@4
_IopLiveDumpCaptureMemoryPages@4
_IopLiveDumpCorralDpc@16
_IopLiveDumpCorralProcessors@4
_IopLiveDumpDiscardSecondaryDataBuffersRange@4
_IopLiveDumpDiscardVirtualAddressRange@12
_IopLiveDumpEndMirroringCallback@4
_IopLiveDumpEstimateMemoryPages@4
_IopLiveDumpFreeDumpBuffers@4
_IopLiveDumpFreeIoSpaceRanges@8
_IopLiveDumpFreeMappingResources@4
_IopLiveDumpGenerateIptSecondaryData@0
_IopLiveDumpGetCapturePages@24
_IopLiveDumpGetCapturePagesNoLock@24
_IopLiveDumpGetMillisecondCounter@4
_IopLiveDumpInitRegistrySettings@4
_IopLiveDumpInitiateCorralStateChange@12
_IopLiveDumpIsTracingEnabled@0
_IopLiveDumpIsUnderMemoryPressure@12
_IopLiveDumpLockPages@0
_IopLiveDumpMarkDeviceNode@8
_IopLiveDumpMarkImportantDumpData@8
_IopLiveDumpMarkLoadedModuleList@4
_IopLiveDumpMarkProcessorData@8
_IopLiveDumpMarkRequiredDumpData@8
_IopLiveDumpMirrorPhysicalMemoryCallback@16
_IopLiveDumpOpenVMMemoryPartition@4
_IopLiveDumpPopulateBitmapForDump@4
_IopLiveDumpProcessCorralStateChange@8
_IopLiveDumpReleaseResources@4
_IopLiveDumpRemoveSystemCacheFromDump@12
_IopLiveDumpResetCorralContext@4
_IopLiveDumpStartDumpDataBuffering@4
_IopLiveDumpStartMirroringCallback@0
_IopLiveDumpTrace@4
_IopLiveDumpTraceAllocationFromVMMemoryPartitionFailure@4
_IopLiveDumpTraceBufferAllocation@4
_IopLiveDumpTraceBufferEstimation@4
_IopLiveDumpTraceCaptureDumpDataBufferingDuration@4
_IopLiveDumpTraceCaptureGenerateIptSecondaryDataDuration@12
_IopLiveDumpTraceCaptureMemoryPages@4
_IopLiveDumpTraceCaptureProcessorContextDuration@12
_IopLiveDumpTraceCorralProcessorsDuration@36
_IopLiveDumpTraceDumpFileWriteEnd@12
_IopLiveDumpTraceEstimatedAndAllocatedPageCount@12
_IopLiveDumpTraceInterfaceEnd@12
_IopLiveDumpTraceInterfaceStart@4
_IopLiveDumpTraceMarkImportantDumpDataDuration@12
_IopLiveDumpTraceMarkRequiredDumpDataDuration@12
_IopLiveDumpTraceMirroringPhase0End@4
_IopLiveDumpTraceMirroringPhase1End@4
_IopLiveDumpTraceMirroringStart@4
_IopLiveDumpTraceMmDuplicateMemoryFailure@8
_IopLiveDumpTraceOpenVMMemoryPartitionFailure@4
_IopLiveDumpTracePopulateBitmapForDumpDuration@20
_IopLiveDumpTraceRemovePagesCallbackFailure@12
_IopLiveDumpTraceSystemQuiesceEnd@4
_IopLiveDumpTraceSystemQuiesceStart@4
_IopLiveDumpTraceUncorralProcessorsDuration@36
_IopLiveDumpTracingControlCallback@36
_IopLiveDumpUnLockPages@0
_IopLiveDumpUncorralProcessors@8
_IopLiveDumpUnpackMemoryRun@16
_IopLiveDumpValidateCancelObject@4
_IopLiveDumpValidateDumpFileHandle@4
_IopLiveDumpValidateParameters@12
_IopLiveDumpValidateSecondaryData@4
_IopLiveDumpWriteBuffer@24
_IopLiveDumpWriteDumpFile@4
_IopLiveDumpWriteSecondaryData@20
_IopLoadCrashdmpImage@24
_IopLoadCrashdumpDriver@0
_IopLoadDriver@16
_IopLoadDriverImage@4
_IopLoadFileSystemDriver@4
_IopLoadUnloadDriver@4
_IopLogAuditIoRegisterNotificationEvent@12
_IopLogEventIoMgrMountBegin@12
_IopLogEventIoMgrMountFailed@16
_IopLogEventIoMgrMountSucceeded@12
_IopMarkBootPartition@12
_IopMarkPagesForDeviceNode@8
_IopMarkPagesForDpcData@4
_IopMarkPagesForLoadedDriverInformation@4
_IopMarkPagesForProcessorData@8
_IopMarkPagesForRunTimeTriageDataBlocks@16
_IopMarkRootEnumeratedDeviceObjectUninstalled@4
_IopMarshalIds@16
_IopMaskInterrupt@4
_IopMemFindSuitableRange@8
_IopMemInitialize@0
_IopMemQueryConflict@8
_IopMergeRelationLists@12
_IopMountInitializeVpb@16
_IopMountVolume@20
_IopNotifyAlreadyRegisteredFileSystems@12
_IopOpenLinkOrRenameTarget@16
_IopOpenRegistryKey@20
_IopOpenRegistryKeyEx@16
_IopOpenSystemVariableDevice@12
_IopParentToRawTranslation@4
_IopParseDevice@44
_IopParseFile@44
_IopPassiveInterruptDpc@16
_IopPassiveInterruptRealtimeWorker@4
_IopPassiveInterruptWorker@4
_IopPerfCompletionRoutine@12
_IopPerfLogCallEvent@12
_IopPerfLogCallReturnEvent@8
_IopPnPAddDevice@8
_IopPnPCompleteRequest@12
_IopPnPDispatch@8
_IopPortAddAllocation@8
_IopPortBacktrackAllocation@8
_IopPortFindSuitableRange@8
_IopPortGetNextAlias@16
_IopPortInitialize@0
_IopPostProcessIrp@8
_IopPowerDispatch@8
_IopPrepareDeviceNotify@4
_IopProcessIoTracking@12
_IopProcessIrpStackProfiler@8
_IopProcessSetInterfaceState@12
_IopProcessWorkItem@4
_IopQueryBusResourceUpdateInterface@8
_IopQueryConflictFillConflicts@24
_IopQueryConflictFillString@16
_IopQueryConflictList@24
_IopQueryConflictListInternal@24
_IopQueryDeviceResetRegistrySettings@4
_IopQueryDeviceResources@16
_IopQueryDeviceState@8
_IopQueryDockRemovalInterface@8
_IopQueryEnvironmentVariableInfoHal@24
_IopQueryEnvironmentVariableInfoSysEnv@24
_IopQueryEnvironmentVariableInfoTrEE@24
_IopQueryInformation@20
_IopQueryInterfaceRecurseUp@24
_IopQueryLegacyBusInformation@16
_IopQueryName@24
_IopQueryNameInternal@28
_IopQueryPassiveInterruptRegistryOptions@0
_IopQueryProcessIdsUsingFile@16
_IopQueryProcessorInitValues@4
_IopQueryReconfiguration@8
_IopQueryRegistryKeySystemPath@8
_IopQueryResourceHandlerInterface@16
_IopQuerySecureDeviceClassState@8
_IopQueryVpbFlagsSafe@4
_IopQueryXxxInformation@28
_IopQueueDeviceResetEvent@4
_IopQueueIrpToFileObject@8
_IopQueueThreadIrp@4
_IopQueueWorkItemProlog@12
_IopRaiseHardError@12
_IopRaiseInformationalHardError@12
_IopReadDumpRegistry@8
_IopReadyDeviceObjects@4
_IopRearrangeReqList@4
_IopReassignSystemRoot@8
_IopRecordIoAttribution@12
_IopReferenceDriverObjectByName@4
_IopReferenceFileObject@20
_IopReferenceIoAttributionFromProcess@12
_IopReferenceVerifyVpb@12
_IopRegisterDeviceInterface@24
_IopRegistryCallback@4
_IopRegistryInitializeCallbacks@0
_IopRegistryOpenDeepestPath@12
_IopReleaseDeviceResources@8
_IopReleaseFileObjectLock@4
_IopReleaseFilteredBootResources@8
_IopReleaseResources@4
_IopRemoveCurrentRelationFromList@12
_IopRemoveDevice@8
_IopRemoveDeviceRelationsFromList@4
_IopRemoveDumpCapsuleSupport@0
_IopRemoveHardErrorPacket@0
_IopRemoveLegacyDeviceNode@8
_IopRemovePageDumpRange@8
_IopRemovePageFromPageMap@20
_IopRemoveRelationFromList@8
_IopRemoveTimerFromTimerList@4
_IopReplaceCompletionPort@12
_IopReplaceSeperatorWithPound@8
_IopReplaceSymlinkPath@28
_IopReportBootResources@12
_IopResetEvent@4
_IopResourceRequirementsChanged@8
_IopResourceRequirementsListToReqList@8
_IopResurrectDriver@4
_IopRetestConfiguration@12
_IopRetrieveSystemDeviceName@16
_IopRetrieveTransactionParameters@16
_IopRetryDeviceRemovalForReset@4
_IopRetryDeviceRemovalForResetDpc@16
_IopReverseEnumerationOrder@8
_IopRevokeFileObjectForProcess@8
_IopSafebootDriverLoad@8
_IopSaveRestoreConfiguration@16
_IopSelectNextConfiguration@12
_IopSendMessageToTrackService@12
_IopSessionChangeWorker@4
_IopSetAllRelationsTags@8
_IopSetDeviceSecurityDescriptor@20
_IopSetDeviceSecurityDescriptors@24
_IopSetDiskIoAttributionExtension@16
_IopSetDiskIoAttributionFromProcess@8
_IopSetDriverFlagsExtension@12
_IopSetEaOrQuotaInformationFile@20
_IopSetEnvironmentVariableHal@28
_IopSetEnvironmentVariableSysEnv@28
_IopSetEnvironmentVariableTrEE@28
_IopSetFileMemoryPartitionInformation@12
_IopSetFileObjectExtensionFlag@12
_IopSetFileObjectIosbRange@8
_IopSetFsRegistrationInProgress@4
_IopSetLegacyResourcesFlag@4
_IopSetLockOperationProcess@12
_IopSetRelationsTag@12
_IopSetRemoteLink@12
_IopSetTypeSpecificFoExtension@12
_IopSetupArbiterAndTranslators@4
_IopShutdownBaseFileSystems@4
_IopSizeTriageDumpDataBlocks@20
_IopSkipCompletionPort@8
_IopSortRelationListForRemove@4
_IopStartApcHardError@4
_IopStartNextPacket@8
_IopStartNextPacketByKey@12
_IopStartNextPacketByKeyEx@12
_IopStoreArcInformation@4
_IopStoreSystemPartitionInformation@8
_IopSymlinkAllocateAndAddECP@12
_IopSymlinkApplyToOpenedName@24
_IopSymlinkCleanupECP@8
_IopSymlinkCreateECP@20
_IopSymlinkEnforceEnabledTypes@12
_IopSymlinkFreeRelatedMountPointChain@4
_IopSymlinkGetECP@8
_IopSymlinkGetMostRecentlyUsedName@4
_IopSymlinkGetRelatedMountPoint@8
_IopSymlinkInitializeSymlinkInfo@40
_IopSymlinkProcessReparse@16
_IopSymlinkPropagateToExtensionIfNeeded@12
_IopSymlinkQueryEnabledClasses@4
_IopSymlinkRegistryCallback@4
_IopSymlinkRegistryInitCallback@4
_IopSymlinkRememberJunction@16
_IopSymlinkRemoveECP@8
_IopSymlinkSetFoExtension@8
_IopSymlinkUpdateECP@24
_IopSynchronousApiServiceTail@24
_IopSynchronousCall@20
_IopSynchronousServiceTail@28
_IopSystemControlDispatch@8
_IopTestConfiguration@12
_IopThreadStart@4
_IopTimerDispatch@16
_IopTrackLink@24
_IopTranslateAndAdjustReqDesc@12
_IopTranslateBusAddress@20
_IopTranslatorHandlerCm@28
_IopTranslatorHandlerIo@20
_IopUnMarshalIds@16
_IopUncacheInterfaceInformation@8
_IopUnloadDriver@8
_IopUnloadSafeCompletion@12
_IopUnmaskInterrupt@4
_IopUpdateFunctionPointers@12
_IopUpdateMinidumpContext@32
_IopUpdateOtherOperationCount@0
_IopUpdateOtherTransferCount@8
_IopUpdateReadOperationCount@0
_IopUpdateReadTransferCount@8
_IopUpdateSecureDeviceClassState@8
_IopUpdateWriteOperationCount@0
_IopUpdateWriteTransferCount@8
_IopUserCompletion@20
_IopUserRundown@4
_IopValidateJunctionTarget@24
_IopValidateQueryInformationParameters@24
_IopVerifyDeviceObjectOnStack@12
_IopVerifyDiskSignature@12
_IopVerifyDriverObjectOnStack@8
_IopWaitAndAcquireFileObjectLock@20
_IopWaitForLockAlertable@12
_IopWaitForSynchronousIo@12
_IopWarmEjectDevice@8
_IopWriteAllocatedResourcesToRegistry@12
_IopWriteCapsuleTriageDumpToFirmware@32
_IopWriteDriverList@16
_IopWriteResourceList@24
_IopWriteTriageDumpToFirmware@4
_IopXxxControlFile@44
_IopfCallDriver@8
_IovAllocateIrp@16
_IovAllocateMdl@24
_IovAllocateWorkItem@8
_IovAttachDeviceToDeviceStack@8
_IovBuildAsynchronousFsdRequest@24
_IovBuildDeviceIoControlRequest@36
_IovBuildSynchronousFsdRequest@28
_IovCancelIrp@4
_IovDeleteDevice@8
_IovDetachDevice@8
_IovFreeIrpPrivate@4
_IovInitializeIrp@16
_IovInitializeTimer@12
_IovUnloadDrivers@0
_IovUtilFlushStackCache@8
_IovUtilGetBottomDeviceObjectWithTag@8
_IovUtilGetLowerDeviceObjectWithTag@8
_IovUtilGetUpperDeviceObjectWithTag@8
_IovUtilIsDeviceObjectMarked@8
_IovUtilIsInFdoStack@4
_IovUtilIsPdo@4
_IovUtilIsVerifiedDeviceStack@4
_IovUtilIsWdmStack@4
_IovUtilMarkDeviceObject@8
_IovUtilMarkStack@16
_IovUtilMultipleDevicesSameDriver@4
_IovUtilRelateDeviceObjects@12
_IovUtilWatermarkIrp@8
_IovpAdvanceStackDownwards@32
_IovpBuildDriverObjectList@20
_IovpCallDriver1@4
_IovpCallDriver2@8
_IovpCheckIrpForCriticalTracking@4
_IovpCompleteRequest1@12
_IovpCompleteRequest2@8
_IovpCompleteRequest3@12
_IovpCompleteRequest4@16
_IovpCompleteRequest5@4
_IovpCompleteRequest@12
_IovpExamineDevObjForwarding@8
_IovpExamineIrpStackForwarding@32
_IovpInternalCompletionTrap@12
_IovpLocalCompletionRoutine@12
_IovpLogStackCallout@4
_IovpLogStackTrace@4
_IovpPacketFromIrp@4
_IovpSessionDataCreate@12
_IovpSessionDataDereference@4
_IovpUnloadDriver@4
_IovpUtilMarkDeviceObject@8
_IovpValidateDeviceObject@4
_IovpValidateStatusInformation@16
_IpmiHwContextInitialized@4
_IpmiHwInitializeContext@8
_IpmiHwKcsInit@12
_IpmiHwSetTimeServicesAvailability@8
_IpmiHwpReadSmbiosConfiguration@4
_IpmiLibAddSelCheckpointRecord@12
_IpmiLibAddSelRecord@16
_IpmiLibGetRelativeTime@0
_IpmiLibKcsIpmiMessageUnpack@8
_IpmiLibReadOneByte@8
_IpmiLibReadSmbiosRecord38@4
_IpmiLibWriteOneByte@12
_IpmiLibpDelay@8
_IpmiLibpGetRegisterSpacing@4
_IpmiLibpGetTimeout@8
_IpmiLibpHandleErrorInterrupt@20
_IpmiLibpHandleReadInterrupt@24
_IpmiLibpHandleSendInterrupt@12
_IpmiLibpKcsBmcTransact@16
_IpmiLibpKcsHandleError@12
_IpmiLibpKcsIpmiMessagePack@8
_IpmiLibpKcsReceiveResponseFromBmc@20
_IpmiLibpKcsRequestAndReceive@12
_IpmiLibpKcsSendRequestToBMC@20
_IpmiLibpKcsSpinRegister@16
_IpmiLibpParseDeviceInfo@8
_IpmiLibpTimeAfter@12
_IsAnyDot@4
_IsArrayType@4
_IsEncodedAttributeChar@4
_IsHangulLV@4
_IsHangulS@4
_IsLegalAttributeChar2@4
_IsLegalAttributeChar@4
_IsRegistryKeyLocked@8
_IsSurrogate@4
_IsValueSizeFixed@4
_KGetAppModelStateSeparatedRegKeyPath@12
_KGetUnlockSetting@12
_KIsSideloadingEnabled@4
_KIsUnlockSettingEnabled@8
_KdAcquireDebuggerLock@4
_KdCallPowerHandlers@4
_KdChangeOption@24
_KdCheckForDebugBreak@0
_KdCopyDataBlock@4
_KdDeregisterPowerHandler@4
_KdDisableDebugger@0
_KdDisableDebuggerWithLock@4
_KdEnableDebugger@0
_KdEnableDebuggerWithLock@4
_KdEnterDebugger@8
_KdExitDebugger@4
_KdGetDebugDevice@0
_KdGetInternalBreakpoint@4
_KdInitSystem@8
_KdIsThisAKdTrap@12
_KdLogDbgPrint@4
_KdPollBreakIn@0
_KdPowerTransition@4
_KdPowerTransitionEx@8
_KdPullRemoteFile@16
_KdPullRemoteFileEx@20
_KdRefreshDebuggerNotPresent@0
_KdRegisterDebuggerDataBlock@12
_KdRegisterPowerHandler@12
_KdReleaseDebuggerLock@4
_KdSendTraceData@8
_KdSetDbgPrintBufferSize@4
_KdSetEventLoggingPresent@4
_KdSetInternalBreakpoint@4
_KdSetOwedBreakpoints@4
_KdSetSpecialCall@8
_KdSystemDebugControl@28
_KdTrap@24
_KdUpdateTimeSlipEvent@4
_KdpAddBreakpoint@20
_KdpAllowDisable@0
_KdpCheckLowMemory@4
_KdpCheckTracePoint@8
_KdpCloseFileCallback@8
_KdpCloseRemoteFile@4
_KdpCommandString@24
_KdpCopyCodeStream@20
_KdpCopyContext@12
_KdpCopyMemoryChunks@28
_KdpCreateFileCallback@16
_KdpCreateRemoteFile@32
_KdpDeleteBreakpoint@4
_KdpDeleteBreakpointRange@8
_KdpFillMemory@12
_KdpGetBusData@12
_KdpGetCallNextOffset@8
_KdpGetContext@12
_KdpGetContextEx@12
_KdpGetExtendedContextLength@8
_KdpGetReturnAddress@4
_KdpGetStateChange@8
_KdpGetVersion@4
_KdpInitializeExtendedContext@8
_KdpInsertBreakpoint@8
_KdpIsBreakpoint@8
_KdpIsSpecialCall@16
_KdpIsTryFinallyReturn@8
_KdpLevelChange@12
_KdpLowRestoreBreakpoint@4
_KdpLowWriteContent@4
_KdpPollBreakInWithPortLock@0
_KdpPrint@32
_KdpPrintString@4
_KdpProcessInternalBreakpoint@4
_KdpPrompt@28
_KdpPromptString@8
_KdpQueryMemory@8
_KdpQuickMoveMemory@12
_KdpReadControlSpace@12
_KdpReadIoSpace@12
_KdpReadIoSpaceExtended@12
_KdpReadMachineSpecificRegister@12
_KdpReadPhysicalMemory@16
_KdpReadPhysicalMemoryLong@12
_KdpReadRemoteFile@24
_KdpReadVirtualMemory@12
_KdpRemoveBreakpoint@8
_KdpReport@24
_KdpReportCommandStringStateChange@12
_KdpReportExceptionStateChange@12
_KdpReportLoadSymbolsStateChange@16
_KdpRestoreAllBreakpoints@0
_KdpRestoreBreakPointEx@12
_KdpRestoreBreakpoint@12
_KdpSanitizeContextFlags@12
_KdpSearchMemory@12
_KdpSearchPhysicalPage@20
_KdpSearchPhysicalPageRange@4
_KdpSendWaitContinue@16
_KdpSetBusData@12
_KdpSetCommonState@12
_KdpSetContext@12
_KdpSetContextEx@12
_KdpSetContextState@8
_KdpSetOwedBreakpoints@4
_KdpStub@24
_KdpSuspendAllBreakpoints@0
_KdpSuspendBreakpoint@4
_KdpSymbol@28
_KdpSysCheckLowMemory@4
_KdpSysGetVersion@4
_KdpSysReadBusData@28
_KdpSysReadControlSpace@24
_KdpSysReadIoSpace@32
_KdpSysReadMsr@8
_KdpSysWriteBusData@28
_KdpSysWriteControlSpace@24
_KdpSysWriteIoSpace@32
_KdpSysWriteMsr@8
_KdpTimeSlipDpcRoutine@16
_KdpTimeSlipWork@4
_KdpTrap@24
_KdpWriteBreakPointEx@12
_KdpWriteBreakpoint@12
_KdpWriteControlSpace@12
_KdpWriteCustomBreakpoint@12
_KdpWriteFileCallback@20
_KdpWriteInstructionBuffer@16
_KdpWriteIoSpace@12
_KdpWriteIoSpaceExtended@12
_KdpWritePhysicalMemory@12
_KdpWriteVirtualMemory@12
_Ke386ConfigureCyrixProcessor@0
_Ke386CyrixId@0
_Ke386GetGdtEntryThread@12
_Ke386GetTr@0
_Ke386IoSetAccessProcess@8
_Ke386QueryIoAccessMap@8
_Ke386SetDescriptorProcess@16
_Ke386SetIoAccessMap@8
_Ke386SetLdtProcess@12
_Ke386SetVdmInterruptHandler@20
_KeAbCrossThreadDelete@8
_KeAbCrossThreadDeleteDpcRoutine@16
_KeAbCrossThreadDeleteNopDpcRoutine@16
_KeAbCrossThreadRelease@12
_KeAbEncodeLockHandle@4
_KeAbEntryFree@12
_KeAbInitializeThreadState@4
_KeAbMarkCrossThreadReleasable@8
_KeAbPostRelease@4
_KeAbPostReleaseEx@8
_KeAbPreAcquire@12
_KeAbPreWait@4
_KeAbProcessBaseIoPriorityChange@12
_KeAbProcessBaseIoPriorityChangeInternal@8
_KeAbProcessEffectiveIoPriorityChange@8
_KeAbThreadAreAllEntriesFree@4
_KeAcquireInterruptSpinLock@4
_KeAcquireSpinLock@8
_KeAcquireSpinLockAtDpcLevel@4
_KeActiveTracepointsPresent@0
_KeAddEnclavePage@24
_KeAddGroupAffinityEx@12
_KeAddProcessorAffinityEx@8
_KeAddProcessorGroupAffinity@8
_KeAddSystemServiceTable@20
_KeAddTriageDumpDataBlock@12
_KeAdjustInterruptTime@12
_KeAdjustTimerDelayProcess@16
_KeAlertResumeThread@4
_KeAlertThread@8
_KeAlertThreadByThreadId@4
_KeAllocateCalloutStack@4
_KeAllocateCalloutStackEx@16
_KeAllocateInterrupt@4
_KeAllocateProcessorProfileStructures@16
_KeAllocateXStateContext@12
_KeAndAffinityEx@12
_KeAndGroupAffinityEx@12
_KeAreAllApcsDisabled@0
_KeAreApcsDisabled@0
_KeAreInterruptsEnabled@0
_KeAttachProcess@4
_KeBalanceSetManager@4
_KeBlockEnclavePage@4
_KeBoostPriorityThread@8
_KeBugCheck2@24
_KeBugCheck@4
_KeBugCheckEx@20
_KeBuildLogicalProcessorSystemInformation@16
_KeCanChangeEnclavePageProtection@8
_KeCancelTimer2@8
_KeCancelTimer@4
_KeCancelTimerInternal@16
_KeCapturePersistentThreadState@32
_KeChangeEnclavePageProtection@8
_KeCheckForTimer@8
_KeCheckProcessorAffinityEx@8
_KeCheckProcessorGroupAffinity@8
_KeCleanupThreadState@4
_KeClearForceIdle@0
_KeClearSystemPriority@4
_KeClockTimerPowerChange@4
_KeComplementAffinityEx@8
_KeComputeSha256@12
_KeConfigureDynamicMemory@12
_KeConfigureHeteroPolicy@4
_KeConfigureHeteroProcessors@12
_KeConnectInterrupt@12
_KeConnectInterruptForHal@4
_KeContextFromKframes@12
_KeContextToKframes@20
_KeConvertAuxiliaryCounterToPerformanceCounter@16
_KeConvertPerformanceCounterToAuxiliaryCounter@16
_KeCopyAffinityEx@8
_KeCopyExceptionRecord@8
_KeCopyPrivilegedPage@28
_KeCountSetBitsAffinityEx@4
_KeCountSetBitsGroupAffinity@4
_KeCpuSetQueryUnparkRecommendation@12
_KeCpuSetReportParkedProcessors@8
_KeCreateEnclave@32
_KeCreateEnclaveMetadataPage@4
_KeDebugReadEnclaveMemory@16
_KeDebugWriteEnclaveMemory@16
_KeDelayExecutionThread@12
_KeDeleteMutant@8
_KeDeleteThread@4
_KeDeregisterBoundCallback@4
_KeDeregisterBugCheckCallback@4
_KeDeregisterBugCheckReasonCallback@4
_KeDeregisterNmiCallback@4
_KeDeregisterObjectNotification@8
_KeDeregisterProcessorChangeCallback@4
_KeDetachProcess@0
_KeDisableInterrupts@0
_KeDisableProfiling@8
_KeDisableQueueingPriorityIncrement@8
_KeDisableTimer2@16
_KeDisconnectInterrupt@12
_KeDispatchSecondaryInterrupt@12
_KeDoesSystemHaveHeterogeneousCoreTypes@0
_KeEnableProfiling@20
_KeEnterCriticalRegion@0
_KeEnterGuardedRegion@0
_KeEnterKernelDebugger@0
_KeEnumerateKernelStackSegments@12
_KeEnumerateNextProcessor@8
_KeEnumerateProcessorDpcs@16
_KeEnumerateQueueApc@16
_KeEstimateClockTickDuration@28
_KeExpandKernelStackAndCallout@12
_KeExpandKernelStackAndCalloutEx@20
_KeExpandKernelStackAndCalloutInternal@20
_KeFindConfigurationEntry@16
_KeFindConfigurationNextEntry@20
_KeFindFirstSetLeftAffinityEx@4
_KeFindFirstSetLeftGroupAffinity@4
_KeFindFirstSetRightAffinityEx@4
_KeFindFirstSetRightGroupAffinity@4
_KeFirstGroupAffinityEx@8
_KeFlushCurrentTb@0
_KeFlushCurrentTbImmediately@0
_KeFlushCurrentTbOnly@4
_KeFlushEntireTb@8
_KeFlushIoBuffers@12
_KeFlushMultipleRangeCurrentTb@12
_KeFlushMultipleRangeTb@16
_KeFlushProcessTb@4
_KeFlushProcessWriteBuffers@4
_KeFlushQueuedDpcs@0
_KeFlushTb@8
_KeFoldProcessStatisticsThread@4
_KeForceAttachProcess@12
_KeForceDetachProcess@8
_KeForceEnableNx@0
_KeForceResumeProcess@4
_KeForceResumeThread@4
_KeFreeCalloutStack@4
_KeFreeInterrupt@4
_KeFreeXStateContext@4
_KeFreezeExecution@8
_KeFreezeProcess@8
_KeFrozenProcessorCount@0
_KeGenericCallDpc@8
_KeGenericProcessorCallback@16
_KeGetAffinitizedInterruptsInfo@4
_KeGetBugMessageText@8
_KeGetClockOwner@0
_KeGetClockTimerResolution@8
_KeGetCurrentNodeNumber@0
_KeGetCurrentProcessorNumberEx@4
_KeGetCurrentStackPointer@0
_KeGetCurrentThread@0
_KeGetDynamicTickDisableReason@0
_KeGetEffectiveIrql@0
_KeGetExecuteOptions@8
_KeGetNextClockTickDuration@0
_KeGetNextKernelStackSegment@12
_KeGetPrcb@4
_KeGetPreviousMode@0
_KeGetProcessQosFromPolicy@4
_KeGetProcessorIndexFromNumber@4
_KeGetProcessorNumberFromIndex@8
_KeGetRecommendedSharedDataAlignment@0
_KeGetSchedulingGroupSize@0
_KeGetSupervisorStateExtensionHost@0
_KeGetTbSize@0
_KeGetXSaveFeatureFlags@0
_KeHwPolicyLocateResource@20
_KeI386GetExceptionChainTerminator@0
_KeI386InitializeSEHOP@0
_KeI386VdmInitialize@0
_KeInitSystem@4
_KeInitThread@36
_KeInitializeAffinityEx@4
_KeInitializeApc@32
_KeInitializeClock@8
_KeInitializeCrashDumpHeader@20
_KeInitializeDeviceQueue@4
_KeInitializeDpc@12
_KeInitializeEnclave@24
_KeInitializeEntropySystem@12
_KeInitializeEnumerationContext@8
_KeInitializeEnumerationContextFromAffinity@12
_KeInitializeEnumerationContextFromGroup@8
_KeInitializeEvent@12
_KeInitializeIRTimer@20
_KeInitializeIdealProcessorAssignmentBlock@4
_KeInitializeInterrupt@52
_KeInitializeInterruptEx@64
_KeInitializeMutant@8
_KeInitializeMutantEx@12
_KeInitializeMutex@8
_KeInitializePriQueue@8
_KeInitializeProcess@24
_KeInitializeProfile@36
_KeInitializeProfileCallback@16
_KeInitializeQueue@8
_KeInitializeSchedulerAssist@4
_KeInitializeSecondaryInterruptServices@4
_KeInitializeSemaphore@12
_KeInitializeThreadedDpc@12
_KeInitializeTimer2@16
_KeInitializeTimer@4
_KeInitializeTimerEx@8
_KeInitializeTimerTable@4
_KeInitializeTriageDumpDataArray@8
_KeInitializeVelocity@0
_KeInsertByKeyDeviceQueue@12
_KeInsertDeviceQueue@8
_KeInsertHeadQueue@8
_KeInsertPriQueue@20
_KeInsertQueue@8
_KeInsertQueueApc@16
_KeInsertQueueDpc@12
_KeInsertQueueEx@16
_KeInsertSchedulingGroup@16
_KeIntSteerAssignCpuSet@12
_KeIntSteerAssignCpuSetForGsiv@12
_KeIntSteerGetSteeringMode@20
_KeIntSteerIsSteeringEnabled@0
_KeIntSteerSnapPerf@8
_KeInterlockedClearProcessorAffinityEx@8
_KeInterlockedSetProcessorAffinityEx@8
_KeInvalidateAllCaches@0
_KeInvalidateRangeAllCachesNoIpi@8
_KeIpiGenericCall@8
_KeIsApcRunningThread@4
_KeIsAttachedProcess@0
_KeIsBugCheckActive@4
_KeIsEmptyAffinityEx@4
_KeIsEqualAffinityEx@8
_KeIsExecutingDpc@0
_KeIsForceIdleEngaged@0
_KeIsNmiCallbackRegisteredForDriver@8
_KeIsNodeInitialized@4
_KeIsProcessPowerThrottled@8
_KeIsSingleGroupAffinityEx@8
_KeIsSubsetAffinityEx@8
_KeIsThreadRunning@4
_KeIsWaitListEmpty@4
_KeKeepProcessorAlive@8
_KeKvaShadowingActive@0
_KeLeaveCriticalRegion@0
_KeLeaveCriticalRegionThread@4
_KeLeaveGuardedRegion@0
_KeLoadMTRR@4
_KeLowerIrql@4
_KeMarkHiberPhase@4
_KeMaskInterrupt@16
_KeNotifyProcessorFreezeSupported@0
_KeNumaInitialize@0
_KeOptimizeProcessorControlState@8
_KeOptimizeSpecCtrlSettings@4
_KeOrAffinityEx@12
_KeOutPageEnclavePage@12
_KePollFreezeExecution@0
_KePrepareClockTimerForIdle@16
_KeProcessorGroupAffinity@8
_KeProcessorProfileControlArea@12
_KeProfileInterruptWithSource@8
_KePulseEvent@12
_KeQueryActiveGroupCount@0
_KeQueryActiveProcessorAffinity@4
_KeQueryActiveProcessorCount@4
_KeQueryActiveProcessorCountEx@4
_KeQueryActiveProcessors@0
_KeQueryActualAffinityThread@8
_KeQueryAffinityProcess@16
_KeQueryAffinityThread@8
_KeQueryAuxiliaryCounterFrequency@4
_KeQueryBasePriorityThread@4
_KeQueryBootTimeValues@12
_KeQueryCpuSetInformation@16
_KeQueryCpuSetsProcess@16
_KeQueryCpuSetsThread@12
_KeQueryCurrentStackInformation@12
_KeQueryCurrentStackInformationEx@16
_KeQueryCycleCounterFrequency@8
_KeQueryCycleTimeStatsProcessor@8
_KeQueryCycleTimeThread@4
_KeQueryDpcWatchdogInformation@4
_KeQueryEffectiveBasePriorityThread@4
_KeQueryEffectivePriorityThread@4
_KeQueryGroupAffinity@4
_KeQueryGroupAffinityEx@8
_KeQueryGroupMaskProcess@4
_KeQueryHardwareCounterConfiguration@12
_KeQueryHighestNodeNumber@0
_KeQueryImplementedPhysicalBits@0
_KeQueryInterruptTime@0
_KeQueryInterruptTimePrecise@4
_KeQueryIntervalProfile@4
_KeQueryKvaShadowInformation@12
_KeQueryLogicalProcessorRelationship@16
_KeQueryMaximumGroupCount@0
_KeQueryMaximumProcessorCount@0
_KeQueryMaximumProcessorCountEx@4
_KeQueryNodeActiveAffinity@12
_KeQueryNodeActiveDpcGangAffinity@12
_KeQueryNodeMaximumProcessorCount@4
_KeQueryNumaCosts@0
_KeQueryNumaGraph@0
_KeQueryOwnerMutant@8
_KeQueryPriorityThread@4
_KeQueryReadyQueueStatsProcessor@20
_KeQueryRuntimeThread@8
_KeQuerySchedulingGroupHistory@16
_KeQuerySchedulingGroupReadyTime@4
_KeQuerySpeculationControlInformation@12
_KeQuerySystemAllowedCpuSetAffinity@8
_KeQuerySystemTime@4
_KeQuerySystemTimePrecise@4
_KeQuerySystemTimeUnsafe@0
_KeQueryTickCount@4
_KeQueryTimeIncrement@0
_KeQueryTimelineBitmapTime@0
_KeQueryTimerDueTime@4
_KeQueryTotalCycleTimeProcessor@4
_KeQueryTotalCycleTimeThread@8
_KeQueryUnbiasedInterruptTime@0
_KeQueryUnbiasedInterruptTimePrecise@4
_KeQueryValuesThread@8
_KeQueryWakeSource@8
_KeRaiseIrql@8
_KeRaiseUserException@4
_KeReadStateEvent@4
_KeReadStateMutant@4
_KeReadStateQueue@4
_KeReadStateSemaphore@4
_KeReadStateTimer@4
_KeReadyThread@4
_KeRebaselineInterruptTime@0
_KeRebaselineSystemTime@0
_KeRecomputeCpuSetAffinityProcess@4
_KeRegisterBoundCallback@4
_KeRegisterBugCheckCallback@20
_KeRegisterBugCheckReasonCallback@16
_KeRegisterNmiCallback@8
_KeRegisterObjectNotification@12
_KeRegisterProcessorChangeCallback@12
_KeRelaxTimingConstraints@4
_KeReleaseInterruptSpinLock@8
_KeReleaseMutant@16
_KeReleaseMutex@8
_KeReleaseSemaphore@16
_KeReleaseSpinLock@8
_KeReleaseSpinLockFromDpcLevel@4
_KeRemoveByKeyDeviceQueue@8
_KeRemoveByKeyDeviceQueueIfBusy@8
_KeRemoveDeviceQueue@4
_KeRemoveEnclavePage@4
_KeRemoveEntryDeviceQueue@8
_KeRemoveGroupAffinityEx@12
_KeRemovePriQueue@16
_KeRemoveProcessorAffinityEx@8
_KeRemoveProcessorGroupAffinity@8
_KeRemoveQueue@12
_KeRemoveQueueApc@4
_KeRemoveQueueDpc@4
_KeRemoveQueueDpcEx@8
_KeRemoveQueueEntry@8
_KeRemoveQueueEx@24
_KeRemoveSchedulingGroup@4
_KeRemoveSystemServiceTable@4
_KeReportCacheIncoherentDevice@0
_KeRequestTerminationProcess@8
_KeRequestTerminationThread@4
_KeReservePrivilegedPages@16
_KeResetEvent@4
_KeRestoreExtendedAndSupervisorState@4
_KeRestoreExtendedProcessorState@4
_KeRestoreFloatingPointState@4
_KeRestoreIptStateAfterProcessorComesOnline@0
_KeRestoreMtrrBroadcast@0
_KeRestoreProcessorSpecificFeatures@0
_KeRestoreSupervisorState@12
_KeResumeClockTimer@0
_KeResumeClockTimerFromIdle@4
_KeResumeClockTimerSafe@0
_KeResumeThread@4
_KeRetryOutswapProcess@4
_KeRevertToUserAffinityThread@0
_KeRevertToUserAffinityThreadEx@4
_KeRevertToUserGroupAffinityThread@4
_KeRundownApcQueues@4
_KeRundownPriQueue@4
_KeRundownQueue@4
_KeRundownQueueCommon@20
_KeRundownQueueEx@8
_KeSaveExtendedAndSupervisorState@12
_KeSaveExtendedProcessorState@12
_KeSaveFloatingPointState@4
_KeSaveIptStateBeforeProcessorGoesOffline@0
_KeSaveStateForHibernate
_KeSaveSupervisorState@12
_KeSelectIdealProcessor@16
_KeSelectInitialIdealProcessorForThread@8
_KeSetActualBasePriorityThread@8
_KeSetAffinityProcess@16
_KeSetAffinityThread@8
_KeSetAutoAlignmentProcess@8
_KeSetBasePriorityThread@8
_KeSetCheckStackExtentsProcess@8
_KeSetCoalescableTimer@24
_KeSetCpuSetsProcess@16
_KeSetDisableBoostThread@8
_KeSetDisableQuantumProcess@8
_KeSetDisableQuantumThread@8
_KeSetDmaIoCoherency@4
_KeSetEvent@12
_KeSetEventBoostPriority@8
_KeSetEventBoostPriorityEx@24
_KeSetExecuteOptions@8
_KeSetForceIdle@0
_KeSetHardwareCounterConfiguration@8
_KeSetHeteroCpuPolicyThread@12
_KeSetIdealProcessorThread@8
_KeSetIdealProcessorThreadByNumber@12
_KeSetIdealProcessorThreadEx@12
_KeSetImportanceDpc@8
_KeSetIntervalProfile@8
_KeSetKernelStackSwapEnable@4
_KeSetLegacyAffinityThread@8
_KeSetMaxDynamicTickDuration@8
_KeSetMaximumCountPriQueue@8
_KeSetPriorityAndQuantumProcess@20
_KeSetPriorityThread@8
_KeSetProcess@4
_KeSetProcessSchedulingGroup@8
_KeSetProfileIrql@4
_KeSetQuantumProcess@8
_KeSetSchedulingGroupCpuRates@12
_KeSetSchedulingGroupCycleNotification@16
_KeSetSchedulingGroupRankBias@8
_KeSetSchedulingGroupWeights@12
_KeSetSelectedCpuSetsThread@12
_KeSetSystemAffinityThread@4
_KeSetSystemAffinityThreadEx@4
_KeSetSystemAllowedCpuSets@12
_KeSetSystemGroupAffinityThread@8
_KeSetSystemTime@12
_KeSetTagCpuSets@16
_KeSetTargetProcessorDpc@8
_KeSetTargetProcessorDpcEx@8
_KeSetTargetProcessorIndexDpc@8
_KeSetThreadBamQosLevel@8
_KeSetThreadChargeOnlySchedulingGroup@8
_KeSetTimeAdjustment@8
_KeSetTimer2@24
_KeSetTimer@16
_KeSetTimerEx@20
_KeSetUserHeteroCpuPolicyThread@8
_KeShadowProcessorArea@4
_KeShouldYieldProcessor@0
_KeSignalCallDpcDone@4
_KeSignalCallDpcSynchronize@4
_KeSpecialUserApcKernelRoutine@20
_KeStackAttachProcess@8
_KeStallWhileFrozen@4
_KeStartAllProcessors@0
_KeStartDynamicProcessor@16
_KeStartIdealProcessorAssignmentBlock@12
_KeStartProfile@4
_KeStartThread@12
_KeStopProfile@4
_KeSubtractAffinityEx@12
_KeSupportedPhysicalAddressBits@0
_KeSuspendClockTimer@0
_KeSuspendClockTimerSafe@0
_KeSuspendThread@4
_KeSwapDirectoryTableBase@12
_KeSwapProcessOrStack@4
_KeSweepLocalCaches@0
_KeSwitchFrozenProcessor@4
_KeSynchronizeAddressPolicy@4
_KeSynchronizeExecution@12
_KeSynchronizeTimeToQpc@8
_KeSynchronizeWithDynamicProcessors@0
_KeSystemFullyCacheCoherent@0
_KeTerminateThread@4
_KeTestAlertThread@4
_KeThawExecution@4
_KeThawProcess@8
_KeTimeOutQueueWaiters@16
_KeTrackEnclaveTbFlush@4
_KeTransitionProcessorParkState@8
_KeTryToFreezeThreadStack@8
_KeTryToInsertQueueApc@12
_KeUninitThread@4
_KeUnmaskInterrupt@12
_KeUnstackDetachProcess@4
_KeUpdateGroupSchedulingConstants@4
_KeUpdatePendingQosRequest@4
_KeUpdateThreadCpuSets@4
_KeUpdateThreadSchedulingProperties@12
_KeUpdateThreadTag@8
_KeUpdateTotalCyclesCurrentThread@8
_KeUserModeCallback@20
_KeValidateBugCheckCallbackRecord@12
_KeVdmInsertQueueApc@32
_KeVerifyContextRecord@20
_KeVerifyGroupAffinity@8
_KeWaitForAlertByThreadId@12
_KeWaitForMultipleObjects@32
_KeWaitForSingleObject@20
_KeWriteProtectPAT@4
_KeXorAffinityEx@12
_KeYieldExecution@4
_KeYieldProcessorEx@4
_KevSkipVerification@0
_Ki386AdjustEsp0@4
_Ki386AdlibEmulation@12
_Ki386CheckDivideByZeroTrap@4
_Ki386DispatchOpcode@4
_Ki386DispatchOpcodeV86@4
_Ki386EnableCurrentLargePage@8
_Ki386EnableDE@4
_Ki386EnableGlobalPage@4
_Ki386FatalExceptionHandler@16
_Ki386FlushTargetDescriptors@16
_Ki386GetSelectorParameters@16
_Ki386LoadTargetInt21Entry@16
_Ki386LoadTargetLdtr@16
_Ki386VdmDispatchIo@20
_Ki386VdmDispatchStringIo@32
_Ki386VdmEnablePentiumExtentions@4
_Ki386VdmReflectException@4
_Ki386VdmReflectException_A@4
_Ki386VdmSegmentNotPresent@0
_KiAbApplyWakeupBoost@12
_KiAbCleanupThreadState@4
_KiAbCompareSnappedEntryState@8
_KiAbCpuBoostOwners@20
_KiAbCrossThreadRelease@12
_KiAbDeferredProcessingWorker@16
_KiAbDetermineMaxWaiterPriority@8
_KiAbDetermineMinOwnerCpuPriority@8
_KiAbEntryGetCpuPriorityKey@4
_KiAbEntryGetLockedHeadEntry@12
_KiAbEntryRemoveFromTree@4
_KiAbEntryUpdateOwnerTreePosition@8
_KiAbEntryUpdateWaiterTreePosition@8
_KiAbEntryVerifyFree@8
_KiAbFindWakeupLockEntry@8
_KiAbForceProcessLockEntry@4
_KiAbIoBoostOwners@20
_KiAbOwnerComputeCpuPriorityKey@4
_KiAbProcessThreadLocks@28
_KiAbProcessThreadPriorityModification@12
_KiAbPropagateBoosts@12
_KiAbQueueAutoBoostDpc@4
_KiAbSetMinimumThreadPriority@24
_KiAbThreadBoostIoPriority@16
_KiAbThreadClearAcquiredLockEntry@12
_KiAbThreadGetIoQoSPriority@4
_KiAbThreadInsertList@12
_KiAbThreadRemoveBoosts@12
_KiAbThreadUnboostCpuPriority@8
_KiAbThreadUnboostIoPriority@8
_KiAbTryDecrementIoWaiterCounts@8
_KiAbTryIncrementIoWaiterCounts@8
_KiAbWaiterComputeCpuPriorityKey@4
_KiAcquireInterruptConnectLock@12
_KiAcquireKobjectLockSafe@4
_KiAcquireReleaseDpcData@4
_KiAcquireReleaseObjectRundownLockExclusive@4
_KiAcquireReleaseThreadLock@4
_KiAcquireSecondaryPassiveConnectLock@4
_KiAcquireThreadLock@4
_KiAcquireThreadStateLock@12
_KiAcquireTimer2CollectionLockIfInserted@4
_KiAcquireTimer2LockUnlessDisabled@4
_KiAddProcessorToGroupDatabase@8
_KiAddProcessorToSoftwareInterruptBatch@8
_KiAddSynchCounters@8
_KiAddThreadToPrcbQueue@20
_KiAddThreadToReadyQueue@20
_KiAddThreadToScbQueue@16
_KiAdjustProcessIdealProcessorSetsForThreadCreation@4
_KiAdjustSimultaneousMultiThreadingCharacteristics@0
_KiAdjustThreadTimer@20
_KiAdjustTimer2DueTimes@4
_KiAdjustTimerDueTimes@12
_KiAdjustTimersAfterDripsExit@12
_KiAllProcessorsStarted@0
_KiAllocateCpuSetData@4
_KiAltSystemService
_KiAltSystemServiceShadow
_KiApplyForegroundBoostThread@8
_KiAssignAdjustableNodes@16
_KiAssignAllNodesToGroup0@0
_KiAssignFixedNodes@24
_KiAssignSchedulingGroupWeights@12
_KiAttachProcess@20
_KiBalanceSetManagerDeferredRoutine@16
_KiBeginDpcLog@8
_KiBeginThreadWait@16
_KiBugCheck2@24
_KiBugCheckAnsiToUnicode@8
_KiBugCheckConvertParameterValueToUnicodeString@8
_KiBugCheckConvertProgressValueToUnicodeString@8
_KiBugCheckDebugBreak@4
_KiBugCheckProgress@4
_KiBugCheckUnicodeToAnsi@12
_KiBugCheckWriteCrashDump@4
_KiBugcheckUnloadDebugSymbols@0
_KiCalibrateTimeAdjustment@4
_KiCallUserMode@16
_KiCallbackReturn
_KiCallbackReturnShadow
_KiCancelTimer@8
_KiChainedDispatch@0
_KiChargeSchedulingGroupCycleTime@8
_KiCheckAndRearmForceIdle@0
_KiCheckDueTimeExpired@16
_KiCheckForAtlThunk@8
_KiCheckForDuplicateBugCheckCallback@8
_KiCheckForEffectivePriorityChange@8
_KiCheckForKernelApcDelivery@0
_KiCheckForMaxOverQuotaScb@4
_KiCheckForPendingQosUpdate@4
_KiCheckForTimerExpiration@4
_KiCheckGroupSchedulingQuantumEnd@8
_KiCheckIfStackExpandCalloutActive@4
_KiCheckKeepAlive@4
_KiCheckMaxOverQuotaTransition@8
_KiCheckMicrocode@4
_KiCheckPreferredHeteroProcessor@12
_KiCheckStall@8
_KiCheckThreadAffinity@4
_KiCheckWaitNext@20
_KiChooseLowestRankedThread@12
_KiChooseTargetProcessor@20
_KiCollectTriageDumpDataBlocks@8
_KiCommitNodeAssignment@4
_KiCommitThreadWait@24
_KiCompareFixedMtrr@8
_KiCompareVarMtrr@0
_KiCompleteDirectSwitchThread@8
_KiCompleteKernelInit@12
_KiComputeCpuSetAffinity@4
_KiComputeCpuSetAffinityMask@16
_KiComputeGroupSchedulingRank@12
_KiComputeNewPriority@8
_KiComputeNewSystemTime@8
_KiComputeNumaCosts@0
_KiComputePriorityFloor@8
_KiComputeProcessorDataSize@4
_KiComputeQuantumTargetThread@20
_KiComputeSharedReadyQueueAffinityThread@8
_KiComputeThreadAffinity@4
_KiComputeTopologyConstants@48
_KiConfigureAllSchedulingInformation@0
_KiConfigureCpuSetSchedulingInformation@4
_KiConfigureDynamicProcessor@0
_KiConfigureHeteroProcessorsTarget@16
_KiConfigureInitialNodes@4
_KiConfigureNodeSchedulingInformation@4
_KiConfigureProcessorBlock@8
_KiConfigureSchedulingInformation@8
_KiConnectInterruptInternal@8
_KiConnectSecondaryInterrupt@4
_KiConnectVectorAndInterruptObject@8
_KiContextFromNpxFrame@20
_KiContextToNpxFrame@20
_KiContinue@12
_KiContinuePreviousModeUser@16
_KiConvertDynamicHeteroPolicy@12
_KiCopyCounters@4
_KiCopyCountersWorker@8
_KiCreateCpuSetForProcessor@4
_KiDebugService
_KiDebugServiceShadow
_KiDeliverApc@12
_KiDeregisterNmiSxCallback@12
_KiDetachProcess@8
_KiDetectAccessBitErrata@4
_KiDetectAmdNonArchSsbdSupport@8
_KiDetectAmdSsbdSupport@8
_KiDetectFpuLeakage@0
_KiDetectHardwareSpecControlFeatures@20
_KiDetectKvaLeakage@4
_KiDetectTsx@0
_KiDisableCacheErrataSource@0
_KiDisableFgBoostDecayRegistryChangeHandler@4
_KiDisconnectInterruptCommon@12
_KiDisconnectInterruptInternal@8
_KiDisconnectSecondaryInterrupt@8
_KiDisconnectSecondaryInterruptInternal@8
_KiDispatchException@20
_KiDispatchInterrupt@4
_KiDispatchPassiveInterrupts@4
_KiDisplayBlueScreen@4
_KiDoesProcessorMatchErrata@8
_KiDpcWatchdog@16
_KiDpcWatchdogCaptureStack@4
_KiDummyDoubleFaultHandler@0
_KiDummyNmiHandler@0
_KiDumpParameterImages@16
_KiDynamicProcessorAddNotification@24
_KiEmulateAtlThunk@20
_KiEnableFastSyscallReturn@0
_KiEnableGroupScheduling@0
_KiEnableHeadlessBlueScreen@0
_KiEnableKvaShadowing@8
_KiEnableNpxStateSwitching@0
_KiEnableX87Clearing@0
_KiEnableXSave@0
_KiEncls@16
_KiEnclsDebugRead@16
_KiEnclsStatus@4
_KiEndCounterAccumulation@4
_KiEndDebugAccumulation@4
_KiEndThreadCycleAccumulation@12
_KiEnterDeferredReadyState@4
_KiEntropyDpcRoutine@16
_KiEnumerateNmiSxCallback@16
_KiEspFromTrapFrame@4
_KiEspToTrapFrame@8
_KiEvaluateGroupSchedulingPreemption@16
_KiEvaluateQosPreemptionTarget@8
_KiExceptionExit@0
_KiExecuteDpc@4
_KiExecuteDpcDelegate@4
_KiExitDispatcher@20
_KiExpandKernelStackAndCalloutOnStackSegment@20
_KiExpandKernelStackAndCalloutSwitchStack@20
_KiExpireTimer2@20
_KiExtendProcessAffinity@8
_KiExtendedSupervisorStateSupported@0
_KiFastCallEntry
_KiFastCallEntry2Shadow
_KiFastCallEntryShadow
_KiFastExitThreadWait@12
_KiFastReadyThread@4
_KiFatalExceptionHandler@16
_KiFatalFilter@8
_KiFinalizeTimer2Disablement@4
_KiFindBiasedProcessorIndex@16
_KiFindFirstAvailableNode@4
_KiFindFirstPassiveInterruptObject@4
_KiFindNextTimerDueTime@20
_KiFlushAddressSpaceTb@16
_KiFlushAffinity@4
_KiFlushCacheLines@12
_KiFlushCurrentTbOnly@4
_KiFlushDcache@0
_KiFlushDescriptors@0
_KiFlushIcache@0
_KiFlushQueueApc@8
_KiFlushQueuedDpcsWorker@8
_KiFlushRangeAllCaches@20
_KiFlushRangeTb@8
_KiFlushReadyLists@12
_KiFlushSoftwareInterruptBatch@4
_KiFlushTargetEntireTb@16
_KiFlushTargetMultipleRangeTb@16
_KiFlushTargetProcessTb@16
_KiFlushTargetSingleTb@16
_KiFlushTb@8
_KiFlushWriteBuffersTarget@16
_KiForceIdleParkUnparkDpcRoutine@16
_KiForceIdleParkUnparkProcessor@8
_KiForceIdleStartDpcRoutine@16
_KiForceIdleStopDpcRoutine@16
_KiForceIdleUpdateSchedulerParkState@4
_KiForceSymbolReferences@0
_KiForegroundTimerCallback@8
_KiForwardTick@24
_KiFreezeSingleThread@8
_KiFreezeTargetExecution@8
_KiFxstateRestore@4
_KiFxstateSave@4
_KiGenerateHeteroSets@24
_KiGenericCallDpcWorker@8
_KiGetAllocatedXSaveArea@4
_KiGetCacheInformation@4
_KiGetClockIntervalOneShot@16
_KiGetComparisonRanks@16
_KiGetCpuSetData@8
_KiGetCpuVendor@0
_KiGetCurrentGroupCount@0
_KiGetDeepIdleProcessors@8
_KiGetDisableFgBoostDecayRegKeyHandle@0
_KiGetDueTimeWithThreadTimerDelay@20
_KiGetFeatureBits@0
_KiGetHalNumaConversionFactor@4
_KiGetHeteroThreadQos@12
_KiGetInterruptObjectFromVector@4
_KiGetIntervalDelta@16
_KiGetIptInfo@8
_KiGetL2L3AssociativityAmd@4
_KiGetNextClockOwner@4
_KiGetNextTimer2ExpirationDueTime@16
_KiGetNextTimerExpirationDueTime@28
_KiGetPastDueIRTimerInfo@16
_KiGetProcessorInformation@16
_KiGetSavedIptState@12
_KiGetSavedSupervisorState@8
_KiGetTbLeafInfo@0
_KiGetThreadEffectiveRankNonZero@20
_KiGetTickCount
_KiGetTickCountShadow
_KiGetVectorInfo@8
_KiGetXSaveSupportedFeatures@8
_KiGroupSchedulingGenerationEnd@16
_KiGroupSchedulingMoveThread@12
_KiGroupSchedulingQuantumEnd@16
_KiHandleBound@0
_KiHandleNmi@0
_KiHeadlessDisplayString@8
_KiHeteroChooseTargetProcessor@16
_KiHwPolicyFindDriverImage@4
_KiHypercallForLocalFlush@8
_KiI386PentiumLockErrataFixup@0
_KiInSwapKernelStacks@4
_KiInSwapProcesses@4
_KiIncrementProcessConcurrencyCount@4
_KiInitDynamicProcessorIpi@16
_KiInitIptState@0
_KiInitMachineDependent@0
_KiInitPrcb@8
_KiInitSystem@4
_KiInitializeCacheErrataSupport@4
_KiInitializeContextThread@20
_KiInitializeDpcList@4
_KiInitializeDynamicProcessor@4
_KiInitializeDynamicProcessorDpc@16
_KiInitializeFatalTSS@16
_KiInitializeForceIdle@4
_KiInitializeGSCookieValue@0
_KiInitializeIdealProcessorSetBreakpointsFromCounts@12
_KiInitializeIdleProcess@4
_KiInitializeIdt@8
_KiInitializeIdtGates@12
_KiInitializeInterrupt@12
_KiInitializeKernel@24
_KiInitializeMTRR@4
_KiInitializeMachineType@0
_KiInitializeMutant@16
_KiInitializeNXSupport@0
_KiInitializeNormalPriorityAntiStarvationPolicies@0
_KiInitializeNxSupportDiscard@0
_KiInitializePcr@32
_KiInitializePrcbContext@8
_KiInitializePrcbThread@36
_KiInitializeProcessor@4
_KiInitializeProcessorState@40
_KiInitializeReservedCpuSets@0
_KiInitializeSoftwareInterruptBatch@8
_KiInitializeTRTSS@8
_KiInitializeTimer2@16
_KiInitializeTimer2Data@0
_KiInitializeUserApc@28
_KiInitializeVelocity@0
_KiInitializeXSave@8
_KiInsertDeferredPreemptionApc@12
_KiInsertInterruptObjectOrdered@8
_KiInsertNewDpcRuntime@16
_KiInsertNonMaxOverQuotaScb@12
_KiInsertQueueDpc@20
_KiInsertSchedulingGroupQueue@12
_KiInsertSecondarySignalList@4
_KiInsertTimer2@12
_KiInsertTimer2WithCollectionLockHeld@16
_KiIntRedirectAllocateObject@8
_KiIntRedirectConnnect@12
_KiIntRedirectDisconnect@8
_KiIntRedirectEnable@8
_KiIntRedirectQueueRequestOnProcessor@8
_KiIntSteerAssignCpuSet@12
_KiIntSteerCalculateDistribution@8
_KiIntSteerChooseInitialTargetProcessors@28
_KiIntSteerComputeCpuSet@8
_KiIntSteerConnect@12
_KiIntSteerDetermineSteeringEnabled@0
_KiIntSteerDisable@8
_KiIntSteerDistributeInterrupts@0
_KiIntSteerEnable@8
_KiIntSteerEtwEventEnabled@4
_KiIntSteerEventTraceControlCallback@36
_KiIntSteerGetLineInformation@12
_KiIntSteerInit@0
_KiIntSteerInitPrcb@4
_KiIntSteerLoadCompare
_KiIntSteerLogMask@4
_KiIntSteerLogProc@4
_KiIntSteerLogState@8
_KiIntSteerLogStatus@4
_KiIntSteerSetDestination@8
_KiIntSteerUpdateDeviceInterruptMask@12
_KiIntSteerVerifyDestination@8
_KiInterruptDispatch@0
_KiInterruptDispatchCommon@20
_KiInterruptDispatchNoLockNoEtwNoStack@0
_KiInterruptMessageDispatch@8
_KiIntersectFeaturesWithLoader@8
_KiIntersectFeaturesWithPolicy@8
_KiIntersectFeaturesWithTest@4
_KiInvalidateAllCachesTarget@16
_KiInvalidateRangeAllCachesTarget@16
_KiInvokeBugCheckAddTriageDumpDataCallbacks@0
_KiInvokeBugCheckEntryCallbacks@12
_KiInvokeInterruptServiceRoutine@12
_KiIpiGenericCallTarget@16
_KiIpiProcessRequest@8
_KiIpiProcessRequests@8
_KiIpiSendFlushAwakePacket@24
_KiIpiSendPacket@24
_KiIpiSendRequest@20
_KiIpiSendSynchronousPacket@24
_KiIpiServiceRoutine@8
_KiIpiUpdateExtendedSupervisorState@4
_KiIpiUpdateThreadTag@16
_KiIsAddressRangeValid@8
_KiIsDisableFgBoostDecayFeatureStateSet@0
_KiIsDpcThreadActive@0
_KiIsFlushEntire@4
_KiIsForegroundThreadWithBoost@4
_KiIsIntelPebsSupported@4
_KiIsInterruptTypeSecondary@4
_KiIsKernelStackSwappable@4
_KiIsKvaLeakSimulated@0
_KiIsKvaShadowDisabled@0
_KiIsNXSupported@0
_KiIsNextScheduledScbThread@12
_KiIsNodeFull@4
_KiIsProcessTerminationRequested@8
_KiIsQosGroupingActive@0
_KiIsQosGroupingClass@4
_KiIsThreadRankBiased@8
_KiIsThreadRankNonZero@8
_KiIsXSaveFeatureAllowed@16
_KiKernelSysretExit
_KiLeaveCriticalRegionUnsafe@4
_KiLeaveGuardedRegionUnsafe@4
_KiLoadDirectoryTableBase@8
_KiLoadFastSyscallMachineSpecificRegisters@0
_KiLoadIopmOffset@16
_KiLoadMTRRTarget@4
_KiLockStepExecution@4
_KiMarkMtrrHiberPhase@0
_KiMaskInterruptDpc@16
_KiMaskInterruptInternal@8
_KiMaskSecondaryInterruptInternal@8
_KiMaskToLength@8
_KiMayStealStandbyThread@8
_KiMcaExceptionHandlerWrapper
_KiMoveApcState@8
_KiMoveScbThreadsToNewReadylist@16
_KiNodeCostSort
_KiNonNumaQueryNodeCapacity@8
_KiNonNumaQueryNodeDistance@12
_KiNormalPriorityReadyScan@4
_KiOutSwapKernelStacks@0
_KiOutSwapProcesses@4
_KiParseLoadOptions@4
_KiPassiveIsrWatchdog@16
_KiPassiveRelease@0
_KiPcToFileHeader@16
_KiPerformGroupConfiguration@4
_KiPollFreezeExecution@0
_KiPrcbInGroupAffinity@8
_KiPrepareFlushCurrentAffinity@4
_KiPrepareFlushParameters@12
_KiPrepareReadyThreadForRescheduling@12
_KiPreprocessAccessViolation@12
_KiProcessDisconnectList@4
_KiProcessExpiredTimerList@16
_KiProcessPendingDisconnect@12
_KiProcessPendingForegroundBoosts@16
_KiProcessProfileList@12
_KiProcessSecondarySignalList@16
_KiProcessorCallbackNop@8
_KiProcessorStart@0
_KiPublishProcessorFeatures@4
_KiQosResponseRequired@8
_KiQuantumEnd@0
_KiQueryIptSupport@8
_KiQueryProcessorNode@12
_KiQueryProximityNode@8
_KiQueryUnbiasedInterruptTime@4
_KiRaiseAssertion
_KiRaiseAssertionShadow
_KiRaiseException@20
_KiRaiseSecurityCheckFailure
_KiRaiseSecurityCheckFailureShadow
_KiReadFixedMtrr@4
_KiReadyOutSwappedThreads@8
_KiRecomputeGroupSchedulingRank@12
_KiReconfigureNodeSchedulingInformation@8
_KiRegisterForDisableFgBoostDecayRegistryNotification@0
_KiRegisterNmiSxCallback@16
_KiRemoveEntryDpcList@8
_KiRemoveEntryTimer@16
_KiRemoveModelSpecificUnsupportedFeatures@8
_KiRemoveProcessorFromGroupDatabase@4
_KiRemoveQueueApc@4
_KiRemoveSchedulingGroupQueue@12
_KiRemoveThreadFromAnyReadyQueue@16
_KiRemoveThreadFromReadyQueue@12
_KiRemoveThreadFromScbQueue@16
_KiRemoveThreadFromSchedulingGroup@4
_KiRemoveThreadFromSharedReadyQueue@12
_KiRemoveTimer2@4
_KiRequestTimer2Expiration@0
_KiRescheduleThreadAfterAffinityChange@24
_KiReselectIdealProcessorAfterAffinityChange@16
_KiResetClockInterval@4
_KiResetForceIdle@8
_KiResetGlobalDpcWatchdogProfiler@4
_KiResetScb@8
_KiResortScbQueue@12
_KiRestoreClockTickRate@16
_KiRestoreFeatureBits@0
_KiRestoreIptState@4
_KiRestoreProcessorControlState@4
_KiRestoreProcessorState@8
_KiRestoreXSaveSupport@0
_KiResumeClockTimer@0
_KiResumeThread@12
_KiRundownMutants@4
_KiSanitizeProfileInterval@4
_KiSatisfyThreadWait@20
_KiSaveBootProcessorIdt@0
_KiSaveCurrentEtwTraceBuffer@0
_KiSaveIptState@4
_KiSaveProcessorControlState@4
_KiSaveProcessorDebugState@16
_KiSaveProcessorState@8
_KiScanBugCheckCallbackList@0
_KiScheduleNextForegroundBoost@4
_KiSchedulerApc@12
_KiSchedulerApcNop@20
_KiSchedulerApcRundown@4
_KiSchedulerApcTerminate@20
_KiSearchForNewThreadOnProcessor@12
_KiSegSsFromTrapFrame@4
_KiSegSsToTrapFrame@8
_KiSelectActiveTimerTable@8
_KiSelectIdealProcessor@8
_KiSelectIdealProcessorForProcess@8
_KiSelectIdealProcessorSetForGroup@28
_KiSelectIdealProcessorSetForNode@36
_KiSelectIdealProcessorSetForProcessGroup@20
_KiSelectIdealProcessorSetsForProcess@16
_KiSelectLowestRankedThread@4
_KiSelectProcessorToPreempt@16
_KiSelectReadyThreadEx@12
_KiSelectThreadFromScbQueue@20
_KiSelectThreadFromSchedulingGroup@12
_KiSendClockInterruptToClockOwner@0
_KiSendFreeze@8
_KiSendHeteroRescheduleIntRequest@4
_KiSendHeteroRescheduleIntRequestHelper@16
_KiSendSoftwareInterrupt@8
_KiSendSoftwareInterruptAffinity@8
_KiSendThawExecution@4
_KiSetAddressPolicy@4
_KiSetBasePriorityAndClearDecrement@12
_KiSetCacheInformationAmd@4
_KiSetCacheInformationIntel@4
_KiSetClockInterval@12
_KiSetClockIntervalOneShot@16
_KiSetClockIntervalToMinimumRequested@0
_KiSetClockTickRate@8
_KiSetDebugActiveMask@8
_KiSetDebuggerOwner@4
_KiSetDpcRequestFlag@8
_KiSetHaltedNmiandDoubleFaultHandler@0
_KiSetHardwareSpeculationControlFeatures@12
_KiSetHeteroPolicyThread@16
_KiSetIdealNodeProcessByGroup@12
_KiSetIdealProcessorThread@16
_KiSetIntervalWorker@8
_KiSetIoMap@16
_KiSetLockOwnershipQuantum@16
_KiSetNonArchSsbd@0
_KiSetPageAttributesTable@0
_KiSetPriorityBoost@24
_KiSetProcessorIdle@12
_KiSetProcessorSignature@8
_KiSetProcessorType@0
_KiSetStandardizedCacheInformation@8
_KiSetSystemAffinityThread@16
_KiSetSystemAffinityThreadToProcessor@8
_KiSetSystemTimeDpc@16
_KiSetThreadSchedulingGroup@8
_KiSetTimerEx@24
_KiSetVirtualHeteroClockIntervalRequest@4
_KiSetVirtualHeteroClockIntervalRequestDpcRoutine@16
_KiSetupForInstrumentationReturn@8
_KiSetupTimeIncrement@12
_KiShadowExitStart
_KiShadowProcessorAllocation@8
_KiShouldActivateHRTimerClock@16
_KiShouldScanSharedReadyQueue@4
_KiShuffleAssignedNodes@16
_KiSignalThreadForApc@12
_KiSpuriousDispatchNoEOI@0
_KiStackAttachProcess@12
_KiStartDpcDelegateThread@4
_KiStartDpcThread@4
_KiStartDynamicProcessor@16
_KiStartProfileTarget@4
_KiStartSavingSupervisorState@0
_KiStartThreadCycleAccumulation@12
_KiStartUnexpectedRange
_KiStartWaitAcknowledge@0
_KiStopProfileTarget@4
_KiSuspendClockTimer@0
_KiSuspendThread@8
_KiSwapDirectoryTableBaseTarget@16
_KiSwitchKernelStackAndCallout@16
_KiSynchCounterSetCallback@12
_KiSynchNumaCounterSetCallback@12
_KiSynchronizeAddressPolicyTarget@16
_KiSynchronizePassiveInterruptExecution@12
_KiSystemFatalException
_KiSystemService
_KiSystemServiceShadow
_KiSystemStartup@4
_KiTestForAlertPending@16
_KiThawSingleThread@12
_KiThreadStartup@4
_KiTimer2ComputeDueTime@20
_KiTimer2Expiration@24
_KiTimer2TypeFlagsToEtwFlags@4
_KiTimerExpirationDpc@16
_KiTimerWaitTest@12
_KiTraceCancelTimer2@8
_KiTraceLogNmiCallback@4
_KiTraceSetTimer2@12
_KiTraceSetTimer@12
_KiTransitionSchedulingGroupGeneration@16
_KiTrap00
_KiTrap00Shadow
_KiTrap01
_KiTrap01Shadow
_KiTrap02
_KiTrap03
_KiTrap03Shadow
_KiTrap04
_KiTrap04Shadow
_KiTrap05
_KiTrap05Shadow
_KiTrap06
_KiTrap06Shadow
_KiTrap07
_KiTrap07Shadow
_KiTrap08
_KiTrap09
_KiTrap09Shadow
_KiTrap0A
_KiTrap0AShadow
_KiTrap0B
_KiTrap0BShadow
_KiTrap0C
_KiTrap0CShadow
_KiTrap0D
_KiTrap0DShadow
_KiTrap0E
_KiTrap0EShadow
_KiTrap0F
_KiTrap0FShadow
_KiTrap10
_KiTrap10Shadow
_KiTrap11
_KiTrap11Shadow
_KiTrap12
_KiTrap13
_KiTrap13Shadow
_KiTriggerForegroundBoostDpc@16
_KiTryForceEnableNx@0
_KiTryLocalThreadSchedule@24
_KiTryPopulateLogicalProcessorInformation@36
_KiTryScheduleNextForegroundBoost@4
_KiTryToAcquireThreadLock@8
_KiTryToEndDpcProcessing@8
_KiUncommitNodeAssignment@4
_KiUnexpectedInterrupt
_KiUnexpectedInterrupt0
_KiUnexpectedInterrupt0Shadow
_KiUnexpectedInterrupt1
_KiUnexpectedInterrupt10
_KiUnexpectedInterrupt100
_KiUnexpectedInterrupt101
_KiUnexpectedInterrupt102
_KiUnexpectedInterrupt103
_KiUnexpectedInterrupt104
_KiUnexpectedInterrupt105
_KiUnexpectedInterrupt106
_KiUnexpectedInterrupt107
_KiUnexpectedInterrupt108
_KiUnexpectedInterrupt109
_KiUnexpectedInterrupt11
_KiUnexpectedInterrupt110
_KiUnexpectedInterrupt111
_KiUnexpectedInterrupt112
_KiUnexpectedInterrupt113
_KiUnexpectedInterrupt114
_KiUnexpectedInterrupt115
_KiUnexpectedInterrupt116
_KiUnexpectedInterrupt117
_KiUnexpectedInterrupt118
_KiUnexpectedInterrupt119
_KiUnexpectedInterrupt12
_KiUnexpectedInterrupt120
_KiUnexpectedInterrupt121
_KiUnexpectedInterrupt122
_KiUnexpectedInterrupt123
_KiUnexpectedInterrupt124
_KiUnexpectedInterrupt125
_KiUnexpectedInterrupt126
_KiUnexpectedInterrupt127
_KiUnexpectedInterrupt128
_KiUnexpectedInterrupt129
_KiUnexpectedInterrupt13
_KiUnexpectedInterrupt130
_KiUnexpectedInterrupt131
_KiUnexpectedInterrupt132
_KiUnexpectedInterrupt133
_KiUnexpectedInterrupt134
_KiUnexpectedInterrupt135
_KiUnexpectedInterrupt136
_KiUnexpectedInterrupt137
_KiUnexpectedInterrupt138
_KiUnexpectedInterrupt139
_KiUnexpectedInterrupt14
_KiUnexpectedInterrupt140
_KiUnexpectedInterrupt141
_KiUnexpectedInterrupt142
_KiUnexpectedInterrupt143
_KiUnexpectedInterrupt144
_KiUnexpectedInterrupt145
_KiUnexpectedInterrupt146
_KiUnexpectedInterrupt147
_KiUnexpectedInterrupt148
_KiUnexpectedInterrupt149
_KiUnexpectedInterrupt15
_KiUnexpectedInterrupt150
_KiUnexpectedInterrupt151
_KiUnexpectedInterrupt152
_KiUnexpectedInterrupt153
_KiUnexpectedInterrupt154
_KiUnexpectedInterrupt155
_KiUnexpectedInterrupt156
_KiUnexpectedInterrupt157
_KiUnexpectedInterrupt158
_KiUnexpectedInterrupt159
_KiUnexpectedInterrupt16
_KiUnexpectedInterrupt160
_KiUnexpectedInterrupt161
_KiUnexpectedInterrupt162
_KiUnexpectedInterrupt163
_KiUnexpectedInterrupt164
_KiUnexpectedInterrupt165
_KiUnexpectedInterrupt166
_KiUnexpectedInterrupt167
_KiUnexpectedInterrupt168
_KiUnexpectedInterrupt169
_KiUnexpectedInterrupt17
_KiUnexpectedInterrupt170
_KiUnexpectedInterrupt171
_KiUnexpectedInterrupt172
_KiUnexpectedInterrupt173
_KiUnexpectedInterrupt174
_KiUnexpectedInterrupt175
_KiUnexpectedInterrupt176
_KiUnexpectedInterrupt177
_KiUnexpectedInterrupt178
_KiUnexpectedInterrupt179
_KiUnexpectedInterrupt18
_KiUnexpectedInterrupt180
_KiUnexpectedInterrupt181
_KiUnexpectedInterrupt182
_KiUnexpectedInterrupt183
_KiUnexpectedInterrupt184
_KiUnexpectedInterrupt185
_KiUnexpectedInterrupt186
_KiUnexpectedInterrupt187
_KiUnexpectedInterrupt188
_KiUnexpectedInterrupt189
_KiUnexpectedInterrupt19
_KiUnexpectedInterrupt190
_KiUnexpectedInterrupt191
_KiUnexpectedInterrupt192
_KiUnexpectedInterrupt193
_KiUnexpectedInterrupt194
_KiUnexpectedInterrupt195
_KiUnexpectedInterrupt196
_KiUnexpectedInterrupt197
_KiUnexpectedInterrupt198
_KiUnexpectedInterrupt199
_KiUnexpectedInterrupt2
_KiUnexpectedInterrupt20
_KiUnexpectedInterrupt200
_KiUnexpectedInterrupt201
_KiUnexpectedInterrupt202
_KiUnexpectedInterrupt203
_KiUnexpectedInterrupt204
_KiUnexpectedInterrupt205
_KiUnexpectedInterrupt206
_KiUnexpectedInterrupt207
_KiUnexpectedInterrupt21
_KiUnexpectedInterrupt22
_KiUnexpectedInterrupt23
_KiUnexpectedInterrupt24
_KiUnexpectedInterrupt25
_KiUnexpectedInterrupt26
_KiUnexpectedInterrupt27
_KiUnexpectedInterrupt28
_KiUnexpectedInterrupt29
_KiUnexpectedInterrupt3
_KiUnexpectedInterrupt30
_KiUnexpectedInterrupt31
_KiUnexpectedInterrupt32
_KiUnexpectedInterrupt33
_KiUnexpectedInterrupt34
_KiUnexpectedInterrupt35
_KiUnexpectedInterrupt36
_KiUnexpectedInterrupt37
_KiUnexpectedInterrupt38
_KiUnexpectedInterrupt39
_KiUnexpectedInterrupt4
_KiUnexpectedInterrupt40
_KiUnexpectedInterrupt41
_KiUnexpectedInterrupt42
_KiUnexpectedInterrupt43
_KiUnexpectedInterrupt44
_KiUnexpectedInterrupt45
_KiUnexpectedInterrupt46
_KiUnexpectedInterrupt47
_KiUnexpectedInterrupt48
_KiUnexpectedInterrupt49
_KiUnexpectedInterrupt5
_KiUnexpectedInterrupt50
_KiUnexpectedInterrupt51
_KiUnexpectedInterrupt52
_KiUnexpectedInterrupt53
_KiUnexpectedInterrupt54
_KiUnexpectedInterrupt55
_KiUnexpectedInterrupt56
_KiUnexpectedInterrupt57
_KiUnexpectedInterrupt58
_KiUnexpectedInterrupt59
_KiUnexpectedInterrupt6
_KiUnexpectedInterrupt60
_KiUnexpectedInterrupt61
_KiUnexpectedInterrupt62
_KiUnexpectedInterrupt63
_KiUnexpectedInterrupt64
_KiUnexpectedInterrupt65
_KiUnexpectedInterrupt66
_KiUnexpectedInterrupt67
_KiUnexpectedInterrupt68
_KiUnexpectedInterrupt69
_KiUnexpectedInterrupt7
_KiUnexpectedInterrupt70
_KiUnexpectedInterrupt71
_KiUnexpectedInterrupt72
_KiUnexpectedInterrupt73
_KiUnexpectedInterrupt74
_KiUnexpectedInterrupt75
_KiUnexpectedInterrupt76
_KiUnexpectedInterrupt77
_KiUnexpectedInterrupt78
_KiUnexpectedInterrupt79
_KiUnexpectedInterrupt8
_KiUnexpectedInterrupt80
_KiUnexpectedInterrupt81
_KiUnexpectedInterrupt82
_KiUnexpectedInterrupt83
_KiUnexpectedInterrupt84
_KiUnexpectedInterrupt85
_KiUnexpectedInterrupt86
_KiUnexpectedInterrupt87
_KiUnexpectedInterrupt88
_KiUnexpectedInterrupt89
_KiUnexpectedInterrupt9
_KiUnexpectedInterrupt90
_KiUnexpectedInterrupt91
_KiUnexpectedInterrupt92
_KiUnexpectedInterrupt93
_KiUnexpectedInterrupt94
_KiUnexpectedInterrupt95
_KiUnexpectedInterrupt96
_KiUnexpectedInterrupt97
_KiUnexpectedInterrupt98
_KiUnexpectedInterrupt99
_KiUnexpectedInterruptShadowArea
_KiUnexpectedInterruptTail
_KiUnmarkTimer2Running@4
_KiUnmaskSecondaryInterruptInternal@8
_KiUnstackDetachProcess@8
_KiUpdateChildrenCpuTarget@8
_KiUpdateCpuTargetByRate@8
_KiUpdateCpuTargetByWeight@8
_KiUpdateGlobalCpuSetConfiguration@4
_KiUpdateGroupSchedulingRank@12
_KiUpdateMinimumWeight@12
_KiUpdateNodeAffinitizedFlag@4
_KiUpdateNumberProcessors@4
_KiUpdateNumberProcessorsIpi@4
_KiUpdateProcessorCount@8
_KiUpdateSavedSupervisorState@0
_KiUpdateSharedReadyQueueAffinityThread@8
_KiUpdateSpecCtrlEnhancedIBRS@8
_KiUpdateSystemTime@16
_KiUpdateThreadCpuSetAffinitiesFromDpcLevel@8
_KiUpdateThreadCpuSetAffinitiesProcess@8
_KiUpdateThreadCpuSets@8
_KiUpdateThreadPriority@16
_KiUpdateTimeAssist@12
_KiUpdateTimer2Collections@4
_KiUpdateTimer2Flags@12
_KiUpdateTotalCyclesCurrentThread@12
_KiUpdateXSaveSizeAndVolatileFeatures@4
_KiValidateComponentName@8
_KiValidateCpuSetMasks@8
_KiValidateTriageDumpDataArray@12
_KiVerifyReservedFieldGroupAffinity@4
_KiWaitForAllObjects@28
_KiWaitForContextSwap@4
_KiWaitSatisfyAny@12
_KiWaitSatisfyMutant@12
_KiWaitSatisfyOther@4
_KiWriteFixedMtrr@4
_KiXSavesManagesIpt@0
_KitInitialize@4
_KitLogFeatureUsage@12
_KitpInitAitSampleRate@4
_KitpOpenRegKey@12
_KitpReadUlongFromKey@12
_KseAddHardwareId@4
_KseDriverLoadImage@4
_KseDriverScopeInitialize@0
_KseDriverUnloadImage@4
_KseDsCallbackHookAddDevice@8
_KseDsCallbackHookDriverStartIo@8
_KseDsCallbackHookDriverUnload@4
_KseDsCallbackHookIrpDeviceControlFunction@8
_KseDsCallbackHookIrpFunction@8
_KseDsCallbackHookIrpInternalDeviceControlFunction@8
_KseDsCallbackHookIrpPnpFunction@8
_KseDsCallbackHookIrpPowerFunction@8
_KseDsCompletionHookForPowerDevice@12
_KseDsCompletionHookForStartDevice@12
_KseDsCompletionHookForStopDevice@12
_KseDsHookDriverTargeted@20
_KseDsHookDriverUntargeted@4
_KseDsHookExAllocatePool@8
_KseDsHookExAllocatePoolWithTag@12
_KseDsHookExFreePool@4
_KseDsHookExFreePoolWithTag@8
_KseDsHookIoCreateDevice@28
_KseDsHookPoRequestPowerIrp@24
_KseGetIoCallbacks@4
_KseHookExAllocatePoolWithTag@12
_KseInitialize@8
_KseLookupHardwareId@4
_KseQueryDeviceData@20
_KseQueryDeviceDataList@16
_KseQueryDeviceFlags@12
_KseRegisterShim@12
_KseRegisterShimEx@16
_KseResetDeviceCache@0
_KseSetCompletionHook@16
_KseSetDeviceFlags@16
_KseShimDatabaseBootInitialize@16
_KseShimDatabaseBootRelease@0
_KseShimDatabaseClose@4
_KseShimDatabaseOpen@4
_KseShimDriverIoCallbacks@12
_KseSkipDriverUnloadCallbackHookDriverUnload@4
_KseSkipDriverUnloadHookDriverTargeted@20
_KseSkipDriverUnloadHookDriverUntargeted@4
_KseSkipDriverUnloadInitialize@0
_KseUnregisterShim@12
_KseVersionLieInitialize@0
_KseZeroPoolInitialize@0
_KsepApplyShimsToDriver@16
_KsepCacheDeviceEqual@8
_KsepCacheDeviceFree@4
_KsepCacheDeviceHash@4
_KsepCacheDeviceInsertData@20
_KsepCacheDeviceQueryData@8
_KsepCacheHwIdEqual@8
_KsepCacheHwIdFree@4
_KsepCacheHwIdHash@4
_KsepCacheInitialize@16
_KsepCacheInsert@8
_KsepCacheLookup@8
_KsepCacheReset@4
_KsepCacheUninitialize@4
_KsepCompletionSafeWrapper@12
_KsepDbCacheInsertDevice@8
_KsepDbCacheQueryDevice@20
_KsepDbCacheQueryDeviceData@20
_KsepDbCacheQueryDeviceDataList@16
_KsepDbCacheReadDevice@8
_KsepDbCacheReadDeviceInternal@16
_KsepDbFreeDriverShims@8
_KsepDbGetDriverShims@20
_KsepDbGetDriverShimsInternal@28
_KsepDbGetShimInfo@8
_KsepDbQueryRegistryDeviceData@20
_KsepDbQueryRegistryDeviceDataList@16
_KsepDbReadKData@12
_KsepDbReadKFlag@12
_KsepDebugPrint
_KsepDeletePatchSdb@0
_KsepDriverPathTail@8
_KsepDsEventAddDevice@28
_KsepDsEventDataIrp@20
_KsepDsEventDevicePowerCompleted@16
_KsepDsEventDevicePowerIrp@28
_KsepDsEventDriverLoad@20
_KsepDsEventDriverStartIo@12
_KsepDsEventDriverUnload@8
_KsepDsEventIoCreateDevice@24
_KsepDsEventPnpIrp@20
_KsepDsEventPnpStartDevice@16
_KsepDsEventPnpStopDevice@16
_KsepDsEventPoolAllocate@20
_KsepDsEventPoolFree@12
_KsepDsEventRequestPowerIrp@24
_KsepDsEventSystemPowerIrp@28
_KsepEngineGetShimsFromRegistry@16
_KsepEngineInitialize@4
_KsepEngineReadFlags@4
_KsepEngineUninitialize@4
_KsepEvntLogFlagsApplied@20
_KsepEvntLogShimsApplied@12
_KsepGetLoadedModulesList@4
_KsepGetModuleInfoByAddress@16
_KsepGetModuleInfoByName@16
_KsepGetShimCallbacksForDriver@8
_KsepGetShimsForDriver@24
_KsepIsModuleShimmed@12
_KsepIsShimRegistered@16
_KsepLoadShimProvider@4
_KsepLogError
_KsepLogEtwMessage@16
_KsepLogInfo
_KsepMatchInitAcpiOemInfo@12
_KsepMatchInitBiosInfo@4
_KsepMatchInitCpuInfo@4
_KsepMatchInitMachineInfo@8
_KsepPatchDriverImportsTable@8
_KsepPatchImportTableEntry@16
_KsepPoolAllocateNonPaged@4
_KsepPoolAllocatePaged@4
_KsepPoolFreeNonPaged@4
_KsepPoolFreePaged@4
_KsepRegistryCloseKey@4
_KsepRegistryCreateKey@12
_KsepRegistryEnumValue@20
_KsepRegistryOpenKey@12
_KsepRegistryQueryDWORD@12
_KsepRegistryQueryDriverShims@16
_KsepRegistryQueryKeyInformation@12
_KsepRegistryQueryMULTISZ@20
_KsepRegistryQuerySZ@24
_KsepRegistryQueryValue@24
_KsepResolveApplicableShimsForDriver@8
_KsepResolveShimHooks@8
_KsepSdbBootInitialize@12
_KsepSdbBootRelease@4
_KsepSdbMapToMemory@8
_KsepSdbUnmapFromMemory@4
_KsepShimDatabaseTime@8
_KsepShimDbChanged@0
_KsepSkipDriverUnloadEventDriverLoad@20
_KsepSkipDriverUnloadEventDriverUnload@8
_KsepStringAnsiToUnicode@16
_KsepStringConcatenate@16
_KsepStringDuplicate@8
_KsepStringDuplicateUnicode@8
_KsepStringFree@4
_KsepStringSplitMultiString@16
_KsepStringTransform@16
_KsepValidateShimProviderAndData@12
_KvfCommitFeatureStates@0
_KvfInitFeatureStates@4
_KxAcquireSpinLock@4
_KxFlushEntireTb@4
_KxFlushNonGlobalTb@4
_KxSetTimeStampBusy@4
_KxWaitForSpinLockAndAcquire@4
_KzInitializeSpinLock@4
_LOCK_ADDRESS_SPACE@8
_LOCK_ADDRESS_SPACE_SHARED@8
_LOCK_CM_RM_LIST@0
_LOCK_HIVE_LOAD@0
_LOCK_PAGE_TABLE_COMMITMENT@8
_LOCK_TRANSACTION_LIST@0
_LZNT1CompressChunk@28
_LZNT1DecompressChunk@20
_LZNT1DecompressChunkNewThread@24
_LZNT1DecompressChunkWorkItem@4
_LZNT1FindMatchMaximum@8
_LZNT1FindMatchStandard@8
_LdrAccessResource@16
_LdrEnumResources@20
_LdrFindResourceDirectory_U@16
_LdrFindResourceEx_U@20
_LdrFindResource_U@16
_LdrImageDirectoryEntryToLoadConfig@4
_LdrInitSecurityCookie@20
_LdrIsResItemExist@16
_LdrLoadAlternateResourceModuleEx@20
_LdrProcessRelocationBlockLongLong@24
_LdrRelocateImageWithBias@28
_LdrResFallbackLangList@20
_LdrResFindResource@36
_LdrResFindResourceDirectory@28
_LdrResGetRCConfig@20
_LdrResSearchResource@32
_LdrRscIsTypeExist@16
_LdrUnloadAlternateResourceModule@4
_LdrUnloadAlternateResourceModuleEx@8
_LdrpAccessResourceData@16
_LdrpAccessResourceDataNoMultipleLanguage@16
_LdrpArmProcessRelocation@16
_LdrpCompareResourceNames_U@12
_LdrpFetchAddressOfSecurityCookie@16
_LdrpFindMessageInAlternateModule@20
_LdrpGenericProcessRelocation@16
_LdrpGetAlternateResourceModuleHandleEx@16
_LdrpGetFromMUIMemCache@16
_LdrpGetImageSize@8
_LdrpGetMappingFromCacheEntry@16
_LdrpGetParentLangId@8
_LdrpGetRcConfig@16
_LdrpGetResourceFileName@20
_LdrpInitMuiCrits@8
_LdrpKrnGetDataTableEntry@4
_LdrpLoadResourceFromAlternativeModule@20
_LdrpMapResourceFile@20
_LdrpOpenKey@16
_LdrpQueryValueKey@24
_LdrpResCompareResourceNames@32
_LdrpResGetMappingSize@16
_LdrpResGetResourceDirectory@20
_LdrpResSearchResourceInsideDirectory@52
_LdrpResSearchResourceMappedFile@36
_LdrpSearchResourceSection_U@20
_LdrpSectionTableFromVirtualAddress@24
_LdrpSetAlternateResourceModuleHandle@32
_LdrpThumbProcessRelocation@16
_LdrpVerifyAlternateResourceModuleEx@24
_LkmdTelCreateReport@24
_LkmdTelInsertTriageDataBlock@12
_LkmdTelSubmitReport@4
_LkmdTelpUpdateSecondaryData@4
_LkmdTelpWriteDumpFile@4
_LocalConvertAclToString@36
_LocalConvertSDToStringSD_Rev1@28
_LocalConvertSidToStringSidW@8
_LocalConvertStringSDToSD_Rev1@24
_LocalGetAceCondition@36
_LocalGetAceCount@12
_LocalGetAclForString@32
_LocalGetConditionForString@36
_LocalGetRelativeAttributeForString@32
_LocalGetSDControlForString@16
_LocalGetSDDLDeliminator@8
_LocalGetSidForString@32
_LocalGetStringForControl@12
_LocalGetStringForRelativeAttribute@28
_LocalGetStringForSid@24
_LocalpConvertStringSidToSid@12
_LocalpGetStringForCondition@32
_LockShutdownExclusive@0
_LockShutdownShared@0
_LogFwInitialize@0
_LogFwReport@0
_LogFwStat@12
_LogFwpRegisterWorker@4
_LookupAccessMaskInTable@12
_LookupAceFlagsInTable@16
_LookupAceTypeInTable@12
_LookupSidInTable@28
_LpcExitProcess@4
_LpcInitSystem@0
_LpcInitializeProcess@4
_LpcReplyWaitReplyPort@12
_LpcRequestPort@8
_LpcRequestWaitReplyPort@12
_LpcRequestWaitReplyPortEx@12
_LpcSendWaitReceivePort@24
_LpcpCopyRequestData@28
_LpcpRequestWaitReplyPort@24
_LsaCallAuthenticationPackage@28
_LsaDeregisterLogonProcess@4
_LsaFreeReturnBuffer@4
_LsaLogonUser@56
_LsaLookupAuthenticationPackage@12
_LsaRegisterLogonProcess@12
_MIDL_user_allocate@4
_MIDL_user_free@4
_MI_CHECK_HIBER_VERIFY_PTE@4
_MI_CLEAR_RESET_PTE@4
_MI_GET_GRAPHICS_PROTECTION_FROM_VAD@4
_MI_GET_NODE_FROM_VALID_PTE@4
_MI_INTERLOCKED_EXCHANGE_PTE@12
_MI_IS_CLONE_COMMIT_CHARGED@12
_MI_IS_PHYSICAL_ADDRESS@4
_MI_IS_PTE_IN_WS_SWAP_SET@8
_MI_IS_RESET_PTE@8
_MI_LOCK_RELOCATIONS_EXCLUSIVE@8
_MI_MAKE_PROTECT_WRITE_COPY@4
_MI_PAGEFILE_WRITE@20
_MI_PFN_IS_PROTO@4
_MI_PROTO_FORMAT_COMBINED@8
_MI_TIGHTER_PERMISSIONS@16
_MI_UNLOCK_RELOCATIONS_EXCLUSIVE@8
_MI_WRITE_INVALID_PTE_TB_FLUSH_NEEDED@12
_MI_WSLE_LOG_ACCESS@8
_MUIBugCheck@4
_MUIInitializeResourceLock@4
_MUIRegistrySystemRoutine@4
_MatchAll@12
_McGenControlCallbackV2@36
_McGenEventRegister_EtwRegister@16
_McGenEventWrite_EtwWriteTransfer@20
_McTemplateK0d_EtwWriteTransfer@16
_McTemplateK0dz_EtwWriteTransfer@20
_McTemplateK0dzd_EtwWriteTransfer@24
_McTemplateK0hzr0_EtwWriteTransfer@20
_McTemplateK0hzr0qqhzr4_EtwWriteTransfer@36
_McTemplateK0izzx_EtwWriteTransfer@36
_McTemplateK0j_EtwWriteTransfer@16
_McTemplateK0jq_EtwWriteTransfer@20
_McTemplateK0jzt_EtwWriteTransfer@24
_McTemplateK0p_EtwWriteTransfer@16
_McTemplateK0pqzzzzzzz_EtwWriteTransfer@48
_McTemplateK0pz_EtwWriteTransfer@20
_McTemplateK0q_EtwWriteTransfer@16
_McTemplateK0qhzr1z_EtwWriteTransfer@28
_McTemplateK0xxxqq_EtwWriteTransfer@44
_McTemplateK0xxxqqqq_EtwWriteTransfer@52
_McTemplateK0z_EtwWriteTransfer@16
_McTemplateK0zd_EtwWriteTransfer@20
_McTemplateK0zdq_EtwWriteTransfer@24
_McTemplateK0zjdd_EtwWriteTransfer@28
_McTemplateK0zq_EtwWriteTransfer@20
_McTemplateK0zqz_EtwWriteTransfer@24
_McTemplateK0zzjzitd_EtwWriteTransfer@44
_McTemplateK0zzjzzzdd_EtwWriteTransfer@44
_McTemplateK0zzjzzztzdzztdz_EtwWriteTransfer@68
_McTemplateK0zzqqzttquqqzx_EtwWriteTransfer@68
_McTemplateK0zzqqzttqux_EtwWriteTransfer@56
_McTemplateK0zzt_EtwWriteTransfer@24
_MdlInvariantFindMdlInfo@8
_MdlInvariantInsertMdlInfo@8
_MdlInvariantPostDriverCompletion@8
_MdlInvariantPostProcessing1@12
_MdlInvariantPreProcessing1@12
_MfgInitSystem@4
_MiAbortCombineScan@4
_MiAccessCheck@24
_MiAcquireNonPagedResources@16
_MiActOnMirrorBitmap@8
_MiActOnPartitionNodePages@16
_MiActOnPte@32
_MiActivePageClaimCandidate@16
_MiAddExpansionNonPagedPool@8
_MiAddLoaderHalIoMappings@8
_MiAddLoaderHalIoPte@12
_MiAddLockedPageCharge@8
_MiAddMappedPtes@24
_MiAddMdlPageToTradeBlock@12
_MiAddMdlToPartitionTree@12
_MiAddMdlTracker@12
_MiAddPageToFlushMdl@24
_MiAddPageToHeatRanges@12
_MiAddPagesToEnclave@20
_MiAddPartitionDataToCrashDump@4
_MiAddPartitionToCrashDump@8
_MiAddPhysicalMemory@20
_MiAddPhysicalMemoryChunks@16
_MiAddPhysicalPagesToCrashDump@4
_MiAddPrivateFixupEntryForSystemImage@8
_MiAddRangeToCrashDump@20
_MiAddRangeToPartitionTree@16
_MiAddSecureEntry@20
_MiAddSystemPageTableToList@8
_MiAddToReservationCluster@24
_MiAddTriageDumpPtes@4
_MiAddUnicodeStringToCrashDump@12
_MiAddViewsForSection@16
_MiAddWorkingSetEntries@16
_MiAddZeroingThreads@4
_MiAddingWorkingSetPageShortly@8
_MiAdjustCachedStacks@0
_MiAdjustFaultList@4
_MiAdjustModifiedPageLoad@12
_MiAdjustPteBins@0
_MiAdvanceFaultList@4
_MiAdvanceVadHint@12
_MiAdvanceVadView@8
_MiAgePte@12
_MiAgePteWorker@24
_MiAgeWorkingSet@16
_MiAgeWorkingSetEPTCallback@20
_MiAgeWorkingSetTail@4
_MiAllocateAccessLog@4
_MiAllocateAweInfo@20
_MiAllocateCalibrationResultsMemory@4
_MiAllocateChildVads@8
_MiAllocateCombineProto@24
_MiAllocateContiguousMemory@28
_MiAllocateCrcList@12
_MiAllocateDriverPage@12
_MiAllocateDummyPage@0
_MiAllocateEnclaveVad@20
_MiAllocateFastLargePagesForMdl@12
_MiAllocateFileExtents@20
_MiAllocateFromSubAllocatedRegion@16
_MiAllocateHyperSpace@4
_MiAllocateImportList@4
_MiAllocateInPageSupport@16
_MiAllocateInPageSupportBlock@8
_MiAllocateKernelStackPages@24
_MiAllocateLargeZeroPages@28
_MiAllocateMappedWriterMdls@4
_MiAllocateMdlPagesByLists@28
_MiAllocateModWriterEntry@12
_MiAllocateMostlyContiguousPagesForMdl@12
_MiAllocateNewSubAllocatedRegion@8
_MiAllocatePagesForMdl@44
_MiAllocatePartitionId@4
_MiAllocatePartitionPhysicalPages@24
_MiAllocatePerSessionProtos@20
_MiAllocatePfnRepurposeLogDispatch@16
_MiAllocatePool@16
_MiAllocateProcessShadow@8
_MiAllocateProcessVads@8
_MiAllocateSkipPagesForMdl@12
_MiAllocateSlabEntry@12
_MiAllocateTempLoaderEntry@4
_MiAllocateTopLevelPage@12
_MiAllocateUserPhysicalPages@20
_MiAllocateUserStack@8
_MiAllocateVad@12
_MiAllocateVirtualMemory@12
_MiAllocateVirtualMemoryCommon@44
_MiAllocateVirtualMemoryPrepare@52
_MiAllocateWorkingSetSwapSupport@4
_MiAllocateWsle@32
_MiAllocateZeroPageDecisionTraceBuffer@8
_MiAllowControlAreaDelete@4
_MiAllowGuardFault@4
_MiAllowImageMap@16
_MiAllowProtectionChange@24
_MiAllowReadInProgress@8
_MiAllowWorkingSetExpansion@4
_MiAnyPagesRemovalPending@8
_MiAnyProtosAreMapped@8
_MiAppendSubsectionChain@12
_MiAppendWsleCluster@12
_MiApplyBytestreamFixup@12
_MiApplyCommitDelay@12
_MiApplyCompressedFixups@16
_MiApplyRawFixups@16
_MiApplyStraddleFixups@24
_MiArbitraryCodeBlocked@4
_MiAreChargesNeededToLockPage@4
_MiArePageContentsZero@8
_MiAssembleLargePagePfnList@8
_MiAssignInitialPageAttribute@8
_MiAttachSessionGlobal@8
_MiAttachThreadDone@4
_MiAttachTrimmerToSession@4
_MiAttemptCoalesce@12
_MiAttemptPageFileExtension@12
_MiAttemptPageFileReduction@4
_MiAttemptPageFileReductionApc@12
_MiAttemptSectionDelete@16
_MiAweControlArea@4
_MiAweViewInserter@8
_MiBackSingleImageWithPagefile@4
_MiBackSystemImageWithPagefile@4
_MiBadMemoryLogger@4
_MiBadPageInserted@4
_MiBadPageSignaler@4
_MiBadRefCount@4
_MiBeginPageAccessor@12
_MiBeginProcessClean@8
_MiBitmapsCachedEntryLengthChanged@12
_MiBoostUnmapPfn@4
_MiBootImageRelocated@24
_MiBuildForkPageTable@24
_MiBuildForkPte@60
_MiBuildImageControlArea@28
_MiBuildImportsForBootDrivers@0
_MiBuildMappedCluster@12
_MiBuildMdlForMappedFileFault@40
_MiBuildNewCloneDescriptor@16
_MiBuildPagedPool@0
_MiBuildReservationCluster@16
_MiBuildWakeList@8
_MiBytesForFixupVad@4
_MiBytesToMapSystemImage@4
_MiCacheImageSymbols@4
_MiCallCreateSectionFilters@4
_MiCanFileBeTruncatedInternal@20
_MiCanFlushMakeProgress@8
_MiCanGrantExecute@8
_MiCanMergeTbFlushEntryBackwards@16
_MiCanPageMove@4
_MiCanStealKernelStack@8
_MiCancelPhase0Locking@4
_MiCaptureAllWorkingSetAccessBits@8
_MiCaptureAllocateMapExtendedParameters@20
_MiCaptureAndResetWorkingSetAccessBits@12
_MiCaptureDeleteHierarchy@16
_MiCaptureDirtyBitToPfn@4
_MiCaptureImageCfgContext@40
_MiCaptureImageExceptionValues@4
_MiCapturePageFileInfoInline@12
_MiCapturePfnVm@36
_MiCaptureProtectionFromLockedProto@4
_MiCaptureSectionCreateExtendedParameters@16
_MiCaptureSecureImageBaseAddress@4
_MiCaptureSparsePages@8
_MiCaptureSystemCachePte@4
_MiCaptureUlongPtrArray@12
_MiCaptureWriteWatchDirtyBit@12
_MiCauseOverCommitPopup@4
_MiCfgInitializeProcess@4
_MiCfgMarkValidEntries@40
_MiChangeAwePageAttributes@12
_MiChangePageAttribute@12
_MiChangePageAttributeBatch@16
_MiChangePageAttributeContiguous@12
_MiChangePageAttributeLargeFreeZeroPage@12
_MiChangePageHeatImmediate@12
_MiChangingSubsectionProtos@12
_MiChargeCommit@12
_MiChargeForLockedPage@8
_MiChargeForWriteInProgressPage@8
_MiChargeFullProcessCommitment@8
_MiChargePartitionResidentAvailable@12
_MiChargeProcessCommitment@8
_MiChargeProcessPhysicalPages@8
_MiChargeResident@12
_MiChargeSegmentCommit@12
_MiChargeSystemImageCommitment@8
_MiCheckAndProcessCcAccessLog@12
_MiCheckAndUpdateIoAttribution@4
_MiCheckAndUpdatePagingFileMinimum@8
_MiCheckCommitReleaseFromVad@24
_MiCheckContiguityTradeEligible@4
_MiCheckControlArea@8
_MiCheckDosCalls@8
_MiCheckFatalAccessViolation@16
_MiCheckForConflictingVad@12
_MiCheckForConflictingVadExistence@12
_MiCheckForControlAreaDeletion@4
_MiCheckForUserStackOverflow@8
_MiCheckFreeModifiedReservations@4
_MiCheckHintedPageFileSpace@16
_MiCheckLargePageOk@4
_MiCheckLargePageSystemImage@8
_MiCheckLogPinDriverAddresses@0
_MiCheckPageFileMapping@4
_MiCheckPhysicalAddressRange@12
_MiCheckProcessShadow@8
_MiCheckProcessorPteCache@4
_MiCheckProtoPtePageState@8
_MiCheckPteForWriteCluster@28
_MiCheckPteRelease@8
_MiCheckPteReserve@8
_MiCheckPurgeAndUpMapCount@4
_MiCheckRelevantKernelShadows@4
_MiCheckSecuredVad@20
_MiCheckSessionPoolAllocations@0
_MiCheckSlabPage@12
_MiCheckSystemNxFault@16
_MiCheckSystemPageTables@4
_MiCheckSystemTrimEndCriteria@12
_MiCheckTrimUnusedPageFileRegions@4
_MiCheckUserVirtualAddress@12
_MiCheckVadSequential@4
_MiCheckVirtualAddress@12
_MiCheckWsLimits@20
_MiClaimPhysicalRun@40
_MiCleanCfg@0
_MiCleanEmbryonicProcess@4
_MiCleanSection@12
_MiCleanVad@4
_MiCleanWorkingSet@4
_MiCleanupPageTablePages@4
_MiCleanupPartitionZeroing@4
_MiClearCommitReleaseState@4
_MiClearContainingMapping@4
_MiClearFilePointer@4
_MiClearNonPagedPtes@16
_MiClearPageFileHash@8
_MiClearPartitionPageBitMap@8
_MiClearPfnImageVerified@8
_MiClearPteAccessed@24
_MiClearRangeInPartitionTree@12
_MiClearStackOwners@8
_MiClearSystemAccessBits@12
_MiClearVadBits@16
_MiClearVadCellBits@24
_MiCloneCaptureVadCommit@4
_MiCloneDiscardVadCommit@4
_MiCloneImageVad@12
_MiCloneNoChange@8
_MiCloneProcessAddressSpace@12
_MiCloneVads@24
_MiCloneWriteWatch@8
_MiClusterVadActive@12
_MiClusterVadFull@8
_MiCoalesceFreeLargePages@12
_MiCoalesceFreePages@4
_MiCoalescePageFileBitmapsCache@12
_MiCoalescePlaceholderAllocations@16
_MiColdPageSizeSupported@4
_MiCollapseRunTopDown@4
_MiCombineActiveCrcSortByHash
_MiCombineActiveCrcSortByVa
_MiCombineAllPhysicalMemory@4
_MiCombineCandidate@12
_MiCombineIdenticalPages@24
_MiCombinePageSortByHash
_MiCombinePte@12
_MiCombineWorkingSet@4
_MiCombineWorkingSetTail@4
_MiCombiningInProgress@12
_MiCommitEnclavePages@24
_MiCommitExistingVad@44
_MiCommitPageTableRangesForVad@4
_MiCommitPageTablesForVad@12
_MiCommitPagefileBackedSection@36
_MiCommitPoolMemory@4
_MiCommitRequestFailed@16
_MiCommitVadCfgBits@12
_MiCompareActiveCrcEntries@8
_MiComparePageHash@12
_MiComparePages@8
_MiComparePteProtections@20
_MiCompareSlabEntry@8
_MiCompareTbFlushTimeStamp@8
_MiCompletePrivateZeroFault@12
_MiCompleteProtoPteFault@24
_MiCompleteRestrictedImageFault@16
_MiCompleteSystemCacheViewFlush@4
_MiCompressImportList@8
_MiCompressRelocations@8
_MiCompressTbFlushList@4
_MiComputeAgeDistribution@8
_MiComputeAgingPercent@4
_MiComputeAweCharges@8
_MiComputeBadImageHeaderType@12
_MiComputeCommitChargeForZeroPteRange@12
_MiComputeCommitThresholds@4
_MiComputeContiguousSubsectionPte@12
_MiComputeDataFlushRange@24
_MiComputeDriverProtection@8
_MiComputeFaultCluster@16
_MiComputeFaultNode@12
_MiComputeFlushRange@20
_MiComputeHash64@4
_MiComputeIdealDpcGang@12
_MiComputeIdealFirstSubsection@4
_MiComputeImagePteIndex@8
_MiComputeImageVadCommitCharge@16
_MiComputeMaximumFaultCluster@8
_MiComputeMemoryNodeProcessorAssignments@4
_MiComputeNextWalkPte@8
_MiComputeNodeMemory@8
_MiComputeOptimalWriteProcessors@4
_MiComputeOptimalZeroPath@0
_MiComputePageCommitment@24
_MiComputePageHash@8
_MiComputePagedPoolSegmentBytes@4
_MiComputePreferredNode@4
_MiComputeProcessUserVa@16
_MiComputePxeWalkAction@12
_MiComputeRunTimeZeroComparisons@0
_MiComputeSystemTrimCriteria@8
_MiComputeTrimAmount@12
_MiComputeZeroClusterMaximum@12
_MiConfigureDynamicMemory@0
_MiConfigureMemoryInsertion@12
_MiConfigureMemoryRemoval@12
_MiConfirmPageIsZero@4
_MiConstructLoaderEntry@24
_MiConsumeOverCommit@12
_MiContractPagingFiles@4
_MiContractWsSwapPageFile@4
_MiContractWsSwapPageFileWorker@4
_MiControlAreaRequiresCharge@8
_MiControlAreaUsingCopyExtents@4
_MiControlAreaUsingExtents@4
_MiConvertAndFlushWsleVas@8
_MiConvertContiguousPages@12
_MiConvertEntireLargePageToSmall@28
_MiConvertHiberPhasePages@4
_MiConvertHiberPhasePte@12
_MiConvertInitialMemoryBlock@8
_MiConvertIoPfnTreeLockExclusiveToShared@0
_MiConvertLargePfnToSmall@16
_MiConvertLockedSmallPageToLarge@16
_MiConvertPrivateToProto@28
_MiConvertPteToRotateProtection@8
_MiConvertRunsToPages@12
_MiConvertSmallPageRangeToLarge@8
_MiConvertStandbyToProto@32
_MiConvertStaticSubsections@4
_MiCopyDataPageToImagePage@24
_MiCopyFileOnlyGlobalSubsectionPage@28
_MiCopyForkedFixupVad@8
_MiCopyFromUntrustedMemory@16
_MiCopyHeaderIfResident@8
_MiCopyKstack@12
_MiCopyLargeVad@12
_MiCopyOnWrite@16
_MiCopyOnWriteCheckConditions@8
_MiCopyPage@16
_MiCopyPagesIntoEnclave@36
_MiCopyPfnEntryEx@12
_MiCopySinglePage@24
_MiCopyToCfgBitMap@36
_MiCopyToUntrustedMemory@16
_MiCopyToUserVa@16
_MiCopyTopLevelMappings@8
_MiCountSharedPages@12
_MiCountSystemImageCommitment@4
_MiCountSystemPool@12
_MiCrashdumpRemovePte@12
_MiCrcStillIntact@20
_MiCreateAweInfoBitMap@4
_MiCreateBootSlabEntries@16
_MiCreateCloneChain@8
_MiCreateColorAnchors@8
_MiCreateDataFileMap@36
_MiCreateDecayPfn@0
_MiCreateEnclave@36
_MiCreateEnclaveRegions@4
_MiCreateFixupRecord@28
_MiCreateForkWsle@20
_MiCreateForkWsles@0
_MiCreateFreePfns@4
_MiCreateHardwareEnclave@20
_MiCreateImageFileMap@32
_MiCreateImageOrDataSection@4
_MiCreateInitialLargeLeafPfns@24
_MiCreateInitialPfns@12
_MiCreateInitialSystemWsles@4
_MiCreateLargePageVad@16
_MiCreateLargePfnList@20
_MiCreateMdl@16
_MiCreateMemoryEvent@28
_MiCreateMemoryEventSD@4
_MiCreateNewProcessTopLevelMappings@8
_MiCreateNewSection@8
_MiCreateNodeLists@8
_MiCreatePageFileSpaceBitmaps@4
_MiCreatePagefile@32
_MiCreatePagingFile@24
_MiCreatePagingFileMap@4
_MiCreatePartitionNamespace@4
_MiCreatePebOrTeb@12
_MiCreatePerSessionProtos@8
_MiCreatePfnBitMaps@8
_MiCreatePfnDatabase@4
_MiCreatePfnTemplate@8
_MiCreatePlaceholderStorage@4
_MiCreateProcessDefaultAweInfo@8
_MiCreatePrototypePtes@16
_MiCreatePteCopyList@12
_MiCreatePteWsle@12
_MiCreateResidentPfnTemplate@4
_MiCreateRotateView@4
_MiCreateSection@56
_MiCreateSectionCommon@40
_MiCreateSectionForDriver@16
_MiCreateSessionDriverProtos@12
_MiCreateSharedZeroPages@8
_MiCreateSoftwareWsle@8
_MiCreateSparsePfnDatabase@4
_MiCreateSystemPageTable@12
_MiCreateSystemPageTableTail@4
_MiCreateSystemSection@56
_MiCreateSystemWsles@20
_MiCreateUserPhysicalView@16
_MiCreateVadEventBitmap@16
_MiCreateWriteWatchView@12
_MiCreateZeroThreadContext@4
_MiDbgCopyMemory@24
_MiDbgCopyMemoryTarget@16
_MiDbgMarkPfnModified@12
_MiDbgReadWriteEnclave@20
_MiDbgReadWriteEnclaveUnaligned@16
_MiDbgReleaseAddress@12
_MiDbgTranslatePhysicalAddress@16
_MiDbgUnTranslatePhysicalAddress@4
_MiDbgWriteCheck@12
_MiDecayPfnFullyInitialized@4
_MiDecommitEnclavePages@20
_MiDecommitHardwareEnclavePages@20
_MiDecommitLargePoolVa@12
_MiDecommitLargePte@24
_MiDecommitPages@24
_MiDecommitRegion@12
_MiDecreaseAvailablePages@16
_MiDecreaseUsedPtesCount@8
_MiDecrementAndInsertStandbyPages@12
_MiDecrementAweMapCount@16
_MiDecrementCloneBlockReference@12
_MiDecrementCloneHeaderCount@4
_MiDecrementCombinedPte@8
_MiDecrementControlAreaCount@8
_MiDecrementModifiedWriteCount@8
_MiDecrementProtoShareCounts@8
_MiDecrementShareCount@4
_MiDecrementSubsection@4
_MiDecrementSubsectionViewCount@8
_MiDecrementSubsections@12
_MiDecrementVadsBeingDeleted@4
_MiDelayFaultingThread@4
_MiDeleteAllHardwareEnclaves@0
_MiDeleteAweBitMap@8
_MiDeleteAweInfo@8
_MiDeleteAweInfoPages@4
_MiDeleteBatch@4
_MiDeleteBootRange@12
_MiDeleteCachedKernelStack@4
_MiDeleteCachedSegment@4
_MiDeleteCachedSubsection@4
_MiDeleteCloneDescriptor@8
_MiDeleteCloneZombies@8
_MiDeleteClusterPage@8
_MiDeleteClusterSection@8
_MiDeleteColorAnchors@4
_MiDeleteControlArea@4
_MiDeleteControlAreaList@4
_MiDeleteDeferredCloneDescriptors@4
_MiDeleteEmptyPageTable@12
_MiDeleteEmptyPageTableCommit@4
_MiDeleteEmptyPageTableTail@4
_MiDeleteEmptyPageTables@12
_MiDeleteEmptySubsections@4
_MiDeleteEnclavePage@8
_MiDeleteEnclavePages@8
_MiDeleteExtentPfns@4
_MiDeleteFinalPageTables@4
_MiDeleteImageCreationMdls@8
_MiDeleteImageSecurity@4
_MiDeleteInsertedCloneVads@4
_MiDeleteKernelStack@8
_MiDeleteLargeUserPde@12
_MiDeleteMappedMdls@4
_MiDeleteMergedPte@8
_MiDeleteNonPagedPoolPte@12
_MiDeleteNonPagedPoolTail@4
_MiDeletePagablePteRange@28
_MiDeletePageDirectoryPages@4
_MiDeletePageFileSectionNodes@4
_MiDeletePagefile@8
_MiDeletePagingFiles@4
_MiDeleteParentDecayNode@4
_MiDeletePartialCloneVads@8
_MiDeletePartialVad@20
_MiDeletePartition@4
_MiDeletePartitionResources@4
_MiDeletePerSessionProtos@4
_MiDeletePfnBitMaps@4
_MiDeletePhysmemPte@8
_MiDeleteProcessPhysicalPages@4
_MiDeleteProcessShadow@8
_MiDeletePteList@24
_MiDeletePteRun@8
_MiDeletePteWsleCluster@20
_MiDeleteRotateAndStopFaults@12
_MiDeleteSectionAwe@4
_MiDeleteSegmentPages@4
_MiDeleteSessionAddressSpace@8
_MiDeleteSessionDriverProtos@4
_MiDeleteSessionPdes@8
_MiDeleteSlabAllocator@12
_MiDeleteSparseRange@8
_MiDeleteStaleCacheMaps@4
_MiDeleteSubsection@4
_MiDeleteSubsectionLargePages@12
_MiDeleteSubsectionPages@8
_MiDeleteSystemPagableVm@24
_MiDeleteSystemPageTable@12
_MiDeleteSystemPageTableTail@4
_MiDeleteSystemPageTables@24
_MiDeleteTopLevelPage@8
_MiDeleteTopLevelSessionMapping@4
_MiDeleteTransitionPte@16
_MiDeleteUnusedSoftwareWsle@12
_MiDeleteVa@12
_MiDeleteVaTail@4
_MiDeleteVad@12
_MiDeleteVadAwePtes@12
_MiDeleteVadBitmap@4
_MiDeleteValidSystemPage@16
_MiDeleteVirtualAddresses@16
_MiDeleteWorkingSetList@4
_MiDeleteWsleRange@16
_MiDeleteZeroContext@4
_MiDeleteZeroThreadContext@4
_MiDeliverPicoExceptionForProbedPage@8
_MiDemoteCombinedPte@12
_MiDemoteLargeFreePage@20
_MiDemoteLocalLargePage@16
_MiDemotePfnListChain@8
_MiDemoteValidLargePageOneLevel@4
_MiDeprioritizeVad@8
_MiDeprioritizeVirtualAddresses@16
_MiDerefPageFileSpaceBitmaps@12
_MiDereferenceCombineBlock@8
_MiDereferenceCombineCrc@4
_MiDereferenceControlArea@4
_MiDereferenceControlAreaBySection@8
_MiDereferenceControlAreaFile@8
_MiDereferenceControlAreaPfnList@16
_MiDereferenceControlAreaProbe@8
_MiDereferenceDataSubsections@20
_MiDereferenceExtendInfo@8
_MiDereferenceFailedControlArea@4
_MiDereferenceIoPages@12
_MiDereferencePageRuns@4
_MiDereferencePageRunsEx@8
_MiDereferencePerSessionProtos@8
_MiDereferenceSegmentThread@4
_MiDereferenceSession@0
_MiDereferenceSessionFinal@0
_MiDereferenceSingleImport@8
_MiDereferenceSubsectionProtos@12
_MiDereferenceVad@4
_MiDereferenceVadUnsafe@4
_MiDescribePageRun@12
_MiDestroySection@12
_MiDetachProcessFromSession@4
_MiDetachSessionGlobal@4
_MiDetermineCoalescedLargePageHeatState@16
_MiDetermineModifiedPageListHead@8
_MiDetermineNewPfnHeatState@8
_MiDeterminePoolType@4
_MiDirtySystemCachePte@16
_MiDisablePagingOfDriver@4
_MiDiscardTransitionPteEx@8
_MiDispatchFault@8
_MiDoGangAssignment@8
_MiDoSingleFixup@12
_MiDoStackCopy@16
_MiDoesControlAreaHaveUserWritableReferences@4
_MiDoesPageRequireConditionalFixups@8
_MiDoneWithThisPageGetAnother@16
_MiDoubleLockMdlPage@4
_MiDoubleUnlockMdlPage@4
_MiDpcGangTarget@16
_MiDrainControlAreaWrites@8
_MiDrainCrossPartitionUsage@4
_MiDrainSystemAccessLog@4
_MiDrainZeroLookasides@16
_MiDriverLoadSucceeded@24
_MiDriverPageMustStayResident@8
_MiDummyApcRoutine@20
_MiDuplicateCloneLeaf@20
_MiEliminateStaleExtents@12
_MiEliminateZeroPages@12
_MiEmptyAccessLogs@4
_MiEmptyAllWorkingSets@4
_MiEmptyDecayClusterTimers@4
_MiEmptyDeferredWorkingSetEntries@4
_MiEmptyKernelStackCache@0
_MiEmptyPageAccessLog@4
_MiEmptyPte@12
_MiEmptyPteBins@8
_MiEmptyTargetedWorkingSet@4
_MiEmptyWorkingSet@8
_MiEmptyWorkingSetHelper@16
_MiEmptyWorkingSetInitiate@16
_MiEmptyWorkingSetPrivatePagesByVa@8
_MiEmptyWorkingSetTail@4
_MiEnableNewPfns@16
_MiEnablePagingOfDriver@4
_MiEnablePagingTheExecutive@0
_MiEnablePartitionMappedWrites@4
_MiEncodeProtoFill@16
_MiEndDpcGang@4
_MiEndingOffset@4
_MiEndingOffsetWithLock@4
_MiEnumerateImportList@12
_MiEnumerateSlabAllocators@12
_MiEvictPageTableLock@20
_MiExamineHalVa@0
_MiExceptionForMappedVa@4
_MiExpandFlushMdl@8
_MiExpandPartitionIds@0
_MiExpandPtes@8
_MiExpandSharedZeroCluster@4
_MiExpandSystemCache@8
_MiExpandVadBitMap@8
_MiExpandVadBitMapDown@8
_MiExtendPageFilesIfNecessary@12
_MiExtendPagingFileMaximum@12
_MiExtendPagingFiles@4
_MiExtendSection@24
_MiExtendWorkingSetSwapPagefile@12
_MiFaultInPagedPool@4
_MiFaultInProbeAddress@4
_MiFaultListPagesRemaining@4
_MiFillCombinePage@16
_MiFillCommitReturnInfo@12
_MiFillFileOnlyProtoAsBad@8
_MiFillGapAddresses@12
_MiFillGapPtes@20
_MiFillHyperPtes@16
_MiFillLogProcessInfo@12
_MiFillMapFileInfo@8
_MiFillNoReservationCluster@12
_MiFillPageExtraInfo@12
_MiFillPerSessionProtos@36
_MiFillPfnGaps@0
_MiFillPhysicalPages@12
_MiFillPoolCommitPageTable@4
_MiFillPteHierarchy@8
_MiFillSessionWorkingSetEntry@8
_MiFillSystemPtes@24
_MiFillVirtualFaultInfo@16
_MiFinalizeImageHeaderPage@4
_MiFinalizePageAttribute@12
_MiFindActualFaultingPte@8
_MiFindBestOutswapPagefile@8
_MiFindClearVadBitsAligned@16
_MiFindContiguousPages@44
_MiFindEmptyAddressRange@36
_MiFindEmptyAddressRangeDown@32
_MiFindEmptyAddressRangeDownTree@28
_MiFindEmptyAddressRangeInTree@28
_MiFindFreePageFileSpace@16
_MiFindFreePageFileSpaceForward@16
_MiFindLargeMapping@8
_MiFindLargeNodePage@28
_MiFindLargePageMemory@28
_MiFindLargestLoaderDescriptor@4
_MiFindLastSubsection@8
_MiFindPageFileWriteCluster@16
_MiFindPagesForMdl@4
_MiFindPlaceholderVadToReplace@16
_MiFindRebuildCandidate@24
_MiFindZeroCloneBlock@8
_MiFinishCreateSection@4
_MiFinishHardFault@16
_MiFinishLargePageFree@12
_MiFinishLastForkPageTable@8
_MiFinishMdlForMappedFileFault@20
_MiFinishPageFileExtension@12
_MiFinishPlaceholderVadReplacement@12
_MiFinishResume@4
_MiFinishVadDeletion@16
_MiFlowThroughInsertNode@8
_MiFlowThroughRemoveNode@4
_MiFlushAcquire@12
_MiFlushAllFilesystemPages@4
_MiFlushAllHintedStorePages@4
_MiFlushAllPages@16
_MiFlushAllPagesWorker@24
_MiFlushCacheForAttributeChange@12
_MiFlushCacheMdl@12
_MiFlushCacheRange@12
_MiFlushCachedIoPfnRange@12
_MiFlushComplete@12
_MiFlushControlArea@16
_MiFlushDataSection@8
_MiFlushDirtyBitsToPfn@12
_MiFlushEnclaveTb@12
_MiFlushEntireTbDueToAttributeChange@0
_MiFlushFileOnlyMdl@16
_MiFlushHyperSpace@0
_MiFlushRelease@12
_MiFlushSectionInternal@28
_MiFlushStaleCacheMap@4
_MiFlushStrongCodeDriverLoadFailures@0
_MiFlushTbAsNeeded@16
_MiFlushTbList@4
_MiFlushTbListEarly@8
_MiFlushValidPteFromTb@16
_MiForceCrashForInvalidAccess@8
_MiForceSectionClosed@8
_MiForceZeroingThreadExits@4
_MiForcedTrim@8
_MiFormFullImageName@12
_MiFreeAweView@4
_MiFreeBootDriverPages@20
_MiFreeBootPageTable@4
_MiFreeCloneDescriptor@8
_MiFreeClonePool@4
_MiFreeCombineBlock@4
_MiFreeCombineMdls@4
_MiFreeCombinePool@4
_MiFreeContiguousPages@8
_MiFreeDriverInitialization@4
_MiFreeEmptyBootPageTable@4
_MiFreeExcessSegments@0
_MiFreeForkMaps@4
_MiFreeImageCfgContext@4
_MiFreeImageLoadConfig@4
_MiFreeInPageSupportBlock@4
_MiFreeInitializationCode@16
_MiFreeLargeInitializationCodePages@12
_MiFreeLargePageChain@4
_MiFreeLargePageMemory@12
_MiFreeLargePageView@16
_MiFreeLargePages@8
_MiFreeLargeZeroPages@12
_MiFreeListPageContentsChanged@4
_MiFreeLoadedImportList@4
_MiFreeMdlPageRun@12
_MiFreeMdlTracker@8
_MiFreeModWriterEntry@8
_MiFreeModifiedReservations@8
_MiFreeOverlappedFlushEntry@4
_MiFreePageChain@4
_MiFreePageFileHashPfn@4
_MiFreePageFileHashPfns@4
_MiFreePageFileSpaceBitmaps@4
_MiFreePageToSlabAllocator@12
_MiFreePageToSlabEntry@12
_MiFreePagesFromMdl@8
_MiFreePartitionId@4
_MiFreePartitionNodePages@12
_MiFreePartitionPageRun@16
_MiFreePartitionPhysicalPages@8
_MiFreePartitionTree@16
_MiFreePhysicalPageChain@12
_MiFreePhysicalPages@8
_MiFreePhysicalView@8
_MiFreePlaceholderStorage@4
_MiFreePlaceholderVadEvent@4
_MiFreePoolPagesLeft@4
_MiFreePrivateFixupEntryForSystemImage@8
_MiFreeReadListPages@4
_MiFreeRegistryPageRange@8
_MiFreeRelocations@8
_MiFreeReservationRun@8
_MiFreeReservationRuns@12
_MiFreeRotateVadEvent@4
_MiFreeRotateView@4
_MiFreeSessionSpaceMap@0
_MiFreeSlabEntries@12
_MiFreeSlabEntry@8
_MiFreeSmallPageFromMdl@8
_MiFreeSubsectionProtos@4
_MiFreeToSubAllocatedRegion@16
_MiFreeTransitionPageHeatList@4
_MiFreeUnmappedPageTables@12
_MiFreeUnusedPfnPages@4
_MiFreeUnusedPfnPagesDpc@16
_MiFreeVadEventBitmap@12
_MiFreeVadEventBitmapCharges@8
_MiFreeVadEvents@4
_MiFreeVadRange@28
_MiFreeWorkingSetSwapContext@8
_MiFreeWsleList@12
_MiFreeZeroPageSlistSufficient@12
_MiFreedUnusedPfnPagesWorker@4
_MiFreezeIoPfnNode@12
_MiGatherHiberRange@16
_MiGatherMappedPages@12
_MiGatherPagefilePages@4
_MiGenerateAccessViolation@4
_MiGenerateRandomPte@4
_MiGenerateSecureCookie@0
_MiGenerateSystemImageNames@24
_MiGetAggregateWorkingSetSize@4
_MiGetAnyMultiplexedVm@4
_MiGetAvailablePagesBelowPriority@8
_MiGetAvailablePagesExcludeSlists@4
_MiGetAweInfoPartition@4
_MiGetAweNode@4
_MiGetAwePageSize@4
_MiGetAwePageSizeFromVa@4
_MiGetAweVadPageSize@4
_MiGetAweVadPartition@4
_MiGetAweViewPageSize@4
_MiGetBaseResidentPage@4
_MiGetBaseResidentPageForBugCheck@4
_MiGetBootImagePageProtection@16
_MiGetCcAccessLog@8
_MiGetChannelInformation@16
_MiGetClosestImplicitNode@4
_MiGetClosestNodeWithProcessors@4
_MiGetClusterPage@24
_MiGetCombineDomain@8
_MiGetCommittedPages@4
_MiGetContainingPageTable@4
_MiGetControlAreaLoadConfig@4
_MiGetControlAreaPartition@4
_MiGetControlAreaPtes@4
_MiGetDanglingExtent@4
_MiGetEffectivePagePriorityThread@4
_MiGetEnclavePage@8
_MiGetExceptionInfo@12
_MiGetFastLargePages@24
_MiGetFileHashPage@8
_MiGetFreeOrZeroPageAnyColor@12
_MiGetFreeZeroLargePages@32
_MiGetGangAssignment@8
_MiGetHardFaultPages@36
_MiGetHighestPteConsumer@4
_MiGetImageProtoProtection@8
_MiGetInPageSupportBlock@4
_MiGetInstructionPointer@0
_MiGetIoPfnCacheAttribute@8
_MiGetKernelStackSwapSupport@8
_MiGetLargePage@24
_MiGetLargePageChain@12
_MiGetLargePageListHeadBase@24
_MiGetLargePagesDemoteAsNeeded@28
_MiGetLargestPageIndex@0
_MiGetLeafVa@4
_MiGetNextDirectFixupProto@8
_MiGetNextNonGapPfnPage@16
_MiGetNextPageColor@4
_MiGetNextPageTable@24
_MiGetNextPageTablePte@12
_MiGetNextPageTableTail@4
_MiGetNextSession@8
_MiGetNodeChannelPageCounts@24
_MiGetNumberOfCachedPtes@4
_MiGetOptimalProcessorWriteCount@8
_MiGetPage@12
_MiGetPageChain@28
_MiGetPageFileHigh@8
_MiGetPageFileSectionForReservation@12
_MiGetPageForEnclave@8
_MiGetPageForHeader@8
_MiGetPageForWriteCluster@32
_MiGetPageFromSlabAllocator@4
_MiGetPageFromSlabEntry@8
_MiGetPagePrivilege@12
_MiGetPageProtection@20
_MiGetPageSlist@12
_MiGetPageTableLockBuffer@12
_MiGetPageTablePages@12
_MiGetPageTablesForLargeMap@16
_MiGetPagesRemainingInResidentPage@12
_MiGetPagingFileOffset@4
_MiGetPartitionLargePageListCount@0
_MiGetPdeAddress@4
_MiGetPerfectColorHeadPage@20
_MiGetPfnLink@4
_MiGetPfnPageSizeIndex@4
_MiGetPfnPageSizeIndexUnsynchronized@12
_MiGetPfnPriority@4
_MiGetPfnProtection@12
_MiGetPhysicalAddress@12
_MiGetPhysicalMemoryRanges@8
_MiGetPoolPages@12
_MiGetPrivatePageCount@4
_MiGetProcessPartition@4
_MiGetProcessorFlushList@4
_MiGetProtectionFromPte@12
_MiGetProtoPteAddress@16
_MiGetPrototypePteRanges@8
_MiGetPteAddress@4
_MiGetPteFromCopyList@12
_MiGetPteLink@8
_MiGetPteMappingPair@8
_MiGetReadyInPageBlock@4
_MiGetSectionStrongImageReference@4
_MiGetSessionIdForVa@4
_MiGetSessionVm@0
_MiGetSharedProtos@12
_MiGetSharedProtosAtDpcLevel@12
_MiGetSharedVm@4
_MiGetSlabAllocator@12
_MiGetSlabPage@20
_MiGetSlabStandbyPage@4
_MiGetSmallZeroPtes@8
_MiGetStandbyRepurposed@8
_MiGetSubsectionCharges@12
_MiGetSubsectionDriverProtos@4
_MiGetSubsectionImageProtection@4
_MiGetSystemAddressForImage@12
_MiGetSystemCacheReverseMap@4
_MiGetSystemPage@8
_MiGetSystemPteStatistics@12
_MiGetSystemRegionIndex@4
_MiGetSystemRegionType@4
_MiGetThreadPartition@4
_MiGetTopLevelPfn@4
_MiGetUserReservationHighestAddress@8
_MiGetVaAge@8
_MiGetVadCacheAttribute@4
_MiGetVadMandatoryPageSize@4
_MiGetVadPageSize@4
_MiGetVadPtesInCluster@4
_MiGetVadWakeList@8
_MiGetValidAweProtection@12
_MiGetVirtualFaultPageInfo@8
_MiGetVmPartition@4
_MiGetWorkingSetInfo@20
_MiGetWorkingSetInfoEx@16
_MiGetWorkingSetInfoList@16
_MiGetWsAndInsertVad@4
_MiGetWsAndMakePageTablesNx@0
_MiGetWsleContents@8
_MiGetWsleProtection@8
_MiGraphicsProtectionAllowed@8
_MiHandleBootImage@12
_MiHandleCollidedFault@24
_MiHandleDriverNonPagedSections@12
_MiHandleEnclaveFault@4
_MiHandleForkTransitionPte@48
_MiHandleInPageError@4
_MiHandleSynchronousFlushError@20
_MiHandleTransitionFault@32
_MiHashIsCommon@16
_MiHonorRangeStraddleRequirement@16
_MiHotAddPartitionMemory@12
_MiHotRemovePartitionPageRun@16
_MiHyperPage@4
_MiHyperSpaceSize@0
_MiIdealClusterPage@32
_MiIdentifyPfn@8
_MiIdentifyPfnAsNonPagedPool@12
_MiIdentifyPfnWrapper@8
_MiImageCantMove@4
_MiImageCfgRvaIteratorFirst@12
_MiImageCfgRvaIteratorNext@12
_MiImageGetRawRvaState@8
_MiImageNeedsConditionalFixups@8
_MiImagePagable@8
_MiImagePageOk@16
_MiImageProtoChargedCommit@8
_MiImageRvaRawEnumFirst@8
_MiImageRvaRawEnumNext@8
_MiImageSuitableForSystem@8
_MiImageUnused@12
_MiInPagePageTable@8
_MiInPageSingleKernelStack@8
_MiInSwapPageDirectories@8
_MiInSwapSharedWorkingSetWorker@4
_MiInSwapStore@4
_MiInSwapStoreWorker@4
_MiIncludeSharedCommit@4
_MiIncreaseAvailablePages@8
_MiIncreaseCommitLimits@20
_MiIncreaseUsedPtesCount@8
_MiIncrementAweMapCount@16
_MiIncrementCombineMdl@8
_MiIncrementPageTableLockCheckWrap@4
_MiIncrementSubsectionViewCount@8
_MiInitNucleus@4
_MiInitPerfMemoryFlags@8
_MiInitSystem@8
_MiInitializeAllResidentPageBasePfns@28
_MiInitializeApiSets@4
_MiInitializeBootDefaults@4
_MiInitializeBootLoadedDriverPfns@4
_MiInitializeBootMemoryDescriptor@16
_MiInitializeBootPageDirectoryPages@0
_MiInitializeBootProcess@0
_MiInitializeCacheFlushing@0
_MiInitializeCacheSizes@0
_MiInitializeCfg@0
_MiInitializeChannelOrdering@8
_MiInitializeColorBase@12
_MiInitializeColorTable@8
_MiInitializeColors@0
_MiInitializeCombining@8
_MiInitializeCommitment@4
_MiInitializeCreateSectionPacket@56
_MiInitializeDecayPfns@0
_MiInitializeDpcGang@12
_MiInitializeDriverImages@4
_MiInitializeDriverPtes@4
_MiInitializeDummyPages@0
_MiInitializeDynamicBitmap@16
_MiInitializeDynamicPfns@24
_MiInitializeDynamicVa@0
_MiInitializeEnclave@20
_MiInitializeEnclaveMetadataPage@0
_MiInitializeEnclavePfn@12
_MiInitializeFaultVaListCore@16
_MiInitializeFixupVad@8
_MiInitializeForkMaps@8
_MiInitializeGapFrames@8
_MiInitializeImageHeaderPage@8
_MiInitializeImageProtos@8
_MiInitializeInPageSupport@8
_MiInitializeKernelStacks@0
_MiInitializeLargeMdlLeafPfns@8
_MiInitializeLargeNonPagedPoolLeafFrames@8
_MiInitializeLargePageNodeLists@4
_MiInitializeLargeUserBasePfn@12
_MiInitializeLoadedModuleList@4
_MiInitializeLockedPagesTracking@4
_MiInitializeMdlBatchPages@4
_MiInitializeMdlLeafPfns@24
_MiInitializeMdlOneNodeBatchPages@12
_MiInitializeMdlPfn@8
_MiInitializeMdlSinglePage@24
_MiInitializeMemoryEvents@4
_MiInitializeMirroring@0
_MiInitializeModifiedWriterParameters@0
_MiInitializeNonPagedPool@0
_MiInitializeNonPagedPoolThresholds@0
_MiInitializeNuma@4
_MiInitializeNumaGraph@4
_MiInitializeNumaRangesTemporary@0
_MiInitializePageAccessLogging@12
_MiInitializePageColorBase@12
_MiInitializePageDirectoryPages@8
_MiInitializePageFaultPacket@20
_MiInitializePageFaultResources@0
_MiInitializePagedPoolEvents@0
_MiInitializePagefileBitmapsCache@4
_MiInitializePartition@8
_MiInitializePartitionThreads@4
_MiInitializePartitions@4
_MiInitializePfn@16
_MiInitializePfnForOtherProcess@16
_MiInitializePfnListHead@8
_MiInitializePfnsForValidMappings@4
_MiInitializePoolCommitPacket@32
_MiInitializePrivateFixupBitmap@12
_MiInitializeProcessBottomUpEntropy@4
_MiInitializeProcessPageTableCommitmentBitMaps@4
_MiInitializeProcessTopDownEntropy@8
_MiInitializeProtoPfn@16
_MiInitializePrototypePtes@16
_MiInitializePteInfo@28
_MiInitializeReadInProgressPfn@24
_MiInitializeRebuildCandidateCounts@8
_MiInitializeRelocations@0
_MiInitializeRvaStates@16
_MiInitializeScrubPacket@4
_MiInitializeSections@4
_MiInitializeSessionGlobals@0
_MiInitializeSessionIds@0
_MiInitializeSessionPool@0
_MiInitializeShadowPageTable@12
_MiInitializeSharedUserData@0
_MiInitializeSlabAllocator@12
_MiInitializeSlowPte@12
_MiInitializeStoreSupport@4
_MiInitializeSystemCache@4
_MiInitializeSystemChannelOrdering@8
_MiInitializeSystemDefaults@4
_MiInitializeSystemPageTable@20
_MiInitializeSystemPteTracker@0
_MiInitializeSystemPtes@0
_MiInitializeSystemSpaceMap@4
_MiInitializeSystemVaRange@12
_MiInitializeSystemWorkingSetList@16
_MiInitializeTbFlush@4
_MiInitializeTbFlushList@12
_MiInitializeTbFlushStamps@4
_MiInitializeTbFlushing@0
_MiInitializeTransitionPfn@12
_MiInitializeTrimCriteria@16
_MiInitializeUnusablePfns@28
_MiInitializeVadBitMap@4
_MiInitializeWalkBounds@8
_MiInitializeWorkingSetList@16
_MiInitializeWorkingSetManagerParameters@4
_MiInitializeWsSwapping@4
_MiInitializeWsleBase@8
_MiInitializeZeroingAttributes@0
_MiInsertAndUnlockStandbyPages@16
_MiInsertCachedPte@12
_MiInsertChildVads@8
_MiInsertClone@12
_MiInsertDecayClusterTimer@4
_MiInsertDemotedPages@20
_MiInsertDpcGang@8
_MiInsertInPageBlock@4
_MiInsertInSystemSpace@28
_MiInsertLargePageChain@20
_MiInsertLargePageInNodeList@4
_MiInsertLargeTbFlushEntry@12
_MiInsertLargeUserMapping@24
_MiInsertLargeVadMapping@20
_MiInsertMappingNode@4
_MiInsertMdlPageNeedsZero@12
_MiInsertNewCombineBlocks@12
_MiInsertNewProcess@8
_MiInsertPageFileInList@4
_MiInsertPageInFreeOrZeroedList@8
_MiInsertPageInList@8
_MiInsertPartitionPages@20
_MiInsertPhysicalPteMapping@12
_MiInsertPrivateVad@8
_MiInsertProcessVads@8
_MiInsertProtectedStandbyPage@8
_MiInsertPteTracker@16
_MiInsertRecursiveTbFlushEntries@12
_MiInsertSessionWorkingSet@4
_MiInsertSharedCommitNode@12
_MiInsertSlabEntry@12
_MiInsertSubsectionNode@12
_MiInsertTbFlushEntry@16
_MiInsertUnusedSegment@4
_MiInsertUnusedSubsection@8
_MiInsertVad@12
_MiInsertVadCharges@12
_MiInsertVadEvent@12
_MiInsertViewOfPhysicalSection@12
_MiInsertVmAccessedEntry@8
_MiInvalidPteConforms@12
_MiInvalidateCollidedIos@4
_MiInvalidatePageFileBitmapsCache@20
_MiIoPagesInRun@8
_MiIoPfnTreeLockContended@4
_MiIoSpaceIsConstant@8
_MiIoSpaceRunIsConstant@12
_MiIrpCompletionApcRoutine@12
_MiIsAddressGlobal@4
_MiIsAddressInDriverView@4
_MiIsAddressRangeValid@8
_MiIsCfgBitMapPageShared@8
_MiIsDecayPfn@4
_MiIsDriverPage@4
_MiIsFaultPteIntact@16
_MiIsFreeZeroPfnCold@4
_MiIsFreshPfnFromZeroedList@4
_MiIsLowestPageTablePage@4
_MiIsPageOnBadList@4
_MiIsPageTableDeletable@8
_MiIsPageTableLocked@8
_MiIsPdeOrAboveAccessible@4
_MiIsPfn@4
_MiIsPfnCommitNotCharged@4
_MiIsPfnEnclave@4
_MiIsPfnFromSlabAllocation@4
_MiIsPfnLocked@4
_MiIsPfnSystemCharged@4
_MiIsPfnTradable@4
_MiIsPoolPteCommitInProgress@8
_MiIsPoolPteInUse@8
_MiIsProbeActive@12
_MiIsProcessCfgEnabled@0
_MiIsProcessCfgExportSuppressionEnabled@0
_MiIsPrototypePteVadLookup@8
_MiIsPteDecommittedPage@4
_MiIsPteEvaluated@8
_MiIsPteInStore@16
_MiIsPteProtectionCompatible@8
_MiIsRangeFullyCommitted@12
_MiIsRegularMemory@8
_MiIsRetryIoStatus@8
_MiIsSectionActive@8
_MiIsSessionMetadata@4
_MiIsSoftwareEnclave@4
_MiIsStoreProcess@4
_MiIsSubsectionClean@4
_MiIsUserQueryVmCallerTrusted@4
_MiIsVaRangeAvailable@20
_MiIsVadEligibleForCommitRelease@4
_MiIsVadLarge@4
_MiIsVadLargePrivate@4
_MiIsWorkingSetTrimThread@0
_MiIssueAsynchronousFlush@36
_MiIssueFlowThroughFault@28
_MiIssueHardFault@8
_MiIssueHardFaultIo@12
_MiIssueNoPtesBugcheck@4
_MiIssuePageExtendRequest@16
_MiIssueSynchronousFlush@28
_MiIterateOverPartitions@8
_MiJoinSession@4
_MiJumpStack@4
_MiJumpStackTarget@4
_MiKernelStackVaToStackNode@4
_MiKernelWriteToExecutableMemory@16
_MiLargeFreePageToMdl@20
_MiLargePageFault@8
_MiLargePageFreeToZero@16
_MiLargePageMovesComplete@8
_MiLargePageMovesInProgress@4
_MiLargePagePromote@16
_MiLargePfnPromoteCandidate@12
_MiLargestSystemVa@0
_MiLdwPopupWorker@4
_MiLeapPrefetch@8
_MiLegacyImageArchitecture@4
_MiLegitimatePageForDriversToMap@4
_MiLimitLoaderBlockHighMemory@8
_MiLimitLoaderBlockTotalMemory@8
_MiLinkPoolCommitChain@8
_MiLoadImportDll@20
_MiLoadUserSymbols@12
_MiLocateAddress@4
_MiLocateCloneAddress@8
_MiLocateCombineBlock@20
_MiLocateExclusiveSecure@4
_MiLocateKernelSections@4
_MiLocateLockedVadEvent@8
_MiLocateLowestConflictingVad@12
_MiLocateOldestSecure@4
_MiLocatePagefileSubsection@8
_MiLocatePhysicalViewInTree@8
_MiLocateSessionProtosInSubsection@8
_MiLocateSubsectionNode@16
_MiLocateVadEvent@8
_MiLocateWsle@8
_MiLockAddressSpaceToo@8
_MiLockAllMemoryLists@0
_MiLockAndDecrementShareCount@8
_MiLockAndIncrementShareCount@4
_MiLockAndInsertPageInFreeList@4
_MiLockAwePagesExclusive@8
_MiLockAwePagesShared@8
_MiLockAweVadsExclusive@4
_MiLockAweVadsShared@4
_MiLockCode@16
_MiLockControlAreaSectionExtend@8
_MiLockDownWorkingSet@8
_MiLockDriverMappings@4
_MiLockDynamicMemoryExclusive@8
_MiLockDynamicMemoryShared@8
_MiLockImageSection@16
_MiLockIoPfnTree@4
_MiLockLeafPage@8
_MiLockLoaderEntry@8
_MiLockLowestValidPageTable@12
_MiLockMemoryLists@8
_MiLockNestedPageAtDpcInline@4
_MiLockNestedVad@4
_MiLockNonPagedPoolPte@8
_MiLockOwnedProtoPage@8
_MiLockPagableImageSection@8
_MiLockPagableSections@8
_MiLockPage@4
_MiLockPageAndSetDirty@8
_MiLockPageAtDpc@4
_MiLockPageInline@4
_MiLockPageLeafPageTable@4
_MiLockPageTable@8
_MiLockPageTableInternal@12
_MiLockPageTablePage@8
_MiLockPageTableRange@8
_MiLockPagedAddress@4
_MiLockPagedRange@8
_MiLockPartitionSystemThreads@8
_MiLockPoolCommitPageTable@8
_MiLockProbePacketWorkingSet@4
_MiLockProtoPage@12
_MiLockProtoPoolPage@8
_MiLockSectionControlArea@12
_MiLockSetPfnPriority@8
_MiLockStealSystemVm@16
_MiLockStealUserVm@20
_MiLockSwitchedMdlTrackerCompare@8
_MiLockTrackerCompare@8
_MiLockTransitionLeafPage@8
_MiLockUnlockCommon@28
_MiLockVad@8
_MiLockVadCore@8
_MiLockVadRange@16
_MiLockVadShared@8
_MiLockWorkingSetOptimal@12
_MiLockWorkingSetShared@4
_MiLockWsle@8
_MiLockdownSections@4
_MiLogAllocateWsleEvent@12
_MiLogCombinedPteDelete@4
_MiLogCommitRequestFailed@12
_MiLogContinueTrim@8
_MiLogCreateImageFileMapFailure@16
_MiLogFailedDriverLoad@16
_MiLogKernelStackEvent@12
_MiLogMapFileEvent@8
_MiLogMdlRangeEvent@12
_MiLogMemResetInfo@12
_MiLogNonPagedPoolReleaseEvent@4
_MiLogNotifyPageHeat@4
_MiLogOutswappedProcessCommitReacquire@16
_MiLogOutswappedProcessCommitRelease@12
_MiLogPageAccess@8
_MiLogPerfMemoryEvent@20
_MiLogPerfMemoryRangeEvent@16
_MiLogPinDriverAddress@4
_MiLogPinDriverAddressesWorker@4
_MiLogProcessWorkingSetsStart@12
_MiLogProcessWorkingSetsStop@4
_MiLogRelocationFaults@12
_MiLogRelocationRva@16
_MiLogRemoveWsleEvent@8
_MiLogReserveVaFailed@16
_MiLogResetPagesCommitRelease@8
_MiLogSectionCreate@8
_MiLogSectionObjectEvent@8
_MiLogStrongCodeDriverLoadFailure@8
_MiLogVirtualRotateEvent@12
_MiLogWsEmptyControl@8
_MiLogZeroPageDecision@28
_MiLookupDataTableEntry@8
_MiLookupIoPageNode@4
_MiMakeCombineCandidateClean@8
_MiMakeDemandZeroPte@4
_MiMakeDriverPageStayResident@12
_MiMakeDriverPagesPrivate@16
_MiMakeHyperPteDemandZero@12
_MiMakeHyperRangeAccessible@12
_MiMakeImageReadOnly@4
_MiMakeIoRangePermanent@4
_MiMakeIoRangePermanentDpc@16
_MiMakeOutswappedPageResident@20
_MiMakePageAvoidRead@28
_MiMakePageBad@8
_MiMakePageFilePte@8
_MiMakePagefileWriterEntryAvailable@4
_MiMakePartitionActive@4
_MiMakePartitionMemoryBlock@4
_MiMakePerSessionProtoPte@16
_MiMakeProtectionMask@4
_MiMakeProtectionPfnCompatible@8
_MiMakeProtoAddressValid@4
_MiMakeProtoLeafValid@12
_MiMakeProtoPrivate@12
_MiMakeProtoReadOnly@8
_MiMakeProtoTransition@4
_MiMakePrototypePteDirect@4
_MiMakePrototypePteVadLookup@4
_MiMakePteClean@8
_MiMakeQuasiPte@8
_MiMakeSecureExclusive@4
_MiMakeShadowPageTableRange@20
_MiMakeSubsectionPte@4
_MiMakeSystemAddressValid@20
_MiMakeSystemCachePteValid@20
_MiMakeSystemCacheRangeValid@16
_MiMakeSystemLeavesNonZero@12
_MiMakeSystemRangeAvailable@12
_MiMakeTransitionPte@8
_MiMakeTransitionPteValid@4
_MiMakeUnusedSegmentDeleteOnClose@4
_MiMakeVaRangeNoAccess@24
_MiMakeVaRangePhysicallyContiguous@16
_MiMakeValidPte@12
_MiMakeZeroedPageTables@16
_MiMakeZeroedPageTablesEx@20
_MiManageSubsectionView@12
_MiMapArbitraryPage@20
_MiMapCacheExceptionFilter@8
_MiMapCfgBitMapSection@20
_MiMapContiguousMemory@20
_MiMapContiguousMemoryLarge@20
_MiMapDummyPages@0
_MiMapExParametersInitialize@12
_MiMapFrame@8
_MiMapImageInSystemProcess@16
_MiMapImageInSystemSpace@12
_MiMapLockedPagesInUserSpace@24
_MiMapLockedPagesInUserSpaceHelper@28
_MiMapMdlCommon@20
_MiMapMemoryDumpMdl@16
_MiMapNewPfns@20
_MiMapNewSession@8
_MiMapPageFileHash@20
_MiMapPageInHyperSpaceWorker@12
_MiMapParametersInitialize@32
_MiMapProcessExecutable@12
_MiMapSinglePage@16
_MiMapSystemCachePage@12
_MiMapSystemImage@16
_MiMapSystemImageWithLargePage@16
_MiMapUserLargePages@12
_MiMapViewInSystemSpace@28
_MiMapViewOfDataSection@36
_MiMapViewOfImageSection@32
_MiMapViewOfPhysicalSection@20
_MiMapViewOfSection@28
_MiMapViewOfSectionCommon@40
_MiMapViewOfSectionExCommon@56
_MiMapWithLargePages@28
_MiMappedPageWriter@4
_MiMappingHasIoReferences@4
_MiMappingHasIoTracker@4
_MiMarkBootGuardPage@4
_MiMarkBootKernelStack@8
_MiMarkBootRegions@4
_MiMarkHiberNotCachedPages@0
_MiMarkHiberNotCachedPte@12
_MiMarkKernelPageTablePages@0
_MiMarkKernelPageTablePte@12
_MiMarkKernelStack@8
_MiMarkLargePageMappings@0
_MiMarkLargePagePte@12
_MiMarkLargePageRanges@0
_MiMarkMdlComplete@8
_MiMarkNonPagedHiberPhasePages@12
_MiMarkNonPagedHiberPhasePte@12
_MiMarkPfnTradable@8
_MiMarkPfnVerified@8
_MiMarkPrivateImageCfgBits@12
_MiMarkPrivateOpenCfgBits@16
_MiMarkProcessCfgBits@28
_MiMarkPteDirty@4
_MiMarkPxeAsShadowed@4
_MiMarkSessionDeletePending@4
_MiMarkSessionMasterProcess@8
_MiMarkSharedImageCfgBits@12
_MiMaximumCommitmentAvailable@4
_MiMdlPageSort
_MiMemoryLicense@4
_MiMergePageNodes@8
_MiMergeTbFlushEntryBackwards@16
_MiMigratePfn@16
_MiMirrorAddPagesToBrownList@8
_MiMirrorBlackPhase@4
_MiMirrorBrownPhase@4
_MiMirrorDiscardPageContents@0
_MiMirrorGatherBrownPages@16
_MiMirrorNodeLargePages@12
_MiMirrorOmitPagesFromCopy@12
_MiMirrorPerformBlackWrites@4
_MiMirrorPerformBrownWrites@12
_MiMirrorReduceBlackToActiveAndPrivatePages@4
_MiMirrorReduceBlackWrites@8
_MiMirrorRemoveBlackChildPartitionPages@8
_MiMirrorRemoveInactivePages@12
_MiMirrorVerify@4
_MiModifiedPageWriter@4
_MiModifiedWriterNoReservationSort
_MiMoveBadPageCrossPartition@12
_MiMoveDirtyBitsToPfns@16
_MiMoveLargeFreePage@16
_MiMoveLargeZeroToFree@28
_MiNewPfnsSuitable@4
_MiNoFaultFound@28
_MiNoPagesLastChance@8
_MiNodeCostSort
_MiNodeFreeZeroPages@12
_MiNodeLargeFreeZeroPages2@8
_MiNodeLargeFreeZeroPages@12
_MiNodeLargeFreeZeroPagesRange@12
_MiNotifyPageHeat@4
_MiNumberWsSwapPagefiles@4
_MiObtainFaultCharges@12
_MiObtainFreePages@4
_MiObtainMdlCharges@4
_MiObtainPagefileHashes@16
_MiObtainPoolCharges@8
_MiObtainProtoBaseFromNode@8
_MiObtainProtoReference@8
_MiObtainReferencedSecureVad@8
_MiObtainReferencedVadEx@12
_MiObtainRelocationBits@12
_MiObtainSectionForDriver@20
_MiObtainSessionVa@4
_MiObtainSystemCacheView@4
_MiObtainSystemCharges@12
_MiObtainSystemVa@8
_MiOffsetToProtos@16
_MiOkToSetPteDirtyForNotValidFault@12
_MiOkToShrinkPageFiles@8
_MiOrderTrimList@8
_MiOutPageSingleKernelStack@12
_MiOutSwapKernelStackPage@12
_MiOutSwapPageDirectoryPages@4
_MiOutSwapPageDirectoryPtes@8
_MiOutSwapWorkingSet@20
_MiOutSwapWorkingSetPte@12
_MiOutlawInswaps@4
_MiPaeAllocate@4
_MiPaeAllocatePage@0
_MiPaeCheckProcessShadow@4
_MiPaeFree@4
_MiPaeFreePage@4
_MiPaeGetProcessShadowPage@4
_MiPaeInitialize@0
_MiPaeInitializeProcessShadow@8
_MiPaeUpdateSelfMap@12
_MiPageAttributeBatchChangeNeeded@8
_MiPageAvailable@8
_MiPageAvailableEx@12
_MiPageCombiningActive@4
_MiPageFileLargestBitmapsRun@4
_MiPageFileNoFreeSpace@8
_MiPageHasRelocations@12
_MiPageInRange@16
_MiPageListCollision@12
_MiPageMightBeZero@12
_MiPageNotZero@8
_MiPageRead@28
_MiPageTableHasValidWsles@8
_MiPageTableLockIsContended@8
_MiPageTableStillExists@8
_MiPageTablesNeeded@12
_MiPageToNode@4
_MiParseComAndCetHeaders@12
_MiParseImageLoadConfig@20
_MiParseImageSectionHeaders@24
_MiPartitionIdToPointer@8
_MiPartitionObjectToPartition@12
_MiPartitionWorkingSetManager@4
_MiPerformCombineScan@16
_MiPerformFinalZeroing@12
_MiPerformFixups@24
_MiPerformMemoryChange@20
_MiPerformSafePdeWrite@20
_MiPersistPage@4
_MiPfAllocateMdls@12
_MiPfCoalesceAndIssueIOs@12
_MiPfCompleteCoalescedIo@8
_MiPfCompleteInPageSupport@8
_MiPfCompletePrefetchIos@12
_MiPfExecuteReadList@16
_MiPfIssueCoalesceCandidates@12
_MiPfIssueCoalescedSupport@8
_MiPfPrepareReadList@12
_MiPfPrepareSequentialReadList@36
_MiPfPutPagesInTransition@12
_MiPfnIsNonPagedPool@4
_MiPfnLargeBitSet@8
_MiPfnRangeIsZero@8
_MiPfnReferenceCountIsZero@8
_MiPfnShareCountIsZero@8
_MiPfnZeroingNeeded@8
_MiPfnsWorthTrying@20
_MiPickClusterForMappedFileFault@32
_MiPopulateCfgBitMap@24
_MiPopulateCombineMdls@12
_MiPreInitializeSystemImagePage@4
_MiPreUnlockWorkingSetShared@8
_MiPrefetchControlArea@28
_MiPrefetchDriverPages@8
_MiPrefetchJumpVad@12
_MiPrefetchNormally@8
_MiPrefetchPreallocatePages@24
_MiPrefetchReleasePreallocatedPages@16
_MiPrefetchRestOfCluster@12
_MiPrefetchVirtualMemory@16
_MiPrepareAttachThread@8
_MiPrepareImportList@8
_MiPrepareLargePageSubPageForFree@4
_MiPreparePfnDatabasePageForFree@12
_MiPreparePhysicalPagesMdlForFree@8
_MiPreparePlaceholderVadReplacement@12
_MiPrepareSegmentForDeletion@8
_MiPrepareToStealNonPagedPool@8
_MiPrepareVadDelete@20
_MiPreserveBootDecisions@8
_MiPreventControlAreaDelete@4
_MiPreventControlAreaDeletion@12
_MiPrivateFixup@24
_MiProbeAndLockComplete@12
_MiProbeAndLockPages@12
_MiProbeAndLockPrepare@28
_MiProbeLeafFrame@4
_MiProbeLeafPteAccess@8
_MiProbeLockFrame@4
_MiProbePacketContended@4
_MiProcessCommitIntact@4
_MiProcessCrcList@16
_MiProcessDeleteOnClose@4
_MiProcessDereferenceList@8
_MiProcessHasAwePrivatePages@4
_MiProcessLoadConfigForDriver@8
_MiProcessLoaderEntry@8
_MiProcessTransitionHeatBatch@4
_MiProcessVaContiguityInformation@12
_MiProcessVaRangesInfoClass@16
_MiProcessVmAccessedInfo@16
_MiProcessWorkingSets@8
_MiProcessWsInSwapRanges@12
_MiProcessWsInSwapSupport@8
_MiProcessingPageExtendComplete@12
_MiProtectAweRegion@20
_MiProtectDriverSectionPte@12
_MiProtectEnclavePages@44
_MiProtectPrivateMemory@32
_MiProtectSharedUserPage@0
_MiProtectSystemImage@4
_MiProtectionToCacheAttribute@4
_MiPruneSoftwareWsles@8
_MiPteBinsNeedTrimming@4
_MiPteEmbedsWsle@0
_MiPteHasShadow@4
_MiPteInShadowRange@4
_MiPteNeedsCommitCharge@8
_MiPulseCommitSignal@4
_MiPulseLowAvailableEvent@4
_MiPurgeBadFileOnlyPages@0
_MiPurgeFileOnlyPfn@4
_MiPurgeImageSection@4
_MiPurgeLargeZeroNodePages@4
_MiPurgePartitionStandby@8
_MiPurgeSlabEntries@4
_MiPurgeSubsection@4
_MiPurgeZeroList@4
_MiPushCombineBlock@8
_MiQueryAddressSpan@16
_MiQueryAddressState@40
_MiQueryEPTAccessedState@12
_MiQueryLeafPte@12
_MiQueryMemoryListInformation@8
_MiQueryMemoryPhysicalContiguity@16
_MiQueryPfn@8
_MiQueryStateMatches@20
_MiQueryVaPhysicalContiguity@16
_MiQueueControlAreaDelete@4
_MiQueueExtentPfnDeletion@4
_MiQueuePageAccessLog@4
_MiQueuePageFileExtension@12
_MiQueuePinDriverAddressLog@16
_MiQueueSyncModifiedWriterApc@20
_MiQueueWorkingSetRequest@8
_MiRaisedIrqlFault@4
_MiReAcquireCommitFailWorker@4
_MiReAcquireOutSwappedProcessCommit@4
_MiReAllocateWorkingSetSwapSupport@4
_MiReInitializeFreeSlabPfn@8
_MiReacquireWalkLocks@12
_MiReadImageHeaders@16
_MiReadPteShadow@12
_MiReadWriteAnyLevelShadowPte@20
_MiReadWriteVirtualMemory@24
_MiReadyFlushMdlToWrite@12
_MiReadyLargePageToFree@12
_MiReadyToZeroNextLargePage@8
_MiRealVaToFlushType@4
_MiReassessZeroThreads@12
_MiRebuildLargePage@16
_MiRebuildLargePages@4
_MiRebuildLargePagesThread@4
_MiRebuildLargeZeroPage@4
_MiRecheckCombineVm@16
_MiRecheckEPTAccessedVa@8
_MiRecheckVaVm@8
_MiReclaimSystemVa@4
_MiRecycleSystemRegionVa@8
_MiReduceCommitLimits@12
_MiReduceMappedFileReadAhead@12
_MiReduceMappedFileReadBehind@12
_MiReduceMdl@4
_MiReducePteUseCount@8
_MiReduceShareCount@8
_MiReduceUnusedSubsectionCount@4
_MiReduceWs@12
_MiReduceZeroingThreads@12
_MiRefPageFileSpaceBitmaps@8
_MiReferenceActiveControlArea@8
_MiReferenceActiveSubsection@12
_MiReferenceAweHandle@20
_MiReferenceCfgVad@12
_MiReferenceCloneProto@20
_MiReferenceControlArea@12
_MiReferenceControlAreaFile@4
_MiReferenceControlAreaPfn@12
_MiReferenceDataSubsections@20
_MiReferenceExistingControlArea@4
_MiReferenceFileObjectForMap@4
_MiReferenceInPageFile@8
_MiReferenceIncomingPhysicalPages@28
_MiReferenceIoPages@24
_MiReferenceOwningSession@4
_MiReferencePageForModifiedWrite@8
_MiReferencePageRuns@8
_MiReferencePfBackedSection@4
_MiReferenceSubsection@8
_MiReferenceVad@4
_MiRefillPurgedExtents@8
_MiRegistryVaSort
_MiReleaseArbitraryPage@4
_MiReleaseCommitForResetPages@4
_MiReleaseControlAreaWaiters@4
_MiReleaseDriverPtes@12
_MiReleaseFaultCharges@4
_MiReleaseFaultPte@4
_MiReleaseFaultState@12
_MiReleaseFaultSynchronization@4
_MiReleaseFreshPage@4
_MiReleaseImageSection@12
_MiReleaseInPageRefs@4
_MiReleaseNonPagedResources@8
_MiReleaseOutSwapReservations@8
_MiReleaseOutSwappedProcessCommit@4
_MiReleasePageFileInfo@16
_MiReleasePageFileSectionInfo@4
_MiReleasePageFileSpace@16
_MiReleasePageHash@8
_MiReleaseProcessReferenceToSessionDataPage@4
_MiReleasePteCopyList@4
_MiReleasePtes@12
_MiReleaseReadListResources@4
_MiReleaseScrubPacket@4
_MiReleaseSessionDriverCharges@4
_MiReleaseSystemCacheView@4
_MiReleaseVadEventBlocks@8
_MiReleaseVadWaiters@4
_MiReleaseWalkLocks@4
_MiReleaseWriteInProgressCharges@12
_MiReleaseWsSwapReservationPfn@4
_MiReleaseZeroCalibrationResources@4
_MiRelinkStandbyPage@8
_MiReloadBootLoadedDrivers@4
_MiRelocateImage@24
_MiRelocateImageAgain@8
_MiRelocateImagePfn@28
_MiRelockFaultState@8
_MiRelockProtoPoolPage@8
_MiRelockWorkingSetExclusive@8
_MiRememberUnloadedDriver@12
_MiRemoveBadPages@12
_MiRemoveDecayClusterTimer@4
_MiRemoveEnclavePagesFromDump@4
_MiRemoveEnclavePagesFromMirror@4
_MiRemoveFaultNode@4
_MiRemoveFromSystemSpace@12
_MiRemoveLockedPageCharge@4
_MiRemoveLockedPageChargeAndDecRef@4
_MiRemoveLowestPriorityStandbyPage@12
_MiRemoveMappedPtes@8
_MiRemoveMappingNode@8
_MiRemoveMdlPages@8
_MiRemovePageAnyColor@12
_MiRemovePhysicalMemory@12
_MiRemovePlaceholderVad@4
_MiRemovePteTracker@12
_MiRemoveSecureEntry@8
_MiRemoveSharedCommitNode@12
_MiRemoveSlabEntry@12
_MiRemoveSystemCacheReferences@12
_MiRemoveSystemImagePage@12
_MiRemoveUnusedSegment@4
_MiRemoveUnusedSegments@8
_MiRemoveUnusedSubsection@4
_MiRemoveUserPhysicalPagesView@4
_MiRemoveVad@8
_MiRemoveVadCharges@8
_MiRemoveViewsFromSection@16
_MiRemoveViewsFromSectionWithPfn@16
_MiRemoveWakeListEntry@8
_MiRemoveWsle@24
_MiRemoveWsleList@16
_MiReplaceLockedPage@20
_MiReplacePageOfProtoPool@16
_MiReplacePageTablePage@4
_MiReplacePfnWithGapMapping@8
_MiReplaceRotateWithDemandZero@12
_MiReplaceSystemProtoPtesNode@8
_MiReplaceTransitionPage@16
_MiReplenishBitMap@12
_MiReplenishLocalCommit@16
_MiReplenishPageSlist@16
_MiReplenishSlabAllocator@16
_MiReplenishTransitionPageHeatList@0
_MiReplicatePfnDatabaseMappings@8
_MiReplicatePteChange@8
_MiReplicatePteChangeToProcess@12
_MiRescanPageFileBitmapPortion@20
_MiRescanPagefileBitmaps@4
_MiReserveBootDriverPtes@8
_MiReserveDriverPtes@12
_MiReserveEnclavePages@12
_MiReserveFaultPte@0
_MiReservePageFileSpace@12
_MiReservePageFileSpaceForPage@16
_MiReservePageHash@4
_MiReservePoolMemory@16
_MiReservePtes@8
_MiReserveUserMemory@24
_MiReserveWorkingSetSwapSpace@24
_MiReserveWorkingSetSwapSpaceRuns@24
_MiResetAccessBitPte@12
_MiResetAccessBitPteWorker@24
_MiResetAccessBitsEPTCallback@20
_MiResetAccessBitsTail@4
_MiResetVirtualMemory@24
_MiResidentPageDangleFree@8
_MiResidentPagesForSpan@12
_MiResizeAweBitMap@4
_MiResolveDemandZeroFault@16
_MiResolveImageImports@20
_MiResolveImageReferences@16
_MiResolveMappedFileFault@16
_MiResolveMemoryEvent@16
_MiResolvePageFileFault@16
_MiResolvePrivateZeroFault@4
_MiResolveProtoCombine@12
_MiResolveProtoPteFault@12
_MiResolveSharedZeroFault@4
_MiResolveTransitionFault@20
_MiRestockOverCommit@8
_MiRestoreTransitionPte@8
_MiRestrictRangeToNode@8
_MiResumeFromHibernate@4
_MiResumeMarkPageLists@8
_MiRetainSubsection@4
_MiRetardMdl@4
_MiRetryNonPagedAllocation@0
_MiReturnBadPagesToBadList@8
_MiReturnCcAccessLog@8
_MiReturnCommit@8
_MiReturnCrossPartitionControlAreaCharges@4
_MiReturnEnclavePage@4
_MiReturnExcessPoolCommit@4
_MiReturnFaultCharges@12
_MiReturnFreeZeroPage@8
_MiReturnFullProcessCharges@8
_MiReturnFullProcessCommitment@8
_MiReturnImageBase@4
_MiReturnMdlExcess@4
_MiReturnPageTablePageCommitment@28
_MiReturnPartitionPagesToParent@4
_MiReturnPfnList@4
_MiReturnPfnReferenceCount@4
_MiReturnPhysicalPoolPages@8
_MiReturnPoolCharges@8
_MiReturnProcessCommitment@8
_MiReturnProcessPhysicalPages@8
_MiReturnProcessVads@4
_MiReturnPteMappingPair@4
_MiReturnResavailToPrcb@8
_MiReturnReservedEnclavePages@8
_MiReturnResident@8
_MiReturnSplitPageCharges@12
_MiReturnSystemCharges@12
_MiReturnSystemImageAddress@8
_MiReturnSystemImageCommitment@8
_MiReturnSystemPtes@16
_MiReturnSystemVa@16
_MiReturnVadQuota@12
_MiReturnWsToExpansionList@8
_MiReuseStandbyPage@4
_MiRevertQuasiPte@8
_MiRevertRelocatedImagePfn@16
_MiRevertRelocations@12
_MiRevertValidPte@20
_MiRevokeExecutePte@12
_MiRevokeExecuteTail@4
_MiRewriteTrimPteAsDemandZero@8
_MiRotateComplete@4
_MiRotatedToFrameBuffer@4
_MiRoundUpToPowerOf2SizeT@4
_MiSanitizePage@4
_MiSanitizePfnProtection@12
_MiScanPagefileSpace@4
_MiScanPagefiles@4
_MiScanRelocationPage@24
_MiScheduleZeroPageThreads@4
_MiScrubAwePage@12
_MiScrubInterrupted@4
_MiScrubLargeMappedPage@12
_MiScrubMemoryWorker@4
_MiScrubNode@4
_MiScrubNodeLargePageList@40
_MiScrubNodeLargePages@12
_MiScrubPage@16
_MiScrubProcessLargePages@4
_MiScrubProcessPhysicalPages@4
_MiScrubProcesses@8
_MiSearchChannelTable@4
_MiSearchNumaNodeTable@4
_MiSectionClose@16
_MiSectionControlArea@4
_MiSectionCreated@12
_MiSectionDelete@4
_MiSectionInitialization@0
_MiSectionOpen@24
_MiSecureVad@24
_MiSegmentDelete@4
_MiSelectImageBase@20
_MiSelectOverflowDllBase@12
_MiSelectSessionAttachProcess@4
_MiSelectSystemImageAddress@8
_MiSelectUserAddress@40
_MiSessionAddProcess@8
_MiSessionCreate@0
_MiSessionCreateInternal@4
_MiSessionInsertImage@12
_MiSessionLookupImage@4
_MiSessionObjectCreate@0
_MiSessionObjectDelete@4
_MiSessionPoolTrackTable@0
_MiSessionPoolTrackTableSize@0
_MiSessionPoolVaRemaining@0
_MiSessionReferenceImage@4
_MiSessionRemoveImage@8
_MiSessionUnlinkProcess@8
_MiSessionUnloadAllImages@0
_MiSessionUpdateImageCharges@4
_MiSetControlAreaSystemVa@8
_MiSetDeleteOnClose@8
_MiSetFreeZeroPfnCold@8
_MiSetGraphicsPtes@24
_MiSetIdealProcessorThread@12
_MiSetImageProtection@16
_MiSetInPagePrefetchPriority@8
_MiSetInPagePriority@12
_MiSetLeafFillToUninitializedWsle@4
_MiSetNonPagedPoolNoSteal@8
_MiSetOriginalPtePfnFromFreeList@4
_MiSetPageFileAllocationBits@16
_MiSetPageTablePfnBuddy@12
_MiSetPagesModified@8
_MiSetPagingOfDriver@12
_MiSetPfnBlink@12
_MiSetPfnIdentity@8
_MiSetPfnKernelStack@8
_MiSetPfnLink@8
_MiSetPfnOriginalPte@12
_MiSetPfnOwnedAndActive@20
_MiSetPfnPteFrame@8
_MiSetPfnRemovalRequested@8
_MiSetPfnTbFlushStamp@12
_MiSetProbePagesAhead@4
_MiSetProtectionOnSection@32
_MiSetProtectionOnTransitionPte@16
_MiSetPteTimeStamp@16
_MiSetReadOnlyOnSectionView@16
_MiSetSlabAllocatorPolicy@4
_MiSetSubsectionBase@12
_MiSetSystemCodeProtection@16
_MiSetTrimWhileAgingState@8
_MiSetVaAgeList@16
_MiSetVadBits@4
_MiSetVadFlags@12
_MiSetWsleProtection@12
_MiSetZeroPageThreadPriority@8
_MiShadowTopLevelPxes@12
_MiShareExistingControlArea@4
_MiSharePages@20
_MiShouldTrimUnusedSegments@0
_MiShowBadMapper@8
_MiShutdownSystem@0
_MiSignalLargePageRebuild@4
_MiSignalNonPagedPoolWatchers@0
_MiSignalZeroingPassComplete@4
_MiSimpleAgePte@12
_MiSimpleAgeWorkingSetEPTCallback@20
_MiSimpleAgeWorkingSetTail@4
_MiSimpleAging@8
_MiSizeMemoryListLocks@0
_MiSkipEntirePagefileRegions@20
_MiSkipFractionalPagefileRegion@12
_MiSlabAllocatorRecentFailure@4
_MiSlistGetFreePage@12
_MiSlowRotateCopy@12
_MiSmallVaStillMapsFrame@8
_MiSnapDriverRange@24
_MiSnapThunk@20
_MiSnapUnresolvedImport@12
_MiSoftFaultMappedView@4
_MiSoftwareWslePfn@8
_MiSortMdlFrames@4
_MiSplitBitmapPages@12
_MiSplitDirectMapPage@16
_MiSplitDriverPage@8
_MiSplitMirrorBitMap@12
_MiSplitPfnBitMaps@12
_MiSplitPrivatePage@12
_MiSplitReducedCommitClonePage@4
_MiStackTheftFreezeProcessors@4
_MiStackTheftIsr@4
_MiStartDpcGang@4
_MiStartingOffset@12
_MiStartingOffsetNeedLock@8
_MiStealPage@24
_MiStopPageAccessor@8
_MiStoreChargeReservedPages@4
_MiStoreCheckCandidatePage@20
_MiStoreEvictPageFile@4
_MiStoreEvictThread@4
_MiStoreFaultComplete@8
_MiStoreFreeWriteSupport@8
_MiStoreGraphicsProtectionInVad@8
_MiStoreLogFullPagefile@0
_MiStoreLogWriteCompleteFailure@4
_MiStoreLogWriteDisabled@8
_MiStoreLogWriteIssueFailure@24
_MiStoreLogWriteIssueRetry@20
_MiStoreMarkLockedPagesModified@4
_MiStoreModifiedWriteComplete@4
_MiStoreModifiedWriteCompletePfn@8
_MiStoreModifiedWriteDereference@4
_MiStoreSetEvictPageFile@8
_MiStoreSetPageFileRunEvicted@12
_MiStoreUpdateMemoryConditions@4
_MiStoreUpdatePagefileHash@16
_MiStoreWriteIssue@32
_MiStoreWriteModifiedCompleteApc@20
_MiStoreWriteModifiedPages@4
_MiStrongCodeImage@8
_MiSubsectionNeedsExtents@4
_MiSubsectionProtosCreated@16
_MiSufficientAvailablePages@8
_MiSwapHardFaultPage@12
_MiSwapStackPage@28
_MiSwapStackPageNoDpc@12
_MiSwitchBaseAddress@16
_MiSwitchKstackPages@8
_MiSwitchToPfns@4
_MiSwitchToTransition@12
_MiSwizzleInvalidPte@8
_MiSyncCommitSignals@8
_MiSyncSystemPdes@4
_MiSynchronizeSystemVa@20
_MiSynchronousPageWrite@28
_MiSystemFault@4
_MiSystemImageHasPrivateFixups@12
_MiTbFlushSort
_MiTbFlushTimeStampMayNeedFlush@12
_MiTbFlushType@4
_MiTerminateHardwareEnclave@8
_MiTerminateWsle@16
_MiTerminateWsleCluster@4
_MiTimeSingleLargePageZero@4
_MiTimeSingleLargePageZeroWorker@8
_MiTracingEnabledCallback@36
_MiTradeActivePage@24
_MiTradeBootImagePage@8
_MiTradePage@8
_MiTradeTransitionPage@24
_MiTransferPartitionPageRun@20
_MiTransferSoftwarePte@20
_MiTransformValidPteInPlace@20
_MiTransientPageListWriter@8
_MiTranslatePageForCopy@20
_MiTranslateWsType@4
_MiTrimAllSystemPagableMemory@8
_MiTrimOrAgeWorkingSet@12
_MiTrimPte@12
_MiTrimPteWorker@28
_MiTrimSection@12
_MiTrimSharedPage@12
_MiTrimSharedPageFromViews@20
_MiTrimSystemImagePages@12
_MiTrimThisWsle@24
_MiTrimUnusedPageFileRegionsApc@12
_MiTrimUnusedPageFileRegionsWorker@4
_MiTrimWorkingSet@20
_MiTrimWorkingSetBuildup@8
_MiTrimWorkingSetEPTCallback@20
_MiTrimWorkingSetTail@4
_MiTrimmedEnough@8
_MiTryDeleteTransitionPte@8
_MiTryLocateWsle@8
_MiTryLockLeafPage@12
_MiTryLockProtoPoolPageAtDpc@16
_MiTryLockVad@8
_MiTryToAcquireExpansionLockAtDpc@4
_MiTryUnlinkNodeLargePage@20
_MiUnfreezeIoPfnNode@4
_MiUnlinkBadPages@8
_MiUnlinkFreeOrZeroedPage@12
_MiUnlinkNodeLargePageHelper@20
_MiUnlinkNodeLargePages@36
_MiUnlinkPageFromBadList@8
_MiUnlinkPageFromList@8
_MiUnlinkProcessFromSession@4
_MiUnlinkSessionList@4
_MiUnlinkSessionWorkingSet@4
_MiUnlinkStandbyPfn@8
_MiUnlinkSubsectionWaitBlock@12
_MiUnlinkUnusedControlArea@4
_MiUnlinkWorkingSet@8
_MiUnloadApproved@4
_MiUnloadSystemImage@8
_MiUnlockAllMemoryLists@0
_MiUnlockAndDereferenceNestedVad@4
_MiUnlockAndDereferenceVad@4
_MiUnlockAndDereferenceVadShared@4
_MiUnlockAwePagesExclusive@8
_MiUnlockAwePagesShared@8
_MiUnlockAweVadsExclusive@4
_MiUnlockAweVadsShared@8
_MiUnlockBootPageSections@0
_MiUnlockCodePage@12
_MiUnlockControlAreaFileObjectShared@4
_MiUnlockControlAreaSectionExtend@8
_MiUnlockDriverCode@4
_MiUnlockDriverMappings@4
_MiUnlockDynamicMemoryExclusive@8
_MiUnlockDynamicMemoryNestedParentExclusive@4
_MiUnlockDynamicMemoryShared@8
_MiUnlockFaultPageTable@4
_MiUnlockFaultWorkingSet@4
_MiUnlockFlushMdl@12
_MiUnlockImageSection@16
_MiUnlockIoPfnTree@8
_MiUnlockLoaderEntry@8
_MiUnlockMdlWritePages@12
_MiUnlockNestedPageTableWritePte@20
_MiUnlockNestedProtoPoolPage@4
_MiUnlockNestedVad@4
_MiUnlockPage@8
_MiUnlockPageTableCharges@8
_MiUnlockPageTableInternal@8
_MiUnlockPageTableRange@8
_MiUnlockPagedAddress@4
_MiUnlockPartitionSystemThreads@8
_MiUnlockPoolCommitWs@4
_MiUnlockProbePacketWorkingSet@4
_MiUnlockProtoPoolPage@8
_MiUnlockStealVm@4
_MiUnlockStoreLockedPages@8
_MiUnlockSystemVa@4
_MiUnlockVa@8
_MiUnlockVaSoftWsle@8
_MiUnlockVad@8
_MiUnlockVadCore@8
_MiUnlockVadRange@16
_MiUnlockVadShared@8
_MiUnlockWorkingSetExclusive@8
_MiUnlockWorkingSetExclusiveUnorderedAtDpc@4
_MiUnlockWorkingSetShared@8
_MiUnlockWsle@12
_MiUnmapFrameBuffer@16
_MiUnmapImageInSystemSpace@4
_MiUnmapLargeDriver@8
_MiUnmapLargePages@12
_MiUnmapLockedPagesInUserSpace@12
_MiUnmapMdlCommon@20
_MiUnmapPageInHyperSpaceWorker@12
_MiUnmapVad@12
_MiUnmapViewOfSection@16
_MiUnsecureVirtualMemoryAgainstWrites@12
_MiUpControlAreaRefs@8
_MiUpdateActiveSubsection@4
_MiUpdateAvailableEvents@4
_MiUpdateAwePageTable@12
_MiUpdateCfgSystemWideBitmap@12
_MiUpdateCfgSystemWideBitmapWorker@20
_MiUpdateChargedWsles@8
_MiUpdateClaimDistribution@8
_MiUpdateControlAreaCommitCount@8
_MiUpdateEnclavePfnProtection@8
_MiUpdateForkMaps@24
_MiUpdateLargePageBitMap@20
_MiUpdateLargePageCandidates@12
_MiUpdateLargePagePfns@16
_MiUpdateLargePageSectionPfns@12
_MiUpdateLastSubsectionSize@12
_MiUpdateMirrorBitmaps@0
_MiUpdateOldPagesEPTCallback@20
_MiUpdateOldPte@12
_MiUpdateOldPteWorker@16
_MiUpdateOldWorkingSetPagesTail@4
_MiUpdatePageAttributeStamp@4
_MiUpdatePageFileHighInPte@16
_MiUpdatePageFileList@8
_MiUpdatePageTableUseCount@8
_MiUpdatePageThresholdsDpc@16
_MiUpdatePagingFileMinimum@8
_MiUpdatePartitionLargePfnBitMap@8
_MiUpdatePartitionMemory@12
_MiUpdatePerSessionProto@16
_MiUpdatePfnPriority@12
_MiUpdatePfnPriorityByPte@8
_MiUpdatePfnProtection@12
_MiUpdatePrefetchPriority@12
_MiUpdateProcessSharedCommit@8
_MiUpdateReserveClusterInfo@12
_MiUpdateShareCount@8
_MiUpdateSlabPagePlaceholderState@16
_MiUpdateSystemPdes@4
_MiUpdateSystemProtoPtesTree@8
_MiUpdateThunks@16
_MiUpdateTransitionPteFrame@12
_MiUpdateUserMappings@4
_MiUpdateVadBits@8
_MiUpdateWorkingSetPrivateSize@16
_MiUpdateWsleAge@12
_MiUseLargeDriverPage@4
_MiUseLowIoPriorityForModifiedPages@4
_MiUseSlabAllocator@20
_MiUseSlabAllocatorForDriverPage@12
_MiUserFault@4
_MiUserPdeOrAbove@4
_MiVaInWsleSpace@4
_MiVaIsPageFileHash@8
_MiVaToPfn@4
_MiVaToSoftwareWsle@8
_MiVadCommitCrossPartition@4
_MiVadDeleted@4
_MiVadHasSharedCommit@4
_MiVadIsCfgBitmap@4
_MiVadLeafPagesPrecharged@4
_MiVadMapsLargeImage@4
_MiVadPageTableChargeLevel@4
_MiVadPagesTradable@4
_MiVadPureReserve@4
_MiVadShouldBeForked@4
_MiVadSupportsPhysicalContiguityQuery@4
_MiVadSupportsPrivateCommit@4
_MiValidCombineProtection@4
_MiValidFault@12
_MiValidVirtualizationFault@12
_MiValidateExistingImage@4
_MiValidateExportSuppressedUserCallTarget@8
_MiValidateImagePfn@36
_MiValidateInPage@4
_MiValidateMdlAllocationRequest@48
_MiValidateMdlTracker@8
_MiValidateMemoryRangeEntries@12
_MiValidatePagefilePageHash@4
_MiValidateSectionCreate@28
_MiValidateSectionSigningPolicy@48
_MiValidateStrongCodeDriverImage@8
_MiValidateUserCallTarget@8
_MiValidateUserPhysicalExternalFlags@4
_MiValidateZeroBits@4
_MiVerifyImageHeader@16
_MiViewMayContainPage@28
_MiVolunteerForTrimFirst@8
_MiWaitForAsynchronousFlushes@4
_MiWaitForAvailablePages@8
_MiWaitForCollidedFaultComplete@20
_MiWaitForExtentDeletions@4
_MiWaitForFreePage@8
_MiWaitForInPageComplete@12
_MiWaitForPageWriteCompletion@16
_MiWaitForRotateToComplete@8
_MiWaitForSystemCacheViewFlush@4
_MiWaitForVadDeletion@4
_MiWakeBadPageSignalThread@0
_MiWakeExtentDeletionWaiters@4
_MiWakeFileOnlyReaper@0
_MiWakeLargePageRebuild@12
_MiWakeLargePageWaiters@4
_MiWakeModifiedPageWriter@8
_MiWakePageZeroing@12
_MiWakeZeroingThreads@8
_MiWalkEntireImage@16
_MiWalkPageTables@4
_MiWalkPageTablesRecursively@12
_MiWalkResetCommitPages@4
_MiWalkResetCommitPte@12
_MiWalkVaCheckCommon@20
_MiWalkVaRange@20
_MiWorkingSetInfoCheckPageTable@20
_MiWorkingSetIsContended@4
_MiWorkingSetManager@8
_MiWorkingSetVeryLarge@4
_MiWriteAweClusterPte@24
_MiWriteAwePtes@24
_MiWriteComplete@12
_MiWriteCompletePfn@8
_MiWriteEnclavePte@24
_MiWritePageFileHash@20
_MiWriteProtectSystemImages@0
_MiWritePteShadow@12
_MiWriteSharedDemandZeroPte@20
_MiWriteTopLevelPxe@12
_MiWriteValidPteVolatile@12
_MiWsSwapPageFileNumber@4
_MiWsleFlush@16
_MiWsleFree@20
_MiYieldPageTableWalk@8
_MiZeroAllPageFiles@0
_MiZeroAndConvertPage@16
_MiZeroAndFlushPtes@12
_MiZeroBootLargePages@4
_MiZeroBootMappings@0
_MiZeroCfgSystemWideBitmap@8
_MiZeroCfgSystemWideBitmapWorker@12
_MiZeroInParallel@4
_MiZeroInParallelWorker@4
_MiZeroLargePage@12
_MiZeroLargePageThread@4
_MiZeroLargePages@4
_MiZeroNodePages@4
_MiZeroPage@8
_MiZeroPageCalibrate@8
_MiZeroPageCalibrateIsr@4
_MiZeroPageFile@4
_MiZeroPageFileFirstPage@4
_MiZeroPageLogEntriesMergable@8
_MiZeroPageMakeHot@16
_MiZeroPageThread@4
_MiZeroPageWorkMapping@12
_MiZeroPageWrite@16
_MiZeroPhysicalPage@12
_MiZeroSectionObjectPointer@12
_MiZeroWithSystemPtes@12
_MigrateOOBELanguageToInstallationLanguage@0
_MinAsn1DecodeGeneralizedTime@8
_MinAsn1DecodeLength@12
_MinAsn1DecodeTime@8
_MinAsn1DecodeUtcTime@8
_MinAsn1ExtractContent@16
_MinAsn1ExtractParsedCertificatesFromSignedData@16
_MinAsn1ExtractValues@24
_MinAsn1FindExtension@12
_MinAsn1ParseAlgorithmIdentifier@8
_MinAsn1ParseAndDecodeRDNComponent@16
_MinAsn1ParseCertificate@12
_MinAsn1ParseECCSignature@8
_MinAsn1ParseOIDSequence@12
_MinAsn1ParsePublicKeyInfo@8
_MinAsn1ParseRSAPublicKey@8
_MinAsn1ParseSignedDataCertificatesEx@16
_MinAsn1ParseSingleExtensionValue@16
_MinCrypK_HashMemory@20
_MinCryptDecodeHashAlgorithmIdentifier@4
_MinCryptDecodeSignatureAlgorithmIdentifier@4
_MinCryptHashMemory@20
_MinCryptVerifyCertificateWithPolicy2@24
_MinCryptVerifySignedHash@20
_MincrypK_ParseCertificateChainWithPolicy@12
_MincryptAlloc@4
_MincryptFree@4
_MincryptFreePolicyInfo@4
_MincryptGetLeafKeyFromPolicy@4
_MincryptGetRootKeyFromPolicy@4
_MmAccessFault@16
_MmAcquireLoadLock@0
_MmAcquireSessionPoolRundown@4
_MmAddPhysicalMemory@8
_MmAddPrivateDataToCrashDump@8
_MmAddRangeToCrashDump@12
_MmAddUnloadedDriverInformationToCrashDump@4
_MmAddVerifierSpecialThunks@12
_MmAddVerifierThunks@8
_MmAdjustWorkingSetSize@16
_MmAdjustWorkingSetSizeEx@24
_MmAdvanceMdl@8
_MmAllocateContiguousMemory@12
_MmAllocateContiguousMemorySpecifyCache@32
_MmAllocateContiguousMemorySpecifyCacheNode@36
_MmAllocateContiguousNodeMemory@36
_MmAllocateDumpHibernateResources@4
_MmAllocateIndependentPages@8
_MmAllocateIndependentPagesEx@16
_MmAllocateIsrStack@8
_MmAllocateMappingAddress@8
_MmAllocateMappingAddressEx@12
_MmAllocateMdlForIoSpace@12
_MmAllocateMemoryRanges@4
_MmAllocateNodePagesForMdlEx@40
_MmAllocateNonCachedMemory@4
_MmAllocatePagesForMdl@28
_MmAllocatePagesForMdlEx@36
_MmAllocatePartitionNodePagesForMdlEx@44
_MmAllocatePoolMemory@20
_MmAllocateUserStack@20
_MmAllocateVirtualMemory@44
_MmAreMdlPagesCached@4
_MmAreMdlPagesLocked@4
_MmAssignProcessToJob@12
_MmAttachSession@8
_MmBackSystemImageWithPagefile@4
_MmBuildLargePages@16
_MmBuildMdlForNonPagedPool@4
_MmCallDllInitialize@8
_MmCanFileBeTruncated@8
_MmCanThreadFault@0
_MmChangeImageProtection@16
_MmChangeSectionBackingFile@12
_MmChargeResources@16
_MmCheckCachedPageStates@16
_MmCheckForSafeExecution@16
_MmCheckMapIoSpace@12
_MmCheckMdlPages@4
_MmCleanProcessAddressSpace@4
_MmCombineIdenticalPages@16
_MmCommitSessionMappedView@8
_MmConfigureGraphicsPtes@8
_MmConfigurePrefetchSeekThreshold@4
_MmCopyMemory@24
_MmCopyToCachedPage@20
_MmCopyVirtualMemory@28
_MmCreateCacheManagerSection@20
_MmCreateKernelStack@12
_MmCreateMdl@12
_MmCreateMirror@0
_MmCreatePartition@8
_MmCreatePeb@16
_MmCreateProcessAddressSpace@24
_MmCreateSection@32
_MmCreateSectionEx@44
_MmCreateShadowMapping@8
_MmCreateSpecialImageSection@24
_MmCreateTeb@20
_MmDbgCopyMemory@24
_MmDbgMarkPfnModifiedWorker@0
_MmDeleteKernelStack@8
_MmDeleteKernelStackEx@12
_MmDeleteProcessAddressSpace@4
_MmDeleteProcessor@4
_MmDeleteShadowMapping@8
_MmDeleteTeb@8
_MmDetachSession@8
_MmDeterminePoolType@4
_MmDisableModifiedWriteOfSection@4
_MmDoesFileHaveUserWritableReferences@4
_MmDuplicateMemory@4
_MmEmptyAllWorkingSets@0
_MmEnablePeriodicAccessClearing@4
_MmEnableProcessSvm@0
_MmEnableVerifierAllDrivers@0
_MmEnableVerifierForDriver@8
_MmEnforceWorkingSetLimit@8
_MmEnoughMemoryForWrite@4
_MmEnumerateAddressSpaceAndReferenceImages@8
_MmEnumerateBadPages@4
_MmEnumerateSystemImages@8
_MmExtendSection@12
_MmFillEtwNodeInformation@16
_MmFlushAllPagesEx@12
_MmFlushImageSection@8
_MmFlushSection@24
_MmFlushVirtualMemory@16
_MmForceSectionClosed@8
_MmForceSectionClosedEx@8
_MmFreeAccessPfnBuffer@8
_MmFreeBootDriverInitializationCode@0
_MmFreeBootRegistry@0
_MmFreeContiguousMemory@4
_MmFreeContiguousMemorySpecifyCache@12
_MmFreeIndependentPages@8
_MmFreeIsrStack@4
_MmFreeLoaderBlock@4
_MmFreeMappingAddress@8
_MmFreeMemoryRanges@4
_MmFreeNonCachedMemory@8
_MmFreePagesFromMdl@4
_MmFreePagesFromMdlEx@8
_MmFreePoolMemory@12
_MmFreeSystemCacheReserveView@4
_MmFreeVirtualMemory@24
_MmGetAvailablePages@4
_MmGetAvailablePagesBelowPriority@4
_MmGetAvailablePagesForPartitionObject@4
_MmGetCacheAttribute@12
_MmGetCacheAttributeEx@16
_MmGetChannelInformation@16
_MmGetControlAreaPartition@4
_MmGetCurrentProcessorColor@0
_MmGetDefaultPagePriority@0
_MmGetDirectoryFrameFromProcess@4
_MmGetDumpRange@12
_MmGetFileNameForAddress@8
_MmGetFileNameForSection@8
_MmGetFileObjectForSection@4
_MmGetHighestPhysicalPage@4
_MmGetImageBase@12
_MmGetImageFileSignatureInformation@4
_MmGetImageSectionBasedAddress@4
_MmGetIoSessionState@8
_MmGetLowestPhysicalPage@4
_MmGetMaximumFileSectionSize@0
_MmGetMaximumNonPagedPoolInBytes@0
_MmGetMinWsPagePriority@0
_MmGetNextNode@8
_MmGetNextSession@4
_MmGetNodeChannelRanges@8
_MmGetNodeFastLargePageCounts@12
_MmGetNumberOfFreeSystemPtes@0
_MmGetNumberOfPhysicalPages@4
_MmGetNumberOfPhysicalPagesForPartitionObject@4
_MmGetPageBadStatus@4
_MmGetPageFileForCrashDump@0
_MmGetPageFileInformation@20
_MmGetPagedPoolCommitPointer@0
_MmGetPeakCommitment@4
_MmGetPhysicalAddress@4
_MmGetPhysicalMemoryRanges@0
_MmGetPhysicalMemoryRangesEx2@8
_MmGetPhysicalMemoryRangesEx@4
_MmGetProcessPartitionId@4
_MmGetResidentAvailablePages@4
_MmGetSectionInformation@12
_MmGetSectionRange@12
_MmGetSessionById@4
_MmGetSessionCreateTime@4
_MmGetSessionGlobalVA@4
_MmGetSessionId@4
_MmGetSessionIdEx@4
_MmGetSessionLocaleId@0
_MmGetSessionMappedViewInformation@16
_MmGetSessionObjectById@4
_MmGetSessionObjectByProcess@4
_MmGetSessionSchedulingGroup@4
_MmGetSessionSchedulingGroupByProcess@4
_MmGetSharedCommit@0
_MmGetSystemPageCounts@4
_MmGetSystemRoutineAddress@4
_MmGetTotalCommitLimit@4
_MmGetTotalCommittedPages@4
_MmGetVirtualForPhysical@8
_MmGetWorkingSetLeafSize@4
_MmGrowKernelStack@4
_MmGrowKernelStackEx@8
_MmHardFaultBytesRequired@16
_MmIdentifyPhysicalMemory@16
_MmImageSectionPagable@4
_MmInSwapProcess@4
_MmInSwapVirtualAddresses@12
_MmInSwapWorkingSet@4
_MmInitSystem@8
_MmInitSystemDll@0
_MmInitializeHandBuiltProcess2@4
_MmInitializeHandBuiltProcess@4
_MmInitializeMemoryLimits@8
_MmInitializeProcessAddressSpace@20
_MmInitializeProcessor@4
_MmInvalidateDumpAddresses@8
_MmIsAddressValid@4
_MmIsAddressValidEx@8
_MmIsDriverLoadedCurrentSession@4
_MmIsDriverSuspectForVerifier@4
_MmIsDriverVerifying@4
_MmIsDriverVerifyingByAddress@4
_MmIsFileMapped@8
_MmIsFileObjectAPagingFile@4
_MmIsFileSectionActive@12
_MmIsIoSpaceActive@12
_MmIsNonPagedPoolNx@4
_MmIsNonPagedSystemAddressValid@4
_MmIsRecursiveIoFault@0
_MmIsSessionAddress@4
_MmIsSessionInCurrentServerSilo@4
_MmIsSessionLeaderProcess@4
_MmIsSpecialPoolAddress@4
_MmIsThisAnNtAsSystem@0
_MmIsVerifierEnabled@4
_MmIsWriteErrorFatal@12
_MmIssueMemoryListCommand@12
_MmKernelVerifierEnabled@0
_MmLinkJobProcess@8
_MmLoadSystemImage@24
_MmLoadSystemImageEx@28
_MmLocateUnloadedDriver@4
_MmLockLoadedModuleListExclusive@4
_MmLockLoadedModuleListShared@4
_MmLockPagableDataSection@4
_MmLockPagableSectionByHandle@4
_MmLockPreChargedPagedPool@8
_MmLogQueryCombineStats@12
_MmLogSystemShareablePfnInfo@8
_MmLowPowerEpochCallback@16
_MmManageFaultRange@16
_MmManagePartitionCombineMemory@16
_MmManagePartitionCreateLargePages@12
_MmManagePartitionGetMemoryEvents@12
_MmManagePartitionInitialAddMemory@16
_MmManagePartitionMemoryInformation@8
_MmManagePartitionMoveMemory@16
_MmManagePartitionNodeInformation@12
_MmManagePartitionSetAttributes@12
_MmMapApiSetView@4
_MmMapIoSpace@16
_MmMapIoSpaceEx@16
_MmMapLockedPages@8
_MmMapLockedPagesSpecifyCache@24
_MmMapLockedPagesWithReservedMapping@16
_MmMapMdl@16
_MmMapMemoryDumpMdl@4
_MmMapMemoryDumpMdlEx2@16
_MmMapMemoryDumpMdlEx@16
_MmMapSecureViewOfSection@48
_MmMapUserAddressesToPage@12
_MmMapViewInSessionSpace@12
_MmMapViewInSessionSpaceEx@20
_MmMapViewInSystemCache@20
_MmMapViewInSystemSpace@12
_MmMapViewInSystemSpaceEx@20
_MmMapViewOfSection@40
_MmMapViewOfSectionEx@48
_MmMarkHiberPhase@0
_MmMarkHiberRange@12
_MmMarkImageForHiberPhase@4
_MmMarkPhysicalMemoryAsBad@8
_MmMarkPhysicalMemoryAsGood@8
_MmMdlPageContentsState@8
_MmMdlPagesAreZero@4
_MmNotifyProcessInSwapTrigger@4
_MmObtainChargesToLockPagedPool@8
_MmOnlySystemCacheViewsPresent@4
_MmOutPageKernelStack@4
_MmOutSwapProcess@4
_MmOutSwapVirtualAddresses@16
_MmOutSwapWorkingSet@8
_MmPageEntireDriver@4
_MmPerfLogSessionRundown@12
_MmPerformMemoryListCommand@4
_MmPrefetchForCacheManager@36
_MmPrefetchPages@8
_MmPrefetchPagesEx@12
_MmPrefetchVirtualAddresses@4
_MmPrefetchVirtualMemory@16
_MmProbeAndLockPages@12
_MmProbeAndLockPagesPrivate@8
_MmProbeAndLockProcessPages@16
_MmProbeAndLockSelectedPages@16
_MmProcessWorkingSetControl@16
_MmProtectDriverSection@12
_MmProtectMdlSystemAddress@8
_MmProtectPool@12
_MmProtectVirtualMemory@24
_MmPurgeSection@20
_MmQueryApiSetSchema@8
_MmQueryCommitReleaseState@20
_MmQueryMemoryListInformation@20
_MmQueryMemoryRanges@4
_MmQueryPfnList@8
_MmQueryProcessWorkingSetSwapPages@8
_MmQuerySessionWorkingSetInformation@8
_MmQuerySpecialPoolBlockSize@4
_MmQuerySystemMemoryInformation@8
_MmQuerySystemSize@0
_MmQuerySystemVaInformation@12
_MmQuerySystemWorkingSetInformation@8
_MmQueryVirtualMemory@28
_MmQueryWorkingSetInformation@24
_MmQuitNextSession@4
_MmRaisePoolQuota@16
_MmReadProcessPageTables@4
_MmReleaseCommitForMemResetPages@8
_MmReleaseDumpHibernateResources@8
_MmReleaseLoadLock@4
_MmReleaseOpaqueSwapSupport@4
_MmReleaseResourceCharge@12
_MmRelocatePfnList@16
_MmRemoveExecuteGrants@0
_MmRemoveImportOptimizationForDriverVerifier@4
_MmRemovePhysicalMemory@8
_MmRemoveSystemCacheFromDump@4
_MmReplaceImportEntry@8
_MmReserveViewInSystemCache@4
_MmResetDriverPaging@4
_MmResourcesAvailable@12
_MmReturnChargesToLockPagedPool@8
_MmReturnPoolQuota@8
_MmRotatePhysicalView@24
_MmScrubMemory@12
_MmSectionToSectionObjectPointers@4
_MmSecureVirtualMemory@12
_MmSecureVirtualMemoryAgainstWrites@12
_MmSecureVirtualMemoryEx@16
_MmSessionGetWin32Callouts@0
_MmSessionSetUnloadAddress@4
_MmSetAccessLogging@8
_MmSetAddressRangeModified@8
_MmSetAddressRangeModifiedEx@12
_MmSetBankedSection@24
_MmSetCommitReleaseEligibility@8
_MmSetGraphicsPtes@24
_MmSetMemoryPriorityProcess@8
_MmSetMinimumAgeRate@4
_MmSetPageProtection@12
_MmSetPermanentCacheAttribute@24
_MmSetPfnListInfo@12
_MmSetPriorityVaRanges@12
_MmSetSessionLocaleId@4
_MmSetSessionObjectIoEvent@4
_MmSetSystemVaInformation@12
_MmSetTrimWhileAgingState@4
_MmShutdownSystem@4
_MmSizeOfMdl@8
_MmSnapTriageDumpInformation@16
_MmStealTopLevelPage@4
_MmStoreAllocateVirtualMemory@4
_MmStoreChargeResidentAvailableForRead@4
_MmStoreCheckPagefiles@0
_MmStoreDecommitVirtualMemory@8
_MmStoreFlushAllHintedPages@0
_MmStoreFlushOutstandingEvictions@0
_MmStoreFreeVirtualMemory@4
_MmStoreLogCorruptionFixed@12
_MmStoreProbeAndLockPages@8
_MmStoreRegister@16
_MmSynchronizeAddressPolicy@4
_MmTriageActiveInLastCrash@4
_MmTrimAllSystemPagableMemory@4
_MmTrimFilePagesFromWorkingSets@0
_MmTrimSection@16
_MmTryIdentifyPage@8
_MmUnloadSystemImage@4
_MmUnlockPagableImageSection@4
_MmUnlockPages@4
_MmUnlockPreChargedPagedPool@8
_MmUnmapIoSpace@8
_MmUnmapLockedPages@8
_MmUnmapReservedMapping@12
_MmUnmapViewInSessionSpace@4
_MmUnmapViewInSystemCache@12
_MmUnmapViewInSystemSpace@4
_MmUnmapViewOfSection@8
_MmUnsecureVirtualMemory@4
_MmUpdateMdlTracker@12
_MmUpdateMdlTrackerForMdlSwitch@8
_MmUpdateOldWorkingSetPages@12
_MmUpdateSectionIoAttribution@8
_MmValidateUserCallTarget@8
_MmVerifierTrimMemory@0
_MmVerifyCallbackFunction@4
_MmVerifyCallbackFunctionCheckFlags@8
_MmVirtualAccessFault@12
_MmWaitForCacheManagerPrefetch@4
_MmWaitForSessionObjectIoEvent@4
_MmWaitMultipleForCacheManagerPrefetch@12
_MmWriteTriageInformation@4
_MmWriteUnloadedDriverInformation@4
_MmZeroPageFileAtShutdown@0
_MmZeroPageWrite@16
_MxBootDescriptorDepleted@4
_MxComputeFreeNodeDescriptorRequirements@8
_MxComputePfnPagesNeeded@8
_MxConsumeLargePageSlush@0
_MxCopyPage@8
_MxCreateFreePfns@4
_MxCreatePfn@28
_MxCreatePfns@16
_MxDescriptorSort
_MxGetNextPage@8
_MxGetPhase0Mapping@0
_MxInitializeFreeNodeDescriptors@8
_MxMapPfnRange@12
_MxMapVa@4
_MxMemoryLicense@4
_MxMovePageTables@20
_MxPageAlwaysHot@4
_MxReleaseFreeDescriptor@8
_MxRelocatePageTables@4
_MxSwapPages@8
_MxSwitchDescriptors@4
_MxZeroBootMappings@12
_MxZeroPageTablePfns@16
_NLS_DOWNCASE@4
_NLS_UPCASE@4
_NTFastDOSIO@8
_NormBuffer__Append@8
_NormBuffer__AppendAndSortDecomposed@8
_NormBuffer__AppendEx@16
_NormBuffer__Construct@24
_NormBuffer__GetCurrentOutputChar@8
_NormBuffer__GetLastChar@4
_NormBuffer__Insert@12
_NormBuffer__IsBlocked@8
_NormBuffer__LastStartBase@4
_NormBuffer__LastStartBasePair@4
_NormBuffer__RecheckStartCombinations@4
_NormBuffer__RemoveCharacter@8
_NormBuffer__ReplaceLastStartBase@16
_NormBuffer__ReplaceLastStartBasePair@16
_NormBuffer__RewindOutputCharacter@4
_NormBuffer__SortBeforeSameClass@8
_NormBuffer__VerifyLastStart@4
_NormalizationListEntry_Alloc@0
_NormalizationList__InsertTail@4
_NormalizationList__Lock@0
_NormalizationList__Lookup@4
_NormalizationList__Unlock@0
_Normalization__AppendDecomposedChar@12
_Normalization__CanCombinableCharactersCombine@12
_Normalization__CanCombineWithStartBase@16
_Normalization__CanCombineWithStartFirstPair@20
_Normalization__GetCharacterInfo@16
_Normalization__GetFirstDecomposedCharPlane0@8
_Normalization__GetLastChar@24
_Normalization__GetSecondAndThirdDecomposedCharPlane0@16
_Normalization__GetSecondDecomposedCharPlane0@8
_Normalization__GetThirdAndLastDecomposedCharPlane0@8
_Normalization__GuessBetterCharCount@16
_Normalization__GuessCharCount@16
_Normalization__GuessCharCountBySize@8
_Normalization__IsNormalized@16
_Normalization__LoadClassMapExceptions@4
_Normalization__LoadTables@16
_Normalization__Normalize@24
_Normalization__NormalizeCharacter@16
_Normalization__PageLookup@8
_Normalization__TableLookup@12
_NtAcceptConnectPort@24
_NtAccessCheck@32
_NtAccessCheckAndAuditAlarm@44
_NtAccessCheckByType@44
_NtAccessCheckByTypeAndAuditAlarm@64
_NtAccessCheckByTypeResultList@44
_NtAccessCheckByTypeResultListAndAuditAlarm@64
_NtAccessCheckByTypeResultListAndAuditAlarmByHandle@68
_NtAcquireCrossVmMutant@8
_NtAcquireProcessActivityReference@12
_NtAddAtom@12
_NtAddAtomEx@16
_NtAddBootEntry@8
_NtAddDriverEntry@8
_NtAdjustGroupsToken@24
_NtAdjustPrivilegesToken@24
_NtAdjustTokenClaimsAndDeviceGroups@64
_NtAlertResumeThread@8
_NtAlertThread@4
_NtAlertThreadByThreadId@4
_NtAllocateLocallyUniqueId@4
_NtAllocateReserveObject@12
_NtAllocateUserPhysicalPages@12
_NtAllocateUserPhysicalPagesEx@20
_NtAllocateUuids@16
_NtAllocateVirtualMemory@24
_NtAllocateVirtualMemoryEx@28
_NtAlpcAcceptConnectPort@36
_NtAlpcCancelMessage@12
_NtAlpcConnectPort@44
_NtAlpcConnectPortEx@44
_NtAlpcCreatePort@12
_NtAlpcCreatePortSection@24
_NtAlpcCreateResourceReserve@16
_NtAlpcCreateSectionView@12
_NtAlpcCreateSecurityContext@12
_NtAlpcDeletePortSection@12
_NtAlpcDeleteResourceReserve@12
_NtAlpcDeleteSectionView@12
_NtAlpcDeleteSecurityContext@12
_NtAlpcDisconnectPort@8
_NtAlpcImpersonateClientContainerOfPort@12
_NtAlpcImpersonateClientOfPort@12
_NtAlpcOpenSenderProcess@24
_NtAlpcOpenSenderThread@24
_NtAlpcQueryInformation@20
_NtAlpcQueryInformationMessage@24
_NtAlpcRevokeSecurityContext@12
_NtAlpcSendWaitReceivePort@32
_NtAlpcSetInformation@16
_NtApphelpCacheControl@8
_NtAreMappedFilesTheSame@8
_NtAssignProcessToJobObject@8
_NtAssociateWaitCompletionPacket@32
_NtCallEnclave@16
_NtCallbackReturn@12
_NtCancelIoFile@8
_NtCancelIoFileEx@12
_NtCancelSynchronousIoFile@12
_NtCancelTimer2@8
_NtCancelTimer@8
_NtCancelWaitCompletionPacket@8
_NtClearEvent@4
_NtClose@4
_NtCloseObjectAuditAlarm@12
_NtCommitComplete@8
_NtCommitEnlistment@8
_NtCommitRegistryTransaction@8
_NtCommitTransaction@8
_NtCompactKeys@8
_NtCompareObjects@8
_NtCompareSigningLevels@8
_NtCompareTokens@12
_NtCompleteConnectPort@4
_NtCompressKey@4
_NtConnectPort@32
_NtContinue@8
_NtContinueEx@8
_NtConvertBetweenAuxiliaryCounterAndPerformanceCounter@16
_NtCreateCrossVmEvent@24
_NtCreateCrossVmMutant@24
_NtCreateDebugObject@16
_NtCreateDirectoryObject@12
_NtCreateDirectoryObjectEx@20
_NtCreateEnclave@36
_NtCreateEnlistment@32
_NtCreateEvent@20
_NtCreateEventPair@12
_NtCreateFile@44
_NtCreateIRTimer@12
_NtCreateIoCompletion@16
_NtCreateJobObject@12
_NtCreateJobSet@12
_NtCreateKey@28
_NtCreateKeyTransacted@32
_NtCreateKeyTransacted_Stub@32
_NtCreateKeyedEvent@16
_NtCreateLowBoxToken@36
_NtCreateMailslotFile@32
_NtCreateMutant@16
_NtCreateNamedPipeFile@56
_NtCreatePagingFile@16
_NtCreatePartition@16
_NtCreatePort@20
_NtCreatePrivateNamespace@16
_NtCreateProcess@32
_NtCreateProcessEx@36
_NtCreateProfile@36
_NtCreateProfileEx@40
_NtCreateRegistryTransaction@16
_NtCreateResourceManager@28
_NtCreateSection@28
_NtCreateSectionEx@36
_NtCreateSemaphore@20
_NtCreateSymbolicLinkObject@16
_NtCreateThread@32
_NtCreateThreadEx@44
_NtCreateTimer2@20
_NtCreateTimer@16
_NtCreateToken@52
_NtCreateTokenEx@68
_NtCreateTransaction@40
_NtCreateTransactionManager@24
_NtCreateUserProcess@44
_NtCreateWaitCompletionPacket@12
_NtCreateWaitablePort@20
_NtCreateWnfStateName@28
_NtCreateWorkerFactory@40
_NtDebugActiveProcess@8
_NtDebugContinue@12
_NtDelayExecution@8
_NtDeleteAtom@4
_NtDeleteBootEntry@4
_NtDeleteDriverEntry@4
_NtDeleteFile@4
_NtDeleteKey@4
_NtDeleteObjectAuditAlarm@12
_NtDeletePrivateNamespace@4
_NtDeleteValueKey@8
_NtDeleteWnfStateData@8
_NtDeleteWnfStateName@4
_NtDeviceIoControlFile@40
_NtDirectGraphicsCall@20
_NtDisableLastKnownGood@0
_NtDisplayString@4
_NtDrawText@4
_NtDuplicateObject@28
_NtDuplicateToken@24
_NtEnableLastKnownGood@0
_NtEnumerateBootEntries@8
_NtEnumerateDriverEntries@8
_NtEnumerateKey@24
_NtEnumerateSystemEnvironmentValuesEx@12
_NtEnumerateTransactionObject@20
_NtEnumerateValueKey@24
_NtExtendSection@8
_NtFilterBootOption@20
_NtFilterToken@24
_NtFilterTokenEx@56
_NtFindAtom@12
_NtFlushBuffersFile@8
_NtFlushBuffersFileEx@20
_NtFlushInstallUILanguage@8
_NtFlushInstructionCache@12
_NtFlushKey@4
_NtFlushProcessWriteBuffers@0
_NtFlushVirtualMemory@16
_NtFlushWriteBuffer@0
_NtFreeUserPhysicalPages@12
_NtFreeVirtualMemory@16
_NtFreezeRegistry@4
_NtFreezeTransactions@8
_NtFsControlFile@40
_NtGetCachedSigningLevel@24
_NtGetCompleteWnfStateSubscription@24
_NtGetContextThread@8
_NtGetCurrentProcessorNumber@0
_NtGetCurrentProcessorNumberEx@4
_NtGetDevicePowerState@8
_NtGetEnvironmentVariableEx@20
_NtGetMUIRegistryInfo@12
_NtGetNextProcess@20
_NtGetNextThread@24
_NtGetNlsSectionPtr@20
_NtGetNotificationResourceManager@28
_NtGetWriteWatch@28
_NtImpersonateAnonymousToken@4
_NtImpersonateClientOfPort@8
_NtImpersonateThread@12
_NtInitializeEnclave@20
_NtInitializeNlsFiles@12
_NtInitializeRegistry@4
_NtInitiatePowerAction@16
_NtIsProcessInJob@8
_NtIsSystemResumeAutomatic@0
_NtIsUILanguageComitted@0
_NtListenPort@8
_NtLoadDriver@4
_NtLoadEnclaveData@36
_NtLoadKey2@12
_NtLoadKey3@32
_NtLoadKey@8
_NtLoadKeyEx@32
_NtLockFile@40
_NtLockProductActivationKeys@8
_NtLockRegistryKey@4
_NtLockVirtualMemory@16
_NtMakePermanentObject@4
_NtMakeTemporaryObject@4
_NtManageHotPatch@16
_NtManagePartition@20
_NtMapCMFModule@24
_NtMapUserPhysicalPages@12
_NtMapUserPhysicalPagesScatter@12
_NtMapViewOfSection@40
_NtMapViewOfSectionEx@36
_NtModifyBootEntry@4
_NtModifyDriverEntry@4
_NtNotifyChangeDirectoryFile@36
_NtNotifyChangeDirectoryFileEx@40
_NtNotifyChangeKey@40
_NtNotifyChangeMultipleKeys@48
_NtNotifyChangeSession@32
_NtOpenDirectoryObject@12
_NtOpenEnlistment@20
_NtOpenEvent@12
_NtOpenEventPair@12
_NtOpenFile@24
_NtOpenIoCompletion@12
_NtOpenJobObject@12
_NtOpenKey@12
_NtOpenKeyEx@16
_NtOpenKeyTransacted@16
_NtOpenKeyTransactedEx@20
_NtOpenKeyTransactedEx_Stub@20
_NtOpenKeyTransacted_Stub@16
_NtOpenKeyedEvent@12
_NtOpenMutant@12
_NtOpenObjectAuditAlarm@48
_NtOpenPartition@12
_NtOpenPrivateNamespace@16
_NtOpenProcess@16
_NtOpenProcessToken@12
_NtOpenProcessTokenEx@16
_NtOpenRegistryTransaction@12
_NtOpenResourceManager@20
_NtOpenSection@12
_NtOpenSemaphore@12
_NtOpenSession@12
_NtOpenSymbolicLinkObject@12
_NtOpenThread@16
_NtOpenThreadToken@16
_NtOpenThreadTokenEx@20
_NtOpenTimer@12
_NtOpenTransaction@20
_NtOpenTransactionManager@24
_NtPlugPlayControl@12
_NtPowerInformation@20
_NtPrePrepareComplete@8
_NtPrePrepareEnlistment@8
_NtPrepareComplete@8
_NtPrepareEnlistment@8
_NtPrivilegeCheck@12
_NtPrivilegeObjectAuditAlarm@24
_NtPrivilegedServiceAuditAlarm@20
_NtPropagationComplete@16
_NtPropagationFailed@12
_NtProtectVirtualMemory@20
_NtPssCaptureVaSpaceBulk@20
_NtPulseEvent@8
_NtQueryAttributesFile@8
_NtQueryAuxiliaryCounterFrequency@4
_NtQueryBootEntryOrder@8
_NtQueryBootOptions@8
_NtQueryDebugFilterState@8
_NtQueryDefaultLocale@8
_NtQueryDefaultUILanguage@4
_NtQueryDirectoryFile@44
_NtQueryDirectoryFileEx@40
_NtQueryDirectoryObject@28
_NtQueryDriverEntryOrder@8
_NtQueryEaFile@36
_NtQueryEnvironmentVariableInfoEx@16
_NtQueryEvent@20
_NtQueryFullAttributesFile@8
_NtQueryInformationAtom@20
_NtQueryInformationByName@20
_NtQueryInformationEnlistment@20
_NtQueryInformationFile@20
_NtQueryInformationJobObject@20
_NtQueryInformationPort@20
_NtQueryInformationProcess@20
_NtQueryInformationResourceManager@20
_NtQueryInformationThread@20
_NtQueryInformationToken@20
_NtQueryInformationTransaction@20
_NtQueryInformationTransactionManager@20
_NtQueryInformationWorkerFactory@20
_NtQueryInstallUILanguage@4
_NtQueryIntervalProfile@8
_NtQueryIoCompletion@20
_NtQueryKey@20
_NtQueryLicenseValue@20
_NtQueryMultipleValueKey@24
_NtQueryMutant@20
_NtQueryObject@20
_NtQueryOpenSubKeys@8
_NtQueryOpenSubKeysEx@16
_NtQueryPerformanceCounter@8
_NtQueryPortInformationProcess@0
_NtQueryQuotaInformationFile@36
_NtQuerySection@20
_NtQuerySecurityAttributesToken@24
_NtQuerySecurityObject@20
_NtQuerySecurityPolicy@24
_NtQuerySemaphore@20
_NtQuerySymbolicLinkObject@12
_NtQuerySystemEnvironmentValue@16
_NtQuerySystemEnvironmentValueEx@20
_NtQuerySystemInformation@16
_NtQuerySystemInformationEx@24
_NtQuerySystemTime@4
_NtQueryTimer@20
_NtQueryTimerResolution@12
_NtQueryValueKey@24
_NtQueryVirtualMemory@24
_NtQueryVolumeInformationFile@20
_NtQueryWnfStateData@24
_NtQueryWnfStateNameInformation@20
_NtQueueApcThread@20
_NtQueueApcThreadEx@24
_NtRaiseException@12
_NtRaiseHardError@24
_NtReadFile@36
_NtReadFileScatter@36
_NtReadOnlyEnlistment@8
_NtReadRequestData@24
_NtReadVirtualMemory@20
_NtRecoverEnlistment@8
_NtRecoverResourceManager@4
_NtRecoverTransactionManager@4
_NtRegisterProtocolAddressInformation@20
_NtRegisterThreadTerminatePort@4
_NtReleaseKeyedEvent@16
_NtReleaseMutant@8
_NtReleaseSemaphore@12
_NtReleaseWorkerFactoryWorker@4
_NtRemoveIoCompletion@20
_NtRemoveIoCompletionEx@24
_NtRemoveProcessDebug@8
_NtRenameKey@8
_NtRenameTransactionManager@8
_NtReplaceKey@12
_NtReplacePartitionUnit@12
_NtReplyPort@8
_NtReplyWaitReceivePort@16
_NtReplyWaitReceivePortEx@20
_NtReplyWaitReplyPort@8
_NtRequestPort@8
_NtRequestWaitReplyPort@12
_NtResetEvent@8
_NtResetWriteWatch@12
_NtRestoreKey@12
_NtResumeProcess@4
_NtResumeThread@8
_NtRevertContainerImpersonation@0
_NtRollbackComplete@8
_NtRollbackEnlistment@8
_NtRollbackRegistryTransaction@8
_NtRollbackTransaction@8
_NtRollforwardTransactionManager@8
_NtSaveKey@8
_NtSaveKeyEx@12
_NtSaveMergedKeys@12
_NtSecureConnectPort@36
_NtSerializeBoot@0
_NtSetBootEntryOrder@8
_NtSetBootOptions@8
_NtSetCachedSigningLevel2@24
_NtSetCachedSigningLevel@20
_NtSetContextThread@8
_NtSetDebugFilterState@12
_NtSetDefaultHardErrorPort@4
_NtSetDefaultLocale@8
_NtSetDefaultUILanguage@4
_NtSetDriverEntryOrder@8
_NtSetEaFile@16
_NtSetEvent@8
_NtSetEventBoostPriority@4
_NtSetHighEventPair@4
_NtSetHighWaitLowEventPair@4
_NtSetIRTimer@8
_NtSetInformationDebugObject@20
_NtSetInformationEnlistment@16
_NtSetInformationFile@20
_NtSetInformationJobObject@16
_NtSetInformationKey@16
_NtSetInformationObject@16
_NtSetInformationProcess@16
_NtSetInformationResourceManager@16
_NtSetInformationSymbolicLink@16
_NtSetInformationThread@16
_NtSetInformationToken@16
_NtSetInformationTransaction@16
_NtSetInformationTransactionManager@16
_NtSetInformationVirtualMemory@24
_NtSetInformationWorkerFactory@16
_NtSetIntervalProfile@8
_NtSetIoCompletion@20
_NtSetIoCompletionEx@24
_NtSetLdtEntries@24
_NtSetLowEventPair@4
_NtSetLowWaitHighEventPair@4
_NtSetQuotaInformationFile@16
_NtSetSecurityObject@12
_NtSetSystemEnvironmentValue@8
_NtSetSystemEnvironmentValueEx@20
_NtSetSystemInformation@12
_NtSetSystemPowerState@12
_NtSetSystemTime@8
_NtSetThreadExecutionState@8
_NtSetTimer2@16
_NtSetTimer@28
_NtSetTimerEx@16
_NtSetTimerResolution@12
_NtSetUuidSeed@4
_NtSetValueKey@24
_NtSetVolumeInformationFile@20
_NtSetWnfProcessNotificationEvent@4
_NtShutdownSystem@4
_NtShutdownWorkerFactory@8
_NtSignalAndWaitForSingleObject@16
_NtSinglePhaseReject@8
_NtStartProfile@4
_NtStopProfile@4
_NtSubscribeWnfStateChange@16
_NtSuspendProcess@4
_NtSuspendThread@8
_NtSystemDebugControl@24
_NtTerminateEnclave@8
_NtTerminateJobObject@8
_NtTerminateProcess@8
_NtTerminateThread@8
_NtTestAlert@0
_NtThawRegistry@0
_NtThawTransactions@0
_NtTraceControl@24
_NtTraceEvent@16
_NtTranslateFilePath@16
_NtUmsThreadYield@4
_NtUnloadDriver@4
_NtUnloadKey2@8
_NtUnloadKey@4
_NtUnloadKeyEx@8
_NtUnlockFile@20
_NtUnlockVirtualMemory@16
_NtUnmapViewOfSection@8
_NtUnmapViewOfSectionEx@12
_NtUnsubscribeWnfStateChange@4
_NtUpdateWnfStateData@28
_NtVdmControl@8
_NtWaitForAlertByThreadId@8
_NtWaitForDebugEvent@16
_NtWaitForKeyedEvent@16
_NtWaitForMultipleObjects32@20
_NtWaitForMultipleObjects@20
_NtWaitForSingleObject@12
_NtWaitForWorkViaWorkerFactory@20
_NtWaitHighEventPair@4
_NtWaitLowEventPair@4
_NtWorkerFactoryWorkerReady@4
_NtWriteFile@36
_NtWriteFileGather@36
_NtWriteRequestData@24
_NtWriteVirtualMemory@20
_NtYieldExecution@0
_NtosSecureKernelImportBugcheck@0
_OBJECT_HEADER_TO_AUDIT_INFO@4
_OBJECT_HEADER_TO_CREATOR_INFO@4
_OBJECT_HEADER_TO_HANDLE_INFO@4
_OBJECT_HEADER_TO_HANDLE_REVOCATION_INFO@4
_OBJECT_HEADER_TO_PROCESS_INFO@4
_OBJECT_HEADER_TO_QUOTA_INFO@4
_OBP_GET_SILO_ROOT_DIRECTORY_FROM_SILO@4
_ObAdjustSecurityQuota@8
_ObAssignObjectSecurityDescriptor@12
_ObAssignSecurity@16
_ObAuditInheritedHandleProcedure@16
_ObCaptureObjectStateForDuplication@24
_ObCheckActiveHandles@4
_ObCheckCreateObjectAccess@28
_ObCheckObjectAccess@20
_ObCheckRefTraceProcess@4
_ObCleanupSecurityDescriptor@4
_ObCloseHandle@8
_ObCloseHandleTableEntry@24
_ObCompleteObjectDuplication@20
_ObCreateKernelObjectsSD@4
_ObCreateObject@36
_ObCreateObjectEx@40
_ObCreateObjectType@16
_ObCreateObjectTypeEx@20
_ObCreateSiloRootDirectory@8
_ObCreateSymbolicLink@20
_ObDeassignSecurity@4
_ObDeleteCapturedInsertInfo@4
_ObDereferenceDeviceMap@4
_ObDereferenceObject@4
_ObDereferenceObjectDeferDelete@4
_ObDereferenceObjectDeferDeleteWithTag@8
_ObDereferenceProcessHandleTable@4
_ObDereferenceSecurityDescriptor@8
_ObDestroyHandleRevocationBlock@4
_ObDisableEtwReferenceTrace@0
_ObDuplicateObject@32
_ObEnableEtwReferenceTrace@0
_ObEnumerateObjectsByType@12
_ObFindHandleForObject@20
_ObGetAssociatedWaitObject@4
_ObGetFilterVersion@0
_ObGetHandleInformation@12
_ObGetHandleInformationEx@12
_ObGetObjectInformation@16
_ObGetObjectSecurity@12
_ObGetObjectType@4
_ObGetProcessHandleCount@8
_ObGetSiloRootDirectoryPath@8
_ObHandleRevocationBlockAddObject@8
_ObInheritObjectHandle@16
_ObInitProcess@16
_ObInitServerSilo@4
_ObInitSystem@0
_ObInitializeProcessor@4
_ObInsertObject@24
_ObInsertObjectEx@28
_ObIsDosDeviceLocallyMapped@8
_ObIsKernelHandle@4
_ObKillProcess@4
_ObLogSecurityDescriptor@12
_ObMakeTemporaryObject@4
_ObOpenObjectByName@28
_ObOpenObjectByNameEx@32
_ObOpenObjectByPointer@28
_ObOpenObjectByPointerWithTag@32
_ObQueryDeviceMapInformation@12
_ObQueryHandleEntryInformation@8
_ObQueryNameInfo@4
_ObQueryNameString@16
_ObQueryNameStringMode@20
_ObQueryObjectAuditingByHandle@8
_ObQueryRefTraceInformation@12
_ObQuerySecurityDescriptorInfo@20
_ObQuerySecurityObject@20
_ObQueryTypeInfo@16
_ObQueryTypeName@16
_ObReferenceFileObjectForWrite@16
_ObReferenceObjectByHandle@24
_ObReferenceObjectByHandleWithTag@28
_ObReferenceObjectByName@32
_ObReferenceObjectByNameEx@28
_ObReferenceObjectByPointer@16
_ObReferenceObjectByPointerWithTag@20
_ObReferenceProcessHandleTable@4
_ObReferenceSecurityDescriptor@8
_ObRegisterCallbacks@8
_ObReleaseDuplicateInfo@4
_ObReleaseObjectSecurity@8
_ObRevokeHandles@4
_ObSetCurrentProcessDeviceMap@0
_ObSetHandleAttributes@12
_ObSetRefTraceInformation@8
_ObSetSecurityDescriptorInfo@24
_ObSetSecurityObjectByPointer@12
_ObShutdownSystem@4
_ObUnRegisterCallbacks@4
_ObWaitForMultipleObjects@28
_ObWaitForSingleObject@20
_ObpAddToPendingDirectoryList@4
_ObpAdjustAccessMask@4
_ObpAdjustCreatorAccessState@16
_ObpAllocateAndQuerySecurityDescriptorInfo@16
_ObpAllocateObject@28
_ObpAllocateTypeIndex@4
_ObpAssignSecurity@24
_ObpAuditObjectAccess@20
_ObpCallPostOperationCallbacks@8
_ObpCallPreOperationCallbacks@12
_ObpCaptureBoundaryDescriptor@8
_ObpCaptureHandleInformation@24
_ObpCaptureHandleInformationEx@24
_ObpCaptureObjectCreateInformation@24
_ObpCaptureObjectName@16
_ObpChargeQuotaForObject@12
_ObpCheckDuplicateEntries@4
_ObpCheckObjectReference@20
_ObpCheckTraverseAccess@24
_ObpCloseDirectoryObject@16
_ObpCloseHandle@8
_ObpCompareEntryLevel1@8
_ObpCompareEntryLevel2@8
_ObpCompareNamespaceEntry@8
_ObpCreateCacheEntry@16
_ObpCreateDefaultObjectTypeSD@4
_ObpCreateDirectoryObject@20
_ObpCreateDosDevicesDirectory@12
_ObpCreateHandle@44
_ObpCreateSymbolicLinkName@4
_ObpCreateTypeArray@4
_ObpDecrementHandleCount@8
_ObpDeferObjectDeletion@4
_ObpDeferPushRefDerefInfo@24
_ObpDeleteDirectoryEntry@4
_ObpDeleteDirectoryObject@4
_ObpDeleteNameCheck@4
_ObpDeleteSymbolicLink@4
_ObpDeleteSymbolicLinkName@4
_ObpDereferenceNamedObject@4
_ObpDeregisterObject@4
_ObpDestroyStackAndObjectTables@12
_ObpDestroyTypeArray@4
_ObpDirectoryTeardownCallback@4
_ObpEnumFindHandleProcedure@16
_ObpFilterOperation@4
_ObpFreeDosDevicesProtection@4
_ObpFreeWorkItemBlock@4
_ObpGetDosDevicesProtection@4
_ObpGetObjectRefInfo@8
_ObpGetObjectSecurity@16
_ObpGetShadowDirectory@8
_ObpGetSilosRootDirectory@4
_ObpGetTraceIndex@4
_ObpGetWaitObject@4
_ObpGrantAccess@24
_ObpHandleRevocationBlockRemoveInsertedObject@16
_ObpHandleRevocationBlockRemoveObject@4
_ObpHashBoundaryFunction@8
_ObpIncrPointerCount@4
_ObpIncrPointerCountEx@8
_ObpIncrementHandleCountEx@28
_ObpInitInfoBlockOffsets@0
_ObpInitObjectTypeSD@8
_ObpInitSecurityDescriptorCache@0
_ObpInitStackAndObjectTables@0
_ObpInitStackTrace@0
_ObpInitializeRootNamespace@12
_ObpInsertCallbackByAltitude@8
_ObpInsertDirectoryEntry@12
_ObpInsertHandleCount@4
_ObpInsertOrLocateNamedObject@28
_ObpIsKernelHandle@8
_ObpIsObjectPoolTagTraced@4
_ObpIsUnsecureName@8
_ObpLockDirectoryExclusive@8
_ObpLockDirectoryShared@8
_ObpLockHandleDataBaseEntry@12
_ObpLookupDirectoryEntry@16
_ObpLookupDirectoryEntryEx@24
_ObpLookupDirectoryUsingHash@16
_ObpLookupNamespaceEntry@8
_ObpLookupObjectName@52
_ObpMarkDirectoryObjectsTemporary@4
_ObpMarkDirectoryTreeTemporary@4
_ObpParseSymbolicLinkEx@44
_ObpPostInterceptHandleCreate@20
_ObpPostInterceptHandleDuplicate@20
_ObpPreInterceptHandleDuplicate@24
_ObpProcessRemoveObjectDpcWorker@16
_ObpProcessRemoveObjectQueue@4
_ObpPushRefDerefInfo@24
_ObpPushStackInfo@16
_ObpPushStackInfoQueue@4
_ObpReferenceDeviceMap@4
_ObpReferenceNamedObject@4
_ObpReferenceObjectByHandle@16
_ObpReferenceObjectByHandleWithTag@32
_ObpReferenceProcessObjectByHandle@32
_ObpReferenceSecurityDescriptor@4
_ObpRefillWorkItemFreeList@0
_ObpRegisterObject@4
_ObpRegisterPrivateNamespace@4
_ObpReleaseHandleInfo@12
_ObpReleaseLookupContext@4
_ObpRemoveNamespaceEntry@8
_ObpRemoveNamespaceFromTable@4
_ObpRemoveObjectRoutine@8
_ObpRemovePendingDirectoryItem@0
_ObpSafeInterlockedAddNoFence@8
_ObpSetDeviceMap@24
_ObpSetObjectAuditInfo@12
_ObpSetSiloDeviceMap@8
_ObpShutdownCloseHandleProcedure@16
_ObpStartRuntimeStackTrace@4
_ObpStopRuntimeStackTrace@0
_ObpTraceObjectReferenceIfActive@12
_ObpUnlockDirectory@8
_ObpUnlockHandleDatabaseEntry@8
_ObpVerifyAccessToBoundaryEntry@8
_ObpVerifyCreatorAccessCheck@4
_OpenGlobalizationUserSettingsKey@12
_PFP_CAN_DO_ACCESS_LOGGING@0
_PFP_GET_CURRENT_TICK_COUNT_MS@0
_PFP_GET_CURRENT_TIME@0
_PFP_TICKS_TO_TIME@8
_PMC_MONITORING_ENABLED@8
_PcwAddInstance@20
_PcwCloseInstance@4
_PcwCreateInstance@20
_PcwRegister@8
_PcwUnregister@4
_PdcPoCurrentPdcPhase@12
_PdcPoIdleScanEnabled@0
_PdcPoLowPower@4
_PdcPoNetworkResiliency@4
_PdcPoPowerRequestBlockingCallback@4
_PdcPoPpmApplyProfile@4
_PdcPoPpmRegisterProfiles@8
_PdcPoPpmResetProfile@8
_PdcPoRecordButton@0
_PdcPoReportButton@8
_PdcPoReportLidState@4
_PdcPoResiliencyClient@12
_PdcPoSetPowerAction@20
_PdcPoSleepStudyHelperSetPhaseActive@8
_PdcPoVerifyActionPolicy@4
_PdcPoVerifyPowerState@8
_PdcPortOpenCommon@36
_PdcPortSendMessageSynchronously@12
_PdcTaskClientRegister@8
_PdcTaskClientRequest@8
_PdcpPortReleaseResources@4
_PerfDiagInitialize@0
_PerfDiagpBootSystemProxyCallback@36
_PerfDiagpBootUserProxyCallback@36
_PerfDiagpInitializeLoggerInfo@8
_PerfDiagpIsTracingAllowed@0
_PerfDiagpProxyWorker@4
_PerfDiagpRequestState@4
_PerfDiagpSaveActiveDCLLogFileName@0
_PerfDiagpSecondaryLogonProxyCallback@36
_PerfDiagpShutdownProxyCallback@36
_PerfDiagpStartPerfDiagLogger@4
_PerfDiagpUpdatePerfDiagLoggerEnableFlags@8
_PerfInfoLogIpiReceive@12
_PerfInfoLogIpiSend@20
_PerfInfoLogVirtualAlloc@24
_PerfInfoLogVirtualFree@16
_PerfLogImageLoad@12
_PeriodicCaptureStateTimerCallback@8
_PfCalculateProcessHash@8
_PfCheckDeprioritizeFile@12
_PfCheckDeprioritizeImage@4
_PfFbBufferListAllocate@12
_PfFbBufferListAllocateTemporary@8
_PfFbBufferListCleanup@4
_PfFbBufferListFlushStandby@4
_PfFbBufferListInitialize@12
_PfFbBufferListInsertInFree@20
_PfFbBufferListShutdown@4
_PfFbBufferListUpdateMax@8
_PfFbLogEntryComplete@12
_PfFbLogEntryReserve@16
_PfFileInfoNotify@4
_PfFillVolumeInfoForVolume@12
_PfGenerateTrace@8
_PfGetCompletedTrace@16
_PfHardFaultLog@8
_PfHardFaultRecord@28
_PfInitializeSuperfetch@0
_PfLockExclusiveAcquire@4
_PfLockExclusiveRelease@4
_PfLockSharedTryAcquire@4
_PfLogDeleteHelper@16
_PfLogEvent@16
_PfLogFileDataAccess@24
_PfLogForegroundProcess@4
_PfMetadataRecordIsEqual@12
_PfPowerActionNotify@12
_PfPrefetchRequestPrepareForVerify@12
_PfPrefetchRequestVerify@8
_PfPrefetchRequestVerifyPath@12
_PfPrefetchRequestVerifyRanges@16
_PfProcessCreateNotification@8
_PfProcessExitNotification@4
_PfQuerySuperfetchInformation@20
_PfRequestRangeCheck@20
_PfSetSuperfetchInformation@16
_PfSnActivateTrace@4
_PfSnActiveTraceGetNext@4
_PfSnAddProcessTrace@8
_PfSnAllocateEnablePrefetcherTimer@4
_PfSnAppLaunchScenarioControl@8
_PfSnArrayGrow@20
_PfSnAsyncContextCleanup@4
_PfSnAsyncContextInitialize@16
_PfSnAsyncPrefetchStep@12
_PfSnAsyncPrefetchWorker@4
_PfSnBeginAppLaunch@12
_PfSnBeginBootPhase@4
_PfSnBeginScenario@20
_PfSnBeginTrace@24
_PfSnBuildDumpFromTrace@8
_PfSnBuildScenarioEventDescriptors@16
_PfSnCancelTraceTimer@4
_PfSnCaptureParamBlockString@12
_PfSnCheckActionsNeeded@20
_PfSnCheckLogSequenceNumber@4
_PfSnCheckLoggingForThread@12
_PfSnCheckModernApp@16
_PfSnCheckScenario@8
_PfSnCleanupPrefetchHeader@4
_PfSnCleanupPrefetchSectionInfo@12
_PfSnCleanupTrace@4
_PfSnDeactivateTrace@4
_PfSnDetermineEnablePrefetcher@0
_PfSnEnablePrefetcherTimerRoutine@16
_PfSnEndProcessTrace@12
_PfSnEndTrace@4
_PfSnEndTraceWorkerThreadRoutine@4
_PfSnFailProcessTrace@4
_PfSnFindImageFileName@8
_PfSnFindPrefetchVolumeInfoInList@12
_PfSnFindString@8
_PfSnGetCompletedTrace@12
_PfSnGetFileInformation@8
_PfSnGetFirstPrefetchPhase@8
_PfSnGetPrefetchInstructions@12
_PfSnGetSectionObject@40
_PfSnGetUnsafeProcessParameters@0
_PfSnHashUnsafeUnicodeString@8
_PfSnInitializePrefetcher@0
_PfSnIsHostingApplication@4
_PfSnIsSectionPrefetchedAfterPhase@12
_PfSnIsVolumeMounted@12
_PfSnLogAsyncWorker@8
_PfSnLogEndTrace@4
_PfSnLogGetReadListsStart@8
_PfSnLogGetReadListsStop@4
_PfSnLogHelper@12
_PfSnLogIdentifier@8
_PfSnLogOpenVolumesForPrefetch@8
_PfSnLogPageFault@16
_PfSnLogPageFaultCommon@24
_PfSnLogPrefetchMetadata@12
_PfSnLogPrefetchSectionsStart@16
_PfSnLogPrefetchSectionsStop@24
_PfSnLogScenarioDecision@32
_PfSnLogStreamCreate@4
_PfSnLogStreamDelete@8
_PfSnLogVolumeCreate@4
_PfSnNameQueryWorker@4
_PfSnNameRemove@8
_PfSnNameRemoveAll@4
_PfSnNamesCacheRemove@8
_PfSnOpenVolumesForPrefetch@8
_PfSnOperationProcess@4
_PfSnParametersRead@4
_PfSnParametersSetDefaults@4
_PfSnParametersVerify@4
_PfSnParsePrefetchParam@8
_PfSnPopulateReadList@4
_PfSnPowerBoost@8
_PfSnPowerBoostDpc@16
_PfSnPowerBoostInitialize@4
_PfSnPowerBoostUpdate@4
_PfSnPowerBoostWorker@4
_PfSnPreallocatePrefetchHeader@4
_PfSnPrefetchCacheCtxInitialize@4
_PfSnPrefetchCacheCtxStart@4
_PfSnPrefetchCacheEntryGet@16
_PfSnPrefetchCacheEntryUpdate@4
_PfSnPrefetchFileMetadata@24
_PfSnPrefetchMetadata@8
_PfSnPrefetchScenario@8
_PfSnPrefetchSections@20
_PfSnPrefetchSectionsCleanup@16
_PfSnQueryPrefetcherInformation@20
_PfSnQueryVolumeInfo@20
_PfSnQueueEnablePrefetcherTimer@4
_PfSnReferenceProcessTrace@4
_PfSnRemoveProcessTrace@4
_PfSnScanCommandLine@8
_PfSnScenarioAlloc@4
_PfSnScenarioFree@4
_PfSnSectionInfoCleanupWorkItem@4
_PfSnSetPrefetcherInformation@16
_PfSnStartTraceTimer@4
_PfSnTraceBufferAllocate@0
_PfSnTraceGetLogEntry@12
_PfSnTraceTimerRoutine@16
_PfSnTracingStateDpcRoutine@16
_PfSnTracingStateExWorkerRoutine@4
_PfSnUpdatePrefetcherFlags@8
_PfSnVolumeCheckIsSdBus@8
_PfSnVolumeCheckSeekPenalty@8
_PfSnVolumeKeyQuery@12
_PfSnVolumeNodeInitialize@4
_PfTAccessTracingCleanup@12
_PfTAccessTracingInitialize@12
_PfTAccessTracingStart@12
_PfTAcquireLogEntry@12
_PfTAllocateBuffers@16
_PfTCleanup@8
_PfTCleanupBuffers@4
_PfTCreateTraceDump@4
_PfTFreeBufferList@4
_PfTFreeTraceDump@4
_PfTFullEventListAdd@4
_PfTGenerateTrace@0
_PfTGetFreeBuffer@4
_PfTInitialize@12
_PfTLbInitialize@12
_PfTLoggingWorker@4
_PfTReplaceCurrentBuffer@4
_PfTSetTraceWorkerPriority@4
_PfTSetTracingPriority@4
_PfTStart@12
_PfTTraceListAdd@4
_PfTTraceListTrim@12
_PfVerifyScenarioBuffer@12
_PfVerifyScenarioId@4
_PfVerifyTraceBuffer@12
_PfVolumeSupportedForPrefetch@4
_PfpAvailablePagesForPrefetch@8
_PfpCheckPrefetchAbort@4
_PfpCopyEvent@4
_PfpCopyUserPfnPrioRequest@24
_PfpCreateEvent@12
_PfpDeprioritizeOldPagesInWs@8
_PfpEventHandleFullBuffer@4
_PfpEventHandleOutOfBuffers@4
_PfpFileBuildReadList@16
_PfpFileBuildReadSupport@20
_PfpFileCheckAttributesForPrefetch@8
_PfpFileSetupObjectAttributes@24
_PfpFillProcessInfo@8
_PfpFlushBuffers@0
_PfpFlushEventBuffers@0
_PfpGetParameter@20
_PfpIsProcessInfoPresent@4
_PfpLogApplicationEvent@12
_PfpLogEventRequest@4
_PfpLogPageAccess@20
_PfpLogScenarioEvent@20
_PfpLogStandbyRepurpose@4
_PfpMemoryListQuery@12
_PfpMemoryRangesQuery@12
_PfpOpenHandleClose@8
_PfpOpenHandleCreate@32
_PfpOpenHandleInitialize@4
_PfpParametersInitialize@4
_PfpParametersPropagate@4
_PfpParametersRead@4
_PfpParametersVerify@4
_PfpParametersWatcher@4
_PfpPfnPrioRequest@12
_PfpPowerActionDpcRoutine@16
_PfpPowerActionStartScenarioTracing@4
_PfpPrefetchDirectoryStream@24
_PfpPrefetchEntireDirectory@24
_PfpPrefetchFiles@8
_PfpPrefetchFilesTrickle@4
_PfpPrefetchPrivatePages@4
_PfpPrefetchRequest@8
_PfpPrefetchRequestPatchOffsets@4
_PfpPrefetchRequestPerform@4
_PfpPrefetchSharedCleanup@4
_PfpPrefetchSharedConflictNotifyEnd@8
_PfpPrefetchSharedConflictNotifyStart@12
_PfpPrefetchSharedInitialize@4
_PfpPrefetchSharedStart@4
_PfpPrefetchVolumesCleanup@4
_PfpPrivSourceAdd@8
_PfpPrivSourceEnum@12
_PfpProcessScenarioPhase@8
_PfpQueryFileExtentsRequest@12
_PfpQueryGpuUtilization@12
_PfpQueryScenarioInformation@12
_PfpReadSupportCleanup@8
_PfpReadSupportInitialize@4
_PfpRepurposeNameLoggingTrace@4
_PfpReturnAccessBuffer@4
_PfpRpCHashAddEntries@20
_PfpRpCHashDeleteEntries@20
_PfpRpCHashEmpty@12
_PfpRpCHashGrow@16
_PfpRpControlRequest@8
_PfpRpControlRequestCopy@20
_PfpRpControlRequestPerform@8
_PfpRpControlRequestReset@8
_PfpRpControlRequestUpdate@8
_PfpRpControlRequestVerify@4
_PfpRpFileKeyUpdate@12
_PfpRpInitialize@4
_PfpRpIsRehashNeeded@8
_PfpRpLogDeprioEvent@12
_PfpRpRehashIfNeeded@12
_PfpRpShutdown@4
_PfpRpStart@4
_PfpScenCtxInitialize@4
_PfpScenCtxPrefetchAbortSet@20
_PfpScenCtxPrefetchStateSet@16
_PfpScenCtxPrefetchWait@16
_PfpScenCtxQueryScenarioInformation@8
_PfpScenCtxScenarioSet@16
_PfpScenCtxServiceThreadSet@8
_PfpScenCtxStart@4
_PfpScenCtxWaiterTimedOut@4
_PfpSectInfoHandleFullBuffer@4
_PfpSectInfoHandleOutOfBuffers@4
_PfpServiceMainThreadBoost@8
_PfpServiceMainThreadBoostPrep@8
_PfpServiceMainThreadUnboost@4
_PfpSetBaseTime@8
_PfpSetParameter@20
_PfpSourceBuildVaArray@8
_PfpSourceGetPrefetchSupport@8
_PfpStartLoggingHardFaultEvents@0
_PfpUpdateRepurposedByPrefetch@8
_PfpVirtualQuery@12
_PfpVolumeOpenAndVerify@12
_PfpVolumePrefetchMetadata@8
_PfxFindPrefix@8
_PfxInitialize@4
_PfxInsertPrefix@12
_PfxRemovePrefix@8
_Phase1Initialization@4
_Phase1InitializationDiscard@4
_Phase1InitializationIoReady@8
_PiAllocateDeviceObjectList@8
_PiAuAllocateAndInitializeSid@12
_PiAuCheckClientInteractive@4
_PiAuCheckTokenMembership@8
_PiAuCreateLocalSystemSecurityObject@4
_PiAuCreateSecurityObjects@0
_PiAuCreateStandardSecurityObject@4
_PiAuCreateUserSids@4
_PiAuDoesClientHaveAccess@4
_PiAuDoesClientHavePrivilege@4
_PiAuFreeUserSids@4
_PiAuGetDriverDataDirectorySecurityObject@4
_PiAuGetServiceStateSecurityObject@4
_PiAuGetStateDirectorySecurityObject@4
_PiAuIsLocalSystem@8
_PiAuVerifyAccessToObject@20
_PiAuditDeviceEnableDisableAction@16
_PiAuditDeviceEnableDisableRequest@16
_PiAuditDeviceInstallPolicyBlock@16
_PiAuditDeviceOperation@12
_PiAuditDeviceStart@4
_PiBuildAndOpenDeviceDirectoryPath@20
_PiBuildDeviceNodeInstancePath@16
_PiCMCaptureCreateDeviceInputData@16
_PiCMCaptureDeviceListInputData@16
_PiCMCaptureEnumerateInputData@16
_PiCMCaptureInterfaceAliasInputData@16
_PiCMCaptureInterfaceListInputData@16
_PiCMCaptureObjectInputData@16
_PiCMCaptureProblemInputData@16
_PiCMCapturePropertyInputData@16
_PiCMCaptureRegisterInterfaceInputData@16
_PiCMCaptureRegistryInputData@16
_PiCMCaptureRegistryPropertyInputData@16
_PiCMConvertDeviceKeyType@8
_PiCMConvertDeviceListFilters@8
_PiCMConvertRegistryProperty@8
_PiCMCreateDevice@24
_PiCMCreateObject@24
_PiCMDeleteClassKey@24
_PiCMDeleteDevice@24
_PiCMDeleteDeviceInterfaceKey@24
_PiCMDeleteDeviceKey@24
_PiCMDeleteObject@24
_PiCMDeviceAction@24
_PiCMDispatch@8
_PiCMDuplicateRegistryHandle@20
_PiCMEnumerateSubKeys@24
_PiCMFastIoDeviceDispatch@36
_PiCMGenerateDeviceInstance@16
_PiCMGetDeviceDepth@24
_PiCMGetDeviceIdList@24
_PiCMGetDeviceInterfaceAlias@24
_PiCMGetDeviceInterfaceList@24
_PiCMGetDeviceStatus@24
_PiCMGetObjectList@24
_PiCMGetObjectProperty@24
_PiCMGetObjectPropertyKeys@24
_PiCMGetRegistryProperty@24
_PiCMGetRelatedDeviceInstance@24
_PiCMHandleIoctl@28
_PiCMMandatoryFilterCallback@16
_PiCMOpenClassKey@24
_PiCMOpenDeviceInterfaceKey@24
_PiCMOpenDeviceKey@24
_PiCMOpenObjectKey@24
_PiCMQueryRemove@24
_PiCMRegisterDeviceInterface@24
_PiCMReleaseObjectInputData@8
_PiCMReleasePropertyInputData@8
_PiCMReleaseRegistryInputData@8
_PiCMReleaseRegistryPropertyInputData@8
_PiCMReturnBasicResultData@20
_PiCMReturnBufferResultData@36
_PiCMReturnDepthResultData@24
_PiCMReturnHandleResultData@24
_PiCMReturnStatusResultData@32
_PiCMSetDeviceProblem@24
_PiCMSetObjectProperty@24
_PiCMSetProblem@12
_PiCMSetRegistryProperty@24
_PiCMUnregisterDeviceInterface@24
_PiCMValidateDeviceInstance@24
_PiCheckRemovalPreconditions@8
_PiClearDeviceObjectList@4
_PiCollapseEnumRequests@4
_PiCollapseRebalanceRequests@4
_PiCompareDDBCacheEntries@12
_PiConfigureDevice@4
_PiControlAllocateBufferForUserModeCaller@16
_PiControlCopyUserModeCallersBuffer@24
_PiControlGetDeviceDepth@16
_PiControlGetDeviceInterfaceEnabled@16
_PiControlGetDevicePowerData@20
_PiControlGetDeviceStack@16
_PiControlGetPropertyData@16
_PiControlGetRelatedDevice@16
_PiControlGetSetDeviceStatus@16
_PiControlGetUserFlagsFromDeviceNode@8
_PiControlMakeUserModeCallersCopy@24
_PiControlQueryAndRemoveDevice@16
_PiControlQueryConflictList@16
_PiControlQueryDeviceRelations@16
_PiControlStartDevice@16
_PiCreateDeviceInstanceKey@12
_PiCreateDirectoryPath@12
_PiCreateDriverDataDirectoryRoot@0
_PiCreateDriverRedirectedStateKey@12
_PiCreateDriverSwDeviceCallback@16
_PiCreateDriverSwDevices@4
_PiCreateRegistryPath@16
_PiCslInitialize@0
_PiCslIsConsoleLocked@0
_PiDaDispatch@8
_PiDaDriverEntry@8
_PiDaFastIoDispatch@36
_PiDaInit@0
_PiDcAllocateGenericTableEntry@8
_PiDcCompareUpdateProperties@12
_PiDcContainerRequiresConfiguration@4
_PiDcFreeGenericTableEntry@8
_PiDcGenerateConfigNotificationIfContainerRequiresConfiguration@4
_PiDcHandleContainerEvent@4
_PiDcHandleCustomDeviceEvent@4
_PiDcHandleDeviceEvent@4
_PiDcHandleInterfaceEvent@4
_PiDcHandleObjectEvent@4
_PiDcHandleSystemFirmwareUpdate@0
_PiDcInit@4
_PiDcInitUpdateProperties@0
_PiDcResetChildDeviceContainerCallback@12
_PiDcResetChildDeviceContainers@8
_PiDcUpdateDeviceContainerMembership@12
_PiDeferSetInterfaceState@8
_PiDetermineDeleteType@4
_PiDevCfgAppendMultiSz@16
_PiDevCfgBuildDriverConfigurationId@8
_PiDevCfgBuildDriverNodeStrongName@16
_PiDevCfgBuildIndirectString@16
_PiDevCfgCheckDeviceNeedsUpdate@8
_PiDevCfgClearDeviceMigrationNode@8
_PiDevCfgCompareDrivers@8
_PiDevCfgConfigureDevice@20
_PiDevCfgConfigureDeviceDriver@20
_PiDevCfgConfigureDeviceDriverConfiguration@32
_PiDevCfgConfigureDeviceFilters@8
_PiDevCfgConfigureDeviceInterface@12
_PiDevCfgConfigureDeviceInterfaceCallback@16
_PiDevCfgConfigureDeviceInterfaces@12
_PiDevCfgConfigureDeviceKeyCallback@24
_PiDevCfgConfigureDeviceKeys@24
_PiDevCfgConfigureDeviceLocation@16
_PiDevCfgConfigurePropertyMatchCallback@8
_PiDevCfgConfigureSoftwareDevices@8
_PiDevCfgConvertPropertyFromValue@24
_PiDevCfgCopyDeviceKey@28
_PiDevCfgCopyDeviceKeys@16
_PiDevCfgCopyObjectProperties@44
_PiDevCfgCopyVariableData@8
_PiDevCfgEnforceDevicePolicy@12
_PiDevCfgEnumDeviceKeys@28
_PiDevCfgFindDeviceDriver@12
_PiDevCfgFindDeviceMigrationNode@20
_PiDevCfgFreeDeviceContext@4
_PiDevCfgFreeDeviceMigrationNode@4
_PiDevCfgFreeDriverNode@4
_PiDevCfgFreeMigrationContext@4
_PiDevCfgFreeResolveContext@4
_PiDevCfgFreeVariable@4
_PiDevCfgGetDeviceClassConfigFlags@12
_PiDevCfgGetDriverConfigurationKeyScope@4
_PiDevCfgGetDriverPackageId@8
_PiDevCfgGetFailedInstallProblemStatus@8
_PiDevCfgGetKeySecurityDescriptor@8
_PiDevCfgGetMigrationDeviceIdScore@8
_PiDevCfgInitDeviceCallback@12
_PiDevCfgInitDeviceContext@12
_PiDevCfgInitDriverDatabaseCallback@12
_PiDevCfgInitMigrationContext@12
_PiDevCfgInitResolveContext@12
_PiDevCfgLogDeviceConfigured@32
_PiDevCfgLogDeviceMigrated@12
_PiDevCfgLogDeviceStarted@4
_PiDevCfgMakeServiceBootStart@4
_PiDevCfgMatchDriverConfigurationId@8
_PiDevCfgMigrateDevice@24
_PiDevCfgMigrateRootDevice@12
_PiDevCfgOpenDeviceMigrationKey@12
_PiDevCfgOpenDriverConfiguration@12
_PiDevCfgParseInterfaceKeyName@12
_PiDevCfgParsePropertyKeyName@12
_PiDevCfgParseVariableName@12
_PiDevCfgPopCopyKeyEntry@16
_PiDevCfgPopDriverNodeEntry@8
_PiDevCfgProcessDevice@12
_PiDevCfgProcessDeviceCallback@8
_PiDevCfgPushCopyKeyEntry@16
_PiDevCfgPushDriverNodeEntry@8
_PiDevCfgQueryDeviceMigrationNode@12
_PiDevCfgQueryDriverConfiguration@4
_PiDevCfgQueryDriverNode@24
_PiDevCfgQueryDriverVersionValueCallback@24
_PiDevCfgQueryIncludedDriverConfigurations@4
_PiDevCfgQueryIncludedDriverNode@20
_PiDevCfgQueryObjectProperties@24
_PiDevCfgQueryPolicyEnabled@12
_PiDevCfgQueryPolicyStringList@12
_PiDevCfgQueryResolveValue@16
_PiDevCfgRequestDriverConfigurations@8
_PiDevCfgResetDeviceDriverSettings@20
_PiDevCfgResetDeviceKeyCallback@24
_PiDevCfgResetDeviceKeys@12
_PiDevCfgResolveMultiSzValue@32
_PiDevCfgResolveVariable@12
_PiDevCfgResolveVariableConstant@12
_PiDevCfgResolveVariableDeviceProperty@12
_PiDevCfgResolveVariableExpression@12
_PiDevCfgResolveVariableFormatString@12
_PiDevCfgResolveVariableGenerateGuid@12
_PiDevCfgResolveVariableKeyCopy@12
_PiDevCfgResolveVariableKeyHandle@12
_PiDevCfgResolveVariableKeyValue@12
_PiDevCfgResolveVariableSwitchCase@12
_PiDevCfgSetDeviceRegProp@28
_PiDevCfgSetObjectProperty@44
_PiDevCfgSplitDriverConfigurationId@24
_PiDevCfgVerifyDeviceAllowed@8
_PiDevCfgVerifyFeatureScore@12
_PiDevCfgVerifyService@12
_PiDeviceDependencyInit@0
_PiDeviceRegistration@12
_PiDeviceRelationType@4
_PiDmAddCacheReferenceForObject@12
_PiDmAllocateGenericTableEntry@8
_PiDmCacheDataDecode@20
_PiDmCacheDataEncode@24
_PiDmCacheDataFree@4
_PiDmCmObjectMatchCallback@12
_PiDmCompareObjects@12
_PiDmEnumObjectsWithCallback@12
_PiDmFreeGenericTableEntry@8
_PiDmGetCacheKeys@12
_PiDmGetCachedKeyIndex@12
_PiDmGetCmObjectConstraintListFromCache@28
_PiDmGetCmObjectListFromCache@24
_PiDmGetObject@12
_PiDmGetObjectConstraintList@28
_PiDmGetObjectCount@4
_PiDmGetObjectList@24
_PiDmGetObjectListCallback@12
_PiDmGetObjectManagerForObjectType@4
_PiDmGetReferencedObjectFromProperty@28
_PiDmInit@0
_PiDmInitializeComparisonObject@12
_PiDmListAddList@16
_PiDmListAddObject@16
_PiDmListAddObjectWorker@20
_PiDmListEnumObjectsWithCallback@16
_PiDmListInit@4
_PiDmListInitEnumCallback@12
_PiDmListRemoveList@16
_PiDmListRemoveObject@16
_PiDmListRemoveObjectWorker@20
_PiDmListUpdateAggregationCountWorker@12
_PiDmLookupObject@8
_PiDmObjectAcquireExclusiveLock@4
_PiDmObjectCreate@12
_PiDmObjectGetAggregatedBooleanPropertyData@36
_PiDmObjectGetCachedCmProperty@28
_PiDmObjectGetCachedObjectProperty@36
_PiDmObjectGetCachedObjectPropertyData@32
_PiDmObjectGetCachedObjectReference@20
_PiDmObjectIsEnumerable@4
_PiDmObjectManagerInit@8
_PiDmObjectManagerPopulate@4
_PiDmObjectProcessPropertyChange@24
_PiDmObjectRelease@4
_PiDmObjectReleaseLock@4
_PiDmObjectUpdateCachedCmProperty@28
_PiDmObjectUpdateCachedObjectProperty@32
_PiDmPnpObjectMatchCallback@12
_PiDmRemoveCacheReferenceForObject@12
_PiDmaGuardInitialize@4
_PiDmaGuardProcessNewDeviceNode@4
_PiDmaGuardProcessPostRemove@12
_PiDmaGuardProcessPreAddDevice@8
_PiDmaGuardProcessRegistry@4
_PiDmaGuardQueueFlush@4
_PiDmaGuardQueueFree@4
_PiDmaGuardQueueInsertEntry@4
_PiDmaGuardQueueRemoveEntry@4
_PiDqActionDataCreate@16
_PiDqActionDataFree@4
_PiDqActionDataGetAllPropertiesInAllLanguages@28
_PiDqActionDataGetAllPropertiesInBestLanguage@32
_PiDqActionDataGetChangedProperties@40
_PiDqActionDataGetRequestedProperties@36
_PiDqAllocateGenericTableEntry@8
_PiDqCompareAddresses@12
_PiDqConvertObjectTypeToString@8
_PiDqConvertQueryFlagsToString@16
_PiDqConvertQueryTypeToString@8
_PiDqDeleteUserObject@12
_PiDqDeleteUserObjectFromLoadedHives@8
_PiDqDispatch@8
_PiDqEnumQueryObjectsCallback@12
_PiDqFreeGenericTableEntry@8
_PiDqGetObjectManagerForPnpObjectType@4
_PiDqGetPnpObjectType@4
_PiDqGetRelativeObjectRegPath@12
_PiDqGrowPropertyArray@12
_PiDqInit@0
_PiDqIrpCancel@8
_PiDqIrpComplete@16
_PiDqIrpPropertySet@4
_PiDqIrpQueryCreate@4
_PiDqIrpQueryGetResult@4
_PiDqObjectActionQueueEntryCreate@8
_PiDqObjectManagerEnumerateAndRegisterQuery@8
_PiDqObjectManagerHandleObjectEvent@8
_PiDqObjectManagerInit@8
_PiDqObjectManagerMakeInconsistent@4
_PiDqObjectManagerServiceActionQueue@4
_PiDqObjectManagerUnregisterQuery@8
_PiDqOpenObjectRegKey@36
_PiDqOpenUserObjectRegKey@32
_PiDqPnPGetObjectProperty@28
_PiDqPnPGetObjectPropertyInBestLocale@28
_PiDqPnPGetObjectPropertyKeys@24
_PiDqPnPGetObjectPropertyLocales@20
_PiDqPropertyCallback@20
_PiDqQueryActionQueueEntryCreate@16
_PiDqQueryActionQueueEntryFree@4
_PiDqQueryAddObjectToResultSet@8
_PiDqQueryAppendActionEntry@8
_PiDqQueryApplyObjectEvent@8
_PiDqQueryCompletePendedIrp@4
_PiDqQueryCreate@8
_PiDqQueryDeleteObjectFromResultSet@8
_PiDqQueryEnumObject@8
_PiDqQueryEvaluateFilter@12
_PiDqQueryFreeActiveData@4
_PiDqQueryGetNextIoctlInfo@16
_PiDqQueryGetObjectManager@4
_PiDqQueryLock@4
_PiDqQueryRelease@4
_PiDqQuerySerializeActionQueue@20
_PiDqQueryUnlock@4
_PiDqQueryValidateQueryData@4
_PiDqSameUserHive@12
_PiDqSerializationAlloc@12
_PiDqSerializationWrite@12
_PiDrvDbCreateNode@20
_PiDrvDbDestroyNode@4
_PiDrvDbEnumDriverStoreNodes@8
_PiDrvDbEnumNodes@8
_PiDrvDbFindNode@8
_PiDrvDbFindSystemFilePathToken@8
_PiDrvDbGetNodeSystemRoot@8
_PiDrvDbInit@4
_PiDrvDbLoadHive@16
_PiDrvDbLoadNode@8
_PiDrvDbLoadNodeWorkerCallback@4
_PiDrvDbMountNode@4
_PiDrvDbNodeActionCallback@24
_PiDrvDbOverlayCopyKeys@32
_PiDrvDbOverlayNodeHive@12
_PiDrvDbQuerySyncNodesUpdated@8
_PiDrvDbQuerySystemPathWin32@8
_PiDrvDbRegisterNode@16
_PiDrvDbRegisterNodeCallback@8
_PiDrvDbResolveFilePathKeyValues@16
_PiDrvDbResolveKeyFilePaths@4
_PiDrvDbResolveNodeFilePaths@8
_PiDrvDbResolveSystemFilePath@24
_PiDrvDbSetupNodeHive@8
_PiDrvDbSetupNodes@4
_PiDrvDbSuspendNodes@4
_PiDrvDbUnloadHive@8
_PiDrvDbUnloadNode@8
_PiDrvDbUnloadNodeDpcRoutine@16
_PiDrvDbUnloadNodeReset@4
_PiDrvDbUnloadNodeWaitWorkerCallback@4
_PiDrvDbUnloadNodeWorkerCallback@4
_PiDrvDbUnmountNode@4
_PiEnumerateDependentListEntry@12
_PiEnumerateProviderListEntry@12
_PiEventAllocatePendingEjectRelations@16
_PiEventAllocateVetoBuffer@4
_PiEventAreDeviceRelationsExcluded@4
_PiEventBuildPdoList@28
_PiEventFreeVetoBuffer@4
_PiEventRemovalPostSurpriseRemove@12
_PiFindDevInstMatch@20
_PiForEachDriverQueryRoutine@16
_PiGetDefaultMessageString@12
_PiGetDependentList@4
_PiGetDeviceDepth@8
_PiGetDeviceRegProperty@24
_PiGetDeviceRegistryProperty@24
_PiGetDmaAdapterFromBusInterface@12
_PiGetDriverImageDirectory@8
_PiGetDriverMutableStateDirectory@12
_PiGetProviderList@4
_PiGetRelatedDevice@16
_PiGetStateRootPath@16
_PiHotSwapGetDefaultBusRemovalPolicy@8
_PiHotSwapGetDetachableNode@8
_PiInitCacheGroupInformation@0
_PiInitFirmwareResources@4
_PiInitReleaseCachedGroupInformation@0
_PiInitializeDDB@12
_PiInitializeDDBCache@0
_PiInitializeDevice@4
_PiInvalidateSpeculativeRelations@8
_PiIommuAllocateExtension@12
_PiIommuBlockDevice@4
_PiIommuFreeExtension@4
_PiIommuGetInterface@8
_PiIommuIsDeviceSafeWhileConsoleLocked@4
_PiIommuUnblockDevice@4
_PiIommuValidateInterface@4
_PiIrpQueryRemoveDevice@8
_PiIsDriverBlocked@20
_PiIsHVCIEnabled@0
_PiIsOrderlyRemoval@4
_PiIsSurpriseRemoval@4
_PiKsrInitialize@0
_PiKsrNotifyInitialize@0
_PiLastGoodCopyKeyContents@12
_PiLastGoodRevertCopyCallback@16
_PiLastGoodRevertLastKnownDirectory@8
_PiListEntryToDependencyEdge@8
_PiLogSurpriseRemoveEvent@12
_PiLookupInDDB@16
_PiLookupInDDBCache@16
_PiMarkDeviceTreeForReenumeration@8
_PiMarkDeviceTreeForReenumerationWorker@8
_PiNormalizeDeviceText@8
_PiNotifyCiDriverBlocked@8
_PiOpenDirectoryWithRoot@16
_PiOpenDriverRedirectedStateKey@12
_PiOpenDriverRedirectedStateRootKey@8
_PiPagePathSetState@8
_PiPnpAddDeviceToPdoDeviceListEnumContext@8
_PiPnpFreePdoDeviceList@4
_PiPnpPdoDeviceListEnumCallback@8
_PiPnpRtlApplyMandatoryDeviceContainerFilters@20
_PiPnpRtlApplyMandatoryDeviceContainerFiltersCallback@12
_PiPnpRtlApplyMandatoryDeviceFilters@20
_PiPnpRtlApplyMandatoryDeviceInterfaceFilters@20
_PiPnpRtlApplyMandatoryFilters@24
_PiPnpRtlBeginOperation@4
_PiPnpRtlCacheObjectBaseKey@16
_PiPnpRtlCmActionCallback@24
_PiPnpRtlEndOperation@4
_PiPnpRtlEnsureObjectCached@8
_PiPnpRtlEnumDevicesCallback@12
_PiPnpRtlEnumeratorFilterCallback@16
_PiPnpRtlFreeContainerRemoveInfo@4
_PiPnpRtlFreeDeviceDeleteInfo@4
_PiPnpRtlFreeInstallerClassChangeInfo@4
_PiPnpRtlFreeInterfaceDeleteInfo@4
_PiPnpRtlFreePanelRemoveInfo@4
_PiPnpRtlGatherContainerRemoveInfo@12
_PiPnpRtlGatherDeviceDeleteInfo@8
_PiPnpRtlGatherInstallerClassChangeInfo@12
_PiPnpRtlGatherInterfaceDeleteInfo@8
_PiPnpRtlGatherPanelRemoveInfo@12
_PiPnpRtlGetCurrentOperation@4
_PiPnpRtlGetDeviceInterfaceEnabled@16
_PiPnpRtlGetDeviceNtPropertyRoutine@28
_PiPnpRtlGetDeviceRelatedDeviceRoutine@28
_PiPnpRtlGetDeviceRelationsList@28
_PiPnpRtlGetDeviceStatus@24
_PiPnpRtlGetFilteredDeviceInterfaceList@4
_PiPnpRtlGetFilteredDeviceList@4
_PiPnpRtlInit@4
_PiPnpRtlInterfaceFilterCallback@16
_PiPnpRtlIsDeviceEnumerableForUser@20
_PiPnpRtlIsDeviceValidForSession@20
_PiPnpRtlObjectActionCallback@24
_PiPnpRtlObjectEventCallback@20
_PiPnpRtlObjectEventCompareObjects@12
_PiPnpRtlObjectEventCreate@16
_PiPnpRtlObjectEventDispatch@4
_PiPnpRtlObjectEventRelease@4
_PiPnpRtlObjectEventWorker@20
_PiPnpRtlOperationAllocateGenericTableEntry@8
_PiPnpRtlOperationFreeGenericTableEntry@8
_PiPnpRtlPdoRaiseNtPlugPlayPropertyChangeEvent@8
_PiPnpRtlRegisterDriverMachineNodeCallback@8
_PiPnpRtlServiceFilterCallback@16
_PiPnpRtlSetDeviceRegProperty@32
_PiPnpRtlSetObjectProperty@40
_PiProcessAddBootDevices@4
_PiProcessCanceledRemoveForReset@16
_PiProcessClearDeviceProblem@4
_PiProcessDriverInstance@12
_PiProcessHaltDevice@4
_PiProcessNewDeviceNode@4
_PiProcessQueryAndCancelRemoval@28
_PiProcessQueryDeviceState@4
_PiProcessQueryRemoveNoFdo@4
_PiProcessReenumeration@4
_PiProcessRequeryDeviceState@4
_PiProcessResourceRequirementsChanged@4
_PiProcessSetDeviceProblem@4
_PiProcessStartSystemDevices@4
_PiProfileUpdateDeviceTree@0
_PiProfileUpdateDeviceTreeCallback@8
_PiProfileUpdateDeviceTreeWorker@4
_PiQueryAndAllocateBootResources@4
_PiQueryDeviceRelations@16
_PiQueryPowerDependencyRelations@4
_PiQueryPowerRelations@8
_PiQueryRemovableDeviceOverride@16
_PiQueryResourceRequirements@4
_PiQueueDeviceRequest@20
_PiRearrangeDeviceInstances@12
_PiRebalanceOptOut@4
_PiRegisterKernelSoftRestartNotification@16
_PiReleaseDDB@4
_PiRemoveDeferredSetInterfaceState@8
_PiResetProblemDevicesWorker@8
_PiRestartDevice@4
_PiRestartRemovalRelations@12
_PiSendTargetDeviceRemoveCanceledNotification@8
_PiSendTargetDeviceRemoveCompleteNotification@12
_PiSwAddPdoAssociation@12
_PiSwAllocMem@4
_PiSwAllocateGenericTableEntry@8
_PiSwBusRelationAdd@8
_PiSwBusRelationRemove@4
_PiSwBusRelationsCompareInstancePath@12
_PiSwCloseDescendants@4
_PiSwCloseDevice@4
_PiSwCompleteCreate@4
_PiSwDeviceCompareObjects@12
_PiSwDeviceCreate@4
_PiSwDeviceDereference@4
_PiSwDeviceFindInterfaceEntry@8
_PiSwDeviceFree@4
_PiSwDeviceInterfaceSetState@12
_PiSwDeviceInterfacesUpdateState@8
_PiSwDeviceMakeCompatibleIds@8
_PiSwDeviceOperationsAllowed@4
_PiSwDispatch@8
_PiSwDoesCreateChangesRequireReEnum@8
_PiSwFindBusRelations@4
_PiSwFindPdoAssociation@12
_PiSwFindSwDevice@4
_PiSwFreeGenericTableEntry@8
_PiSwFreeInterfaceList@4
_PiSwFreePdoAssociationsList@4
_PiSwGetChildPdo@8
_PiSwInit@0
_PiSwInstanceInfoFree@4
_PiSwInstanceInfoInit@8
_PiSwInterfaceCreate@16
_PiSwInterfaceFree@4
_PiSwIrpCancelStartCreate@8
_PiSwIrpCleanup@4
_PiSwIrpGetLifetime@4
_PiSwIrpInterfacePropertySet@4
_PiSwIrpInterfaceRegister@4
_PiSwIrpInterfaceSetState@4
_PiSwIrpPropertySet@4
_PiSwIrpSetLifetime@4
_PiSwIrpStartCreate@4
_PiSwIrpStartCreateWorker@8
_PiSwIsValidPnpId@8
_PiSwLock@0
_PiSwMakePdoInactive@4
_PiSwPdoAssociationFree@4
_PiSwPdoDriverEntry@8
_PiSwPdoPnPDispatch@8
_PiSwPnPInfoFree@4
_PiSwPnPInfoInit@8
_PiSwProcessParentRemoveIrp@4
_PiSwProcessParentStartIrp@4
_PiSwProcessRemove@8
_PiSwPropertySet@16
_PiSwQueuedCreateInfoCreate@8
_PiSwQueuedCreateInfoFree@4
_PiSwRemovePdoAssociation@8
_PiSwStartCreate@52
_PiSwStopDestroy@12
_PiSwUnassociateDeviceObject@4
_PiSwUnlock@0
_PiSwUpdateArrayProperties@16
_PiSwValidateCreateData@4
_PiSwValidatePropertyArray@8
_PiUEventAllocMem@4
_PiUEventApplyAdditionalFilters@8
_PiUEventBroadcastDevnodesChangedEvent@4
_PiUEventBroadcastEventWorker@4
_PiUEventBroadcastHardwareProfilesChangedEvent@8
_PiUEventBroadcastPortsChangedEvent@12
_PiUEventBroadcastVolumesChangedEvent@4
_PiUEventCacheObjectProperties@4
_PiUEventCoalesceBroadcastEvents@4
_PiUEventCopyEventData@12
_PiUEventDequeuePendingEventWorker@12
_PiUEventDereferenceEventEntry@4
_PiUEventDeviceNeedsInstall@8
_PiUEventDispatch@8
_PiUEventEstimateRequiredClientBufferSize@4
_PiUEventFreeClientRegistrationContext@8
_PiUEventFreeEventEntry@4
_PiUEventGetDeviceInstanceIdFromUserHandle@12
_PiUEventHandleGetEvent@20
_PiUEventHandleIoctl@4
_PiUEventHandleRegistration@20
_PiUEventHandleUnregisterClient@4
_PiUEventHandleVetoEvent@20
_PiUEventHashGuidIntoBucket@4
_PiUEventHashStringIntoBucket@4
_PiUEventInit@4
_PiUEventInitClientRegistrationContext@0
_PiUEventInitializeVeto@4
_PiUEventIsDeviceEventVetoable@4
_PiUEventMetaNotificationCallback@24
_PiUEventNotifyClient@8
_PiUEventNotifyClientPendingEvent@4
_PiUEventNotifyDeviceInstanceChange@4
_PiUEventNotifyDeviceInstancePropertyChange@4
_PiUEventNotifyDeviceInterfaceChange@4
_PiUEventNotifyTargetDeviceChange@4
_PiUEventNotifyUserMode@4
_PiUEventProcessBroadcastNotifications@4
_PiUEventProcessEventWorker@4
_PiUEventProcessNotifyEventEntry@4
_PiUEventQueueBroadcastEventEntry@4
_PiUEventQueuePendingEvent@8
_PiUEventReferenceEventEntry@4
_PiUEventSendDeviceInstallNotification@4
_PiUEventShouldQueueEvent@4
_PiUpdateDevicePanel@12
_PiUpdateDeviceResourceLists@4
_PiUpdateDriverDBCache@20
_PiUpdateGuestAssignedState@8
_PiValidateEjectionRequest@8
_PiValidatePowerRelations@4
_PidNodeCompare@8
_PipAddBindingId@8
_PipAddDependencyEdgeBetweenNodes@12
_PipAddDependentsToRebuildPowerRelationsQueue@4
_PipAddDevicesToBootDriver@4
_PipAddDevicesToBootDriverWorker@12
_PipAddRequestToEdge@8
_PipAddtoRebuildPowerRelationsQueue@4
_PipAllocateDeviceNode@8
_PipApplyFunctionToServiceInstances@28
_PipAreDriversLoaded@4
_PipAreDriversLoadedWorker@8
_PipAttemptDependentStart@4
_PipAttemptDependentsStart@4
_PipCallDriverAddDevice@8
_PipCallDriverAddDeviceQueryRoutine@24
_PipCallbackHasDeviceOverrides@8
_PipCanEnableInterfaces@4
_PipChangeDeviceObjectFromRegistryProperties@20
_PipCheckComputerSupported@4
_PipCheckDependencies@4
_PipCheckForDenyExecute@4
_PipCheckForUnsatisfiedDependencies@8
_PipCheckSystemFirmwareUpdated@4
_PipCheckValidNewDependencyEdge@8
_PipClearDevNodeFlags@8
_PipClearDevNodeProblem@4
_PipClearDevNodeUserFlags@8
_PipCommitPendingOsExtensionResource@16
_PipCommitPendingService@16
_PipConvertResolutionsToReservations@4
_PipCreateComputerId@20
_PipCreateDependencyNode@4
_PipCreateEntry@4
_PipCreateNewDependencyEdge@12
_PipCriticalDeviceWaitCallback@12
_PipCslCreateCallback@4
_PipCslStateChangeCallback@12
_PipCslUpdateState@4
_PipDeleteAllDependencyRelations@4
_PipDeleteBindingId@8
_PipDeleteBindingIds@4
_PipDeleteDependencyNode@4
_PipDependencyCopyEdge@8
_PipDependencyGraphDepthFirstSearch@16
_PipDereferenceDependencyNode@4
_PipDeviceObjectListAdd@16
_PipDeviceObjectListElementAt@20
_PipDeviceObjectListIndexOf@16
_PipDeviceObjectListRemove@8
_PipDeviceRemovalCheckDeviceNodeState@12
_PipDgqFreeEntry@4
_PipDgqInsertEntry@4
_PipDmaGuardBlockAddDevice@4
_PipDmgConsoleUnlockCallback@0
_PipDmgEnforceEnumerationPolicy@4
_PipDmgFlushQueueAndRestartDevices@0
_PipDmgGetDeviceDmarPolicy@4
_PipDmgGetDriverDmarCompatLevel@4
_PipDmgInitParseGroupPolicy@4
_PipDmgInitPhaseTwo@0
_PipDmgInitPhaseZero@0
_PipDmgInitReadGroupPolicy@0
_PipDmgIsIommuSecurityEnabled@0
_PipDmgReevaluateQueue@0
_PipDmgRequestRestartOnBlockedDevice@4
_PipDmgSaveDeviceDmarPolicy@12
_PipEnumerateCompleted@4
_PipEnumerateDevice@12
_PipEnumeratePersistedMemory@16
_PipEventRemovalCheckOpenHandles@12
_PipFindDependencyNodePath@16
_PipFindDeviceOverrideEntry@16
_PipForAllChildDeviceNodes@12
_PipForAllDeviceNodesCallback@8
_PipForDeviceNodeSubtree@12
_PipFreeBindingRequestEntry@4
_PipFreeDependencyEdge@8
_PipFreeGroupTree@4
_PipGenerateContainerID@20
_PipGetDeviceObjectLocation@12
_PipGetDriverKsrGuid@8
_PipGetDriverKsrGuidRegistryValue@8
_PipGetDriverTagPriority@4
_PipGetPersistentMemory@20
_PipGetRegistryDwordWithFallback@24
_PipGetRegistrySecurityWithFallback@20
_PipGrowDeviceObjectList@4
_PipHardwareConfigActivateService@4
_PipHardwareConfigClearStartOverrideCallback@16
_PipHardwareConfigClearStartOverrides@4
_PipHardwareConfigExists@8
_PipHardwareConfigGetIndex@8
_PipHardwareConfigGetLastUseTime@8
_PipHardwareConfigInit@4
_PipHardwareConfigOpenKey@12
_PipHardwareConfigTriggerRespecialize@4
_PipInitComputerIds@4
_PipInitDeviceOverrideCache@0
_PipInitializeCoreDriversAndElam@4
_PipInitializeCoreDriversByGroup@8
_PipInitializeDriverDependentDLLs@8
_PipInitializeEarlyLaunchDrivers@4
_PipInsertDriverList@8
_PipIommuRetrieveDeviceId@8
_PipIommuValidateDeviceId@12
_PipIsDevNodeDNStarted@4
_PipIsDevNodeEffectivelyRemoved@4
_PipIsDeviceReadyForPowerRelations@4
_PipIsProblemReadonly@8
_PipIsProviderStarted@4
_PipKsrCallback@12
_PipKsrIsNotificationRequired@8
_PipKsrNotifyDrivers@4
_PipKsrUpdateNotifyEntry@8
_PipLinkDeviceObjectAndDependencyNode@8
_PipLookupGroupName@8
_PipMakeGloballyUniqueId@12
_PipMergeDependencyEdgeList@12
_PipMergeDependencyEdges@8
_PipMergeDependencyNodes@8
_PipMergeDependencyTypes@8
_PipMigrateCleanServiceCallback@16
_PipMigratePnpState@0
_PipMigrateResetDeviceCallback@16
_PipMoveListEntries@8
_PipNotifyDependenciesChanged@8
_PipNotifyDeviceDependencyList@8
_PipOpenServiceEnumKeys@20
_PipPendingServicesFilter@16
_PipPnPDriverEntry@8
_PipProcessDevNodeTree@28
_PipProcessEnumeratedChildDevice@8
_PipProcessPendingObjects@20
_PipProcessPendingOsExtensionResources@0
_PipProcessPendingServices@0
_PipProcessQueryRemovalInKernelMode@24
_PipProcessRebuildPowerRelationsQueue@0
_PipProcessRestartPhase1@12
_PipProcessRestartPhase2@4
_PipProcessStartPhase1@12
_PipProcessStartPhase2@4
_PipProcessStartPhase3@8
_PipQueryBindingResolution@4
_PipRecordOpenHandleVeto@20
_PipReferenceDependencyNode@4
_PipRemoveDevicesInRelationList@4
_PipResetDevice@8
_PipResetDevices@4
_PipResetMatchingFilteredDevices@12
_PipRestoreDevNodeState@4
_PipSendGuestAssignedNotification@8
_PipSendQueryRemoveIrpAndCheckOpenHandles@24
_PipSendTargetDeviceQueryRemoveNotification@16
_PipServiceInstanceToDeviceInstance@24
_PipSetDependency@8
_PipSetDevNodeFlags@8
_PipSetDevNodeProblem@12
_PipSetDevNodeState@12
_PipSetDevNodeUserFlags@8
_PipSetGuestAssignedProperty@8
_PipSmBiosFindStruct@16
_PipSmBiosGetString@20
_PipSortDeviceObjectList@4
_PipSortDevicesByOrdinal
_PipUnlinkDeviceObjectAndDependencyNode@8
_PipUnloadEarlyLaunchDrivers@4
_PipUpdateDeviceProducts@4
_PipUpdatePostStartCharacteristics@4
_PipUpdateSetupInProgress@4
_PipUpdateSetupInProgressCallback@4
_PipUpdateSetupInProgressNotify@8
_PipUpdateSetupOobeCompleteWnfCallback@24
_PipValidateRegistryString@4
_PipVisitDeviceObjectListEntry@12
_PipWaitCriticalDevices@4
_PlugPlayGetDeviceProperty@24
_PlugPlayGetDeviceRelations@24
_PlugPlayGetDeviceStatus@20
_PlugPlayGetRelatedDevice@24
_PnpAcquireDependencyRelationsLock@4
_PnpAddVetoInformation@12
_PnpAllocateCriticalMemory@16
_PnpAllocateDeviceInstancePath@8
_PnpAllocateGenericTableEntry@8
_PnpAllocateMultiSZ@16
_PnpAllocatePWSTR@16
_PnpAllocateResources@16
_PnpAllocateWatchdog@0
_PnpAssignResourcesToDevices@12
_PnpAsynchronousCall@16
_PnpBootDeviceWait@16
_PnpBootPhaseComplete@0
_PnpBugcheckPowerTimeout@4
_PnpBuildCmResourceList@8
_PnpBuildCmResourceLists@12
_PnpBuildRemovalRelationList@16
_PnpBuildUnsafeRemovalDeviceList@12
_PnpBusTypeGuidGet@8
_PnpBusTypeGuidGetIndex@4
_PnpBusTypeGuidInitialize@0
_PnpCallAddDevice@16
_PnpCallDriverEntry@8
_PnpCallDriverQueryServiceHelper@40
_PnpCancelDeviceActionRequest@4
_PnpCancelRemoveLockedDeviceNode@4
_PnpCancelRemoveOnHungDevices@20
_PnpCancelStopDeviceNode@4
_PnpCancelStopDeviceSubtree@4
_PnpCancelWatchdog@4
_PnpChainDereferenceComplete@8
_PnpCheckDeviceIdsChanged@24
_PnpCheckDriverDependencies@12
_PnpCheckForActiveDependencies@8
_PnpCheckPossibleBootStartDriver@4
_PnpCleanupDeviceRegistryValues@4
_PnpClearDeviceSurpriseRemoveOk@4
_PnpClearDeviceTemporaryProperties@8
_PnpCmResourcesToIoResources@12
_PnpCollectOpenHandles@12
_PnpCollectOpenHandlesCallBack@20
_PnpCompareInstancePath@12
_PnpCompareInterruptInformation@12
_PnpCompareMultiSz@12
_PnpCompareResourceRequestPriority
_PnpCompileDeviceInstancePaths@20
_PnpCompleteDeviceEvent@8
_PnpCompleteSystemStartProcess@0
_PnpCompletionRoutine@12
_PnpConcatPWSTR
_PnpConcatenateUnicodeStrings@12
_PnpConvertDevpropcompkeyArrayToString@20
_PnpCopyDevProperty@12
_PnpCopyDevPropertyArray@20
_PnpCopyDeviceInstancePath@8
_PnpCopyResourceList@4
_PnpCreateDeviceEventEntry@4
_PnpCreateResourceRequest@4
_PnpDeferNotification@4
_PnpDelayedRemoveWorker@4
_PnpDeleteAllDependencyRelations@4
_PnpDeleteDeviceActionRequest@4
_PnpDeleteDeviceInterfaces@4
_PnpDeleteLockedDeviceNode@24
_PnpDeleteLockedDeviceNodes@32
_PnpDequeuePendingSurpriseRemoval@4
_PnpDereferenceNotify@4
_PnpDetermineResourceListSize@4
_PnpDeviceActionWorker@4
_PnpDeviceCompletionProcessCompletedRequest@4
_PnpDeviceCompletionProcessCompletedRequests@12
_PnpDeviceCompletionQueueAddCompletedRequest@8
_PnpDeviceCompletionQueueAddDispatchedRequest@8
_PnpDeviceCompletionQueueDispatchedEntryCompleted@8
_PnpDeviceCompletionQueueGetCompletedRequest@4
_PnpDeviceCompletionQueueInitialize@4
_PnpDeviceCompletionQueueIsEmpty@4
_PnpDeviceCompletionQueueRemoveCompletedRequest@8
_PnpDeviceCompletionRequestCreate@12
_PnpDeviceCompletionRequestDestroy@4
_PnpDeviceCompletionRequestDestroyWorkItem@12
_PnpDeviceCompletionRoutine@12
_PnpDeviceEventWorker@4
_PnpDeviceObjectFromDeviceInstanceWithTag@8
_PnpDeviceObjectToDeviceInstance@12
_PnpDiagInitialize@0
_PnpDiagRundownForEachDevice@8
_PnpDiagRundownParentDevNodeForEachDevice@8
_PnpDiagRundownParentPdoForEachDevice@8
_PnpDiagRundownRegisterCallback@36
_PnpDiagnosticCompletionRoutine@12
_PnpDiagnosticTrace@12
_PnpDiagnosticTraceAppVeto@20
_PnpDiagnosticTraceDeviceOperation@20
_PnpDiagnosticTraceDriverFullInfo@20
_PnpDiagnosticTraceDriverInitPhaseStart@4
_PnpDiagnosticTraceElamDecision@16
_PnpDiagnosticTraceElamStatus@8
_PnpDiagnosticTraceObject@8
_PnpDiagnosticTraceObjectWithStatus@12
_PnpDisableDevice@8
_PnpDisableDeviceInterfaces@4
_PnpDisableUserModeNotifications@8
_PnpDisableWatchdog@4
_PnpDoPolicyCheck@8
_PnpDriverLoadingFailed@8
_PnpDuplicateUnicodeString@8
_PnpEarlyLaunchImageNotificationPostProcess@20
_PnpEarlyLaunchImageNotificationPreProcess@20
_PnpEarlyLaunchStatusNotificationPreProcess@20
_PnpEnableWatchdog@8
_PnpFilterResourceRequirementsList@16
_PnpFinalizeVetoedRemove@12
_PnpFindAlternateStringData@16
_PnpFindBestConfiguration@12
_PnpFindBestConfigurationWorker@16
_PnpFindMountableDevice@4
_PnpFindRebalanceCandidates@24
_PnpFixupID@20
_PnpFreeDevProperty@8
_PnpFreeDevPropertyArray@12
_PnpFreeDeviceInstancePath@4
_PnpFreeGenericTableEntry@8
_PnpFreeInterruptInformation@4
_PnpFreeResourceRequirementsForAssignTable@8
_PnpFreeSystemPdoList@4
_PnpFreeUnicodeStringList@8
_PnpFreeVetoInformation@4
_PnpFreeWatchdog@4
_PnpGenerateDeviceIdsHash@12
_PnpGetCallerSessionId@4
_PnpGetDeviceDependencyList@20
_PnpGetDeviceInstanceCsConfigFlags@12
_PnpGetDeviceInstancePropertyData@32
_PnpGetDeviceInstanceRegistryValue@20
_PnpGetDeviceInterfacePropertyData@32
_PnpGetDeviceLocationStrings@12
_PnpGetDevicePropertyData@32
_PnpGetDeviceResourcesFromRegistry@20
_PnpGetInterruptInformation@16
_PnpGetMultiSzLength@12
_PnpGetObjectProperty@44
_PnpGetProcessCommandLine@4
_PnpGetRegistryDword@12
_PnpGetRelatedTargetDevice@8
_PnpGetResourceRequirementsForAssignTable@12
_PnpGetServiceStartType@12
_PnpGetStableSystemBootTime@4
_PnpGetSystemPdoList@8
_PnpHandleEnumerateHandlesAgainstDeviceObject@12
_PnpHandleEnumerateHandlesAgainstPdoStack@12
_PnpHandleProcessWalkWorker@16
_PnpHardwareConfigCreateBootDriverFlags@8
_PnpInitializeBootStartDriver@36
_PnpInitializeDeviceActions@0
_PnpInitializeDeviceEvents@0
_PnpInitializeDeviceReferenceTable@0
_PnpInitializeLegacyBusInformationTable@0
_PnpInitializeNotification@0
_PnpInitializeNotifyEntry@24
_PnpInitializePnpWatchdogs@0
_PnpInitializeProcessor@4
_PnpInitializeSessionId@12
_PnpInitializeTargetDeviceRemoveEvent@52
_PnpInitializeTriageBlock@4
_PnpInsertEventInQueue@4
_PnpInvalidateRelationsInList@16
_PnpIrpDeviceEnumerated@4
_PnpIrpQueryID@12
_PnpIsAnyDeviceInUse@12
_PnpIsBeingRemovedSafely@8
_PnpIsChainDereferenced@20
_PnpIsDeviceInstanceEnabled@12
_PnpIsDuplicateDevice@16
_PnpIsLegacyDriver@4
_PnpIsNullGuid@4
_PnpIsNullGuidString@4
_PnpIsRangeWithin@8
_PnpIsSafeToExamineUserModeTeb@0
_PnpIsValidGuidString@4
_PnpIsWatchdogBugcheckEnabled@0
_PnpLoadBootFilterDriver@16
_PnpLockDeviceActionQueue@0
_PnpLockMountableDevice@4
_PnpLogActionQueueEvent@16
_PnpLogDeviceConflictingResource@8
_PnpLogDuplicateDevice@8
_PnpLogEvent@20
_PnpLogVetoInformation@8
_PnpLogVetoedRemove@12
_PnpLookupArbitersNewResources@24
_PnpMapDeviceObjectToDeviceInstance@8
_PnpMarkDeviceForRemove@12
_PnpMarkHalDeviceNode@0
_PnpMergeFilteredResourceRequirementsList@12
_PnpMultiSzContainsString@12
_PnpNeedToReleaseBootResources@12
_PnpNewDeviceNodeDependencyCheck@4
_PnpNotifyDeviceClassChange@12
_PnpNotifyDriverCallback@12
_PnpNotifyEarlyLaunchImageLoad@8
_PnpNotifyEarlyLaunchStatusUpdate@4
_PnpNotifyHwProfileChange@12
_PnpNotifyTargetDeviceChange@16
_PnpNotifyUserModeDeviceRemoval@24
_PnpOpenCCSPnpRegKey@8
_PnpOpenFirstMatchingSubKey@24
_PnpOrphanNotification@4
_PnpPrepareDriverLoading@20
_PnpProcessAssignResources@12
_PnpProcessAssignResourcesWorker@8
_PnpProcessCompletedEject@4
_PnpProcessCustomDeviceEvent@4
_PnpProcessDeferredRegistrations@0
_PnpProcessDependencyRelations@20
_PnpProcessQueryRemoveAndEject@4
_PnpProcessRebalance@4
_PnpProcessRelation@20
_PnpProcessTargetDeviceEvent@4
_PnpProfileUpdateHardwareProfile@4
_PnpQueryAndSaveDeviceNodeCapabilities@4
_PnpQueryBusInformation@4
_PnpQueryDeviceID@12
_PnpQueryDeviceRelations@16
_PnpQueryDeviceText@16
_PnpQueryID@16
_PnpQueryInterface@24
_PnpQueryRebalance@24
_PnpQueryRebalanceWorker@24
_PnpQueryRemoveLockedDeviceNode@16
_PnpQueryStopDeviceNode@8
_PnpQueryWatchdogTimeout@4
_PnpQueryWatchdogTimeoutConfiguration@4
_PnpQueuePendingEject@4
_PnpQueuePendingSurpriseRemoval@16
_PnpQueueQueryAndRemoveEvent@24
_PnpReadDeviceConfiguration@16
_PnpReallocateResources@4
_PnpRebalance@16
_PnpRecordBlackbox@8
_PnpRecordBlackboxDelayedRemoveWorkerInformation@4
_PnpRecordBlackboxDeviceCompletionQueueInformation@4
_PnpRecordBlackboxPnpEventInformation@16
_PnpRecordBlackboxPnpEventWorkerInformation@4
_PnpRegMultiSzToUnicodeStrings@12
_PnpRegSzToString@16
_PnpRegistryValueExists@8
_PnpReleaseBootResourcesForFilteredRequirements@4
_PnpReleaseDependencyRelationsLock@0
_PnpReleaseResourcesInternal@4
_PnpRemoveDeviceActionRequestFromQueue@4
_PnpRemoveDeviceActionRequests@4
_PnpRemoveEventFromQueue@4
_PnpRemoveLockedDeviceNode@12
_PnpReplacePartitionUnit@4
_PnpReportTargetDeviceChangeAsyncWorker@4
_PnpRequestDeviceAction@28
_PnpRequestDeviceEjectExWorker@4
_PnpRequestDeviceRemoval@16
_PnpRequestDeviceRemovalWorker@20
_PnpRequestHwProfileChangeNotification@16
_PnpResizeTargetDeviceBlock@8
_PnpRestartDeviceNode@4
_PnpRestoreResourcesInternal@4
_PnpSaveDeviceCapabilities@12
_PnpSelectFirstConfiguration@16
_PnpSendIrp@20
_PnpSerializeBoot@0
_PnpSetBlockedDriverEvent@4
_PnpSetCustomTargetEvent@24
_PnpSetDeviceAffinityThread@8
_PnpSetDeviceClassChange@12
_PnpSetDeviceInstancePropertyChangeEvent@4
_PnpSetDeviceInstancePropertyChangeEventFromDeviceInstance@4
_PnpSetDeviceInstanceRemovalEvent@4
_PnpSetDeviceInstanceStartedEvent@4
_PnpSetDeviceInstanceStartedEventFromDeviceInstance@4
_PnpSetDeviceInterfacePropertyData@28
_PnpSetDevicePropertyData@28
_PnpSetDeviceRemovalSafe@12
_PnpSetHwProfileChangeEvent@20
_PnpSetInterruptInformation@12
_PnpSetInvalidIDEvent@4
_PnpSetPlugPlayEvent@8
_PnpSetPowerVetoEvent@24
_PnpSetRegistryDword@12
_PnpSetRegistryRequirementsList@12
_PnpSetRegistryResourceList@12
_PnpSetTargetDeviceRemove@56
_PnpShutdownDevices@0
_PnpStartDevice@12
_PnpStartDeviceNode@12
_PnpStartedDeviceNodeDependencyCheck@4
_PnpStopDeviceSubtree@4
_PnpStringFromGuid@12
_PnpStringToDwordValue@8
_PnpSurpriseFailUnsafeDmaDevices@0
_PnpSurpriseRemoveLockedDeviceNode@12
_PnpSurpriseRemovedDeviceNodeDependencyCheck@4
_PnpSynchronizeDeviceEventQueue@0
_PnpTraceClearDevNodeProblem@16
_PnpTraceDeviceConfig@72
_PnpTraceDeviceRemovalForResetComplete@8
_PnpTraceDeviceRemoveProcessVeto@12
_PnpTraceDockDeviceEnumeration@8
_PnpTraceDriverBlocked@16
_PnpTraceInitialize@0
_PnpTraceInterruptConnection@4
_PnpTraceIommuDeviceProperties@8
_PnpTraceRebalanceResult@12
_PnpTraceRequestDeviceRemovalForReset@12
_PnpTraceSetDevNodeProblem@28
_PnpTraceStartDevice@12
_PnpTrackQueryRemoveDevices@8
_PnpUnicodeStringToWstr@12
_PnpUnicodeStringToWstrFree@8
_PnpUnlinkDeviceRemovalRelations@12
_PnpUnloadAttachedDriver@4
_PnpUnlockDeviceActionQueue@0
_PnpUnlockMountableDevice@4
_PnpUnregisterPlugPlayNotification@8
_PnpUpdateExtensionFlags@20
_PnpUpdateRebootRequiredReason@20
_PnpValidateMultiSz@8
_PnpValidateMultiSzData@8
_PnpValidateRegistryDword@4
_PnpValidateRegistryMultiSz@4
_PnpValidateRegistryString@4
_PnpValidateRegistryValue@4
_PnpWaitForBootDevicesDeleted@0
_PnpWaitForDevicesToStart@0
_PnpWaitForEmptyDeviceActionQueue@0
_PnpWaitForEmptyDeviceEventQueue@0
_PnpWatchdogBugcheck@4
_PnpWatchdogBugcheckConfigure@4
_PnpWatchdogEtwWrite@8
_PnpWatchdogExtractTriageInformation@20
_PnpWatchdogGetElapsedTime@4
_PnpWatchdogTimerAllocate@4
_PnpWatchdogWorkItem@4
_PnprAddDeviceResources@8
_PnprAddMemoryResources@8
_PnprAddProcessorResources@16
_PnprAllocateMappingReserves@12
_PnprCollectResources@8
_PnprCompleteWake@0
_PnprCopyReservedMapping@0
_PnprEndMirroring@4
_PnprFreeMappingReserve@4
_PnprGetMillisecondCounter@4
_PnprGetPageDestination@12
_PnprGetPluginDriverImagePath@4
_PnprGetStackLimits@8
_PnprIdentifyUnits@16
_PnprInitializeMappingReserve@8
_PnprInitiateReplaceOperation@0
_PnprIsMemoryDevice@8
_PnprIsProcessorDevice@16
_PnprLegacyDeviceDriversPresent@0
_PnprLoadPluginDriver@8
_PnprLockPagesForReplace@0
_PnprLogFailureEvent@12
_PnprLogStartEvent@8
_PnprLogSuccessEvent@0
_PnprMapPhysicalPages@20
_PnprMapTargetSparePhysicalPages@28
_PnprMarkOrMirrorPages@20
_PnprMirrorMarkedPages@0
_PnprMirrorPhysicalMemory@16
_PnprMmAddRange@20
_PnprMmConstruct@8
_PnprMmFree@4
_PnprQueryReplaceFeatures@8
_PnprQuiesce@0
_PnprQuiesceDevices@4
_PnprQuiesceProcessorDpc@16
_PnprQuiesceProcessors@0
_PnprQuiesceWorker@4
_PnprRecopyAddress@8
_PnprRecopyMappingReserve@4
_PnprRecopyMirrorPages@0
_PnprReplaceStart@0
_PnprStartMirroring@0
_PnprSwap@0
_PnprSwapFinalize@0
_PnprUnlockPagesForReplace@0
_PnprWakeDevices@4
_PnprWakeProcessors@0
_PoAllProcessorsDeepIdle@0
_PoArmStopWatchCollection@4
_PoBlockConsoleSwitch@4
_PoBroadcastSystemState@4
_PoCallDriver@8
_PoCancelDeviceNotify@4
_PoCaptureReasonContext@24
_PoClearBroadcast@0
_PoClearPowerRequest@8
_PoClearTransitionMarker@0
_PoCopyDeepIdleMask@4
_PoCpuIdledSinceLastCallImprecise@8
_PoCreatePowerRequest@12
_PoCreateThermalRequest@20
_PoDeletePowerRequest@4
_PoDeleteThermalRequest@4
_PoDestroyReasonContext@4
_PoDeviceAcquireIrp@12
_PoDeviceReleaseIrp@12
_PoDiagCaptureUsermodeStack@0
_PoDiagFreeUsermodeStack@4
_PoDiagTraceDeviceRundown@16
_PoDiagTraceDirectedDripsCandidateDevice@4
_PoDiagTraceIRTimerSleepStudyRundown@12
_PoDirectedDripsClearDeviceFlags@8
_PoDirectedDripsNotifyPagingDeviceUsage@8
_PoDirectedDripsSetDeviceFlags@8
_PoDisableSleepStates@12
_PoEnableCriticalShutdown@0
_PoEndDeviceBusy@4
_PoEndPartitionReplace@8
_PoEndPowerStateTasks@4
_PoEnergyContextCleanup@4
_PoEnergyContextInitialize@4
_PoEnergyContextStart@4
_PoEnergyContextUpdateComponentPower@16
_PoEnergyEstimationEnabled@0
_PoExecuteIdleCheck@8
_PoExecutePerfCheck@0
_PoFxAbandonDevice@4
_PoFxActivateComponent@12
_PoFxActivateDevice@4
_PoFxActivateDeviceForSystemTransition@8
_PoFxAddComponentRelation@16
_PoFxCompleteDevicePowerNotRequired@4
_PoFxCompleteDirectedPowerDown@4
_PoFxCompleteIdleCondition@8
_PoFxCompleteIdleState@8
_PoFxEnableDStateReporting@8
_PoFxIdleComponent@12
_PoFxIdleDevice@4
_PoFxInitPowerManagement@0
_PoFxIssueComponentPerfStateChange@20
_PoFxIssueComponentPerfStateChangeMultiple@24
_PoFxNotifySurprisePowerOn@4
_PoFxPlatformRequestHandler@4
_PoFxPowerControl@28
_PoFxPowerOnCrashdumpDevice@8
_PoFxPrepareDevice@8
_PoFxProcessorNotification@12
_PoFxQueryCurrentComponentPerfState@20
_PoFxRegisterComponentPerfStates@28
_PoFxRegisterCoreDevice@12
_PoFxRegisterCrashdumpDevice@4
_PoFxRegisterDebugger@0
_PoFxRegisterDevice@12
_PoFxRegisterDripsWatchdogCallback@16
_PoFxRegisterPlugin@8
_PoFxRegisterPluginEx@16
_PoFxRegisterPrimaryDevice@12
_PoFxRemoveComponentRelation@16
_PoFxReportDevicePoweredOn@4
_PoFxSendSystemLatencyUpdate@0
_PoFxSetComponentLatency@16
_PoFxSetComponentResidency@16
_PoFxSetComponentWake@12
_PoFxSetDeviceIdleTimeout@12
_PoFxSetTargetDripsDevicePowerState@8
_PoFxStartDevicePowerManagement@4
_PoFxSystemLatencyNotify@8
_PoFxUnregisterDevice@4
_PoGetFrequencyBucket@4
_PoGetIdleTimes@12
_PoGetLightestSystemStateForEject@16
_PoGetPerfStateAndParkingInfo@16
_PoGetProcessorIdleAccounting@4
_PoGetRequester@12
_PoGetSystemWake@4
_PoGetThermalRequestSupport@8
_PoHandleIrp@8
_PoInitDriverServices@0
_PoInitHiberServices@4
_PoInitSystem@8
_PoInitializeBroadcast@4
_PoInitializeStopWatch@8
_PoInitiateProcessorWake@4
_PoIsArmedStopWatchCollection@4
_PoIsInitializedStopWatch@4
_PoIsRunningStopWatch@4
_PoIssueCoalescingNotification@12
_PoLatencySensitivityHint@4
_PoNotifySystemTimeSet@12
_PoPauseStopWatch@4
_PoPowerOffMonitor@0
_PoQueryProcessEnergyTrackingState@8
_PoQueryStopWatch@16
_PoQueryWatchdogTime@8
_PoQueueShutdownWorkItem@4
_PoReenableSleepStates@4
_PoRegisterCoalescingCallback@16
_PoRegisterDeviceForIdleDetection@16
_PoRegisterDeviceNotify@24
_PoRegisterPowerSettingCallback@20
_PoRegisterSystemState@8
_PoRequestPowerIrp@24
_PoRequestShutdownEvent@4
_PoResetStopWatch@4
_PoRundownSystemTimer@24
_PoSessionBuiltinPanelState@8
_PoSessionEngagementUpdate@8
_PoSessionPowerControl@12
_PoSetDeviceBusyEx@4
_PoSetFixedWakeSource@4
_PoSetHiberRange@20
_PoSetPowerButtonHoldState@4
_PoSetPowerRequest@8
_PoSetPowerState@12
_PoSetProcessEnergyTrackingState@8
_PoSetProcessorQoS@8
_PoSetSystemState@4
_PoSetSystemWake@4
_PoSetSystemWakeDevice@4
_PoSetThermalActiveCooling@8
_PoSetThermalPassiveCooling@8
_PoSetUserPresent@4
_PoShutdownBugCheck@24
_PoStartDeviceBusy@4
_PoStartNextPowerIrp@4
_PoStartPartitionReplace@8
_PoStartPowerStateTasks@4
_PoStartStopWatch@4
_PoStoreDiagnosticContext@16
_PoStoreRequester@16
_PoThermalCounterSetCallback@12
_PoTraceDynamicTickDisabled@0
_PoTraceForceIdleReset@4
_PoTraceForceIdleStateChange@8
_PoTraceSystemTimerResolution@8
_PoTraceSystemTimerResolutionKernel@12
_PoTraceSystemTimerResolutionUpdate@4
_PoTtmInitiatePowerStateTransition@8
_PoUnarmStopWatchCollection@4
_PoUnblockConsoleSwitch@8
_PoUninitializeStopWatch@4
_PoUnregisterCoalescingCallback@4
_PoUnregisterPowerSettingCallback@4
_PoUnregisterSystemState@4
_PoUserShutdownCancelled@0
_PoUserShutdownInitiated@0
_PoVolumeDevice@4
_PopAccountBatteryEnergyChange@4
_PopAccountCbEnergyChange@0
_PopAccumulateNonActivatedCpuTime@12
_PopAcquireAdaptiveLock@4
_PopAcquireAwaymodeLock@0
_PopAcquireCoolingInterface@4
_PopAcquirePolicyLock@0
_PopAcquirePowerRequestPushLock@4
_PopAcquireRwLockExclusive@4
_PopAcquireRwLockShared@4
_PopAcquireTransitionLock@4
_PopAcquireUmpoPushLock@4
_PopAcquireWakeSourceSpinLock@4
_PopActionRetrieveInitialState@16
_PopActiveLockScreenPowerRequest@12
_PopAdaptivePowerSettingCallback@16
_PopAddPagesToCompressedPageSet@28
_PopAdjustHiberFile@4
_PopAdvanceSystemPowerState@16
_PopAllocateHiberContext@0
_PopAllocateIrp@44
_PopAllocateOwnMemory@12
_PopAllocatePages@4
_PopAllowAwayModeSettingCallback@16
_PopAnsiStringToUnicodeString@16
_PopApplyAdminPolicy@8
_PopApplyLegacyPowerRequestFlags@12
_PopApplyPolicy@16
_PopArePowerSettingsEqual@12
_PopArmIdlePhaseWatchdog@4
_PopAssessSystemIdleEvent@8
_PopAssociateThermalRequest@12
_PopAudioAccountingCallback@4
_PopAvlAllocatePowerRequestStats@8
_PopAvlComparePowerRequestKeys@12
_PopAvlDeleteStatsForPowerRequest@4
_PopAvlFindOrMakeStatsForPowerRequest@4
_PopAvlFindOrMakeStatsForScenarioType@4
_PopAvlFreePowerRequestStats@8
_PopAvlGetPowerRequestKey@8
_PopAwayModeUserPresenceDpc@16
_PopBatteryAdd@4
_PopBatteryAlarmPowerSettingCallback@16
_PopBatteryApplyCompositeState@8
_PopBatteryCapacityToRate@12
_PopBatteryCheckCompositeCapacity@12
_PopBatteryCheckTrigger@4
_PopBatteryCheckTriggerAllBatteries@8
_PopBatteryCheckTriggerArmed@0
_PopBatteryDeviceState@8
_PopBatteryEstimatesSpoiled@0
_PopBatteryEtwCallback@36
_PopBatteryGetEnergyDrainFromDischage@8
_PopBatteryInit@0
_PopBatteryInitPhaseTwo@0
_PopBatteryInitialize@4
_PopBatteryIrpComplete@12
_PopBatteryQueryEstimatedTime@8
_PopBatteryQueryStatus@8
_PopBatteryQueueWork@4
_PopBatteryReadTag@4
_PopBatteryRemove@4
_PopBatteryTracePercentageRemaining@16
_PopBatteryTraceSystemBatteryStatus@4
_PopBatteryUpdateAlarms@8
_PopBatteryUpdateCompositeInformation@0
_PopBatteryUpdateCurrentState@4
_PopBatteryWaitTag@4
_PopBatteryWakeDpc@16
_PopBatteryWorker@4
_PopBcdClearPendingResume@4
_PopBcdEstablishResumeObject@8
_PopBcdOpen@4
_PopBcdReadElement@16
_PopBcdRegenerateResumeObject@12
_PopBcdSetDefaultResumeObjectElements@16
_PopBcdSetPendingResume@16
_PopBcdSetupResumeObject@12
_PopBlackBoxBugcheckCallback@16
_PopBlackBoxUpdate@8
_PopBlockSessionSwitch@8
_PopBootLoaderSiData@4
_PopBootLoaderSiDataProcess@0
_PopBootLoaderTraceCopyPfnList@8
_PopBootLoaderTraceEtwEvents@4
_PopBootLoaderTraceProcess@0
_PopBootStatAccessCheck@12
_PopBootStatCheckIntegrity@4
_PopBootStatGet@8
_PopBootStatRestoreDefaults@4
_PopBootStatSet@8
_PopBootStatUnlock@4
_PopBroadcastInputSuppressionCallback@16
_PopBroadcastLegacyLidSwitchChangeCallback@16
_PopBroadcastSessionInfo@12
_PopBuildDeviceNotifyList@8
_PopBuildDeviceNotifyListWatchdog@16
_PopBuildMemoryImageHeader@8
_PopCacheDisplayOnPhaseDuration@12
_PopCadHpmiPnpNotification@8
_PopCadTriggerDriverLoad@4
_PopCalculateCsSummary@8
_PopCalculateHiberFileSize@8
_PopCalculateIdleInformation@4
_PopCalculateTotalHwDripsResidency@24
_PopCalculateWakeTimeAdjustment@0
_PopCallPowerSettingCallback@8
_PopCapabilityCheck@4
_PopCapturePlatformRole@0
_PopCaptureReasonContext@16
_PopCaptureSleepStudyStatistics@16
_PopCaptureTimeOnProcZero@0
_PopChangeCapability@8
_PopCheckAndClearBootError@0
_PopCheckAndHandleThermalConditions@4
_PopCheckConsoleTimeouts@0
_PopCheckDisabledReason@8
_PopCheckDisabledState@4
_PopCheckForAbnormalReset@0
_PopCheckForDeepSleep@0
_PopCheckForIdleness@16
_PopCheckForUpgradeInProgress@0
_PopCheckForWork@0
_PopCheckPowerSourceAfterRtcWakeCancel@0
_PopCheckPowerSourceAfterRtcWakeInitialize@0
_PopCheckPowerSourceAfterRtcWakeSet@0
_PopCheckPowerSourceAfterRtcWakeTimerCallback@8
_PopCheckPowerSourceAfterRtcWakeTimerWorker@4
_PopCheckResiliencyScenarios@0
_PopCheckShutdownMarker@4
_PopCheckSkipTick@0
_PopCheckTestsigningEnabled@0
_PopCheckThermalPolicy@20
_PopCheckpointSystemSleep@4
_PopCheckpointSystemSleepUnsafe@4
_PopCleanCoolingExtension@4
_PopClearConnectedStandbyMarker@4
_PopClearHiberFileSignature@0
_PopClearHibernateDiagnosticInfo@0
_PopClearShutdownMarker@0
_PopClearSleepMarker@0
_PopClearSystemShutdownMarker@0
_PopClearSystemSleepCheckpoint@4
_PopClearTransitionCheckpoints@0
_PopClearUserShutdownMarkerWorker@4
_PopCloneRange@16
_PopCloneUnicodeString@8
_PopCoalescingCallback@12
_PopCoalescingCallbackWorker@4
_PopCoalescingCheck@16
_PopCoalescingInitialize@0
_PopCoalescingNotify@0
_PopCoalescingPowerSettingCallback@16
_PopCoalescingSetActiveState@4
_PopCoalescingSetTimer@0
_PopCoalesingTimerDpcCallback@16
_PopCompareActions@8
_PopCompleteAction@8
_PopCompleteDirectedPowerTransitionCallback@12
_PopCompleteNotifyTransitionCommon@16
_PopCompressCallback@4
_PopComputeCounterShifts@16
_PopComputeDerivedHiberStats@16
_PopComputeTimeout@12
_PopComputeWatchdogTimeout@4
_PopConfigureHeteroPolicies@8
_PopConnectToPolicyDevice@8
_PopConnectedStandbySettingCallback@16
_PopConsoleLockPowerSettingCallback@16
_PopConsoleSessionActiveInput@12
_PopConsoleSessionPassiveInput@12
_PopControlMonitor@8
_PopCoolingExtensionPnpNotification@8
_PopCoolingSxTransition@4
_PopCoolingTelemetryWorker@0
_PopCopyWakeSource@12
_PopCountDataAsProduced@24
_PopCreateDumpMdl@16
_PopCreateDynamicIrpWorker@4
_PopCreateHiberFile@8
_PopCreateHiberFileSecurityDescriptor@0
_PopCreateIdlePhaseWatchdog@0
_PopCreateNotificationName@4
_PopCreatePowerThread@8
_PopCreateTimebrokerServiceSid@0
_PopCriticalShutdown@4
_PopCurrentPowerState@4
_PopCurrentPowerStatePrecise@8
_PopDeactiveThermalRequest@4
_PopDecompressCallback@4
_PopDecompressHiberBlocks@20
_PopDecrementPowerSettingPendingUpdates@4
_PopDeepSleepClearDisengageReason@4
_PopDeepSleepEnabled@0
_PopDeepSleepEvaluateCallback@4
_PopDeepSleepInitialize@4
_PopDeepSleepPowerSettingCallback@16
_PopDeepSleepResiliencyPhaseAccountingBegin@8
_PopDeepSleepResiliencyPhaseAccountingEnd@8
_PopDeepSleepResiliencyPhaseAccountingUpdate@8
_PopDeepSleepSetDisengageReason@4
_PopDeepSleepWatchdogTakeAction@8
_PopDefaultPolicy@4
_PopDeferDoze@12
_PopDeleteHiberFile@4
_PopDequeueQuerySetIrp@4
_PopDereferencePowerRequestStats@4
_PopDereferenceWakeInfos@8
_PopDetectSimulatedHeteroProcessors@4
_PopDeviceConstraintsEnforced@0
_PopDeviceIdleCompletion@20
_PopDeviceIdlePolicySettingCallback@16
_PopDiagComputeEarlyHiberStats@0
_PopDiagDeviceRundownWorker@4
_PopDiagGetDriverName@12
_PopDiagGetTimeBrokerExpirationReason@8
_PopDiagInitialize@0
_PopDiagInterruptTimeToSystemTime@12
_PopDiagQueryDevicePropertyString@12
_PopDiagSleepStudyInitialize@0
_PopDiagSnapActiveActivity@16
_PopDiagSnapPassiveHistogram@8
_PopDiagTraceAbnormalReset@4
_PopDiagTraceAcDcStateChange@12
_PopDiagTraceActiveCooling@16
_PopDiagTraceAppPowerMessage@4
_PopDiagTraceAppPowerMessageEnd@4
_PopDiagTraceBatteryAlarmStatus@12
_PopDiagTraceBatteryCountChange@12
_PopDiagTraceBatteryTriggerFlags@8
_PopDiagTraceBatteryTriggerMet@12
_PopDiagTraceBsdLidWriteTime@4
_PopDiagTraceClearDeepSleepConstraint@4
_PopDiagTraceConsoleDisplayState@4
_PopDiagTraceControlCallback@36
_PopDiagTraceCoolingExtension@8
_PopDiagTraceCoolingExtensionActiveUpdate@4
_PopDiagTraceCoolingExtensionPassiveUpdate@4
_PopDiagTraceCsConsumption@4
_PopDiagTraceCsDeepSleepWatchdog@24
_PopDiagTraceCsDripsDivergence@24
_PopDiagTraceCsDripsWatchdog@44
_PopDiagTraceCsDripsWatchdogPerfTrack@28
_PopDiagTraceCsEnterReason@12
_PopDiagTraceCsExitReason@12
_PopDiagTraceCsFanPerfTrack@8
_PopDiagTraceCsResiliencyEnter@12
_PopDiagTraceCsResiliencyExit@44
_PopDiagTraceCsResiliencyStats@4
_PopDiagTraceDebuggerTransitionRequirements@12
_PopDiagTraceDeepSleepConstraintRundown@0
_PopDiagTraceDeviceAcquireIrp@8
_PopDiagTraceDeviceComplianceRundown@0
_PopDiagTraceDeviceComplianceUpdate@8
_PopDiagTraceDeviceIdleCheck@12
_PopDiagTraceDeviceReleaseIrp@8
_PopDiagTraceDeviceVerboseRundown@4
_PopDiagTraceDevicesLevel@16
_PopDiagTraceDevicesSuspend@12
_PopDiagTraceDevicesWakeEnd@0
_PopDiagTraceDirectedDripsInitialization@4
_PopDiagTraceDirectedDripsNotifyAppsAndServices@16
_PopDiagTraceDirectedDripsWorker@8
_PopDiagTraceDirtyTransition@48
_PopDiagTraceDiskIdleCheck@12
_PopDiagTraceDisplayBurstWin32kCallout@12
_PopDiagTraceDisplayTimeout@12
_PopDiagTraceDozeDeferralDecision@36
_PopDiagTraceDripsHistogram@32
_PopDiagTraceDriverVeto@8
_PopDiagTraceDynamicTickStatusRundown@0
_PopDiagTraceEsState@8
_PopDiagTraceEventNoPayload@4
_PopDiagTraceExternalDisplayState@4
_PopDiagTraceFirmwareS3Stats@0
_PopDiagTraceFlushSleepStudyLogger@0
_PopDiagTraceFlushSleepStudyLoggerEnd@0
_PopDiagTraceFxComponentAccounting@28
_PopDiagTraceFxComponentIdleConstraints@16
_PopDiagTraceFxComponentIdleState@12
_PopDiagTraceFxComponentLogicalCondition@12
_PopDiagTraceFxComponentRegistration@28
_PopDiagTraceFxComponentWake@12
_PopDiagTraceFxDefaultPepWorkerEnd@20
_PopDiagTraceFxDeviceAccounting@24
_PopDiagTraceFxDeviceDirectedCompletion@8
_PopDiagTraceFxDeviceDirectedTransition@8
_PopDiagTraceFxDeviceIdleConstraints@12
_PopDiagTraceFxDevicePowerRequirement@12
_PopDiagTraceFxDevicePowerState@8
_PopDiagTraceFxDevicePowered@4
_PopDiagTraceFxDevicePreparation@16
_PopDiagTraceFxDeviceRegistration@32
_PopDiagTraceFxDeviceStartPowerManagement@4
_PopDiagTraceFxDeviceUnregistration@4
_PopDiagTraceFxPerfNominalChange@20
_PopDiagTraceFxPerfRegistration@16
_PopDiagTraceFxPerfRequest@12
_PopDiagTraceFxPerfRequestComplete@8
_PopDiagTraceFxPerfRequestProgress@8
_PopDiagTraceFxPerfSetRegistration@60
_PopDiagTraceFxPluginRegistration@16
_PopDiagTraceFxRundown@0
_PopDiagTraceHiberStats@0
_PopDiagTraceHibernateErrorStatus@4
_PopDiagTraceIdleCheck@16
_PopDiagTraceIdleResiliencyEnd@12
_PopDiagTraceIdleResiliencyStart@20
_PopDiagTraceIllegalProcessorThrottle@16
_PopDiagTraceInputTimeout@12
_PopDiagTraceIoCoalescingDiskIdle@4
_PopDiagTraceIoCoalescingFlush@0
_PopDiagTraceIoCoalescingOff@0
_PopDiagTraceIoCoalescingOn@16
_PopDiagTraceIrpFinish@4
_PopDiagTraceIrpFinishTelemetry@4
_PopDiagTraceIrpPended@4
_PopDiagTraceIrpStart@8
_PopDiagTraceKernelQueriesAllowed@4
_PopDiagTraceMonitorOnWithLidClosed@4
_PopDiagTraceMtrrError@0
_PopDiagTracePassiveCooling@20
_PopDiagTracePerfTrackData@4
_PopDiagTracePlatformRoleRundown@0
_PopDiagTracePolicyChange@24
_PopDiagTracePolicyInitiatePowerActionApiCall@8
_PopDiagTracePostSleepNotification@36
_PopDiagTracePowerButtonBugcheck@4
_PopDiagTracePowerRequestChange@4
_PopDiagTracePowerRequestClose@4
_PopDiagTracePowerRequestCreate@8
_PopDiagTracePowerSetting@16
_PopDiagTracePowerSettingRegistration@12
_PopDiagTracePowerStateEvent@8
_PopDiagTracePowerStateEventRundown@0
_PopDiagTracePowerTransitionEnd@4
_PopDiagTracePowerTransitionStart@8
_PopDiagTracePowerTransitionTime@0
_PopDiagTracePreSleepNotification@20
_PopDiagTracePrepareSleep@0
_PopDiagTracePrepareSleepEnd@0
_PopDiagTraceProcessorThrottleDurationPerfTrack@8
_PopDiagTraceProcessorThrottlePerfTrack@8
_PopDiagTraceRegisterSystemState@8
_PopDiagTraceRtcWakeInfo@32
_PopDiagTraceServiceNotification@4
_PopDiagTraceSessionDisplayStateChange@16
_PopDiagTraceSessionState@12
_PopDiagTraceSessionStateCounted@16
_PopDiagTraceSessionStates@12
_PopDiagTraceSetDeepSleepConstraint@4
_PopDiagTraceSetSystemState@4
_PopDiagTraceSetThreadExecutionState@8
_PopDiagTraceShutdownAction@12
_PopDiagTraceSkipTick@8
_PopDiagTraceSleepReliabilityDiagConfigUpdate@4
_PopDiagTraceSleepStudyBlocker@8
_PopDiagTraceSleepStudyBlockerData@8
_PopDiagTraceSleepStudyStart@0
_PopDiagTraceSleepStudyStop@0
_PopDiagTraceSystemIdleAction@12
_PopDiagTraceSystemIdleAssessment@12
_PopDiagTraceSystemIdleContextUpdate@20
_PopDiagTraceSystemIdleEventAssessment@20
_PopDiagTraceSystemIdleRundown@0
_PopDiagTraceSystemLatencyUpdate@8
_PopDiagTraceThermalCoolingMode@8
_PopDiagTraceThermalOverthrottleState@8
_PopDiagTraceThermalRequest@8
_PopDiagTraceThermalRequestActiveUpdate@4
_PopDiagTraceThermalRequestPassiveUpdate@4
_PopDiagTraceThermalStandbyState@8
_PopDiagTraceThermalStateChange@12
_PopDiagTraceThermalZoneEnumeration@12
_PopDiagTraceThermalZoneRundown@32
_PopDiagTraceThermalZoneThrottleDurationPerfTrack@8
_PopDiagTraceThermalZoneThrottlePerfTrack@12
_PopDiagTraceTripPointExceeded@16
_PopDiagTraceUmpoAlpcProcessingError@4
_PopDiagTraceUsermodeThermalEvent@4
_PopDiagTraceUsermodeTripPointExceeded@16
_PopDiagTraceZeroHiberFile@0
_PopDiagTraceZeroHiberFileEnd@0
_PopDiagTraceZoneCriticalTripPointExceeded@8
_PopDiagTraceZoneS4TripPointExceeded@8
_PopDirectedDripsAcquireTransitionLock@4
_PopDirectedDripsBuildBroadcastTreeFull@16
_PopDirectedDripsBuildBroadcastTreePartial@12
_PopDirectedDripsBuildPs4BroadcastTree@12
_PopDirectedDripsClearDisengageReason@4
_PopDirectedDripsDestroyBroadcast@0
_PopDirectedDripsDiagBroadcastTreeBegin@12
_PopDirectedDripsDiagBroadcastTreeEnd@16
_PopDirectedDripsDiagCreateBlockerEntryBoolean@12
_PopDirectedDripsDiagCreateBlockerEntryULong@12
_PopDirectedDripsDiagCreateDeviceDescription@8
_PopDirectedDripsDiagCreateDeviceDiagnostic@4
_PopDirectedDripsDiagDestroyDeviceDiagnostic@4
_PopDirectedDripsDiagExtractDeviceDescription@28
_PopDirectedDripsDiagFreeDeviceDiagnostic@4
_PopDirectedDripsDiagGetDeviceActiveStamp@4
_PopDirectedDripsDiagInitialize@4
_PopDirectedDripsDiagInsertErrorRecord@12
_PopDirectedDripsDiagNotifyPnpActionQueueEvent@8
_PopDirectedDripsDiagNotifySessionStart@12
_PopDirectedDripsDiagNotifySessionStop@12
_PopDirectedDripsDiagPnpActionQueueAccountingUpdate@8
_PopDirectedDripsDiagPnpActionQueueAccountingUpdateUnsafe@8
_PopDirectedDripsDiagQueryAndResetPnpAccounting@16
_PopDirectedDripsDiagRundownDevices@0
_PopDirectedDripsDiagSanitizeHardwareId@4
_PopDirectedDripsDiagTraceBroadcastFailureDevice@4
_PopDirectedDripsDiagTraceBroadcastVisit@12
_PopDirectedDripsDiagTraceDfxPowerStateFailure@4
_PopDirectedDripsDiagTraceDisengageReasonChange@8
_PopDirectedDripsDiagTraceMarkDevice@4
_PopDirectedDripsDiagTraceNotifyDevices@16
_PopDirectedDripsDiagTraceProblemDevice@12
_PopDirectedDripsDiagTraceTransition@4
_PopDirectedDripsDisengageTimerCallback@8
_PopDirectedDripsEngage@8
_PopDirectedDripsEventHandler@12
_PopDirectedDripsHandleResiliencyNotification@4
_PopDirectedDripsIdleResiliencyCallback@8
_PopDirectedDripsInitializeBroadcast@4
_PopDirectedDripsInitializeDisengageTimer@12
_PopDirectedDripsInitializePhase0@4
_PopDirectedDripsInitializePhase3@4
_PopDirectedDripsIsLikelySpecialDevice@8
_PopDirectedDripsMarkCandidateDevice@4
_PopDirectedDripsMarkDfxDevice@16
_PopDirectedDripsNotify@8
_PopDirectedDripsNotifyAppsAndServices@12
_PopDirectedDripsNotifyFxSurprisePoweredOn@4
_PopDirectedDripsNotifyPnpActionQueueEvent@8
_PopDirectedDripsNotifyResiliencyCompletionWorker@4
_PopDirectedDripsNotifyTransitionFailed@4
_PopDirectedDripsNotifyWaitWakeIrpCompletion@4
_PopDirectedDripsQueryEmPS4DisableSetting@4
_PopDirectedDripsQueryEmSettings@4
_PopDirectedDripsQueryEnabledMitigations@4
_PopDirectedDripsQueryMitigationStatus@12
_PopDirectedDripsQueryPs4Support@0
_PopDirectedDripsQueryRegistryValues@8
_PopDirectedDripsRefreshDisengageState@4
_PopDirectedDripsReleaseTransitionLock@4
_PopDirectedDripsResumeDevices@8
_PopDirectedDripsSendSessionData@4
_PopDirectedDripsSendSuspendResumeNotification@8
_PopDirectedDripsSetDisengageReason@4
_PopDirectedDripsStartDisengageTimer@4
_PopDirectedDripsSuspendDevices@4
_PopDirectedDripsUmCreateTestDevice@16
_PopDirectedDripsUmDirectedFxAddTestDevice@8
_PopDirectedDripsUmDirectedFxRemoveTestDevice@8
_PopDirectedDripsUmDirectedFxSetMode@8
_PopDirectedDripsUmGetDeviceInstancePath@8
_PopDirectedDripsUmInitialize@0
_PopDirectedDripsUmIsTestModeEnabled@0
_PopDirectedDripsUmMarkTestDevices@0
_PopDirectedDripsUmPowerInformationInternal@20
_PopDirectedDripsUmQueryCapabilities@8
_PopDirectedDripsUmTestDeviceAllocate@8
_PopDirectedDripsUmTestDeviceCompare@12
_PopDirectedDripsUmTestDeviceFree@8
_PopDirectedDripsVisitDevice@16
_PopDirectedDripsVisitPs4Device@16
_PopDirectedDripsWorkerRoutine@4
_PopDisableCoolingExtension@4
_PopDisableIrpWatchdog@4
_PopDisarmIdlePhaseWatchdog@0
_PopDiscardRange@16
_PopDisengageDirectedDrips@4
_PopDisksRegisteredForIdle@0
_PopDispatchAcDcCallback@4
_PopDispatchCallback@4
_PopDispatchCallout@4
_PopDispatchFullWake@4
_PopDispatchNotifications@4
_PopDispatchNotificationsToList@4
_PopDispatchPowerSettingCallbacks@4
_PopDispatchQuerySetIrp@4
_PopDispatchShutdownEvent@4
_PopDispatchStateCallout@8
_PopDispatchSuperfetchNotification@8
_PopDisplayBurstEventHandler@12
_PopDripsWatchdogAcquireContextLock@4
_PopDripsWatchdogCallbackHandler@36
_PopDripsWatchdogCallbackWorker@4
_PopDripsWatchdogCheckHwDivergence@16
_PopDripsWatchdogDiagnosticWorker@4
_PopDripsWatchdogGetDeviceActiveTime@4
_PopDripsWatchdogInitialize@0
_PopDripsWatchdogInitializeActions@4
_PopDripsWatchdogInitializeCallbackTimer@4
_PopDripsWatchdogInitializeDiagnosticTimer@4
_PopDripsWatchdogInvokeDeviceCallbacks@8
_PopDripsWatchdogNotifySessionStart@4
_PopDripsWatchdogReleaseContextLock@4
_PopDripsWatchdogScheduleNextTimer@4
_PopDripsWatchdogStartWatchdog@0
_PopDripsWatchdogStopWatchdog@0
_PopDripsWatchdogTakeAction@12
_PopDripsWatchdogTimerCallback@8
_PopDripsWatchdogUpdateMetrics@28
_PopEmModuleAddressMatchCallback@28
_PopEmRegister@0
_PopEmUpdateDeviceConstraintCallback@28
_PopEnableHiberFile@8
_PopEnableIrpWatchdog@4
_PopEnableSystemSleepCheckpoint@0
_PopEndMirroring@4
_PopEnforceDeepSleep@4
_PopEnforceResiliencyScenarios@4
_PopEnlargeHiberFile@4
_PopEnsureCoalescingWorkerWillRun@0
_PopEnsureErratumSubscribed@4
_PopErratumUpdateCallback@24
_PopEsEnterSleepShutdown@0
_PopEsEvaluateNextState@8
_PopEsExitSleep@0
_PopEsGetState@0
_PopEsHostStateChange@4
_PopEsInStandbyAcDcCallback@16
_PopEsInStandbyEvaluate@0
_PopEsInStandbyLowPowerEpochCallback@16
_PopEsInit@4
_PopEsPowerSettingBatteryThresholdCallback@16
_PopEsPowerSettingPolicyCallback@16
_PopEsPublishState@0
_PopEsQueueStateEvaluation@4
_PopEsSnapTelemetry@4
_PopEsStartTelemetry@0
_PopEsUpdateState@4
_PopEsWnfOpportunisticCsCallback@24
_PopEsWnfSubscriptionOverrideCallback@24
_PopEsWorkItemSchedule@4
_PopEsWorker@4
_PopEstimateChargeTime@0
_PopEtAggregateFind@12
_PopEtAggregateGet@12
_PopEtAggregateKeyCleanup@4
_PopEtAggregateKeyCopy@8
_PopEtAggregateKeyCopyFromProcess@12
_PopEtAppIdIntern@8
_PopEtBucketsAllocate@8
_PopEtBucketsFree@8
_PopEtDataSectionAdvance@4
_PopEtDataSectionCopyData@12
_PopEtDataSectionReserve@12
_PopEtEnergyContextCleanup@4
_PopEtEnergyContextProcessStateUpdate@4
_PopEtEnergyContextSetState@8
_PopEtEnergyTrackerCleanup@4
_PopEtEnergyTrackerCleanupAggregates@4
_PopEtEnergyTrackerClose@16
_PopEtEnergyTrackerCreate@8
_PopEtEnergyTrackerDelete@4
_PopEtEnergyTrackerEnumSnapshotCallback@8
_PopEtEnergyTrackerInitialize@4
_PopEtEnergyTrackerQuery@12
_PopEtEnergyTrackerUpdateAggregate@16
_PopEtEnergyValuesDeltaCalculate@16
_PopEtEnumEnergyTrackers@8
_PopEtGetNextEnergyTracker@4
_PopEtGetProcessAppId@8
_PopEtGetProcessImageInfo@8
_PopEtGetProcessSidAndPackageIdentity@12
_PopEtInit@0
_PopEtInitializeBuiltinAppId@8
_PopEtInternerAllocate@8
_PopEtInternerEntryInitialize@12
_PopEtInternerFree@8
_PopEtInternerLock@8
_PopEtInternerUnlock@8
_PopEtIsrDpcQuery@8
_PopEtProcessEnumSnapshotCallback@8
_PopEtProcessSnapshotCreate@8
_PopEtProcessSnapshotFind@4
_PopEtProcessSnapshotUpdate@4
_PopEtProcessSnapshotUpdateFromSnapshotContext@8
_PopEtStringIntern@12
_PopEtStringSet@8
_PopEvaluateGlobalUserStatus@0
_PopEvaluateInputSuppressionAction@0
_PopEventCalloutDispatch@8
_PopExecuteOnTargetProcessors@16
_PopExecutePowerAction@20
_PopExecuteProcessorCallback@16
_PopExecuteSystemIdleAction@12
_PopExtendConnectionState@4
_PopExternalMonitorUpdatedWorker@4
_PopFanAdd@4
_PopFanEndCsFanPeriod@0
_PopFanIrpComplete@12
_PopFanRemove@4
_PopFanReportBootStartDevices@0
_PopFanUpdateCsState@4
_PopFanUpdateRunningState@4
_PopFanWorker@4
_PopFastS4Check@0
_PopFilterCapabilities@8
_PopFinalizeDeviceWakeSource@4
_PopFinalizeWakeInfo@4
_PopFindNextSystemPowerState@12
_PopFindPowerSettingConfiguration@8
_PopFireThermalWmiEvent@4
_PopFlushAndHold@8
_PopFlushVolumeWorker@4
_PopFlushVolumes@4
_PopFreeHiberContext@0
_PopFreeIrp@4
_PopFreeRegistration@4
_PopFreeSessionState@4
_PopFreeSessionStateInList@8
_PopFreeUnicodeString@4
_PopFreeWakeInfo@4
_PopFreeWakeSource@4
_PopFxAccumulateDeviceIRPhaseAccounting@8
_PopFxAcpiDispatchNotification@4
_PopFxAcpiForwardNotification@20
_PopFxAcpiForwardPepAcpiNotifyRequest@8
_PopFxAcpiForwardPepWorkRequest@8
_PopFxAcpiForwardRequestCommon@8
_PopFxAcpiPrepareDevice@16
_PopFxAcpiRegisterDevice@20
_PopFxAcpiUnregisterDevice@8
_PopFxAcpiValidateParameters@4
_PopFxActivateComponent@16
_PopFxActivateComponentDependencies@8
_PopFxActivateComponentDependents@4
_PopFxActivateComponentWorker@16
_PopFxActivateDevice@12
_PopFxActivateDevicesForSx@4
_PopFxAddLogEntry@20
_PopFxAddRefDevice@4
_PopFxAllocatePowerIrp@32
_PopFxArmResidentTimer@4
_PopFxAssignDeviceToDevNode@8
_PopFxBeginDeviceIRPhaseAccounting@8
_PopFxBugCheck@16
_PopFxBuildDirectedDripsCandidateDeviceList@4
_PopFxBuildDripsBlockingDeviceList@12
_PopFxClearDeviceConstraints@4
_PopFxClearDirectedDripsCandidateDeviceList@0
_PopFxCompleteComponentActivation@12
_PopFxCompleteComponentPerfState@16
_PopFxCompleteDevicePowerRequired@8
_PopFxCompleteDirectedPowerTransition@8
_PopFxComponentPerfWork@4
_PopFxComponentRelationsCleanup@4
_PopFxComponentWork@4
_PopFxConvertV1Components@8
_PopFxCreateDeviceCommon@20
_PopFxCreateEmergencyWorkerThread@4
_PopFxDeactivateComponentDependencies@4
_PopFxDebuggerPowerCriticalTransitionCallback@12
_PopFxDeliverDevicePowerRequired@8
_PopFxDerefAndCompleteDirectedPowerTransition@8
_PopFxDestroyDeviceCommon@4
_PopFxDestroyDeviceDpm@8
_PopFxDestroyDirectedDripsCandidateDeviceList@4
_PopFxDestroyDripsBlockingDeviceList@4
_PopFxDeviceWork@4
_PopFxDirectedPowerTransitionWorker@4
_PopFxDirectedWorkOrderWatchdog@16
_PopFxDisableWorkOrderWatchdog@4
_PopFxDispatchPluginWorkOnce@4
_PopFxDuplicateUniqueId@8
_PopFxEmergencyWorker@4
_PopFxEnableEnhancedAccounting@4
_PopFxEnablePlatformStates@4
_PopFxEnableWorkOrderWatchdog@8
_PopFxEndDeviceIRPhaseAccounting@8
_PopFxEnforceDirectedPowerTransition@16
_PopFxFindAcpiDeviceByUniqueId@8
_PopFxFindAndReferenceAcpiDevice@4
_PopFxFindDeviceAndAllocateUniqueId@8
_PopFxGetDeviceDStateReason@4
_PopFxGetLatencyLimitWithoutResiliency@0
_PopFxHandleDirectedPowerTransition@4
_PopFxIdleComponent@16
_PopFxIdleDevicesFromSx@4
_PopFxIdleTimeoutDpcRoutine@16
_PopFxIdleWorker@12
_PopFxIdleWorkerTail@12
_PopFxIncrementDeviceSleepCount@4
_PopFxInitializeSocSubsystemStaticInfo@8
_PopFxInitializeWorkPool@8
_PopFxInsertAcpiDevice@12
_PopFxInsertDevice@12
_PopFxInvokeDripsWatchdogCallback@12
_PopFxIsDevicePotentialDripsConstraint@4
_PopFxIsDirectedPowerTransitionSupported@8
_PopFxIsDripsBlockingDevice@16
_PopFxIssueComponentPerfStateChanges@24
_PopFxIssueDirectedPowerTransition@12
_PopFxLockDevice@8
_PopFxLogSocSubsystemBlockingTimes@16
_PopFxLogSocSubsystemMetadata@16
_PopFxLookupSocSubsystemsByPlatformIdleState@4
_PopFxLowPowerEpochCallback@16
_PopFxMergeActiveTimeAccounting@4
_PopFxNotifyPreDIrpCompletion@12
_PopFxNotifySxTransitionState@4
_PopFxNotifySystemStateTransition@12
_PopFxPauseDeviceAccounting@0
_PopFxPepPerfInfoFree@4
_PopFxPepPerfInfoQuery@12
_PopFxPlatformIdleVeto@16
_PopFxPlatformRegisterInterface@8
_PopFxPlatformStateAvailable@8
_PopFxPluginWork@4
_PopFxPrepareDevicesForShutdown@0
_PopFxProcessWork@8
_PopFxProcessWorkPool@8
_PopFxProcessorIdleVeto@16
_PopFxQueryBiosDeviceName@8
_PopFxQueryCurrentComponentPerfState@24
_PopFxQueueWorkOrder@16
_PopFxRegisterComponentPerfStates@28
_PopFxRegisterDevice@32
_PopFxRegisterDeviceWithPep@16
_PopFxRegisterDeviceWorker@40
_PopFxRegisterPluginEx@16
_PopFxReleaseAcpiRefDevice@8
_PopFxReleaseDevice@4
_PopFxReleasePowerIrp@4
_PopFxRemoveAcpiDevice@8
_PopFxRemoveDevice@8
_PopFxRequestCommon@8
_PopFxRequestWorker@4
_PopFxResetSocSubsystemAccounting@8
_PopFxResidentTimeoutDpcRoutine@16
_PopFxResidentTimeoutRoutine@4
_PopFxResumeDeviceAccounting@0
_PopFxScheduleDeviceIdleTimer@4
_PopFxSetDeviceAccountingCsPlatformState@4
_PopFxSetDripsBlockedByDeviceActivity@4
_PopFxSetGlobalDeviceAccountingEnabled@4
_PopFxStartDeviceAccounting@0
_PopFxStopDeviceAccounting@0
_PopFxTraceDeviceRegistration@8
_PopFxTracePerfRegistration@8
_PopFxTransitionCriticalResource@12
_PopFxUnregisterDevice@4
_PopFxUnregisterDeviceOrWait@4
_PopFxUpdateAccountingActiveTime@20
_PopFxUpdateComponentAccountingEnhanced@16
_PopFxUpdateComponentPerfStateNominalChange@16
_PopFxUpdateDeviceAccountingEnhanced@12
_PopFxUpdateDeviceIRPhaseAccounting@4
_PopFxUpdateDeviceIdleTimer@4
_PopFxUpdateGlobalDeviceAccountingInfo@16
_PopFxUpdatePlatformIdleState@12
_PopFxUpdateProcessorIdleState@12
_PopFxUpdateVetoMaskWork@4
_PopFxValidateReturnedUnicodeString@12
_PopFxVerifyDependencies@12
_PopFxWorkOrderWatchdog@16
_PopGenerateDeviceFriendlyName@8
_PopGenerateMdl@4
_PopGenerateScratchMdl@8
_PopGenerateUnHibernatedMdl@8
_PopGenericEventHandler@12
_PopGetBitlockerKeyLocation@4
_PopGetConsoleDisplayRequestCount@0
_PopGetCurrentWakeInfos@4
_PopGetDischargeStartStatus@0
_PopGetDisplayTimeout@4
_PopGetDope@4
_PopGetDozeTimerSource@0
_PopGetEnergyCounter@4
_PopGetHiberFlags@0
_PopGetHwConfigurationSignature@0
_PopGetIdleTimesCallback@12
_PopGetIoLocation@16
_PopGetLegacyPowerRequestFlags@12
_PopGetListHead@4
_PopGetLockConsoleTimeout@4
_PopGetLockConsoleTimeoutUnsafe@4
_PopGetModernStandbyTransitionReason@8
_PopGetMonitorReasonFromPowerEventId@4
_PopGetNextTable@24
_PopGetPolicyDeviceObject@8
_PopGetPolicyWorker@4
_PopGetPowerActionWatchdogTimeout@4
_PopGetPowerEventFromId@4
_PopGetPowerRequestListInfo@8
_PopGetPowerSettingValue@24
_PopGetReasonListByReasonCode@4
_PopGetRemainingHibernateRangeDataSize@4
_PopGetSessionId@0
_PopGetSettingNotificationName@8
_PopGetSettingValue@12
_PopGetStopWatchByRequestType@12
_PopGetStopWatchCollectionByRequestType@4
_PopGetTransitionsToOnCount@0
_PopGetWakeSource@8
_PopGracefulShutdown@4
_PopHaltDeviceIdle@0
_PopHandleNextState@8
_PopHandleSystemIdleReset@4
_PopHandleWakeSources@0
_PopHardDiskPowerSettingCallback@16
_PopHiberCheckForDebugBreak@0
_PopHiberCheckResume@0
_PopHiberChecksumHiberFileData@24
_PopHiberEarlyCleanup@4
_PopHiberEvaluateSkippingMemoryMapValidation@0
_PopHiberInitializeResources@4
_PopHiberPeekRangeTable@12
_PopHiberReadChecksums@4
_PopIdleAoAcDozeS4TimerCallback@8
_PopIdleAoAcDozeToS4@4
_PopIdleArmAoAcDozeS4Timer@0
_PopIdleCancelAoAcDozeS4Timer@4
_PopIdleCheckForUserInput@0
_PopIdleChooseDozeS4Time@8
_PopIdleCsStateChanged@4
_PopIdleGlobalUserPresenceCallback@16
_PopIdleInitAoAcDozeS4Timer@0
_PopIdlePhaseWatchdogCallback@24
_PopIdleTriggerAdaptiveStandbyAction@4
_PopIdleWakeAreIdenticalWakeSources@12
_PopIdleWakeConvertIntervalBucketsFrom@20
_PopIdleWakeConvertIntervalBucketsTo@20
_PopIdleWakeFinalizeWakeSource@8
_PopIdleWakeFindOrAllocateWakeSource@16
_PopIdleWakeGenerateDescriptionString@8
_PopIdleWakeInitialize@0
_PopIdleWakeInsertTimeInterval@24
_PopIdleWakeNotifyDevicesActive@4
_PopIdleWakeNotifyIdleResiliencyState@4
_PopIdleWakeNotifyModernStandbyEnter@0
_PopIdleWakeNotifyModernStandbyExit@8
_PopIdleWakeNotifyWakeSource@28
_PopIdleWakeSourceAccountingToDiagnostic@8
_PopIdleWakeStopActiveIntervalAccounting@12
_PopIdleWakeSystemImageCallback@8
_PopIdleWakeTraceWakeSourceDiagnostic@12
_PopIgnoreBatteryStatusChange@0
_PopIncrementPowerSettingPendingUpdates@4
_PopInitDripsWakeAccounting@0
_PopInitPlatformSettings@0
_PopInitSIdle@4
_PopInitShutdownList@0
_PopInitSystemSleeperThread@8
_PopInitVideoWnfState@0
_PopInitializeAdpm@0
_PopInitializeDirectedDrips@4
_PopInitializeHeteroProcessors@4
_PopInitializeHighPerfPowerRequest@0
_PopInitializeIRTimer@28
_PopInitializeIrpWorkers@0
_PopInitializePowerButtonHold@4
_PopInitializePowerPolicySimulate@0
_PopInitializePowerSettingCallbacks@0
_PopInitializePowerSettings@0
_PopInitializePreSleepNotifications@0
_PopInitializeSystemIdleDetection@0
_PopInitializeTimer@24
_PopInitializeWorkItem@12
_PopInitilizeAcDcSettings@0
_PopInputDisabled@12
_PopIntSteerSetMode@16
_PopIntSteerSetPerProcTrigger@16
_PopIntSteerSetTimeUnparkTrigger@16
_PopInternalUpdateActiveStopWatchesCollectionState@4
_PopInternalUpdateStopWatchState@4
_PopInterruptSteeringEnabled@0
_PopInvokeStateHandlerTargetProcessor@16
_PopInvokeSystemStateHandler@8
_PopInvokeWin32Callout@16
_PopIrpWatchdog@16
_PopIrpWatchdogBugcheck@4
_PopIrpWorker@4
_PopIrpWorkerControl@4
_PopIsDataAccruedByPowerRequestStats@4
_PopIsDetailedSleepReliabilityDiagEnabled@0
_PopIsDirectedDripsEnabled@0
_PopIsDozeSupported@4
_PopIsHibernateSupported@4
_PopIsInputSuppressionEngaged@4
_PopIsLockConsoleTimeoutActive@0
_PopIsNotifyForDirectedPowerTransition@4
_PopIsRemoteDesktopEnabled@0
_PopIsRunningAsLocalSystem@0
_PopIsRunningInVm@0
_PopIsSystemIdle@12
_PopIsWakeTimerImmanent@24
_PopIssueActionRequest@16
_PopIssueDirectedPowerTransition@8
_PopIssueNextState@12
_PopKsrCallback@12
_PopLazySensorActiveInput@8
_PopLidClosedSleepStudyWorker@4
_PopLidSwitchChangeCallback@16
_PopLoadResumeContext@4
_PopLockGetDoDevicePowerState@4
_PopLogDisabledSleepReason@0
_PopLogNotifyDevice@12
_PopLogPowerRequestAction@12
_PopLogSleepDisabled@16
_PopLoggingInformation@8
_PopMapInternalActionToIrpAction@12
_PopMarkComponentsBootPhase@4
_PopMarkHiberPhase@4
_PopMarshalSettingValues@16
_PopMeasureEnergyChange@8
_PopMirrorPhysicalMemory@16
_PopMonitorAlpcCallback@12
_PopMonitorInvocation@4
_PopMonitorProcessBrightnessAction@8
_PopMonitorProcessLoop@0
_PopMoveList@8
_PopNetArmDsEvaluationTimer@0
_PopNetArmRefreshTimer@12
_PopNetCheckOpportunisticDs@0
_PopNetCheckUserConnectivityPolicy@0
_PopNetClearConnectivityConstraint@4
_PopNetCompliantNicUpdate@4
_PopNetConnectivityInStandbyCallback@16
_PopNetDisconnectedStandbyModeCallback@16
_PopNetDisengageNetworkRefresh@0
_PopNetEngageNetworkRefresh@0
_PopNetEvaluateStateMask@8
_PopNetEvaluationTimerCallback@8
_PopNetEvaluationWorkerCallback@4
_PopNetGetNextDueRefreshTime@0
_PopNetInitialize@4
_PopNetIsCompliantNicPresent@0
_PopNetIsDisconnectStandbyActive@4
_PopNetIsNetworkRefreshEnabled@0
_PopNetNonCompliantDeviceUpdate@8
_PopNetPublishWnfStateUpdate@4
_PopNetRefreshTimerCallback@8
_PopNetRefreshTimerWorkerCallback@4
_PopNetResiliencyStateChanged@4
_PopNetSetConnectivityConstraint@4
_PopNetSetResiliencyPhaseBias@4
_PopNetUpdateCsConsumptionFlags@0
_PopNetUpdateDsAccounting@4
_PopNetUpdateStandbyRequest@4
_PopNetWnfLowPowerEpochCallback@24
_PopNewProcessorCallback@12
_PopNewWakeInfo@0
_PopNewWakeSource@4
_PopNotifyCallbacksPreSleep@0
_PopNotifyConsoleUserPresent@12
_PopNotifyCsStateExited@0
_PopNotifyDevice@8
_PopNotifyLidStateChange@4
_PopNotifyPolicyDevice@8
_PopNotifyTelemetryOsState@20
_PopOkayToQueueNextWorkItem@4
_PopOpenKey@12
_PopOpenPowerKey@4
_PopOpenThermalLoggingKey@8
_PopOrphanCoolingExtension@4
_PopPausePowerRequestStats@4
_PopPdcCallback@4
_PopPdcCompleteResiliencyCallback@8
_PopPdcCsCheckSystemVolumeDevice@0
_PopPdcCsDeviceNotification@4
_PopPdcIdleResiliencyCallback@8
_PopPdcInvocation@8
_PopPdcRegister@8
_PopPdcSnapDiagnosticContext@4
_PopPdcUpdateDeviceCompliance@0
_PopPepArmIdleTimer@4
_PopPepAttemptAcitivityPromotion@20
_PopPepCancelActivities@12
_PopPepCancelActivityRange@20
_PopPepClearDripsDeviceVetoMask@4
_PopPepCompleteActivity@12
_PopPepCompleteComponentActiveActivity@8
_PopPepCompleteComponentIdleState@8
_PopPepCompleteComponentIdleStateChangeActivity@8
_PopPepCompleteDevicePowerOnActivity@8
_PopPepCompleteVoidActivity@8
_PopPepComponentActive@16
_PopPepComponentGetLatencyIdleState@12
_PopPepComponentGetResidencyIdleState@12
_PopPepComponentGetWork@12
_PopPepComponentSetLatency@16
_PopPepComponentSetResidency@16
_PopPepComponentSetWakeHint@12
_PopPepCountReadyActivities@12
_PopPepDeviceDState@16
_PopPepDevicePoweredOn@12
_PopPepDeviceStarted@4
_PopPepDeviceWaitWake@8
_PopPepEntry@0
_PopPepGetComponentPreferedIdleState@4
_PopPepGetComponentVetoMasks@16
_PopPepGetDevicePlatformStateDependents@8
_PopPepGetDeviceVetoMasks@8
_PopPepGetMinimumComponentIdleState@16
_PopPepGetMinimumDevicePowerState@20
_PopPepGetReadyActivityType@12
_PopPepIdleTimeoutDpcRoutine@16
_PopPepIdleTimeoutRoutine@4
_PopPepInitializeDebuggerMasks@8
_PopPepInitializeVetoMasks@8
_PopPepInsertDevice@8
_PopPepIterateDeviceList@28
_PopPepLockActivityLink@20
_PopPepNotifyIdleState@16
_PopPepPlatformStateRegistered@4
_PopPepProcessEvent@24
_PopPepPromoteActivities@12
_PopPepRegisterComponentPerfStates@16
_PopPepRegisterDevice@20
_PopPepReleaseActivityLink@16
_PopPepRemoveDevice@4
_PopPepRequestWork@8
_PopPepResetDeviceAccountingLevel@0
_PopPepShouldActivityWait@20
_PopPepStartActivity@24
_PopPepStartComponentActivatingActivity@12
_PopPepStartComponentIdleStateChangeActivity@12
_PopPepStartDevicePowerOffActivity@12
_PopPepStartDevicePowerOnActivity@12
_PopPepStartDeviceUnregisterActivity@12
_PopPepStartVoidActivity@12
_PopPepSurprisePowerOn@4
_PopPepTriggerActivity@16
_PopPepTriggerComponentActivatingActivity@12
_PopPepTriggerComponentActiveActivity@12
_PopPepTriggerComponentIdleStateChangeActivity@12
_PopPepTriggerVoidActivity@12
_PopPepTryPowerDownComponent@8
_PopPepTryPowerDownDevice@8
_PopPepTryPowerUpComponent@8
_PopPepUnregisterDevice@4
_PopPepUpdateConstraints@12
_PopPepUpdateDripsDeviceVetoMask@8
_PopPepUpdateIdleState@12
_PopPepUpdateIdleStateRefCount@12
_PopPepVerifyActivities@12
_PopPepWaitForDeviceRelease@4
_PopPepWork@4
_PopPlActivateDeviceIterator@8
_PopPlCalculateDevicePowerDraw@16
_PopPlCommitPowerPlaneRegistration@4
_PopPlIdleDeviceIterator@8
_PopPlInitComponent@20
_PopPlInitComponents@28
_PopPlInitDevice@20
_PopPlInitDevices@28
_PopPlInitPowerPlane@16
_PopPlInitWString@16
_PopPlLockPowerPlane@4
_PopPlLookupComponentPowerProfile@8
_PopPlLookupDevicePowerProfile@8
_PopPlNotifyDeviceDState@16
_PopPlNotifyDeviceFState@20
_PopPlPublishInitialPowerDraw@8
_PopPlPublishSystemPowerChange@8
_PopPlRegisterComponent@4
_PopPlRegisterDevice@4
_PopPlRegisterDeviceIterator@8
_PopPlRegisterPowerPlane@8
_PopPlTraceLogPowerPlane@4
_PopPlUninitWString@4
_PopPlUnlockPowerPlane@4
_PopPlUnregisterComponent@4
_PopPluginAbandonDevice@8
_PopPluginAcpiNotificationStrict@12
_PopPluginComponentActive@16
_PopPluginComponentIdleState@16
_PopPluginDevicePower@12
_PopPluginInitializeSocSubsystemStaticInfo@8
_PopPluginNotifyActive@12
_PopPluginNotifyIdleState@16
_PopPluginPrepareDevice@8
_PopPluginQueryComponentPerfCapabilities@12
_PopPluginQueryComponentPerfSet@32
_PopPluginQueryComponentPerfSetName@20
_PopPluginQueryComponentPerfStates@16
_PopPluginQueryCurrentComponentPerfState@12
_PopPluginQuerySocSubsystemBlockingTime@12
_PopPluginQuerySocSubsystemCount@8
_PopPluginQuerySocSubsystemMetadata@12
_PopPluginRegisterComponentPerfStates@12
_PopPluginRegisterCrashdumpDevice@12
_PopPluginRegisterDevice@24
_PopPluginRequestComponentIdleConstraints@16
_PopPluginRequestComponentPerfState@20
_PopPluginRequestDebuggerTransitionRequirements@12
_PopPluginRequestDeviceIdleConstraints@12
_PopPluginRequestPowerControl@28
_PopPluginResetSocSubsystemAccounting@8
_PopPluginUnregisterDevice@8
_PopPoCoalescingCallback@12
_PopPolicyDeviceRemove@4
_PopPolicyDeviceTargetChange@8
_PopPolicySystemIdle@0
_PopPolicyTimeChange@0
_PopPolicyWorkerAction@0
_PopPolicyWorkerActionPromote@0
_PopPolicyWorkerNotify@0
_PopPolicyWorkerThread@4
_PopPowerActionWatchdog@16
_PopPowerAggregatorActiveToScreenOffStateHandler@4
_PopPowerAggregatorAllocateLogEntry@8
_PopPowerAggregatorAllowModernStandbyPromotion@8
_PopPowerAggregatorAreTargetStatesEqual@8
_PopPowerAggregatorDiagTraceEvent@12
_PopPowerAggregatorDiagTraceHandleIntent@24
_PopPowerAggregatorDiagTraceHandlerInvoke@8
_PopPowerAggregatorDiagTraceInternalStateChange@8
_PopPowerAggregatorDiagTracePdcSleepTransition@20
_PopPowerAggregatorDisengageModernStandby@4
_PopPowerAggregatorDisplayPoweringOnStateHandler@4
_PopPowerAggregatorEngageAggressiveStandbyActions@0
_PopPowerAggregatorEngageModernStandby@4
_PopPowerAggregatorEnterScreenOff@4
_PopPowerAggregatorForceSessionSwitch@4
_PopPowerAggregatorHandleActiveIntent@16
_PopPowerAggregatorHandleDirectedDripsIntent@16
_PopPowerAggregatorHandleIntent@16
_PopPowerAggregatorHandleIntentUnsafe@16
_PopPowerAggregatorHandleModernStandbyIntent@16
_PopPowerAggregatorHandleResumeIntent@16
_PopPowerAggregatorHandleSuspendIntent@16
_PopPowerAggregatorHandleSystemTransitionEndIntent@16
_PopPowerAggregatorHandleSystemTransitionIntent@16
_PopPowerAggregatorHandleSystemTransitionStartIntent@16
_PopPowerAggregatorInitialize@4
_PopPowerAggregatorInvalidStateHandler@4
_PopPowerAggregatorInvokeStateMachine@4
_PopPowerAggregatorIsAtTargetState@4
_PopPowerAggregatorLockAcquire@0
_PopPowerAggregatorLockRelease@0
_PopPowerAggregatorModernStandbyEnterStateHandler@4
_PopPowerAggregatorModernStandbyExitStateHandler@4
_PopPowerAggregatorNotifyCsStateExited@0
_PopPowerAggregatorNotifyDisplayPoweredOn@0
_PopPowerAggregatorNotifyPdcPhasesExit@0
_PopPowerAggregatorNotifyPdcSleepTransition@8
_PopPowerAggregatorNotifyResiliencyReached@0
_PopPowerAggregatorNotifySuspendResume@4
_PopPowerAggregatorNotifySystemWake@4
_PopPowerAggregatorRecordIntent@32
_PopPowerAggregatorScheduleWorker@4
_PopPowerAggregatorScreenOffActiveToActiveStateHandler@4
_PopPowerAggregatorScreenOffEnterStateHandler@4
_PopPowerAggregatorScreenOffExitStateHandler@4
_PopPowerAggregatorSessionSwitchTimerCallback@8
_PopPowerAggregatorSessionSwitchWorker@4
_PopPowerAggregatorSetCurrentState@8
_PopPowerAggregatorSnapDiagnosticContext@4
_PopPowerAggregatorStartNextSession@8
_PopPowerAggregatorSystemTransitionEnterStateHandler@4
_PopPowerAggregatorSystemTransitionExitStateHandler@4
_PopPowerAggregatorVoidStateHandler@4
_PopPowerAggregatorWorker@4
_PopPowerButtonBugcheckConfigure@4
_PopPowerButtonBugcheckWatchCallback@4
_PopPowerButtonSettingCallback@16
_PopPowerButtonSuppressionInit@0
_PopPowerButtonTimerCallback@8
_PopPowerButtonWorkCallback@4
_PopPowerInformationInternal@28
_PopPowerRequestActionInfo@4
_PopPowerRequestCallbackAwayModeRequired@12
_PopPowerRequestCallbackDisplayRequired@12
_PopPowerRequestCallbackExecutionRequired@12
_PopPowerRequestCallbackPerfBoostRequired@12
_PopPowerRequestCallbackWorker@4
_PopPowerRequestClose@16
_PopPowerRequestCreateCommon@12
_PopPowerRequestCreateUserModeRequest@12
_PopPowerRequestDebounceTimerCallback@8
_PopPowerRequestDebounceTimerWorker@4
_PopPowerRequestDelete@4
_PopPowerRequestEvaluatePendingRequestStatus@8
_PopPowerRequestExecutionRequiredSettingCallback@16
_PopPowerRequestExecutionRequiredTimeoutCallback@8
_PopPowerRequestExecutionRequiredTimeoutWorker@4
_PopPowerRequestGetDiagnosticBuffer@12
_PopPowerRequestHandleClose@4
_PopPowerRequestHandleExecutionEnablementUpdate@0
_PopPowerRequestHandleRequestOverrideQueryResponse@4
_PopPowerRequestHandleRequestUpdate@12
_PopPowerRequestInitialize@0
_PopPowerRequestNotificationsBegin@0
_PopPowerRequestNotifyAudioStateChanged@4
_PopPowerRequestNotifyMobileHotspotChanged@4
_PopPowerRequestNotifySystemIdleStateChanged@4
_PopPowerRequestNotifyTtmSessionInitialized@0
_PopPowerRequestNotifyTtmSessionUninitialized@0
_PopPowerRequestNotifyUserSessionAttributed@12
_PopPowerRequestOverrideInitialize@0
_PopPowerRequestReferenceAcquire@8
_PopPowerRequestReferenceRelease@8
_PopPowerRequestRevokeRequests@8
_PopPowerRequestRevokeRequestsForSleep@0
_PopPowerRequestSetExecutionRequiredTimeoutTimer@0
_PopPowerRequestSpecialRequestClear@8
_PopPowerRequestSpecialRequestSet@12
_PopPowerRequestTableAllocate@8
_PopPowerRequestTableCompare@12
_PopPowerRequestTableDeleteEntry@4
_PopPowerRequestTableFree@8
_PopPowerRequestTableInsertEntry@4
_PopPowerRequestTableLookupEntry@4
_PopPowerRequestUnrevokeRequests@8
_PopPowerSettingPendingUpdateWatchdog@8
_PopPowerSourceChangeCallback@16
_PopPowerTransitionTimesInMs@24
_PopPpmHeteroPolicyCallback@16
_PopPreCriticalBatteryNotify@0
_PopPreSleepNotifyWorker@4
_PopPreallocateHibernateMemory@0
_PopPrepChildWake@12
_PopPrepareIoctl@24
_PopPrepareSleep@8
_PopPrintEx
_PopPrintUserActivityPresence@4
_PopProcessPendingSystemIdleResets@0
_PopProcessSessionDisplayStateChange@8
_PopProcessWakeSourceWork@12
_PopProcessorIdleSelectNotification@8
_PopProcessorInformation@16
_PopProcessorNotifyLpiCoordinatedStatesNotification@8
_PopProcessorParkMaskNotification@8
_PopProcessorParkNotification@8
_PopProcessorQueryCoordinatedDependencyNotification@8
_PopProcessorQueryPlatformStateNotification@12
_PopProcessorSetPep@8
_PopPromoteActionFlag@20
_PopPropogateCoolingChange@4
_PopPublishAndPurgePowerRequestStats@12
_PopPublishPowerButtonState@4
_PopPulseSystemIdleEvent@4
_PopQpcTimeInMs@8
_PopQueryBootSessionStandbyActivationInfo@4
_PopQueryInputSuppressionCount@4
_PopQueryPowerButtonBugcheckConfiguration@8
_PopQueryPowerButtonBugcheckEnabled@0
_PopQueryPowerSettingUlong@12
_PopQueueBatteryStatusTimeout@0
_PopQueueDirectedDripsWork@12
_PopQueueQuerySetIrp@4
_PopQueueTargetDpc@8
_PopQueueWorkItem@8
_PopReadErrataDeviceAllowedForInputSuppression@0
_PopReadErrataDeviceAllowedForPowerButtonSuppression@0
_PopReadErrataDisablePrimaryDeviceFastResume@0
_PopReadErrataSkipHibernateMemoryMapValidation@0
_PopReadErrataSkipMemoryOverwriteRequestControlLockAction@0
_PopReadHiberbootGroupPolicy@4
_PopReadHiberbootPolicy@4
_PopReadPagesFromHiberFile@12
_PopReadProducerConsumerBuffer@24
_PopReadRegKeyValue@20
_PopReadResumeContext@8
_PopReadShutdownPolicy@0
_PopReadSystemAwayModePolicy@0
_PopReadUlongPowerKey@24
_PopReadyChildWake@16
_PopReadyParentSleep@16
_PopRecalculateCBTriggerLevels@4
_PopRecordAcDcState@4
_PopRecordBatteryLevel@4
_PopRecordBatteryPercentage@4
_PopRecordDisplayState@4
_PopRecordFirmwareResetReason@4
_PopRecordHibernateDiagnosticInfo@4
_PopRecordLidStateWorker@4
_PopRecordLongPowerButtonPressDetected@4
_PopRecordPepWorkorderBlackboxInformation@0
_PopRecordPhysicalPowerButton@4
_PopRecordPoBlackboxInformation@0
_PopRecordPoIrpBlackboxInformation@0
_PopRecordPowerButton@0
_PopRecordPowerWatchdogBlackboxInformation@0
_PopRecordSleepCheckpoint@4
_PopRecordSleepCheckpointSource@4
_PopRecorderInit@0
_PopRefreshEstimateAfterSpoilingDpc@16
_PopRegisterClient@4
_PopRegisterCoolingExtensionProtection@4
_PopRegisterEnergyEstimation@8
_PopReleaseAdaptiveLock@0
_PopReleaseAwaymodeLock@0
_PopReleasePolicyLock@0
_PopReleasePowerRequestPushLock@0
_PopReleaseRwLock@4
_PopReleaseTransitionLock@4
_PopReleaseUmpoPushLock@0
_PopReleaseWakeSourceSpinLock@4
_PopRemoveReasonRecordByReasonCode@4
_PopRequestCompletion@12
_PopRequestPowerIrp@28
_PopRequestRead@12
_PopRequestShutdownWait@4
_PopRequestWrite@12
_PopResetActionDefaults@0
_PopResetCBTriggers@4
_PopResetCurrentPolicies@0
_PopResetIdlePhaseWatchdogDiagnosticContext@0
_PopResetIdleTime@4
_PopResetRangeEnum@4
_PopResizeHiberFile@16
_PopResolveWatchdogParam@8
_PopRestoreHiberContext@4
_PopResumeApps@8
_PopResumeDeviceIdle@0
_PopResumeServices@8
_PopRtcWakeSettingCallback@16
_PopRunMaximumIrpWorkers@0
_PopRunNormalIrpWorkers@0
_PopRundownPowerSettings@0
_PopRundownThermalRequests@0
_PopS0LowPowerIdleInfo@4
_PopSafeCopyUnicodeString@16
_PopSanityCheckHiberFile@20
_PopSaveHiberContext@4
_PopSaveHiberContextWrapper@4
_PopSaveHibernateEnabled@0
_PopScanIdleList@0
_PopScreenOff@4
_PopScreenOn@4
_PopSendSessionInfo@16
_PopSensorActiveInput@4
_PopSessionClosed@4
_PopSessionConnected@12
_PopSessionConnectionChange@12
_PopSessionCreated@4
_PopSessionDisconnected@8
_PopSessionInputChange@12
_PopSessionWinlogonNotification@8
_PopSetAwayModeStatus@4
_PopSetBootPhaseRange@16
_PopSetCleanShutdownMarker@0
_PopSetConnectedStandbyMarker@12
_PopSetDevicesSystemState@0
_PopSetDisplayStatus@4
_PopSetGlobalUserStatus@8
_PopSetHiberFileMcb@8
_PopSetHiberFileSize@8
_PopSetHiberFileType@8
_PopSetMemoryOverwriteRequestAction@8
_PopSetModernStandbyTransitionReason@8
_PopSetNewPolicyValue@4
_PopSetNotificationWork@4
_PopSetPowerActionState@4
_PopSetPowerActionWatchdogState@4
_PopSetPowerSettingValue@20
_PopSetPowerSettingValueAcDc@12
_PopSetRange@20
_PopSetSessionDisplayStatus@12
_PopSetSessionUserStatus@8
_PopSetShutdownMarker@0
_PopSetSleepMarker@4
_PopSetSystemAwayMode@4
_PopSetSystemShutdownMarker@0
_PopSetSystemState@8
_PopSetUserShutdownMarkerWorker@4
_PopSetWatchdog@12
_PopSetWin32kDisplayTimeout@8
_PopSetWin32kInputTimeout@8
_PopSetupAirplaneModeNotification@0
_PopSetupAudioEventNotification@0
_PopSetupBluetoothChargingNotification@0
_PopSetupFullScrenVideoNotification@0
_PopSetupHighPerfPowerRequest@0
_PopSetupKsrCallbacks@0
_PopSetupMixedRealitytNotification@0
_PopSetupMobileHotspotNotification@0
_PopSetupSleepNotifies@4
_PopSetupSprActiveSessionChangeNotification@0
_PopSetupUserPresencePredictionNotification@0
_PopShutdownHandler@20
_PopShutdownSystem@4
_PopSleepDeviceList@8
_PopSleepPowerSettingCallback@16
_PopSleepstudyCaptureResiliencyStatistics@16
_PopSleepstudyCaptureSessionStatistics@20
_PopSleepstudyInitialize@0
_PopSleepstudyScenarioStopTimerCallback@8
_PopSleepstudyScenarioStopWorker@4
_PopSleepstudySendSessionChangeEvent@8
_PopSleepstudySendWnfNotification@16
_PopSleepstudySnapModernStandbySessionData@0
_PopSleepstudyStartNextSession@8
_PopSnapSystemIdleContext@8
_PopSpoilBatteryEstimate@8
_PopSpoilEstimatesOnPowerStateTransitionWorker@4
_PopSqmAddToStream@16
_PopSqmBatteryUpdate@16
_PopSqmCreateDwordStreamEntry@8
_PopSqmFanEnumeration@0
_PopSqmThermalCriticalEvent@12
_PopSqmThermalCriticalShutdown@4
_PopSqmThermalHibernate@4
_PopSqmThermalUsermodeEvent@20
_PopSqmThermalZoneEnumeration@48
_PopStartMirroring@0
_PopStartStopTtmSxTranstion@4
_PopStateIsSessionSpecific@4
_PopStatsCreatePowerRequest@4
_PopStatsDeletePowerRequest@4
_PopStatsInitPowerRequestLibrary@0
_PopStatsMarkPowerRequestActive@8
_PopStatsMarkPowerRequestInactive@8
_PopStatsNotifyPowerRequestBlocking@4
_PopStatsNotifyPowerRequestCsState@12
_PopStatsScenarioStateChange@8
_PopSuspendApps@8
_PopSuspendResumeInvocation@4
_PopSuspendResumePdc@4
_PopSuspendServices@8
_PopSwitchForcedShutdownSettingCallback@16
_PopSxTransitionEventHandler@12
_PopSystemIdleEventHandler@12
_PopSystemIdleWorker@0
_PopSystemIrpCompletion@12
_PopSystemRequiredSet@4
_PopThermalCoolingPowerSettingCallback@16
_PopThermalCsEntry@4
_PopThermalCsExit@0
_PopThermalHandlePreviousShutdown@0
_PopThermalInit@0
_PopThermalIrpComplete@12
_PopThermalPollingPowerSettingCallback@16
_PopThermalProcessUsermodeEvent@4
_PopThermalReadCounters@16
_PopThermalStandbyEndTracking@4
_PopThermalStandbyNotify@4
_PopThermalSxEntry@0
_PopThermalSxExit@4
_PopThermalTelemetryCallback@8
_PopThermalTelemetryWorker@4
_PopThermalTraceRundownEvents@0
_PopThermalUpdateActiveTimeTracking@8
_PopThermalUpdatePassiveTimeTracking@8
_PopThermalUpdateTelemetryClientCount@4
_PopThermalWorker@4
_PopThermalWriteShutdownToRegistry@8
_PopThermalZoneAdd@4
_PopThermalZoneRemove@4
_PopThermalZoneTimerCallback@8
_PopThermalZoneUpdateCoolingPolicy@0
_PopTimeoutWakeTracking@4
_PopTimestampTargetProcessor@16
_PopTraceBootError@4
_PopTraceCr3Mitigated@4
_PopTraceCr3Tripped@4
_PopTraceEsBgActivityPolicyUpdate@8
_PopTraceEsSetting@12
_PopTraceEsState@32
_PopTraceInputSuppressionActionUpdate@28
_PopTraceMonitorOnRequestUserInput@4
_PopTraceNetRefreshTimerArmed@8
_PopTraceNetRefreshTimerDisarmed@0
_PopTracePowerButtonSuppressionOptedIn@16
_PopTracePowerReconfig@0
_PopTracePowerSettingChange@16
_PopTraceSleepCheckpointInitFailure@4
_PopTraceSmbiosChange@24
_PopTraceStandbyConnectivityRundown@0
_PopTraceStandbyConnectivityUpdate@8
_PopTraceSystemIdleS0LowPowerDoze@4
_PopTraceSystemIdleS0LowPowerDozeTimerArmed@12
_PopTraceSystemIdleS0LowPowerDozeTimerCancelled@4
_PopTraceSystemIdleTimeReset@4
_PopTraceSystemIdleTimeoutInitialization@28
_PopTraceSystemIdleUpdate@48
_PopTraceThermalRequestActiveActivity@4
_PopTraceThermalRequestPassiveHistogram@4
_PopTraceThermalStandbyComplete@12
_PopTraceThermalStandbyInitiated@4
_PopTraceThermalZoneActiveActivity@4
_PopTraceThermalZonePassiveHistogram@4
_PopTraceZoneCr3Mitigated@8
_PopTraceZoneCr3Tripped@8
_PopTransitionCheckpoint@8
_PopTransitionSystemPowerStateEx@4
_PopTransitionTelemetryOsState@8
_PopTransitionToSleep@4
_PopTranslateDependencyArray@24
_PopTriggerDiagTraceAoAcCapability@4
_PopTriggerMonitorPowerEvent@8
_PopUmpoInitializeChannel@0
_PopUmpoInitializeMonitorChannel@0
_PopUmpoMessageCallback@12
_PopUmpoProcessMessage@8
_PopUmpoProcessMessages@0
_PopUmpoProcessPowerMessage@4
_PopUmpoSendFlushSleepStudyLoggerNotification@0
_PopUmpoSendLegacyEvent@4
_PopUmpoSendPowerMessage@12
_PopUmpoSendPowerRequestAction@12
_PopUmpoSendPowerRequestCreate@4
_PopUmpoSendPowerRequestDelete@4
_PopUmpoSendPowerRequestOverrideCleanup@4
_PopUmpoSendPowerRequestOverrideQuery@4
_PopUnicodeStringDeepCopy@16
_PopUnlinkWakeSources@4
_PopUnlockAfterSleepWorker@4
_PopUnregisterPowerSettingCallback@4
_PopUpdateAcDcState@4
_PopUpdateBackgroundCoolingStatus@4
_PopUpdateBsdPowerTransitionReferenceTime@0
_PopUpdateConsoleDisplayState@4
_PopUpdateDiskIdleTimeoutSetting@0
_PopUpdateExternalDisplayState@4
_PopUpdateLastUserInputTime@0
_PopUpdateNonAttributedCpuTimeReference@4
_PopUpdateOverThrottledCount@8
_PopUpdatePdcSystemIdleState@4
_PopUpdatePowerActionWatchdogTimeouts@0
_PopUpdatePowerButtonHoldState@4
_PopUpdateSingleProcessHeteroPolicies@8
_PopUpdateSingleThreadHeteroPolicies@12
_PopUpdateSleepReliabilityDiagConfig@4
_PopUpdateSmartUserPresencePredictions@12
_PopUpdateSmbiosData@20
_PopUpdateSystemIdleConsoleDisplayState@4
_PopUpdateSystemIdleContext@4
_PopUpdateTimeouts@12
_PopUpdateWakeOnVoiceState@4
_PopUpdateWakeSource@4
_PopUpdateWakeSourceWorker@4
_PopUpdateWatchdogNoWorkersEvent@4
_PopUsbErrorWNFNotificationCallback@24
_PopUserIsAdmin@0
_PopUserPresencePredictionModeCallback@16
_PopUserPresentOverride@4
_PopUserPresentSet@4
_PopUserPresentSetWorker@4
_PopUserShutdownCancelled@4
_PopUserShutdownDelayDpcCallback@16
_PopUserShutdownDelayWorkerCallback@4
_PopValidateContextMembership@4
_PopValidateExistingHiberFile@12
_PopValidateHiberFileSize@16
_PopValidatePowerSettingData@12
_PopValidateRTCWake@4
_PopValidateServiceNotification@8
_PopVerifierFlushMemoryBeforeSleep@0
_PopVerifyPowerActionPolicy@4
_PopVerifySystemPowerPolicy@8
_PopVerifySystemPowerState@8
_PopVideoBrightnessSettingsCallback@16
_PopVideoPowerSettingCallback@16
_PopWakeDeviceList@8
_PopWakeInfoDereference@4
_PopWakeInfoReference@4
_PopWakeSourceGetDeviceProperty@12
_PopWakeSourceInit@0
_PopWakeSourceIsChild@8
_PopWakeSourceIsParent@8
_PopWakeSourceSize@4
_PopWakeSourceTimeoutDpc@16
_PopWakeSourceTimeoutWorker@4
_PopWatchdogDpc@16
_PopWatchdogInit@0
_PopWatchdogWorker@4
_PopWin32CalloutWatchdogCallbackLiveDump@24
_PopWin32kPowerSettingCallback@16
_PopWnfAirplaneModeCallback@24
_PopWnfAudioCallback@24
_PopWnfBluetoothChargingCallback@24
_PopWnfFullscreenVideoCallback@24
_PopWnfInSupCallback@24
_PopWnfMixedRealityCallback@24
_PopWnfMobileHotspotCallback@24
_PopWnfSprActiveSessionChangeCallback@24
_PopWnfUserAwayPredictionCallback@24
_PopWriteChecksumPages@4
_PopWriteHeaderPages@8
_PopWriteHiberPages@16
_PopWriteImageHeader@20
_PopZeroHiberFile@8
_PotentialNewSymbol@4
_PpBootDDBHelper@16
_PpCheckInDriverDatabase@24
_PpDevCfgCheckDeviceNeedsUpdate@12
_PpDevCfgInit@0
_PpDevCfgProcessDevice@12
_PpDevCfgProcessDeviceClass@4
_PpDevCfgProcessDeviceExtensions@4
_PpDevCfgProcessDeviceOperations@8
_PpDevCfgProcessDeviceReset@4
_PpDevCfgProcessDevices@0
_PpDevCfgTraceDeviceStart@4
_PpDevNodeInsertIntoTree@8
_PpDevNodeLockTree@4
_PpDevNodeRemoveFromTree@4
_PpDevNodeUnlockTree@4
_PpDeviceRegistration@16
_PpForEachDeviceInstanceDriver@12
_PpHotSwapGetDevnodeRemovalPolicy@12
_PpHotSwapInitRemovalPolicy@4
_PpHotSwapUpdateRemovalPolicy@4
_PpInitGetGroupOrderIndex@4
_PpInitSystem@0
_PpInitializeBootDDB@8
_PpIrpAllocateDeviceUsageNotification@4
_PpIrpQueryBusInformation@8
_PpIrpQueryCapabilities@8
_PpIrpQueryResourceRequirements@8
_PpLastGoodDeleteFilesCallback@16
_PpLastGoodDoBootProcessing@0
_PpMarkDeviceStackExtensionFlag@12
_PpPagePathAssign@4
_PpPagePathRelease@4
_PpProcessClearProblem@4
_PpProfileBeginHardwareProfileTransition@4
_PpProfileCancelHardwareProfileTransition@0
_PpProfileCancelTransitioningDock@8
_PpProfileCommitTransitioningDock@8
_PpProfileIncludeInHardwareProfileTransition@8
_PpProfileInit@0
_PpProfileMarkAllTransitioningDocksEjected@0
_PpProfileQueryHardwareProfileChange@16
_PpReleaseBootDDB@0
_PpResetProblemDevices@8
_PpSystemHiveLimitCallback@8
_PpmAbortCoordinatedIdleState@4
_PpmAcquireLock@4
_PpmAllocWmiEvent@12
_PpmAllocatePerfCheck@4
_PpmAllocateQueryTable@4
_PpmApplyIdlePolicy@4
_PpmApplyIdlePolicyChanges@12
_PpmApplyProfile@4
_PpmBeginHighPerfRequest@0
_PpmBeginProfileAccumulation@12
_PpmCapturePerformanceDistribution@20
_PpmCapturePerformanceDistributionCallback@12
_PpmCheckAcquireProcessorPerformance@0
_PpmCheckAdjustNextPerfCheck@0
_PpmCheckApplyParkConstraints@0
_PpmCheckApplyPerfConstraints@4
_PpmCheckApplyResetNotification@0
_PpmCheckArmPeriod@4
_PpmCheckComputeEnergy@0
_PpmCheckComputeHeteroResponse@0
_PpmCheckContinueExecution@0
_PpmCheckCoordinatedIdleState@8
_PpmCheckCoordinatedStateInitiator@12
_PpmCheckCustomRun@4
_PpmCheckIdleVeto@4
_PpmCheckInit@0
_PpmCheckInitProcessors@4
_PpmCheckMaintainArtificialDomain@0
_PpmCheckMakeupSkippedChecks@0
_PpmCheckPausePpmEngineForSx@0
_PpmCheckPeriodicStart@16
_PpmCheckPreConditionsForDeepSleep@4
_PpmCheckProcessorInit@12
_PpmCheckReInit@0
_PpmCheckRecordAllUtility@0
_PpmCheckReportComplete@0
_PpmCheckReset@12
_PpmCheckResetProcessors@4
_PpmCheckResumePpmEngineFromSx@0
_PpmCheckResumeStatisticsCollection@0
_PpmCheckRun@16
_PpmCheckSnapAllDeliveredPerformance@0
_PpmCheckSnapAllUtility@0
_PpmCheckStart@4
_PpmCheckUpdateDeliveredPerformanceIfTracingEnabled@0
_PpmClearExitLatencySamplingPercentage@0
_PpmClearSimulatedIdle@4
_PpmClearSimulatedLoad@4
_PpmCompareAndApplyPolicySettings@12
_PpmComputeIdleDurationHint@16
_PpmContinueActiveTimeAccumulation@12
_PpmConvertTime@24
_PpmConvertTimeFrom@16
_PpmConvertTimeTo@16
_PpmDeepestHardwareIdleState@4
_PpmDisableHighPerfRequestDeferredExpiration@4
_PpmDisableProfile@4
_PpmEnableProfile@4
_PpmEnableWmiInterface@0
_PpmEndHighPerfRequest@4
_PpmEndProfileAccumulation@12
_PpmEstimateIdleDuration@40
_PpmEventAutonomousModeChange@8
_PpmEventBiosCapChange@8
_PpmEventCoordinatedIdleTransition@12
_PpmEventCoreParkingSoftParkedStateChange@8
_PpmEventCoreParkingStateChange@8
_PpmEventCoreParkingStateChangeEx@8
_PpmEventDomainPerfStateChange@4
_PpmEventEnterPlatformIdleState@4
_PpmEventHeteroConfigUpdate@0
_PpmEventHeteroPolicy@4
_PpmEventHgsUpdate@0
_PpmEventIdleDurationExpiration@4
_PpmEventIdleStateChange@8
_PpmEventInitialize@0
_PpmEventLPICoreParking@8
_PpmEventLegacyProcessorPerfStateChange@4
_PpmEventMediaBufferingNotify@4
_PpmEventParkNodeCapChange@16
_PpmEventParkNodeClassRecordedStats@20
_PpmEventParkNodeParkHintChanged@12
_PpmEventParkNodePreference@28
_PpmEventPlatformVetoRequest@12
_PpmEventPlatformVetoRundown@0
_PpmEventProcessorPerfStateChange@12
_PpmEventProcessorVetoRequest@16
_PpmEventProcessorVetoRundown@4
_PpmEventQosSupport@4
_PpmEventStaticPolicyRundown@0
_PpmEventThermalCapChange@8
_PpmEventTraceAccountingBucketIntervalsRundown@0
_PpmEventTraceControlCallback@36
_PpmEventTraceCoordinatedIdleStates@0
_PpmEventTraceDripsAccountingSnapshot@8
_PpmEventTraceExpectedUtility@4
_PpmEventTraceFailedPerfCheckStart@8
_PpmEventTraceHeteroDistributeUtility@12
_PpmEventTraceHeteroResponse@28
_PpmEventTraceLPIState@0
_PpmEventTraceMakeupPerfCheck@0
_PpmEventTraceParkNodeRundown@4
_PpmEventTracePerfCheckStop@0
_PpmEventTracePlatformIdleAccounting@0
_PpmEventTracePpmProfileStatusRundown@0
_PpmEventTracePreVetoAccounting@12
_PpmEventTraceProcessorIdle@4
_PpmEventTraceProcessorIdleAccounting@12
_PpmEventTraceProcessorPerformance@4
_PpmEventTraceProcessorPerformanceDomainRundown@4
_PpmEventTraceProfileChange@8
_PpmEventTraceProfileEnable@8
_PpmEventTraceProfileSetting@32
_PpmEventTraceProfiles@4
_PpmEventTraceSoftCoreParkingSelection@40
_PpmEventVetoReasonRundown@0
_PpmEventVpQosChange@4
_PpmExitCoordinatedIdleState@8
_PpmFireWmiEvent@16
_PpmGetDeepSleepPlatformStateIndex@0
_PpmGetIdleConstrainedMask@4
_PpmGetIdleGenerationCounter@4
_PpmGetPerfPolicyClass@4
_PpmGetPlatformSelectionVetoCounts@12
_PpmGetPolicyAction@8
_PpmGetThroughputInfoCallback@12
_PpmHeteroComputeBias@8
_PpmHeteroDetectHgsCores@4
_PpmHeteroDispatchHgsInterrupt@0
_PpmHeteroDistributeUtility@0
_PpmHeteroGetHgsEnablementStatus@0
_PpmHeteroHgsBackupInit@0
_PpmHeteroHgsBackupProcessorInit@12
_PpmHeteroHgsProcessorInit@4
_PpmHeteroHgsUpdateDpcRoutine@16
_PpmHeteroHgsUpdateWorker@4
_PpmHeteroInitializeHgsSupport@0
_PpmHeteroNormalizedUtilityToUtility@8
_PpmHeteroRestrictToFavoredClass@8
_PpmHeteroUpdateHgsConfiguration@0
_PpmHeteroUtilityGreaterThanOrEqualThreshold@28
_PpmHighPerfRequestExpiration@16
_PpmHvGetRuntimesForProcessor@12
_PpmHvSetVirtualProcessorQos@4
_PpmHvUseNativeAlgorithms@0
_PpmIdleCaptureCsVetoAccounting@16
_PpmIdleCheckCoordinatedDependencies@44
_PpmIdleCheckCoordinatedDependency@40
_PpmIdleCheckCoordinatedProcessorDependency@16
_PpmIdleCheckCoordinatedStateEligibility@36
_PpmIdleCheckProcessorStateEligibility@28
_PpmIdleCompleteExitLatencyTrace@36
_PpmIdleCsVetoAccountingDeviceUpdate@8
_PpmIdleCsVetoAccountingResiliencyUpdate@4
_PpmIdleCsVetoAccountingUpdateBlock@12
_PpmIdleEnableIdleDurationExpirationTimeout@0
_PpmIdleGetCIndexForState@4
_PpmIdleInitializeConcurrency@12
_PpmIdleInstallConcurrency@12
_PpmIdleInstallDefaultStates@12
_PpmIdleLockProcessor@4
_PpmIdlePrevetoWatchdog@16
_PpmIdleRecheckCoordinatedIdleMask@12
_PpmIdleRegisterDefaultStates@0
_PpmIdleRemoveConcurrency@12
_PpmIdleRemoveVetoBias@0
_PpmIdleRollbackCoordinatedSelection@8
_PpmIdleSelectCoordinatedProcessorDependency@28
_PpmIdleSelectStates@32
_PpmIdleSetSynchronizationState@8
_PpmIdleSnapConcurrency@8
_PpmIdleSnapConcurrencyIdleTime@12
_PpmIdleTransitionStall@4
_PpmIdleUnlockProcessor@4
_PpmIdleUpdateConcurrency@20
_PpmIdleUpdateCoordinatedDependencies@4
_PpmIdleUpdateHvStates@4
_PpmIdleUpdatePlatformDependencies@4
_PpmIdleUpdateSelectionStatistics@12
_PpmIdleUpdateSynchronizationState@12
_PpmIdleUsingStateSelection@0
_PpmIdleWaitForDependentTransitions@4
_PpmInfoAdjustSetting@24
_PpmInfoApplyMinMaxConstraint@8
_PpmInfoApplySettingUpdate@12
_PpmInfoConfigComparer
_PpmInfoRegisterCallbacks@0
_PpmInfoTraceProfileSettings@0
_PpmInfoWriteData@20
_PpmInitCoreParkingPolicy@0
_PpmInitHeteroEngine@0
_PpmInitHeteroPolicy@0
_PpmInitIdlePolicy@0
_PpmInitIllegalThrottleLogging@0
_PpmInitPolicyConfiguration@0
_PpmInstallCoordinatedIdleStates@4
_PpmInstallFeedbackCounters@8
_PpmInstallNewIdleDomains@12
_PpmInstallNewIdleStates@12
_PpmInstallPlatformIdleStates@4
_PpmInterlockedUpdateTimeNoFence@16
_PpmInternalPlatformIdleVeto@8
_PpmInternalProcessorIdleVeto@12
_PpmMediaBufferingWorker@4
_PpmParkApplyForcedMask@8
_PpmParkApplyPolicy@0
_PpmParkCalculateCoreParkingMask@0
_PpmParkCalculateUnparkCount@0
_PpmParkClearForcedMask@4
_PpmParkCompleteMakeup@0
_PpmParkComputeDiff@0
_PpmParkComputeSnapStatistics@28
_PpmParkComputeUnparkMask@44
_PpmParkDistributeAllUtility@0
_PpmParkDistributeUtility@28
_PpmParkFindOverUtilizedProcessors@8
_PpmParkMaximumCoresParked@0
_PpmParkParkingAvailable@0
_PpmParkRecordNodeStatistics@4
_PpmParkRegisterParking@0
_PpmParkReportMask@0
_PpmParkReportParkedCore@4
_PpmParkReportParkedCores@0
_PpmParkReportSoftParkChange@4
_PpmParkReportUnparkedCore@4
_PpmParkReportUnparkedCores@0
_PpmParkSetLpiCap@12
_PpmParkSnapNodeIdleTime@12
_PpmParkSnapNodeStatistics@0
_PpmParkSteerInterrupts@0
_PpmParkUnblockIdle@0
_PpmParkUpdateConcurrencyTracking@4
_PpmPdcNotifyMediaBufferingUpdate@4
_PpmPerfAccumulateBrandedFrequency@8
_PpmPerfAction@16
_PpmPerfApplyCapsAndFloors@16
_PpmPerfApplyDomainState@4
_PpmPerfApplyDomainStates@0
_PpmPerfApplyLatencyHint@4
_PpmPerfApplyLatencyHints@0
_PpmPerfApplyProcessorState@8
_PpmPerfApplyProcessorStates@0
_PpmPerfArbitratorApplyProcessorState@12
_PpmPerfCalculateQosClassPolicies@4
_PpmPerfCheckForIllegalProcessorThrottle@4
_PpmPerfCheckRequired@4
_PpmPerfClearBootOverrides@0
_PpmPerfClearResponsivenessHints@0
_PpmPerfCommitPerformance@0
_PpmPerfComputePerfReductionTolerance@4
_PpmPerfControlExecuteAction@4
_PpmPerfFeedbackCounterRead@12
_PpmPerfFeedbackCounterUpdate@4
_PpmPerfForceDomainStates@0
_PpmPerfGetBrandedFrequency@8
_PpmPerfGetCurrentFrequency@8
_PpmPerfGetCurrentState@24
_PpmPerfGetVmPerfConfig@8
_PpmPerfInitialize@0
_PpmPerfIsDeadlineBoostActive@0
_PpmPerfIsLatencyBoostActive@0
_PpmPerfLatencySensitivityHintWorker@4
_PpmPerfMinimumPerfReached@0
_PpmPerfProcCapFloorSettingCallback@16
_PpmPerfQueryPackageId@4
_PpmPerfQueryPackageProcessorCount@4
_PpmPerfQueueAction@8
_PpmPerfReApplyStates@0
_PpmPerfReadFeedback@0
_PpmPerfRecordUtility@8
_PpmPerfRegisterHvCap@4
_PpmPerfRegisterHvPerfStateCounters@4
_PpmPerfRegisterHvStates@4
_PpmPerfRegisterNativePerfStates@4
_PpmPerfResetHistory@4
_PpmPerfResetHistoryAll@0
_PpmPerfResizeHistory@4
_PpmPerfResizeHistoryAll@0
_PpmPerfSelectDomainState@4
_PpmPerfSelectDomainStates@0
_PpmPerfSelectProcessorState@4
_PpmPerfSelectProcessorStates@0
_PpmPerfSetAllDomainsToUpdate@0
_PpmPerfSnapDeliveredPerformance@16
_PpmPerfSnapUtility@4
_PpmPerfTelemetryCallback@8
_PpmPerfTelemetryWorker@4
_PpmPerfUpdateDomainPolicy@4
_PpmPerfUpdateQosDisableReasons@4
_PpmPolicyNameToGuid@8
_PpmPostProcessMediaBuffering@0
_PpmProcessSettingsFromQueryTable@12
_PpmProfileAcDcUpdate@0
_PpmQueryDripsResidency@0
_PpmQueryPlatformStateResidency@8
_PpmQueryTime@0
_PpmReapplyPerfPolicy@4
_PpmRegisterPerfCap@4
_PpmRegisterPerfStates@8
_PpmRegisterProfiles@8
_PpmRegisterSpmSettings@4
_PpmRegisterVetoList@4
_PpmReinitializeHeteroEngine@4
_PpmReleaseLock@4
_PpmRemoveIdleStates@12
_PpmResetIdlePolicy@4
_PpmResetInterruptRate@12
_PpmResetPerfEngineForProcessor@4
_PpmResetPerfTimes@4
_PpmResetPerformanceAccumulation@4
_PpmResetPlatformIdleAccounting@4
_PpmResetProcessorIdleAccounting@12
_PpmResetProfileSettings@4
_PpmScaleIdleStateValues@4
_PpmSetExitLatencySamplingPercentage@4
_PpmSetPlatformIdleDurationHint@8
_PpmSetProfilePolicySetting@20
_PpmSetSimulatedIdle@4
_PpmSetSimulatedLoad@4
_PpmSnapPerformanceAccumulation@20
_PpmStartIllegalProcessorThrottleLogging@12
_PpmStopIllegalProcessorThrottleLogging@12
_PpmTestAndLockProcessor@12
_PpmTraceExitLatency@24
_PpmTracePerfIdleRundown@12
_PpmTranslateIdleAccounting@12
_PpmTranslatePlatformIdleAccounting@8
_PpmTryAcquireLock@4
_PpmUnlockProcessors@8
_PpmUpdateIdleContext@8
_PpmUpdateIdleDomains@4
_PpmUpdateIdleStates@4
_PpmUpdateIdleStatesInplace@12
_PpmUpdateIdleVeto@16
_PpmUpdateNoopFunction@12
_PpmUpdatePerfStates@4
_PpmUpdatePerformanceFeedback@20
_PpmUpdatePlatformIdleAccounting@12
_PpmUpdatePlatformIdleVeto@4
_PpmUpdateProcessorIdleAccounting@4
_PpmUpdateProcessorIdleVeto@4
_PpmUpdateProcessorPolicy@8
_PpmUpdateProcessorPolicyCallback@12
_PpmUpdateTargetProcessorPolicy@16
_PpmUpdateTimeAccumulation@16
_PpmUtilityComparer
_PpmWmiDispatch@24
_PpmWmiFireIdleAccountingEvent@12
_PpmWmiGetAllData@24
_PpmWmiIdleAccountingProcedure@16
_PpmWmiIdleAccountingWork@4
_PpmWmiInit@0
_PpmWmiRegisterInfo@20
_ProbeForRead@12
_ProbeForWrite@12
_ProcessForExeModule@16
_ProducerConsumerBufferComplete@16
_ProducerConsumerCopyFromContextBuffer@16
_ProducerConsumerCopyToContextBuffer@16
_ProducerGetBuffer@16
_PromoteNode@4
_PropertyEval@32
_Ps386GetVdmIoHandler@16
_PsAcquireProcessExitSynchronization@4
_PsAcquireSiloHardReference@4
_PsAddProcessEnergyValues@8
_PsAllocSiloContextSlot@8
_PsAssignImpersonationToken@8
_PsAssignProcessToJobObject@12
_PsAssignThreadId@4
_PsAttachSiloToCurrentThread@4
_PsBoostThreadIo@8
_PsBoostThreadIoEx@16
_PsBoostThreadIoQoS@8
_PsBoostThreadOutstandingIoQoS@4
_PsBootPhaseComplete@0
_PsCallImageNotifyRoutines@16
_PsCaptureExceptionPort@4
_PsCaptureUserProcessParameters@8
_PsChangeQuantumTable@8
_PsChargePoolQuota@12
_PsChargeProcessNonPagedPoolQuota@8
_PsChargeProcessPagedPoolQuota@8
_PsChargeProcessPoolQuota@12
_PsChargeProcessQuota@12
_PsChargeProcessWakeCounter@16
_PsChargeSharedPoolQuota@12
_PsConvertToGuiThread@0
_PsCreateMinimalProcess@40
_PsCreateSiloContext@20
_PsCreateSystemThread@28
_PsCreateSystemThreadEx@36
_PsDereferenceImpersonationToken@4
_PsDereferenceKernelStack@4
_PsDereferencePartition@8
_PsDereferencePrimaryToken@4
_PsDereferenceSiloContext@4
_PsDetachSiloFromCurrentThread@4
_PsDisableImpersonation@8
_PsEncodeThreadWorkOnBehalfTicket@8
_PsEnforceExecutionLimits@0
_PsEnterPriorityRegion@0
_PsEnumProcessThreads@12
_PsEnumProcesses@8
_PsEstablishWin32Callouts@4
_PsFreeSiloContextSlot@4
_PsFreezeProcess@8
_PsGetAllocatedFullProcessImageName@8
_PsGetAllocatedFullProcessImageNameEx@8
_PsGetBaseIoPriorityThread@4
_PsGetBaseTrapFrame@8
_PsGetContextThread@12
_PsGetCurrentProcess@0
_PsGetCurrentProcessId@0
_PsGetCurrentProcessSessionId@0
_PsGetCurrentProcessWin32Process@0
_PsGetCurrentServerSilo@0
_PsGetCurrentServerSiloGlobals@0
_PsGetCurrentServerSiloName@0
_PsGetCurrentSilo@0
_PsGetCurrentThread@0
_PsGetCurrentThreadId@0
_PsGetCurrentThreadPreviousMode@0
_PsGetCurrentThreadProcess@0
_PsGetCurrentThreadProcessId@0
_PsGetCurrentThreadStackBase@0
_PsGetCurrentThreadStackLimit@0
_PsGetCurrentThreadTeb@0
_PsGetCurrentThreadWin32Thread@0
_PsGetCurrentThreadWin32ThreadAndEnterCriticalRegion@4
_PsGetDefaultWsMaximum@0
_PsGetEffectiveContainerId@12
_PsGetEffectiveServerSilo@4
_PsGetHostSilo@0
_PsGetIoPriorityThread@4
_PsGetJobEffectiveFreezeCount@4
_PsGetJobLastThrottledIoTime@4
_PsGetJobLock@4
_PsGetJobProperty@8
_PsGetJobServerSilo@8
_PsGetJobSessionId@4
_PsGetJobSilo@8
_PsGetJobUIRestrictionsClass@4
_PsGetKeepAliveCountProcess@8
_PsGetNextPartition@4
_PsGetNextPartitionUnsafe@4
_PsGetNextProcess@4
_PsGetNextProcessEx@4
_PsGetNextProcessThread@8
_PsGetPagePriorityThread@4
_PsGetParentSilo@4
_PsGetPermanentSiloContext@12
_PsGetPreviousProcess@4
_PsGetProcessCommonJob@8
_PsGetProcessCreateTimeQuadPart@4
_PsGetProcessDebugPort@4
_PsGetProcessDeepFreezeStats@8
_PsGetProcessDxgProcess@4
_PsGetProcessExitProcessCalled@4
_PsGetProcessExitStatus@4
_PsGetProcessExitTime@0
_PsGetProcessId@4
_PsGetProcessImageFileName@4
_PsGetProcessInheritedFromUniqueProcessId@4
_PsGetProcessJob@4
_PsGetProcessPeb@4
_PsGetProcessPriorityClass@4
_PsGetProcessProtection@4
_PsGetProcessSectionBaseAddress@4
_PsGetProcessSecurityPort@4
_PsGetProcessSequenceNumber@4
_PsGetProcessServerSilo@4
_PsGetProcessSessionId@4
_PsGetProcessSessionIdEx@4
_PsGetProcessSignatureLevel@8
_PsGetProcessSilo@4
_PsGetProcessStartKey@4
_PsGetProcessWin32Process@4
_PsGetProcessWin32WindowStation@4
_PsGetServerSiloActiveConsoleId@4
_PsGetServerSiloGlobals@4
_PsGetServerSiloServiceSessionId@4
_PsGetServerSiloState@4
_PsGetSiloBySessionId@8
_PsGetSiloContainerId@4
_PsGetSiloContext@12
_PsGetSiloIdentifier@4
_PsGetSiloMonitorContextSlot@4
_PsGetThreadCreateTime@4
_PsGetThreadExitStatus@4
_PsGetThreadFreezeCount@4
_PsGetThreadHardErrorsAreDisabled@4
_PsGetThreadId@4
_PsGetThreadProcess@4
_PsGetThreadProcessId@4
_PsGetThreadProperty@12
_PsGetThreadServerSilo@4
_PsGetThreadSessionId@4
_PsGetThreadTeb@4
_PsGetThreadWin32Thread@4
_PsGetVersion@16
_PsGetWin32KFilterSet@0
_PsGetWorkOnBehalfThread@8
_PsImpersonateClient@20
_PsImpersonateContainerOfThread@4
_PsInitSystem@8
_PsInitializeQuotaSystem@4
_PsInsertPermanentSiloContext@12
_PsInsertPermanentSiloContextEx@16
_PsInsertSiloContext@12
_PsInsertVirtualizedTimer@20
_PsInvalidateStartAddress@4
_PsInvokeWin32Callout@16
_PsIoRateControlOverQuotaNotify@20
_PsIoRateControlReference@20
_PsIsCurrentThreadInServerSilo@0
_PsIsCurrentThreadPrefetching@0
_PsIsDiskCountersEnabled@0
_PsIsHostSilo@4
_PsIsImageNotifyEnabled@0
_PsIsJobParentImmutable@4
_PsIsProcessAppContainer@4
_PsIsProcessBeingDebugged@4
_PsIsProcessCommitRelinquished@4
_PsIsProcessInAppSilo@4
_PsIsProcessInSilo@8
_PsIsProcessLoggingEnabled@8
_PsIsProcessPrimaryTokenFrozen@4
_PsIsProtectedProcess@4
_PsIsProtectedProcessLight@4
_PsIsServerSilo@4
_PsIsServiceSession@4
_PsIsSiloStartedAndNotTerminated@4
_PsIsSystemProcess@4
_PsIsSystemThread@4
_PsIsThreadAttachedToSpecificSilo@8
_PsIsThreadImpersonating@4
_PsIsThreadInSilo@8
_PsIsThreadTerminating@4
_PsIsWin32KFilterAuditEnabled@0
_PsIsWin32KFilterAuditEnabledForProcess@4
_PsIsWin32KFilterEnabled@0
_PsIsWin32KFilterEnabledForProcess@4
_PsLeavePriorityRegion@0
_PsLocateSystemDlls@0
_PsLookupProcessByProcessId@8
_PsLookupProcessThreadByCid@12
_PsLookupThreadByThreadId@8
_PsMakeSiloContextPermanent@8
_PsMapSystemDlls@8
_PsNotifyWriteToExecutableMemory@8
_PsOpenProcess@24
_PsOpenThread@24
_PsOpenTokenOfProcess@8
_PsPicoWalkUserStack@8
_PsQueryActivityModerationUserSettings@4
_PsQueryCpuQuotaInformation@16
_PsQueryCurrentApiSetSchema@0
_PsQueryFullProcessImageName@16
_PsQueryJobMemoryUsageByProcess@20
_PsQueryProcessAttributes@12
_PsQueryProcessAttributesByToken@12
_PsQueryProcessCommandLine@20
_PsQueryProcessEnergyValues@8
_PsQueryProcessExceptionFlags@12
_PsQueryProcessSignatureMitigationPolicy@8
_PsQueryRuntimeProcess@8
_PsQuerySectionSignatureInformation@8
_PsQueryStatisticsProcess@8
_PsQuerySystemDllInfo@4
_PsQueryThreadStartAddress@8
_PsQueryTotalCycleTimeProcess@8
_PsQuitNextPartition@4
_PsQuitNextProcess@4
_PsQuitNextProcessThread@4
_PsReferenceEffectiveToken@20
_PsReferenceImpersonationToken@16
_PsReferenceImpersonationTokenEx@24
_PsReferenceKernelStack@4
_PsReferencePartitionByHandle@24
_PsReferencePartitionSafe@8
_PsReferencePartitionSystemProcess@8
_PsReferencePrimaryToken@4
_PsReferenceProcessFilePointer@8
_PsReferenceSiloContext@4
_PsRegisterAltSystemCallHandler@8
_PsRegisterPicoProvider@8
_PsRegisterSiloMonitor@8
_PsReleaseProcessExitSynchronization@4
_PsReleaseProcessWakeCounter@8
_PsReleaseSiloHardReference@4
_PsRemoveCreateThreadNotifyRoutine@4
_PsRemoveLoadImageNotifyRoutine@4
_PsRemoveSiloContext@12
_PsRemoveVirtualizedTimer@16
_PsReplaceSiloContext@16
_PsReportProcessMemoryLimitViolation@0
_PsRestoreImpersonation@8
_PsResumeProcess@4
_PsResumeThread@8
_PsReturnPoolQuota@12
_PsReturnProcessNonPagedPoolQuota@8
_PsReturnProcessPageFileQuota@8
_PsReturnProcessPagedPoolQuota@8
_PsReturnProcessQuota@12
_PsReturnSharedPoolQuota@12
_PsRevertThreadToSelf@4
_PsRevertToSelf@0
_PsRevertToUserPagePriorityThread@8
_PsRootSiloInformation@12
_PsSetContextThread@12
_PsSetCpuQuotaInformation@12
_PsSetCreateProcessNotifyRoutine@8
_PsSetCreateProcessNotifyRoutineEx2@12
_PsSetCreateProcessNotifyRoutineEx@8
_PsSetCreateThreadNotifyRoutine@4
_PsSetCreateThreadNotifyRoutineEx@8
_PsSetCurrentThreadPrefetching@4
_PsSetExeModerationState@12
_PsSetIoPriorityThread@8
_PsSetJobProperty@12
_PsSetLdtEntries@24
_PsSetLegoNotifyRoutine@4
_PsSetLoadImageNotifyRoutine@4
_PsSetLoadImageNotifyRoutineEx@8
_PsSetPagePriorityThread@8
_PsSetProcessDxgProcess@8
_PsSetProcessFaultInformation@8
_PsSetProcessHandleTracingInformation@8
_PsSetProcessLdtInfo@8
_PsSetProcessPriorityByClass@8
_PsSetProcessPriorityClass@8
_PsSetProcessSecurityPort@8
_PsSetProcessTelemetryAppState@8
_PsSetProcessWin32Process@12
_PsSetProcessWindowStation@8
_PsSetSystemPagePriorityThread@8
_PsSetThreadHardErrorsAreDisabled@8
_PsSetThreadProperty@12
_PsSetThreadWin32Thread@12
_PsSetVmProcessorHostProcess@4
_PsShutdownSystem@0
_PsStartSiloMonitor@4
_PsSuspendProcess@4
_PsSuspendThread@8
_PsSwapImpersonationToken@12
_PsSwapProcessWorkingSet@8
_PsTerminateMinimalProcess@8
_PsTerminateProcess@8
_PsTerminateServerSilo@8
_PsTerminateSystemThread@4
_PsTestProtectedProcessIncompatibility@12
_PsThawProcess@8
_PsTimerResolutionActive@4
_PsTransferProcessQuotaToSharedQuota@12
_PsUnregisterSiloMonitor@4
_PsUpdateActiveProcessAffinity@0
_PsUpdateComponentPower@16
_PsUpdateDiskCounters@32
_PsWaitForAllProcesses@0
_PsWatchWorkingSet@12
_PsWow64GetProcessMachine@4
_PsWow64GetSupportedArchitectures@16
_PsWow64IsMachineSupported@4
_PsWrapApcWow64Thread@8
_Psp386CreateVdmIoListHead@4
_Psp386GetVdmIoHandler@8
_Psp386InsertVdmIoHandlerBlock@8
_Psp386InstallIoHandler@16
_Psp386RemoveIoHandler@12
_PspAddAccountingValues@8
_PspAddPartitionToGlobalList@4
_PspAddProcessToWorkingSetChangeList@4
_PspAddSchedulingGroupToJobChain@8
_PspAdjustContextForInstrumentation@8
_PspAdjustKeepAliveCountProcess@16
_PspAllocStorage@4
_PspAllocateAndQueryNotificationChannel@12
_PspAllocateAndQueryProcessNotificationChannel@12
_PspAllocatePartition@28
_PspAllocateProcess@60
_PspAllocateRateControl@4
_PspAllocateThread@48
_PspApiSetCopyToSystemSpace@16
_PspApplyIFEOPerfOptions@12
_PspApplyJobChainLimitsToProcess@12
_PspApplyJobLimitsToProcess@8
_PspApplyMitigationOptions@28
_PspApplyTimerDelayProcess@8
_PspApplyWin32kFilterOptions@8
_PspApplyWorkingSetLimits@8
_PspApplyWorkingSetLimitsToProcess@4
_PspAssignPrimaryToken@16
_PspAssignProcessQuotaBlock@12
_PspAssignProcessToJob@16
_PspAssignProcessToJobList@12
_PspAssignSiloSystemRootPath@8
_PspAssociateCompletionPortCallback@8
_PspAttachSession@12
_PspBoostJobIoPriorityCallback@8
_PspBuildCreateProcessContext@16
_PspCallJobHierarchyCallbacks@24
_PspCallProcessNotifyRoutines@12
_PspCallThreadNotifyRoutines@12
_PspCaptureAndValidateUnicodeString@8
_PspCaptureCreateInfo@12
_PspCaptureProcessParameters@12
_PspCaptureUserProcessParameters@20
_PspCatchCriticalBreak@20
_PspChangeJobMemoryUsageByProcess@16
_PspChangeProcessExecutionState@4
_PspChargeJobWakeCounter@32
_PspChargeProcessWakeCounter@28
_PspCheckConditionalWakeCharge@12
_PspCheckForInvalidAccessByProtection@12
_PspCheckJobAccessState@8
_PspClearProcessThreadCidRefs@12
_PspCloseActivityReference@16
_PspClosePartitionHandle@16
_PspCompleteHardDereferenceSiloDeferred@4
_PspCompleteServerSiloShutdown@4
_PspCompleteServerSiloShutdownDeferred@4
_PspComputeExecutionState@4
_PspComputeQuantum@8
_PspComputeQuantumAndPriority@20
_PspComputeReportWakeFilter@16
_PspControlHwTracingThread@8
_PspConvertJobLimitViolationToV1@8
_PspConvertJobLimitViolationToV2@8
_PspConvertJobNotificationLimitFromV1@8
_PspConvertJobNotificationLimitFromV2@8
_PspConvertJobNotificationLimitToV1@8
_PspConvertJobNotificationLimitToV2@8
_PspConvertSiloToServerSilo@16
_PspCopyAndFixupParameters@12
_PspCopyUnicodeString@12
_PspCreateActivityReference@8
_PspCreateObjectHandle@12
_PspCreatePicoProcess@12
_PspCreatePicoThread@12
_PspCreateProcess@36
_PspCreateSilo@4
_PspCreateThread@52
_PspCreateUserContext@20
_PspCreateUserProcessEcp@8
_PspDecodeMitigationExecuteOptions@24
_PspDeferredWorkerRoutine@4
_PspDeleteCreateProcessContext@4
_PspDeleteExternalServerSiloState@4
_PspDeleteKernelStack@12
_PspDeleteObjectAccessState@4
_PspDeletePartition@4
_PspDeleteProcessSecurity@4
_PspDeleteServerSiloGlobals@4
_PspDeleteSilo@4
_PspDeleteSiloContext@4
_PspDeleteThreadSecurity@4
_PspDeleteUserStack@16
_PspDereferenceQuotaBlock@4
_PspDestroyProcessParameterOverrides@4
_PspDetachSession@8
_PspDfssConfigurationChangeHandler@4
_PspDisablePrimaryTokenExchange@4
_PspDispatchWakeNotification@12
_PspDoesJobHierarchyPermitUILimits@8
_PspDoesJobHierarchyPermitUILimitsCallback@8
_PspEmptyPropertySet@4
_PspEnableProcessTimerVirtualization@8
_PspEnableProcessWakeCounters@8
_PspEnableTimerVirtualization@8
_PspEnableWakeCounters@8
_PspEnforceLimits@4
_PspEnforceLimitsJobPostCallback@8
_PspEnforceLimitsJobPreCallback@8
_PspEnforceLimitsProcessCallback@8
_PspEnumJobsAndProcessesInJobHierarchy@24
_PspEnumProcessesInJobHierarchy@16
_PspEstablishDfssHierarchy@12
_PspEstablishJobHierarchy@16
_PspEstimateNewProcessServerSilo@12
_PspEvaluateAndNotifyEmptyJob@12
_PspExecuteJobFreezeThawCallback@8
_PspExitProcess@8
_PspExitThread@4
_PspExpandLimit@16
_PspExpandQuota@20
_PspFindPropertySetEntry@8
_PspFoldProcessAccountingIntoJob@12
_PspFreeRateControl@8
_PspFreeStorage@4
_PspFreezeJobTree@8
_PspFreezeProcessWorker@8
_PspGenerateObjectAccessState@16
_PspGetBaseTrapFrame@8
_PspGetContextThreadInternal@20
_PspGetEffectiveNoWakeCharge@12
_PspGetFreezeState@4
_PspGetHostSiloStorage@0
_PspGetJobAssignmentDisposition@16
_PspGetJobLimitInformationValidFlags@8
_PspGetJobLockHierarchyForAssignment@20
_PspGetJobLockHierarchyForDeletion@8
_PspGetJobMemoryUsageNotificationViolations@24
_PspGetJobProperty@12
_PspGetJobSilo@4
_PspGetNextChildJob@8
_PspGetNextJob@4
_PspGetNextJobProcess@16
_PspGetNextSilo@8
_PspGetNoChildProcessRestrictedPolicy@4
_PspGetPicoProcessContext@4
_PspGetPicoThreadContext@4
_PspGetPreviousProcessThread@8
_PspGetProcessAccountingInformation@8
_PspGetProcessInJobHierarchyCallback@8
_PspGetProcessParameterOverrides@8
_PspGetProcessProtectionRequirementsFromImage@12
_PspGetProperty@12
_PspGetServerSiloStatePointer@4
_PspGetSetContextSpecialApc@20
_PspGetStandardHandleList@8
_PspGetStorageArray@16
_PspGetStorageArrayIfPossible@16
_PspHandleTableWalker@16
_PspHardDereferenceSiloWorker@4
_PspHardenMitigationOptions@4
_PspIdentityBasedJobBreakaway@12
_PspImplicitAssignProcessToJob@12
_PspIncrementJobChainProcessCounts@16
_PspInheritMitigationAuditOptions@52
_PspInheritMitigationOptions@52
_PspInheritQuota@8
_PspInitClonedThread@8
_PspInitPhase0@4
_PspInitPhase1@0
_PspInitPhase2@4
_PspInitializeBackgroundActivityModeratorCallouts@0
_PspInitializeCallbacks@0
_PspInitializeDesktopActivityModeratorCallouts@0
_PspInitializeFullProcessImageName@8
_PspInitializeHwTraceCallouts@0
_PspInitializeJobStructures@0
_PspInitializeMMCSSCallouts@0
_PspInitializeNetRateControl@0
_PspInitializeOctagonExtensionHost@0
_PspInitializeProcessLock@4
_PspInitializeProcessSecurity@56
_PspInitializeProtectedProcessParameters@4
_PspInitializeQuotaBlock@12
_PspInitializeQuotaExpansionDescriptor@24
_PspInitializeSecExtensionHost@0
_PspInitializeServerSiloDeferred@4
_PspInitializeSiloStructures@0
_PspInitializeStorageStructures@0
_PspInitializeSystemDlls@0
_PspInitializeSystemPartitionPhase0@0
_PspInitializeThunkContext@0
_PspInsertExpansionEntry@8
_PspInsertProcess@32
_PspInsertProperty@12
_PspInsertThread@44
_PspInvokeCreateCallback@8
_PspInvokeTerminateCallback@8
_PspIoMiniPacketCallbackRoutine@8
_PspIoRateControlInfoIsAnySet@4
_PspIoRateEntryActivate@16
_PspIoRateEntryDeactivate@4
_PspIoRateEntryInitialize@4
_PspIoRateEntryIoControlReference@4
_PspIoRateEntryVolumeCompare@8
_PspIoRateEntryVolumeDelete@8
_PspIsContextAdmin@0
_PspIsDfssEnabled@0
_PspIsEnforcementAccountingNonZero@4
_PspIsJobMovable@4
_PspIsParentProcess@8
_PspIsProcessInJob@8
_PspIsProcessReadyForRemoteThread@4
_PspIsSetJobIoAttribution@12
_PspIsSetJobIoAttributionJobPreCallback@8
_PspIsSiloContext@4
_PspIsSiloInServerSilo@4
_PspIsSiloInSilo@8
_PspJobClose@16
_PspJobCycleTimeNotificationDpcRoutine@16
_PspJobDelete@4
_PspJobDeleteStorageArrays@4
_PspJobHasChildren@4
_PspJobIoRateControlDisable@4
_PspJobIoRateQueryHistory@16
_PspJobIoRateVolumeEntryInsert@8
_PspJobIoRateVolumeEntryReference@8
_PspJobIoRateVolumeEntryRemove@8
_PspJobIoRateVolumeEntryRemoveAll@8
_PspJobIsAppSilo@4
_PspJobNotificationWorker@4
_PspJobTimeLimitsWork@4
_PspLazyInitializeStorageExpansion@4
_PspLimitViolationRateControlToleranceLimitField@8
_PspLocateInPEManifest@8
_PspLockJobAssignment@4
_PspLockJobChain@12
_PspLockJobConditionally@12
_PspLockJobExclusive@8
_PspLockJobListExclusive@4
_PspLockJobListShared@4
_PspLockJobMemoryLimitsExclusive@12
_PspLockJobMemoryLimitsShared@8
_PspLockJobShared@8
_PspLockJobsAndProcessExclusive@16
_PspLockProcessExclusive@8
_PspLockProcessListExclusive@4
_PspLockProcessSecurityShared@8
_PspLockProcessShared@8
_PspLockRootJobExclusive@12
_PspLockRootJobFromProcess@16
_PspLockRootJobShared@12
_PspLockThreadSecurityExclusive@8
_PspLockThreadSecurityShared@8
_PspLockUnlockProcessExclusive@8
_PspLockUnlockProcessSecurityExclusive@8
_PspLockUnlockWorkingSetChangeExclusiveUnsafe@0
_PspLogAuditOpenProcessEvent@12
_PspLogAuditOpenThreadEvent@16
_PspLogAuditSetLoadImageNotifyRoutineEvent@8
_PspLogAuditTerminateRemoteProcessEvent@8
_PspLookupEntryPoint@12
_PspLookupProcessQuotaBlock@16
_PspMapSiloSharedDataView@4
_PspMapSystemDll@16
_PspMapThreadCreationFlags@8
_PspMarkServerSiloAsTerminating@4
_PspModifyAncestorBits@12
_PspNetRateControlDispatch@4
_PspNotificationLimitRateControlToleranceField@8
_PspNotificationLimitRateControlToleranceIntervalField@8
_PspNotificationPacketCallback@8
_PspNotifyEmptyJobsInJobChain@4
_PspNotifyProcessBackgroundTransition@8
_PspNotifyServerSiloCreation@4
_PspNotifyServerSiloTermination@4
_PspOpenPartitionHandle@24
_PspPicoGetContextThreadEx@20
_PspPicoSetContextThreadEx@20
_PspPrepareSystemDllInitBlock@8
_PspProcessClose@16
_PspProcessDelete@4
_PspProcessOpen@24
_PspProcessRundownWorker@4
_PspProcessRundownWorkerSingle@4
_PspProcessUnbindVirtualizedTimers@4
_PspProcessorCallbackNop@8
_PspPropagateHandle@12
_PspQueryDescriptorThread@16
_PspQueryForwardersEnabled@0
_PspQueryHwTracingThread@4
_PspQueryJobHierarchyAccountingInformation@8
_PspQueryJobHierarchyInterferenceCount@8
_PspQueryJobHierarchyProcessIdList@16
_PspQueryJobIoAttribution@8
_PspQueryLastCallThread@16
_PspQueryLdtInformation@16
_PspQueryPooledQuotaLimits@20
_PspQueryProcessAccountingInformationCallback@8
_PspQueryProcessIdListCallback@8
_PspQueryProcessInterferenceCountCallback@8
_PspQueryQuotaLimits@24
_PspQueryRateControlHistory@20
_PspQueryWorkingSetWatch@24
_PspQueueDeferredWorkAndWait@8
_PspQuitNextJobProcess@16
_PspRateControlLimitFlag@4
_PspReadDfssConfigurationValues@0
_PspReadIFEOMitigationAuditOptions@8
_PspReadIFEOMitigationOptions@8
_PspReadIFEONodeOptions@12
_PspReadIFEOPerfOptions@8
_PspReadOptionsMapFromIFEO@16
_PspReadUserQuotaLimits@12
_PspReaper@4
_PspRecordCrashedProcessIntoBlackbox@4
_PspReferenceCidTableEntry@8
_PspReferenceSystemDll@4
_PspReferenceTokenForNewProcess@16
_PspRegisterResource@12
_PspReleaseReturnedQuota@8
_PspRemoveCpuRateControl@4
_PspRemoveIoAttribution@4
_PspRemovePartitionFromGlobalList@4
_PspRemoveProcessFromJobChain@16
_PspRemoveProperty@12
_PspRemoveQuotaBlock@4
_PspRemoveRateControl@20
_PspRequestDeferredJobNotification@8
_PspRequestProcessExecutionState@12
_PspRetrieveJobChainSegmentProcessCharges@20
_PspRevertContainerImpersonation@4
_PspRundownProcess@4
_PspRundownSingleProcess@8
_PspSafeReferenceQuotaBlock@4
_PspSanitizeResourceLimits@8
_PspScheduleEnforcementWorker@4
_PspSelectNodeForProcess@0
_PspSendJobNotification@16
_PspSendNoWakeChargeLimitNotification@4
_PspSendProcessNotificationToJobChain@16
_PspSendReliableJobNotification@8
_PspSendSiloTerminationNotification@8
_PspSendWakeNotification@24
_PspSetAffinityLimitCallback@8
_PspSetBackgroundJobTree@8
_PspSetContextThreadInternal@20
_PspSetCpuRateControlJobPostCallback@8
_PspSetCpuRateControlJobPreCallback@8
_PspSetCreateProcessNotifyRoutine@8
_PspSetCreateThreadNotifyRoutine@8
_PspSetEffectiveJobLimits@8
_PspSetEffectiveLimit@8
_PspSetEffectiveRateControlJob@12
_PspSetEnergyTrackingStateJobTree@8
_PspSetJobBackgroundCountCallback@8
_PspSetJobEnergyTrackingStateCallback@8
_PspSetJobFreezeCountCallback@8
_PspSetJobIoAttribution@16
_PspSetJobIoAttributionJobPreCallback@8
_PspSetJobIoAttributionProcessCallback@8
_PspSetJobIoRateControl@8
_PspSetJobIoRateControlForVolume@20
_PspSetJobLimitsJobPostCallback@8
_PspSetJobLimitsJobPreCallback@8
_PspSetJobLimitsProcessCallback@8
_PspSetJobNotificationCountCallback@8
_PspSetJobRateControl@24
_PspSetJobSiloThreadImpersonationPolicy@8
_PspSetJobTimeLimitCallback@8
_PspSetLdtInformation@12
_PspSetLdtSize@12
_PspSetMinimalProcessName@8
_PspSetNetRateControl@12
_PspSetNoChildProcessRestrictedPolicy@8
_PspSetPicoThreadDescriptorBase@8
_PspSetProcessAffinitySafe@20
_PspSetProcessBackgroundCountCallback@8
_PspSetProcessCacheIsolationCallback@8
_PspSetProcessDefaultHardErrorMode@12
_PspSetProcessEnergyTrackingStateCallback@8
_PspSetProcessForegroundBackgroundRequest@12
_PspSetProcessFreezeStateCallback@8
_PspSetProcessIoHandlers@12
_PspSetProcessPpmPolicy@8
_PspSetProcessPriorityByClass@8
_PspSetProcessPriorityClass@16
_PspSetProcessSchedulingGroup@8
_PspSetProcessShortName@8
_PspSetProcessTimerDelayForKTimers@4
_PspSetProcessTimerDelayForWin32@4
_PspSetQuotaLimits@16
_PspSetRateControlJobPreCallback@8
_PspSetRateControlProcessCallback@8
_PspSetThreadPpmPolicy@8
_PspSetVmProcessorHostProcessWorkerRoutine@4
_PspSetupReservedUserMappings@12
_PspSetupUserProcessAddressSpace@16
_PspSetupUserStack@20
_PspShutdownCsrProcess@12
_PspShutdownServerSilos@0
_PspSiloGetMultiUserTsFromRegistry@4
_PspSiloGetSuiteMaskStringFromRegistry@4
_PspSiloInitializeIsMultiSessionSku@4
_PspSiloInitializeSharedUserSessionId@4
_PspSiloInitializeSuiteMask@4
_PspSiloInitializeSystemRootBuffer@4
_PspSiloInitializeSystemRootSymlink@4
_PspSiloInitializeUserSharedData@4
_PspSiloLoadApiSets@4
_PspSinglePrivCheck@16
_PspSortHandleList
_PspStorageAllocSlot@4
_PspStorageEmptyArray@8
_PspStorageEmptyArrayNonReadonly@8
_PspStorageEmptyNonReadonly@4
_PspStorageFreeSlot@4
_PspStorageGetObject@12
_PspStorageInsertObject@16
_PspStorageMakeSlotReadOnly@8
_PspStorageRemoveObject@16
_PspStorageReplaceObject@16
_PspSubtractAccountingValues@8
_PspSwapSystemDll@4
_PspSynchronizeWithProcessInsertion@8
_PspSystemThreadStartup@8
_PspTeardownPartition@4
_PspTerminateAllProcessesInJobHierarchy@12
_PspTerminateAllThreads@16
_PspTerminatePicoProcess@8
_PspTerminateProcess@16
_PspTerminateProcessesJobCallback@8
_PspTerminateSiloSubsystemProcesses@4
_PspTerminateThreadByPointer@12
_PspThreadDelete@4
_PspThreadOpen@24
_PspTimerDelayProcess@8
_PspTimerDelayWorkerRoutine@4
_PspTrySetProcessPebThrottlingFlags@8
_PspUnlinkJobProcess@8
_PspUnlockJob@8
_PspUnlockJobAssignment@4
_PspUnlockJobChain@12
_PspUnlockJobConditionally@12
_PspUnlockJobListExclusive@4
_PspUnlockJobListShared@4
_PspUnlockJobMemoryLimitsExclusive@12
_PspUnlockJobMemoryLimitsShared@8
_PspUnlockJobsAndProcessExclusive@12
_PspUnlockProcessExclusive@8
_PspUnlockProcessExclusiveUnsafe@4
_PspUnlockProcessListExclusive@4
_PspUnlockProcessSecurityShared@8
_PspUnlockProcessShared@8
_PspUnlockProcessSharedUnsafe@4
_PspUnlockThreadSecurityExclusive@8
_PspUnlockThreadSecurityShared@8
_PspUnlockWorkingSetChangeExclusiveUnsafe@0
_PspUpdateCreateInfo@12
_PspUpdateEnforcementTimer@4
_PspUpdateJobPeakProcessMemory@8
_PspUpdateSingleProcessAffinity@12
_PspUserApcKernelRoutine@20
_PspUserApcReserveKernelRoutine@20
_PspUserApcReserveRundownRoutine@4
_PspUserThreadStartup@8
_PspValidateCreateProcessProtection@20
_PspValidateEnvironmentBlock@8
_PspValidateJobAffinityState@8
_PspValidateJobAssignmentDiskIoAttribution@12
_PspValidateJobAssignmentNestingDepth@12
_PspValidateJobAssignmentProcessLimits@12
_PspValidateJobAssignmentRateControlLimits@12
_PspValidateJobAssignmentSiloPolicy@16
_PspValidateJobChainLimits@16
_PspValidateMitigationAuditOptions@24
_PspValidateMitigationOptions@28
_PspValidateThread@4
_PspWaitForUsermodeExit@4
_PspWaitOnAllProcessesJobCallback@8
_PspWritePebAffinityInfo@8
_PspWriteProcessSecurityDomain@16
_PspWriteTebImpersonationInfo@8
_PushPmInterrupt@16
_PushRmInterrupt@16
_QueryRegistryHideMachine@0
_READ_REGISTER_BUFFER_UCHAR@12
_READ_REGISTER_BUFFER_ULONG@12
_READ_REGISTER_BUFFER_USHORT@12
_READ_REGISTER_UCHAR@4
_READ_REGISTER_ULONG@4
_READ_REGISTER_USHORT@4
_RaiseException@16
_RamdiskStart@4
_RaspAddCacheEntry@8
_RaspAllocateMemory@8
_RaspAntiAlias@20
_RaspClearCache@4
_RaspConvertDeltas@4
_RaspCreatePointList@12
_RaspCreateSegmentList@24
_RaspDestroyCachedBitmap@4
_RaspDestroySegmentList@12
_RaspFreeMemory@8
_RaspGetCacheEntry@24
_RaspGetCompositeGlyphList@32
_RaspGetSegmentDirection@4
_RaspGetUnscaledGlyphData@20
_RaspGetXExtent@24
_RaspInitializeCompositeGlyphData@40
_RaspInitializeGlyphData@16
_RaspInterpolatePoint@12
_RaspLoadBearings@16
_RaspLoadCompositeGlyphData@20
_RaspLoadEmptyGlyph@8
_RaspLoadGlyphData@20
_RaspMapCharacterCodeToGlyphIndex@12
_RaspMapGlyphIndexToLocation@12
_RaspRasterize@36
_RaspRectangleCreate@16
_RaspRectangleDestroy@8
_RaspScale@8
_RaspScaleCoordinates@8
_RaspScanConvert@32
_RaspTestIntersection@16
_RawBeginOperation@8
_RawCheckForDeleteVolume@4
_RawCleanup@12
_RawCleanupVcb@4
_RawClose@12
_RawCompletionRoutine@12
_RawComputeFileSystemInformationChecksum@4
_RawCreate@12
_RawDeleteVcb@4
_RawDispatch@8
_RawEndOperation@8
_RawFileSystemControl@12
_RawInitialize@8
_RawInitializeVcb@12
_RawInitiateDeleteVolume@12
_RawMountVolume@4
_RawPerformDevIoCtrl@36
_RawQueryFileSystemInformation@12
_RawQueryFsAttributeInfo@12
_RawQueryFsDeviceInfo@16
_RawQueryFsSizeInfo@16
_RawQueryFsVolumeInfo@16
_RawQueryInformation@12
_RawQueryVolumeInformation@12
_RawReadWriteDeviceControl@12
_RawScanDeletedList@0
_RawSetInformation@12
_RawShutdown@8
_RawUnload@4
_RawUserFsCtrl@12
_RawVerifyVolume@8
_ReadPort16@4
_ReadPort32@4
_ReadPort8@4
_ReadRegister16@4
_ReadRegister32@4
_ReadRegister8@4
_RealPredecessor@4
_RealSuccessor@4
_RebalanceNode@4
_RegistryOverwriteCentralProcessor@0
_RemoveListEntryPte@8
_RemoveListHeadPte@4
_ResFwBackgroundTransition@4
_ResFwConfigureDisplayStringResources@4
_ResFwFindMessage@4
_ResFwFreeContext@4
_ResFwGetContext@4
_ResFwpPageInBackground@0
_ResFwpPageOutBackground@0
_RotBarInit@0
_RotBarUpdate@0
_RtlAbsoluteToSelfRelativeSD@12
_RtlAcquirePrivilege@16
_RtlAcquireSwapReference@4
_RtlAddAccessAllowedAce@16
_RtlAddAccessAllowedAceEx@20
_RtlAddAccessAllowedObjectAce@28
_RtlAddAccessDeniedAceEx@20
_RtlAddAccessDeniedObjectAce@28
_RtlAddAccessFilterAce@32
_RtlAddAce@20
_RtlAddAtomToAtomTable@12
_RtlAddAtomToAtomTableEx@16
_RtlAddAuditAccessAce@24
_RtlAddAuditAccessAceEx@28
_RtlAddAuditAccessObjectAce@36
_RtlAddMandatoryAce@24
_RtlAddProcessTrustLabelAce@24
_RtlAddRange@36
_RtlAddResourceAttributeAce@28
_RtlAddressInSectionTable@12
_RtlAllocateAndInitializeSidEx@16
_RtlAllocateHeap@12
_RtlAnsiCharToUnicodeChar@4
_RtlAnsiStringToUnicodeString@12
_RtlAppendAsciizToString@8
_RtlAppendStringToString@8
_RtlAppendUnicodeStringToString@8
_RtlAppendUnicodeToString@8
_RtlAreAllAccessesGranted@8
_RtlAreAnyAccessesGranted@8
_RtlAreBitsClear@12
_RtlAreBitsSet@12
_RtlAreNamesEqual@16
_RtlAssert@16
_RtlAvlInsertNodeEx@16
_RtlAvlRemoveNode@8
_RtlBackoff@4
_RtlBeginReadTickLock@4
_RtlBootStatusDisableFlushing@4
_RtlBootStatusItemInfo@12
_RtlCSparseBitmapBitmaskRead@12
_RtlCSparseBitmapBitmaskWrite@16
_RtlCSparseBitmapBitsClear@12
_RtlCSparseBitmapCleanup@4
_RtlCSparseBitmapEnterLockingRegion@4
_RtlCSparseBitmapFindBitSetCapped@12
_RtlCSparseBitmapInitialize@8
_RtlCSparseBitmapStart@16
_RtlCapabilityCheck@12
_RtlCapabilityCheckForSingleSessionSku@12
_RtlCaptureContext@4
_RtlCaptureStackBackTrace@16
_RtlCharToInteger@12
_RtlCheckBootStatusIntegrity@8
_RtlCheckPortableOperatingSystem@4
_RtlCheckRegistryKey@8
_RtlCheckSystemBootStatusIntegrity@4
_RtlCheckTokenCapability@12
_RtlCheckTokenMembership@12
_RtlCheckTokenMembershipEx@16
_RtlClearAllBits@4
_RtlClearBit@8
_RtlClearBits@12
_RtlCmDecodeMemIoResource@8
_RtlCmEncodeMemIoResource@24
_RtlCompareAltitudes@8
_RtlCompareMemory@12
_RtlCompareMemoryUlong@12
_RtlCompareString@12
_RtlCompareUnicodeString@12
_RtlCompareUnicodeStrings@20
_RtlCompressBuffer@32
_RtlCompressBufferLZNT1@32
_RtlCompressBufferProgress@40
_RtlCompressBufferXp10@32
_RtlCompressBufferXpressHuff@32
_RtlCompressBufferXpressHuffMax@36
_RtlCompressBufferXpressHuffStandard@36
_RtlCompressBufferXpressLz@32
_RtlCompressBufferXpressLzMax@36
_RtlCompressBufferXpressLzStandard@36
_RtlCompressChunks@28
_RtlCompressWorkSpaceSizeLZNT1@12
_RtlCompressWorkSpaceSizeXp10@12
_RtlCompressWorkSpaceSizeXpressHuff@12
_RtlCompressWorkSpaceSizeXpressLz@12
_RtlComputeCrc32@12
_RtlComputeLfnChecksum@4
_RtlConstructCrossVmEventPath@12
_RtlConstructCrossVmMutexPath@12
_RtlContractHashTable@4
_RtlConvertHostPerfCounterToPerfCounter@20
_RtlConvertLuidToUlonglong@4
_RtlConvertSidToUnicodeString@12
_RtlCopyBitMap@12
_RtlCopyContext@12
_RtlCopyLuid@8
_RtlCopyLuidAndAttributesArray@12
_RtlCopyMemoryNonTemporal@12
_RtlCopyRangeList@8
_RtlCopySid@12
_RtlCopySidAndAttributesArray@28
_RtlCopyString@8
_RtlCopyUnicodeString@8
_RtlCrc32@12
_RtlCrc64@16
_RtlCreateAcl@12
_RtlCreateAtomTable@8
_RtlCreateAtomTableEx@12
_RtlCreateHashTable@12
_RtlCreateHashTableEx@16
_RtlCreateHeap@24
_RtlCreateRegistryKey@8
_RtlCreateRvaList@28
_RtlCreateSecurityDescriptor@8
_RtlCreateSecurityDescriptorRelative@8
_RtlCreateSystemVolumeInformationFolder@4
_RtlCreateUnicodeString@8
_RtlCreateUnicodeStringFromAsciiz@8
_RtlCreateUserProcessEx@20
_RtlCreateUserStack@24
_RtlCreateUserThread@40
_RtlCultureNameToLCID@8
_RtlCustomCPToUnicodeN@24
_RtlCutoverTimeToSystemTime@16
_RtlDecompressBuffer@24
_RtlDecompressBufferEx2@32
_RtlDecompressBufferEx@28
_RtlDecompressBufferLZNT1@28
_RtlDecompressBufferProgress@40
_RtlDecompressBufferXp10@28
_RtlDecompressBufferXpressHuff@28
_RtlDecompressBufferXpressHuffProgress@36
_RtlDecompressBufferXpressLz@28
_RtlDecompressBufferXpressLzProgress@32
_RtlDecompressChunks@28
_RtlDecompressFragment@32
_RtlDecompressFragmentEx@36
_RtlDecompressFragmentLZNT1@32
_RtlDecompressFragmentNS@32
_RtlDelete@4
_RtlDeleteAce@8
_RtlDeleteAtomFromAtomTable@8
_RtlDeleteElementGenericTable@8
_RtlDeleteElementGenericTableAvl@8
_RtlDeleteElementGenericTableAvlEx@8
_RtlDeleteHashTable@4
_RtlDeleteNoSplay@8
_RtlDeleteOwnersRanges@8
_RtlDeleteRange@24
_RtlDeleteRegistryValue@12
_RtlDereferenceAtomTable@4
_RtlDeriveCapabilitySidsFromName@12
_RtlDescribeChunk@20
_RtlDescribeChunkLZNT1@16
_RtlDescribeChunkNS@16
_RtlDestroyAtomTable@4
_RtlDestroyHeap@4
_RtlDestroyLowBoxAtoms@8
_RtlDispatchException@8
_RtlDissectName@16
_RtlDoesNameContainWildCards@4
_RtlDowncaseUnicodeChar@4
_RtlDowncaseUnicodeString@12
_RtlDuplicateUnicodeString@12
_RtlEmptyAtomTable@8
_RtlEndEnumerationHashTable@8
_RtlEndStrongEnumerationHashTable@8
_RtlEndWeakEnumerationHashTable@8
_RtlEnoughStackSpaceForStackCapture@0
_RtlEnumRvaListFirst@12
_RtlEnumerateBoundaryDescriptorEntries@12
_RtlEnumerateEntryHashTable@8
_RtlEnumerateGenericTable@8
_RtlEnumerateGenericTableAvl@8
_RtlEnumerateGenericTableLikeADirectory@28
_RtlEnumerateGenericTableWithoutSplaying@8
_RtlEnumerateGenericTableWithoutSplayingAvl@8
_RtlEqualLuid@8
_RtlEqualPrefixSid@8
_RtlEqualSid@8
_RtlEqualString@12
_RtlEqualUnicodeString@12
_RtlEqualWnfChangeStamps@8
_RtlEthernetAddressToStringA@8
_RtlEthernetAddressToStringW@8
_RtlEthernetStringToAddressA@12
_RtlEthernetStringToAddressW@12
_RtlExpandHashTable@4
_RtlExtendCorrelationVector@4
_RtlExtendedIntegerMultiply@12
_RtlExtendedLargeIntegerDivide@16
_RtlExtendedMagicDivide@20
_RtlExtractBitMap@16
_RtlFileMapFree@4
_RtlFileMapInitializeByNtPath@8
_RtlFileMapMapView@8
_RtlFillMemory@12
_RtlFillMemoryUlong@12
_RtlFillMemoryUlonglong@16
_RtlFindAceBySid@12
_RtlFindAceByType@12
_RtlFindClearBits@12
_RtlFindClearBitsAndSet@12
_RtlFindClearRuns@16
_RtlFindClosestEncodableLength@12
_RtlFindExportedRoutineByName@8
_RtlFindFirstRunClear@8
_RtlFindLastBackwardRunClear@12
_RtlFindLeastSignificantBit@8
_RtlFindLongestRunClear@8
_RtlFindLongestRunClearCapped@12
_RtlFindMessage@20
_RtlFindMostSignificantBit@8
_RtlFindNextAlignedForwardRunClear@16
_RtlFindNextClearRunUlong@20
_RtlFindNextForwardRunClear@12
_RtlFindNextForwardRunClearCapped@16
_RtlFindNextForwardRunSet@12
_RtlFindRange@56
_RtlFindSetBits@12
_RtlFindSetBitsAndClear@12
_RtlFindUnicodePrefix@12
_RtlFindUnicodeSubstring@12
_RtlFirstFreeAce@8
_RtlFnToFxFrame@8
_RtlFormatCurrentUserKeyPath@4
_RtlFormatMessage@36
_RtlFormatMessageEx@40
_RtlFreeAnsiString@4
_RtlFreeHeap@12
_RtlFreeOemString@4
_RtlFreeRangeList@4
_RtlFreeUTF8String@4
_RtlFreeUnicodeString@4
_RtlFxToFnFrame@8
_RtlGUIDFromString@8
_RtlGenerate8dot3Name@16
_RtlGenerateClass5Guid@16
_RtlGenerateQpcToIncrementConstants@8
_RtlGetAce@12
_RtlGetActiveConsoleId@0
_RtlGetAppContainerNamedObjectPath@16
_RtlGetAppContainerParent@8
_RtlGetAppContainerSidType@8
_RtlGetCallersAddress@8
_RtlGetCompressionWorkSpaceSize@12
_RtlGetConsoleSessionForegroundProcessId@0
_RtlGetControlSecurityDescriptor@12
_RtlGetCurrentServiceSessionId@0
_RtlGetDaclSecurityDescriptor@16
_RtlGetDefaultCodePage@8
_RtlGetElementGenericTable@8
_RtlGetElementGenericTableAvl@8
_RtlGetEnabledExtendedAndSupervisorFeatures@8
_RtlGetEnabledExtendedFeatures@8
_RtlGetExtendedContextLength2@16
_RtlGetExtendedContextLength@8
_RtlGetFirstRange@12
_RtlGetGroupSecurityDescriptor@12
_RtlGetHostNtSystemRoot@0
_RtlGetIntegerAtom@8
_RtlGetInterruptTimePrecise@4
_RtlGetLastRange@12
_RtlGetMultiTimePrecise@12
_RtlGetNextEntryHashTable@8
_RtlGetNextRange@12
_RtlGetNtGlobalFlags@0
_RtlGetNtProductType@4
_RtlGetNtSystemRoot@0
_RtlGetOwnerSecurityDescriptor@12
_RtlGetPersistedStateLocation@28
_RtlGetProductInfo@20
_RtlGetRvaListIteratorState@8
_RtlGetSaclSecurityDescriptor@16
_RtlGetSessionProperties@8
_RtlGetSetBootStatusData@24
_RtlGetSuiteMask@0
_RtlGetSwapReferenceIndex@4
_RtlGetSystemBootStatus@16
_RtlGetSystemBootStatusEx@12
_RtlGetSystemTimePrecise@0
_RtlGetThreadLangIdByIndex@16
_RtlGetTokenNamedObjectPath@12
_RtlGetVersion@4
_RtlGuardIsValidStackPointer@8
_RtlHashUnicodeString@16
_RtlHpEnvContextCreate@16
_RtlHpGlobalsInitialize@0
_RtlHpHeapManagerCleanup@4
_RtlHpHeapManagerInitialize@8
_RtlHpHeapManagerStart@24
_RtlHpKInitializeHeapManager@0
_RtlIdentifierAuthoritySid@4
_RtlIdnToAscii@20
_RtlIdnToNameprepUnicode@20
_RtlIdnToUnicode@20
_RtlImageDirectoryEntryToData@16
_RtlImageNtHeader@4
_RtlImageNtHeaderEx@20
_RtlImpersonateSelfEx@12
_RtlIncrementCorrelationVector@4
_RtlInitAnsiString@8
_RtlInitAnsiStringEx@8
_RtlInitCodePageTable@8
_RtlInitEnumerationHashTable@8
_RtlInitNlsTables@16
_RtlInitString@8
_RtlInitStringEx@8
_RtlInitStrongEnumerationHashTable@8
_RtlInitUTF8String@8
_RtlInitUTF8StringEx@8
_RtlInitUnicodeString@8
_RtlInitUnicodeStringEx@8
_RtlInitWeakEnumerationHashTable@8
_RtlInitializeBitMap@12
_RtlInitializeBootStatDataCache@0
_RtlInitializeBootStatusDataBlackBox@4
_RtlInitializeCompression@0
_RtlInitializeCorrelationVector@12
_RtlInitializeExceptionLog@4
_RtlInitializeExtendedContext2@20
_RtlInitializeExtendedContext@12
_RtlInitializeGenericTable@20
_RtlInitializeGenericTableAvl@20
_RtlInitializeRangeList@4
_RtlInitializeRangeListPackage@0
_RtlInitializeSid@12
_RtlInitializeSidEx
_RtlInitializeSwapReference@4
_RtlInitializeUnicodePrefix@4
_RtlInsertElementGenericTable@16
_RtlInsertElementGenericTableAvl@16
_RtlInsertElementGenericTableFull@24
_RtlInsertElementGenericTableFullAvl@24
_RtlInsertEntryHashTable@16
_RtlInsertUnicodePrefix@12
_RtlInt64ToUnicodeString@16
_RtlIntegerToChar@16
_RtlIntegerToUnicode@16
_RtlIntegerToUnicodeString@12
_RtlInterlockedClearBitRun@12
_RtlInterlockedSetBitRun@12
_RtlInterlockedSetClearRun@12
_RtlInternEntryDereference@8
_RtlInternTableInitialize@8
_RtlInternTableIntern@8
_RtlIntersectBitMaps@8
_RtlInvertBitMap@4
_RtlInvertRangeList@8
_RtlInvertRangeListEx@20
_RtlIoDecodeMemIoResource@16
_RtlIoEncodeMemIoResource@40
_RtlIpv4AddressToStringA@8
_RtlIpv4AddressToStringExA@16
_RtlIpv4AddressToStringExW@16
_RtlIpv4AddressToStringW@8
_RtlIpv4StringToAddressA@16
_RtlIpv4StringToAddressExA@16
_RtlIpv4StringToAddressExW@16
_RtlIpv4StringToAddressW@16
_RtlIpv6AddressToStringA@8
_RtlIpv6AddressToStringExA@20
_RtlIpv6AddressToStringExW@20
_RtlIpv6AddressToStringW@8
_RtlIpv6StringToAddressA@12
_RtlIpv6StringToAddressExA@16
_RtlIpv6StringToAddressExW@16
_RtlIpv6StringToAddressW@12
_RtlIsApiSetImplemented@4
_RtlIsCapabilitySid@4
_RtlIsCloudFilesPlaceholder@8
_RtlIsElevatedRid@4
_RtlIsGenericTableEmpty@4
_RtlIsGenericTableEmptyAvl@4
_RtlIsMultiSessionSku@0
_RtlIsMultiUsersInSessionSku@0
_RtlIsNameInExpression@16
_RtlIsNameInUnUpcasedExpression@16
_RtlIsNameLegalDOS8Dot3@12
_RtlIsNonEmptyDirectoryReparsePointAllowed@4
_RtlIsNormalizedString@16
_RtlIsNtDdiVersionAvailable@4
_RtlIsPackageSid@4
_RtlIsParentOfChildAppContainer@8
_RtlIsPartialPlaceholder@8
_RtlIsPartialPlaceholderFileHandle@8
_RtlIsPartialPlaceholderFileInfo@12
_RtlIsProcessorFeaturePresent@4
_RtlIsRangeAvailable@40
_RtlIsSandboxedToken@8
_RtlIsSandboxedTokenHandle@8
_RtlIsServicePackVersionInstalled@4
_RtlIsStateSeparationEnabled@0
_RtlIsUntrustedObject@12
_RtlIsValidHandler@12
_RtlIsValidOemCharacter@4
_RtlIsValidProcessTrustLabelSid@4
_RtlIsZeroMemory@8
_RtlLCIDToCultureName@8
_RtlLargeIntegerAdd@16
_RtlLargeIntegerArithmeticShift@12
_RtlLargeIntegerDivide@20
_RtlLargeIntegerNegate@8
_RtlLargeIntegerShiftLeft@12
_RtlLargeIntegerShiftRight@12
_RtlLargeIntegerSubtract@16
_RtlLargeIntegerToChar@16
_RtlLargeIntegerToUnicode@16
_RtlLengthCurrentClearRunBackward@12
_RtlLengthCurrentClearRunForward@12
_RtlLengthRequiredSid@4
_RtlLengthSecurityDescriptor@4
_RtlLengthSid@4
_RtlLengthSidAsUnicodeString@8
_RtlLoadString@32
_RtlLocalTimeToSystemTime@8
_RtlLocateLegacyContext@8
_RtlLocateSupervisorFeature@12
_RtlLockBootStatusData@4
_RtlLogStackBackTraceEx@4
_RtlLongLongAdd@20
_RtlLongLongMult@20
_RtlLookupAtomInAtomTable@12
_RtlLookupElementGenericTable@8
_RtlLookupElementGenericTableAvl@8
_RtlLookupElementGenericTableFull@16
_RtlLookupElementGenericTableFullAvl@16
_RtlLookupEntryHashTable@12
_RtlLookupFirstMatchingElementGenericTableAvl@12
_RtlMakeSelfRelativeSD@12
_RtlMapGenericMask@8
_RtlMapSecurityErrorToNtStatus@4
_RtlMarkHiberPhase@0
_RtlMergeBitMaps@8
_RtlMergeRangeLists@16
_RtlMoveMemory@12
_RtlMultiByteToUnicodeN@20
_RtlMultiByteToUnicodeSize@12
_RtlNextUnicodePrefix@8
_RtlNormalizeSecurityDescriptor@20
_RtlNormalizeString@20
_RtlNotifyFeatureUsage@4
_RtlNtStatusToDosError@4
_RtlNtStatusToDosErrorNoTeb@4
_RtlNumberGenericTableElements@4
_RtlNumberGenericTableElementsAvl@4
_RtlNumberOfClearBits@4
_RtlNumberOfClearBitsInRange@12
_RtlNumberOfSetBits@4
_RtlNumberOfSetBitsInRange@12
_RtlNumberOfSetBitsUlongPtr@4
_RtlOemStringToCountedUnicodeString@12
_RtlOemStringToUnicodeString@12
_RtlOemToUnicodeN@20
_RtlOpenCurrentUser@8
_RtlOpenImageFileOptionsKey@12
_RtlOsDeploymentState@4
_RtlOwnerAcesPresent@4
_RtlParseLeapSecondData@16
_RtlPcToFileHeader@8
_RtlPcToFileName@8
_RtlPcToFilePath@8
_RtlPinAtomInAtomTable@8
_RtlPrefixString@12
_RtlPrefixUnicodeString@12
_RtlQueryAllFeatureConfigurations@16
_RtlQueryAtomInAtomTable@24
_RtlQueryAtomsInAtomTable@16
_RtlQueryDynamicTimeZoneInformation@4
_RtlQueryElevationFlags@4
_RtlQueryFeatureConfiguration@16
_RtlQueryFeatureConfigurationChangeStamp@0
_RtlQueryFeatureConfigurationFromBuffers@16
_RtlQueryImageFileExecutionOptions@28
_RtlQueryImageFileKeyOption@24
_RtlQueryInformationAcl@16
_RtlQueryModuleInformation@12
_RtlQueryPackageClaims@32
_RtlQueryPackageIdentity@24
_RtlQueryPackageIdentityEx@28
_RtlQueryProcessPlaceholderCompatibilityMode@0
_RtlQueryRegistryValueWithFallback@28
_RtlQueryRegistryValues@20
_RtlQueryRegistryValuesEx@20
_RtlQueryThreadPlaceholderCompatibilityMode@0
_RtlQueryTimeZoneInformation@4
_RtlQueryValidationRunlevel@4
_RtlRaiseCustomSystemEventTrigger@4
_RtlRaiseException@4
_RtlRaiseStatus@4
_RtlRandom@4
_RtlRandomEx@4
_RtlRbInsertNodeEx@16
_RtlRbRemoveNode@8
_RtlRbReplaceNode@12
_RtlRealPredecessor@4
_RtlRealSuccessor@4
_RtlRegisterFeatureConfigurationChangeNotification@16
_RtlReleasePrivilege@4
_RtlReleaseSwapReference@8
_RtlRemoveEntryHashTable@12
_RtlRemoveUnicodePrefix@8
_RtlReplaceSidInSd@16
_RtlReserveChunk@20
_RtlReserveChunkLZNT1@16
_RtlReserveChunkNS@16
_RtlResetRtlTranslations@4
_RtlRestoreBootStatusDefaults@4
_RtlRestoreSystemBootStatusDefaults@0
_RtlRunOnceBeginInitialize@12
_RtlRunOnceComplete@12
_RtlRunOnceExecuteOnce@16
_RtlRunOnceInitialize@4
_RtlSIZETAdd@12
_RtlScrubMemory@8
_RtlSecondsSince1970ToTime@8
_RtlSecondsSince1980ToTime@8
_RtlSectionTableFromVirtualAddress@12
_RtlSelfRelativeToAbsoluteSD2@8
_RtlSelfRelativeToAbsoluteSD@44
_RtlSetActiveConsoleId@4
_RtlSetActiveTimeBias@4
_RtlSetAllBits@4
_RtlSetBit@8
_RtlSetBits@12
_RtlSetConsoleSessionForegroundProcessId@8
_RtlSetControlSecurityDescriptor@12
_RtlSetDaclSecurityDescriptor@16
_RtlSetDynamicTimeZoneInformation@4
_RtlSetGroupSecurityDescriptor@12
_RtlSetOwnerSecurityDescriptor@12
_RtlSetPortableOperatingSystem@4
_RtlSetProcessPlaceholderCompatibilityMode@4
_RtlSetSaclSecurityDescriptor@16
_RtlSetSystemBootStatus@16
_RtlSetSystemBootStatusEx@12
_RtlSetThreadPlaceholderCompatibilityMode@4
_RtlSetTimeZoneInformation@4
_RtlShiftLeftBitMap@8
_RtlSidDominates@12
_RtlSidDominatesForTrust@12
_RtlSidHashInitialize@12
_RtlSidHashLookup@8
_RtlSizeHeap@12
_RtlSizeTAdd@12
_RtlSparseArrayElementAllocate@12
_RtlSparseArrayElementAllocated@8
_RtlSparseArrayElementFindCapped@12
_RtlSparseArrayStart@20
_RtlSplay@4
_RtlStackTraceHashFunction@8
_RtlStateDurationAdd@8
_RtlStateDurationCapture@16
_RtlStateDurationDelta@12
_RtlStateDurationUpdate@12
_RtlStdInitializeStackDatabase@16
_RtlStdLogStackTrace@8
_RtlStdReleaseStackTrace@8
_RtlStringCbCatExA@24
_RtlStringCbCatNW@16
_RtlStringCbCatW@12
_RtlStringCbCopyA@12
_RtlStringCbCopyExA@24
_RtlStringCbCopyExW@24
_RtlStringCbCopyNA@16
_RtlStringCbCopyNExW@28
_RtlStringCbCopyNW@16
_RtlStringCbCopyUnicodeString@12
_RtlStringCbCopyW@12
_RtlStringCbLengthA@12
_RtlStringCbLengthW@12
_RtlStringCbPrintfA
_RtlStringCbPrintfExA
_RtlStringCbPrintfExW
_RtlStringCbPrintfW
_RtlStringCbVPrintfA@16
_RtlStringCchCatExW@24
_RtlStringCchCatNW@16
_RtlStringCchCatW@12
_RtlStringCchCopyA@12
_RtlStringCchCopyExW@24
_RtlStringCchCopyNExW@28
_RtlStringCchCopyNW@16
_RtlStringCchCopyW@12
_RtlStringCchLengthW@12
_RtlStringCchPrintfA
_RtlStringCchPrintfExW
_RtlStringCchPrintfW
_RtlStringFromGUID@8
_RtlStringFromGUIDEx@12
_RtlStronglyEnumerateEntryHashTable@8
_RtlSubAuthorityCountSid@4
_RtlSubAuthoritySid@8
_RtlSubtreePredecessor@4
_RtlSubtreeSuccessor@4
_RtlSuffixUnicodeString@12
_RtlSystemTimeToLocalTime@8
_RtlTestBit@8
_RtlTestProtectedAccess@8
_RtlTimeFieldsToTime@8
_RtlTimeToElapsedTimeFields@8
_RtlTimeToSecondsSince1970@8
_RtlTimeToSecondsSince1980@8
_RtlTimeToTimeFields@8
_RtlTimelineBitmapMerge@8
_RtlTimelineBitmapUpdate@8
_RtlTimelineBitmapUpdateRange@12
_RtlTraceDatabaseAdd@16
_RtlTraceDatabaseCreate@20
_RtlTraceDatabaseDestroy@4
_RtlTraceDatabaseEnumerate@12
_RtlTraceDatabaseFind@16
_RtlTraceDatabaseLock@4
_RtlTraceDatabaseUnlock@4
_RtlTraceDatabaseValidate@4
_RtlTryEndReadTickLock@12
_RtlUIntAdd@12
_RtlUIntPtrAdd@12
_RtlULongAdd@12
_RtlULongLongAdd@20
_RtlULongLongMult@20
_RtlULongLongSub@20
_RtlULongLongToUInt@12
_RtlULongLongToULong@12
_RtlULongPtrAdd@12
_RtlULongPtrSub@12
_RtlULongSub@12
_RtlUShortAdd@12
_RtlUTF8StringToUnicodeString@12
_RtlUTF8ToUnicodeN@20
_RtlUdiv128@28
_RtlUnicodeStringCat@8
_RtlUnicodeStringCatString@8
_RtlUnicodeStringCbCatStringN@12
_RtlUnicodeStringCchCopyStringN@12
_RtlUnicodeStringCopy@8
_RtlUnicodeStringCopyString@8
_RtlUnicodeStringCopyStringEx@16
_RtlUnicodeStringPrintf
_RtlUnicodeStringPrintfEx
_RtlUnicodeStringToAnsiString@12
_RtlUnicodeStringToCountedOemString@12
_RtlUnicodeStringToInt64@16
_RtlUnicodeStringToInteger@12
_RtlUnicodeStringToOemString@12
_RtlUnicodeStringToUTF8String@12
_RtlUnicodeToCustomCPN@24
_RtlUnicodeToMultiByteN@20
_RtlUnicodeToMultiByteSize@12
_RtlUnicodeToOemN@20
_RtlUnicodeToUTF8N@20
_RtlUnlockBootStatusData@4
_RtlUnregisterFeatureConfigurationChangeNotification@4
_RtlUnsignedMultiplyHigh@16
_RtlUnwind@16
_RtlUpcaseUnicodeChar@4
_RtlUpcaseUnicodeString@12
_RtlUpcaseUnicodeStringToAnsiString@12
_RtlUpcaseUnicodeStringToCountedOemString@12
_RtlUpcaseUnicodeStringToOemString@12
_RtlUpcaseUnicodeToCustomCPN@24
_RtlUpcaseUnicodeToMultiByteN@20
_RtlUpcaseUnicodeToOemN@20
_RtlUpdateSwapReference@8
_RtlUpperChar@4
_RtlUpperString@8
_RtlValidAcl@4
_RtlValidProcessProtection@4
_RtlValidRelativeSecurityDescriptor@12
_RtlValidSecurityDescriptor@4
_RtlValidSid@4
_RtlValidateCorrelationVector@4
_RtlValidateUnicodeString@8
_RtlVerifyVersionInfo@16
_RtlWalkFrameChain@12
_RtlWeaklyEnumerateEntryHashTable@8
_RtlWow64GetEquivalentMachineCHPE@4
_RtlWriteAcquireTickLock@4
_RtlWriteRegistryValue@24
_RtlWriteReleaseTickLock@4
_RtlWriteTryAcquireTickLock@4
_RtlXRestore@12
_RtlXRestoreS@12
_RtlXSave@12
_RtlXSaveS@12
_RtlZeroHeap@8
_RtlZeroMemory@8
_RtlpAddIntersectingRanges@16
_RtlpAddKnownAce@24
_RtlpAddKnownObjectAce@32
_RtlpAddRange@12
_RtlpAddToMergedRange@12
_RtlpAllocDeallocQueryBuffer@16
_RtlpAllocateAtom@8
_RtlpAllocateAtomTableEntry@12
_RtlpAllocateHeapInternal@16
_RtlpAllocateHeapRaiseException@4
_RtlpAllocateSecondLevelDir@4
_RtlpAllowsLowBoxAccess@4
_RtlpAnalyzeHeapFailure@12
_RtlpApplyAclToObject@8
_RtlpAtomMapAtomToHandleEntry@8
_RtlpCSparseBitmapLock@12
_RtlpCSparseBitmapPageCommit@16
_RtlpCSparseBitmapPageDecommit@12
_RtlpCSparseBitmapUnlock@4
_RtlpCSparseBitmapWaitOnAddress@16
_RtlpCalculateSubsegmentSizeIndex@8
_RtlpCallQueryRegistryRoutine@28
_RtlpCapChkTelemetryRunOnce@12
_RtlpCapabilityCheckSystemCapability@12
_RtlpCaptureContext@4
_RtlpCheckDynamicTimeZoneInformation@8
_RtlpCoalesceFreeBlocks@16
_RtlpCombineAcls@32
_RtlpCompareKnownObjectAces@16
_RtlpCompressRvaList@28
_RtlpComputeCrcInternal@20
_RtlpComputeFraction@12
_RtlpComputeMergedAcl2@44
_RtlpComputeMergedAcl@40
_RtlpConstructCrossVmObjectPath@12
_RtlpConvertAbsoluteToRelativeSecurityAttribute@12
_RtlpConvertToMergedRange@4
_RtlpCopyAces@56
_RtlpCopyBitMapTailToHead@16
_RtlpCopyEffectiveAce@64
_RtlpCopyExtendedContext@24
_RtlpCopyLegacyContext@16
_RtlpCopyLegacyContextAmd64@16
_RtlpCopyLegacyContextArm64@16
_RtlpCopyLegacyContextArm@16
_RtlpCopyLegacyContextX86@16
_RtlpCopyRangeListEntry@4
_RtlpCopyXStateChunk@20
_RtlpCountLeadingZeroes64@8
_RtlpCreateHashTable@16
_RtlpCreateHeapEncoding@4
_RtlpCreateRangeListEntry@28
_RtlpCreateServerAcl@20
_RtlpCreateUCREntry@24
_RtlpCreateUserProcess@24
_RtlpCreateUserThreadEx@44
_RtlpCtAllocateMemory@4
_RtlpCtContextFree@4
_RtlpCtContextInit@8
_RtlpCtFreeMemory@4
_RtlpCtInitializeNotificationEvent@8
_RtlpCtInitializeWorkItem@8
_RtlpCtQueueWorkItem@4
_RtlpCtSelfSubscribe@4
_RtlpDeCommitFreeBlock@16
_RtlpDeleteData@12
_RtlpDeleteFromMergedRange@8
_RtlpDeleteRangeListEntry@4
_RtlpDereferenceAtom@12
_RtlpDestroyHeapSegment@4
_RtlpDidUnicodeToOemWork@8
_RtlpDynamicLookasideBucketCompare
_RtlpDynamicLookasideFlush@8
_RtlpDynamicLookasideInitialize@12
_RtlpDynamicLookasideRebalance@4
_RtlpEnvRegisterFaultRange@20
_RtlpExecuteHandlerForException@20
_RtlpExecuteHandlerForUnwind@20
_RtlpExtendHeap@8
_RtlpFcAddDelayedUsageReportToBuffer@8
_RtlpFcAddUsageSubscriptionFromUpdate@12
_RtlpFcApplyUpdateAndAddFeature@16
_RtlpFcApplyUsageSubscriptionUpdate@16
_RtlpFcAreSortedFeatureUpdatesValid@8
_RtlpFcBufferManagerDereferenceBuffers@8
_RtlpFcBufferManagerReferenceBuffers@12
_RtlpFcBufferManagerUpdateBuffers@16
_RtlpFcCalculateRequiredSizeForNewFeatureTable@16
_RtlpFcCalculateRequiredSizeForNewUsageSubscriptionTable@16
_RtlpFcCompareFeatureToUpdate@8
_RtlpFcCompareUpdates
_RtlpFcCompareUsageSubscriptionToUsageSubscription@8
_RtlpFcCompareUsageSubscriptionUpdates
_RtlpFcCreateAndAddFeatureFromUpdate@12
_RtlpFcDoesFeatureHaveUniqueState@4
_RtlpFcEnterRegion@4
_RtlpFcInitializeBuffers@4
_RtlpFcIsUpdateModifyingOrAddingFeature@4
_RtlpFcLeaveRegion@4
_RtlpFcLinearSearchInSortedArray@20
_RtlpFcLowerBounds@20
_RtlpFcNotifyFeatureUsageTarget@8
_RtlpFcQueryAllFeatureConfigurationsFromBuffers@12
_RtlpFcQueryFeatureConfigurationFromBuffers@16
_RtlpFcReadHighLowHigh@4
_RtlpFcSectionTypeToBufferType@4
_RtlpFcSendFeatureUsageNotifications@12
_RtlpFcUpdateFeature@8
_RtlpFcUpdateFeatureConfiguration@24
_RtlpFcUpdateUsageTriggers@24
_RtlpFcValidateFeatureConfigurationType@4
_RtlpFcWriteHighLowHigh@12
_RtlpFillMemoryRandomDown@20
_RtlpFillMemoryRandomInvertedDown@20
_RtlpFillMemoryRandomInvertedUp@20
_RtlpFillMemoryRandomUp@20
_RtlpFillMemoryWithInverseStride@20
_RtlpFillMemoryWithStride@20
_RtlpFilterSacl@16
_RtlpFindAndCommitPages@8
_RtlpFindEntry@8
_RtlpFindMessageInTable@16
_RtlpFindRegTziForCurrentYear@12
_RtlpFreeAllAtom@8
_RtlpFreeAtom@4
_RtlpFreeHandleForAtom@8
_RtlpFreeHeapInternal@20
_RtlpFreeRangeListEntry@4
_RtlpGenerateInheritAcl@60
_RtlpGenerateInheritedAce@56
_RtlpGenericBasicInverseCoupling@8
_RtlpGenericBasicMATSPlus@8
_RtlpGenericBasicStride6@8
_RtlpGenericInverseCouplingWorker@16
_RtlpGenericMATSPlusWorker@16
_RtlpGenericRandomPatternWorker@8
_RtlpGenericStrideWorker@20
_RtlpGetBootStatusPath@8
_RtlpGetBootStatusPathFromRegistry@4
_RtlpGetBucketIndex@8
_RtlpGetChainHead@8
_RtlpGetCodePageData@4
_RtlpGetContextFlagsLocation@8
_RtlpGetDynamicTimeZoneInfoHandle@8
_RtlpGetEntireXStateAreaLength@8
_RtlpGetHeapInterceptorIndex@4
_RtlpGetLegacyContextLength@12
_RtlpGetNameFromLangInfoNode@12
_RtlpGetNormalization@8
_RtlpGetNtProductTypeFromRegistry@4
_RtlpGetPolicyValueForSystemCapability@8
_RtlpGetRegistryHandle@16
_RtlpGetSebDataAndFilterBuffer@40
_RtlpGetSetBootStatusData@24
_RtlpGetStackLimits@8
_RtlpGetSubSegmentBlockCount@16
_RtlpGetTimeZoneInfoHandle@8
_RtlpGetTokenNamedObjectPath@16
_RtlpGetWindowsPolicy@16
_RtlpGuidPresentInGuidList@12
_RtlpHashStringToAtom@28
_RtlpHeapAddListEntry@24
_RtlpHeapExceptionFilter@8
_RtlpHeapFindListLookupEntry@20
_RtlpHeapGenerateRandomValue64@0
_RtlpHeapHandleError@4
_RtlpHeapRemoveListEntry@24
_RtlpHpAcquireLockExclusive@8
_RtlpHpAcquireLockShared@8
_RtlpHpAcquireQueuedLockExclusive@12
_RtlpHpAcquireReleaseLockExclusive@8
_RtlpHpAllocVA@28
_RtlpHpAllocVirtBlockCommitFirst@16
_RtlpHpAllocWithExceptionProtection@12
_RtlpHpAllocateHeap@16
_RtlpHpCheckAllocationSizeLimit@12
_RtlpHpConvertCreationFlags@8
_RtlpHpConvertFlagsToSegmentFlags@4
_RtlpHpEnvAllocVA@36
_RtlpHpEnvFreeVA@12
_RtlpHpEnvGetHeapManager@8
_RtlpHpExtrasAppend@28
_RtlpHpExtrasGet@16
_RtlpHpExtrasSetPresent@12
_RtlpHpFixedHeapAlloc@12
_RtlpHpFixedHeapCommitRoutine@12
_RtlpHpFixedHeapCreate@28
_RtlpHpFixedVsAllocate@20
_RtlpHpFixedVsCommit@12
_RtlpHpFixedVsDecommit@12
_RtlpHpFixedVsFree@16
_RtlpHpFreeHeap@20
_RtlpHpFreeVA@20
_RtlpHpFreeWithExceptionProtection@12
_RtlpHpGetOwnerHeap@12
_RtlpHpHeapAllocate@16
_RtlpHpHeapCheckCommitLimit@16
_RtlpHpHeapCompact@8
_RtlpHpHeapCreate@20
_RtlpHpHeapDestroy@4
_RtlpHpHeapExtendContext@8
_RtlpHpHeapHandleError@12
_RtlpHpLargeAlloc@16
_RtlpHpLargeAllocGetOwner@12
_RtlpHpLargeAllocSetExtraPresent@12
_RtlpHpLargeAllocSize@16
_RtlpHpLargeAllocSizeInternal@12
_RtlpHpLargeAllocationDestroy@8
_RtlpHpLargeFree@12
_RtlpHpLegacyGetEnvHandle@0
_RtlpHpLfhBucketActivate@8
_RtlpHpLfhBucketAddSubsegment@16
_RtlpHpLfhBucketAllocateSlot@12
_RtlpHpLfhBucketComputeNewSubsegmentBlockCount@8
_RtlpHpLfhBucketGetSubsegment@8
_RtlpHpLfhBucketInitialize@12
_RtlpHpLfhBucketSubsegmentStatsUpdate@8
_RtlpHpLfhBucketUpdateAffinityMapping@8
_RtlpHpLfhBucketUpdateStats@12
_RtlpHpLfhContextAllocate@16
_RtlpHpLfhContextCleanup@4
_RtlpHpLfhContextCompact@8
_RtlpHpLfhContextInitialize@28
_RtlpHpLfhContextMaximumExtension@4
_RtlpHpLfhOwnerCleanup@8
_RtlpHpLfhOwnerCompact@12
_RtlpHpLfhOwnerInitialize@16
_RtlpHpLfhOwnerMoveSubsegment@12
_RtlpHpLfhSlotAddSubsegment@8
_RtlpHpLfhSlotAllocate@20
_RtlpHpLfhSubsegmentComputeCommitUnit@8
_RtlpHpLfhSubsegmentCountEmptyUnits@4
_RtlpHpLfhSubsegmentCreate@12
_RtlpHpLfhSubsegmentDecBlockCounts@20
_RtlpHpLfhSubsegmentDecommitPages@20
_RtlpHpLfhSubsegmentFindEmptyUnits@12
_RtlpHpLfhSubsegmentFree@16
_RtlpHpLfhSubsegmentFreeBlock@16
_RtlpHpLfhSubsegmentIncBlockCounts@28
_RtlpHpLfhSubsegmentInitialize@20
_RtlpHpLfhSubsegmentSetExtraPresentBlock@12
_RtlpHpLfhSubsegmentSetOwner@8
_RtlpHpLfhSubsegmentSizeBlock@16
_RtlpHpLfhSubsegmentSizeBlockInternal@16
_RtlpHpMetadataAlloc@20
_RtlpHpMetadataCommit@24
_RtlpHpMetadataFree@12
_RtlpHpMetadataHeapCreate@12
_RtlpHpMetadataHeapCtxGet@8
_RtlpHpMetadataHeapStart@12
_RtlpHpQueryVA@20
_RtlpHpRegisterEnvironment@8
_RtlpHpReleaseQueuedLockExclusive@8
_RtlpHpScheduleCompaction@4
_RtlpHpSegAlloc@20
_RtlpHpSegContextCleanup@4
_RtlpHpSegContextCompact@8
_RtlpHpSegContextInitialize@36
_RtlpHpSegContextReserve@12
_RtlpHpSegDescriptorValidate@8
_RtlpHpSegFree@12
_RtlpHpSegFreeRangeInsert@12
_RtlpHpSegFreeRangeRemove@8
_RtlpHpSegGetOwner@8
_RtlpHpSegHeapAddSegment@8
_RtlpHpSegLargeRangeAllocate@16
_RtlpHpSegLfhAllocate@20
_RtlpHpSegLfhExtendContext@8
_RtlpHpSegLfhVsCommit@12
_RtlpHpSegLfhVsDecommit@12
_RtlpHpSegLfhVsFree@16
_RtlpHpSegMgrAllocate@12
_RtlpHpSegMgrApplyLargePagePolicy@4
_RtlpHpSegMgrCommit@28
_RtlpHpSegMgrCommitComplete@24
_RtlpHpSegMgrCommitInitiate@24
_RtlpHpSegMgrRelease@12
_RtlpHpSegMgrReserve@20
_RtlpHpSegMgrVaCtxFree@12
_RtlpHpSegMgrVaCtxInitialize@16
_RtlpHpSegMgrVaCtxInsert@8
_RtlpHpSegPageRangeAllocate@12
_RtlpHpSegPageRangeCoalesce@20
_RtlpHpSegPageRangeCommit@24
_RtlpHpSegPageRangeComputeLargePageCost@12
_RtlpHpSegPageRangeCountCommittedPages@12
_RtlpHpSegPageRangeFree@12
_RtlpHpSegPageRangeHandleCommit@20
_RtlpHpSegPageRangeShrink@16
_RtlpHpSegPageRangeSplit@12
_RtlpHpSegSegmentAllocate@12
_RtlpHpSegSegmentComputeCommit@8
_RtlpHpSegSegmentFree@16
_RtlpHpSegSegmentInitialize@12
_RtlpHpSegSetExtraPresent@8
_RtlpHpSegSize@16
_RtlpHpSegSizeInternal@20
_RtlpHpSegSubAllocate@20
_RtlpHpSegVsAllocate@20
_RtlpHpSizeHeap@12
_RtlpHpSizeHeapInternal@16
_RtlpHpVaMgrAlloc@12
_RtlpHpVaMgrAllocAligned@12
_RtlpHpVaMgrCtxAllocatorCompare@12
_RtlpHpVaMgrCtxAllocatorDereference@8
_RtlpHpVaMgrCtxAllocatorFind@16
_RtlpHpVaMgrCtxAllocatorReference@12
_RtlpHpVaMgrCtxFree@12
_RtlpHpVaMgrCtxInitialize@4
_RtlpHpVaMgrCtxQuery@12
_RtlpHpVaMgrCtxStart@20
_RtlpHpVaMgrFree@8
_RtlpHpVaMgrRangeCleanup@8
_RtlpHpVaMgrRangeCoalesce@8
_RtlpHpVaMgrRangeCreate@12
_RtlpHpVaMgrRangeFind@16
_RtlpHpVaMgrRangeFree@8
_RtlpHpVaMgrRangeMarkAllocated@12
_RtlpHpVaMgrRangeSplit@12
_RtlpHpVaMgrRegionAllocate@4
_RtlpHpVaMgrStart@20
_RtlpHpVsChunkAlignSplit@12
_RtlpHpVsChunkCoalesce@16
_RtlpHpVsChunkComputeCost@16
_RtlpHpVsChunkDecommit@20
_RtlpHpVsChunkFree@20
_RtlpHpVsChunkSetExtraPresent@12
_RtlpHpVsChunkSetUnusedBytes@16
_RtlpHpVsChunkSize@16
_RtlpHpVsChunkSplit@24
_RtlpHpVsContextAddSubsegment@8
_RtlpHpVsContextAllocate@16
_RtlpHpVsContextAllocateInternal@24
_RtlpHpVsContextFree@20
_RtlpHpVsContextFreeInternal@20
_RtlpHpVsContextFreeList@12
_RtlpHpVsContextInitialize@24
_RtlpHpVsContextMultiAlloc@24
_RtlpHpVsFreeChunkInsert@12
_RtlpHpVsFreeChunkRemove@12
_RtlpHpVsSubsegmentCleanup@8
_RtlpHpVsSubsegmentCommitPages@24
_RtlpHpVsSubsegmentComputeSize@12
_RtlpHpVsSubsegmentCreate@12
_RtlpHpVsSubsegmentFree@12
_RtlpHpVsSubsegmentInitialize@16
_RtlpIdnToUnicodeWorker@28
_RtlpImageDirectoryEntryToData32@24
_RtlpImageDirectoryEntryToData64@24
_RtlpImageDirectoryEntryToDataEx@20
_RtlpInheritAcl2@72
_RtlpInitNlsFileName@20
_RtlpInitNlsSectionName@20
_RtlpInitializeHandleTableForAtomTable@4
_RtlpInitializeHeapSegment@32
_RtlpInitializeLockAtomTable@4
_RtlpInitializeStackTraceDatabase@12
_RtlpInsertFreeBlock@12
_RtlpInsertStringAtom@8
_RtlpInternEntryCreate@16
_RtlpInternEntryFind@16
_RtlpInternEntryHash@8
_RtlpInternEntryMatch@12
_RtlpInternHashBucketsAllocate@8
_RtlpInternHashBucketsFree@8
_RtlpIsALicensedLIPLanguage@8
_RtlpIsALicensedRegularLanguage@8
_RtlpIsAppContainer@8
_RtlpIsDuplicateAce@8
_RtlpIsNameInExpressionPrivate@20
_RtlpIsRangeAvailable@44
_RtlpIsUtf8Process@4
_RtlpIsValidExceptionChain@16
_RtlpLangNameInMultiSzString@8
_RtlpLfhBucketUsageUpdate@12
_RtlpLfhIncrementDataSlot@0
_RtlpLoadInstallLanguageFallback@12
_RtlpLoadLanguageConfigList@12
_RtlpLoadPolicyLanguageSpec@16
_RtlpLocateRelatedBlocks@8
_RtlpLockAtomTable@4
_RtlpLogCapabilityCheckLatency@24
_RtlpLogExceptionDispatch@8
_RtlpLogExceptionHandler@16
_RtlpLogHeapFailure@24
_RtlpLookasideAdjustDepth@8
_RtlpLookupLowBox@12
_RtlpLookupOrCreateLowBox@12
_RtlpMakeXpressCallback@12
_RtlpMuiRegAddAlternateCodePage@8
_RtlpMuiRegAddLanguageByName@24
_RtlpMuiRegConfigListAddLanguage@12
_RtlpMuiRegConfigMatchesInstalled@28
_RtlpMuiRegCreateKernelRegistryInfo@28
_RtlpMuiRegCreateLanguageConfigList@4
_RtlpMuiRegCreateLanguages@4
_RtlpMuiRegCreateRegistryInfo@0
_RtlpMuiRegCreateStringPool@8
_RtlpMuiRegFreeRegistryInfo@8
_RtlpMuiRegGetInstalledLangInfoIndex@16
_RtlpMuiRegGetInstalledLanguageIndex@16
_RtlpMuiRegGetInstalledLanguageIndexByLangId@16
_RtlpMuiRegGetInstalledLanguageIndexByName@16
_RtlpMuiRegGetLangInfoIndex@8
_RtlpMuiRegGetLanguageSpec@20
_RtlpMuiRegGetOrAddLangInfo@12
_RtlpMuiRegGetOrAddString@16
_RtlpMuiRegGetOrAddStringToPool@16
_RtlpMuiRegGetStringIndexInPool@8
_RtlpMuiRegGrowLanguageConfigList@8
_RtlpMuiRegGrowLanguages@8
_RtlpMuiRegGrowStringPool@16
_RtlpMuiRegLangInfoMatchesSpec@16
_RtlpMuiRegLoadLicInformation@4
_RtlpMuiRegLoadRegistryInfo@8
_RtlpMuiRegResizeLanguageConfigList@8
_RtlpMuiRegResizeLanguages@8
_RtlpMuiRegResizeStringPool@16
_RtlpMuiRegValidateConfigNode@8
_RtlpNameprepAsciiRealWorker@40
_RtlpNameprepAsciiWorker@24
_RtlpNewSecurityObject@40
_RtlpNopProcessorCallback@8
_RtlpNormalizeStringWorker@20
_RtlpOpenImageFileOptionsKeyEx@16
_RtlpOpenThreadToken@8
_RtlpOwnerAcesPresent@8
_RtlpPopulateContext@12
_RtlpPopulateLanguageConfigList@12
_RtlpPopulateListIndex@8
_RtlpProcessIFEOKeyFilter@12
_RtlpQueryLowBoxId@0
_RtlpQueryPackageIdentityAttributes@20
_RtlpQueryRegistryDirect@16
_RtlpQueryRegistryValues@24
_RtlpQuerySecurityDescriptor@36
_RtlpQueryTimeZoneInformationWorker@8
_RtlpQueryTimeZoneKeyNameRoutine@24
_RtlpReadExtendedContext@24
_RtlpReadExtendedContextLayout@20
_RtlpRecordBootStatusData@16
_RtlpReferenceAtom@8
_RtlpRegTziFormatToTzi@8
_RtlpRtlpCtSelfSubscribeCallback@24
_RtlpRtlpCtWaitForWnfQuiescentWorker@4
_RtlpRunOnceWaitForInit@8
_RtlpRunOnceWakeAll@4
_RtlpSampleLFGRng@4
_RtlpSanitizeContextFlags@8
_RtlpSeedGlfsr@0
_RtlpSetRvaListRvaStateBits@12
_RtlpSetSecurityObject@32
_RtlpSetTimeZoneInformationWorker@8
_RtlpSizeHeapInternal@12
_RtlpSpreadBits@20
_RtlpStackTraceDatabaseLogPrefix@16
_RtlpStdExtendLowerWatermark@8
_RtlpStdExtendUpperWatermark@8
_RtlpStdGetRecordedStackTraceIndex@8
_RtlpStdGetSpaceForTrace@8
_RtlpStdListRemove@8
_RtlpStdLogCapturedStackTrace@12
_RtlpSysVolCheckOwnerAndSecurity@8
_RtlpSysVolCreateSecurityDescriptor@8
_RtlpSysVolTakeOwnership@4
_RtlpSystemBootStatusRequest@16
_RtlpSystemTimeToTimeFields@8
_RtlpTerminateCurrentProcess@4
_RtlpTestAndFillMemoryDown@16
_RtlpTestAndFillMemoryRandomUp@20
_RtlpTestAndFillMemoryUp@16
_RtlpTestMemory@12
_RtlpTestMemoryRandomDown@20
_RtlpTestMemoryRandomUp@20
_RtlpTestMemoryWithStride@20
_RtlpTimeFieldsToTime@12
_RtlpTimeFieldsToTimeNoLeapSeconds@8
_RtlpTimeToTimeFields@12
_RtlpTimeToTimeFieldsNoLeapSeconds@8
_RtlpTraceDatabaseAcquireLock@4
_RtlpTraceDatabaseAllocate@12
_RtlpTraceDatabaseInitializeLock@4
_RtlpTraceDatabaseInternalAdd@16
_RtlpTraceDatabaseInternalFind@16
_RtlpTraceDatabaseReleaseLock@4
_RtlpTreeDoubleRotateNodes@20
_RtlpUnlockAtomTable@4
_RtlpUpcaseUnicodeStringPrivate@12
_RtlpUpdateDynamicTimeZones@4
_RtlpUpdateLfhRandomDataArray@0
_RtlpValidAccessFilterAce@4
_RtlpValidAttribute@4
_RtlpValidAttributeAce@4
_RtlpValidAttributeInfo@4
_RtlpValidCompoundAce@4
_RtlpValidFilterAclSubjectContext@8
_RtlpValidObjectAce@4
_RtlpValidRelativeAttribute@8
_RtlpValidTrustSubjectContext@16
_RtlpValidateAsciiStd3AndLength@16
_RtlpValidateContextFlags@8
_RtlpValidateKeyTrust@8
_RtlpValidateSDOffsetAndSize@16
_RtlpValidateSidBuffer@8
_RtlpVerCompare@20
_RtlpVerGetConditionMask@12
_RtlpWriteExtendedContext@20
_RtlpxLookupFunctionTable@8
_RtlxAnsiStringToUnicodeSize@4
_RtlxOemStringToUnicodeSize@4
_RtlxUnicodeStringToAnsiSize@4
_RtlxUnicodeStringToOemSize@4
_RunLengthEncode@8
_SLGetSubscriptionPfn@8
_SLQueryLicenseValueInternal@24
_SLSendPolicyChangeNotifications@4
_SLUpdateLicenseDataInternal@12
_SSHSupportAcquirePushLockExclusive@4
_SSHSupportAllocateNonPaged@8
_SSHSupportAllocatePaged@8
_SSHSupportEtwRegister@16
_SSHSupportEtwUnregister@8
_SSHSupportEtwWrite@24
_SSHSupportFree@8
_SSHSupportInitializePushLock@4
_SSHSupportQueryInterruptTime@0
_SSHSupportRegisterPowerSettingCallback@20
_SSHSupportReleasePushLockExclusive@4
_SSHSupportUnregisterPowerSettingCallback@4
_SUBTRACT_MAP_REGISTERS@8
_SbpAddTransportToInstance@0
_SbpStartLanman@0
_SbpVmbusNotificationHandler@8
_SbpWaitForVmbus@0
_SdbCloseDatabaseRead@4
_SdbFindFirstNamedTag@20
_SdbFindFirstStringIndexedTag@20
_SdbFindFirstTag@12
_SdbFindNextStringIndexedTag@8
_SdbFindNextTag@12
_SdbGetBinaryTagData@8
_SdbGetDatabaseEdition@4
_SdbGetDatabaseID@8
_SdbGetDatabaseMatch@20
_SdbGetDatabaseMatchEx@28
_SdbGetEntryFlags@8
_SdbGetFirstChild@8
_SdbGetIndex@16
_SdbGetKShimTagRef@8
_SdbGetNextChild@12
_SdbGetPathCustomSdb@16
_SdbGetStringTagPtr@8
_SdbGetTagDataSize@8
_SdbGetTagFromTagID@8
_SdbGuestHostArchsToRuntimePlatformFlag@8
_SdbGuestTargetPlatformFlagsToRuntimePlatformFlags@4
_SdbInitDatabaseInMemory@8
_SdbMakeIndexKeyFromStringEx@8
_SdbOpenDatabaseEx@16
_SdbQueryDataEx@28
_SdbQueryDataExTagID@28
_SdbReadBinaryTag@16
_SdbReadDWORDTag@12
_SdbReadEntryInformation@12
_SdbReadGUIDTag@24
_SdbReadQWORDTag@16
_SdbReadWORDTag@12
_SdbReleaseDatabase@4
_SdbResolveDatabaseEx@24
_SdbTagIDToTagRef@16
_SdbTagRefToTagID@16
_SdbpBinarySearchFirst@20
_SdbpBinarySearchUnique@20
_SdbpCheckAllAttributes@20
_SdbpCheckAttribute@20
_SdbpCheckExe@32
_SdbpCheckForMatch@24
_SdbpCheckFromVersion@16
_SdbpCheckKObject@28
_SdbpCheckMatchingDevice@28
_SdbpCheckMatchingDir@28
_SdbpCheckMatchingFiles@28
_SdbpCheckMatchingRegistry@28
_SdbpCheckMatchingRegistryEntry@40
_SdbpCheckMatchingRegistryValue@40
_SdbpCheckMatchingText@28
_SdbpCheckMatchingTextEntry@36
_SdbpCheckMatchingWildcardFiles@28
_SdbpCheckMatchingWildcardRegistry@28
_SdbpCheckMatchingWildcardRegistryEntry@40
_SdbpCheckOSKind@28
_SdbpCheckPackageAttributes@28
_SdbpCheckRuntimePlatform@28
_SdbpCheckRuntimePlatformImpl@16
_SdbpCheckRuntimePlatformV2Impl@12
_SdbpCheckUptoVersion@16
_SdbpCheckVersion@16
_SdbpCleanupLocalDatabaseSupport@4
_SdbpCloseLocalDatabaseEx@12
_SdbpCreateSearchDBContext@20
_SdbpCreateSearchPathPartsFromPath@8
_SdbpFindFirstIndexedWildCardTag@20
_SdbpFindLocalDatabaseByPDB@16
_SdbpFindMatcher@16
_SdbpFindMatchingName@12
_SdbpFindNextIndexedWildCardTag@8
_SdbpFindNextNamedTag@20
_SdbpFreePackageAttributes@4
_SdbpGetCustomSdbFileName@12
_SdbpGetDeviceDWORD@12
_SdbpGetExeEntryFlags@12
_SdbpGetFirstIndexedRecord@20
_SdbpGetIndex@12
_SdbpGetMappedStringFromTable@8
_SdbpGetMappedTagData@8
_SdbpGetMatchingTextAttributes@28
_SdbpGetNextIndexedRecord@12
_SdbpGetNextTagId@8
_SdbpGetPathAppPatch@16
_SdbpGetPathAppPatchPreRS3@16
_SdbpGetPathAppraiser@16
_SdbpGetPathCustomSdb@16
_SdbpGetPathCustomSdbPreRS3@16
_SdbpGetPathSystem@16
_SdbpGetProcessHistory@12
_SdbpGetProcessHostGuestArchitectures@12
_SdbpGetRegistryMatchingAttributes@40
_SdbpGetStringTableItemFromStringRef@16
_SdbpGetSystemSdbFilePath@24
_SdbpGetTagHeadSize@8
_SdbpInitializeMatchers@4
_SdbpInitializeSearchDBContext@4
_SdbpKeyToAnsiString@12
_SdbpMatchDeviceDWORD@24
_SdbpMatchDeviceString@16
_SdbpMatchList@28
_SdbpMatchOne@28
_SdbpMatchOsVersion@8
_SdbpOpenCompressedDatabase@12
_SdbpOpenDatabaseInMemory@12
_SdbpOpenLocalDatabaseEx@20
_SdbpQueryAppCompatFlagsByExeID@16
_SdbpReadMappedData@16
_SdbpReadStringRef@8
_SdbpReadTagData@16
_SdbpReleaseSearchDBContext@4
_SdbpRemoveSDBLookupEntry@8
_SdbpResolveMatchingFile@24
_SdbpSearchDB@24
_SdbpValidateAndApplyCompatFlags@12
_SddlAddAccessFilterAce@32
_SddlAddMandatoryAce@24
_SddlAddProcessTrustLabelAce@24
_SddlAddScopedPolicyIDAce@20
_SddlBaseInitialize@0
_SddlFilterSacl@16
_SddlpAlloc@12
_SddlpFree@4
_SddlpReAlloc@20
_SddlpUuidFromString@8
_SddlpUuidToString@8
_SeAccessCheck@40
_SeAccessCheckByType@48
_SeAccessCheckByTypeWithAdminlessChecks@56
_SeAccessCheckEx@24
_SeAccessCheckFromState@40
_SeAccessCheckFromStateEx@40
_SeAccessCheckWithHint@44
_SeAccessCheckWithHintWithAdminlessChecks@48
_SeAdjustAccessStateForAccessConstraints@12
_SeAdjustAccessStateForTrustLabel@12
_SeAdjustObjectSecurity@24
_SeAdtRegistryValueChangedAuditAlarm@32
_SeAppendPrivileges@8
_SeAssignPrimaryToken@8
_SeAssignSecurity@28
_SeAssignSecurityEx2@40
_SeAssignSecurityEx@36
_SeAssignWorldSecurityDescriptor@12
_SeAuditBootConfiguration@4
_SeAuditFipsCryptoSelftests@8
_SeAuditHandleCreation@12
_SeAuditHandleDuplication@16
_SeAuditHardLinkCreation@12
_SeAuditHardLinkCreationWithTransaction@16
_SeAuditHeaderRequired@4
_SeAuditPlugAndPlay@36
_SeAuditProcessCreation@8
_SeAuditProcessExit@8
_SeAuditSystemTimeChange@16
_SeAuditTransactionStateChange@12
_SeAuditingAnyFileEventsWithContext@8
_SeAuditingAnyFileEventsWithContextEx@12
_SeAuditingFileEvents@8
_SeAuditingFileEventsWithContext@12
_SeAuditingFileEventsWithContextEx@16
_SeAuditingFileOrGlobalEvents@12
_SeAuditingHardLinkEvents@8
_SeAuditingHardLinkEventsWithContext@12
_SeAuditingPlugAndPlayEvents@0
_SeCaptureAcl@32
_SeCaptureAtomTableCallout@0
_SeCaptureLuidAndAttributesArray@36
_SeCaptureObjectAttributeSecurityDescriptorPresent@12
_SeCaptureObjectTypeList@16
_SeCaptureSecurityDescriptor@20
_SeCaptureSecurityQos@16
_SeCaptureSid@28
_SeCaptureSidAndAttributesArray@36
_SeCaptureSubjectContext@4
_SeCaptureSubjectContextEx@12
_SeCaptureUnicodeStringStructures@16
_SeCheckAuditPrivilege@8
_SeCheckForCriticalAceRemoval@16
_SeCheckPrivilegedObject@20
_SeClearLearningModeObjectInformation@0
_SeCloseObjectAuditAlarm@12
_SeCloseObjectAuditAlarmForNonObObject@16
_SeCodeIntegrityGetBuildExpiryTime@4
_SeCodeIntegrityInitializePolicy@4
_SeCodeIntegrityQueryInformation@12
_SeCodeIntegrityQueryPolicyInformation@24
_SeCodeIntegritySetInformationProcess@16
_SeCompareSigningLevels@8
_SeCompareSigningLevelsForAuditableProcess@16
_SeComputeAutoInheritByObjectType@12
_SeComputeAutoInheritByObjectTypeEx@20
_SeComputeCreatorDeniedRights@16
_SeComputeQuotaInformationSize@8
_SeConvertSecurityDescriptorToStringSecurityDescriptor@20
_SeConvertSidToStringSid@8
_SeConvertStringSecurityDescriptorToSecurityDescriptor@16
_SeConvertStringSidToSid@8
_SeCopyClientToken@24
_SeCreateAccessState@16
_SeCreateAccessStateEx@24
_SeCreateAccessStateFromSubjectContext@20
_SeCreateClientSecurity@16
_SeCreateClientSecurityEx@16
_SeCreateClientSecurityFromSubjectContext@16
_SeCreateClientSecurityFromSubjectContextEx@16
_SeDeassignSecurity@4
_SeDefaultObjectMethod@36
_SeDeleteAccessState@4
_SeDeleteObjectAuditAlarm@8
_SeDeleteObjectAuditAlarmWithTransaction@12
_SeDuplicateTokenAndAddOriginClaim@16
_SeEtwEnableCallback@36
_SeEtwWriteKMCveEvent@8
_SeExamineGlobalSacl@28
_SeExamineSacl@28
_SeExchangePrimaryToken@12
_SeFastTraverseCheck@16
_SeFilterToken@24
_SeFreeCapturedObjectTypeList@4
_SeFreePrivileges@4
_SeGetCachedSigningLevel@24
_SeGetImageRequiredSigningLevel@20
_SeGetLinkedToken@12
_SeGetLogonSessionToken@12
_SeGetTokenControlInformation@8
_SeGetTokenDeviceMap@8
_SeGetTrustLabelAce@4
_SeImpersonateClient@8
_SeImpersonateClientEx@8
_SeInitServerSilo@4
_SeInitSystem@0
_SeIsAppContainerOrIdentifyLevelContext@8
_SeIsLearningModePermissiveEnabled@0
_SeIsParentOfChildAppContainer@12
_SeIsSModeAdminlessEnabled@0
_SeIsSystemContext@8
_SeIsTokenAssignableToProcess@8
_SeLocateProcessImageName@8
_SeLockSubjectContext@4
_SeLogAccessFailure@32
_SeMakeAnonymousLogonToken@0
_SeMakeAnonymousLogonTokenNoEveryone@0
_SeMakeSystemToken@0
_SeMarkLogonSessionForTerminationNotification@4
_SeMarkLogonSessionForTerminationNotificationEx@8
_SeMaximumAuditMask@16
_SeMaximumAuditMaskFromGlobalSacl@16
_SeObjectCreateSaclAccessBits@4
_SeObjectReferenceAuditAlarm@32
_SeOpenObjectAuditAlarm@36
_SeOpenObjectAuditAlarmForNonObObject@44
_SeOpenObjectAuditAlarmWithTransaction@40
_SeOpenObjectForDeleteAuditAlarm@36
_SeOpenObjectForDeleteAuditAlarmWithTransaction@40
_SeOperationAuditAlarm@28
_SePrivilegeCheck@12
_SePrivilegeObjectAuditAlarm@24
_SePrivilegePolicyCheck@24
_SePrivilegedServiceAuditAlarm@16
_SeQueryAuthenticationIdToken@8
_SeQueryHSTIResults@12
_SeQueryInformationToken@12
_SeQueryMandatoryLabel@4
_SeQueryMandatoryPolicyToken@8
_SeQuerySecureBootPlatformManifest@8
_SeQuerySecureBootPolicyValue@24
_SeQuerySecurityAccessMask@8
_SeQuerySecurityAttributesToken@24
_SeQuerySecurityAttributesTokenAccessInformation@24
_SeQuerySecurityDescriptorInfo@16
_SeQuerySecurityPolicy@24
_SeQueryServerSiloToken@8
_SeQuerySessionIdToken@8
_SeQuerySessionIdTokenEx@12
_SeQuerySigningPolicy@28
_SeQuerySigningPolicyWorker@32
_SeQueryTokenIntegrity@8
_SeQueryTokenTrustLink@4
_SeQueryTokenTrustSid@4
_SeQueryTrustedPlatformModuleInformation@12
_SeQueryUserSidToken@16
_SeRegisterElamCertResources@16
_SeRegisterImageVerificationCallback@24
_SeRegisterLogonSessionTerminatedRoutine@4
_SeRegisterLogonSessionTerminatedRoutineEx@8
_SeRegisterObjectTypeMandatoryPolicy@8
_SeReleaseAcl@12
_SeReleaseImageValidationContext@4
_SeReleaseLuidAndAttributesArray@12
_SeReleaseSecurityDescriptor@12
_SeReleaseSid@12
_SeReleaseSidAndAttributesArray@12
_SeReleaseSubjectContext@4
_SeReportSecurityEvent@16
_SeReportSecurityEventWithSubCategory@20
_SeRmInitPhase1@0
_SeRmReferenceFindCapName@12
_SeSecureBootQueryInformation@16
_SeSecureBootRegisterPolicy@8
_SeSecurityAttributePresent@8
_SeSecurityDescriptorChangedAuditAlarm@52
_SeSecurityModelQueryInformation@12
_SeSetAccessStateGenericMapping@8
_SeSetAuditParameter@16
_SeSetLearningModeObjectInformation@4
_SeSetMandatoryPolicyToken@8
_SeSetPrivateNameSpaceToken@8
_SeSetSecurityAccessMask@8
_SeSetSecurityAttributesToken@16
_SeSetSecurityAttributesTokenEx@28
_SeSetSecurityDescriptorInfo@24
_SeSetSecurityDescriptorInfoEx2@32
_SeSetSecurityDescriptorInfoEx@28
_SeSetSessionIdToken@8
_SeSetSessionIdTokenWithLinked@8
_SeSetTokenTrustLink@8
_SeSetVirtualizationToken@8
_SeShouldCheckForAccessRightsFromParent@12
_SeShutdownServerSilo@8
_SeSinglePrivilegeCheck@12
_SeSinglePrivilegeCheckEx@16
_SeSrpAccessCheck@24
_SeSubProcessToken@44
_SeTokenCanImpersonate@16
_SeTokenDefaultDaclChangedAuditAlarm@20
_SeTokenFromAccessInformation@16
_SeTokenGetNoChildProcessRestricted@16
_SeTokenImpersonationLevel@4
_SeTokenIsAdmin@4
_SeTokenIsElevated@8
_SeTokenIsNoChildProcessRestrictionEnforced@8
_SeTokenIsRestricted@4
_SeTokenIsWriteRestricted@4
_SeTokenSetNoChildProcessRestricted@12
_SeTokenType@4
_SeUnlockSubjectContext@4
_SeUnregisterImageVerificationCallback@4
_SeUnregisterLogonSessionTerminatedRoutine@4
_SeUnregisterLogonSessionTerminatedRoutineEx@8
_SeValidSecurityDescriptor@8
_SeValidateFileAsImageType@12
_SeValidateImageData@28
_SeValidateImageHeader@56
_SeValidateSecurityQos@4
_SecureDump_ConvertBinaryToHexString@16
_SecureDump_ConvertParsedRSAPubKeyToBCryptPubKey@8
_SecureDump_ConvertToRsaBlob@8
_SecureDump_EncryptSymmetricKeyWithPublicKey@0
_SecureDump_Encrypt_DmpData@28
_SecureDump_GetCertificateThumbprint@12
_SecureDump_GetSecureDumpSettings@4
_SecureDump_Get_SecureDumpHeader@12
_SecureDump_Init@0
_SecureDump_LoadCertAndProvisionKey@20
_SecureDump_LogErrorEvent@4
_SecureDump_PrepareForInit@8
_SecureDump_ProvisionCrashDumpKey@4
_SecureDump_ReadRegistry@20
_SecureDump_SymmetricEncryptionSetup@0
_SecureDump_ValidateAmeCertChain@16
_SendCaptureStateNotificationsWorker@4
_SepAccessCheck@80
_SepAccessCheckAndAuditAlarm@68
_SepAccessCheckAndAuditAlarmWithAdminlessChecks@72
_SepAccessCheckEx@88
_SepAccessStatusHasAccessDenied@12
_SepAcquireOrderedReadLocks@8
_SepAddLuidToIndexEntry@12
_SepAddTokenLogonSession@4
_SepAddTokenOriginClaim@12
_SepAdjustAccessStateForConstraints@16
_SepAdjustGroups@40
_SepAdjustPrivileges@36
_SepAdtAuditObjectAccessWithContext@28
_SepAdtAuditPrivilegeUseWithContext@20
_SepAdtAuditThisEventByCategoryWithContext@12
_SepAdtAuditThisEventWithContext@16
_SepAdtAuditablePrivilege@8
_SepAdtCheckPrivilegeForSensitivity@12
_SepAdtClassifyObjectIntoSubCategory@16
_SepAdtCloseObjectAuditAlarm@20
_SepAdtCopyToLsaSharedMemory@16
_SepAdtDeleteObjectAuditAlarm@24
_SepAdtDetermineInsertQueue@4
_SepAdtGenerateDiscardAudit@4
_SepAdtIncorporatePerUserPolicy@20
_SepAdtInitLsaDeadEventForNonPagedList@4
_SepAdtInitializeAuditingOptions@0
_SepAdtInitializeBounds@0
_SepAdtInitializeCrashOnFail@0
_SepAdtInitializePrivilegeAuditing@0
_SepAdtLogAuditFailureEvent@8
_SepAdtLogAuditRecord@4
_SepAdtMarshallAuditRecord@16
_SepAdtObjectReferenceAuditAlarm@16
_SepAdtOpenEtwReadyEvent@4
_SepAdtOpenObjectAuditAlarm@76
_SepAdtOpenObjectForDeleteAuditAlarm@52
_SepAdtOpenRegAndSetupNotification@16
_SepAdtPrivilegeObjectAuditAlarm@40
_SepAdtPrivilegedServiceAuditAlarm@28
_SepAdtRegNotificationCallback@4
_SepAdtSecurityDescriptorChangedAuditAlarm@36
_SepAdtStagingEvent@48
_SepAdtTokenRightAdjusted@24
_SepAllocateAndInitializeCachedHandleEntry@8
_SepAppendAceToTokenDefaultDacl@8
_SepAppendAceToTokenObjectAcl@12
_SepAppendAdminAceToTokenAcl@4
_SepAppendDefaultDacl@8
_SepAppendPrimaryGroup@8
_SepAssemblePrivileges@20
_SepAssignTokenCachedHandleEntry@24
_SepAuditAssignPrimaryToken@8
_SepAuditFailed@4
_SepAuditFailedRaisedIrql@4
_SepAuditTypeList@24
_SepAuditingEnabledForSubcategory@12
_SepAuditingForSubCategory@8
_SepBlockAccessForLogonSession@4
_SepBuildCapPolicyTable@8
_SepBuildCapeSecurityDescriptor@12
_SepBuildDefaultCap@4
_SepBuildDefaultCape@4
_SepCanTokenMatchAllPackageSid@4
_SepCaptureAuditPolicy@28
_SepCaptureFqbnArray@16
_SepCaptureHandles@12
_SepCaptureInt64Array@16
_SepCaptureOctetStringArray@16
_SepCaptureTokenSecurityAttributesAndOperationsInformation@12
_SepCaptureTokenSecurityAttributesInformation@24
_SepCaptureTokenSecurityOperations@16
_SepCaptureUnicodeStringArray@16
_SepCheckAcl@8
_SepCheckAndCopySelfRelativeSD@16
_SepCheckCapabilities@20
_SepCheckCreateLowBox@4
_SepCheckForCriticalAceRemoval@20
_SepCleanSingletonEntry@4
_SepCleanupLUIDDeviceMapDirectory@8
_SepCleanupMarkedForDeletionEntries@0
_SepCloseCachedTokenHandles@8
_SepCommonAccessCheckEx@28
_SepCommonAccessCheckExWithAdminlessChecks@32
_SepCompareClaimAttributes@8
_SepCompareSidAndAttributeArrays@16
_SepCompareSidValuesBlocks@8
_SepComputeSidSignature@4
_SepConcatenatePrivileges@12
_SepConstrainByConstraintMask@28
_SepConstrainByMandatory@24
_SepConvertToOwnTokenClaims@4
_SepConvertTokenPrivileges@8
_SepConvertTokenPrivilegesToLuidAndAttributes@8
_SepCopyAnonymousTokenAndSetSilo@8
_SepCopyClientTokenAndSetSilo@16
_SepCopyObjectTypeList@12
_SepCopyTokenAccessInformation@60
_SepCopyTokenIntegrity@8
_SepCreateAccessStateFromSubjectContext@20
_SepCreateClaimAttributes@20
_SepCreateClientSecurityEx@44
_SepCreateImpersonationTokenDacl@12
_SepCreateLogonSessionTrack@4
_SepCreateSidValuesBlock@24
_SepCreateToken@76
_SepCreateTokenEx@96
_SepDeReferenceLogonSession@8
_SepDeReferenceLogonSessionDirect@4
_SepDeReferenceSharedSidEntries@8
_SepDeleteAccessState@4
_SepDeleteClaimAttributes@4
_SepDeleteLogonSessionSidValues@4
_SepDeleteLogonSessionTrack@8
_SepDeleteSessionLowboxEntries@0
_SepDeleteTokenClaims@4
_SepDeleteTokenUserAndGroups@4
_SepDeleteUnreferencedLogonSessionsInSilo@4
_SepDereferenceCachedHandlesEntry@8
_SepDereferenceLowBoxNumberEntry@8
_SepDereferenceLuidToIndexEntry@4
_SepDereferenceSidValuesBlock@12
_SepDesktopAppModifyTokenBreakaway@12
_SepDesktopAppxSubProcessToken@20
_SepDeviceSidInToken@24
_SepDuplicateClaimAttributes@8
_SepDuplicateLogonSessionReference@8
_SepDuplicateSid@8
_SepDuplicateToken@32
_SepDuplicateTokenClaims@8
_SepDuplicateTokenUserAndGroups@8
_SepEqualAsciiWideStringCaseInSensitive@8
_SepEvaluateAdminlessAccessCheckResults@36
_SepExamineGlobalSaclEx@52
_SepExamineSaclEx@52
_SepExpandDynamic@8
_SepExpandSingletonArrays@0
_SepFilterCheck@20
_SepFilterPrivilegeAudits@8
_SepFilterToDiscretionary@8
_SepFilterToken@44
_SepFindMatchingCachedHandlesEntry@16
_SepFindMatchingLowBoxNumberEntries@20
_SepFindMatchingLowBoxNumberEntry@12
_SepFindMatchingLuidEntry@12
_SepFindSharedSidEntry@4
_SepFlattenAcl@16
_SepFreeCapturedTokenSecurityAttributesInformation@4
_SepFreeDefaultDacl@4
_SepFreePrimaryGroup@4
_SepFreeResourceInfo@4
_SepFreeTokenCapabilities@4
_SepGetAnonymousToken@8
_SepGetCachedHandlesEntry@16
_SepGetCurrentLogLevel@0
_SepGetDefaultsSubjectContext@32
_SepGetLearningModeObjectInformation@4
_SepGetLogonSessionAccountInfo@16
_SepGetLowBoxNumberEntry@12
_SepGetProcUniqueLuidAndIndexFromAttributeInfo@12
_SepGetProcUniqueLuidAndIndexFromTokenEx@16
_SepGetScopedPolicySid@4
_SepGetSidManagementActionName@8
_SepGetSidValuesDump@8
_SepGetSingletonEntryFromIndexNumber@4
_SepGetStackTraceHash@4
_SepGetTokenAccessInformationBufferSize@52
_SepGetTokenSessionMapEntry@12
_SepHasCriticalAcesRemoved@16
_SepIdAssignableAsGroup@8
_SepIdAssignableAsOwner@8
_SepImageVerificationCallbackPreProcess@20
_SepImageVerificationCallbackWorker@4
_SepInformFileSystemsOfDeletedLogon@8
_SepInformLsaOfDeletedLogon@12
_SepInitProcessAuditSd@0
_SepInitSingletonEntry@12
_SepInitSystemDacls@0
_SepInitializationPhase0@0
_SepInitializationPhase1@0
_SepInitializeAuthorizationCallbacks@0
_SepInitializeCodeIntegrity@0
_SepInitializeDebugOptions@0
_SepInitializeLowBoxNumberTable@4
_SepInitializeSessionLowboxStructures@0
_SepInitializeSharedSidMap@0
_SepInitializeSingletonAttributesStructures@0
_SepInitializeWorkList@0
_SepInsertOrReferenceSharedSidEntries@12
_SepInternalFillNoAttribs@12
_SepInternalQuerySecurityAttributesTokenEx@32
_SepInternalSetSecurityAttributesToken@20
_SepIsAclEqual@8
_SepIsAdminlessAccessFailure@28
_SepIsAdminlessAuditModeEnabled@0
_SepIsAdminlessEnforcementModeEnabled@0
_SepIsCapabilitySid@4
_SepIsChildTokenByPointer@8
_SepIsDeviceOwnerProtectionDowngradeAllowed@0
_SepIsImageInMinTcbList@36
_SepIsImpersonationAllowedDueToCapability@8
_SepIsLockedDown@8
_SepIsLpacCapabilitySid@4
_SepIsMinTCB@28
_SepIsNgenImage@4
_SepIsOptionPresent@8
_SepIsPackageSid@4
_SepIsParentOfChildAppContainer@12
_SepIsRemovableStorageDevice@4
_SepIsSModeEnabled@0
_SepIsSiblingTokenByPointer@8
_SepIsSidEqual@8
_SepIsValidProcUniqueLuid@4
_SepLengthSidAndAttributesArray@12
_SepLinkLogonSessions@12
_SepLoadNgenLocations@4
_SepLocateTokenIntegrity@4
_SepLocateTokenTrustLevel@4
_SepLogAdminlessAccessFailure@28
_SepLogAdminlessAccessFailureLearningModeEvent@24
_SepLogLpacAccessFailure@4
_SepLogTokenSidManagement@20
_SepLogUnmatchedSessionFlagImpersonationAttempt@8
_SepLpacCausedAccessFailure@8
_SepMakeLogonSessionsSiblings@8
_SepMakeTokenEffectiveOnly@4
_SepMandatoryIntegrityCheck@28
_SepMandatorySubProcessToken@16
_SepMandatoryToDiscretionary@8
_SepMatchCapability@24
_SepMatchPackage@36
_SepMaximumAccessCheck@56
_SepMaximumAccessCheckEx@60
_SepMergeObjectTypeListAccesses@12
_SepModifyTokenPolicyCounter@8
_SepNewTokenAsRestrictedAsProcessToken@12
_SepNormalAccessCheck@56
_SepNormalAccessCheckEx@60
_SepNotifyFileSystems@4
_SepOpenTokenOfThread@28
_SepParseElamCertResources@8
_SepPotentialGlobalTableAttribute@4
_SepPrivilegeCheck@20
_SepPrivilegesToBitmask@20
_SepProbeAndCaptureString_U@8
_SepQueryNameString@8
_SepQueryTypeString@8
_SepQueueWorkItem@12
_SepReadAndInsertCaps@12
_SepReadAndPopulateCapes@16
_SepReadSingleCap@20
_SepReconcileTrustSidWithProcessProtection@16
_SepRefDerefLuidToIndexEntryIfNecessary@8
_SepReferenceCachedHandlesEntry@4
_SepReferenceCachedTokenHandles@12
_SepReferenceLogonSession@8
_SepReferenceLogonSessionSilo@12
_SepReferenceLowBoxNumberEntry@4
_SepReferenceLuidToIndexEntry@4
_SepReferenceTokenByHandle@24
_SepRegOpenKey@12
_SepRegQueryDwordValue@12
_SepRegQueryValue@20
_SepReleaseAuditPolicy@12
_SepReleaseOrderedReadLocks@8
_SepReleaseTokenSecurityAttributesAndOperationsInformation@8
_SepRemoveAceFromTokenDefaultDacl@8
_SepRemoveDisabledGroupsAndPrivileges@24
_SepRemoveTokenLogonSession@4
_SepRmAddLogonSessionInfoWrkr@8
_SepRmCallLsa@4
_SepRmCapPoolExpand@8
_SepRmCapUpdateWrkr@8
_SepRmCleanupRmLsaState@4
_SepRmCommandServerThread@4
_SepRmCreateLogonSessionWrkr@8
_SepRmDbInitialization@0
_SepRmDeleteLogonSessionWrkr@8
_SepRmDereferenceCap@4
_SepRmDestroyCapTable@4
_SepRmDispatchDataToLsa@4
_SepRmFetchGlobalSacl@12
_SepRmGlobalSaclFind@16
_SepRmGlobalSaclSetWrkr@8
_SepRmInteractiveLogoffLogonSessionCompletedWrkr@8
_SepRmInteractiveLogoffLogonSessionWrkr@8
_SepRmLsaConnectRequest@4
_SepRmMakeLogonSessionsSiblingsWrkr@8
_SepRmProcessCreationCommandLineAuditSettingsWrkr@8
_SepRmReferenceCapTable@0
_SepRmReferenceFindCap@8
_SepRmSetAuditEventWrkr@8
_SepRmSetSharedUserSessionWrkr@8
_SepRmValidateProcUniqueLuidWrkr@8
_SepRmVerifyLsaProtectionLevel@4
_SepSDContainsAttributeACE@4
_SepScheduleImageVerificationCallbacks@8
_SepSecureBootBuildRules@0
_SepSecureBootCheckForUpdates@0
_SepSecureBootCorrectBcd@0
_SepSecureBootFilterBootOptionDelete@4
_SepSecureBootFindMatchingRegistryRule@12
_SepSecureBootGetPolicyDefaultValue@16
_SepSecureBootGetPolicyValueByRef@16
_SepSecureBootGetQWordPolicyValue@8
_SepSecureBootHasPermission@0
_SepSecureBootSetRegistryKey@4
_SepSecureBootUpdateBcdDataForRule@8
_SepSecureBootValidateBcdDataAgainstBcdRule@12
_SepSecurityDescriptorStrictLength@4
_SepSetAuditInfoForObjectType@44
_SepSetLogonSessionToken@4
_SepSetProcessUniqueAttribute@4
_SepSetRuntimeUpdatableSigningLevel@4
_SepSetServerSiloToken@8
_SepSetSingletonEntry@12
_SepSetSystemPaths@4
_SepSetTokenAllApplicationPackagesPolicy@8
_SepSetTokenBnoIsolation@20
_SepSetTokenCachedHandles@16
_SepSetTokenCapabilities@16
_SepSetTokenClaims@20
_SepSetTokenLowboxNumber@8
_SepSetTokenPackage@8
_SepSetTokenSessionById@20
_SepSetTokenTrust@8
_SepSetTokenUserAndGroups@20
_SepSetTrustLevelForProcessToken@12
_SepShouldSetDelinkFlags@8
_SepSidFromProcessProtection@4
_SepSidInSidAndAttributes@16
_SepSidInToken@28
_SepSidInTokenSidHash@28
_SepStopReferencingLogonSession@4
_SepTokenDeleteMethod@4
_SepTokenFromAccessInformation@8
_SepTokenInitialization@0
_SepTokenIsOwner@16
_SepTokenPrivilegeAttributes@8
_SepTokenPrivilegeCount@4
_SepTrustLevelCheck@28
_SepTrustToDiscretionary@8
_SepUpdateLogonSessionTrack@4
_SepUpdateSiloInClientSecurity@8
_SepValidLabelSubjectContext@12
_SepValidOwnerSubjectContext@12
_SepValidateAndCopyGlobalEntry@8
_SepValidateCAPID@4
_SepValidateReferencedCachedHandles@16
_SepVariableInitialization@0
_SepVerifyDesktopAppPolicyOverrideCaller@4
_SepVerifyDesktopAppxImage@16
_SepVerifyDesktopAppxPackageName@12
_SepZwLockRegistryKey@4
_SessionGetSessionStateInfo@8
_SessionIsInteractive@4
_SetFailureLocation@20
_SetVacb@20
_SiBootEntryGetNtFilePath@8
_SiDisambiguateSystemDevice@8
_SiFindSystemPartition@4
_SiGetBiosSystemDisk@4
_SiGetBiosSystemPartition@4
_SiGetBootDeviceName@24
_SiGetBootDeviceNameFromRegistry@8
_SiGetDefaultSystemDisk@8
_SiGetDefaultSystemPartition@8
_SiGetDeviceNumberInformation@12
_SiGetDiskPartitionInformation@8
_SiGetDriveLayoutInformation@8
_SiGetEfiBootEntryById@8
_SiGetEfiSystemDevice@12
_SiGetEspFromFirmware@12
_SiGetFirmwareSystemPartition@8
_SiGetFirmwareType@0
_SiGetRegistryValue@24
_SiGetSystemDeviceName@16
_SiGetSystemDisk@8
_SiGetSystemPartition@8
_SiIsValidDiskDevice@8
_SiIsValidWindowsBootEntry@8
_SiIsWinPEBoot@0
_SiIsWinPeHardDiskZeroUfdBoot@0
_SiIssueSynchronousIoctl@24
_SiOpenArcNameObject@8
_SiOpenDevice@8
_SiOpenRegistryKey@16
_SiQueryProperty@16
_SiQuerySystemInformationString@16
_SiTranslateSymbolicLink@8
_SiValidateSystemPartition@20
_SimplifyFilter@16
_SkIsSecureKernel@0
_SkippingWhichBP@8
_SleepstudyHelperBlockerActiveDereference@4
_SleepstudyHelperBlockerActiveReference@4
_SleepstudyHelperBuildBlocker@8
_SleepstudyHelperCreateBlockerData@20
_SleepstudyHelperCreateBlockerFromComponent@20
_SleepstudyHelperCreateBlockerFromDevice@16
_SleepstudyHelperCreateBlockerFromGuid@24
_SleepstudyHelperCreateLibrary@8
_SleepstudyHelperDestroyBlocker@4
_SleepstudyHelperDestroyBlockerBuilder@4
_SleepstudyHelperDestroyBlockerData@4
_SleepstudyHelperDestroyLibrary@4
_SleepstudyHelperGetBlockerGuid@8
_SleepstudyHelperQueryBlockerStatistics@12
_SleepstudyHelperSetBlockerFriendlyName@8
_SleepstudyHelperSetBlockerParentHandle@8
_SleepstudyHelperSetBlockerVisible@8
_SleepstudyHelper_AcquireComponentLock@8
_SleepstudyHelper_ComponentActive@4
_SleepstudyHelper_ComponentActiveLocked@4
_SleepstudyHelper_ComponentInactive@4
_SleepstudyHelper_GenerateGuid@16
_SleepstudyHelper_GetPdoFriendlyName@8
_SleepstudyHelper_Initialize@8
_SleepstudyHelper_RegisterComponentEx@44
_SleepstudyHelper_RegisterPdoWithParentGuid@28
_SleepstudyHelper_RegisterPdoWithParentHandle@16
_SleepstudyHelper_RegisterPdoWithParentPdo@16
_SleepstudyHelper_ReleaseComponentLock@8
_SleepstudyHelper_ResetComponentsStartTime@4
_SleepstudyHelper_Uninitialize@4
_SleepstudyHelper_UnregisterComponent@4
_SmAcquireReleaseCharges@12
_SmAcquireReleaseResAvailForRead@12
_SmAlloc@8
_SmArrayGrow@16
_SmBinaryArrayGrow@12
_SmCrAuthDecrypt@32
_SmCrAuthEncrypt@32
_SmCrEncCleanup@4
_SmCrEncInitialize@4
_SmCrEncStart@16
_SmCrGenRandom@8
_SmCreateEvent@8
_SmDecompressBuffer@24
_SmEtwEnableCallback@36
_SmEtwEnabled@4
_SmEtwLogRegionOp@28
_SmEtwLogStoreCorruption@24
_SmEtwLogStoreOp@32
_SmEtwLogStoreStateChange@16
_SmFixSingleBitCorruption@12
_SmFpAllocate@20
_SmFpCleanup@4
_SmFpFree@16
_SmFpPreAllocate@12
_SmFree@4
_SmGetRegistrationInfo@8
_SmGlobalsInitialize@4
_SmHpBufferAlloc@4
_SmHpBufferCleanup@12
_SmHpBufferProtectEx@16
_SmHpBufferUpdateFullness@12
_SmHpChunkAlloc@4
_SmHpChunkFree@8
_SmHpChunkGetId@8
_SmHpChunkHeapCleanup@8
_SmHpChunkHeapInitialize@8
_SmHpChunkHeapProtect@12
_SmHpUnprotectListNeighbors@12
_SmInitSystem@4
_SmIoRequestComplete@16
_SmIsCompressionProcess@4
_SmIssueIo@24
_SmKmAllocateMdlForLock@4
_SmKmCleanup@4
_SmKmEtwAppendObjectName@8
_SmKmEtwAppendProductName@8
_SmKmEtwLogStoreChange@12
_SmKmEtwLogStoreStats@12
_SmKmFileInfoCleanup@4
_SmKmFileInfoDuplicate@8
_SmKmFileInfoGetPath@12
_SmKmFileInfoInit@4
_SmKmFreeMdlForLock@4
_SmKmGenericCompletion@12
_SmKmGetStoreList@8
_SmKmInitialize@8
_SmKmIsVolumeIoPossible@8
_SmKmIssueIo@20
_SmKmIssueVolumeIo@20
_SmKmKeyGenGenerate@16
_SmKmKeyGenKeyDelete@8
_SmKmKeyGenKeyFind@8
_SmKmKeyGenLoadKey@12
_SmKmKeyGenNewKey@12
_SmKmKeyGenStart@8
_SmKmRegParamsLoad@4
_SmKmSendDeviceControl@28
_SmKmSendUsageNotification@12
_SmKmSqmAddToStream@20
_SmKmStoreAdd@16
_SmKmStoreCreatePrepare@16
_SmKmStoreDelete@16
_SmKmStoreDeleteWhenEmpty@12
_SmKmStoreDeleteWhenEmptyWorker@4
_SmKmStoreFileCreate@44
_SmKmStoreFileCreateForIoType@20
_SmKmStoreFileDelete@4
_SmKmStoreFileGetExtents@40
_SmKmStoreFileMakeSecurityDescriptor@8
_SmKmStoreFileOpenVolume@12
_SmKmStoreFileWriteHeader@16
_SmKmStoreHelperCheckWaitCommand@8
_SmKmStoreHelperCleanup@4
_SmKmStoreHelperCommandCleanup@12
_SmKmStoreHelperCommandProcess@12
_SmKmStoreHelperInitialize@4
_SmKmStoreHelperSendCommand@16
_SmKmStoreHelperStart@8
_SmKmStoreHelperWaitForCommand@16
_SmKmStoreHelperWorker@4
_SmKmStoreRefFromStoreIndex@8
_SmKmStoreReference@8
_SmKmStoreReferenceEx@12
_SmKmStoreTerminateWorker@4
_SmKmUnlockMdl@12
_SmKmVirtualLockContextIncreaseWsMin@12
_SmKmVirtualLockCtxLockMemory@12
_SmKmVirtualLockCtxMemoryUnlocked@8
_SmKmVolumeQueryUniqueId@16
_SmPageRead@16
_SmPerformStoreSwapOperation@8
_SmPrepareForFatalHeapCorruption@20
_SmPrepareForFatalPageError@32
_SmProcessCompressionInfoRequest@16
_SmProcessConfigRequest@12
_SmProcessCreateNotification@8
_SmProcessCreateRequest@16
_SmProcessDeleteRequest@16
_SmProcessListRequest@20
_SmProcessListRequestExtended@8
_SmProcessQueryStoreStats@12
_SmProcessRegistrationRequest@16
_SmProcessResizeRequest@16
_SmProcessStatsRequest@20
_SmProcessStoreMemoryPriorityRequest@12
_SmProcessSystemStoreTrimRequest@12
_SmQueryRegistry@4
_SmQueryStoreCommitUsage@8
_SmQueryStoreInformation@20
_SmRegistrationCtxInitialize@4
_SmRegistrationCtxStart@4
_SmRegistrationInfoFill@12
_SmRereferenceProcessObject@16
_SmSanitizeString@8
_SmSetStoreInformation@16
_SmSetThreadPagePriority@8
_SmSetThreadSystemPagePriority@12
_SmStoreCompressionStart@0
_SmStoreCompressionStop@4
_SmStoreCreate@12
_SmStoreDelete@8
_SmStoreExistsForProcess@4
_SmStorePhysicalRequestIssue@24
_SmStoreResize@20
_SmStoreSetProcessVaRanges@8
_SmSwapStore@4
_SmUniqueIdParseProductName@12
_SmUpdateMemoryCondition@8
_SmUpdateStoreContext@16
_SmWaitForSyncIo@4
_SmWorkItemQueue@12
_SmWorkQueueGetDepth@8
_SmcCacheAdd@12
_SmcCacheCleanup@8
_SmcCacheCreatePrepare@4
_SmcCacheDelete@8
_SmcCacheDereference@12
_SmcCacheInitialize@4
_SmcCacheManagerInitialize@4
_SmcCacheManagerStart@8
_SmcCacheReference@8
_SmcCacheRemove@8
_SmcCacheStart@12
_SmcGetCacheList@8
_SmcGetCacheStats@8
_SmcProcessCreateRequest@16
_SmcProcessDeleteRequest@16
_SmcProcessListRequest@20
_SmcProcessResizeRequest@16
_SmcProcessStatsRequest@20
_SmcProcessStoreCreateRequest@16
_SmcProcessStoreDeleteRequest@16
_SmcStoreCreate@20
_SmcStoreDelete@16
_SmcStoreEntryFind@12
_SmcStorePlacementGet@12
_SmcStoreResize@8
_SmcStoreSlotAbort@12
_SmcStoreSlotCommit@16
_SmcStoreSlotReserve@12
_SmcVolumePnpNotification@8
_SmpDirtyStoreCreate@16
_SmpFpAllocateResource@8
_SmpFpReleaseResource@12
_SmpFpWaitForResource@12
_SmpKeyedStoreCreate@12
_SmpKeyedStoreDeleteInitiate@12
_SmpKeyedStoreEntryGet@16
_SmpKeyedStoreReference@16
_SmpKeyedStoreSetVaRanges@16
_SmpPageWrite@28
_SmpProcessQueryStoreStats@8
_SmpSystemStoreCreate@0
_SmpUtilsGetControlDevice@12
_SpiInit@16
_SpiMax311GetByte@8
_SpiMax311InitializePort@20
_SpiMax311PutByte@12
_SpiMax311RxReady@4
_SpiMax311SetBaud@8
_SpiMax311TxEmpty@4
_SpiSend16@8
_SshInitialize@4
_SshSetPdcPhaseActive@8
_SshpAddBlockerDataToCache@8
_SshpCopyDataEntry@12
_SshpDereferenceBlocker@4
_SshpFlushBlockerDataCache@4
_SshpFreeBlockerEntry@4
_SshpFreeDataEntry@4
_SshpGenerateDeviceFriendlyName@16
_SshpPowerSettingCallback@16
_SshpQueryBlockerPendingDelete@4
_SshpReferenceBlocker@4
_SshpSendSessionData@0
_SshpSetBlockerActive@8
_SshpSetCollectionActive@8
_SshpStopBlockerAccounting@16
_SshpSubscribeCallbacks@0
_SshpUninitialize@0
_SshpUnsubscribeCallbacks@0
_SshpWnfCallback@24
_SshpWriteBlocker@4
_StEtaCheckForRefresh@16
_StEtaCleanup@4
_StEtaInitialize@4
_StEtaIoStart@16
_StEtaIoTimeout@20
_StEtaStart@12
_StEtaStartRefresh@12
_StIoCountsMovePeriod@12
_StLcBucketLocate@12
_StLcBucketsCopy@16
_StLcInitialize@12
_StRtlIoStorInfoSetNvCachePriority@8
_StartFirstUserProcess@0
_StringCbCatW@12
_StringCbCopyNW@16
_StringCbLengthW@12
_StringCchPrintfExW
_StringCchPrintfW
_StringListContains@16
_StringListElementSubstringMatch@20
_StringToGuidNoBrackets@8
_SubstringMatch@16
_SwapContext@0
_SwapSplayLinks@8
_SymCryptDigitsFromBits@4
_SymCryptEcpointCopy@12
_SymCryptEcpointMaskedCopy@16
_SymCryptFdefDigitsFromBits@4
_SymCryptFdefIntCopy@8
_SymCryptFdefIntCopyMixedSize@8
_SymCryptFdefIntMaskedCopy@12
_SymCryptFdefModElementConditionalSwap@16
_SymCryptFdefModElementCopy@12
_SymCryptFdefModElementMaskedCopy@16
_SymCryptInverseMod2e64@8
_SymCryptModElementConditionalSwap@16
_SymCryptModElementCopy@12
_SymCryptModElementMaskedCopy@16
_SymCryptMontgomeryDoubleAndAdd@44
_SymCryptRsaCoreVerifyInput@28
_SymNumFor@4
_SyspartDirectGetFirmwareSystemPartition@12
_SyspartDirectGetSystemDisk@12
_SyspartDirectGetSystemPartition@12
_SyspartGetFirmwarePartition@12
_SyspartGetPhysicalPartitions@12
_SyspartGetSystemPartition@12
_SyspartIsSpace@8
_TelemetryCoverageStringHashInternal@8
_TelemetryCoverageTableLocateInternal@8
_TelemetryCoverageValidateName@4
_TlgAggregateFlush@4
_TlgRegisterAggregateProvider@4
_TlgRegisterAggregateProviderEx@16
_TmCancelPropagationRequest@4
_TmCommitComplete@8
_TmCommitEnlistment@8
_TmCommitTransaction@8
_TmCreateEnlistment@36
_TmCurrentTransaction@4
_TmDereferenceEnlistmentKey@8
_TmEnableCallbacks@12
_TmEndPropagationRequest@4
_TmFreezeTransactions@12
_TmGetTransactionId@8
_TmInitSystem@16
_TmInitSystemPhase2@0
_TmInitializeTransactionManager@16
_TmIsKTMCommitCoordinator@4
_TmIsTransactionActive@4
_TmPrePrepareComplete@8
_TmPrePrepareEnlistment@8
_TmPrepareComplete@8
_TmPrepareEnlistment@8
_TmPropagationComplete@16
_TmPropagationFailed@12
_TmReadOnlyEnlistment@8
_TmRecoverEnlistment@8
_TmRecoverResourceManager@4
_TmRecoverTransactionManager@8
_TmReferenceEnlistmentKey@8
_TmRenameTransactionManager@8
_TmRequestOutcomeEnlistment@8
_TmRollbackComplete@8
_TmRollbackEnlistment@8
_TmRollbackTransaction@8
_TmSetCurrentTransaction@4
_TmSinglePhaseReject@8
_TmThawTransactions@0
_TraceDataRecordCallInfo@12
_TraceLoggingRegisterEx_EtwRegister_EtwSetInformation@12
_TraceLoggingUnregister_EtwUnregister@4
_TraitsCompare@8
_TriageGetBugcheckData@24
_TriageGetDriverCount@8
_TriageGetLoaderEntry@8
_TriageGetMmInformation@4
_TriagepGetPageSize@4
_TriagepVerifyDump@4
_TryLockShutdownShared@0
_TtmCleanupCurrentSession@0
_TtmDispatchApi@32
_TtmGetSessionDisplayRequiredCount@4
_TtmInit@0
_TtmInitCurrentSession@0
_TtmIsEnabled@0
_TtmNotifyConsoleUserPresent@8
_TtmNotifyDeviceArrival@24
_TtmNotifyDeviceDeparture@12
_TtmNotifyDeviceInput@16
_TtmNotifyLowPowerStateExited@4
_TtmNotifySessionDisplayBurst@8
_TtmNotifySessionDisplayRequiredChange@12
_TtmNotifySessionPowerRequestCreated@16
_TtmNotifySessionPowerRequestDeleted@8
_TtmNotifySessionPowerRequestPresent@28
_TtmNotifySessionPowerStateChange@8
_TtmNotifySessionTerminalInput@12
_TtmSessionMonitorControl@12
_TtmiAcquireCurrentSession@4
_TtmiAcquireTerminalSession@8
_TtmiAssignDevice@12
_TtmiCloseEventQueue@4
_TtmiCreateEventQueue@12
_TtmiCreateTerminal@24
_TtmiDevicesRundown@4
_TtmiEvacuateDevices@8
_TtmiGetTerminalById@12
_TtmiLogCalloutStart@20
_TtmiLogCalloutStop@32
_TtmiLogCalloutWatchdogCrashSkipped@24
_TtmiLogCleanupCurrentSessionStart@0
_TtmiLogCleanupCurrentSessionStop@0
_TtmiLogConsoleUserPresent@12
_TtmiLogDeviceArrivalNotified@24
_TtmiLogDeviceArrivedTerminalEvent@20
_TtmiLogDeviceAssignedTerminalEvent@8
_TtmiLogDeviceDepartedTerminalEvent@4
_TtmiLogDeviceDepartureNotified@16
_TtmiLogDeviceEnumeratedTerminalEvent@20
_TtmiLogDeviceFromTerminalRemoved@20
_TtmiLogDeviceInputNotified@28
_TtmiLogDeviceRundown@4
_TtmiLogDeviceSetInputWakeCapability@12
_TtmiLogDeviceToTerminalAssigned@8
_TtmiLogDispatchApiStart@4
_TtmiLogDispatchApiStop@8
_TtmiLogDisplayPowerRequestSet@16
_TtmiLogEnterProximity@4
_TtmiLogError@16
_TtmiLogExitProximity@12
_TtmiLogInitCurrentSessionStart@0
_TtmiLogInitCurrentSessionStop@4
_TtmiLogInitiateModernStandbyTransitionStart@8
_TtmiLogInitiateModernStandbyTransitionStop@4
_TtmiLogProximityBlockedRequest@12
_TtmiLogProximityPowerPress@24
_TtmiLogQueueCreated@4
_TtmiLogQueueDequeueEvent@8
_TtmiLogQueueDestroyed@4
_TtmiLogQueueEnqueueEvent@8
_TtmiLogQueueHandleClosed@12
_TtmiLogQueueHandleOpened@12
_TtmiLogSessionActivate@0
_TtmiLogSessionCsExitComplete@4
_TtmiLogSessionDeactivate@0
_TtmiLogSessionDeviceAssignmentPolicySet@4
_TtmiLogSessionDisplayRequiredDereference@12
_TtmiLogSessionDisplayRequiredPowerRequestUpdated@12
_TtmiLogSessionDisplayRequiredReference@12
_TtmiLogSessionMonitorControl@16
_TtmiLogSessionPowerControlStart@8
_TtmiLogSessionPowerControlStop@0
_TtmiLogSessionPowerRequestAcknowledged@32
_TtmiLogSessionPowerRequestCreated@12
_TtmiLogSessionPowerRequestDeleted@12
_TtmiLogSessionPowerStateChange@4
_TtmiLogSessionRundown@4
_TtmiLogSessionWorkerPass@12
_TtmiLogSessionWorkerStart@4
_TtmiLogSessionWorkerStop@8
_TtmiLogTerminalCleanup@12
_TtmiLogTerminalCreated@8
_TtmiLogTerminalDestroyed@4
_TtmiLogTerminalDisplayStateChangedEvent@12
_TtmiLogTerminalDisplayTimeouts@32
_TtmiLogTerminalHandleClosed@16
_TtmiLogTerminalHandleOpened@16
_TtmiLogTerminalOffRequest@12
_TtmiLogTerminalOnRequest@12
_TtmiLogTerminalRundown@4
_TtmiLogTerminalStateMachine@12
_TtmiOpenDefaultTerminal@16
_TtmiPublishDeviceEnumerationEvents@8
_TtmiPurgeSessionPowerRequestEntries@4
_TtmiReferenceTerminalByHandle@16
_TtmiReleaseSession@4
_TtmiReleaseTerminalId@8
_TtmiRemoveQueueFromSession@4
_TtmiResetTerminalTimeouts@20
_TtmiRetrieveEventFromQueue@8
_TtmiScheduleSessionWorker@8
_TtmiSessionDeviceListWorker@4
_TtmiSessionTerminalListWorker@12
_TtmiSessionsRundown@0
_TtmiSetDisplayPowerRequest@16
_TtmiSetInputWakeCapability@16
_TtmiSetPendingOnOffRequest@20
_TtmiSetSessionDeviceAssignmentPolicy@8
_TtmiSetTerminalPendingEvaluation@8
_TtmiSetUpdateTerminalDevices@8
_TtmiTerminalMonitorControl@16
_TtmiTerminalSetDisplayTimeouts@16
_TtmiTerminalsRundown@4
_TtmiUndimTerminal@8
_TtmiUpdateActiveTerminalCount@12
_TtmiWriteEnumerationEventsToQueue@8
_TtmiWriteEventToAllQueues@8
_TtmiWriteEventToSingleQueue@8
_TtmpAcquireSessionById@8
_TtmpAcquireSessionFromTerminalHandle@20
_TtmpAcquireSessionLock@0
_TtmpActivateSessionWorker@4
_TtmpCallAssignedToTerminal@8
_TtmpCallClose@8
_TtmpCallSetBuiltinPanelState@12
_TtmpCallSetDisplayState@12
_TtmpCallSetInputMode@12
_TtmpCalloutArmWatchdog@16
_TtmpCalloutCreateWatchdog@4
_TtmpCalloutDestroyWatchdog@4
_TtmpCalloutLiveDumpSecondaryCallback@32
_TtmpCalloutWatchdogCallback@24
_TtmpCleanupPowerRequestsTrackingFromCurrentSession@4
_TtmpCloseQueueHandle@16
_TtmpCloseTerminalHandle@16
_TtmpCommitTerminalDisplayStateUpdateWorker@8
_TtmpDeactivateSessionWorker@4
_TtmpDeleteQueue@4
_TtmpDeleteTerminal@4
_TtmpDereferenceSessionMaybeLast@4
_TtmpDispatchAssignDevice@4
_TtmpDispatchCreateEventQueue@8
_TtmpDispatchCreateTerminal@8
_TtmpDispatchEvacuateDevices@4
_TtmpDispatchGetTerminalEvent@8
_TtmpDispatchOpenTerminal@8
_TtmpDispatchSetDefaultDeviceAssignment@4
_TtmpDispatchSetDisplayPowerRequest@4
_TtmpDispatchSetDisplayState@4
_TtmpDispatchSetDisplayTimeouts@4
_TtmpDispatchSetInputWakeCapability@4
_TtmpEnterProximity@8
_TtmpExitProximity@12
_TtmpFindDeviceByDeviceId@12
_TtmpFindDeviceByToken@20
_TtmpFindPowerRequestEntryById@12
_TtmpGetCalloutTagFromCalloutType@4
_TtmpGetConfigOverride@12
_TtmpInitializeWatchdogTimeouts@0
_TtmpInitiateModernStandbyTransition@12
_TtmpInsertPowerRequestToSession@24
_TtmpOpenQueueHandle@24
_TtmpOpenTerminalHandle@24
_TtmpPowerRequestEntryComparator@8
_TtmpPowerRequestHashAllocator@8
_TtmpPowerRequestHashDeallocator@8
_TtmpPublishDeviceEvent@16
_TtmpPublishDisplayRequiredPowerRequestEvents@8
_TtmpPushTerminalDisplayStateOntoDevice@12
_TtmpPushTerminalState@8
_TtmpQueueTerminalDisplayStateOntoDevice@12
_TtmpReleaseSessionLock@0
_TtmpResetEvaluationTimer@12
_TtmpScheduledEvaluationDpc@16
_TtmpScheduledEvaluationWorker@4
_TtmpSessionPowerControl@12
_TtmpSessionWorker@4
_TtmpSetDisplayRequestEnded@8
_TtmpShouldEscapeProximity@4
_TtmpStartCallout@24
_TtmpStopCallout@8
_TtmpTerminal0PowerSettingCallback@16
_TtmpTraceLoggingCallback@36
_TtmpTsmEvaluateTimeouts@32
_TtmpTsmIterate@8
_TtmpTsmTestTimeout@20
_TtmpUpdateDisplayRequiredPowerRequest@12
_TtmpUpdatePowerRequestAttribute@24
_TtmpUpdatePrimaryDisplayWnf@12
_TtmpUpdateTerminalState@16
_TtmpWriteDisplayRequiredPowerRequestUpdatedEvent@12
_TtmpWriteDisplayStateChangedEvent@8
_TxtpAddCacheEntry@16
_TxtpClearCache@4
_TxtpGetCacheEntry@12
_TxtpJustifyRectangle@12
_ULongAddStringSize@12
_ULongLongToULong@12
_UNLOCK_ADDRESS_SPACE@8
_UNLOCK_ADDRESS_SPACE_SHARED@8
_UNLOCK_ADDRESS_SPACE_SHARED_UNORDERED@8
_UNLOCK_ADDRESS_SPACE_UNORDERED@8
_UNLOCK_CM_RM_LIST@0
_UNLOCK_HIVE_LOAD@0
_UNLOCK_PAGE_TABLE_COMMITMENT@8
_UNLOCK_TRANSACTION_LIST@0
_Uart16550GetByte@8
_Uart16550InitializePort@20
_Uart16550InitializePortCommon@20
_Uart16550LegacyInitializePort@20
_Uart16550MmInitializePort@20
_Uart16550PutByte@12
_Uart16550RxReady@4
_Uart16550SetBaud@8
_Uart16550SetBaudCommon@12
_UartpSetAccess@16
_UnlockShutdown@0
_UpcaseUnicodeToMultiByteNHelper@20
_UpcaseUnicodeToSingleByteNHelper@28
_UpcaseUnicodeToUTF8NHelper@20
_UsifGetByte@8
_UsifInitializePort@20
_UsifPutByte@12
_UsifRxReady@4
_UsifSetBaud@8
_VERIFY_BUFFER_LOCKED@4
_VF_ASSERT_IRQL@4
_VF_ASSERT_MAX_IRQL@4
_VF_FIND_BUFFER@8
_VF_FIND_DEVICE_INFORMATION_AND_REMOVE@4
_VF_FIND_INACTIVE_ADAPTER_AND_REMOVE@4
_VF_MARK_FOR_DEFERRED_REMOVE@4
_VRegEnabledInJob@4
_VRegSetup@8
_VacbLevelReference@12
_ValidFilter@8
_ValidateRegistrLangType@4
_ValidateStd3Range@4
_VdmCallStringIoHandler@32
_VdmCheckPMCliTimeStamp@0
_VdmClearPMCliTimeStamp@0
_VdmConvertToLinearAddress@8
_VdmDispatchBop@4
_VdmDispatchException@28
_VdmDispatchIRQ13@4
_VdmDispatchInterrupts@8
_VdmDispatchIoToHandler@24
_VdmDispatchOpcodeV86_try@4
_VdmDispatchOpcode_try@4
_VdmDispatchPageFault@12
_VdmDispatchStringIoToHandler@28
_VdmDispatchUnalignedIoToHandler@24
_VdmEndExecution@8
_VdmFetchBop1@4
_VdmFetchBop4@4
_VdmFetchULONG@4
_VdmPrinterStatus@12
_VdmPrinterWriteData@12
_VdmRundownDpcs@4
_VdmSetPMCliTimeStamp@4
_VdmSwapContexts@12
_VdmTibPass1@12
_VdmTraceEvent@16
_VdmpDelayIntApcRoutine@20
_VdmpDelayIntDpcRoutine@16
_VdmpDelayInterrupt@4
_VdmpDispatchableIntPending@4
_VdmpEnterIcaLock@8
_VdmpExceptionHandler@4
_VdmpFlushPrinterWriteData@4
_VdmpGetVdmTib@4
_VdmpIcaAccept@8
_VdmpIcaScan@8
_VdmpInitialize@4
_VdmpIsThreadTerminating@4
_VdmpLeaveIcaLock@4
_VdmpPreInitialize@0
_VdmpPrinterDirectIoClose@4
_VdmpPrinterInitialize@4
_VdmpQueryVdmProcess@4
_VdmpQueueIntApcRoutine@20
_VdmpQueueIntNopRoutine@12
_VdmpQueueIntNormalRoutine@12
_VdmpQueueInterrupt@4
_VdmpRestartDelayedInterrupts@4
_VdmpRundownRoutine@4
_VdmpStartExecution@0
_VeAllocatePoolWithTagPriority@20
_VerSetConditionMask@16
_VerifierBugCheckIfAppropriate@20
_VerifierCcCopyWrite@20
_VerifierCcCopyWriteEx@24
_VerifierCcDeferWrite@24
_VerifierCcFastCopyWrite@16
_VerifierCcWaitForCurrentLazyWriterActivity@0
_VerifierCmRegisterCallback@12
_VerifierCmRegisterCallbackEx@24
_VerifierCmUnRegisterCallback@8
_VerifierCrashEvent@4
_VerifierDbgBreakPointWithStatus@4
_VerifierEtwRegister@16
_VerifierEtwRegisterClassicProvider@20
_VerifierEtwUnregister@8
_VerifierExAcquireResourceExclusiveLite@8
_VerifierExAcquireResourceExclusiveLiteNoReboot@8
_VerifierExAcquireResourceSharedLite@8
_VerifierExAcquireResourceSharedLiteNoReboot@8
_VerifierExAcquireSharedStarveExclusive@8
_VerifierExAcquireSharedStarveExclusiveNoReboot@8
_VerifierExAcquireSharedWaitForExclusive@8
_VerifierExAcquireSharedWaitForExclusiveNoReboot@8
_VerifierExAllocateCacheAwareRundownProtection@8
_VerifierExAllocatePool2@16
_VerifierExAllocatePool3@24
_VerifierExAllocatePool@8
_VerifierExAllocatePoolEx@16
_VerifierExAllocatePoolWithQuota@8
_VerifierExAllocatePoolWithQuotaTag@12
_VerifierExAllocatePoolWithTag@12
_VerifierExAllocatePoolWithTagPriority@16
_VerifierExConvertExclusiveToSharedLite@4
_VerifierExCreateCallback@16
_VerifierExDeleteLookasideListEx@4
_VerifierExDeleteNPagedLookasideList@4
_VerifierExDeletePagedLookasideList@4
_VerifierExDeleteResourceLite@4
_VerifierExEnterCriticalRegionAndAcquireResourceExclusive@4
_VerifierExEnterCriticalRegionAndAcquireResourceExclusiveNoReboot@4
_VerifierExEnterCriticalRegionAndAcquireResourceShared@4
_VerifierExEnterCriticalRegionAndAcquireResourceSharedNoReboot@4
_VerifierExEnterCriticalRegionAndAcquireSharedWaitForExclusive@4
_VerifierExEnterPriorityRegionAndAcquireResourceExclusive@4
_VerifierExEnterPriorityRegionAndAcquireResourceExclusiveNoReboot@4
_VerifierExEnterPriorityRegionAndAcquireResourceShared@4
_VerifierExEnterPriorityRegionAndAcquireResourceSharedNoReboot@4
_VerifierExFreePool@4
_VerifierExFreePoolEx@8
_VerifierExFreePoolWithTag@8
_VerifierExGetExclusiveWaiterCount@4
_VerifierExGetSharedWaiterCount@4
_VerifierExInitializeLookasideListEx@32
_VerifierExInitializeNPagedLookasideList@28
_VerifierExInitializePagedLookasideList@28
_VerifierExInitializeResourceLite@4
_VerifierExInterlockedAddLargeInteger@16
_VerifierExIsProcessorFeaturePresent@4
_VerifierExIsResourceAcquiredExclusiveLite@4
_VerifierExIsResourceAcquiredSharedLite@4
_VerifierExRaiseAccessViolation@0
_VerifierExRaiseDatatypeMisalignment@0
_VerifierExRaiseStatus@4
_VerifierExRegisterCallback@12
_VerifierExReinitializeResourceLite@4
_VerifierExReleaseResourceForThreadLite@8
_VerifierExReleaseResourceForThreadLiteNoReboot@8
_VerifierExSetResourceOwnerPointer@8
_VerifierExSetResourceOwnerPointerEx@12
_VerifierExSetTimerResolution@8
_VerifierExUnregisterCallback@4
_VerifierExUuidCreate@4
_VerifierFreeTrackedPool@16
_VerifierFsRtlAllocateFileLock@8
_VerifierFsRtlAreNamesEqual@16
_VerifierFsRtlBalanceReads@4
_VerifierFsRtlCancellableWaitForMultipleObjects@24
_VerifierFsRtlCancellableWaitForSingleObject@12
_VerifierFsRtlCheckLockForReadAccess@8
_VerifierFsRtlCheckLockForWriteAccess@8
_VerifierFsRtlCopyWrite@32
_VerifierFsRtlDeregisterUncProvider@4
_VerifierFsRtlDissectName@16
_VerifierFsRtlDoesNameContainWildCards@4
_VerifierFsRtlFastCheckLockForRead@24
_VerifierFsRtlFastCheckLockForWrite@24
_VerifierFsRtlFastUnlockAll@16
_VerifierFsRtlFastUnlockAllByKey@20
_VerifierFsRtlFastUnlockSingle@32
_VerifierFsRtlFreeFileLock@4
_VerifierFsRtlGetFileSize@8
_VerifierFsRtlGetNextFileLock@8
_VerifierFsRtlIncrementCcFastReadNoWait@0
_VerifierFsRtlIncrementCcFastReadWait@0
_VerifierFsRtlInitializeFileLock@12
_VerifierFsRtlIsNameInExpression@16
_VerifierFsRtlMdlReadCompleteDev@12
_VerifierFsRtlMdlWriteCompleteDev@16
_VerifierFsRtlNotifyFilterChangeDirectory@44
_VerifierFsRtlNotifyFilterReportChange@40
_VerifierFsRtlNotifyFullChangeDirectory@40
_VerifierFsRtlNotifyFullReportChange@36
_VerifierFsRtlPrivateLock@48
_VerifierFsRtlProcessFileLock@12
_VerifierFsRtlRegisterUncProvider@12
_VerifierFsRtlRegisterUncProviderEx@16
_VerifierFsRtlRemoveDotsFromPath@12
_VerifierFsRtlUninitializeFileLock@4
_VerifierFsRtlValidateReparsePointBuffer@8
_VerifierHalGetInterruptVector@24
_VerifierInitSystem@4
_VerifierIoAcquireCancelSpinLock@4
_VerifierIoAcquireRemoveLockEx@20
_VerifierIoAcquireVpbSpinLock@4
_VerifierIoAllocateController@16
_VerifierIoAllocateDriverObjectExtension@16
_VerifierIoAllocateErrorLogEntry@8
_VerifierIoAllocateIrp@8
_VerifierIoAllocateMdl@20
_VerifierIoAllocateWorkItem@4
_VerifierIoAttachDevice@12
_VerifierIoAttachDeviceToDeviceStack@8
_VerifierIoAttachDeviceToDeviceStackSafe@12
_VerifierIoCancelIrp@4
_VerifierIoCheckShareAccess@20
_VerifierIoConnectInterrupt@44
_VerifierIoConnectInterruptEx@4
_VerifierIoCreateController@4
_VerifierIoCreateDevice@28
_VerifierIoCreateFile@56
_VerifierIoCreateFileEx@60
_VerifierIoCreateFileSpecifyDeviceObjectHint@60
_VerifierIoCreateNotificationEvent@8
_VerifierIoCreateSymbolicLink@8
_VerifierIoCreateSynchronizationEvent@8
_VerifierIoCreateUnprotectedSymbolicLink@8
_VerifierIoDeleteController@4
_VerifierIoDeleteDevice@4
_VerifierIoDeleteSymbolicLink@4
_VerifierIoDetachDevice@4
_VerifierIoDisconnectInterrupt@4
_VerifierIoDisconnectInterruptEx@4
_VerifierIoFreeController@4
_VerifierIoFreeIrp@4
_VerifierIoFreeMdl@4
_VerifierIoGetAttachedDeviceReference@4
_VerifierIoGetConfigurationInformation@0
_VerifierIoGetDeviceDirectory@20
_VerifierIoGetDeviceInterfaceAlias@12
_VerifierIoGetDeviceInterfaces@16
_VerifierIoGetDeviceNumaNode@8
_VerifierIoGetDeviceObjectPointer@16
_VerifierIoGetDeviceProperty@20
_VerifierIoGetDevicePropertyData@32
_VerifierIoGetDeviceToVerify@4
_VerifierIoGetDriverDirectory@16
_VerifierIoGetFileObjectGenericMapping@0
_VerifierIoGetInitialStack@0
_VerifierIoInitializeIrp@12
_VerifierIoInitializeRemoveLockEx@20
_VerifierIoInitializeWorkItem@8
_VerifierIoInvalidateDeviceRelations@8
_VerifierIoIsWdmVersionAvailable@8
_VerifierIoOpenDeviceInterfaceRegistryKey@12
_VerifierIoOpenDeviceRegistryKey@16
_VerifierIoOpenDriverRegistryKey@20
_VerifierIoRaiseHardError@12
_VerifierIoRaiseInformationalHardError@12
_VerifierIoReadPartitionTableEx@8
_VerifierIoRegisterBootDriverReinitialization@12
_VerifierIoRegisterDeviceInterface@16
_VerifierIoRegisterDriverReinitialization@12
_VerifierIoRegisterLastChanceShutdownNotification@4
_VerifierIoRegisterPlugPlayNotification@28
_VerifierIoRegisterShutdownNotification@4
_VerifierIoReleaseCancelSpinLock@4
_VerifierIoReleaseRemoveLockAndWaitEx@12
_VerifierIoReleaseRemoveLockEx@12
_VerifierIoReleaseVpbSpinLock@4
_VerifierIoRemoveShareAccess@8
_VerifierIoReplacePartitionUnit@12
_VerifierIoReportDetectedDevice@32
_VerifierIoReportTargetDeviceChange@8
_VerifierIoReportTargetDeviceChangeAsynchronous@16
_VerifierIoReuseIrp@8
_VerifierIoSetCompletionRoutineEx@28
_VerifierIoSetDeviceInterfaceState@8
_VerifierIoSetDevicePropertyData@28
_VerifierIoSetDeviceToVerify@8
_VerifierIoSetPartitionInformationEx@12
_VerifierIoSetShareAccess@16
_VerifierIoSetStartIoAttributes@12
_VerifierIoStartNextPacket@8
_VerifierIoUnregisterPlugPlayNotification@4
_VerifierIoUnregisterPlugPlayNotificationEx@4
_VerifierIoUnregisterShutdownNotification@4
_VerifierIoUpdateShareAccess@8
_VerifierIoVolumeDeviceToDosName@8
_VerifierIoWMIAllocateInstanceIds@12
_VerifierIoWMIRegistrationControl@8
_VerifierIoWMIWriteEvent@4
_VerifierIoWriteErrorLogEntry@4
_VerifierIoWritePartitionTableEx@8
_VerifierKeAcquireInterruptSpinLock@4
_VerifierKeAreAllApcsDisabled@0
_VerifierKeAreApcsDisabled@0
_VerifierKeCancelTimer@4
_VerifierKeClearEvent@4
_VerifierKeDelayExecutionThread@12
_VerifierKeDeregisterNmiCallback@4
_VerifierKeEnterCriticalRegion@0
_VerifierKeEnterGuardedRegion@0
_VerifierKeFlushQueuedDpcs@0
_VerifierKeInitializeDeviceQueue@4
_VerifierKeInitializeEvent@12
_VerifierKeInitializeMutant@8
_VerifierKeInitializeMutantNoReboot@8
_VerifierKeInitializeMutex@8
_VerifierKeInitializeMutexNoReboot@8
_VerifierKeInitializeSemaphore@12
_VerifierKeInitializeSpinLock@4
_VerifierKeInitializeSpinLockNoReboot@4
_VerifierKeInitializeTimer@4
_VerifierKeInitializeTimerEx@8
_VerifierKeInsertByKeyDeviceQueue@12
_VerifierKeInsertDeviceQueue@8
_VerifierKeInsertHeadQueue@8
_VerifierKeInsertQueue@8
_VerifierKeIsApcRunningThread@4
_VerifierKeIsExecutingLegacyDpc@0
_VerifierKeLeaveCriticalRegion@0
_VerifierKeLeaveGuardedRegion@0
_VerifierKeLowerIrql@4
_VerifierKePulseEvent@12
_VerifierKeQueryActiveProcessors@0
_VerifierKeQueryPriorityThread@4
_VerifierKeQueryRuntimeThread@8
_VerifierKeRaiseIrql@8
_VerifierKeRaiseIrqlToDpcLevel@0
_VerifierKeReadStateEvent@4
_VerifierKeReadStateMutex@4
_VerifierKeReadStateSemaphore@4
_VerifierKeReadStateTimer@4
_VerifierKeRegisterNmiCallback@8
_VerifierKeReleaseInterruptSpinLock@8
_VerifierKeReleaseMutant@16
_VerifierKeReleaseMutantNoReboot@16
_VerifierKeReleaseMutex@8
_VerifierKeReleaseMutexNoReboot@8
_VerifierKeReleaseSemaphore@16
_VerifierKeRemoveByKeyDeviceQueue@8
_VerifierKeRemoveDeviceQueue@4
_VerifierKeRemoveEntryDeviceQueue@8
_VerifierKeRemoveQueue@12
_VerifierKeResetEvent@4
_VerifierKeRestoreExtendedProcessorState@4
_VerifierKeRevertToUserAffinityThreadEx@4
_VerifierKeSaveExtendedProcessorState@12
_VerifierKeSaveFloatingPointState@4
_VerifierKeSetEvent@12
_VerifierKeSetSystemAffinityThread@4
_VerifierKeSetSystemGroupAffinityThread@8
_VerifierKeSetTimer@16
_VerifierKeSetTimerEx@20
_VerifierKeSynchronizeExecution@12
_VerifierKeWaitForMultipleObjects@32
_VerifierKeWaitForMultipleObjectsNoReboot@32
_VerifierKeWaitForSingleObject@20
_VerifierKeWaitForSingleObjectNoReboot@20
_VerifierMmAddPhysicalMemory@8
_VerifierMmAllocateContiguousMemory@12
_VerifierMmAllocateContiguousMemorySpecifyCache@32
_VerifierMmAllocateContiguousMemorySpecifyCacheNode@36
_VerifierMmAllocateContiguousNodeMemory@36
_VerifierMmAllocateMappingAddress@8
_VerifierMmAllocateNodePagesForMdlEx@40
_VerifierMmAllocateNonCachedMemory@4
_VerifierMmAllocatePagesForMdl@28
_VerifierMmAllocatePagesForMdlEx@36
_VerifierMmBuildMdlForNonPagedPool@4
_VerifierMmCreateMdl@12
_VerifierMmCreateMirror@0
_VerifierMmCreateSection@32
_VerifierMmDoesFileHaveUserWritableReferences@4
_VerifierMmFreeContiguousMemory@4
_VerifierMmFreeContiguousMemorySpecifyCache@12
_VerifierMmFreeNonCachedMemory@8
_VerifierMmFreePagesFromMdl@4
_VerifierMmGetPhysicalMemoryRanges@0
_VerifierMmGetSystemRoutineAddress@4
_VerifierMmLockPagableDataSection@4
_VerifierMmLockPagableSectionByHandle@4
_VerifierMmMapIoSpace@16
_VerifierMmMapIoSpaceEx@16
_VerifierMmMapLockedPages@8
_VerifierMmMapLockedPagesSpecifyCache@24
_VerifierMmMapLockedPagesWithReservedMapping@16
_VerifierMmMapViewOfSection@40
_VerifierMmPageEntireDriver@4
_VerifierMmPrefetchPages@8
_VerifierMmProbeAndLockPages@12
_VerifierMmProbeAndLockProcessPages@16
_VerifierMmProtectMdlSystemAddress@8
_VerifierMmRemovePhysicalMemory@8
_VerifierMmResetDriverPaging@4
_VerifierMmSecureVirtualMemory@12
_VerifierMmUnlockPagableImageSection@4
_VerifierMmUnlockPages@4
_VerifierMmUnmapIoSpace@8
_VerifierMmUnmapLockedPages@8
_VerifierMmUnsecureVirtualMemory@4
_VerifierNtCreateFile@44
_VerifierNtCreateSection@28
_VerifierNtLockFile@40
_VerifierNtMapViewOfSection@40
_VerifierNtReadFile@36
_VerifierNtSetInformationFile@20
_VerifierNtUnlockFile@20
_VerifierNtWriteFile@36
_VerifierObGetObjectSecurity@12
_VerifierObReferenceObjectByHandle@24
_VerifierObReferenceObjectByHandleWithTag@28
_VerifierObReferenceObjectByPointer@16
_VerifierObReferenceObjectByPointerWithTag@20
_VerifierObReleaseObjectSecurity@8
_VerifierPoCallDriver@8
_VerifierPoFxActivateComponent@12
_VerifierPoFxCompleteDevicePowerNotRequired@4
_VerifierPoFxCompleteIdleCondition@8
_VerifierPoFxCompleteIdleState@8
_VerifierPoFxIdleComponent@12
_VerifierPoFxNotifySurprisePowerOn@4
_VerifierPoFxPowerControl@28
_VerifierPoFxRegisterDevice@12
_VerifierPoFxReportDevicePoweredOn@4
_VerifierPoFxSetComponentLatency@16
_VerifierPoFxSetComponentResidency@16
_VerifierPoFxSetComponentWake@12
_VerifierPoFxSetDeviceIdleTimeout@12
_VerifierPoFxStartDevicePowerManagement@4
_VerifierPoFxUnregisterDevice@4
_VerifierPoRequestPowerIrp@24
_VerifierPortExAllocatePoolWithQuotaTag@16
_VerifierPortExAllocatePoolWithTagPriority@20
_VerifierPortIoAllocateIrp@12
_VerifierPortIoAllocateMdl@24
_VerifierPortIoAllocateWorkItem@8
_VerifierPortKeAcquireSpinLock@12
_VerifierPortKeAcquireSpinLockNoXdv@12
_VerifierPortKeReleaseSpinLock@12
_VerifierPortKeReleaseSpinLockNoXdv@12
_VerifierProbeForRead@12
_VerifierProbeForWrite@12
_VerifierPsAssignImpersonationToken@8
_VerifierPsCreateSystemThread@28
_VerifierPsDereferenceImpersonationToken@4
_VerifierPsDereferencePrimaryToken@4
_VerifierPsDisableImpersonation@8
_VerifierPsGetVersion@16
_VerifierPsImpersonateClient@20
_VerifierPsReferenceImpersonationToken@16
_VerifierPsReferencePrimaryToken@4
_VerifierPsRemoveLoadImageNotifyRoutine@4
_VerifierPsRestoreImpersonation@8
_VerifierPsRevertToSelf@0
_VerifierPsSetCreateProcessNotifyRoutine@8
_VerifierPsSetCreateProcessNotifyRoutineEx@8
_VerifierPsSetCreateThreadNotifyRoutine@4
_VerifierPsSetLoadImageNotifyRoutine@4
_VerifierPsTerminateSystemThread@4
_VerifierRtlAnsiStringToUnicodeString@12
_VerifierRtlCheckRegistryKey@8
_VerifierRtlCompareUnicodeString@12
_VerifierRtlCreateRegistryKey@8
_VerifierRtlCreateSystemVolumeInformationFolder@4
_VerifierRtlCreateUnicodeString@8
_VerifierRtlDeleteRegistryValue@12
_VerifierRtlDowncaseUnicodeChar@4
_VerifierRtlDowncaseUnicodeString@12
_VerifierRtlDuplicateUnicodeString@12
_VerifierRtlEqualUnicodeString@12
_VerifierRtlFreeUnicodeString@4
_VerifierRtlGUIDFromString@8
_VerifierRtlGenerateClass5Guid@16
_VerifierRtlHashUnicodeString@16
_VerifierRtlOemStringToCountedUnicodeString@12
_VerifierRtlOemStringToUnicodeString@12
_VerifierRtlQueryRegistryValueWithFallback@28
_VerifierRtlQueryRegistryValues@20
_VerifierRtlQueryRegistryValuesEx@20
_VerifierRtlStringFromGUID@8
_VerifierRtlUTF8ToUnicodeN@20
_VerifierRtlUnicodeStringToAnsiString@12
_VerifierRtlUnicodeStringToCountedOemString@12
_VerifierRtlUnicodeStringToOemString@12
_VerifierRtlUnicodeToUTF8N@20
_VerifierRtlUpcaseUnicodeChar@4
_VerifierRtlUpcaseUnicodeString@12
_VerifierRtlUpcaseUnicodeStringToAnsiString@12
_VerifierRtlUpcaseUnicodeStringToCountedOemString@12
_VerifierRtlUpcaseUnicodeStringToOemString@12
_VerifierRtlWriteRegistryValue@24
_VerifierRtlxAnsiStringToUnicodeSize@4
_VerifierRtlxUnicodeStringToAnsiSize@4
_VerifierSeAccessCheck@40
_VerifierSeAssignSecurity@28
_VerifierSeAssignSecurityEx@36
_VerifierSeDeassignSecurity@4
_VerifierSeLockSubjectContext@4
_VerifierSeReleaseSubjectContext@4
_VerifierSeSinglePrivilegeCheck@12
_VerifierSeUnlockSubjectContext@4
_VerifierSeValidSecurityDescriptor@8
_VerifierZwAllocateLocallyUniqueId@4
_VerifierZwClose@4
_VerifierZwCommitComplete@8
_VerifierZwCommitTransaction@8
_VerifierZwCreateKeyTransacted@32
_VerifierZwCreateResourceManager@28
_VerifierZwDeleteKey@4
_VerifierZwEnumerateTransactionObject@20
_VerifierZwFlushBuffersFile@8
_VerifierZwFlushBuffersFileEx@20
_VerifierZwFlushKey@4
_VerifierZwGetNotificationResourceManager@28
_VerifierZwLockFile@40
_VerifierZwMakeTemporaryObject@4
_VerifierZwOpenKeyEx@16
_VerifierZwOpenKeyTransacted@16
_VerifierZwOpenKeyTransactedEx@20
_VerifierZwOpenResourceManager@20
_VerifierZwPrePrepareComplete@8
_VerifierZwQueryInformationResourceManager@20
_VerifierZwQueryQuotaInformationFile@36
_VerifierZwReadOnlyEnlistment@8
_VerifierZwRecoverEnlistment@8
_VerifierZwRecoverTransactionManager@4
_VerifierZwRenameKey@8
_VerifierZwRollbackComplete@8
_VerifierZwRollbackTransaction@8
_VerifierZwSetInformationKey@16
_VerifierZwSetInformationResourceManager@16
_VerifierZwSetInformationToken@16
_VerifierZwSetQuotaInformationFile@16
_VerifierZwSetTimerEx@16
_VerifierZwTerminateProcess@8
_VerifierZwUnlockFile@20
_VerifierZwUnmapViewOfSection@8
_Verifiermemcpy
_VfAddVerifierEntry@4
_VfAfterCallDriver@12
_VfAllocPoolNotification@8
_VfAllocateAdapterChannel@20
_VfAllocateAdapterChannelEx@32
_VfAllocateCommonBuffer@16
_VfAllocateCommonBufferEx@24
_VfAllocateCommonBufferVector@48
_VfAllocateCommonBufferWithBounds@32
_VfAllocateCrashDumpRegisters@8
_VfAllocateDomainCommonBuffer@36
_VfAvlCleanupLockContext@4
_VfAvlDeleteTreeNode@16
_VfAvlEnumerateNodes@16
_VfAvlInitializeLockContext@8
_VfAvlInitializeTree@16
_VfAvlInitializeTreeEx@20
_VfAvlInsertReservedTreeNode@12
_VfAvlLookupTreeNode@16
_VfAvlReserveNode@12
_VfBeforeCallDriver@12
_VfBindDifDDIWrappers@12
_VfBugCheckNoStackUsage@0
_VfBugcheckLogWorkaround@12
_VfBuildMdlFromScatterGatherList@16
_VfBuildScatterGatherList@40
_VfBuildScatterGatherListEx@64
_VfCalculateScatterGatherListSize@24
_VfCancelAdapterChannel@12
_VfCancelMappedTransfer@8
_VfCheckForLookaside@8
_VfCheckForResource@8
_VfCheckImageCompliance@4
_VfCheckNxPagePriority@8
_VfCheckNxPageProtection@8
_VfCheckNxPoolType@12
_VfCheckPagePriority@8
_VfCheckPageProtection@8
_VfCheckPoolType@12
_VfCheckUserHandle@4
_VfClearVerifierSettings@0
_VfConfigureAdapterChannel@12
_VfCtxHookAndConnectInterrupt@44
_VfCtxHookAndConnectInterruptEx@4
_VfCtxInit@0
_VfCtxUnhookAndDisconnectInterruptEx@4
_VfDdiExposeWmiObjects@0
_VfDeadlockAcquireResource@20
_VfDeadlockAfterCallDriver@4
_VfDeadlockBeforeCallDriver@4
_VfDeadlockDeleteMemoryRange@8
_VfDeadlockInitialize@8
_VfDeadlockInitializeResource@16
_VfDeadlockReleaseResource@16
_VfDevObjAdjustFdoForVerifierFilters@4
_VfDevObjIsDeviceRemoved@4
_VfDevObjMarkDeviceRemoved@4
_VfDevObjPostAddDevice@20
_VfDevObjPreAddDevice@16
_VfDevObjWMIRegistrationControl@8
_VfDifCaptureDriverEntry@4
_VfDifCaptureIoCallbacks@4
_VfDisableCodeIntegrityBreaks@0
_VfDisableHalVerifier@0
_VfDriverEnableVerifier@12
_VfDriverEnableVerifierForAll@0
_VfDriverInitStarting@0
_VfDriverInitSuccess@8
_VfDriverIsKernelImageAddress@4
_VfDriverLoadBootDrivers@4
_VfDriverLoadImage@16
_VfDriverLock@0
_VfDriverUnloadImage@4
_VfDriverUnlock@0
_VfErrorReleaseTriageInformation@0
_VfErrorReport7@16
_VfErrorReport8@12
_VfErrorStoreTriageInformation@20
_VfFailDeviceNode
_VfFailDriver
_VfFailSystemBIOS
_VfFastIoCheckState@8
_VfFastIoSnapState@0
_VfFaultsInitPhase0@0
_VfFaultsInjectPoolAllocationFailure@4
_VfFaultsInjectResourceFailure@4
_VfFaultsIsSystemSufficientlyBooted@0
_VfFaultsSetParameters@4
_VfFillAllocatePagesForMdl@12
_VfFillAllocatedMemory@8
_VfFilterAttach@8
_VfFlushAdapterBuffers@24
_VfFlushAdapterBuffersEx@28
_VfFlushDmaBuffer@12
_VfFreeAdapterChannel@4
_VfFreeAdapterObject@8
_VfFreeCapturedUnicodeString@4
_VfFreeCommonBuffer@24
_VfFreeCommonBufferFromVector@12
_VfFreeCommonBufferVector@8
_VfFreeMapRegisters@12
_VfFreeMemoryNotification@8
_VfFreePoolNotification@8
_VfGetCommonBufferFromVectorByIndex@20
_VfGetDmaAdapter@12
_VfGetDmaAdapterInfo@8
_VfGetDmaAlignment@4
_VfGetDmaDomain@4
_VfGetDmaTransferInfo@28
_VfGetHookAddressForOriginal@4
_VfGetScatterGatherList@32
_VfGetScatterGatherListEx@56
_VfGetVerifierInformation@16
_VfGetVerifierInformationEx@4
_VfHalAllocateMapRegisters@16
_VfHalDeleteDevice@4
_VfHalVerifierInitialize@0
_VfInitBootDriversLoaded@4
_VfInitPickCurrentRandomTarget@0
_VfInitSetVerifyDriverTargets@8
_VfInitSystemNoRebootNeeded@8
_VfInitVerifierComponents@12
_VfInitializeBranchTracing@0
_VfInitializeDmaTransferContext@8
_VfInsertContext@4
_VfIoAllocateIrp2@12
_VfIoCallbacksInit@0
_VfIoCompletionCheckState@8
_VfIoCompletionSnapState@0
_VfIoDeleteDevice@8
_VfIoFreeIrp@8
_VfIoInitializeIrp@12
_VfIrpAllocateCallDriverData@8
_VfIrpDatabaseCheckExFreePool@4
_VfIrpDatabaseEntryDereference@8
_VfIrpDatabaseEntryFindAndLock@4
_VfIrpDatabaseEntryInsertAndLock@12
_VfIrpDatabaseEntryReleaseLock@4
_VfIrpDatabaseInit@0
_VfIrpLogDeleteDeviceLogs@4
_VfIrpLogInit@0
_VfIrpLogLockDatabase@4
_VfIrpLogRecordEvent@12
_VfIrpLogRetrieveWmiData@24
_VfIrpLogUnlockDatabase@4
_VfIrpSendSynchronousIrp@28
_VfIrpWatermark@8
_VfIsPCIBus@4
_VfIsRuleClassEnabled@4
_VfIsVerificationEnabled@8
_VfIsVerificationEnabledForImage@4
_VfIsVerifierEnabled@0
_VfIsVerifierExtensionEnabled@0
_VfJoinDmaDomain@8
_VfKeCheckForChanges@4
_VfKeInsertQueueDpc@12
_VfKeIrqlTransitionReserveLogEntry@8
_VfKeRemoveQueueDpc@4
_VfLeaveDmaDomain@4
_VfLegacyGetAdapter@8
_VfLookasideInitializeInternalNPagedList@28
_VfMajorRegisterHandlers@52
_VfMapTransfer@24
_VfMapTransferEx@48
_VfNotifyOfHibernate@4
_VfNotifyVerifierExtensions@8
_VfNotifyVerifierOfEvent@4
_VfObjectContextInit@0
_VfPacketCreateAndLock@4
_VfPendingCheckForChanges@4
_VfPendingFinishLogging@4
_VfPendingInitPhase1@0
_VfPendingMoreProcessingRequired@20
_VfPendingShouldForce@24
_VfPendingStartLogging@4
_VfPoolCheckForLeaks@8
_VfPoolDelayFreeIfPossible@8
_VfPoolInitPhase0@0
_VfPoolInitPhase1@0
_VfPoolIsInternalFree@0
_VfProbeAndCaptureUnicodeString@12
_VfProbeAndCaptureUnicodeStringBuffer@8
_VfPutDmaAdapter@4
_VfPutScatterGatherList@12
_VfQueryDeviceContext@8
_VfQueryDispatchTable@8
_VfQueryDriverContext@8
_VfQueryIrpContext@8
_VfQueryThreadContext@8
_VfRandomGetNumber@8
_VfRandomInit@0
_VfReadDmaCounter@4
_VfRemLockDeleteMemoryRange@8
_VfRemLockReportBadReleaseAndWaitTag@12
_VfRemLockReportBadReleaseTag@8
_VfRemoveContext@4
_VfRemoveVerifierEntry@4
_VfReportIssueWithOptions@24
_VfSessionDataInit@0
_VfSetIoBuildRequest@4
_VfSetVerifierInformation@12
_VfSetVerifierInformationEx@4
_VfSetVerifierRunningMode@4
_VfSettingsApplyMiscellaneousChecks@4
_VfSettingsCheckForChanges@16
_VfSettingsInit@4
_VfSettingsMiscellaneousChecksInitPhase1@0
_VfShutdownScheduleWatchdog@0
_VfStartBranchTracing@0
_VfStopBranchTracing@0
_VfSuspectDriversAdd@4
_VfSuspectDriversAllocateEntry@4
_VfSuspectDriversGetVerifierInformation@20
_VfSuspectDriversInsert@4
_VfSuspectDriversIsLoaded@4
_VfSuspectDriversLoadCallback@20
_VfSuspectDriversParseRegistryString@0
_VfSuspectDriversRemove@4
_VfSuspectDriversUnloadCallback@4
_VfSuspectExcludedDriversAllocateEntry@8
_VfTargetDriversAdd@16
_VfTargetDriversEnableVerifier@8
_VfTargetDriversGetCounters@12
_VfTargetDriversGetNode@4
_VfTargetDriversGetVerifierData@4
_VfTargetDriversGetZeroCounters@8
_VfTargetDriversInit@0
_VfTargetDriversIsEnabled@4
_VfTargetDriversRemove@4
_VfTargetEtwRegister@12
_VfTargetEtwUnregister@12
_VfTargetWMIRegistrationControl@12
_VfThunkAddDriverThunks@12
_VfThunkAddSpecialDriverThunks@16
_VfThunkAddTargetNotify@4
_VfThunkApplyDriverAddedThunks@4
_VfThunkApplyMandatoryThunks@8
_VfThunkApplyThunks@8
_VfThunkFindExportAddressAllTables@4
_VfThunkHookExportAddress@8
_VfThunkInit@0
_VfThunkRemoveTargetNotify@4
_VfTriageActionTaken@0
_VfTriageAddDrivers@4
_VfTriageSystem@4
_VfUtilAddressRangeAdd@12
_VfUtilAddressRangeFit@12
_VfUtilAddressRangeFitNoLock@12
_VfUtilAddressRangeRemove@12
_VfUtilAddressRangeRemoveCheckEmpty@12
_VfUtilCaptureViolationKernelStack@8
_VfUtilCheckKernelAddress@8
_VfUtilCheckRuleEnforcement@4
_VfUtilDbgPrint
_VfUtilEqualUnicodeString@8
_VfUtilFreePoolCheckIRQL@4
_VfUtilFreePoolDispatchLevel@4
_VfUtilGetDriverName@4
_VfUtilGetOriginalAddDeviceCallback@8
_VfUtilGetOriginalDriverInitCallback@8
_VfUtilGetOriginalDriverUnloadCallback@4
_VfUtilGetOriginalIrpMajorCallback@8
_VfUtilGetOriginalStartIoCallback@8
_VfUtilGetSigningLevel@4
_VfUtilIsBootDriver@4
_VfUtilIsLocalSystem@4
_VfUtilPrintCheckinString@4
_VfUtilSetRuleClass@4
_VfUtilSynchronizationObjectSanityChecks@8
_VfWdCheckForSettingsChange@4
_VfWdInit@0
_VfWdSetCancelTimeout@4
_VfXdvDriverCaptureIoCallbacks@4
_VfXdvExcludeParseRegistryString@0
_VfZwAccessCheckAndAuditAlarm@44
_VfZwAddBootEntry@8
_VfZwAddDriverEntry@8
_VfZwAdjustPrivilegesToken@24
_VfZwAllocateVirtualMemory@24
_VfZwAlpcAcceptConnectPort@36
_VfZwAlpcConnectPort@44
_VfZwAlpcCreatePort@12
_VfZwAlpcCreatePortSection@24
_VfZwAlpcCreateResourceReserve@16
_VfZwAlpcCreateSectionView@12
_VfZwAlpcCreateSecurityContext@12
_VfZwAlpcQueryInformation@20
_VfZwAlpcSendWaitReceivePort@32
_VfZwAlpcSetInformation@16
_VfZwCancelIoFile@8
_VfZwCancelTimer@8
_VfZwCloseObjectAuditAlarm@12
_VfZwCommitEnlistment@8
_VfZwConnectPort@32
_VfZwCreateDirectoryObject@12
_VfZwCreateEnlistment@32
_VfZwCreateEvent@20
_VfZwCreateFile@44
_VfZwCreateJobObject@12
_VfZwCreateKey@28
_VfZwCreateSection@28
_VfZwCreateSymbolicLinkObject@16
_VfZwCreateTimer@16
_VfZwCreateTransaction@40
_VfZwCreateTransactionManager@24
_VfZwDeleteBootEntry@4
_VfZwDeleteFile@4
_VfZwDeleteValueKey@8
_VfZwDeviceIoControlFile@40
_VfZwDisplayString@4
_VfZwDuplicateObject@28
_VfZwDuplicateToken@24
_VfZwEnumerateBootEntries@8
_VfZwEnumerateDriverEntries@8
_VfZwEnumerateKey@24
_VfZwEnumerateValueKey@24
_VfZwFlushInstructionCache@12
_VfZwFlushVirtualMemory@16
_VfZwFreeVirtualMemory@16
_VfZwFsControlFile@40
_VfZwLoadDriver@4
_VfZwLoadKey@8
_VfZwMapViewOfSection@40
_VfZwModifyBootEntry@4
_VfZwModifyDriverEntry@4
_VfZwNotifyChangeKey@40
_VfZwOpenDirectoryObject@12
_VfZwOpenEnlistment@20
_VfZwOpenEvent@12
_VfZwOpenFile@24
_VfZwOpenJobObject@12
_VfZwOpenKey@12
_VfZwOpenProcess@16
_VfZwOpenProcessToken@12
_VfZwOpenProcessTokenEx@16
_VfZwOpenSection@12
_VfZwOpenSymbolicLinkObject@12
_VfZwOpenThread@16
_VfZwOpenThreadToken@16
_VfZwOpenThreadTokenEx@20
_VfZwOpenTimer@12
_VfZwOpenTransaction@20
_VfZwOpenTransactionManager@24
_VfZwPowerInformation@20
_VfZwPrePrepareEnlistment@8
_VfZwPrepareComplete@8
_VfZwPrepareEnlistment@8
_VfZwProtectVirtualMemory@20
_VfZwPulseEvent@8
_VfZwQueryBootEntryOrder@8
_VfZwQueryBootOptions@8
_VfZwQueryDefaultLocale@8
_VfZwQueryDefaultUILanguage@4
_VfZwQueryDirectoryFile@44
_VfZwQueryDirectoryObject@28
_VfZwQueryDriverEntryOrder@8
_VfZwQueryEaFile@36
_VfZwQueryFullAttributesFile@8
_VfZwQueryInformationEnlistment@20
_VfZwQueryInformationFile@20
_VfZwQueryInformationJobObject@20
_VfZwQueryInformationProcess@20
_VfZwQueryInformationThread@20
_VfZwQueryInformationToken@20
_VfZwQueryInformationTransaction@20
_VfZwQueryInformationTransactionManager@20
_VfZwQueryInstallUILanguage@4
_VfZwQueryKey@20
_VfZwQueryLicenseValue@20
_VfZwQueryObject@20
_VfZwQuerySection@20
_VfZwQuerySecurityObject@20
_VfZwQuerySymbolicLinkObject@12
_VfZwQuerySystemInformation@16
_VfZwQueryValueKey@24
_VfZwQueryVolumeInformationFile@20
_VfZwReadFile@36
_VfZwRemoveIoCompletionEx@24
_VfZwReplaceKey@12
_VfZwRequestWaitReplyPort@12
_VfZwResetEvent@8
_VfZwRestoreKey@12
_VfZwRollbackEnlistment@8
_VfZwSetBootEntryOrder@8
_VfZwSetBootOptions@8
_VfZwSetDriverEntryOrder@8
_VfZwSetEaFile@16
_VfZwSetEvent@8
_VfZwSetInformationEnlistment@16
_VfZwSetInformationFile@20
_VfZwSetInformationJobObject@16
_VfZwSetInformationObject@16
_VfZwSetInformationProcess@16
_VfZwSetInformationThread@16
_VfZwSetInformationTransaction@16
_VfZwSetSecurityObject@12
_VfZwSetSystemInformation@12
_VfZwSetSystemTime@8
_VfZwSetTimer@28
_VfZwSetValueKey@24
_VfZwSetVolumeInformationFile@20
_VfZwTranslateFilePath@16
_VfZwUnloadDriver@4
_VfZwUnloadKey@4
_VfZwWaitForMultipleObjects@20
_VfZwWaitForSingleObject@12
_VfZwWriteFile@36
_VhdInitialize@4
_VhdiGetDiskParameters@20
_VhdiGetPartitionNumber@12
_VhdiGetVolumeNumber@16
_VhdiInitializeBootDisk@12
_VhdiMountVhdFile@4
_VhdiQueryVolumeVhdFilePath@4
_VhdiVerifyBootDisk@4
_ViAdapterCallback@16
_ViAllocateContextTable@4
_ViAllocateContiguousMemory@4
_ViAllocateFromContiguousMemory@8
_ViAllocateMapRegisterFile@8
_ViAllocateMapRegistersFromFile@20
_ViAvlAcquireTableLockAtDpcLevel@8
_ViAvlAcquireTableLockAtDpcLevelSafe@8
_ViAvlAllocateNode@8
_ViAvlCompareNode@12
_ViAvlCompareNodeUseSessionId@12
_ViAvlNodeInitializeSessionId@8
_ViAvlReleaseTableLockFromDpcLevel@8
_ViAvlTableIndex@8
_ViBindDifCallbackThunk@20
_ViBindDifThunkNormal@20
_ViBindDifThunkOD@20
_ViCheckAdapterBuffers@4
_ViCheckMdlLength@16
_ViCheckPadding@16
_ViCheckTag@16
_ViCiPreprocessOptions@24
_ViCommonBufferCalculatePadding@12
_ViCopyBackModifiedBuffer@20
_ViCopyDeviceDescription@12
_ViCreateProcessCallback@12
_ViCreateProcessCallbackInternal@8
_ViCtxAllocateIsrContext@12
_ViCtxAllocateXStateContexts@4
_ViCtxCaptureInitialIsrState@4
_ViCtxCheckAndReleaseIsrState@8
_ViCtxEqualExtendedState@12
_ViCtxGetPrivateConnectParameters@12
_ViCtxIsr@8
_ViCtxIsrMessageBased@12
_ViCtxReserveIsrStateBlock@0
_ViCtxSetPrivateConnectParameters@12
_ViDdiBuildWmiRegInfoData@8
_ViDdiDispatchWmi@8
_ViDdiDispatchWmiQueryAllData@8
_ViDdiDispatchWmiRegInfoEx@8
_ViDdiDriverEntry@8
_ViDeadlockAddParticipant@4
_ViDeadlockAddResource@24
_ViDeadlockAddThread@8
_ViDeadlockAllocate@4
_ViDeadlockAnalyze@20
_ViDeadlockCanProceed@8
_ViDeadlockCertify@8
_ViDeadlockCheckDuplicatesAmongChildren@12
_ViDeadlockCheckDuplicatesAmongRoots@8
_ViDeadlockCheckStackLimits@0
_ViDeadlockDatabaseHashIndex@4
_ViDeadlockDetectionApplySettings@0
_ViDeadlockDetectionLock@4
_ViDeadlockDetectionTryConvertSharedToExclusive@0
_ViDeadlockDetectionUnlock@4
_ViDeadlockEmptyDatabase@0
_ViDeadlockForgetResourceHistory@16
_ViDeadlockFree@8
_ViDeadlockKernelVerifierLookasideAllocate@12
_ViDeadlockMergeNodes@12
_ViDeadlockPopulateLookasideCache@8
_ViDeadlockPreprocessOptions@24
_ViDeadlockRemoveMemoryRangeResources@16
_ViDeadlockRemoveMemoryRangeThreads@16
_ViDeadlockRemoveNode@8
_ViDeadlockRemoveResource@12
_ViDeadlockRemoveThread@8
_ViDeadlockSearchResource@8
_ViDeadlockSearchThread@4
_ViDeadlockSimilarNode@12
_ViDeadlockSimilarNodes@8
_ViDeadlockTrimResources@8
_ViDeadlockUpdateChildrenCount@8
_ViDevObjAdd@4
_ViDevObjDelayFreeAvlNode@8
_ViDevObjRemove@4
_ViDifAllocateCallbackStorage@0
_ViDifCaptureDriverEntry@4
_ViDifCaptureIoCallbacks@4
_ViDifCheckCallbackInterception@4
_ViDisableVerification@0
_ViDriverReApplyVerifierForAll@4
_ViErrorDisableBreak@4
_ViErrorDisplayDescription@4
_ViErrorFinishReport@16
_ViErrorIsBreakDisabled@4
_ViErrorReport10@16
_ViErrorReport11@16
_ViErrorReport1@12
_ViErrorReport4@20
_ViErrorReport6@16
_ViErrorReport7@16
_ViErrorReport8@12
_ViErrorReport9@8
_ViExCheckAPCLevelOrBelow@12
_ViExCheckAPCsDisabled@8
_ViExReleaseFastMutexCommon@4
_ViExTryToAcquireFastMutexCommon@8
_ViFaultsAddAllApps@8
_ViFaultsAddAllTags@8
_ViFaultsAddAppNoDuplicates@8
_ViFaultsAddTagNoDuplicates@8
_ViFaultsGetBaseImageName@8
_ViFaultsInitializeAppsList@0
_ViFaultsInitializeTagsList@0
_ViFaultsInjectionNotification@4
_ViFaultsIsAppTarget@4
_ViFaultsIsCurrentAppTarget@0
_ViFaultsIsTagPresentInList@4
_ViFaultsIsTagTarget@4
_ViFaultsRemoveAllApps@0
_ViFaultsRemoveAllTags@0
_ViFaultsTracesInitialize@0
_ViFaultsTracesLog@4
_ViFilterAddDevice@8
_ViFilterDeviceUsageNotificationCompletion@12
_ViFilterDispatchGeneric@8
_ViFilterDispatchPnp@8
_ViFilterDispatchPower@8
_ViFilterDriverEntry@8
_ViFilterGenericCompletionRoutine@12
_ViFilterRemoveNotificationCompletion@12
_ViFilterStartCompletionRoutine@12
_ViFindMappedRegisterInFile@12
_ViFindTriageDriverTargets@8
_ViFindTriageRule@12
_ViFlushDoubleBuffer@20
_ViFlushZeroMapRegisterBaseWcbs@4
_ViFreeContextTable@4
_ViFreeMapRegisterFile@8
_ViFreeMapRegistersToFile@12
_ViFreeToContiguousMemory@12
_ViFreeTrackedPool@16
_ViGetAdapterInformationInternal@8
_ViGetMapRegisterFile@4
_ViGetMdlBufferSa@8
_ViGetRealDmaOperation@8
_ViGrowPoolAllocation@4
_ViHalApplySettings@0
_ViHalFreeDomainCommonBuffer@4
_ViHalPreprocessOptions@24
_ViHalTrackDomainCommonBuffer@4
_ViHasBufferBeenTouched@12
_ViHookDmaAdapter@16
_ViInitSystemPhase0@4
_ViInitSystemPhase1@0
_ViInitializeKernelVerifierThunks@0
_ViInitializeLocalSystemDescriptor@0
_ViInitializePadding@16
_ViIoCallbackSnapState@0
_ViIrpAllocateLockedPacket@12
_ViIrpCheckKernelAddressForIrp@12
_ViIrpDatabaseAcquireLockExclusive@4
_ViIrpDatabaseAcquireLockShared@4
_ViIrpDatabaseFindPointer@4
_ViIrpDatabaseReleaseLockExclusive@4
_ViIrpDatabaseReleaseLockShared@4
_ViIrpLogExposeWmiCallback@4
_ViIrpSynchronousCompletionRoutine@12
_ViIsActiveChannelWcb@8
_ViIsBTSSupported@0
_ViIsDriverSuspectForVerifier@4
_ViIsThreadInsidePagingCodePaths@0
_ViKeAcquireSpinLockAtDpcLevelCommon@8
_ViKeAcquireSpinLockCommon@12
_ViKeInjectStatusAlerted@4
_ViKeIrqlLogCommon@8
_ViKeLogCriticalRegionStackTrace@0
_ViKeLowerIrqlSanityChecks@8
_ViKeObjectAcquired@16
_ViKeRaiseIrqlSanityChecks@8
_ViKeReleaseSpinLockCommon@8
_ViKeTryToAcquireSpinLockAtDpcLevelCommon@8
_ViKeWaitForMultipleObjectsCommon@36
_ViKeWaitForSingleObjectCommon@24
_ViKeWaitSanityChecks@28
_ViKfAcquireSpinLockCommon@8
_ViKfReleaseSpinLockCommon@8
_ViLogAndLoadXdv@4
_ViLookasideAdd@4
_ViLookasideDelayFreeAvlNode@8
_ViLookasideDelete@4
_ViLookasideTrackList@8
_ViLookasideTrackListEx@8
_ViLookupThunkArray@12
_ViLowerIrql@4
_ViMakeVerifierSettings@8
_ViMapDoubleBuffer@20
_ViMmMapLockedPagesSanityChecks@8
_ViMmValidateIrql@4
_ViPacketFree@4
_ViPacketNotificationCallback@12
_ViPendingCompleteAfterWait@4
_ViPendingCompleteAtDPC@16
_ViPendingDelayCompletion@20
_ViPendingQueuePassiveLevelCompletion@4
_ViPendingTryReserveWorker@4
_ViPendingWorkerThread@4
_ViPnpVerifyMinorWasProcessedProperly@24
_ViPoolDelayFreeTrimThreadRoutine@4
_ViPoolLogStackCallout@4
_ViPoolLogStackTrace@8
_ViPostPoolAllocation@8
_ViQueryObjectContext@12
_ViRaiseIrqlToDpcLevel@0
_ViReleaseDmaAdapter@4
_ViRemLockDelayFreeAvlNode@8
_ViRemLockDeleteFirstTreeNode@8
_ViRemLockFindSurrogate@4
_ViRemoveChannelWcb@12
_ViResourceAcquireSanityChecks@12
_ViResourceDelayFreeNode@8
_ViRtlReplaceStringBuffer@12
_ViScatterGatherCallback@16
_ViSettingsEnableKernelHandleChecking@4
_ViSettingsIoCheckForChanges@4
_ViSettingsMiscellaneousCheckForChanges@12
_ViSettingsPoolTrackingCheckForChanges@12
_ViSetupBTSPerProcNoEnable@0
_ViShutdownScheduleWatchdog@0
_ViShutdownWatchdogExecuteDpc@16
_ViSpecialAllocateCommonBuffer@24
_ViSpecialFreeCommonBuffer@16
_ViSuspectDriversLookupEntry@4
_ViSwap@12
_ViTagBuffer@12
_ViTargetAddCountersCallback@8
_ViTargetAddToCounter@16
_ViTargetDelayFreeAvlNode@8
_ViTargetDriversAllocateVerifiedData@4
_ViTargetFreeContiguousMemory@8
_ViTargetFreeContiguousMemoryCallback@8
_ViTargetFreeContiguousMemoryFromNode@8
_ViTargetIncrementCounter@8
_ViTargetRemovingCheckContiguousMemory@8
_ViTargetRemovingCheckEtwWmi@8
_ViTargetTrackContiguousMemory@12
_ViTargetUpdateTreeAllowed@0
_ViTargetWMIDeregister@8
_ViTargetWMIDeregisterCallback@8
_ViTargetWMIRegister@8
_ViThunkApplyMandatoryThunksCurrentSession@8
_ViThunkApplyThunksCurrentSession@8
_ViThunkCreateSharedExportInformation@20
_ViThunkCreateThunkTable@12
_ViThunkFindAPIContextByName@8
_ViThunkFindAllExportAddresses@16
_ViThunkFindAllSpecialTables@8
_ViThunkFindExportAddress@12
_ViThunkFindNextSpecialTable@12
_ViThunkFreeSharedThunksArray@4
_ViThunkHookExportAddress@16
_ViThunkHookExportAddressOD@16
_ViThunkIsExportAddressShared@12
_ViThunkRecoverPristines@4
_ViThunkRemoveImportEntry@8
_ViThunkReplaceAllSharedExports@12
_ViThunkReplaceAllThunkedImports@16
_ViThunkReplaceImportEntry@8
_ViThunkReplaceImportIfThunkedOrderDependent@12
_ViThunkReplaceImportIfThunkedRegular@8
_ViThunkReplacePristine@12
_ViThunkReplaceSharedExports@12
_ViThunkReplaceSpecialPristine@4
_ViThunkSnapSharedExportByName@16
_ViThunkSnapSharedExports@24
_ViTriageSameDriversFromDump@8
_ViValidateTriageRules@8
_ViWdBeforeCallDriver@12
_ViWdBeforeCancelIrp@4
_ViWdFlushIrpList@0
_ViWdInsertSortIrp@4
_ViWdIrpBeforeCompletionRoutine@4
_ViWdIrpTimedOut@4
_ViWdIrpTimerDpcRoutine@16
_ViXdvBindXdvDDIWrappers@4
_ViXdvBindXdvDriverEntryWrappers@4
_ViXdvDriverLoadImage@4
_ViXdvGetFuncAddress@12
_ViXdvSearchAllThunkArrays@8
_ViXdvSearchAndReplaceThunkArray@16
_ViXdvSearchAndReplaceThunkArrayOrderDependent@12
_ViXdvSetXdvKernelUtilities@4
_ViZwCheckApcRequirement@4
_ViZwCheckObjectAttributes@8
_ViZwCheckUnicodeString@8
_ViZwCheckVirtualAddress@8
_ViZwShouldCheck@0
_VmAccessFault@28
_VmCallSkSvc@4
_VmCheckLargePageInswap@4
_VmCheckPageCombine@4
_VmColdPagesHint@16
_VmCreateMemoryProcess@24
_VmCreateMemoryRange@24
_VmDeleteMemoryRange@20
_VmFlushTb@12
_VmFreePreallocationForRangeCreate@4
_VmInitSystem@4
_VmMergeMemoryRanges@8
_VmPauseResumeNotify@4
_VmPreallocateForRangeCreate@4
_VmPrefetchVirtualAddresses@12
_VmProbeAndLockPages@12
_VmSecureBackingMemory@8
_VmSetThreadSchedulerAssist@12
_VmSetVpHostProcess@4
_VmSplitMemoryRange@8
_VmTerminateMemoryProcess@8
_VmUnlockPages@8
_VmUnsecureBackingMemory@4
_VmpAccessFaultBatch@32
_VmpAccessFaultBatchResolve@24
_VmpAllocateMemoryRanges@8
_VmpConvertPortionVpnRangeToGpnRange@24
_VmpDecodePreallocationRangeHandle@8
_VmpFaultEntryInsert@12
_VmpFaultEntryRemove@12
_VmpFillGpnRanges@24
_VmpFillSlat@24
_VmpFillValidFaultInfo@20
_VmpFlushTb@12
_VmpFlushTbVaRange@24
_VmpFreeMemoryRanges@4
_VmpInsertGpaMemoryRange@4
_VmpInsertMemoryRange@12
_VmpInvalidateOutstandingFaults@16
_VmpInvalidateSingleGpaRange@28
_VmpLogAccessFault@28
_VmpLogAccessFaultRange@36
_VmpLogColdHint@20
_VmpLogLargeSlatFill@24
_VmpLogSparseSlatFill@16
_VmpLogTbFlushSlatInvalidate@20
_VmpMapCreateMemoryProcessFlags@8
_VmpMergeMemoryRanges@12
_VmpPauseResumeNotify@8
_VmpPrefetchForVirtualFault@12
_VmpPrefetchVirtualAddresses@12
_VmpPrefetchWorker@4
_VmpProcessAccessedBatch@20
_VmpProcessContextCleanup@4
_VmpProcessContextInitialize@8
_VmpProcessContextLockExclusive@4
_VmpProcessContextLockShared@4
_VmpProcessInvalidateSlat@20
_VmpProcessUpdateSlat@20
_VmpQueryAccessedState@16
_VmpRemoveMemoryRange@24
_VmpSplitMemoryRange@12
_VmpVaMemoryRangeGetNext@8
_VmpVaRangeNumberOfGpaRanges@4
_VmpValidateMemoryRangeParameters@20
_VrpAddNamespaceNodeToList@8
_VrpAllocateDiffHiveEntry@8
_VrpAllocateKeyContext@4
_VrpBecomeDiffHiveEntryTransitionOwner@4
_VrpBuildKeyPath@12
_VrpCleanupBufferParameter@8
_VrpCleanupNamespace@4
_VrpComparePath@12
_VrpCountPathComponents@4
_VrpCreateNamespaceNode@28
_VrpCreateNamespaceNodePlaceholderKey@4
_VrpDecommissionKeyContext@4
_VrpDecrementDiffHiveEntryHardRefCount@4
_VrpDecrementSiloCount@0
_VrpDereferenceDiffHiveEntry@4
_VrpDereferenceDiffHiveEntryUnsafe@4
_VrpDereferenceDiffHiveEntryWithLock@4
_VrpDereferenceJobContext@4
_VrpDestroyNamespaceNode@8
_VrpDestroyNamespaceNodeList@4
_VrpFindBestMatchNamespaceNode@12
_VrpFindDiffHiveEntryForMountPoint@4
_VrpFindDiffHiveEntryForMountPointWithLock@4
_VrpFindExactNamespaceNode@12
_VrpFindNamespaceNode@20
_VrpFindOrCreateDiffHiveEntryForMountPoint@12
_VrpFreeCallbackContext@4
_VrpFreeKeyContext@4
_VrpGetContextsForNotifyInfo@16
_VrpGetNextToken@12
_VrpHandleIoctlCreateMultipleNamespaceNodes@24
_VrpHandleIoctlCreateNamespaceNode@24
_VrpHandleIoctlGetVirtualRootKey@24
_VrpHandleIoctlInitializeJobForVreg@24
_VrpHandleIoctlLoadDifferencingHive@24
_VrpHandleIoctlLoadDifferencingHiveForHost@24
_VrpHandleIoctlModifyFlags@24
_VrpHandleIoctlUnloadDifferencingHiveForHost@24
_VrpHandleIoctlUnloadDynamicallyLoadedHives@24
_VrpIncrementDiffHiveEntryHardRefCount@4
_VrpIncrementSiloCount@0
_VrpInitializeLoadedDifferencingHives@0
_VrpInitializeNamespaceNodeList@4
_VrpIoctlDeviceDispatch@8
_VrpIsCharInString@12
_VrpJobContextDelete@4
_VrpLoadDifferencingHive@28
_VrpLockDiffHiveEntry@4
_VrpLockJobContextExclusive@4
_VrpLockJobContextShared@4
_VrpOriginalKeyNameParameterCleanup@8
_VrpOutputBufferParameter@16
_VrpPostEnumerateKey@8
_VrpPostOpenOrCreate@8
_VrpPostQueryKey@8
_VrpPostUnloadKey@8
_VrpPreFlushKey@8
_VrpPreLoadKey@8
_VrpPreOpenOrCreate@8
_VrpPreQueryKeyName@8
_VrpPreUnloadKey@8
_VrpProcessBufferParameter@16
_VrpReferenceDiffHiveEntryUnsafe@4
_VrpRegistryCallback@12
_VrpRegistryDispatch@8
_VrpRegistryUnload@4
_VrpRelinquishDiffHiveEntryTransitionOwner@4
_VrpShouldOperateOnCall@16
_VrpStripTrailingCharacters@8
_VrpTranslatePath@36
_VrpUnloadDifferencingHive@4
_VrpUnlockDiffHiveEntry@4
_VrpUnlockJobContextExclusive@4
_VrpUnlockJobContextShared@4
_VrpUpdateKeyInformation@24
_VrpWaitForDiffHiveEntryTransitionOwnerToLeave@4
_VslCapturePgoData@8
_VslCreateSecureSection@20
_VslDebugReadWriteSecureProcess@24
_VslDeleteSecureSection@4
_VslExchangeEntropy@4
_VslGetNestedPageProtectionFlags@0
_VslGetSecurePciDeviceAlternateFunctionNumberForVtl0Dma@16
_VslGetSecurePciEnabled@0
_VslQuerySecureDevice@8
_VslRetrieveMailbox@24
_VslTestRoutine@0
_WMIInitialize@8
_WRITE_REGISTER_BUFFER_UCHAR@12
_WRITE_REGISTER_BUFFER_ULONG@12
_WRITE_REGISTER_BUFFER_USHORT@12
_WRITE_REGISTER_UCHAR@8
_WRITE_REGISTER_ULONG@8
_WRITE_REGISTER_USHORT@8
_WbHeapExecutionUnloadModule@8
_WdiDispatchControl@4
_WdiUpdateSem@0
_WdipAccessCheck@0
_WdipSemActivateInstance@4
_WdipSemAddContextEventToScenario@8
_WdipSemAddEndEventToScenario@8
_WdipSemAddScenarioToTable@4
_WdipSemAllocatePool@4
_WdipSemBuildScenarioInstance@8
_WdipSemCaptureState@8
_WdipSemCleanStart@0
_WdipSemCleanupGroupPolicy@0
_WdipSemClearFrequentScenarioTable@0
_WdipSemDeleteTransitionalInstance@4
_WdipSemDeleteValueFromRegistry@8
_WdipSemDisableAllProviders@0
_WdipSemDisableContextProvider@8
_WdipSemDisableContextProviders@8
_WdipSemDisableScenario@12
_WdipSemEnableAllProviders@0
_WdipSemEnableContextProvider@4
_WdipSemEnableContextProviders@4
_WdipSemEnableDisableTrace@28
_WdipSemEnableScenario@12
_WdipSemEnableSemProvider@0
_WdipSemEndScenario@12
_WdipSemFreeInflightScenarioTable@4
_WdipSemFreePool@0
_WdipSemFreeScenario@4
_WdipSemGetGuidKey@8
_WdipSemGetLoggerDroppedEventCount@8
_WdipSemGetLoggerIds@0
_WdipSemInitialize@0
_WdipSemInitializeGlobalState@0
_WdipSemInitializePool@0
_WdipSemLoadConfigInfo@0
_WdipSemLoadGroupPolicy@0
_WdipSemLoadLocalGroupPolicy@4
_WdipSemLoadNextContextProvider@12
_WdipSemLoadNextEndEvent@12
_WdipSemLoadNextScenario@12
_WdipSemLoadScenarioTable@0
_WdipSemLogInflightLimitExceededInformation@12
_WdipSemLogTimeoutInformation@12
_WdipSemMarkInstanceForDeletion@4
_WdipSemMarkNextTimedOutInstanceForDeletion@4
_WdipSemMergeEvents@8
_WdipSemMergeScenarios@8
_WdipSemOpenRegistryKey@12
_WdipSemQueryEnabledInstanceTable@4
_WdipSemQueryInflightScenarioTable@12
_WdipSemQueryProviderTable@4
_WdipSemQueryScenarioTable@8
_WdipSemQueryValueFromRegistry@24
_WdipSemReserveInstanceTableEntry@8
_WdipSemRollBackProviderTable@4
_WdipSemShutdown@0
_WdipSemSqmAddToStream@12
_WdipSemSqmEnabled@0
_WdipSemSqmIncrementDword@8
_WdipSemSqmInit@0
_WdipSemSqmLogInflightLimitExceededDataPoints@0
_WdipSemSqmLogTimeoutDataPoints@8
_WdipSemStartScenario@12
_WdipSemStartTimeoutCheck@0
_WdipSemUpdate@0
_WdipSemUpdateFrequentScenarioTable@4
_WdipSemUpdateInflightScenarioTable@16
_WdipSemUpdateProviderEntriesForScenario@4
_WdipSemUpdateProviderEntryForEvent@8
_WdipSemUpdateProviderTableWithEvent@4
_WdipSemUpdateProviderTableWithScenario@4
_WdipSemValidateEndEvent@12
_WdipSemWriteEvent@24
_WdipSemWriteInflightLimitExceededEvent@16
_WdipSemWriteMisconfigEvent@12
_WdipSemWriteProviderLimitExceededEvent@4
_WdipSemWriteScenarioLimitExceededEvent@12
_WdipSemWriteSemActionsEvent@8
_WdipSemWriteSemFailureEvent@20
_WdipSemWriteTimeoutEvent@12
_WdipStartEndScenario@16
_WdipTimeoutCheckRoutine@4
_WdipTimeoutTimerRoutine@8
_WdtpAllocateTimer@0
_WdtpArmTimer@8
_WdtpBarkWorkerThread@4
_WdtpTimerCallback@8
_WheaAddErrorSource@8
_WheaAddErrorSourceDeviceDriver@12
_WheaAddErrorSourceDeviceDriverV1@16
_WheaAddHwErrorReportSectionDeviceDriver@12
_WheaAttemptClearPoison@12
_WheaAttemptPhysicalPageOffline@12
_WheaConfigureErrorSource@8
_WheaCrashDumpInitializationComplete@0
_WheaCreateHwErrorReportDeviceDriver@8
_WheaGetErrPacketFromErrRecord@4
_WheaGetErrorSource@4
_WheaHighIrqlLogSelEventHandlerRegister@8
_WheaHighIrqlLogSelEventHandlerUnregister@0
_WheaHwErrorReportAbandonDeviceDriver@4
_WheaHwErrorReportGetLogDataBufferDeviceDriver@12
_WheaHwErrorReportMarkAsCriticalDeviceDriver@4
_WheaHwErrorReportSetFatalSeverityDeviceDriver@8
_WheaHwErrorReportSetSectionNameDeviceDriver@12
_WheaHwErrorReportSetSeverityDeviceDriver@8
_WheaHwErrorReportSubmitDeviceDriver@4
_WheaInitialize@8
_WheaInitializeProcessor@8
_WheaInitializeRecordHeader@4
_WheaInitializeServices@0
_WheaLogInternalEvent@4
_WheaPersistBadPageToBcd@4
_WheaPersistBadPageToRegistry@4
_WheaQuerySystemInformation@8
_WheaRemoveErrorSource@4
_WheaRemoveErrorSourceDeviceDriver@4
_WheaReportFatalHwErrorDeviceDriverEx@44
_WheaReportHwError@4
_WheaReportHwErrorDeviceDriver@28
_WheaReportHwErrorDeviceDriverEx@40
_WheaSelLogCheckPoint@8
_WheaSelLogErrorPkt@4
_WheaSelLogEvent@4
_WheaSelLogInitialize@4
_WheaSelLogSetTimeServices@4
_WheaUnconfigureErrorSource@4
_WheaWmiDispatch@24
_WheapAddErrorSource@8
_WheapAddRecoveryPacketToErrorRecord@12
_WheapAddSectionFromGenericErrorData@24
_WheapAddToDumpFile@8
_WheapAllocErrorRecord@8
_WheapApplyPolicyChanges@0
_WheapApplyThresholdChecks@8
_WheapAttemptArchitecturalErrorRecovery@4
_WheapAttemptErrorRecovery@4
_WheapAttemptPhysicalPageOffline@24
_WheapAttemptPhysicalPageOfflineWorker@4
_WheapCallErrorSourceCorrect@4
_WheapCallErrorSourceInitialize@8
_WheapCallErrorSourceUninitialize@4
_WheapCheckForAndReportErrorsFromPreviousSession@0
_WheapClearUncorrectedMemPageInEfi@0
_WheapCommitPolicy@0
_WheapCompressErrorRecord@8
_WheapCorrectErrorSourceDeviceDriver@8
_WheapCountBadPageExtents@8
_WheapCreateLiveDumpFromPreviousSession@4
_WheapCreatePerProcessorInfo@0
_WheapCreateRecordFromGenericErrorData@20
_WheapDefaultErrSrcCorrect@8
_WheapDefaultErrSrcCreateRecord@20
_WheapDefaultErrSrcInitialize@12
_WheapDefaultErrSrcRecover@8
_WheapDefaultErrSrcUninitialize@4
_WheapDefaultInitDeviceDriver@8
_WheapDeviceDriverCreateRecord@20
_WheapDeviceDriverGetPacketLength@8
_WheapErrorContainsMemorySection@4
_WheapEtwEnableCallback@36
_WheapFormatBadPageList@12
_WheapFreeDriverPacketBuffer@4
_WheapFreeErrorRecord@4
_WheapGenerateETWEvents@4
_WheapGenericErrSrcRecover@8
_WheapGetAllPolicyBufferSize@0
_WheapGetAllPolicyValues@12
_WheapGetErrorSource@8
_WheapGetErrorSourceFunction@12
_WheapGetErrorThresholdInformation@12
_WheapGetPolicyValue@8
_WheapGetPreallocatedErrorRecord@4
_WheapGetPreallocatedPacketBuffer@8
_WheapGetTimestamp@4
_WheapHighIrqlLogSelEventHandlerAcquireLock@4
_WheapInitErrorReportDeviceDriver@8
_WheapInitWnfCallbackPageOffline@0
_WheapInitWnfCallbacks@0
_WheapInitializeDeferredErrorSources@4
_WheapInitializeErrorRecordWrapper@12
_WheapInitializeErrorSource@4
_WheapInitializeErrorSourceTable@8
_WheapInitializeEventing@0
_WheapInitializeWorkQueue@8
_WheapInsertPageToList@16
_WheapIsNonHestErrorSource@4
_WheapIsPageInList@12
_WheapLoadPolicy@0
_WheapLogInitEvent@0
_WheapLogIpmiSELEvent@12
_WheapLogIpmiSELEventHighIrql@4
_WheapLogPageOfflineAttemptEvent@24
_WheapLogPolicyTelemetry@0
_WheapPersistPageForMemoryError@4
_WheapPfaLogPageMonitorRemoval@16
_WheapPfaMemoryCheck@8
_WheapPfaReset@0
_WheapPfaRetireExpiredMemoryEntries@8
_WheapPfnComparisonHelper
_WheapPlatformDirectedMemoryOffline@8
_WheapPredictiveFailureAnalysis@4
_WheapProcessEfiBadMemoryPage@0
_WheapProcessOfflineList@24
_WheapProcessWorkQueueItem@8
_WheapQueryPshedForErrorSources@8
_WheapReportBootError@4
_WheapReportDeferredLiveDumps@0
_WheapReportLiveDump@4
_WheapReportPersistedErrorRecord@4
_WheapSaveRecordForLiveDump@4
_WheapSetDefaultErrorSourceConfiguration@0
_WheapSetPolicyValue@8
_WheapTrackPendingPage@8
_WheapWmiExecuteErrorInjectionMethod@20
_WheapWmiExecuteErrorSourceMethod@20
_WheapWmiExecuteMethod@16
_WheapWmiExecutePluginCtlMethod@20
_WheapWmiExecutePolicyManagementMethod@20
_WheapWorkQueueAddItem@8
_WheapWorkQueueDpcRoutine@16
_WheapWorkQueueWorkerRoutine@4
_Win7PsGetVersion@16
_Win7RtlGetVersion@4
_Win81PsGetVersion@16
_Win81RtlGetVersion@4
_Win8PsGetVersion@16
_Win8RtlGetVersion@4
_WmiAcquireSmbiosLockExclusive@0
_WmiMatchSMBiosSysInfo@28
_WmiQueryTraceInformation@20
_WmiQueryTraceProviderCount@4
_WmiRegisterErrataCallbacks@0
_WmiReleaseSmbiosLockExclusive@0
_WmiSetNetworkNotify@4
_WmiTraceMessage
_WmiTraceMessageVa@24
_WmiTraceRundownNotify@12
_WmiVerifierCopyEvent@4
_WmiVerifierTakeEventOwnership@4
_WmipAddDataSource@20
_WmipAddMofResource@20
_WmipAddProviderIdToPIList@20
_WmipAlign@8
_WmipAllocDataSource@0
_WmipAllocEntry@4
_WmipAllocGuidEntry@0
_WmipAllocRegEntry@8
_WmipAllocateSingleInstanceWnode@28
_WmipBuildInstanceSet@20
_WmipBuildTraceDeviceList@12
_WmipCachePtrs@20
_WmipCheckSMBiosSysInfoString@8
_WmipClearIrpObjectList@4
_WmipCompleteGuidIrpWithError@4
_WmipCopyFromEventQueues@28
_WmipCountedToSz@4
_WmipCreateGuidObject@16
_WmipDSCleanup@4
_WmipDeleteMethod@4
_WmipDereferenceEvent@4
_WmipDeregisterDevice@4
_WmipDeregisterRegEntry@4
_WmipDetermineInstanceBaseIndex@12
_WmipDisableCollectOrEvent@8
_WmipDisableCollectionForRemovedGuid@8
_WmipDoDisableRequest@12
_WmipDoFindRegEntryByDevice@4
_WmipDriverEntry@8
_WmipEnableCollectOrEvent@12
_WmipEnableCollectionForNewGuid@8
_WmipEnterSMCritSection@0
_WmipEnumerateGuids@16
_WmipEnumerateMofResources@12
_WmipEventNotification@4
_WmipFindDSByProviderId@4
_WmipFindGEByGuid@8
_WmipFindGuid@20
_WmipFindISInDSByGuid@8
_WmipFindISinGEbyName@12
_WmipFindMRByNames@8
_WmipFindRegEntryByDevice@4
_WmipFindSMBiosStructure@16
_WmipFindSysIdTable@12
_WmipFirmwareTableHandler
_WmipForwardWmiIrp@24
_WmipFreeTraceDeviceList@8
_WmipGECleanup@4
_WmipGenerateBinaryMofNotification@8
_WmipGenerateMofResourceNotification@16
_WmipGenerateRegistrationNotification@8
_WmipGetFilePDO@12
_WmipGetGuidObjectInstanceInfo@16
_WmipGetGuidPropertiesFromGuidEntry@8
_WmipGetGuidSecurityDescriptor@12
_WmipGetRegistryHideMachine@0
_WmipGetSMBiosEventlog@8
_WmipGetSMBiosFromLoaderBlock@4
_WmipGetSMBiosString@16
_WmipGetSMBiosTableData@12
_WmipGetSysIds@16
_WmipHexStringToDword@16
_WmipISCleanup@4
_WmipIncludeStaticNames@8
_WmipInitializeAllocs@0
_WmipInitializeDataStructs@0
_WmipInitializeRegistration@4
_WmipInitializeSecurity@0
_WmipInsertMofResource@8
_WmipInsertStaticNames@12
_WmipIoControl@8
_WmipIsEqualInstanceSets@8
_WmipIsNumber@4
_WmipIsQuerySetGuid@4
_WmipLegacyEtwCallback@16
_WmipLegacyEtwWorker@4
_WmipLinkDataSourceToList@12
_WmipLinkInstanceSetToGuidEntry@12
_WmipMRCleanup@4
_WmipMangleInstanceName@16
_WmipNotificationIrpCancel@8
_WmipOpenBlock@20
_WmipOpenCloseCleanup@8
_WmipOpenGuidObject@16
_WmipParseSysIdTable@28
_WmipPrepareForWnodeAD@20
_WmipPrepareWnodeSI@24
_WmipProbeAndCaptureGuidObjectAttributes@16
_WmipProbeWmiOpenGuidBlock@28
_WmipProbeWnodeAllData@12
_WmipProbeWnodeMethodItem@12
_WmipProbeWnodeSingleInstance@16
_WmipProbeWnodeSingleItem@8
_WmipProbeWnodeWorker@36
_WmipProcessEvent@12
_WmipProcessLegacyEtwCallback@8
_WmipProcessLegacyEtwRegister@8
_WmipProcessLegacyEtwUnregister@4
_WmipProcessWmiRegInfo@16
_WmipQueryAllData@24
_WmipQueryAllDataMultiple@32
_WmipQueryGuidInfo@4
_WmipQuerySetExecuteSI@28
_WmipQuerySingleMultiple@36
_WmipQueryWmiDataBlock@32
_WmipQueryWmiRegInfo@16
_WmipQueueLegacyEtwWork@12
_WmipQueueNotification@12
_WmipQueueRegWork@8
_WmipRawSMBiosTableHandler
_WmipReadSMBiosSysInfo@0
_WmipReceiveNotifications@12
_WmipReferenceEntry@4
_WmipRegisterDevice@8
_WmipRegisterEtwProvider@8
_WmipRegisterFirmwareProviders@0
_WmipRegisterOrUpdateDS@8
_WmipRegistrationWorker@4
_WmipReleaseCollectionEnabled@4
_WmipReleaseSmbiosLockShared@0
_WmipRemoveDS@4
_WmipSDRegistryQueryRoutine@24
_WmipSMBiosFindStringAndZero@12
_WmipSMBiosFindStructure@24
_WmipSMBiosHideMachine@8
_WmipSaveGuidSecurityDescriptor@8
_WmipSecurityMethod@36
_WmipSendDisableRequest@8
_WmipSendEnableDisableRequest@12
_WmipSendEnableRequest@8
_WmipSendGuidUpdateNotifications@12
_WmipSendWmiIrp@24
_WmipSendWmiIrpToTraceDeviceList@20
_WmipSetTraceNotify@8
_WmipStaticInstanceNameSize@4
_WmipSystemControl@8
_WmipTranslateFileHandle@8
_WmipTranslatePDOInstanceNames@16
_WmipUnlinkInstanceSetFromGuidEntry@4
_WmipUnreferenceEntry@8
_WmipUnreferenceRegEntry@4
_WmipUnregisterEtwProvider@4
_WmipUpdateAddGuid@20
_WmipUpdateDataSource@12
_WmipUpdateDeviceStackSize@4
_WmipUpdateModifyGuid@20
_WmipUpdateRegistration@4
_WmipUuidFromString@8
_WmipValidateWmiRegInfoString@16
_WmipWaitForCollectionEnabled@4
_WmipWmiIrpCompletion@12
_WmipWriteWnodeToObject@12
_WriteAMDMsr@12
_WritePort16@8
_WritePort32@8
_WritePort8@8
_WriteRegister16@8
_WriteRegister32@8
_WriteRegister8@8
_XIPDispatch@12
_XRestoreSHelper@12
_XSaveCHelper@12
_XSaveSHelper@12
_XdvExAllocatePoolInternal@24
_XdvExInitializeLookasideListExInternal@40
_XdvExInitializeNPagedLookasideListInternal@36
_XdvExInitializePagedLookasideListInternal@36
_XdvIoAllocateIrp@20
_XdvIoAllocateMdl@28
_XdvIoAllocateWorkItem@12
_XdvIoBuildDeviceIoControlRequest@44
_XdvIoBuildSynchronousFsdRequest@36
_XdvIopBuildAsynchronousFsdRequest@32
_Xp10BuildAndWriteHuffmanEncodings@28
_Xp10BuildAndWriteHuffmanTables@16
_Xp10BuildHuffmanDecodeTable@40
_Xp10BuildHuffmanEncodings@20
_Xp10CompressBuffer@28
_Xp10ComputeAndWriteCrc@12
_Xp10ComputeCrc32@4
_Xp10ComputeCrc64@4
_Xp10ExecuteHuffmanDecode@12
_Xp10ExecuteHuffmanEncode@28
_Xp10ExecuteLz77PassMinMatchLen3@24
_Xp10ExecuteLz77PassMinMatchLen4@24
_Xp10ReadAndDecodeHuffmanTables@32
_Xp10ReadAndValidateCrc@12
_Xp10ReadMtfHeader@12
_Xp10SortHuffmanSymbols@20
_Xp10ValidateFrameHeaderAndFillParameters@8
_Xp10ValidateParametersAndFillFrameHeader@8
_XpressBuildHuffmanDecodingTable@8
_XpressBuildHuffmanEncodings@4
_XpressDecode@24
_XpressDecodeClose@12
_XpressDecodeCreate@8
_XpressDoHuffmanPass@20
_ZwAcceptConnectPort@24
_ZwAccessCheck@32
_ZwAccessCheckAndAuditAlarm@44
_ZwAccessCheckByType@44
_ZwAccessCheckByTypeAndAuditAlarm@64
_ZwAccessCheckByTypeResultList@44
_ZwAccessCheckByTypeResultListAndAuditAlarm@64
_ZwAccessCheckByTypeResultListAndAuditAlarmByHandle@68
_ZwAcquireCrossVmMutant@8
_ZwAcquireProcessActivityReference@12
_ZwAddAtom@12
_ZwAddAtomEx@16
_ZwAddBootEntry@8
_ZwAddDriverEntry@8
_ZwAdjustGroupsToken@24
_ZwAdjustPrivilegesToken@24
_ZwAdjustTokenClaimsAndDeviceGroups@64
_ZwAlertResumeThread@8
_ZwAlertThread@4
_ZwAlertThreadByThreadId@4
_ZwAllocateLocallyUniqueId@4
_ZwAllocateReserveObject@12
_ZwAllocateUserPhysicalPages@12
_ZwAllocateUserPhysicalPagesEx@20
_ZwAllocateUuids@16
_ZwAllocateVirtualMemory@24
_ZwAllocateVirtualMemoryEx@28
_ZwAlpcAcceptConnectPort@36
_ZwAlpcCancelMessage@12
_ZwAlpcConnectPort@44
_ZwAlpcConnectPortEx@44
_ZwAlpcCreatePort@12
_ZwAlpcCreatePortSection@24
_ZwAlpcCreateResourceReserve@16
_ZwAlpcCreateSectionView@12
_ZwAlpcCreateSecurityContext@12
_ZwAlpcDeletePortSection@12
_ZwAlpcDeleteResourceReserve@12
_ZwAlpcDeleteSectionView@12
_ZwAlpcDeleteSecurityContext@12
_ZwAlpcDisconnectPort@8
_ZwAlpcImpersonateClientContainerOfPort@12
_ZwAlpcImpersonateClientOfPort@12
_ZwAlpcOpenSenderProcess@24
_ZwAlpcOpenSenderThread@24
_ZwAlpcQueryInformation@20
_ZwAlpcQueryInformationMessage@24
_ZwAlpcRevokeSecurityContext@12
_ZwAlpcSendWaitReceivePort@32
_ZwAlpcSetInformation@16
_ZwApphelpCacheControl@8
_ZwAreMappedFilesTheSame@8
_ZwAssignProcessToJobObject@8
_ZwAssociateWaitCompletionPacket@32
_ZwCallEnclave@16
_ZwCallbackReturn@12
_ZwCancelIoFile@8
_ZwCancelIoFileEx@12
_ZwCancelSynchronousIoFile@12
_ZwCancelTimer2@8
_ZwCancelTimer@8
_ZwCancelWaitCompletionPacket@8
_ZwClearEvent@4
_ZwClose@4
_ZwCloseObjectAuditAlarm@12
_ZwCommitComplete@8
_ZwCommitEnlistment@8
_ZwCommitRegistryTransaction@8
_ZwCommitTransaction@8
_ZwCompactKeys@8
_ZwCompareObjects@8
_ZwCompareSigningLevels@8
_ZwCompareTokens@12
_ZwCompleteConnectPort@4
_ZwCompressKey@4
_ZwConnectPort@32
_ZwContinue@8
_ZwContinueEx@8
_ZwConvertBetweenAuxiliaryCounterAndPerformanceCounter@16
_ZwCreateCrossVmEvent@24
_ZwCreateCrossVmMutant@24
_ZwCreateDebugObject@16
_ZwCreateDirectoryObject@12
_ZwCreateDirectoryObjectEx@20
_ZwCreateEnclave@36
_ZwCreateEnlistment@32
_ZwCreateEvent@20
_ZwCreateEventPair@12
_ZwCreateFile@44
_ZwCreateIRTimer@12
_ZwCreateIoCompletion@16
_ZwCreateJobObject@12
_ZwCreateJobSet@12
_ZwCreateKey@28
_ZwCreateKeyTransacted@32
_ZwCreateKeyedEvent@16
_ZwCreateLowBoxToken@36
_ZwCreateMailslotFile@32
_ZwCreateMutant@16
_ZwCreateNamedPipeFile@56
_ZwCreatePagingFile@16
_ZwCreatePartition@16
_ZwCreatePort@20
_ZwCreatePrivateNamespace@16
_ZwCreateProcess@32
_ZwCreateProcessEx@36
_ZwCreateProfile@36
_ZwCreateProfileEx@40
_ZwCreateRegistryTransaction@16
_ZwCreateResourceManager@28
_ZwCreateSection@28
_ZwCreateSectionEx@36
_ZwCreateSemaphore@20
_ZwCreateSymbolicLinkObject@16
_ZwCreateThread@32
_ZwCreateThreadEx@44
_ZwCreateTimer2@20
_ZwCreateTimer@16
_ZwCreateToken@52
_ZwCreateTokenEx@68
_ZwCreateTransaction@40
_ZwCreateTransactionManager@24
_ZwCreateUserProcess@44
_ZwCreateWaitCompletionPacket@12
_ZwCreateWaitablePort@20
_ZwCreateWnfStateName@28
_ZwCreateWorkerFactory@40
_ZwDebugActiveProcess@8
_ZwDebugContinue@12
_ZwDelayExecution@8
_ZwDeleteAtom@4
_ZwDeleteBootEntry@4
_ZwDeleteDriverEntry@4
_ZwDeleteFile@4
_ZwDeleteKey@4
_ZwDeleteObjectAuditAlarm@12
_ZwDeletePrivateNamespace@4
_ZwDeleteValueKey@8
_ZwDeleteWnfStateData@8
_ZwDeleteWnfStateName@4
_ZwDeviceIoControlFile@40
_ZwDirectGraphicsCall@20
_ZwDisableLastKnownGood@0
_ZwDisplayString@4
_ZwDrawText@4
_ZwDuplicateObject@28
_ZwDuplicateToken@24
_ZwEnableLastKnownGood@0
_ZwEnumerateBootEntries@8
_ZwEnumerateDriverEntries@8
_ZwEnumerateKey@24
_ZwEnumerateSystemEnvironmentValuesEx@12
_ZwEnumerateTransactionObject@20
_ZwEnumerateValueKey@24
_ZwExtendSection@8
_ZwFilterBootOption@20
_ZwFilterToken@24
_ZwFilterTokenEx@56
_ZwFindAtom@12
_ZwFlushBuffersFile@8
_ZwFlushBuffersFileEx@20
_ZwFlushInstallUILanguage@8
_ZwFlushInstructionCache@12
_ZwFlushKey@4
_ZwFlushProcessWriteBuffers@0
_ZwFlushVirtualMemory@16
_ZwFlushWriteBuffer@0
_ZwFreeUserPhysicalPages@12
_ZwFreeVirtualMemory@16
_ZwFreezeRegistry@4
_ZwFreezeTransactions@8
_ZwFsControlFile@40
_ZwGetCachedSigningLevel@24
_ZwGetCompleteWnfStateSubscription@24
_ZwGetContextThread@8
_ZwGetCurrentProcessorNumber@0
_ZwGetCurrentProcessorNumberEx@4
_ZwGetDevicePowerState@8
_ZwGetMUIRegistryInfo@12
_ZwGetNextProcess@20
_ZwGetNextThread@24
_ZwGetNlsSectionPtr@20
_ZwGetNotificationResourceManager@28
_ZwGetWriteWatch@28
_ZwImpersonateAnonymousToken@4
_ZwImpersonateClientOfPort@8
_ZwImpersonateThread@12
_ZwInitializeEnclave@20
_ZwInitializeNlsFiles@12
_ZwInitializeRegistry@4
_ZwInitiatePowerAction@16
_ZwIsProcessInJob@8
_ZwIsSystemResumeAutomatic@0
_ZwIsUILanguageComitted@0
_ZwListenPort@8
_ZwLoadDriver@4
_ZwLoadEnclaveData@36
_ZwLoadKey2@12
_ZwLoadKey3@32
_ZwLoadKey@8
_ZwLoadKeyEx@32
_ZwLockFile@40
_ZwLockProductActivationKeys@8
_ZwLockRegistryKey@4
_ZwLockVirtualMemory@16
_ZwMakePermanentObject@4
_ZwMakeTemporaryObject@4
_ZwManageHotPatch@16
_ZwManagePartition@20
_ZwMapCMFModule@24
_ZwMapUserPhysicalPages@12
_ZwMapUserPhysicalPagesScatter@12
_ZwMapViewOfSection@40
_ZwMapViewOfSectionEx@36
_ZwModifyBootEntry@4
_ZwModifyDriverEntry@4
_ZwNotifyChangeDirectoryFile@36
_ZwNotifyChangeDirectoryFileEx@40
_ZwNotifyChangeKey@40
_ZwNotifyChangeMultipleKeys@48
_ZwNotifyChangeSession@32
_ZwOpenDirectoryObject@12
_ZwOpenEnlistment@20
_ZwOpenEvent@12
_ZwOpenEventPair@12
_ZwOpenFile@24
_ZwOpenIoCompletion@12
_ZwOpenJobObject@12
_ZwOpenKey@12
_ZwOpenKeyEx@16
_ZwOpenKeyTransacted@16
_ZwOpenKeyTransactedEx@20
_ZwOpenKeyedEvent@12
_ZwOpenMutant@12
_ZwOpenObjectAuditAlarm@48
_ZwOpenPartition@12
_ZwOpenPrivateNamespace@16
_ZwOpenProcess@16
_ZwOpenProcessToken@12
_ZwOpenProcessTokenEx@16
_ZwOpenRegistryTransaction@12
_ZwOpenResourceManager@20
_ZwOpenSection@12
_ZwOpenSemaphore@12
_ZwOpenSession@12
_ZwOpenSymbolicLinkObject@12
_ZwOpenThread@16
_ZwOpenThreadToken@16
_ZwOpenThreadTokenEx@20
_ZwOpenTimer@12
_ZwOpenTransaction@20
_ZwOpenTransactionManager@24
_ZwPlugPlayControl@12
_ZwPowerInformation@20
_ZwPrePrepareComplete@8
_ZwPrePrepareEnlistment@8
_ZwPrepareComplete@8
_ZwPrepareEnlistment@8
_ZwPrivilegeCheck@12
_ZwPrivilegeObjectAuditAlarm@24
_ZwPrivilegedServiceAuditAlarm@20
_ZwPropagationComplete@16
_ZwPropagationFailed@12
_ZwProtectVirtualMemory@20
_ZwPssCaptureVaSpaceBulk@20
_ZwPulseEvent@8
_ZwQueryAttributesFile@8
_ZwQueryAuxiliaryCounterFrequency@4
_ZwQueryBootEntryOrder@8
_ZwQueryBootOptions@8
_ZwQueryDebugFilterState@8
_ZwQueryDefaultLocale@8
_ZwQueryDefaultUILanguage@4
_ZwQueryDirectoryFile@44
_ZwQueryDirectoryFileEx@40
_ZwQueryDirectoryObject@28
_ZwQueryDriverEntryOrder@8
_ZwQueryEaFile@36
_ZwQueryEvent@20
_ZwQueryFullAttributesFile@8
_ZwQueryInformationAtom@20
_ZwQueryInformationByName@20
_ZwQueryInformationEnlistment@20
_ZwQueryInformationFile@20
_ZwQueryInformationJobObject@20
_ZwQueryInformationPort@20
_ZwQueryInformationProcess@20
_ZwQueryInformationResourceManager@20
_ZwQueryInformationThread@20
_ZwQueryInformationToken@20
_ZwQueryInformationTransaction@20
_ZwQueryInformationTransactionManager@20
_ZwQueryInformationWorkerFactory@20
_ZwQueryInstallUILanguage@4
_ZwQueryIntervalProfile@8
_ZwQueryIoCompletion@20
_ZwQueryKey@20
_ZwQueryLicenseValue@20
_ZwQueryMultipleValueKey@24
_ZwQueryMutant@20
_ZwQueryObject@20
_ZwQueryOpenSubKeys@8
_ZwQueryOpenSubKeysEx@16
_ZwQueryPerformanceCounter@8
_ZwQueryPortInformationProcess@0
_ZwQueryQuotaInformationFile@36
_ZwQuerySection@20
_ZwQuerySecurityAttributesToken@24
_ZwQuerySecurityObject@20
_ZwQuerySecurityPolicy@24
_ZwQuerySemaphore@20
_ZwQuerySymbolicLinkObject@12
_ZwQuerySystemEnvironmentValue@16
_ZwQuerySystemEnvironmentValueEx@20
_ZwQuerySystemInformation@16
_ZwQuerySystemInformationEx@24
_ZwQuerySystemTime@4
_ZwQueryTimer@20
_ZwQueryTimerResolution@12
_ZwQueryValueKey@24
_ZwQueryVirtualMemory@24
_ZwQueryVolumeInformationFile@20
_ZwQueryWnfStateData@24
_ZwQueryWnfStateNameInformation@20
_ZwQueueApcThread@20
_ZwQueueApcThreadEx@24
_ZwRaiseException@12
_ZwRaiseHardError@24
_ZwReadFile@36
_ZwReadFileScatter@36
_ZwReadOnlyEnlistment@8
_ZwReadRequestData@24
_ZwReadVirtualMemory@20
_ZwRecoverEnlistment@8
_ZwRecoverResourceManager@4
_ZwRecoverTransactionManager@4
_ZwRegisterProtocolAddressInformation@20
_ZwRegisterThreadTerminatePort@4
_ZwReleaseKeyedEvent@16
_ZwReleaseMutant@8
_ZwReleaseSemaphore@12
_ZwReleaseWorkerFactoryWorker@4
_ZwRemoveIoCompletion@20
_ZwRemoveIoCompletionEx@24
_ZwRemoveProcessDebug@8
_ZwRenameKey@8
_ZwRenameTransactionManager@8
_ZwReplaceKey@12
_ZwReplacePartitionUnit@12
_ZwReplyPort@8
_ZwReplyWaitReceivePort@16
_ZwReplyWaitReceivePortEx@20
_ZwReplyWaitReplyPort@8
_ZwRequestPort@8
_ZwRequestWaitReplyPort@12
_ZwResetEvent@8
_ZwResetWriteWatch@12
_ZwRestoreKey@12
_ZwResumeProcess@4
_ZwResumeThread@8
_ZwRevertContainerImpersonation@0
_ZwRollbackComplete@8
_ZwRollbackEnlistment@8
_ZwRollbackRegistryTransaction@8
_ZwRollbackTransaction@8
_ZwRollforwardTransactionManager@8
_ZwSaveKey@8
_ZwSaveKeyEx@12
_ZwSaveMergedKeys@12
_ZwSecureConnectPort@36
_ZwSerializeBoot@0
_ZwSetBootEntryOrder@8
_ZwSetBootOptions@8
_ZwSetCachedSigningLevel2@24
_ZwSetCachedSigningLevel@20
_ZwSetContextThread@8
_ZwSetDebugFilterState@12
_ZwSetDefaultHardErrorPort@4
_ZwSetDefaultLocale@8
_ZwSetDefaultUILanguage@4
_ZwSetDriverEntryOrder@8
_ZwSetEaFile@16
_ZwSetEvent@8
_ZwSetEventBoostPriority@4
_ZwSetHighEventPair@4
_ZwSetHighWaitLowEventPair@4
_ZwSetIRTimer@8
_ZwSetInformationDebugObject@20
_ZwSetInformationEnlistment@16
_ZwSetInformationFile@20
_ZwSetInformationJobObject@16
_ZwSetInformationKey@16
_ZwSetInformationObject@16
_ZwSetInformationProcess@16
_ZwSetInformationResourceManager@16
_ZwSetInformationSymbolicLink@16
_ZwSetInformationThread@16
_ZwSetInformationToken@16
_ZwSetInformationTransaction@16
_ZwSetInformationTransactionManager@16
_ZwSetInformationVirtualMemory@24
_ZwSetInformationWorkerFactory@16
_ZwSetIntervalProfile@8
_ZwSetIoCompletion@20
_ZwSetIoCompletionEx@24
_ZwSetLdtEntries@24
_ZwSetLowEventPair@4
_ZwSetLowWaitHighEventPair@4
_ZwSetQuotaInformationFile@16
_ZwSetSecurityObject@12
_ZwSetSystemEnvironmentValue@8
_ZwSetSystemEnvironmentValueEx@20
_ZwSetSystemInformation@12
_ZwSetSystemPowerState@12
_ZwSetSystemTime@8
_ZwSetThreadExecutionState@8
_ZwSetTimer2@16
_ZwSetTimer@28
_ZwSetTimerEx@16
_ZwSetTimerResolution@12
_ZwSetUuidSeed@4
_ZwSetValueKey@24
_ZwSetVolumeInformationFile@20
_ZwSetWnfProcessNotificationEvent@4
_ZwShutdownSystem@4
_ZwShutdownWorkerFactory@8
_ZwSignalAndWaitForSingleObject@16
_ZwSinglePhaseReject@8
_ZwStartProfile@4
_ZwStopProfile@4
_ZwSubscribeWnfStateChange@16
_ZwSuspendProcess@4
_ZwSuspendThread@8
_ZwSystemDebugControl@24
_ZwTerminateEnclave@8
_ZwTerminateJobObject@8
_ZwTerminateProcess@8
_ZwTerminateThread@8
_ZwTestAlert@0
_ZwThawRegistry@0
_ZwThawTransactions@0
_ZwTraceControl@24
_ZwTraceEvent@16
_ZwTranslateFilePath@16
_ZwUmsThreadYield@4
_ZwUnloadDriver@4
_ZwUnloadKey2@8
_ZwUnloadKey@4
_ZwUnloadKeyEx@8
_ZwUnlockFile@20
_ZwUnlockVirtualMemory@16
_ZwUnmapViewOfSection@8
_ZwUnmapViewOfSectionEx@12
_ZwUnsubscribeWnfStateChange@4
_ZwUpdateWnfStateData@28
_ZwVdmControl@8
_ZwWaitForAlertByThreadId@8
_ZwWaitForDebugEvent@16
_ZwWaitForKeyedEvent@16
_ZwWaitForMultipleObjects32@20
_ZwWaitForMultipleObjects@20
_ZwWaitForSingleObject@12
_ZwWaitForWorkViaWorkerFactory@20
_ZwWaitHighEventPair@4
_ZwWaitLowEventPair@4
_ZwWorkerFactoryWorkerReady@4
_ZwWriteFile@36
_ZwWriteFileGather@36
_ZwWriteRequestData@24
_ZwWriteVirtualMemory@20
_ZwYieldExecution@0
__87except
__CIcos
__CIcos_default
__CIsin
__CIsin_default
__CIsqrt
__CmAddDeviceToContainer@20
__CmAddDeviceToContainerWorker@20
__CmAddPanelDevice@16
__CmAddPanelDeviceWorker@16
__CmAppendDeclarativeDefaultFilters@28
__CmAppendDeclarativeFilterLevel@24
__CmBuildDevicePanelId@20
__CmClassFilterCallback@16
__CmClassSubkeyCallback@16
__CmContainerListGenericObjectCallback@16
__CmCreateDevice@24
__CmCreateDeviceContainer@24
__CmCreateDeviceContainerWorker@24
__CmCreateDeviceInterface@24
__CmCreateDeviceInterfaceWorker@24
__CmCreateDevicePanel@24
__CmCreateDevicePanelWorker@24
__CmCreateDeviceWorker@24
__CmCreateInstallerClass@24
__CmCreateInstallerClassWorker@24
__CmCreateInterfaceClass@24
__CmCreateInterfaceClassWorker@24
__CmCreateOrdinalInstanceKey@24
__CmDeleteCommonClassRegKey@20
__CmDeleteCommonClassRegKeyWorker@20
__CmDeleteDevice@12
__CmDeleteDeviceContainer@12
__CmDeleteDeviceContainerRegKey@20
__CmDeleteDeviceContainerRegKeyWorker@20
__CmDeleteDeviceContainerWorker@12
__CmDeleteDeviceInterface@12
__CmDeleteDeviceInterfaceMappedPropertyFromRegValue@16
__CmDeleteDeviceInterfaceRegKey@20
__CmDeleteDeviceInterfaceRegKeyWorker@20
__CmDeleteDeviceInterfaceWorker@12
__CmDeleteDeviceMappedPropertyForAllDriverKeyRegValues@8
__CmDeleteDeviceMappedPropertyFromDriverKeyRegValue@12
__CmDeleteDeviceMappedPropertyFromInstanceKeyRegValue@16
__CmDeleteDevicePanel@12
__CmDeleteDevicePanelRegKey@20
__CmDeleteDevicePanelRegKeyWorker@20
__CmDeleteDevicePanelWorker@12
__CmDeleteDeviceRegKey@20
__CmDeleteDeviceRegKeyWorker@20
__CmDeleteDeviceWorker@12
__CmDeleteInstallerClass@12
__CmDeleteInstallerClassMappedPropertyFromCoInstallers@12
__CmDeleteInstallerClassMappedPropertyFromRegValue@16
__CmDeleteInstallerClassWorker@12
__CmDeleteInterfaceClass@12
__CmDeleteInterfaceClassMappedPropertyFromRegValue@16
__CmDeleteInterfaceClassWorker@12
__CmDeviceClassesSubkeyCallback@16
__CmDevicePanelEnumSubkeyCallback@16
__CmDevicePropertyWrite@8
__CmEnumDevicesInContainerWithCallback@24
__CmEnumDevicesInContainerWithCallbackWorker@24
__CmEnumSubkeyCallback@16
__CmFindFilterListInflectionPoint@12
__CmGetCommonClassRegKeyPath@32
__CmGetContainerBooleanProperty@32
__CmGetContainerBooleanPropertyCallback@12
__CmGetDeclarativeFilterList@32
__CmGetDeviceChildren@16
__CmGetDeviceCompoundFilters@32
__CmGetDeviceCompoundFiltersWorker@40
__CmGetDeviceContainerIdFromBase@20
__CmGetDeviceContainerMappedProperty@36
__CmGetDeviceContainerMappedPropertyKeys@28
__CmGetDeviceContainerMappedPropertyLocales@28
__CmGetDeviceContainerRegKeyPath@32
__CmGetDeviceControlKeyPath@32
__CmGetDeviceHardwareKeyPath@32
__CmGetDeviceInstanceKeyPath@32
__CmGetDeviceInterfaceClassGuid@12
__CmGetDeviceInterfaceClassGuidString@16
__CmGetDeviceInterfaceMappedProperty@36
__CmGetDeviceInterfaceMappedPropertyFromComposite@32
__CmGetDeviceInterfaceMappedPropertyFromRegValue@32
__CmGetDeviceInterfaceMappedPropertyKeys@28
__CmGetDeviceInterfaceMappedPropertyLocales@28
__CmGetDeviceInterfaceName@32
__CmGetDeviceInterfacePathFormat@12
__CmGetDeviceInterfaceReferenceString@20
__CmGetDeviceInterfaceRegKeyPath@32
__CmGetDeviceInterfaceRegKeySecurityDescriptor@12
__CmGetDeviceInterfaceSubkeyPath@28
__CmGetDeviceInterfaceSymbolicLinkName@20
__CmGetDeviceLogConfKeyPath@32
__CmGetDeviceMappedProperty@40
__CmGetDeviceMappedPropertyFromComposite@36
__CmGetDeviceMappedPropertyFromInstanceKeyRegValue@32
__CmGetDeviceMappedPropertyFromRegProp@36
__CmGetDeviceMappedPropertyKeys@28
__CmGetDeviceMappedPropertyLocales@28
__CmGetDevicePanelGroup@4
__CmGetDevicePanelMappedProperty@36
__CmGetDevicePanelMappedPropertyKeys@28
__CmGetDevicePanelMappedPropertyLocales@28
__CmGetDevicePanelRegKeyPath@32
__CmGetDeviceParent@16
__CmGetDeviceRegKeyPath@32
__CmGetDeviceRegKeySecurityDescriptor@12
__CmGetDeviceRegProp@32
__CmGetDeviceRegPropWorker@32
__CmGetDeviceRelationsList@28
__CmGetDeviceSiblings@16
__CmGetDeviceSoftwareKey@20
__CmGetDeviceSoftwareKeyPath@32
__CmGetDeviceStatus@28
__CmGetDevicesInBaseContainerList@16
__CmGetInstallerClassCompoundFilters@32
__CmGetInstallerClassCompoundFiltersWorker@40
__CmGetInstallerClassMappedProperty@36
__CmGetInstallerClassMappedPropertyFromCoInstallers@28
__CmGetInstallerClassMappedPropertyFromComposite@32
__CmGetInstallerClassMappedPropertyFromRegProp@32
__CmGetInstallerClassMappedPropertyFromRegValue@32
__CmGetInstallerClassMappedPropertyKeys@28
__CmGetInstallerClassMappedPropertyLocales@28
__CmGetInstallerClassRegProp@32
__CmGetInstallerClassRegPropWorker@32
__CmGetInterfaceClassMappedProperty@36
__CmGetInterfaceClassMappedPropertyFromComposite@32
__CmGetInterfaceClassMappedPropertyFromRegValue@32
__CmGetInterfaceClassMappedPropertyKeys@28
__CmGetInterfaceClassMappedPropertyLocales@28
__CmGetMatchingCommonClassList@32
__CmGetMatchingCommonClassListWorker@32
__CmGetMatchingDeviceContainerList@28
__CmGetMatchingDeviceContainerListWorker@28
__CmGetMatchingDeviceInterfaceList@28
__CmGetMatchingDeviceInterfaceListWorker@28
__CmGetMatchingDeviceList@28
__CmGetMatchingDeviceListForSubkey@32
__CmGetMatchingDevicePanelList@28
__CmGetMatchingDevicePanelListWorker@28
__CmGetMatchingFilteredDeviceInterfaceList@40
__CmGetMatchingFilteredDeviceInterfaceListWorker@40
__CmGetMatchingFilteredDeviceList@36
__CmGetMatchingFilteredDeviceListWorker@36
__CmGetMatchingInstallerClassList@28
__CmGetMatchingInterfaceClassList@28
__CmGetParentDeviceContainerId@12
__CmGetRegKeySecurityDescriptor@8
__CmIsDeviceInContainer@28
__CmIsDeviceInterfaceEnabled@16
__CmIsDevicePresent@12
__CmIsDeviceRegPropWritable@12
__CmIsDeviceSafeRemovalRequired@12
__CmIsInstallerClassRegPropWritable@8
__CmIsLocalMachineContainer@8
__CmIsRootDevice@4
__CmIsRootEnumeratedDevice@4
__CmMapCmObjectTypeToPnpObjectType@4
__CmMapPropertyKeyToRegProp@8
__CmMapRegPropToPropertyKey@8
__CmMatchLastKnownParentCallback@16
__CmMergeFilterLists@24
__CmMoveBaseContainer@16
__CmOpenCommonClassRegKey@32
__CmOpenCommonClassRegKeyWorker@32
__CmOpenDeviceContainerRegKey@32
__CmOpenDeviceContainerRegKeyWorker@32
__CmOpenDeviceInterfaceRegKey@32
__CmOpenDeviceInterfaceRegKeyWorker@32
__CmOpenDevicePanelRegKey@32
__CmOpenDevicePanelRegKeyWorker@32
__CmOpenDeviceRegKey@32
__CmOpenDeviceRegKeyWorker@32
__CmQueryDevicePanelPldProperty@36
__CmRaiseCreateEvent@16
__CmRaiseDeleteEvent@12
__CmRaisePropertyChangeEvent@20
__CmRemoveDeviceFromContainer@20
__CmRemoveDeviceFromContainerWorker@20
__CmRemovePanelDevice@16
__CmRemovePanelDeviceWorker@16
__CmServiceFilterCallback@16
__CmSetDeviceContainerMappedProperty@32
__CmSetDeviceInterfaceMappedProperty@32
__CmSetDeviceInterfaceMappedPropertyFromRegValue@28
__CmSetDeviceInterfacePathFormat@12
__CmSetDeviceMappedProperty@32
__CmSetDeviceMappedPropertyFromDriverKeyRegValue@24
__CmSetDeviceMappedPropertyFromInstanceKeyRegValue@28
__CmSetDeviceMappedPropertyFromRegProp@28
__CmSetDevicePanelMappedProperty@32
__CmSetDeviceRegProp@32
__CmSetDeviceRegPropWorker@32
__CmSetInstallerClassMappedProperty@32
__CmSetInstallerClassMappedPropertyFromCoInstallers@24
__CmSetInstallerClassMappedPropertyFromRegProp@28
__CmSetInstallerClassMappedPropertyFromRegValue@28
__CmSetInstallerClassRegProp@32
__CmSetInstallerClassRegPropWorker@32
__CmSetInterfaceClassMappedProperty@32
__CmSetInterfaceClassMappedPropertyFromRegValue@28
__CmSplitDevicePanelId@16
__CmUpdateDevicePanel@12
__CmUpdateDevicePanelInterface@12
__CmValidateDeviceContainerName@8
__CmValidateDeviceInterfaceName@8
__CmValidateDeviceName@8
__CmValidateDevicePanelName@8
__FinalExceptionHandler@16
__GetBaseTypeSize@4
__IsFixedSizeType@4
__IsMachineLanguageListInMutableLocation@0
__IsNeutralLocale@4
__MapCmClassPropertyToRegType@4
__MapCmClassPropertyToRegValue@8
__MapCmDevicePropertyToNtProperty@8
__MapCmDevicePropertyToRegType@4
__MapCmDevicePropertyToRegValue@8
__MapCmRelationTypeToNtRelationType@4
__NLG_Call
__NLG_Notify
__NLG_Notify1
__NtPlugPlayGetDeviceInterfaceEnabled@16
__NtPlugPlayGetDeviceProperty@28
__NtPlugPlayGetDeviceRelatedDevice@28
__NtPlugPlayGetDeviceRelationsList@28
__NtPlugPlayGetDeviceStatus@24
__PnpCmMatchCallbackRoutine@16
__PnpContainerRaiseDevicesChangeEvent@12
__PnpCreateObject@28
__PnpCreateObjectDispatch@28
__PnpCtxCloseMachine@4
__PnpCtxCreateNode@36
__PnpCtxDestroyNode@4
__PnpCtxFindNode@16
__PnpCtxGetCachedContextBaseKey@12
__PnpCtxGetCachedContextBaseKeyNode@12
__PnpCtxGetCachedNodeBaseKey@16
__PnpCtxGetNtPlugPlayRoutine@12
__PnpCtxGetObjectContext@12
__PnpCtxGetObjectDispatchCallback@12
__PnpCtxGetPreferredBaseKeyNodeType@4
__PnpCtxInternalEnumKeyCallback@16
__PnpCtxOpenContextBaseKey@20
__PnpCtxOpenContextNodeBaseKey@28
__PnpCtxOpenMachine@28
__PnpCtxRegCloseKey@8
__PnpCtxRegCopyTree@20
__PnpCtxRegCreateKey@32
__PnpCtxRegCreateTree@32
__PnpCtxRegDeleteKey@12
__PnpCtxRegDeleteTree@12
__PnpCtxRegDeleteValue@12
__PnpCtxRegEnumKey@20
__PnpCtxRegEnumKeyWithCallback@16
__PnpCtxRegEnumValue@32
__PnpCtxRegOpenKey@24
__PnpCtxRegQueryInfoKey@28
__PnpCtxRegQueryKeyPathName@16
__PnpCtxRegQueryValue@24
__PnpCtxRegSetValue@24
__PnpCtxRegisterMachineNode@28
__PnpCtxSetNtPlugPlayRoutine@12
__PnpDeleteObject@16
__PnpDeleteObjectDispatch@16
__PnpDeletePropertyWorker@32
__PnpDeviceRaisePropertyChangeEventWorker@24
__PnpDispatchDevice@20
__PnpDispatchDeviceContainer@20
__PnpDispatchDeviceInterface@20
__PnpDispatchDevicePanel@20
__PnpDispatchInstallerClass@20
__PnpDispatchInterfaceClass@20
__PnpGetEnumSecurityDescriptor@4
__PnpGetGenericObjectList@32
__PnpGetGenericStoreProperty@36
__PnpGetGenericStorePropertyKeys@32
__PnpGetGenericStorePropertyLocales@28
__PnpGetMappedPropertyDispatch@44
__PnpGetMappedPropertyKeysDispatch@40
__PnpGetMappedPropertyLocalesDispatch@36
__PnpGetObjectList@32
__PnpGetObjectListDispatch@32
__PnpGetObjectProperty@44
__PnpGetObjectPropertyKeys@40
__PnpGetObjectPropertyKeysWorker@40
__PnpGetObjectPropertyLocales@36
__PnpGetObjectPropertyLocalesWorker@36
__PnpGetObjectPropertyWorker@44
__PnpGetPropertiesSecurityDescriptor@4
__PnpHasDerivedKeys@12
__PnpInstallerClassRaisePropertyChangeEventWorker@24
__PnpInterfaceClassRaisePropertyChangeEventWorker@24
__PnpInterfaceRaisePropertyChangeEventWorker@24
__PnpIsNullGuidString@4
__PnpIsValidGuidString@4
__PnpMapCmStatusToDispatchStatus@4
__PnpMultiSzAppend@16
__PnpMultiSzDeleteString@8
__PnpMultiSzFind@12
__PnpMultiSzGetLen@4
__PnpNotifyDerivedKeys@32
__PnpObjectListCallback@16
__PnpObjectRaiseCreateEvent@16
__PnpObjectRaiseDeleteEvent@12
__PnpObjectRaiseDevicesChangeEvent@12
__PnpObjectRaisePropertyChangeEvent@24
__PnpOpenObjectRegKey@32
__PnpOpenObjectRegKeyDispatch@32
__PnpOpenPropertiesKey@28
__PnpParseIndirectInfString@20
__PnpParseIndirectResourceString@24
__PnpRaiseNtPlugPlayDevicePropertyChangeEvent@12
__PnpRaiseNtPlugPlayInterfacePropertyChangeEvent@12
__PnpRegQueryValueIndirect@28
__PnpSetGenericStoreProperty@32
__PnpSetMappedPropertyDispatch@40
__PnpSetObjectProperty@40
__PnpSetObjectPropertyWorker@40
__PnpSetPropertyWorker@32
__PnpStringFromGuid@12
__PnpUpdateInterfacesCallback@16
__PnpValidateObjectName@16
__PnpValidateObjectNameDispatch@16
__PnpValidatePropertyData@12
__RegRtlCopyTreeInternal@28
__RegRtlCreateKeyTransacted@36
__RegRtlCreateTreeTransacted@36
__RegRtlDeleteKeyTransacted@12
__RegRtlDeletePathInternal@20
__RegRtlDeleteTreeInternal@16
__RegRtlEnumKey@16
__RegRtlEnumKeyWithCallback@12
__RegRtlEnumValue@28
__RegRtlIsPredefinedKey@4
__RegRtlOpenKeyTransacted@24
__RegRtlOpenPredefinedKey@8
__RegRtlQueryInfoKey@24
__RegRtlQueryKeyPathName@12
__RegRtlQueryValue@20
__RegRtlSetValue@20
__RtlEnlargedIntegerMultiply@8
__RtlEnlargedUnsignedDivide@16
__RtlEnlargedUnsignedMultiply@8
__RtlMuiRegAddLIPParent@16
__RtlpMuiRegAddBaseLanguage@20
__RtlpMuiRegAddNeutralLanguage@12
__RtlpMuiRegInitAnyLanguage@16
__RtlpMuiRegInitLIPLanguage@12
__RtlpMuiRegInitPartialLanguage@12
__RtlpMuiRegLoadInstalled@16
__RtlpMuiRegLoadInstalledFromKey@8
__RtlpMuiRegPopulateBaseLanguages@20
__RtlpMuiRegSerializeRegistryInfo@12
__RtlpMuiRegValidateAndGetInstallFallbackBase@20
__RtlpMuiRegValidateInstalled@4
__RtlpMuiRegValidateLIPLanguage@8
__RtlpMuiRegValidatePartialLanguage@8
__RtlpRemovePendingDeleteLanguages@8
__SEH_epilog4
__SEH_epilog4_GS
__SEH_prolog4
__SEH_prolog4_GS
__SysCtxCloseMachine@4
__SysCtxGetCachedContextBaseKey@12
__SysCtxInternalEnumSubkeyCallback@12
__SysCtxOpenControlSet@16
__SysCtxOpenMachine@28
__SysCtxRegCreateKey@36
__SysCtxRegCreateTree@36
__SysCtxRegOpenCurrentUserKey@16
__SysCtxRegOpenKey@24
__ValidateEH3RN
___RtlConvertLongToLargeInteger@4
___RtlConvertUlongToLargeInteger@4
___ascii_memicmp
___ascii_stricmp
___ascii_strnicmp
___isascii
___pctype_func
___report_gsfailure
___report_rangecheckfailure
__abnormal_termination
__alldiv
__alldvrm
__allmul
__alloca_probe
__alloca_probe_16
__allrem
__allshl
__allshr
__atoi64
__aulldiv
__aulldvrm
__aullrem
__aullshr
__checkTOS_withFB
__check_overflow_exit
__check_range_exit
__chkstk
__clrfp
__convertTOStoQNaN
__ctrlfp
__decomp
__except_handler2
__except_handler3
__except_handler4
__fast_exit
__fgetwc_nolock
__filbuf_s
__filwbuf_s
__finite
__fload_withFB
__flsbuf
__flsbuf_s
__flswbuf
__fputwc_nolock
__get_printf_count_output
__global_unwind2
__handle_exc
__i64toa_s
__i64tow_s
__input_s
__invalid_parameter
__iswctype_l
__itoa
__itoa_s
__itow
__itow_s
__load_CW
__local_unwind2
__local_unwind4
__ltoa_s
__ltow_s
__makepath_s
__math_exit
__matherr
__mbstrlen
__memicmp
__nan2
__nosnan2
__output_l
__output_s
__purecall
__raise_exc
__raise_exc_ex
__rtindfpop
__rtonenpop
__rttosnpop
__rtzeropop
__safecrt_mbtowc
__safecrt_wctomb_s
__seh_longjmp_unwind4@4
__seh_longjmp_unwind@4
__set_errno_from_matherr
__set_exp
__set_statfp
__sinput_s
__snprintf
__snprintf_s
__snscanf_s
__snwprintf
__snwprintf_s
__snwscanf_s
__soutput_s
__splitpath_s
__startOneArgErrorHandling
__startTwoArgErrorHandling
__statfp
__stricmp
__strlwr
__strnicmp
__strnset
__strnset_s
__strrev
__strset
__strset_s
__strtoi64
__strtoui64
__strupr
__swinput_s
__swoutput_s
__swprintf
__tlgCreate1Sz_char@8
__tlgCreate1Sz_wchar_t@8
__tlgDefineProvider_annotation__TlgBootProviderProv
__tlgDefineProvider_annotation__TlgCcTelemetryProviderProv
__tlgDefineProvider_annotation__TlgCmpTraceLoggingHandleProv
__tlgDefineProvider_annotation__TlgExpTraceLoggingProviderProv
__tlgDefineProvider_annotation__TlgKiTraceLoggingHandleProv
__tlgDefineProvider_annotation__TlgLiveDumpTraceLoggingProviderProv
__tlgDefineProvider_annotation__TlgMiTraceHandleProv
__tlgDefineProvider_annotation__TlgPnpTraceLoggingConfigHandleProv
__tlgDefineProvider_annotation__TlgPnpTraceLoggingEventHandleCoreProv
__tlgDefineProvider_annotation__TlgPnpTraceLoggingEventHandleProv
__tlgDefineProvider_annotation__TlgPopDirectedDripsDiagTraceHandleProv
__tlgDefineProvider_annotation__TlgPopTraceDiagFxAccountingHandleProv
__tlgDefineProvider_annotation__TlgPopTraceHandleCoreProv
__tlgDefineProvider_annotation__TlgPopTraceHandleProv
__tlgDefineProvider_annotation__TlgPspTraceLoggingHandleProv
__tlgDefineProvider_annotation__TlgRtlpCapChkTraceLoggingProviderProv
__tlgDefineProvider_annotation__TlgSeTraceLoggingHandleProv
__tlgDefineProvider_annotation__TlgSysEnvTraceLoggingProviderProv
__tlgDefineProvider_annotation__TlgTRACE_PROVIDERProv
__tlgDefineProvider_annotation__TlgTlgAggregateInternalProviderProv
__tlgDefineProvider_annotation__TlgTlgCoverageProvRegHandleProv
__tlgDefineProvider_annotation__TlgTlgKernelProvRegHandleProv
__tlgDefineProvider_annotation__TlgTlgPsProvRegHandleProv
__tlgDefineProvider_annotation__TlgTtmTelemetryHandleProv
__tlgDefineProvider_annotation__TlgTtmTraceHandleProv
__tlgDefineProvider_annotation__TlgVmpTraceHandleProv
__tlgEnableCallback@36
__tlgKeywordOn@12
__tlgWriteAgg@20
__tlgWriteEx_EtwWriteEx@36
__tlgWriteTransfer_EtwWriteTransfer@24
__tosnan1
__tosnan2
__trandisp1
__trandisp2
__twoToTOS
__ui64toa_s
__ui64tow_s
__ultoa_s
__ultow
__ultow_s
__ungetc_nolock
__ungetwc_nolock
__vsnprintf
__vsnprintf_l
__vsnprintf_s
__vsnwprintf
__vsnwprintf_l
__vsnwprintf_s
__vsprintf_l
__vswprintf
__vswprintf_l
__wchartodigit
__wcsicmp
__wcsistr
__wcslwr
__wcslwr_s
__wcsnicmp
__wcsnset
__wcsnset_s
__wcsrev
__wcsset_s
__wcstoi64
__wcsupr
__wctomb_s_l
__winput_s
__wmakepath_s
__woutput_l
__woutput_s
__wsplitpath_s
__wtoi
__wtol
_adapt@12
_atoi
_atol
_bsearch
_bsearch_s
_cos
_decode_digit@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsAddLogContainer@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsCloseLogFileObject@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsCreateLogFile@44
_ext_ms_win_fs_clfs_l1_1_0_ClfsCreateMarshallingArea@32
_ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteLogByPointer@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsDeleteMarshallingArea@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsFlushToLsn@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsGetLogFileInformation@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnContainer@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnDifference@20
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnEqual@8
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnInvalid@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsLsnLess@8
_ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtDeregisterManagedClient@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtInstallPolicy@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsMgmtRegisterManagedClient@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsReadLogRecord@36
_ext_ms_win_fs_clfs_l1_1_0_ClfsReadNextLogRecord@32
_ext_ms_win_fs_clfs_l1_1_0_ClfsReadRestartArea@20
_ext_ms_win_fs_clfs_l1_1_0_ClfsRemoveLogContainer@12
_ext_ms_win_fs_clfs_l1_1_0_ClfsReserveAndAppendLog@36
_ext_ms_win_fs_clfs_l1_1_0_ClfsTerminateReadLog@4
_ext_ms_win_fs_clfs_l1_1_0_ClfsWriteRestartArea@28
_ext_ms_win_ntos_clipsp_l1_1_0_ClipSpInitialize@8
_ext_ms_win_ntos_kcminitcfg_l1_1_0_CmCompleteInitMachineConfig@4
_ext_ms_win_ntos_kcminitcfg_l1_1_0_CmSetInitMachineConfig@4
_ext_ms_win_ntos_ksecurity_l1_1_1_QueryUpdateFileEaAllowedExt@4
_ext_ms_win_ntos_ksr_l1_1_3_KsrClaimPersistedMemory@28
_ext_ms_win_ntos_ksr_l1_1_3_KsrCleanupPageDatabase@4
_ext_ms_win_ntos_ksr_l1_1_3_KsrEnumeratePersistedMemory@12
_ext_ms_win_ntos_ksr_l1_1_3_KsrFreePersistedMemory@8
_ext_ms_win_ntos_ksr_l1_1_3_KsrFreePersistedMemoryBlock@16
_ext_ms_win_ntos_ksr_l1_1_3_KsrGetFirmwareInformation@4
_ext_ms_win_ntos_ksr_l1_1_3_KsrInitPageDatabase@8
_ext_ms_win_ntos_ksr_l1_1_3_KsrInitSystem@16
_ext_ms_win_ntos_ksr_l1_1_3_KsrMdlToMemoryRuns@16
_ext_ms_win_ntos_ksr_l1_1_3_KsrPersistMemoryWithMetadata@24
_ext_ms_win_ntos_ksr_l1_1_3_KsrQueryMetadata@24
_ext_ms_win_ntos_processparameters_l1_1_0_PsDestroyProcessParameterOverrides@4
_ext_ms_win_ntos_processparameters_l1_1_0_PsGetProcessParameterOverrides@8
_ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase0@8
_ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase1@4
_ext_ms_win_ntos_stateseparation_l1_1_0_ExpInitializeStateSeparationPhase2@12
_ext_ms_win_ntos_tm_l1_1_0_NtCommitComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtCommitEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtCommitTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_NtCreateEnlistment@32
_ext_ms_win_ntos_tm_l1_1_0_NtCreateResourceManager@28
_ext_ms_win_ntos_tm_l1_1_0_NtCreateTransaction@40
_ext_ms_win_ntos_tm_l1_1_0_NtCreateTransactionManager@24
_ext_ms_win_ntos_tm_l1_1_0_NtEnumerateTransactionObject@20
_ext_ms_win_ntos_tm_l1_1_0_NtFreezeTransactions@8
_ext_ms_win_ntos_tm_l1_1_0_NtGetNotificationResourceManager@28
_ext_ms_win_ntos_tm_l1_1_0_NtOpenEnlistment@20
_ext_ms_win_ntos_tm_l1_1_0_NtOpenResourceManager@20
_ext_ms_win_ntos_tm_l1_1_0_NtOpenTransaction@20
_ext_ms_win_ntos_tm_l1_1_0_NtOpenTransactionManager@24
_ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtPrePrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtPrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtPrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtPropagationComplete@16
_ext_ms_win_ntos_tm_l1_1_0_NtPropagationFailed@12
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationEnlistment@20
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationResourceManager@20
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransaction@20
_ext_ms_win_ntos_tm_l1_1_0_NtQueryInformationTransactionManager@20
_ext_ms_win_ntos_tm_l1_1_0_NtReadOnlyEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtRecoverEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtRecoverResourceManager@4
_ext_ms_win_ntos_tm_l1_1_0_NtRecoverTransactionManager@4
_ext_ms_win_ntos_tm_l1_1_0_NtRegisterProtocolAddressInformation@20
_ext_ms_win_ntos_tm_l1_1_0_NtRenameTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollbackComplete@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollbackEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollbackTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_NtRollforwardTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationEnlistment@16
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationResourceManager@16
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransaction@16
_ext_ms_win_ntos_tm_l1_1_0_NtSetInformationTransactionManager@16
_ext_ms_win_ntos_tm_l1_1_0_NtSinglePhaseReject@8
_ext_ms_win_ntos_tm_l1_1_0_NtThawTransactions@0
_ext_ms_win_ntos_tm_l1_1_0_TmCancelPropagationRequest@4
_ext_ms_win_ntos_tm_l1_1_0_TmCommitComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmCommitEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmCommitTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_TmCreateEnlistment@36
_ext_ms_win_ntos_tm_l1_1_0_TmCurrentTransaction@4
_ext_ms_win_ntos_tm_l1_1_0_TmDereferenceEnlistmentKey@8
_ext_ms_win_ntos_tm_l1_1_0_TmEnableCallbacks@12
_ext_ms_win_ntos_tm_l1_1_0_TmEndPropagationRequest@4
_ext_ms_win_ntos_tm_l1_1_0_TmFreezeTransactions@12
_ext_ms_win_ntos_tm_l1_1_0_TmGetTransactionId@8
_ext_ms_win_ntos_tm_l1_1_0_TmInitSystem@16
_ext_ms_win_ntos_tm_l1_1_0_TmInitSystemPhase2@0
_ext_ms_win_ntos_tm_l1_1_0_TmInitializeTransactionManager@16
_ext_ms_win_ntos_tm_l1_1_0_TmIsKTMCommitCoordinator@4
_ext_ms_win_ntos_tm_l1_1_0_TmIsTransactionActive@4
_ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmPrePrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmPrepareComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmPrepareEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmPropagationComplete@16
_ext_ms_win_ntos_tm_l1_1_0_TmPropagationFailed@12
_ext_ms_win_ntos_tm_l1_1_0_TmReadOnlyEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRecoverEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRecoverResourceManager@4
_ext_ms_win_ntos_tm_l1_1_0_TmRecoverTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_TmReferenceEnlistmentKey@8
_ext_ms_win_ntos_tm_l1_1_0_TmRenameTransactionManager@8
_ext_ms_win_ntos_tm_l1_1_0_TmRequestOutcomeEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRollbackComplete@8
_ext_ms_win_ntos_tm_l1_1_0_TmRollbackEnlistment@8
_ext_ms_win_ntos_tm_l1_1_0_TmRollbackTransaction@8
_ext_ms_win_ntos_tm_l1_1_0_TmSetCurrentTransaction@4
_ext_ms_win_ntos_tm_l1_1_0_TmShutdownSystem@0
_ext_ms_win_ntos_tm_l1_1_0_TmSinglePhaseReject@8
_ext_ms_win_ntos_tm_l1_1_0_TmThawTransactions@0
_ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationLoad@0
_ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInformationUnload@0
_ext_ms_win_ntos_ucode_l1_1_0_ExpMicrocodeInitialization@4
_ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCancelReport@4
_ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCloseHandle@4
_ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelCreateReport@12
_ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelInitSystem@0
_ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelOpenDumpFile@8
_ext_ms_win_ntos_werkernel_l1_1_1_WerLiveKernelSubmitReport@8
_isdigit
_islower
_isprint
_isspace
_isupper
_iswalnum
_iswalpha
_iswctype
_iswdigit
_iswspace
_isxdigit
_mbstowcs
_mbtowc
_memchr
_memcmp
_memcpy
_memcpy_s
_memmove
_memmove_s
_memset
_pIoQueryBusDescription@24
_pIoQueryDeviceDescription@24
_punycode_decode@32
_punycode_encode@24
_qsort
_qsort_s
_rand
_regValue@8
_sin
_sprintf
_sprintf_s
_srand
_sscanf_s
_strcat
_strcat_s
_strchr
_strcmp
_strcpy
_strcpy_s
_strlen
_strncat
_strncat_s
_strncmp
_strncpy
_strncpy_s
_strnlen
_strrchr
_strspn
_strstr
_strtok_s
_strtol
_strtolX
_strtoul
_swprintf
_swprintf_s
_swscanf_s
_tcpxsum@12
_tolower
_toupper
_towlower
_towupper
_vDbgPrintEx@16
_vDbgPrintExWithPrefix@20
_vDbgPrintExWithPrefixInternal@24
_vsprintf
_vsprintf_s
_vswprintf_s
_wcscat
_wcscat_s
_wcschr
_wcscmp
_wcscpy
_wcscpy_s
_wcscspn
_wcslen
_wcsncat
_wcsncat_s
_wcsncmp
_wcsncpy
_wcsncpy_s
_wcsnlen
_wcspbrk
_wcsrchr
_wcsspn
_wcsstr
_wcstok_s
_wcstol
_wcstolX
_wcstombs
_wcstoul
_wcstoxq
_wctomb
_wctomb_s
_wil_RtlStagingConfig_QueryFeatureState@16
_wil_atomic_uint32_compare_exchange_relaxed@12
_wil_details_BuildFeatureStateCacheFromQueryResults@12
_wil_details_EvaluateFeatureDependencies_GetCachedFeatureEnabledState@8
_wil_details_EvaluateFeatureDependencies_ReevaluateCachedFeatureEnabledState@16
_wil_details_EvaluateFeatureDependencies_UpdateFeatureDesiredStates@0
_wil_details_FeatureDescriptors_SkipPadding@4
_wil_details_FeatureReporting_IncrementOpportunityInCache@16
_wil_details_FeatureReporting_IncrementUsageInCache@16
_wil_details_FeatureReporting_RecordUsageInCache@16
_wil_details_FeatureReporting_ReportUsageToService@32
_wil_details_FeatureReporting_ReportUsageToServiceDirect@28
_wil_details_FeatureStateCache_GetCachedFeatureEnabledState@8
_wil_details_FeatureStateCache_ReevaluateCachedFeatureEnabledState@16
_wil_details_GetCurrentFeatureEnabledState@8
_wil_details_MapReportingKind@8
_wil_details_OnFeatureConfigurationChange@4
_wil_details_PopulateInitialConfiguredFeatureStatesFromBuffers@4
_wil_details_RegisterFeatureStagingChangeNotification@4
_wil_details_UpdateFeatureConfiguredStates@0
_xHalAcpiAoacCapable@0
_xHalAcpiGetMultiNode@0
_xHalAcpiLateRestore@0
_xHalAddInterruptRemapping@24
_xHalAllocateGsivForSecondaryInterrupt@12
_xHalAllocateMapRegisters@16
_xHalAllocateMessageTarget@32
_xHalAllocatePmcCounterSet@16
_xHalAssignSlotResources@32
_xHalCaptureLastBranchRecordStack@12
_xHalClearLastBranchRecordStack@0
_xHalClockTimerActivate@4
_xHalClockTimerArm@16
_xHalClockTimerInitialize@0
_xHalClockTimerStop@0
_xHalCollectPmcCounters@8
_xHalConfigureLastBranchRecord@8
_xHalConnectSyntheticInterrupt@4
_xHalConnectThermalInterrupt@4
_xHalConvertAuxiliaryCounterToPerformanceCounter@16
_xHalConvertPerformanceCounterToAuxiliaryCounter@16
_xHalDmaCheckAdapterToken@4
_xHalDmaFreeCrashDumpRegisters@4
_xHalDmaLinkDeviceObjectByToken@8
_xHalDpGetInterruptReplayState@8
_xHalDpMaskLevelTriggeredInterrupts@0
_xHalDpReplaceBegin@8
_xHalDpReplaceControl@8
_xHalDpReplaceEnd@4
_xHalDpReplaceTarget@4
_xHalDpReplayInterrupts@4
_xHalDpUnmaskLevelTriggeredInterrupts@0
_xHalEndMirroring@4
_xHalEndOfBoot@0
_xHalEnumerateEnvironmentVariablesWithFilter@16
_xHalEnumerateUnmaskedInterrupts@12
_xHalFlushAndInvalidatePageExternalCache@8
_xHalFlushExternalCache@4
_xHalFlushIoBuffersExternalCache@8
_xHalFlushIoRectangleExternalCache@24
_xHalFreeMessageTarget@12
_xHalFreePmcCounterSet@4
_xHalGetClockConfiguration@4
_xHalGetInterruptTranslator@28
_xHalGetInterruptVector@24
_xHalGetIommuInterface@8
_xHalGetLastBranchInformation@8
_xHalGetProcessorId@12
_xHalGetProcessorStats@16
_xHalGetVectorInput@20
_xHalHaltSystem@0
_xHalInitPnpDriver@0
_xHalInitPowerManagement@8
_xHalInterruptGetHighestPriorityInterrupt@8
_xHalInterruptSetDestination@12
_xHalInterruptVectorDataToGsiv@8
_xHalIommuBeginDeviceReset@8
_xHalIommuBlockDevice@4
_xHalIommuDereferenceAsid@4
_xHalIommuDevicePowerChange@12
_xHalIommuDisableDevicePasid@8
_xHalIommuDmaRemappingCapable@8
_xHalIommuEnableDevicePasid@8
_xHalIommuFaultRoutine@4
_xHalIommuFinalizeDeviceReset@4
_xHalIommuFlushAllPasid@12
_xHalIommuFlushTb@12
_xHalIommuFreeLibraryContext@4
_xHalIommuGetConfiguration@16
_xHalIommuGetLibraryContext@12
_xHalIommuMapDevice@16
_xHalIommuProcessPageRequestQueue@4
_xHalIommuReferenceAsid@4
_xHalIommuRegisterDispatchTable@4
_xHalIommuServicePageFault@12
_xHalIommuSetAddressSpace@8
_xHalIommuSupportEnabled@0
_xHalIommuUnblockDevice@8
_xHalIommuUnmapDevice@8
_xHalIsEFIRuntimeActive@0
_xHalLoadMicrocode@4
_xHalLocateHiberRanges@4
_xHalMaskInterrupt@8
_xHalMirrorPhysicalMemory@16
_xHalMirrorVerify@16
_xHalNotifyProcessorFreeze@8
_xHalPciEarlyRestore@4
_xHalPciMarkHiberPhase@0
_xHalPciMultiStageResumeCapable@0
_xHalPostMicrocodeUpdate@0
_xHalPowerEarlyRestore@4
_xHalPowerSetRebootHandler@4
_xHalPrepareForBugcheck@4
_xHalPrepareProcessorForIdle@4
_xHalPreprocessNmi@4
_xHalProcessorFreeze@0
_xHalProcessorHalt@12
_xHalProcessorOff@0
_xHalProcessorOn@4
_xHalQueryAuxiliaryCounterFrequency@4
_xHalQueryBusSlots@16
_xHalQueryCapsuleCapabilities@16
_xHalQueryIoPortAccessSupported@0
_xHalQueryProcessorRestartEntryPoint@4
_xHalQuerySystemInformation@16
_xHalQueryWakeTime@8
_xHalReadWheaPhysicalMemory@16
_xHalRegisterBusHandler@32
_xHalRegisterLogRoutine@4
_xHalRemoveInterruptRemapping@24
_xHalReportIdleStateUsage@8
_xHalRequestGenericErrorRecovery@8
_xHalRequestInterrupt@4
_xHalRestoreHvEnlightenment@0
_xHalResumeLastBranchRecord@4
_xHalResumeProcessorFromIdle@0
_xHalSaveAndDisableHvEnlightenment@0
_xHalSecondaryInterruptQueryPrimaryInformation@8
_xHalSetSystemInformation@12
_xHalSetWakeAlarm@16
_xHalStartLastBranchRecord@8
_xHalStartMirroring@0
_xHalStopLastBranchRecord@4
_xHalStopLegacyUsbInterrupts@4
_xHalTimerGetReferencePage@0
_xHalTimerOnlyClockInterruptPending@0
_xHalTimerQueryAndResetRtcErrors@4
_xHalTimerQueryCycleCounter@4
_xHalTimerQueryHostPerformanceCounter@4
_xHalTimerWatchdogGeneratedLastReset@0
_xHalTimerWatchdogQueryDueTime@0
_xHalTimerWatchdogResetCountdown@0
_xHalTimerWatchdogStart@0
_xHalTimerWatchdogStop@0
_xHalTimerWatchdogTriggerSystemReset@4
_xHalTopologyQueryProcessorRelationships@28
_xHalTranslateBusAddress@24
_xHalTscSynchronization@8
_xHalUnloadMicrocode@0
_xHalUnmaskInterrupt@8
_xHalUpdateCapsule@16
_xHalVectorToIDTEntry@4
_xHalVectorToIDTEntryEx@4
_xHalWheaInitProcessorGenericSection@8
_xHalWriteWheaPhysicalMemory@16
_xHalpIsInterruptTypeSecondary@8
_xKdCheckPowerButton@0
_xKdEnumerateDebuggingDevices@12
_xKdGetAcpiTablePhase0@8
_xKdMapPhysicalMemory64@16
_xKdReleaseIntegratedDeviceForDebugging@4
_xKdReleasePciDeviceForDebugging@4
_xKdSetupIntegratedDeviceForDebugging@8
_xKdSetupPciDeviceForDebugging@8
_xKdUnmapVirtualAddress@12
_xKdWatchdogDelayExpiration@4
vdmDebugPoint
*/
